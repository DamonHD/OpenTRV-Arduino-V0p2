
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build4578976626639453436.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000058f8  0000598c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000058f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  00800132  00800132  000059be  2**0
                  ALLOC
  3 .debug_aranges 00000d60  00000000  00000000  000059be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001f1f  00000000  00000000  0000671e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000101b8  00000000  00000000  0000863d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000036dd  00000000  00000000  000187f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000e027  00000000  00000000  0001bed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001740  00000000  00000000  00029efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004a26  00000000  00000000  0002b63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007424  00000000  00000000  00030062  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00098324  00000000  00000000  00037486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  000cf7aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// Get 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position, 0 for coldest (most eco), 255 for hotest (comfort).
// Temp ranges from eco-1C to comfort+1C levels across full (reduced jitter) [0,255] pot range.
// Should be fastest computing values at extreme ends of range.
uint8_t computeWARMTargetC(const uint8_t pot)
       0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
// Sleep briefly in as lower-power mode as possible until the specified (watchdog) time expires, or another interrupt.
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
//   * allowPrematureWakeup if true then if woken before watchdog fires return false; default false
// Returns false if the watchdog timer did not go off.
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
bool nap(int_fast8_t watchdogSleep, bool allowPrematureWakeup)
       8:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
       c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
bool isAnySimpleScheduleSet()
      10:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>

// Reduced-noise temp pot value in range [0,255].
static uint8_t tempPotReducedNoise;

// Return previously-read (with readTempPot()) temperature pot user control level in range [0,1023]; very fast.
int getTempPot() { return(tempPot); }
      14:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
      18:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__vector_6>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      1c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      20:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      24:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_9>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      28:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      2c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      30:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      34:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      38:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      3c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      40:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__vector_16>
      44:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      48:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <__vector_18>
      4c:	0c 94 d5 26 	jmp	0x4daa	; 0x4daa <__vector_19>
      50:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      54:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__vector_21>
      58:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      5c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>
      60:	0c 94 44 24 	jmp	0x4888	; 0x4888 <__vector_24>
      64:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
      98:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
      a8:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

000000b6 <FHT8VCallForHeatPoll()::__c>:
      b6:	52 58 20 46 49 46 4f 20 70 72 6f 62 6c 65 6d 00     RX FIFO problem.

000000c6 <FHT8VCallForHeatPoll()::__c>:
      c6:	42 61 64 20 52 58 20 66 72 61 6d 65 00              Bad RX frame.

000000d3 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      d3:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000dc <FHT8VPollSyncAndTX_Next(bool)::__c>:
      dc:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
      ec:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
      fc:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

00000107 <doSync(bool)::__c>:
     107:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

00000118 <doSync(bool)::__c>:
     118:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000126 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
     126:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
     136:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

00000142 <FHT8VPollSyncAndTX_First(bool)::__c>:
     142:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

0000014b <FHT8VPollSyncAndTX_First(bool)::__c>:
     14b:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     15b:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

00000165 <RFM22CheckConnected()::__c>:
     165:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

00000176 <RFM22CheckConnected()::__c>:
     176:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     186:	6e 3a 20 00                                         n: .

0000018a <pollCLI(unsigned char)::__c>:
     18a:	4f 4b 00                                            OK.

0000018d <pollCLI(unsigned char)::__c>:
     18d:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

0000019b <pollCLI(unsigned char)::__c>:
     19b:	5a 61 70 70 65 64 2e 00                             Zapped..

000001a3 <pollCLI(unsigned char)::__c>:
     1a3:	53 6d 61 72 74 20 77 61 72 6d 69 6e 67 3a 20 00     Smart warming: .

000001b3 <pollCLI(unsigned char)::__c>:
     1b3:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

000001c1 <pollCLI(unsigned char)::__c>:
     1c1:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

000001d0 <dumpCLIUsage()::__c>:
     1d0:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

000001da <dumpCLIUsage()::__c>:
     1da:	63 6f 64 65 2f 62 6f 61 72 64 20 56 65 72 73 69     code/board Versi
     1ea:	6f 6e 00                                            on.

000001ed <dumpCLIUsage()::__c>:
     1ed:	57 61 72 6d 00                                      Warm.

000001f2 <dumpCLIUsage()::__c>:
     1f2:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000001ff <dumpCLIUsage()::__c>:
     1ff:	54 20 48 48 20 4d 4d 00                             T HH MM.

00000207 <dumpCLIUsage()::__c>:
     207:	73 68 6f 77 20 53 74 61 74 75 73 20 61 6e 64 20     show Status and 
     217:	73 6d 61 72 74 20 77 61 72 6d 69 6e 67 20 66 6f     smart warming fo
     227:	72 20 6e 65 78 74 20 32 34 68 00                    r next 24h.

00000232 <dumpCLIUsage()::__c>:
     232:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     242:	65 74 20 4e 00                                      et N.

00000247 <dumpCLIUsage()::__c>:
     247:	52 20 4e 00                                         R N.

0000024b <dumpCLIUsage()::__c>:
     24b:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

00000256 <dumpCLIUsage()::__c>:
     256:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

00000263 <dumpCLIUsage()::__c>:
     263:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     273:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

0000027e <dumpCLIUsage()::__c>:
     27e:	4f 20 50 50 00                                      O PP.

00000283 <dumpCLIUsage()::__c>:
     283:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     293:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     2a3:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

000002b4 <dumpCLIUsage()::__c>:
     2b4:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

000002be <dumpCLIUsage()::__c>:
     2be:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     2ce:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     2de:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     2ee:	68 65 64 75 6c 65 20 53 00                          hedule S.

000002f7 <dumpCLIUsage()::__c>:
     2f7:	4c 20 53 00                                         L S.

000002fb <dumpCLIUsage()::__c>:
     2fb:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     30b:	73 00                                               s.

0000030d <dumpCLIUsage()::__c>:
     30d:	73 65 74 20 77 69 72 65 6c 65 73 73 20 46 48 54     set wireless FHT
     31d:	38 56 20 48 6f 75 73 65 20 63 6f 64 65 73 20 31     8V House codes 1
     32d:	26 32 00                                            &2.

00000330 <dumpCLIUsage()::__c>:
     330:	48 20 48 31 20 48 32 00                             H H1 H2.

00000338 <dumpCLIUsage()::__c>:
     338:	46 72 6f 73 74 00                                   Frost.

0000033e <dumpCLIUsage()::__c>:
     33e:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

00000347 <dumpCLIUsage()::__c>:
     347:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000358 <dumpCLIUsage()::__c>:
     358:	44 20 4e 00                                         D N.

0000035c <dumpCLIUsage()::__c>:
     35c:	43 65 6e 74 72 61 6c 20 68 75 62 3a 20 6d 69 6e     Central hub: min
     36c:	69 6d 75 6d 20 4d 20 6d 69 6e 73 20 6f 6e 2c 20     imum M mins on, 
     37c:	30 20 6f 66 66 00                                   0 off.

00000382 <dumpCLIUsage()::__c>:
     382:	43 20 4d 00                                         C M.

00000386 <dumpCLIUsage()::__c>:
     386:	74 68 69 73 20 68 65 6c 70 00                       this help.

00000390 <dumpCLIUsage()::__c>:
     390:	43 4c 49 20 75 73 61 67 65 3a 00                    CLI usage:.

0000039b <InvalidIgnored()::__c>:
     39b:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     3ab:	2e 00                                               ..

000003ad <serialStatusReport()::__c>:
     3ad:	48 43 00                                            HC.

000003b0 <loop::__c>:
     3b0:	45 52 52 4f 52 3a 20 6c 6f 6f 70 28 29 20 6f 76     ERROR: loop() ov
     3c0:	65 72 72 75 6e 21 00                                errun!.

000003c7 <loop::__c>:
     3c7:	42 6f 69 6c 65 72 20 6f 6e 2c 20 73 20 6c 65 66     Boiler on, s lef
     3d7:	74 3a 20 00                                         t: .

000003db <loop::__c>:
     3db:	52 65 6d 6f 74 65 20 63 61 6c 6c 20 66 6f 72 20     Remote call for 
     3eb:	68 65 61 74 20 6f 66 66 00                          heat off.

000003f4 <loop::__c>:
     3f4:	52 65 6d 6f 74 65 20 63 61 6c 6c 20 66 6f 72 20     Remote call for 
     404:	68 65 61 74 20 6f 6e 00                             heat on.

0000040c <loop::__c>:
     40c:	46 48 54 38 56 20 52 58 20 65 72 72 20 00           FHT8V RX err .

0000041a <loop::__c>:
     41a:	43 61 6c 6c 20 66 6f 72 20 68 65 61 74 20 66 72     Call for heat fr
     42a:	6f 6d 20 00                                         om .

0000042e <setup::__c>:
     42e:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     43e:	66 6f 72 20 68 65 6c 70 00                          for help.

00000447 <setup::__c>:
     447:	73 6c 6f 77 20 52 54 43 20 63 6c 6f 63 6b 20 4f     slow RTC clock O
     457:	4b 00                                               K.

00000459 <setup::__c>:
     459:	58 54 41 4c 20 64 65 61 64 00                       XTAL dead.

00000463 <setup::__c>:
     463:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     473:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     483:	75 6e 6e 69 6e 67 21 00                             unning!.

0000048b <setup::__c>:
     48b:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     49b:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     4ab:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

000004b8 <setup::__c>:
     4b8:	6c 69 67 68 74 2f 74 65 6d 70 20 4f 4b 00           light/temp OK.

000004c6 <setup::__c>:
     4c6:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

000004cf <setup::__c>:
     4cf:	4c 20 73 74 75 63 6b 00                             L stuck.

000004d7 <setup::__c>:
     4d7:	4d 20 73 74 75 63 6b 00                             M stuck.

000004df <setup::__c>:
     4df:	74 65 6d 70 20 70 6f 74 3a 20 00                    temp pot: .

000004ea <setup::__c>:
     4ea:	74 65 6d 70 3a 20 00                                temp: .

000004f1 <setup::__c>:
     4f1:	6c 69 67 68 74 3a 20 00                             light: .

000004f9 <setup::__c>:
     4f9:	47 61 74 68 65 72 69 6e 67 20 69 6e 69 74 69 61     Gathering initia
     509:	6c 20 69 6e 70 75 74 73 20 61 6e 64 20 63 6f 6d     l inputs and com
     519:	70 75 74 69 6e 67 20 74 61 72 67 65 74 2f 64 65     puting target/de
     529:	6d 61 6e 64 2e 2e 2e 00                             mand....

00000531 <setup::__c>:
     531:	69 6e 74 65 72 6e 61 6c 20 73 65 6e 73 6f 72 73     internal sensors
     541:	20 4f 4b 2c 20 6e 65 78 74 20 6c 69 67 68 74 2f      OK, next light/
     551:	74 65 6d 70 2f 6f 74 68 65 72 00                    temp/other.

0000055c <setup::__c>:
     55c:	43 20 2f 20 00                                      C / .

00000561 <setup::__c>:
     561:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

0000056c <setup::__c>:
     56c:	6d 56 00                                            mV.

0000056f <setup::__c>:
     56f:	56 63 63 3a 20 00                                   Vcc: .

00000575 <setup::__c>:
     575:	52 46 4d 32 33 20 4f 4b 00                          RFM23 OK.

0000057e <setup::__c>:
     57e:	61 62 6f 75 74 20 74 6f 20 74 65 73 74 20 52 46     about to test RF
     58e:	4d 32 33 00                                         M23.

00000592 <setup::__c>:
     592:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

0000059d <setup::__c>:
     59d:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

000005ab <setup::__c>:
     5ab:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     5bb:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

000005ca <setup::__c>:
     5ca:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     5da:	67 3a 20 00                                         g: .

000005de <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5de:	3a 20 00                                            : .

000005e1 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5e1:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000005eb <serialPrintlnBuildVersion()::__c>:
     5eb:	20 31 35 3a 31 30 3a 32 32 00                        15:10:22.

000005f5 <serialPrintlnBuildVersion()::__c>:
     5f5:	3b 20 63 6f 64 65 20 00                             ; code .

000005fd <serialPrintlnBuildVersion()::__c>:
     5fd:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

0000060c <port_to_mode_PGM>:
     60c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000616 <port_to_output_PGM>:
     616:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000620 <port_to_input_PGM>:
     620:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000062a <digital_pin_to_port_PGM>:
     62a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     63a:	03 03 03 03                                         ....

0000063e <digital_pin_to_bit_mask_PGM>:
     63e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     64e:	04 08 10 20                                         ... 

00000652 <digital_pin_to_timer_PGM>:
     652:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     662:	00 00 00 00                                         ....

00000666 <__ctors_start>:
     666:	11 11       	cpse	r17, r1
     668:	a4 1d       	adc	r26, r4
     66a:	e0 22       	and	r14, r16
     66c:	9e 28       	or	r9, r14

0000066e <__ctors_end>:
     66e:	11 24       	eor	r1, r1
     670:	1f be       	out	0x3f, r1	; 63
     672:	cf ef       	ldi	r28, 0xFF	; 255
     674:	d8 e0       	ldi	r29, 0x08	; 8
     676:	de bf       	out	0x3e, r29	; 62
     678:	cd bf       	out	0x3d, r28	; 61

0000067a <__do_copy_data>:
     67a:	11 e0       	ldi	r17, 0x01	; 1
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b1 e0       	ldi	r27, 0x01	; 1
     680:	e8 ef       	ldi	r30, 0xF8	; 248
     682:	f8 e5       	ldi	r31, 0x58	; 88
     684:	02 c0       	rjmp	.+4      	; 0x68a <.do_copy_data_start>

00000686 <.do_copy_data_loop>:
     686:	05 90       	lpm	r0, Z+
     688:	0d 92       	st	X+, r0

0000068a <.do_copy_data_start>:
     68a:	a2 33       	cpi	r26, 0x32	; 50
     68c:	b1 07       	cpc	r27, r17
     68e:	d9 f7       	brne	.-10     	; 0x686 <.do_copy_data_loop>

00000690 <__do_clear_bss>:
     690:	13 e0       	ldi	r17, 0x03	; 3
     692:	a2 e3       	ldi	r26, 0x32	; 50
     694:	b1 e0       	ldi	r27, 0x01	; 1
     696:	01 c0       	rjmp	.+2      	; 0x69a <.do_clear_bss_start>

00000698 <.do_clear_bss_loop>:
     698:	1d 92       	st	X+, r1

0000069a <.do_clear_bss_start>:
     69a:	ad 34       	cpi	r26, 0x4D	; 77
     69c:	b1 07       	cpc	r27, r17
     69e:	e1 f7       	brne	.-8      	; 0x698 <.do_clear_bss_loop>

000006a0 <__do_global_ctors>:
     6a0:	16 e0       	ldi	r17, 0x06	; 6
     6a2:	ce e6       	ldi	r28, 0x6E	; 110
     6a4:	d6 e0       	ldi	r29, 0x06	; 6
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <.do_global_ctors_start>

000006a8 <.do_global_ctors_loop>:
     6a8:	22 97       	sbiw	r28, 0x02	; 2
     6aa:	fe 01       	movw	r30, r28
     6ac:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__tablejump__>

000006b0 <.do_global_ctors_start>:
     6b0:	c6 36       	cpi	r28, 0x66	; 102
     6b2:	d1 07       	cpc	r29, r17
     6b4:	c9 f7       	brne	.-14     	; 0x6a8 <.do_global_ctors_loop>
     6b6:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <main>
     6ba:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <_exit>

000006be <__bad_interrupt>:
     6be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006c2 <abort>:
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	f8 94       	cli
     6c8:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <_exit>

000006cc <atoi>:
     6cc:	fc 01       	movw	r30, r24
     6ce:	88 27       	eor	r24, r24
     6d0:	99 27       	eor	r25, r25
     6d2:	e8 94       	clt
     6d4:	21 91       	ld	r18, Z+
     6d6:	20 32       	cpi	r18, 0x20	; 32
     6d8:	e9 f3       	breq	.-6      	; 0x6d4 <atoi+0x8>
     6da:	29 30       	cpi	r18, 0x09	; 9
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <atoi+0x16>
     6de:	2e 30       	cpi	r18, 0x0E	; 14
     6e0:	c8 f3       	brcs	.-14     	; 0x6d4 <atoi+0x8>
     6e2:	2b 32       	cpi	r18, 0x2B	; 43
     6e4:	41 f0       	breq	.+16     	; 0x6f6 <atoi+0x2a>
     6e6:	2d 32       	cpi	r18, 0x2D	; 45
     6e8:	39 f4       	brne	.+14     	; 0x6f8 <atoi+0x2c>
     6ea:	68 94       	set
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <atoi+0x2a>
     6ee:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulhi_const_10>
     6f2:	82 0f       	add	r24, r18
     6f4:	91 1d       	adc	r25, r1
     6f6:	21 91       	ld	r18, Z+
     6f8:	20 53       	subi	r18, 0x30	; 48
     6fa:	2a 30       	cpi	r18, 0x0A	; 10
     6fc:	c0 f3       	brcs	.-16     	; 0x6ee <atoi+0x22>
     6fe:	1e f4       	brtc	.+6      	; 0x706 <atoi+0x3a>
     700:	90 95       	com	r25
     702:	81 95       	neg	r24
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	08 95       	ret

00000708 <strlen_P>:
     708:	fc 01       	movw	r30, r24
     70a:	05 90       	lpm	r0, Z+
     70c:	00 20       	and	r0, r0
     70e:	e9 f7       	brne	.-6      	; 0x70a <strlen_P+0x2>
     710:	80 95       	com	r24
     712:	90 95       	com	r25
     714:	8e 0f       	add	r24, r30
     716:	9f 1f       	adc	r25, r31
     718:	08 95       	ret

0000071a <strtok_r>:
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	31 f4       	brne	.+12     	; 0x72a <strtok_r+0x10>
     71e:	da 01       	movw	r26, r20
     720:	8d 91       	ld	r24, X+
     722:	9c 91       	ld	r25, X
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	09 f4       	brne	.+2      	; 0x72a <strtok_r+0x10>
     728:	0e c0       	rjmp	.+28     	; 0x746 <strtok_r+0x2c>
     72a:	dc 01       	movw	r26, r24
     72c:	fb 01       	movw	r30, r22
     72e:	3d 91       	ld	r19, X+
     730:	21 91       	ld	r18, Z+
     732:	22 23       	and	r18, r18
     734:	19 f0       	breq	.+6      	; 0x73c <strtok_r+0x22>
     736:	32 17       	cp	r19, r18
     738:	c9 f3       	breq	.-14     	; 0x72c <strtok_r+0x12>
     73a:	fa cf       	rjmp	.-12     	; 0x730 <strtok_r+0x16>
     73c:	33 23       	and	r19, r19
     73e:	31 f4       	brne	.+12     	; 0x74c <strtok_r+0x32>
     740:	da 01       	movw	r26, r20
     742:	1d 92       	st	X+, r1
     744:	1c 92       	st	X, r1
     746:	88 27       	eor	r24, r24
     748:	99 27       	eor	r25, r25
     74a:	08 95       	ret
     74c:	11 97       	sbiw	r26, 0x01	; 1
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	fb 01       	movw	r30, r22
     754:	3d 91       	ld	r19, X+
     756:	21 91       	ld	r18, Z+
     758:	32 17       	cp	r19, r18
     75a:	71 f4       	brne	.+28     	; 0x778 <strtok_r+0x5e>
     75c:	33 23       	and	r19, r19
     75e:	21 f4       	brne	.+8      	; 0x768 <strtok_r+0x4e>
     760:	88 27       	eor	r24, r24
     762:	99 27       	eor	r25, r25
     764:	11 97       	sbiw	r26, 0x01	; 1
     766:	02 c0       	rjmp	.+4      	; 0x76c <strtok_r+0x52>
     768:	1e 92       	st	-X, r1
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	fa 01       	movw	r30, r20
     76e:	a1 93       	st	Z+, r26
     770:	b0 83       	st	Z, r27
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	08 95       	ret
     778:	22 23       	and	r18, r18
     77a:	69 f7       	brne	.-38     	; 0x756 <strtok_r+0x3c>
     77c:	ea cf       	rjmp	.-44     	; 0x752 <strtok_r+0x38>

0000077e <strupr>:
     77e:	dc 01       	movw	r26, r24
     780:	6c 91       	ld	r22, X
     782:	61 56       	subi	r22, 0x61	; 97
     784:	6a 31       	cpi	r22, 0x1A	; 26
     786:	08 f0       	brcs	.+2      	; 0x78a <strupr+0xc>
     788:	60 5e       	subi	r22, 0xE0	; 224
     78a:	6f 5b       	subi	r22, 0xBF	; 191
     78c:	6d 93       	st	X+, r22
     78e:	c1 f7       	brne	.-16     	; 0x780 <strupr+0x2>
     790:	08 95       	ret

00000792 <__eerd_word>:
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	7b 01       	movw	r14, r22
     79e:	8c 01       	movw	r16, r24
     7a0:	fb 01       	movw	r30, r22
     7a2:	09 95       	icall
     7a4:	d8 2e       	mov	r13, r24
     7a6:	c8 01       	movw	r24, r16
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	f7 01       	movw	r30, r14
     7ac:	09 95       	icall
     7ae:	98 2f       	mov	r25, r24
     7b0:	8d 2d       	mov	r24, r13
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	08 95       	ret

000007be <__eewr_word>:
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	d7 2e       	mov	r13, r23
     7ca:	7a 01       	movw	r14, r20
     7cc:	8c 01       	movw	r16, r24
     7ce:	fa 01       	movw	r30, r20
     7d0:	09 95       	icall
     7d2:	c8 01       	movw	r24, r16
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	6d 2d       	mov	r22, r13
     7d8:	f7 01       	movw	r30, r14
     7da:	09 95       	icall
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	08 95       	ret

000007e8 <__mulhi_const_10>:
     7e8:	7a e0       	ldi	r23, 0x0A	; 10
     7ea:	97 9f       	mul	r25, r23
     7ec:	90 2d       	mov	r25, r0
     7ee:	87 9f       	mul	r24, r23
     7f0:	80 2d       	mov	r24, r0
     7f2:	91 0d       	add	r25, r1
     7f4:	11 24       	eor	r1, r1
     7f6:	08 95       	ret

000007f8 <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     7f8:	80 91 32 01 	lds	r24, 0x0132
     7fc:	08 95       	ret

000007fe <getAmbientLight()>:

// Ambient light levels in range [0,1023].
static int ambientLightLevel;

// Return previously-read (with readAmbientLight()) ambient light level in range [0,1023]; very fast.
int getAmbientLight() { return(ambientLightLevel); }
     7fe:	80 91 33 01 	lds	r24, 0x0133
     802:	90 91 34 01 	lds	r25, 0x0134
     806:	08 95       	ret

00000808 <readAmbientLight()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
int readAmbientLight()
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <power_intermittent_peripherals_enable(bool)>
  const int al = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vcc reference.
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <analogueNoiseReducedRead(int, unsigned char)>
     81c:	ec 01       	movw	r28, r24
  power_intermittent_peripherals_disable();
     81e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <power_intermittent_peripherals_disable()>

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Adjust room-lit flag, with hysteresis.
  if(al < LDR_THR_LOW)
     822:	c2 33       	cpi	r28, 0x32	; 50
     824:	d1 05       	cpc	r29, r1
     826:	1c f4       	brge	.+6      	; 0x82e <readAmbientLight()+0x26>
    { isRoomLitFlag = false; }
     828:	10 92 32 01 	sts	0x0132, r1
     82c:	12 c0       	rjmp	.+36     	; 0x852 <readAmbientLight()+0x4a>
  else if(al > LDR_THR_HIGH)
     82e:	c7 34       	cpi	r28, 0x47	; 71
     830:	d1 05       	cpc	r29, r1
     832:	7c f0       	brlt	.+30     	; 0x852 <readAmbientLight()+0x4a>
    {
    // Take sharp transition from dark to light as possible indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (ambientLightLevel < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
     834:	80 91 32 01 	lds	r24, 0x0132
     838:	88 23       	and	r24, r24
     83a:	41 f4       	brne	.+16     	; 0x84c <readAmbientLight()+0x44>
     83c:	80 91 33 01 	lds	r24, 0x0133
     840:	90 91 34 01 	lds	r25, 0x0134
     844:	c2 97       	sbiw	r24, 0x32	; 50
     846:	14 f4       	brge	.+4      	; 0x84c <readAmbientLight()+0x44>
     848:	0e 94 84 06 	call	0xd08	; 0xd08 <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 32 01 	sts	0x0132, r24
    }

  // Store new value.
  ambientLightLevel = al;
     852:	d0 93 34 01 	sts	0x0134, r29
     856:	c0 93 33 01 	sts	0x0133, r28
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(al);
  }
     85a:	ce 01       	movw	r24, r28
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <getTRVPercentOpen()>:
#include "Temp_Pot.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     862:	80 91 3d 01 	lds	r24, 0x013D
     866:	08 95       	ret

00000868 <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     868:	80 91 3c 01 	lds	r24, 0x013C
     86c:	08 95       	ret

0000086e <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     86e:	f9 99       	sbic	0x1f, 1	; 31
     870:	fe cf       	rjmp	.-4      	; 0x86e <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     872:	82 e1       	ldi	r24, 0x12	; 18
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	92 bd       	out	0x22, r25	; 34
     878:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     87a:	f8 9a       	sbi	0x1f, 0	; 31
     87c:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     87e:	80 95       	com	r24
     880:	08 95       	ret

00000882 <isLikelyOccupied()>:

// Returns true if the room appears to be likely occupied (with active users) now or recently.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Do not call from an ISR.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     882:	80 91 3b 01 	lds	r24, 0x013B
     886:	81 11       	cpse	r24, r1
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret

0000088c <isLikelyRecentlyOccupied()>:
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Do not call from an ISR.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	80 91 3b 01 	lds	r24, 0x013B
     892:	87 31       	cpi	r24, 0x17	; 23
     894:	08 f0       	brcs	.+2      	; 0x898 <isLikelyRecentlyOccupied()+0xc>
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	89 2f       	mov	r24, r25
     89a:	08 95       	ret

0000089c <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     89c:	8d e2       	ldi	r24, 0x2D	; 45
     89e:	80 93 3b 01 	sts	0x013B, r24
     8a2:	08 95       	ret

000008a4 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     8a4:	65 30       	cpi	r22, 0x05	; 5
     8a6:	98 f4       	brcc	.+38     	; 0x8ce <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     8a8:	88 31       	cpi	r24, 0x18	; 24
     8aa:	88 f4       	brcc	.+34     	; 0x8ce <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8ac:	f9 99       	sbic	0x1f, 1	; 31
     8ae:	fe cf       	rjmp	.-4      	; 0x8ac <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8b0:	28 2f       	mov	r18, r24
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	20 50       	subi	r18, 0x00	; 0
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	88 e1       	ldi	r24, 0x18	; 24
     8ba:	68 9f       	mul	r22, r24
     8bc:	c0 01       	movw	r24, r0
     8be:	11 24       	eor	r1, r1
     8c0:	28 0f       	add	r18, r24
     8c2:	39 1f       	adc	r19, r25
     8c4:	32 bd       	out	0x22, r19	; 34
     8c6:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8c8:	f8 9a       	sbi	0x1f, 0	; 31
     8ca:	80 b5       	in	r24, 0x20	; 32
     8cc:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
  }
     8d0:	08 95       	ret

000008d2 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     8d2:	18 16       	cp	r1, r24
     8d4:	19 06       	cpc	r1, r25
     8d6:	14 f0       	brlt	.+4      	; 0x8dc <compressTempC16(int)+0xa>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     8dc:	8f 3f       	cpi	r24, 0xFF	; 255
     8de:	91 05       	cpc	r25, r1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <compressTempC16(int)+0x12>
     8e2:	34 f4       	brge	.+12     	; 0x8f0 <compressTempC16(int)+0x1e>
     8e4:	43 e0       	ldi	r20, 0x03	; 3
     8e6:	95 95       	asr	r25
     8e8:	87 95       	ror	r24
     8ea:	4a 95       	dec	r20
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <compressTempC16(int)+0x14>
     8ee:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     8f0:	21 e0       	ldi	r18, 0x01	; 1
     8f2:	80 38       	cpi	r24, 0x80	; 128
     8f4:	92 07       	cpc	r25, r18
     8f6:	34 f4       	brge	.+12     	; 0x904 <__stack+0x5>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     8f8:	80 50       	subi	r24, 0x00	; 0
     8fa:	91 40       	sbci	r25, 0x01	; 1
     8fc:	95 95       	asr	r25
     8fe:	87 95       	ror	r24
     900:	80 5e       	subi	r24, 0xE0	; 224
     902:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     904:	26 e0       	ldi	r18, 0x06	; 6
     906:	80 34       	cpi	r24, 0x40	; 64
     908:	92 07       	cpc	r25, r18
     90a:	14 f0       	brlt	.+4      	; 0x910 <__stack+0x11>
     90c:	88 ef       	ldi	r24, 0xF8	; 248
     90e:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     910:	80 58       	subi	r24, 0x80	; 128
     912:	91 40       	sbci	r25, 0x01	; 1
     914:	23 e0       	ldi	r18, 0x03	; 3
     916:	95 95       	asr	r25
     918:	87 95       	ror	r24
     91a:	2a 95       	dec	r18
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0x17>
     91e:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     920:	08 95       	ret

00000922 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     922:	80 32       	cpi	r24, 0x20	; 32
     924:	40 f4       	brcc	.+16     	; 0x936 <expandTempC16(unsigned char)+0x14>
     926:	28 2f       	mov	r18, r24
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	73 e0       	ldi	r23, 0x03	; 3
     92c:	22 0f       	add	r18, r18
     92e:	33 1f       	adc	r19, r19
     930:	7a 95       	dec	r23
     932:	e1 f7       	brne	.-8      	; 0x92c <expandTempC16(unsigned char)+0xa>
     934:	17 c0       	rjmp	.+46     	; 0x964 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     936:	80 36       	cpi	r24, 0x60	; 96
     938:	38 f4       	brcc	.+14     	; 0x948 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     93a:	28 2f       	mov	r18, r24
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	20 54       	subi	r18, 0x40	; 64
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	0e c0       	rjmp	.+28     	; 0x964 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     948:	89 3f       	cpi	r24, 0xF9	; 249
     94a:	18 f0       	brcs	.+6      	; 0x952 <expandTempC16(unsigned char)+0x30>
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	3f e7       	ldi	r19, 0x7F	; 127
     950:	09 c0       	rjmp	.+18     	; 0x964 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	53 e0       	ldi	r21, 0x03	; 3
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	5a 95       	dec	r21
     95e:	e1 f7       	brne	.-8      	; 0x958 <expandTempC16(unsigned char)+0x36>
     960:	20 58       	subi	r18, 0x80	; 128
     962:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     964:	c9 01       	movw	r24, r18
     966:	08 95       	ret

00000968 <getMinValvePcReallyOpen()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     968:	f9 99       	sbic	0x1f, 1	; 31
     96a:	fe cf       	rjmp	.-4      	; 0x968 <getMinValvePcReallyOpen()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     96c:	83 e1       	ldi	r24, 0x13	; 19
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	92 bd       	out	0x22, r25	; 34
     972:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     974:	f8 9a       	sbi	0x1f, 0	; 31
     976:	90 b5       	in	r25, 0x20	; 32
// At the boiler hub this is also the threshold precentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
uint8_t getMinValvePcReallyOpen()
  {
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  if((stored > 0) && (stored <= 100)) { return(stored); }
     978:	89 2f       	mov	r24, r25
     97a:	81 50       	subi	r24, 0x01	; 1
     97c:	84 36       	cpi	r24, 0x64	; 100
     97e:	08 f0       	brcs	.+2      	; 0x982 <getMinValvePcReallyOpen()+0x1a>
     980:	9a e0       	ldi	r25, 0x0A	; 10
  return(DEFAULT_MIN_VALVE_PC_REALLY_OPEN);
  }
     982:	89 2f       	mov	r24, r25
     984:	08 95       	ret

00000986 <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	8c 01       	movw	r16, r24
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
     994:	ce 01       	movw	r24, r28
     996:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
     99a:	88 23       	and	r24, r24
     99c:	29 f0       	breq	.+10     	; 0x9a8 <zapStats(unsigned int)+0x22>
     99e:	01 50       	subi	r16, 0x01	; 1
     9a0:	10 40       	sbci	r17, 0x00	; 0
     9a2:	11 f4       	brne	.+4      	; 0x9a8 <zapStats(unsigned int)+0x22>
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
     9a8:	21 96       	adiw	r28, 0x01	; 1
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	c8 37       	cpi	r28, 0x78	; 120
     9ae:	d8 07       	cpc	r29, r24
     9b0:	89 f7       	brne	.-30     	; 0x994 <zapStats(unsigned int)+0xe>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <setMinValvePcReallyOpen(unsigned char)>:
  }

// Set percent open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void setMinValvePcReallyOpen(uint8_t percent)
     9be:	68 2f       	mov	r22, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	84 36       	cpi	r24, 0x64	; 100
     9c4:	10 f4       	brcc	.+4      	; 0x9ca <setMinValvePcReallyOpen(unsigned char)+0xc>
     9c6:	6a 30       	cpi	r22, 0x0A	; 10
     9c8:	29 f4       	brne	.+10     	; 0x9d4 <setMinValvePcReallyOpen(unsigned char)+0x16>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
     9ca:	83 e1       	ldi	r24, 0x13	; 19
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
     9d2:	08 95       	ret
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
     9d4:	83 e1       	ldi	r24, 0x13	; 19
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     9dc:	08 95       	ret

000009de <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     9de:	68 2f       	mov	r22, r24
     9e0:	60 95       	com	r22
     9e2:	82 e1       	ldi	r24, 0x12	; 18
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     9ea:	08 95       	ret

000009ec <hasEcoBias()>:
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
#ifndef hasEcoBias // If not a macro...
#if defined(TEMP_POT_AVAILABLE)
// Optimisiation/simplication: true if temp pot less than half way.
bool hasEcoBias() { return(getTempPotReducedNoise() < 128); }
     9ec:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <getTempPotReducedNoise()>
     9f0:	80 95       	com	r24
     9f2:	88 1f       	adc	r24, r24
     9f4:	88 27       	eor	r24, r24
     9f6:	88 1f       	adc	r24, r24
     9f8:	08 95       	ret

000009fa <getFROSTTargetC()>:
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Crudely select between eco/comfort FROST levels at the half-way mark.
  // Should not be critical enough to worry over.
  if(!hasEcoBias()) { return(BIASCOM_FROST); }
     9fa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <hasEcoBias()>
     9fe:	88 23       	and	r24, r24
     a00:	11 f0       	breq	.+4      	; 0xa06 <getFROSTTargetC()+0xc>
     a02:	85 e0       	ldi	r24, 0x05	; 5
     a04:	08 95       	ret
     a06:	8a e0       	ldi	r24, 0x0A	; 10
  return(BIASECO_FROST); // Default is 'eco' notion of frost protection.
  }
     a08:	08 95       	ret

00000a0a <getWARMTargetC()>:
// Exposed implementation.
// Uses cache to avoid expensive recomputation.
// NOT safe in face of interrupts.
uint8_t getWARMTargetC()
  {
  const uint8_t pot = getTempPotReducedNoise();
     a0a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <getTempPotReducedNoise()>
     a0e:	28 2f       	mov	r18, r24
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     a10:	80 91 3f 01 	lds	r24, 0x013F
     a14:	82 17       	cp	r24, r18
     a16:	21 f4       	brne	.+8      	; 0xa20 <getWARMTargetC()+0x16>
     a18:	80 91 3e 01 	lds	r24, 0x013E
     a1c:	88 23       	and	r24, r24
     a1e:	79 f4       	brne	.+30     	; 0xa3e <getWARMTargetC()+0x34>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
     a20:	26 3d       	cpi	r18, 0xD6	; 214
     a22:	10 f0       	brcs	.+4      	; 0xa28 <getWARMTargetC()+0x1e>
     a24:	85 e1       	ldi	r24, 0x15	; 21
     a26:	07 c0       	rjmp	.+14     	; 0xa36 <getWARMTargetC()+0x2c>
     a28:	9a e2       	ldi	r25, 0x2A	; 42
     a2a:	80 e1       	ldi	r24, 0x10	; 16
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <getWARMTargetC()+0x28>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
     a2e:	96 5d       	subi	r25, 0xD6	; 214
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	92 17       	cp	r25, r18
     a34:	e0 f3       	brcs	.-8      	; 0xa2e <getWARMTargetC()+0x24>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     a36:	80 93 3e 01 	sts	0x013E, r24
    potLast = pot;
     a3a:	20 93 3f 01 	sts	0x013F, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     a3e:	08 95       	ret

00000a40 <shouldBeWarmedAtHour(unsigned char)>:

// Returns true iff room likely to be occupied and need warming at the specified hour's sample point based on collected stats.
// Used for predictively warming a room in smart mode and for choosing setback depths.
// Returns false if no good evidence to warm the room at the given time based on past history over about one week.
//   * hh hour to check for predictive warming [0,23]
bool shouldBeWarmedAtHour(const uint_least8_t hh)
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
  {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Return false if the sample hour's historic ambient light level falls in the bottom quartile.
  // Thus avoid any 'smart' warming for at least 25% of the daily cycle.
  const uint8_t smoothedAmbLight = eeprom_read_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh));
     a44:	48 2f       	mov	r20, r24
     a46:	50 e0       	ldi	r21, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a48:	f9 99       	sbic	0x1f, 1	; 31
     a4a:	fe cf       	rjmp	.-4      	; 0xa48 <shouldBeWarmedAtHour(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a4c:	48 5b       	subi	r20, 0xB8	; 184
     a4e:	5e 4f       	sbci	r21, 0xFE	; 254
     a50:	52 bd       	out	0x22, r21	; 34
     a52:	41 bd       	out	0x21, r20	; 33
     a54:	48 54       	subi	r20, 0x48	; 72
     a56:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a58:	f8 9a       	sbi	0x1f, 0	; 31
     a5a:	60 b5       	in	r22, 0x20	; 32
     a5c:	28 e4       	ldi	r18, 0x48	; 72
     a5e:	31 e0       	ldi	r19, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a62:	f9 99       	sbic	0x1f, 1	; 31
     a64:	fe cf       	rjmp	.-4      	; 0xa62 <shouldBeWarmedAtHour(unsigned char)+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a66:	32 bd       	out	0x22, r19	; 34
     a68:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a6a:	f8 9a       	sbi	0x1f, 0	; 31
     a6c:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full days' worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     a6e:	68 17       	cp	r22, r24
     a70:	20 f4       	brcc	.+8      	; 0xa7a <shouldBeWarmedAtHour(unsigned char)+0x3a>
     a72:	9f 5f       	subi	r25, 0xFF	; 255
     a74:	92 31       	cpi	r25, 0x12	; 18
     a76:	08 f0       	brcs	.+2      	; 0xa7a <shouldBeWarmedAtHour(unsigned char)+0x3a>
     a78:	55 c0       	rjmp	.+170    	; 0xb24 <shouldBeWarmedAtHour(unsigned char)+0xe4>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     a7a:	2f 5f       	subi	r18, 0xFF	; 255
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	20 36       	cpi	r18, 0x60	; 96
     a82:	38 07       	cpc	r19, r24
     a84:	71 f7       	brne	.-36     	; 0xa62 <shouldBeWarmedAtHour(unsigned char)+0x22>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a86:	f9 99       	sbic	0x1f, 1	; 31
     a88:	fe cf       	rjmp	.-4      	; 0xa86 <shouldBeWarmedAtHour(unsigned char)+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a8a:	40 5a       	subi	r20, 0xA0	; 160
     a8c:	5e 4f       	sbci	r21, 0xFE	; 254
     a8e:	52 bd       	out	0x22, r21	; 34
     a90:	41 bd       	out	0x21, r20	; 33
     a92:	40 56       	subi	r20, 0x60	; 96
     a94:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a96:	f8 9a       	sbi	0x1f, 0	; 31
     a98:	80 b5       	in	r24, 0x20	; 32
#endif

  // Return false if no WARM mode this hour for the last week (ie the unit needs reminding at least once per week).
  // Return true if this hour was in WARM mode yesterday or a week ago, and at least one other day.
  const uint8_t warmHistory = eeprom_read_byte((uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh));
  if(0 == (0x80 & warmHistory)) // This hour has a history.
     a9a:	87 fd       	sbrc	r24, 7
     a9c:	0e c0       	rjmp	.+28     	; 0xaba <shouldBeWarmedAtHour(unsigned char)+0x7a>
    {
    if(0 == warmHistory) // No explicit WARM for a week at this hour, so prevent 'smart' warming.
     a9e:	88 23       	and	r24, r24
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <shouldBeWarmedAtHour(unsigned char)+0x64>
     aa2:	40 c0       	rjmp	.+128    	; 0xb24 <shouldBeWarmedAtHour(unsigned char)+0xe4>
      { return(false); }
    if((0 != (0x41 & warmHistory)) && (0 != (0x3e & warmHistory)))
     aa4:	28 2f       	mov	r18, r24
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	c9 01       	movw	r24, r18
     aaa:	81 74       	andi	r24, 0x41	; 65
     aac:	90 70       	andi	r25, 0x00	; 0
     aae:	89 2b       	or	r24, r25
     ab0:	21 f0       	breq	.+8      	; 0xaba <shouldBeWarmedAtHour(unsigned char)+0x7a>
     ab2:	2e 73       	andi	r18, 0x3E	; 62
     ab4:	30 70       	andi	r19, 0x00	; 0
     ab6:	23 2b       	or	r18, r19
     ab8:	99 f5       	brne	.+102    	; 0xb20 <shouldBeWarmedAtHour(unsigned char)+0xe0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     aba:	f9 99       	sbic	0x1f, 1	; 31
     abc:	fe cf       	rjmp	.-4      	; 0xaba <shouldBeWarmedAtHour(unsigned char)+0x7a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     abe:	48 5e       	subi	r20, 0xE8	; 232
     ac0:	5e 4f       	sbci	r21, 0xFE	; 254
     ac2:	52 bd       	out	0x22, r21	; 34
     ac4:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ac6:	f8 9a       	sbi	0x1f, 0	; 31
     ac8:	80 b5       	in	r24, 0x20	; 32

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     aca:	80 32       	cpi	r24, 0x20	; 32
     acc:	40 f4       	brcc	.+16     	; 0xade <shouldBeWarmedAtHour(unsigned char)+0x9e>
     ace:	c8 2f       	mov	r28, r24
     ad0:	d0 e0       	ldi	r29, 0x00	; 0
     ad2:	b3 e0       	ldi	r27, 0x03	; 3
     ad4:	cc 0f       	add	r28, r28
     ad6:	dd 1f       	adc	r29, r29
     ad8:	ba 95       	dec	r27
     ada:	e1 f7       	brne	.-8      	; 0xad4 <shouldBeWarmedAtHour(unsigned char)+0x94>
     adc:	14 c0       	rjmp	.+40     	; 0xb06 <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     ade:	80 36       	cpi	r24, 0x60	; 96
     ae0:	38 f4       	brcc	.+14     	; 0xaf0 <shouldBeWarmedAtHour(unsigned char)+0xb0>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     ae2:	c8 2f       	mov	r28, r24
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	cc 0f       	add	r28, r28
     ae8:	dd 1f       	adc	r29, r29
     aea:	c0 54       	subi	r28, 0x40	; 64
     aec:	df 4f       	sbci	r29, 0xFF	; 255
     aee:	0b c0       	rjmp	.+22     	; 0xb06 <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     af0:	89 3f       	cpi	r24, 0xF9	; 249
     af2:	c0 f4       	brcc	.+48     	; 0xb24 <shouldBeWarmedAtHour(unsigned char)+0xe4>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     af4:	c8 2f       	mov	r28, r24
     af6:	d0 e0       	ldi	r29, 0x00	; 0
     af8:	f3 e0       	ldi	r31, 0x03	; 3
     afa:	cc 0f       	add	r28, r28
     afc:	dd 1f       	adc	r29, r29
     afe:	fa 95       	dec	r31
     b00:	e1 f7       	brne	.-8      	; 0xafa <shouldBeWarmedAtHour(unsigned char)+0xba>
     b02:	c0 58       	subi	r28, 0x80	; 128
     b04:	d1 40       	sbci	r29, 0x01	; 1
  DEBUG_SERIAL_PRINT(hh);
  DEBUG_SERIAL_PRINT_FLASHSTRING("h is ");
  DEBUG_SERIAL_PRINT(smoothedTempHHNext >> 4);
  DEBUG_SERIAL_PRINTLN();
#endif
  if((STATS_UNSET_INT != smoothedTempHHNext) && (((smoothedTempHHNext+8)>>4) >= getWARMTargetC()))
     b06:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	28 96       	adiw	r28, 0x08	; 8
     b0e:	e4 e0       	ldi	r30, 0x04	; 4
     b10:	d5 95       	asr	r29
     b12:	c7 95       	ror	r28
     b14:	ea 95       	dec	r30
     b16:	e1 f7       	brne	.-8      	; 0xb10 <shouldBeWarmedAtHour(unsigned char)+0xd0>
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	c8 17       	cp	r28, r24
     b1c:	d9 07       	cpc	r29, r25
     b1e:	1c f0       	brlt	.+6      	; 0xb26 <shouldBeWarmedAtHour(unsigned char)+0xe6>
     b20:	21 e0       	ldi	r18, 0x01	; 1
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <shouldBeWarmedAtHour(unsigned char)+0xe6>
     b24:	20 e0       	ldi	r18, 0x00	; 0
    { return(true); }

  // No good evidence for room to be warmed for specified hour.
  return(false);
  }
     b26:	82 2f       	mov	r24, r18
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	18 2f       	mov	r17, r24
     b34:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     b36:	86 17       	cp	r24, r22
     b38:	b9 f0       	breq	.+46     	; 0xb68 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     b3a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     b3e:	21 2f       	mov	r18, r17
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	a9 01       	movw	r20, r18
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	9a 95       	dec	r25
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     b4e:	42 1b       	sub	r20, r18
     b50:	53 0b       	sbc	r21, r19
     b52:	87 70       	andi	r24, 0x07	; 7
     b54:	48 0f       	add	r20, r24
     b56:	51 1d       	adc	r21, r1
     b58:	40 0f       	add	r20, r16
     b5a:	51 1d       	adc	r21, r1
     b5c:	13 e0       	ldi	r17, 0x03	; 3
     b5e:	56 95       	lsr	r21
     b60:	47 95       	ror	r20
     b62:	1a 95       	dec	r17
     b64:	e1 f7       	brne	.-8      	; 0xb5e <smoothStatsValue(unsigned char, unsigned char)+0x30>
     b66:	14 2f       	mov	r17, r20
  }
     b68:	81 2f       	mov	r24, r17
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	08 95       	ret

00000b70 <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	08 2f       	mov	r16, r24
  {
  // (Sub-)sample processing.
  static uint8_t sampleCount; // General sub-sample count; initially zero, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount++);
     b7e:	80 91 3a 01 	lds	r24, 0x013A
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	88 23       	and	r24, r24
     b86:	09 f4       	brne	.+2      	; 0xb8a <sampleStats(bool)+0x1a>
     b88:	11 e0       	ldi	r17, 0x01	; 1
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	80 93 3a 01 	sts	0x013A, r24
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmModeDebounced()) { ++warmCount; } else { --warmCount; }
     b90:	0e 94 d6 16 	call	0x2dac	; 0x2dac <inWarmModeDebounced()>
     b94:	90 91 39 01 	lds	r25, 0x0139
     b98:	88 23       	and	r24, r24
     b9a:	11 f0       	breq	.+4      	; 0xba0 <sampleStats(bool)+0x30>
     b9c:	9f 5f       	subi	r25, 0xFF	; 255
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <sampleStats(bool)+0x32>
     ba0:	91 50       	subi	r25, 0x01	; 1
     ba2:	90 93 39 01 	sts	0x0139, r25
  // Ambient light.
  const int ambLight = getAmbientLight();
     ba6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <getAmbientLight()>
     baa:	9c 01       	movw	r18, r24
  static int ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
     bac:	11 23       	and	r17, r17
     bae:	31 f4       	brne	.+12     	; 0xbbc <sampleStats(bool)+0x4c>
     bb0:	80 91 37 01 	lds	r24, 0x0137
     bb4:	90 91 38 01 	lds	r25, 0x0138
     bb8:	28 0f       	add	r18, r24
     bba:	39 1f       	adc	r19, r25
     bbc:	30 93 38 01 	sts	0x0138, r19
     bc0:	20 93 37 01 	sts	0x0137, r18
  const int tempC16 = getTemperatureC16();
     bc4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <getTemperatureC16()>
     bc8:	9c 01       	movw	r18, r24
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
     bca:	11 23       	and	r17, r17
     bcc:	31 f4       	brne	.+12     	; 0xbda <sampleStats(bool)+0x6a>
     bce:	80 91 35 01 	lds	r24, 0x0135
     bd2:	90 91 36 01 	lds	r25, 0x0136
     bd6:	28 0f       	add	r18, r24
     bd8:	39 1f       	adc	r19, r25
     bda:	30 93 36 01 	sts	0x0136, r19
     bde:	20 93 35 01 	sts	0x0135, r18
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
     be2:	00 23       	and	r16, r16
     be4:	09 f4       	brne	.+2      	; 0xbe8 <sampleStats(bool)+0x78>
     be6:	89 c0       	rjmp	.+274    	; 0xcfa <sampleStats(bool)+0x18a>

  const uint_least8_t hh = getHoursLT(); // Get the current local-time hour...
     be8:	0e 94 90 13 	call	0x2720	; 0x2720 <getHoursLT()>
     bec:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const uint8_t temp = compressTempC16((tempC16Total + (sampleCount/2)) / sampleCount);
     bee:	60 91 3a 01 	lds	r22, 0x013A
     bf2:	26 2f       	mov	r18, r22
     bf4:	26 95       	lsr	r18
     bf6:	80 91 35 01 	lds	r24, 0x0135
     bfa:	90 91 36 01 	lds	r25, 0x0136
     bfe:	82 0f       	add	r24, r18
     c00:	91 1d       	adc	r25, r1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	0e 94 3f 2c 	call	0x587e	; 0x587e <__divmodhi4>
     c08:	cb 01       	movw	r24, r22
     c0a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <compressTempC16(int)>
     c0e:	08 2f       	mov	r16, r24
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_TEMP_BY_HOUR + hh), temp);
     c10:	e1 2e       	mov	r14, r17
     c12:	ff 24       	eor	r15, r15
     c14:	c7 01       	movw	r24, r14
     c16:	80 50       	subi	r24, 0x00	; 0
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	60 2f       	mov	r22, r16
     c1c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phT = (uint8_t *)(EE_START_LAST_TEMP_BY_HOUR_SMOOTHED + hh);
     c20:	e7 01       	movw	r28, r14
     c22:	c8 5e       	subi	r28, 0xE8	; 232
     c24:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c26:	f9 99       	sbic	0x1f, 1	; 31
     c28:	fe cf       	rjmp	.-4      	; 0xc26 <sampleStats(bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c2a:	d2 bd       	out	0x22, r29	; 34
     c2c:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c2e:	f8 9a       	sbi	0x1f, 0	; 31
     c30:	80 b5       	in	r24, 0x20	; 32
  const uint8_t tempSmoothed = eeprom_read_byte(phT);
  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
     c32:	89 3f       	cpi	r24, 0xF9	; 249
     c34:	18 f0       	brcs	.+6      	; 0xc3c <sampleStats(bool)+0xcc>
     c36:	ce 01       	movw	r24, r28
     c38:	60 2f       	mov	r22, r16
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <sampleStats(bool)+0xd6>
  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }
     c3c:	60 2f       	mov	r22, r16
     c3e:	0e 94 97 05 	call	0xb2e	; 0xb2e <smoothStatsValue(unsigned char, unsigned char)>
     c42:	68 2f       	mov	r22, r24
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sampleCount<<1)) / (sampleCount<<2));
     c4a:	80 91 3a 01 	lds	r24, 0x013A
     c4e:	90 e0       	ldi	r25, 0x00	; 0
  const uint8_t ambL = min(ambLShifted, MAX_STATS_AMBLIGHT);
     c50:	20 91 37 01 	lds	r18, 0x0137
     c54:	30 91 38 01 	lds	r19, 0x0138
     c58:	bc 01       	movw	r22, r24
     c5a:	66 0f       	add	r22, r22
     c5c:	77 1f       	adc	r23, r23
     c5e:	66 0f       	add	r22, r22
     c60:	77 1f       	adc	r23, r23
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	0e 94 3f 2c 	call	0x587e	; 0x587e <__divmodhi4>
     c6e:	16 2f       	mov	r17, r22
     c70:	6f 3f       	cpi	r22, 0xFF	; 255
     c72:	08 f0       	brcs	.+2      	; 0xc76 <sampleStats(bool)+0x106>
     c74:	1e ef       	ldi	r17, 0xFE	; 254
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR + hh), ambL);
     c76:	c7 01       	movw	r24, r14
     c78:	80 5d       	subi	r24, 0xD0	; 208
     c7a:	9e 4f       	sbci	r25, 0xFE	; 254
     c7c:	61 2f       	mov	r22, r17
     c7e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phA = (uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh);
     c82:	e7 01       	movw	r28, r14
     c84:	c8 5b       	subi	r28, 0xB8	; 184
     c86:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c88:	f9 99       	sbic	0x1f, 1	; 31
     c8a:	fe cf       	rjmp	.-4      	; 0xc88 <sampleStats(bool)+0x118>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c8c:	d2 bd       	out	0x22, r29	; 34
     c8e:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c90:	f8 9a       	sbi	0x1f, 0	; 31
     c92:	80 b5       	in	r24, 0x20	; 32
  const uint8_t ambLSmoothed = eeprom_read_byte(phA);
  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
     c94:	8f 3f       	cpi	r24, 0xFF	; 255
     c96:	19 f4       	brne	.+6      	; 0xc9e <sampleStats(bool)+0x12e>
     c98:	ce 01       	movw	r24, r28
     c9a:	61 2f       	mov	r22, r17
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <sampleStats(bool)+0x138>
  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }
     c9e:	61 2f       	mov	r22, r17
     ca0:	0e 94 97 05 	call	0xb2e	; 0xb2e <smoothStatsValue(unsigned char, unsigned char)>
     ca4:	68 2f       	mov	r22, r24
     ca6:	ce 01       	movw	r24, r28
     ca8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh);
     cac:	e7 01       	movw	r28, r14
     cae:	c0 5a       	subi	r28, 0xA0	; 160
     cb0:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cb2:	f9 99       	sbic	0x1f, 1	; 31
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <sampleStats(bool)+0x142>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cb6:	d2 bd       	out	0x22, r29	; 34
     cb8:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cba:	f8 9a       	sbi	0x1f, 0	; 31
     cbc:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmModeDebounced() ? 0x7f : 0); } // First use sets all history bits to current sample value.
     cbe:	87 ff       	sbrs	r24, 7
     cc0:	0b c0       	rjmp	.+22     	; 0xcd8 <sampleStats(bool)+0x168>
     cc2:	0e 94 d6 16 	call	0x2dac	; 0x2dac <inWarmModeDebounced()>
     cc6:	88 23       	and	r24, r24
     cc8:	11 f4       	brne	.+4      	; 0xcce <sampleStats(bool)+0x15e>
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <sampleStats(bool)+0x160>
     cce:	6f e7       	ldi	r22, 0x7F	; 127
     cd0:	ce 01       	movw	r24, r28
     cd2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <sampleStats(bool)+0x182>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	95 95       	asr	r25
     cdc:	87 95       	ror	r24
     cde:	68 2f       	mov	r22, r24
     ce0:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
     ce2:	80 91 39 01 	lds	r24, 0x0139
     ce6:	18 16       	cp	r1, r24
     ce8:	0c f4       	brge	.+2      	; 0xcec <sampleStats(bool)+0x17c>
     cea:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
     cec:	ce 01       	movw	r24, r28
     cee:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
     cf2:	10 92 39 01 	sts	0x0139, r1

  // TODO: other stats measures...


  // Reset generical sub-sample count to initial state after fill sample.
  sampleCount = 0;
     cf6:	10 92 3a 01 	sts	0x013A, r1
  }
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <markAsPossiblyOccupied()>:
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Do not call from an ISR.
void markAsPossiblyOccupied()
  { occupationCountdownM = fmax(occupationCountdownM, OCCUPATION_TIMEOUT_M/2); }
     d08:	60 91 3b 01 	lds	r22, 0x013B
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 5f 2b 	call	0x56be	; 0x56be <__floatunsisf>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 eb       	ldi	r20, 0xB0	; 176
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	0e 94 9c 2b 	call	0x5738	; 0x5738 <fmax>
     d22:	0e 94 33 2b 	call	0x5666	; 0x5666 <__fixunssfsi>
     d26:	60 93 3b 01 	sts	0x013B, r22
     d2a:	08 95       	ret

00000d2c <computeTargetTemperature()>:
// Will be called by computeCallForHeat().
void computeTargetTemperature()
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  readTempPot();
     d2c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <readTempPot()>
#endif

  if(!inWarmModeDebounced()) // In FROST mode.
     d30:	0e 94 d6 16 	call	0x2dac	; 0x2dac <inWarmModeDebounced()>
     d34:	88 23       	and	r24, r24
     d36:	19 f4       	brne	.+6      	; 0xd3e <computeTargetTemperature()+0x12>
    {
    const uint8_t frostC = getFROSTTargetC();
     d38:	0e 94 fd 04 	call	0x9fa	; 0x9fa <getFROSTTargetC()>
     d3c:	24 c0       	rjmp	.+72     	; 0xd86 <computeTargetTemperature()+0x5a>
      }
#endif
    }

#ifdef SUPPORT_BAKE
  else if(inBakeModeDebounced()) // If in BAKE mode then use elevated target.
     d3e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <inBakeModeDebounced()>
     d42:	88 23       	and	r24, r24
     d44:	39 f0       	breq	.+14     	; 0xd54 <computeTargetTemperature()+0x28>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
     d46:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
     d4a:	8b 5f       	subi	r24, 0xFB	; 251
     d4c:	80 36       	cpi	r24, 0x60	; 96
     d4e:	d8 f0       	brcs	.+54     	; 0xd86 <computeTargetTemperature()+0x5a>
     d50:	8f e5       	ldi	r24, 0x5F	; 95
     d52:	19 c0       	rjmp	.+50     	; 0xd86 <computeTargetTemperature()+0x5a>
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if room is too dark for activity AND room seems unoccupied
    // AND the unit has an eco bias or no schedule is on WARM at the moment (TODO-111).
    // TODO: with full occupancy support then allow setback simply based on lack of occupancy.
    if(isRoomDark() && isLikelyUnoccupied() &&
     d54:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <isRoomLit()>
     d58:	88 23       	and	r24, r24
     d5a:	99 f4       	brne	.+38     	; 0xd82 <computeTargetTemperature()+0x56>
     d5c:	80 91 3b 01 	lds	r24, 0x013B
     d60:	88 23       	and	r24, r24
     d62:	79 f4       	brne	.+30     	; 0xd82 <computeTargetTemperature()+0x56>
     d64:	0e 94 f6 04 	call	0x9ec	; 0x9ec <hasEcoBias()>
     d68:	88 23       	and	r24, r24
     d6a:	21 f4       	brne	.+8      	; 0xd74 <computeTargetTemperature()+0x48>
     d6c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <isAnyScheduleOnWARMNow()>
     d70:	88 23       	and	r24, r24
     d72:	39 f4       	brne	.+14     	; 0xd82 <computeTargetTemperature()+0x56>
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sb = shouldBeWarmedAtHour(hh) ? SETBACK : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - sb), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - SETBACK), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
     d74:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
     d78:	81 50       	subi	r24, 0x01	; 1



// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     d7a:	85 30       	cpi	r24, 0x05	; 5
     d7c:	20 f4       	brcc	.+8      	; 0xd86 <computeTargetTemperature()+0x5a>
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <computeTargetTemperature()+0x5a>
#endif
      }
    else
      { targetTempC = getWARMTargetC(); } // Room not known to be too dark for normal activity so use WARM target directly.
     d82:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
     d86:	80 93 3c 01 	sts	0x013C, r24
     d8a:	08 95       	ret

00000d8c <computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, TRVPercentOpen.
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeCallForHeat()
     d8c:	ef 92       	push	r14
     d8e:	0f 93       	push	r16
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	00 d0       	rcall	.+0      	; 0xd96 <computeCallForHeat()+0xa>
     d96:	00 d0       	rcall	.+0      	; 0xd98 <computeCallForHeat()+0xc>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
  {
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }
     d9c:	80 91 3b 01 	lds	r24, 0x013B
     da0:	88 23       	and	r24, r24
     da2:	19 f0       	breq	.+6      	; 0xdaa <computeCallForHeat()+0x1e>
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	80 93 3b 01 	sts	0x013B, r24

  computeTargetTemperature();
     daa:	0e 94 96 06 	call	0xd2c	; 0xd2c <computeTargetTemperature()>
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
     dae:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <getTemperatureC16()>
     db2:	ac 01       	movw	r20, r24
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     db4:	64 e0       	ldi	r22, 0x04	; 4
     db6:	95 95       	asr	r25
     db8:	87 95       	ror	r24
     dba:	6a 95       	dec	r22
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <computeCallForHeat()+0x2a>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     dbe:	30 91 3c 01 	lds	r19, 0x013C
     dc2:	83 17       	cp	r24, r19
     dc4:	e0 f4       	brcc	.+56     	; 0xdfe <computeCallForHeat()+0x72>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
     dc6:	80 91 3d 01 	lds	r24, 0x013D
     dca:	84 36       	cpi	r24, 0x64	; 100
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <computeCallForHeat()+0x44>
     dce:	95 c0       	rjmp	.+298    	; 0xefa <computeCallForHeat()+0x16e>
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target then in BAKE mode immediately open to 100%, unless always glacial.
      // FIXME: use debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeModeDebounced()) { TRVPercentOpen = 100; }
     dd0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <inBakeModeDebounced()>
     dd4:	88 23       	and	r24, r24
     dd6:	61 f4       	brne	.+24     	; 0xdf0 <computeCallForHeat()+0x64>
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
        const uint8_t tmp = TRVPercentOpen + ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     dd8:	00 91 3d 01 	lds	r16, 0x013D
     ddc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <hasEcoBias()>
     de0:	88 23       	and	r24, r24
     de2:	11 f0       	breq	.+4      	; 0xde8 <computeCallForHeat()+0x5c>
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	01 c0       	rjmp	.+2      	; 0xdea <computeCallForHeat()+0x5e>
     de8:	84 e1       	ldi	r24, 0x14	; 20
     dea:	80 0f       	add	r24, r16
#else
        const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(tmp > 100) { TRVPercentOpen = 100; } // Capped at 100%.
     dec:	85 36       	cpi	r24, 0x65	; 101
     dee:	10 f0       	brcs	.+4      	; 0xdf4 <computeCallForHeat()+0x68>
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	8e c0       	rjmp	.+284    	; 0xf10 <computeCallForHeat()+0x184>
        else
          {
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > TRV_MAX_SLEW_PC_PER_MIN)
          // Ensure valve will be immediately significantly opened (and that linger can work properly).
          if(tmp < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) { TRVPercentOpen = DEFAULT_MIN_VALVE_PC_REALLY_OPEN; }
     df4:	8a 30       	cpi	r24, 0x0A	; 10
     df6:	08 f0       	brcs	.+2      	; 0xdfa <computeCallForHeat()+0x6e>
     df8:	8b c0       	rjmp	.+278    	; 0xf10 <computeCallForHeat()+0x184>
     dfa:	8a e0       	ldi	r24, 0x0A	; 10
     dfc:	89 c0       	rjmp	.+274    	; 0xf10 <computeCallForHeat()+0x184>
          }
        }      
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     dfe:	38 17       	cp	r19, r24
     e00:	30 f5       	brcc	.+76     	; 0xe4e <computeCallForHeat()+0xc2>
    {
    cancelBake(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
     e02:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <cancelBake()>
    if(TRVPercentOpen != 0)
     e06:	80 91 3d 01 	lds	r24, 0x013D
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <computeCallForHeat()+0x84>
     e0e:	75 c0       	rjmp	.+234    	; 0xefa <computeCallForHeat()+0x16e>
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(TRVPercentOpen <= lingerThreshold)
     e10:	8a 30       	cpi	r24, 0x0A	; 10
     e12:	38 f4       	brcc	.+14     	; 0xe22 <computeCallForHeat()+0x96>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) && (TRVPercentOpen < DEFAULT_MIN_VALVE_PC_REALLY_OPEN - DEFAULT_MAX_RUN_ON_TIME_M))
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	18 f4       	brcc	.+6      	; 0xe1e <computeCallForHeat()+0x92>
          { TRVPercentOpen = 0; } // Shut right off.
     e18:	10 92 3d 01 	sts	0x013D, r1
     e1c:	52 c0       	rjmp	.+164    	; 0xec2 <computeCallForHeat()+0x136>
        else
          { --TRVPercentOpen; } // Turn down as slowly as reasonably possible to help boiler cool.
     e1e:	81 50       	subi	r24, 0x01	; 1
     e20:	77 c0       	rjmp	.+238    	; 0xf10 <computeCallForHeat()+0x184>
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
     e22:	0e 94 f6 04 	call	0x9ec	; 0x9ec <hasEcoBias()>
     e26:	88 23       	and	r24, r24
     e28:	59 f0       	breq	.+22     	; 0xe40 <computeCallForHeat()+0xb4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e2a:	f9 99       	sbic	0x1f, 1	; 31
     e2c:	fe cf       	rjmp	.-4      	; 0xe2a <computeCallForHeat()+0x9e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e2e:	82 e1       	ldi	r24, 0x12	; 18
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	92 bd       	out	0x22, r25	; 34
     e34:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e36:	f8 9a       	sbi	0x1f, 0	; 31
     e38:	80 b5       	in	r24, 0x20	; 32
     e3a:	8f 3f       	cpi	r24, 0xFF	; 255
     e3c:	09 f4       	brne	.+2      	; 0xe40 <computeCallForHeat()+0xb4>
     e3e:	67 c0       	rjmp	.+206    	; 0xf0e <computeCallForHeat()+0x182>
     e40:	80 91 3d 01 	lds	r24, 0x013D
     e44:	8e 31       	cpi	r24, 0x1E	; 30
     e46:	08 f4       	brcc	.+2      	; 0xe4a <computeCallForHeat()+0xbe>
     e48:	62 c0       	rjmp	.+196    	; 0xf0e <computeCallForHeat()+0x182>
     e4a:	84 51       	subi	r24, 0x14	; 20
     e4c:	61 c0       	rjmp	.+194    	; 0xf10 <computeCallForHeat()+0x184>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e4e:	f9 99       	sbic	0x1f, 1	; 31
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <computeCallForHeat()+0xc2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e52:	83 e1       	ldi	r24, 0x13	; 19
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	92 bd       	out	0x22, r25	; 34
     e58:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e5a:	f8 9a       	sbi	0x1f, 0	; 31
     e5c:	00 b5       	in	r16, 0x20	; 32
// At the boiler hub this is also the threshold precentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
uint8_t getMinValvePcReallyOpen()
  {
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  if((stored > 0) && (stored <= 100)) { return(stored); }
     e5e:	80 2f       	mov	r24, r16
     e60:	81 50       	subi	r24, 0x01	; 1
     e62:	84 36       	cpi	r24, 0x64	; 100
     e64:	08 f0       	brcs	.+2      	; 0xe68 <computeCallForHeat()+0xdc>
     e66:	0a e0       	ldi	r16, 0x0A	; 10
    }
  else // Close to temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     e68:	24 2f       	mov	r18, r20
     e6a:	2f 70       	andi	r18, 0x0F	; 15
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
#if defined(VALVE_TURN_OFF_LINGER)
    // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
    const uint8_t targetPO = fmax(targetPORaw, getMinValvePcReallyOpen());
     e6c:	60 e1       	ldi	r22, 0x10	; 16
     e6e:	62 1b       	sub	r22, r18
     e70:	26 e0       	ldi	r18, 0x06	; 6
     e72:	62 9f       	mul	r22, r18
     e74:	60 2d       	mov	r22, r0
     e76:	11 24       	eor	r1, r1
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 5f 2b 	call	0x56be	; 0x56be <__floatunsisf>
     e82:	69 83       	std	Y+1, r22	; 0x01
     e84:	7a 83       	std	Y+2, r23	; 0x02
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	9c 83       	std	Y+4, r25	; 0x04
     e8a:	60 2f       	mov	r22, r16
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 5f 2b 	call	0x56be	; 0x56be <__floatunsisf>
     e96:	9b 01       	movw	r18, r22
     e98:	ac 01       	movw	r20, r24
     e9a:	69 81       	ldd	r22, Y+1	; 0x01
     e9c:	7a 81       	ldd	r23, Y+2	; 0x02
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	9c 81       	ldd	r25, Y+4	; 0x04
     ea2:	0e 94 9c 2b 	call	0x5738	; 0x5738 <fmax>
     ea6:	0e 94 33 2b 	call	0x5666	; 0x5666 <__fixunssfsi>
     eaa:	e6 2e       	mov	r14, r22
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO < TRVPercentOpen) // Currently open more than required.
     eac:	20 91 3d 01 	lds	r18, 0x013D
     eb0:	62 17       	cp	r22, r18
     eb2:	48 f4       	brcc	.+18     	; 0xec6 <computeCallForHeat()+0x13a>
      {
      const uint8_t slew = TRVPercentOpen - targetPO;
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     eb4:	82 2f       	mov	r24, r18
     eb6:	8e 19       	sub	r24, r14
     eb8:	87 30       	cpi	r24, 0x07	; 7
     eba:	f8 f0       	brcs	.+62     	; 0xefa <computeCallForHeat()+0x16e>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
            { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     ebc:	25 50       	subi	r18, 0x05	; 5
     ebe:	20 93 3d 01 	sts	0x013D, r18
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <computeCallForHeat()+0x170>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
        changed = true; // TRV setting has been changed.
        }
      }
    else if(targetPO > TRVPercentOpen) // Currently open less than required.
     ec6:	26 17       	cp	r18, r22
     ec8:	c0 f4       	brcc	.+48     	; 0xefa <computeCallForHeat()+0x16e>
      {
      const uint8_t slew = targetPO - TRVPercentOpen;
     eca:	06 2f       	mov	r16, r22
     ecc:	02 1b       	sub	r16, r18
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     ece:	07 30       	cpi	r16, 0x07	; 7
     ed0:	a0 f0       	brcs	.+40     	; 0xefa <computeCallForHeat()+0x16e>
        {
        // Slew open faster in BAKE mode or with comfort bias (unless always glacial).
#if !defined(TRV_SLEW_GLACIAL)
        const uint8_t maxSlew = (inBakeModeDebounced() || !hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     ed2:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <inBakeModeDebounced()>
     ed6:	88 23       	and	r24, r24
     ed8:	31 f4       	brne	.+12     	; 0xee6 <computeCallForHeat()+0x15a>
     eda:	0e 94 f6 04 	call	0x9ec	; 0x9ec <hasEcoBias()>
     ede:	88 23       	and	r24, r24
     ee0:	11 f0       	breq	.+4      	; 0xee6 <computeCallForHeat()+0x15a>
     ee2:	95 e0       	ldi	r25, 0x05	; 5
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <computeCallForHeat()+0x160>
#else
        const uint8_t maxSlew = TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(slew > maxSlew)
     ee6:	0b 30       	cpi	r16, 0x0B	; 11
     ee8:	28 f0       	brcs	.+10     	; 0xef4 <computeCallForHeat()+0x168>
     eea:	9a e0       	ldi	r25, 0x0A	; 10
            { TRVPercentOpen += maxSlew; } // Cap slew rate.
     eec:	80 91 3d 01 	lds	r24, 0x013D
     ef0:	89 0f       	add	r24, r25
     ef2:	0e c0       	rjmp	.+28     	; 0xf10 <computeCallForHeat()+0x184>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
     ef4:	e0 92 3d 01 	sts	0x013D, r14
     ef8:	e4 cf       	rjmp	.-56     	; 0xec2 <computeCallForHeat()+0x136>
     efa:	80 e0       	ldi	r24, 0x00	; 0
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }

  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	0f 91       	pop	r16
     f0a:	ef 90       	pop	r14
     f0c:	08 95       	ret
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { TRVPercentOpen = lingerThreshold; }
     f0e:	89 e0       	ldi	r24, 0x09	; 9
     f10:	80 93 3d 01 	sts	0x013D, r24
     f14:	d6 cf       	rjmp	.-84     	; 0xec2 <computeCallForHeat()+0x136>

00000f16 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     f16:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     f18:	f9 99       	sbic	0x1f, 1	; 31
     f1a:	fe cf       	rjmp	.-4      	; 0xf18 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     f1c:	32 bd       	out	0x22, r19	; 34
     f1e:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     f24:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     f26:	8f 3f       	cpi	r24, 0xFF	; 255
     f28:	11 f4       	brne	.+4      	; 0xf2e <eeprom_smart_erase_byte(unsigned char*)+0x18>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     f2e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f30:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     f32:	84 e1       	ldi	r24, 0x14	; 20
     f34:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     f36:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f38:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     f3a:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     f3c:	08 95       	ret

00000f3e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     f3e:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     f40:	f9 99       	sbic	0x1f, 1	; 31
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     f44:	32 bd       	out	0x22, r19	; 34
     f46:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     f4c:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     f4e:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     f50:	86 17       	cp	r24, r22
     f52:	11 f4       	brne	.+4      	; 0xf58 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     f58:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     f5a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f5c:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     f5e:	84 e2       	ldi	r24, 0x24	; 36
     f60:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
     f62:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f64:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     f66:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
     f68:	08 95       	ret

00000f6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
     f6a:	78 2f       	mov	r23, r24
     f6c:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
     f6e:	6f 3f       	cpi	r22, 0xFF	; 255
     f70:	19 f4       	brne	.+6      	; 0xf78 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
     f72:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
     f76:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f78:	f9 99       	sbic	0x1f, 1	; 31
     f7a:	fe cf       	rjmp	.-4      	; 0xf78 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f7c:	47 2f       	mov	r20, r23
     f7e:	5e 2f       	mov	r21, r30
     f80:	52 bd       	out	0x22, r21	; 34
     f82:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f84:	f8 9a       	sbi	0x1f, 0	; 31
     f86:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
     f88:	68 17       	cp	r22, r24
     f8a:	11 f4       	brne	.+4      	; 0xf90 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
     f90:	26 2f       	mov	r18, r22
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	82 23       	and	r24, r18
     f98:	93 23       	and	r25, r19
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	29 f4       	brne	.+10     	; 0xfaa <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
     fa0:	87 2f       	mov	r24, r23
     fa2:	9e 2f       	mov	r25, r30
     fa4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     fa8:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     faa:	f9 99       	sbic	0x1f, 1	; 31
     fac:	fe cf       	rjmp	.-4      	; 0xfaa <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     fae:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fb0:	52 bd       	out	0x22, r21	; 34
     fb2:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     fb4:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	fa 9a       	sbi	0x1f, 2	; 31
     fbc:	f9 9a       	sbi	0x1f, 1	; 31
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
     fc2:	08 95       	ret

00000fc4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
     fc4:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
     fc6:	80 81       	ld	r24, Z
     fc8:	98 2f       	mov	r25, r24
     fca:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
     fcc:	66 23       	and	r22, r22
     fce:	b1 f4       	brne	.+44     	; 0xffc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
     fd0:	92 30       	cpi	r25, 0x02	; 2
     fd2:	51 f0       	breq	.+20     	; 0xfe8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
     fd4:	93 30       	cpi	r25, 0x03	; 3
     fd6:	31 f0       	breq	.+12     	; 0xfe4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
     fd8:	9f 01       	movw	r18, r30
     fda:	2f 5f       	subi	r18, 0xFF	; 255
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	59 f4       	brne	.+22     	; 0xff8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
     fe4:	8d ec       	ldi	r24, 0xCD	; 205
     fe6:	25 c0       	rjmp	.+74     	; 0x1032 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
     fe8:	80 7c       	andi	r24, 0xC0	; 192
     fea:	80 63       	ori	r24, 0x30	; 48
     fec:	22 c0       	rjmp	.+68     	; 0x1032 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
     fee:	80 7f       	andi	r24, 0xF0	; 240
     ff0:	8c 60       	ori	r24, 0x0C	; 12
     ff2:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     ff4:	f9 01       	movw	r30, r18
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     ff8:	83 60       	ori	r24, 0x03	; 3
     ffa:	13 c0       	rjmp	.+38     	; 0x1022 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
     ffc:	92 30       	cpi	r25, 0x02	; 2
     ffe:	51 f0       	breq	.+20     	; 0x1014 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    1000:	93 30       	cpi	r25, 0x03	; 3
    1002:	31 f0       	breq	.+12     	; 0x1010 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    1004:	9f 01       	movw	r18, r30
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	91 30       	cpi	r25, 0x01	; 1
    100c:	71 f4       	brne	.+28     	; 0x102a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    100e:	07 c0       	rjmp	.+14     	; 0x101e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    1010:	80 ee       	ldi	r24, 0xE0	; 224
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    1014:	80 7c       	andi	r24, 0xC0	; 192
    1016:	88 63       	ori	r24, 0x38	; 56
    1018:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	0a c0       	rjmp	.+20     	; 0x1032 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    101e:	80 7f       	andi	r24, 0xF0	; 240
    1020:	8e 60       	ori	r24, 0x0E	; 14
    1022:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    1024:	f9 01       	movw	r30, r18
    1026:	8e e3       	ldi	r24, 0x3E	; 62
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    102a:	83 60       	ori	r24, 0x03	; 3
    102c:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    102e:	f9 01       	movw	r30, r18
    1030:	8d e8       	ldi	r24, 0x8D	; 141
    1032:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    1034:	cf 01       	movw	r24, r30
    1036:	08 95       	ret

00001038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	9c 01       	movw	r18, r24
    1046:	16 2f       	mov	r17, r22
    1048:	00 e8       	ldi	r16, 0x80	; 128
    104a:	c0 e0       	ldi	r28, 0x00	; 0
    104c:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    104e:	e6 2e       	mov	r14, r22
    1050:	ff 24       	eor	r15, r15
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	80 2f       	mov	r24, r16
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	8e 21       	and	r24, r14
    105a:	9f 21       	and	r25, r15
    105c:	89 2b       	or	r24, r25
    105e:	09 f0       	breq	.+2      	; 0x1062 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	c9 01       	movw	r24, r18
    1064:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1068:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    106a:	06 95       	lsr	r16
    106c:	21 96       	adiw	r28, 0x01	; 1
    106e:	c8 30       	cpi	r28, 0x08	; 8
    1070:	d1 05       	cpc	r29, r1
    1072:	79 f7       	brne	.-34     	; 0x1052 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1074:	01 2e       	mov	r0, r17
    1076:	12 95       	swap	r17
    1078:	10 25       	eor	r17, r0
    107a:	01 2e       	mov	r0, r17
    107c:	16 95       	lsr	r17
    107e:	16 95       	lsr	r17
    1080:	10 25       	eor	r17, r0
    1082:	61 2f       	mov	r22, r17
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	6f 5f       	subi	r22, 0xFF	; 255
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	76 95       	lsr	r23
    108c:	67 95       	ror	r22
    108e:	61 70       	andi	r22, 0x01	; 1
    1090:	c9 01       	movw	r24, r18
    1092:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	dc 01       	movw	r26, r24
    10ac:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    10ae:	8c ec       	ldi	r24, 0xCC	; 204
    10b0:	fd 01       	movw	r30, r26
    10b2:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	8c 93       	st	X, r24
    10b8:	df 01       	movw	r26, r30
    10ba:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    10bc:	81 83       	std	Z+1, r24	; 0x01
    10be:	fd 01       	movw	r30, r26
    10c0:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    10c2:	11 96       	adiw	r26, 0x01	; 1
    10c4:	8c 93       	st	X, r24
    10c6:	df 01       	movw	r26, r30
    10c8:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    10ca:	81 83       	std	Z+1, r24	; 0x01
    10cc:	fd 01       	movw	r30, r26
    10ce:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    10d4:	ff 24       	eor	r15, r15
    10d6:	fa 94       	dec	r15
    10d8:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    10da:	cf 01       	movw	r24, r30
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    10e4:	f8 01       	movw	r30, r16
    10e6:	60 81       	ld	r22, Z
    10e8:	0e 94 1c 08 	call	0x1038	; 0x1038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    10ec:	f8 01       	movw	r30, r16
    10ee:	61 81       	ldd	r22, Z+1	; 0x01
    10f0:	0e 94 1c 08 	call	0x1038	; 0x1038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	0e 94 1c 08 	call	0x1038	; 0x1038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    10fa:	f8 01       	movw	r30, r16
    10fc:	62 81       	ldd	r22, Z+2	; 0x02
    10fe:	0e 94 1c 08 	call	0x1038	; 0x1038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    1102:	f8 01       	movw	r30, r16
    1104:	63 81       	ldd	r22, Z+3	; 0x03
    1106:	0e 94 1c 08 	call	0x1038	; 0x1038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    110a:	f8 01       	movw	r30, r16
    110c:	60 81       	ld	r22, Z
    110e:	21 81       	ldd	r18, Z+1	; 0x01
    1110:	62 0f       	add	r22, r18
    1112:	64 5f       	subi	r22, 0xF4	; 244
    1114:	22 81       	ldd	r18, Z+2	; 0x02
    1116:	62 0f       	add	r22, r18
    1118:	23 81       	ldd	r18, Z+3	; 0x03
    111a:	62 0f       	add	r22, r18
    111c:	0e 94 1c 08 	call	0x1038	; 0x1038 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bit to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    112c:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    112e:	f0 82       	st	Z, r15
  return(bptr);
  }
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	08 95       	ret

00001138 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1138:	f9 99       	sbic	0x1f, 1	; 31
    113a:	fe cf       	rjmp	.-4      	; 0x1138 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    113c:	80 e1       	ldi	r24, 0x10	; 16
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	92 bd       	out	0x22, r25	; 34
    1142:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1144:	f8 9a       	sbi	0x1f, 0	; 31
    1146:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    1148:	08 95       	ret

0000114a <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    114a:	f9 99       	sbic	0x1f, 1	; 31
    114c:	fe cf       	rjmp	.-4      	; 0x114a <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    114e:	81 e1       	ldi	r24, 0x11	; 17
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	92 bd       	out	0x22, r25	; 34
    1154:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1156:	f8 9a       	sbi	0x1f, 0	; 31
    1158:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    115a:	08 95       	ret

0000115c <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    115c:	80 91 75 01 	lds	r24, 0x0175
    1160:	08 95       	ret

00001162 <isControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    1162:	80 91 75 01 	lds	r24, 0x0175
    1166:	88 23       	and	r24, r24
    1168:	21 f0       	breq	.+8      	; 0x1172 <isControlledValveOpen()+0x10>
    116a:	80 91 aa 01 	lds	r24, 0x01AA
    116e:	81 11       	cpse	r24, r1
    1170:	81 e0       	ldi	r24, 0x01	; 1
// GLOBAL NOTION OF CONTROLLED VALVE STATE PROVIDED HERE
// True iff the valve(s) (if any) controlled by this unit are really open.
// This waits until, for example, an ACK where appropriate, or at least the command has been sent.
// This also implies open to DEFAULT_MIN_VALVE_PC_REALLY_OPEN or equivalent.
// Must be exectly one definition supplied at link time.
bool isControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    1172:	08 95       	ret

00001174 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    1174:	10 92 75 01 	sts	0x0175, r1
  syncStateFHT8V = 0;
    1178:	10 92 77 01 	sts	0x0177, r1
  halfSecondsToNextFHT8VTX = 0;
    117c:	10 92 76 01 	sts	0x0176, r1
  FHT8V_isValveOpen = false;
    1180:	10 92 aa 01 	sts	0x01AA, r1
  }
    1184:	08 95       	ret

00001186 <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns and clears one housecode calling for heat heard since last call, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1186:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1188:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    118a:	20 91 02 01 	lds	r18, 0x0102
    118e:	30 91 03 01 	lds	r19, 0x0103
    lastCallForHeatHC = ~0;
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	9f ef       	ldi	r25, 0xFF	; 255
    1196:	90 93 03 01 	sts	0x0103, r25
    119a:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    119e:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    11a0:	c9 01       	movw	r24, r18
    11a2:	08 95       	ret

000011a4 <FHT8VLastRXErrGetAndClear()>:

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
uint8_t FHT8VLastRXErrGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    11a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11a6:	f8 94       	cli
    {
    const uint8_t result = lastRXerrno;
    11a8:	80 91 40 01 	lds	r24, 0x0140
    lastRXerrno = 0;
    11ac:	10 92 40 01 	sts	0x0140, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b0:	9f bf       	out	0x3f, r25	; 63
    return(result);
    }
  }
    11b2:	08 95       	ret

000011b4 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
// The TRVPercentOpen value is used to generate the frame.
// On entry hc1, hc2 (and addresss if used) must be set correctly; this sets command and extension.
// The generated command frame can be resent indefinitely.
// The command buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	ec 01       	movw	r28, r24
    11c0:	7b 01       	movw	r14, r22
    11c2:	14 2f       	mov	r17, r20
  {
  command->command = 0x26;
    11c4:	86 e2       	ldi	r24, 0x26	; 38
    11c6:	fb 01       	movw	r30, r22
    11c8:	82 83       	std	Z+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	48 9f       	mul	r20, r24
    11ce:	c0 01       	movw	r24, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	64 e6       	ldi	r22, 0x64	; 100
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	0e 94 3f 2c 	call	0x587e	; 0x587e <__divmodhi4>
    11da:	63 83       	std	Z+3, r22	; 0x03
#ifdef RFM22_SYNC_BCFH
  // Huge cheat: only add RFM22-friendly pre-preamble if calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
  if(TRVPercentOpen >= getMinValvePcReallyOpen())
    11dc:	0e 94 b4 04 	call	0x968	; 0x968 <getMinValvePcReallyOpen()>
    11e0:	18 17       	cp	r17, r24
    11e2:	60 f0       	brcs	.+24     	; 0x11fc <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x48>
    {
    *bptr++ = 0xaa;
    11e4:	8a ea       	ldi	r24, 0xAA	; 170
    11e6:	fe 01       	movw	r30, r28
    11e8:	81 93       	st	Z+, r24
    *bptr++ = 0xaa;
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	df 01       	movw	r26, r30
    11ee:	11 96       	adiw	r26, 0x01	; 1
    *bptr++ = 0xaa;
    11f0:	81 83       	std	Z+1, r24	; 0x01
    *bptr++ = 0xaa;
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	8c 93       	st	X, r24
    11f6:	11 97       	sbiw	r26, 0x01	; 1
    11f8:	ed 01       	movw	r28, r26
    11fa:	22 96       	adiw	r28, 0x02	; 2
    }
#endif
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
    11fc:	ce 01       	movw	r24, r28
    11fe:	b7 01       	movw	r22, r14
    1200:	0e 94 52 08 	call	0x10a4	; 0x10a4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
  }
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	08 95       	ret

00001210 <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    1210:	88 23       	and	r24, r24
    1212:	21 f4       	brne	.+8      	; 0x121c <StopEavesdropOnFHT8V(bool)+0xc>
    1214:	80 91 41 01 	lds	r24, 0x0141
    1218:	88 23       	and	r24, r24
    121a:	21 f0       	breq	.+8      	; 0x1224 <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    121c:	10 92 41 01 	sts	0x0141, r1
  RFM22ModeStandbyAndClearState();
    1220:	0e 94 88 12 	call	0x2510	; 0x2510 <RFM22ModeStandbyAndClearState()>
    1224:	08 95       	ret

00001226 <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    1226:	0e 94 88 12 	call	0x2510	; 0x2510 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    122a:	8e e2       	ldi	r24, 0x2E	; 46
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 7e 11 	call	0x22fc	; 0x22fc <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    1234:	08 95       	ret

00001236 <SetupToEavesdropOnFHT8V(bool)>:
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
void SetupToEavesdropOnFHT8V(bool force)
  {
  if(!force && eavesdropping) { return; } // Already eavesdropping.
    1236:	88 23       	and	r24, r24
    1238:	21 f4       	brne	.+8      	; 0x1242 <SetupToEavesdropOnFHT8V(bool)+0xc>
    123a:	80 91 41 01 	lds	r24, 0x0141
    123e:	88 23       	and	r24, r24
    1240:	29 f4       	brne	.+10     	; 0x124c <SetupToEavesdropOnFHT8V(bool)+0x16>
  eavesdropping = true;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 93 41 01 	sts	0x0141, r24
  _SetupRFM22ToEavesdropOnFHT8V();
    1248:	0e 94 13 09 	call	0x1226	; 0x1226 <_SetupRFM22ToEavesdropOnFHT8V()>
    124c:	08 95       	ret

0000124e <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    1254:	28 81       	ld	r18, Y
    1256:	39 81       	ldd	r19, Y+1	; 0x01
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	82 17       	cp	r24, r18
    125e:	93 07       	cpc	r25, r19
    1260:	10 f4       	brcc	.+4      	; 0x1266 <readOneBit(decode_state_t*)+0x18>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <readOneBit(decode_state_t*)+0x20>
    126c:	7e c0       	rjmp	.+252    	; 0x136a <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	88 23       	and	r24, r24
    1272:	11 f4       	brne	.+4      	; 0x1278 <readOneBit(decode_state_t*)+0x2a>
    1274:	80 ec       	ldi	r24, 0xC0	; 192
    1276:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	80 3c       	cpi	r24, 0xC0	; 192
    127c:	41 f0       	breq	.+16     	; 0x128e <readOneBit(decode_state_t*)+0x40>
    127e:	80 33       	cpi	r24, 0x30	; 48
    1280:	31 f0       	breq	.+12     	; 0x128e <readOneBit(decode_state_t*)+0x40>
    1282:	8c 30       	cpi	r24, 0x0C	; 12
    1284:	21 f0       	breq	.+8      	; 0x128e <readOneBit(decode_state_t*)+0x40>
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	11 f0       	breq	.+4      	; 0x128e <readOneBit(decode_state_t*)+0x40>
    128a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	e8 81       	ld	r30, Y
    1296:	f9 81       	ldd	r31, Y+1	; 0x01
    1298:	80 81       	ld	r24, Z
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	82 23       	and	r24, r18
    129e:	93 23       	and	r25, r19
    12a0:	28 17       	cp	r18, r24
    12a2:	39 07       	cpc	r19, r25
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <readOneBit(decode_state_t*)+0x5a>
    12a6:	51 c0       	rjmp	.+162    	; 0x134a <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    12a8:	c9 01       	movw	r24, r18
    12aa:	95 95       	asr	r25
    12ac:	87 95       	ror	r24
    12ae:	95 95       	asr	r25
    12b0:	87 95       	ror	r24
    12b2:	8c 83       	std	Y+4, r24	; 0x04
    12b4:	88 23       	and	r24, r24
    12b6:	61 f4       	brne	.+24     	; 0x12d0 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    12b8:	80 ec       	ldi	r24, 0xC0	; 192
    12ba:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    12bc:	9f 01       	movw	r18, r30
    12be:	2f 5f       	subi	r18, 0xFF	; 255
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	39 83       	std	Y+1, r19	; 0x01
    12c4:	28 83       	st	Y, r18
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ca:	82 17       	cp	r24, r18
    12cc:	93 07       	cpc	r25, r19
    12ce:	e8 f1       	brcs	.+122    	; 0x134a <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    12d2:	e8 81       	ld	r30, Y
    12d4:	f9 81       	ldd	r31, Y+1	; 0x01
    12d6:	20 81       	ld	r18, Z
    12d8:	28 23       	and	r18, r24
    12da:	28 30       	cpi	r18, 0x08	; 8
    12dc:	c1 f0       	breq	.+48     	; 0x130e <readOneBit(decode_state_t*)+0xc0>
    12de:	29 30       	cpi	r18, 0x09	; 9
    12e0:	28 f4       	brcc	.+10     	; 0x12ec <readOneBit(decode_state_t*)+0x9e>
    12e2:	22 23       	and	r18, r18
    12e4:	41 f0       	breq	.+16     	; 0x12f6 <readOneBit(decode_state_t*)+0xa8>
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	81 f5       	brne	.+96     	; 0x134a <readOneBit(decode_state_t*)+0xfc>
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <readOneBit(decode_state_t*)+0xc0>
    12ec:	20 32       	cpi	r18, 0x20	; 32
    12ee:	79 f0       	breq	.+30     	; 0x130e <readOneBit(decode_state_t*)+0xc0>
    12f0:	20 38       	cpi	r18, 0x80	; 128
    12f2:	59 f5       	brne	.+86     	; 0x134a <readOneBit(decode_state_t*)+0xfc>
    12f4:	0c c0       	rjmp	.+24     	; 0x130e <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	95 95       	asr	r25
    12fa:	87 95       	ror	r24
    12fc:	95 95       	asr	r25
    12fe:	87 95       	ror	r24
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	88 23       	and	r24, r24
    1304:	91 f5       	brne	.+100    	; 0x136a <readOneBit(decode_state_t*)+0x11c>
    1306:	31 96       	adiw	r30, 0x01	; 1
    1308:	f9 83       	std	Y+1, r31	; 0x01
    130a:	e8 83       	st	Y, r30
    130c:	2f c0       	rjmp	.+94     	; 0x136c <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	95 95       	asr	r25
    1312:	87 95       	ror	r24
    1314:	95 95       	asr	r25
    1316:	87 95       	ror	r24
    1318:	8c 83       	std	Y+4, r24	; 0x04
    131a:	88 23       	and	r24, r24
    131c:	61 f4       	brne	.+24     	; 0x1336 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    131e:	80 ec       	ldi	r24, 0xC0	; 192
    1320:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1322:	88 81       	ld	r24, Y
    1324:	99 81       	ldd	r25, Y+1	; 0x01
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	99 83       	std	Y+1, r25	; 0x01
    132a:	88 83       	st	Y, r24
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	28 17       	cp	r18, r24
    1332:	39 07       	cpc	r19, r25
    1334:	50 f0       	brcs	.+20     	; 0x134a <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	e8 81       	ld	r30, Y
    133a:	f9 81       	ldd	r31, Y+1	; 0x01
    133c:	80 81       	ld	r24, Z
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	82 23       	and	r24, r18
    1344:	93 23       	and	r25, r19
    1346:	89 2b       	or	r24, r25
    1348:	19 f0       	breq	.+6      	; 0x1350 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	8d 83       	std	Y+5, r24	; 0x05
    134e:	0d c0       	rjmp	.+26     	; 0x136a <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1350:	c9 01       	movw	r24, r18
    1352:	95 95       	asr	r25
    1354:	87 95       	ror	r24
    1356:	95 95       	asr	r25
    1358:	87 95       	ror	r24
    135a:	8c 83       	std	Y+4, r24	; 0x04
    135c:	88 23       	and	r24, r24
    135e:	19 f4       	brne	.+6      	; 0x1366 <readOneBit(decode_state_t*)+0x118>
    1360:	31 96       	adiw	r30, 0x01	; 1
    1362:	f9 83       	std	Y+1, r31	; 0x01
    1364:	e8 83       	st	Y, r30
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	01 c0       	rjmp	.+2      	; 0x136c <readOneBit(decode_state_t*)+0x11e>
    136a:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1380:	fc 01       	movw	r30, r24
    1382:	85 81       	ldd	r24, Z+5	; 0x05
    1384:	88 23       	and	r24, r24
    1386:	11 f0       	breq	.+4      	; 0x138c <readOneByteWithParity(decode_state_t*)+0x1a>
    1388:	10 e0       	ldi	r17, 0x00	; 0
    138a:	1b c0       	rjmp	.+54     	; 0x13c2 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    138c:	c7 01       	movw	r24, r14
    138e:	0e 94 27 09 	call	0x124e	; 0x124e <readOneBit(decode_state_t*)>
    1392:	18 2f       	mov	r17, r24
    1394:	08 2f       	mov	r16, r24
    1396:	c7 e0       	ldi	r28, 0x07	; 7
    1398:	d0 e0       	ldi	r29, 0x00	; 0
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    139c:	c7 01       	movw	r24, r14
    139e:	0e 94 27 09 	call	0x124e	; 0x124e <readOneBit(decode_state_t*)>
    parity ^= bit;
    13a2:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    13a4:	11 0f       	add	r17, r17
    13a6:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    13a8:	21 97       	sbiw	r28, 0x01	; 1
    13aa:	ff ef       	ldi	r31, 0xFF	; 255
    13ac:	cf 3f       	cpi	r28, 0xFF	; 255
    13ae:	df 07       	cpc	r29, r31
    13b0:	a9 f7       	brne	.-22     	; 0x139c <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    13b2:	c7 01       	movw	r24, r14
    13b4:	0e 94 27 09 	call	0x124e	; 0x124e <readOneBit(decode_state_t*)>
    13b8:	08 17       	cp	r16, r24
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	f7 01       	movw	r30, r14
    13c0:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    13c2:	81 2f       	mov	r24, r17
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	08 95       	ret

000013d2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
bool FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    13f0:	7c 83       	std	Y+4, r23	; 0x04
    13f2:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    13f4:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    13f6:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(false); } }
    13f8:	7e 01       	movw	r14, r28
    13fa:	08 94       	sec
    13fc:	e1 1c       	adc	r14, r1
    13fe:	f1 1c       	adc	r15, r1
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	88 23       	and	r24, r24
    1406:	c9 f5       	brne	.+114    	; 0x147a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
    1408:	c7 01       	movw	r24, r14
    140a:	0e 94 27 09 	call	0x124e	; 0x124e <readOneBit(decode_state_t*)>
    140e:	88 23       	and	r24, r24
    1410:	c1 f3       	breq	.-16     	; 0x1402 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    1412:	c7 01       	movw	r24, r14
    1414:	0e 94 b9 09 	call	0x1372	; 0x1372 <readOneByteWithParity(decode_state_t*)>
    1418:	f8 01       	movw	r30, r16
    141a:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    141c:	c7 01       	movw	r24, r14
    141e:	0e 94 b9 09 	call	0x1372	; 0x1372 <readOneByteWithParity(decode_state_t*)>
    1422:	f8 01       	movw	r30, r16
    1424:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    1426:	c7 01       	movw	r24, r14
    1428:	0e 94 b9 09 	call	0x1372	; 0x1372 <readOneByteWithParity(decode_state_t*)>
    142c:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    142e:	c7 01       	movw	r24, r14
    1430:	0e 94 b9 09 	call	0x1372	; 0x1372 <readOneByteWithParity(decode_state_t*)>
    1434:	f8 01       	movw	r30, r16
    1436:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 b9 09 	call	0x1372	; 0x1372 <readOneByteWithParity(decode_state_t*)>
    143e:	f8 01       	movw	r30, r16
    1440:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    1442:	c7 01       	movw	r24, r14
    1444:	0e 94 b9 09 	call	0x1372	; 0x1372 <readOneByteWithParity(decode_state_t*)>
    1448:	28 2f       	mov	r18, r24
  if(state.failed)
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	88 23       	and	r24, r24
    144e:	a9 f4       	brne	.+42     	; 0x147a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    1450:	f8 01       	movw	r30, r16
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	89 0f       	add	r24, r25
    1458:	84 5f       	subi	r24, 0xF4	; 244
    145a:	92 81       	ldd	r25, Z+2	; 0x02
    145c:	89 0f       	add	r24, r25
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	89 0f       	add	r24, r25
    1462:	8d 0d       	add	r24, r13
    1464:	82 17       	cp	r24, r18
    1466:	49 f4       	brne	.+18     	; 0x147a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#endif
    state.failed = true; return(false);
    }

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state)) { state.failed = true; return(false); }
    1468:	c7 01       	movw	r24, r14
    146a:	0e 94 27 09 	call	0x124e	; 0x124e <readOneBit(decode_state_t*)>
    146e:	88 23       	and	r24, r24
    1470:	21 f4       	brne	.+8      	; 0x147a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>

  return(!state.failed);
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	98 27       	eor	r25, r24
    1478:	01 c0       	rjmp	.+2      	; 0x147c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xaa>
    147a:	90 e0       	ldi	r25, 0x00	; 0
  }
    147c:	89 2f       	mov	r24, r25
    147e:	26 96       	adiw	r28, 0x06	; 6
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	08 95       	ret

0000149a <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <FHT8VCallForHeatPoll()+0xa>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <FHT8VCallForHeatPoll()+0xc>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    14aa:	80 91 41 01 	lds	r24, 0x0141
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <FHT8VCallForHeatPoll()+0x1a>
    14b2:	70 c0       	rjmp	.+224    	; 0x1594 <FHT8VCallForHeatPoll()+0xfa>

// Returns true if there is a pending accepted call for heat.
// If so a non-~0 housecode will be returned by FHT8VCallForHeatHeardGetAndClear().
bool FHT8VCallForHeatHeard()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    14b4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14b6:	f8 94       	cli
    { return(lastCallForHeatHC != (uint16_t)~0); }
    14b8:	80 91 02 01 	lds	r24, 0x0102
    14bc:	90 91 03 01 	lds	r25, 0x0103
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c0:	2f bf       	out	0x3f, r18	; 63
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }

  // Do nothing once call for heat has been collected and is pending action.
  if(FHT8VCallForHeatHeard()) { return(false); }
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	09 f0       	breq	.+2      	; 0x14ca <FHT8VCallForHeatPoll()+0x30>
    14c8:	65 c0       	rjmp	.+202    	; 0x1594 <FHT8VCallForHeatPoll()+0xfa>

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    14ca:	19 99       	sbic	0x03, 1	; 3
    14cc:	63 c0       	rjmp	.+198    	; 0x1594 <FHT8VCallForHeatPoll()+0xfa>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    14ce:	0e 94 63 12 	call	0x24c6	; 0x24c6 <RFM22ReadStatusBoth()>

  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    14d2:	94 ff       	sbrs	r25, 4
    14d4:	51 c0       	rjmp	.+162    	; 0x1578 <FHT8VCallForHeatPoll()+0xde>
    14d6:	e4 e7       	ldi	r30, 0x74	; 116
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	01 c0       	rjmp	.+2      	; 0x14de <FHT8VCallForHeatPoll()+0x44>
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
      { *p = 0; }
    14dc:	10 82       	st	Z, r1
  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	e1 34       	cpi	r30, 0x41	; 65
    14e4:	f8 07       	cpc	r31, r24
    14e6:	d1 f7       	brne	.-12     	; 0x14dc <FHT8VCallForHeatPoll()+0x42>
      { *p = 0; }
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    14e8:	8f 01       	movw	r16, r30
    14ea:	0f 5f       	subi	r16, 0xFF	; 255
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
    14ee:	c8 01       	movw	r24, r16
    14f0:	62 e3       	ldi	r22, 0x32	; 50
    14f2:	0e 94 16 11 	call	0x222c	; 0x222c <RFM22RXFIFO(unsigned char*, unsigned char)>
    14f6:	f8 01       	movw	r30, r16
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
      {
      if(0xcc != FHT8VRXHubArea[pos])
    14fa:	80 81       	ld	r24, Z
    14fc:	8c 3c       	cpi	r24, 0xCC	; 204
    14fe:	49 f0       	breq	.+18     	; 0x1512 <FHT8VCallForHeatPoll()+0x78>
        {
        if(pos < 2)
    1500:	92 30       	cpi	r25, 0x02	; 2
    1502:	58 f4       	brcc	.+22     	; 0x151a <FHT8VCallForHeatPoll()+0x80>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1504:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1506:	f8 94       	cli
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    150e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <FHT8VCallForHeatPoll()+0xf6>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
    1512:	9f 5f       	subi	r25, 0xFF	; 255
    1514:	31 96       	adiw	r30, 0x01	; 1
    1516:	96 30       	cpi	r25, 0x06	; 6
    1518:	81 f7       	brne	.-32     	; 0x14fa <FHT8VCallForHeatPoll()+0x60>
          }
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    const bool decoded = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1, &command);
    151a:	89 2f       	mov	r24, r25
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	8e 5b       	subi	r24, 0xBE	; 190
    1520:	9e 4f       	sbci	r25, 0xFE	; 254
    1522:	63 e7       	ldi	r22, 0x73	; 115
    1524:	71 e0       	ldi	r23, 0x01	; 1
    1526:	ae 01       	movw	r20, r28
    1528:	4f 5f       	subi	r20, 0xFF	; 255
    152a:	5f 4f       	sbci	r21, 0xFF	; 255
    152c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    if(decoded)
    1530:	88 23       	and	r24, r24
    1532:	c9 f0       	breq	.+50     	; 0x1566 <FHT8VCallForHeatPoll()+0xcc>
      DEBUG_SERIAL_PRINT_FLASHSTRING(" ext ");
      DEBUG_SERIAL_PRINT(command.extension);
      DEBUG_SERIAL_PRINTLN();
#endif
      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= getMinValvePcReallyOpen()))
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	86 32       	cpi	r24, 0x26	; 38
    1538:	79 f5       	brne	.+94     	; 0x1598 <FHT8VCallForHeatPoll()+0xfe>
    153a:	1c 81       	ldd	r17, Y+4	; 0x04
    153c:	0e 94 b4 04 	call	0x968	; 0x968 <getMinValvePcReallyOpen()>
    1540:	18 17       	cp	r17, r24
    1542:	50 f1       	brcs	.+84     	; 0x1598 <FHT8VCallForHeatPoll()+0xfe>
        {
        const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    1544:	99 81       	ldd	r25, Y+1	; 0x01
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	2a 81       	ldd	r18, Y+2	; 0x02
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	82 2b       	or	r24, r18
    154e:	93 2b       	or	r25, r19
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1550:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1552:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1554:	90 93 03 01 	sts	0x0103, r25
    1558:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    155c:	2f bf       	out	0x3f, r18	; 63
          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	0e 94 08 09 	call	0x1210	; 0x1210 <StopEavesdropOnFHT8V(bool)>
    1564:	19 c0       	rjmp	.+50     	; 0x1598 <FHT8VCallForHeatPoll()+0xfe>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1566:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1568:	f8 94       	cli
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1570:	9f bf       	out	0x3f, r25	; 63
      }
    else
      {
      setLastRXErr(FHT8VRXErr_BAD_RX_FRAME);
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bad RX frame");
    1572:	86 ec       	ldi	r24, 0xC6	; 198
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0a c0       	rjmp	.+20     	; 0x158c <FHT8VCallForHeatPoll()+0xf2>
//  else if(status & 0x80) // Got sync from incoming FHT8V message.
//    { 
////    syncSeen = true;
//    return(true);
//    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1578:	97 ff       	sbrs	r25, 7
    157a:	0c c0       	rjmp	.+24     	; 0x1594 <FHT8VCallForHeatPoll()+0xfa>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    157c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    157e:	f8 94       	cli
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1586:	9f bf       	out	0x3f, r25	; 63
//    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    {
      setLastRXErr(FHT8VRXErr_GENERIC);
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
    1588:	86 eb       	ldi	r24, 0xB6	; 182
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1590:	0e 94 13 09 	call	0x1226	; 0x1226 <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	01 c0       	rjmp	.+2      	; 0x159a <FHT8VCallForHeatPoll()+0x100>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
// The trailing 0xff is not sent.
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms, double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ec 01       	movw	r28, r24
    15b6:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    15b8:	88 81       	ld	r24, Y
    15ba:	8f 3f       	cpi	r24, 0xFF	; 255
    15bc:	41 f1       	breq	.+80     	; 0x160e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    15be:	88 23       	and	r24, r24
    15c0:	31 f4       	brne	.+12     	; 0x15ce <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    15c2:	86 e2       	ldi	r24, 0x26	; 38
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    15ca:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    15ce:	0e 94 37 04 	call	0x86e	; 0x86e <getMinBoilerOnMinutes()>
    15d2:	18 2f       	mov	r17, r24
    15d4:	88 23       	and	r24, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    15d8:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    15da:	0e 94 4d 0a 	call	0x149a	; 0x149a <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 08 09 	call	0x1210	; 0x1210 <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    15ea:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <RFM22TXFIFO()>

  if(doubleTX)
    15ee:	00 23       	and	r16, r16
    15f0:	31 f0       	breq	.+12     	; 0x15fe <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    15f2:	8d e3       	ldi	r24, 0x3D	; 61
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    RFM22TXFIFO(); // Re-send it!
    15fa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    15fe:	11 23       	and	r17, r17
    1600:	21 f0       	breq	.+8      	; 0x160a <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	0e 94 1b 09 	call	0x1236	; 0x1236 <SetupToEavesdropOnFHT8V(bool)>
    1608:	02 c0       	rjmp	.+4      	; 0x160e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    160a:	0e 94 88 12 	call	0x2510	; 0x2510 <RFM22ModeStandbyAndClearState()>
  }
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    162e:	0e 94 37 04 	call	0x86e	; 0x86e <getMinBoilerOnMinutes()>
    1632:	88 2e       	mov	r8, r24
    1634:	88 23       	and	r24, r24
    1636:	a9 f1       	breq	.+106    	; 0x16a2 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    1638:	88 24       	eor	r8, r8
    163a:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    163c:	89 2d       	mov	r24, r9
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	5c 01       	movw	r10, r24
    1642:	cc 24       	eor	r12, r12
    1644:	b7 fc       	sbrc	r11, 7
    1646:	c0 94       	com	r12
    1648:	dc 2c       	mov	r13, r12
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
    1658:	60 91 b2 00 	lds	r22, 0x00B2
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	69 5f       	subi	r22, 0xF9	; 249
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	88 27       	eor	r24, r24
    1664:	77 fd       	sbrc	r23, 7
    1666:	80 95       	com	r24
    1668:	98 2f       	mov	r25, r24
    166a:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <__floatsisf>
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 9c 2b 	call	0x5738	; 0x5738 <fmax>
    167a:	7b 01       	movw	r14, r22
    167c:	8c 01       	movw	r16, r24
    167e:	c6 01       	movw	r24, r12
    1680:	b5 01       	movw	r22, r10
    1682:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <__floatsisf>
    1686:	a8 01       	movw	r20, r16
    1688:	97 01       	movw	r18, r14
    168a:	0e 94 08 2c 	call	0x5810	; 0x5810 <__gesf2>
    168e:	18 16       	cp	r1, r24
    1690:	ec f2       	brlt	.-70     	; 0x164c <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    1692:	03 c0       	rjmp	.+6      	; 0x169a <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    169a:	80 91 b2 00 	lds	r24, 0x00B2
    169e:	89 15       	cp	r24, r9
    16a0:	c8 f3       	brcs	.-14     	; 0x1694 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    16a2:	89 2d       	mov	r24, r9
    16a4:	0e 94 20 10 	call	0x2040	; 0x2040 <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    16a8:	88 20       	and	r8, r8
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    16ac:	0e 94 4d 0a 	call	0x149a	; 0x149a <FHT8VCallForHeatPoll()>
#endif
    }
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	08 95       	ret

000016c6 <valveSettingTX(bool)>:
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
  }

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    16c6:	1f 93       	push	r17
    16c8:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    16ca:	88 e7       	ldi	r24, 0x78	; 120
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (getTRVPercentOpen() >= getMinValvePcReallyOpen()); }
    16d2:	0e 94 31 04 	call	0x862	; 0x862 <getTRVPercentOpen()>
    16d6:	18 2f       	mov	r17, r24
    16d8:	0e 94 b4 04 	call	0x968	; 0x968 <getMinValvePcReallyOpen()>
    16dc:	10 92 aa 01 	sts	0x01AA, r1
    16e0:	18 17       	cp	r17, r24
    16e2:	18 f0       	brcs	.+6      	; 0x16ea <valveSettingTX(bool)+0x24>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 aa 01 	sts	0x01AA, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    16ea:	1f 91       	pop	r17
    16ec:	08 95       	ret

000016ee <FHT8VCreateValveSetCmdFrame()>:

// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <FHT8VCreateValveSetCmdFrame()+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <FHT8VCreateValveSetCmdFrame()+0x8>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    16fa:	f9 99       	sbic	0x1f, 1	; 31
    16fc:	fe cf       	rjmp	.-4      	; 0x16fa <FHT8VCreateValveSetCmdFrame()+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    16fe:	80 e1       	ldi	r24, 0x10	; 16
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	92 bd       	out	0x22, r25	; 34
    1704:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1706:	f8 9a       	sbi	0x1f, 0	; 31
    1708:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    170a:	f9 99       	sbic	0x1f, 1	; 31
    170c:	fe cf       	rjmp	.-4      	; 0x170a <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    170e:	81 e1       	ldi	r24, 0x11	; 17
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	92 bd       	out	0x22, r25	; 34
    1714:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1716:	f8 9a       	sbi	0x1f, 0	; 31
    1718:	80 b5       	in	r24, 0x20	; 32
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    171a:	8a 83       	std	Y+2, r24	; 0x02
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    171c:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif
  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
    171e:	0e 94 31 04 	call	0x862	; 0x862 <getTRVPercentOpen()>
    1722:	48 2f       	mov	r20, r24
    1724:	88 e7       	ldi	r24, 0x78	; 120
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	be 01       	movw	r22, r28
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    1740:	1f 93       	push	r17
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <doSync(bool)+0x8>
    1748:	00 d0       	rcall	.+0      	; 0x174a <doSync(bool)+0xa>
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	18 2f       	mov	r17, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1750:	f9 99       	sbic	0x1f, 1	; 31
    1752:	fe cf       	rjmp	.-4      	; 0x1750 <doSync(bool)+0x10>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1754:	80 e1       	ldi	r24, 0x10	; 16
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	92 bd       	out	0x22, r25	; 34
    175a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    175c:	f8 9a       	sbi	0x1f, 0	; 31
    175e:	80 b5       	in	r24, 0x20	; 32
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    1760:	84 36       	cpi	r24, 0x64	; 100
    1762:	58 f4       	brcc	.+22     	; 0x177a <doSync(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1764:	f9 99       	sbic	0x1f, 1	; 31
    1766:	fe cf       	rjmp	.-4      	; 0x1764 <doSync(bool)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1768:	81 e1       	ldi	r24, 0x11	; 17
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	92 bd       	out	0x22, r25	; 34
    176e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1770:	f8 9a       	sbi	0x1f, 0	; 31
    1772:	80 b5       	in	r24, 0x20	; 32
    1774:	84 36       	cpi	r24, 0x64	; 100
    1776:	08 f4       	brcc	.+2      	; 0x177a <doSync(bool)+0x3a>
    1778:	af c0       	rjmp	.+350    	; 0x18d8 <doSync(bool)+0x198>
    { syncedWithFHT8V = false; return(false); }
    177a:	10 92 75 01 	sts	0x0175, r1
    177e:	a1 c0       	rjmp	.+322    	; 0x18c2 <doSync(bool)+0x182>

  if(0 == syncStateFHT8V)
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    1780:	81 ef       	ldi	r24, 0xF1	; 241
    1782:	80 93 77 01 	sts	0x0177, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1786:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <serialPrintAndFlush(char)>
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    1790:	88 e1       	ldi	r24, 0x18	; 24
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    1798:	20 91 77 01 	lds	r18, 0x0177
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <doSync(bool)+0x62>
    17a0:	45 c0       	rjmp	.+138    	; 0x182c <doSync(bool)+0xec>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    17a2:	20 ff       	sbrs	r18, 0
    17a4:	2b c0       	rjmp	.+86     	; 0x17fc <doSync(bool)+0xbc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17a6:	f9 99       	sbic	0x1f, 1	; 31
    17a8:	fe cf       	rjmp	.-4      	; 0x17a6 <doSync(bool)+0x66>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17aa:	80 e1       	ldi	r24, 0x10	; 16
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	92 bd       	out	0x22, r25	; 34
    17b0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17b2:	f8 9a       	sbi	0x1f, 0	; 31
    17b4:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17b6:	f9 99       	sbic	0x1f, 1	; 31
    17b8:	fe cf       	rjmp	.-4      	; 0x17b6 <doSync(bool)+0x76>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17ba:	81 e1       	ldi	r24, 0x11	; 17
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	92 bd       	out	0x22, r25	; 34
    17c0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17c2:	f8 9a       	sbi	0x1f, 0	; 31
    17c4:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    17c6:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    17c8:	8c e2       	ldi	r24, 0x2C	; 44
    17ca:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    17cc:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    17ce:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    17d0:	88 e7       	ldi	r24, 0x78	; 120
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	be 01       	movw	r22, r28
    17d6:	6f 5f       	subi	r22, 0xFF	; 255
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	0e 94 52 08 	call	0x10a4	; 0x10a4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    17de:	80 91 74 01 	lds	r24, 0x0174
    17e2:	88 23       	and	r24, r24
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <doSync(bool)+0xb2>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    17e6:	82 95       	swap	r24
    17e8:	88 0f       	add	r24, r24
    17ea:	88 0f       	add	r24, r24
    17ec:	80 7c       	andi	r24, 0xC0	; 192
    17ee:	0e 94 0c 0b 	call	0x1618	; 0x1618 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    17f2:	88 e7       	ldi	r24, 0x78	; 120
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	61 2f       	mov	r22, r17
    17f8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    17fc:	80 91 77 01 	lds	r24, 0x0177
    1800:	81 50       	subi	r24, 0x01	; 1
    1802:	80 93 77 01 	sts	0x0177, r24
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	09 f0       	breq	.+2      	; 0x180c <doSync(bool)+0xcc>
    180a:	5d c0       	rjmp	.+186    	; 0x18c6 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    180c:	f9 99       	sbic	0x1f, 1	; 31
    180e:	fe cf       	rjmp	.-4      	; 0x180c <doSync(bool)+0xcc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1810:	81 e1       	ldi	r24, 0x11	; 17
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	92 bd       	out	0x22, r25	; 34
    1816:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1818:	f8 9a       	sbi	0x1f, 0	; 31
    181a:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    181c:	80 91 74 01 	lds	r24, 0x0174
    1820:	8b 5f       	subi	r24, 0xFB	; 251
    1822:	97 70       	andi	r25, 0x07	; 7
    1824:	89 0f       	add	r24, r25
    1826:	80 93 76 01 	sts	0x0176, r24
    182a:	4b c0       	rjmp	.+150    	; 0x18c2 <doSync(bool)+0x182>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    182c:	80 91 76 01 	lds	r24, 0x0176
    1830:	81 50       	subi	r24, 0x01	; 1
    1832:	80 93 76 01 	sts	0x0176, r24
    1836:	88 23       	and	r24, r24
    1838:	09 f0       	breq	.+2      	; 0x183c <doSync(bool)+0xfc>
    183a:	45 c0       	rjmp	.+138    	; 0x18c6 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    183c:	f9 99       	sbic	0x1f, 1	; 31
    183e:	fe cf       	rjmp	.-4      	; 0x183c <doSync(bool)+0xfc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1840:	80 e1       	ldi	r24, 0x10	; 16
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	92 bd       	out	0x22, r25	; 34
    1846:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1848:	f8 9a       	sbi	0x1f, 0	; 31
    184a:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    184c:	f9 99       	sbic	0x1f, 1	; 31
    184e:	fe cf       	rjmp	.-4      	; 0x184c <doSync(bool)+0x10c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1850:	81 e1       	ldi	r24, 0x11	; 17
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	92 bd       	out	0x22, r25	; 34
    1856:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1858:	f8 9a       	sbi	0x1f, 0	; 31
    185a:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    185c:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    1862:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    1864:	10 92 aa 01 	sts	0x01AA, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    1868:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    186a:	88 e7       	ldi	r24, 0x78	; 120
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	be 01       	movw	r22, r28
    1870:	6f 5f       	subi	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	0e 94 52 08 	call	0x10a4	; 0x10a4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    1878:	80 91 74 01 	lds	r24, 0x0174
    187c:	88 23       	and	r24, r24
    187e:	31 f0       	breq	.+12     	; 0x188c <doSync(bool)+0x14c>
    1880:	82 95       	swap	r24
    1882:	88 0f       	add	r24, r24
    1884:	88 0f       	add	r24, r24
    1886:	80 7c       	andi	r24, 0xC0	; 192
    1888:	0e 94 0c 0b 	call	0x1618	; 0x1618 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    188c:	88 e7       	ldi	r24, 0x78	; 120
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	61 2f       	mov	r22, r17
    1892:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
    1896:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <serialPrintAndFlush(char)>
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 75 01 	sts	0x0175, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    18ae:	0e 94 77 0b 	call	0x16ee	; 0x16ee <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    18b2:	90 91 74 01 	lds	r25, 0x0174
    18b6:	9d 51       	subi	r25, 0x1D	; 29
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	87 70       	andi	r24, 0x07	; 7
    18bc:	98 0f       	add	r25, r24
    18be:	90 93 76 01 	sts	0x0176, r25
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <doSync(bool)+0x188>
      return(false);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	1f 91       	pop	r17
    18d6:	08 95       	ret
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    { syncedWithFHT8V = false; return(false); }

  if(0 == syncStateFHT8V)
    18d8:	80 91 77 01 	lds	r24, 0x0177
    18dc:	88 23       	and	r24, r24
    18de:	09 f0       	breq	.+2      	; 0x18e2 <doSync(bool)+0x1a2>
    18e0:	5b cf       	rjmp	.-330    	; 0x1798 <doSync(bool)+0x58>
    18e2:	4e cf       	rjmp	.-356    	; 0x1780 <doSync(bool)+0x40>

000018e4 <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    18e4:	1f 93       	push	r17
    18e6:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    18e8:	80 91 74 01 	lds	r24, 0x0174
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	80 93 74 01 	sts	0x0174, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	30 f0       	brcs	.+12     	; 0x1902 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    18f6:	8c ed       	ldi	r24, 0xDC	; 220
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    18fe:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1902:	80 91 75 01 	lds	r24, 0x0175
    1906:	88 23       	and	r24, r24
    1908:	21 f4       	brne	.+8      	; 0x1912 <FHT8VPollSyncAndTX_Next(bool)+0x2e>
    190a:	81 2f       	mov	r24, r17
    190c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <doSync(bool)>
    1910:	2d c0       	rjmp	.+90     	; 0x196c <FHT8VPollSyncAndTX_Next(bool)+0x88>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    1912:	80 91 76 01 	lds	r24, 0x0176
    1916:	81 50       	subi	r24, 0x01	; 1
    1918:	80 93 76 01 	sts	0x0176, r24
    191c:	88 23       	and	r24, r24
    191e:	11 f0       	breq	.+4      	; 0x1924 <FHT8VPollSyncAndTX_Next(bool)+0x40>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	24 c0       	rjmp	.+72     	; 0x196c <FHT8VPollSyncAndTX_Next(bool)+0x88>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    1924:	80 91 74 01 	lds	r24, 0x0174
    1928:	82 95       	swap	r24
    192a:	88 0f       	add	r24, r24
    192c:	88 0f       	add	r24, r24
    192e:	80 7c       	andi	r24, 0xC0	; 192
    1930:	0e 94 0c 0b 	call	0x1618	; 0x1618 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    1934:	81 2f       	mov	r24, r17
    1936:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    193a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    1944:	83 ed       	ldi	r24, 0xD3	; 211
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    194c:	f9 99       	sbic	0x1f, 1	; 31
    194e:	fe cf       	rjmp	.-4      	; 0x194c <FHT8VPollSyncAndTX_Next(bool)+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1950:	81 e1       	ldi	r24, 0x11	; 17
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	92 bd       	out	0x22, r25	; 34
    1956:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1958:	f8 9a       	sbi	0x1f, 0	; 31
    195a:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    195c:	80 91 74 01 	lds	r24, 0x0174
    1960:	8d 51       	subi	r24, 0x1D	; 29
    1962:	97 70       	andi	r25, 0x07	; 7
    1964:	89 0f       	add	r24, r25
    1966:	80 93 76 01 	sts	0x0176, r24
    196a:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    196c:	1f 91       	pop	r17
    196e:	08 95       	ret

00001970 <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    1970:	1f 93       	push	r17
    1972:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
    1974:	10 92 74 01 	sts	0x0174, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1978:	80 91 75 01 	lds	r24, 0x0175
    197c:	88 23       	and	r24, r24
    197e:	21 f4       	brne	.+8      	; 0x1988 <FHT8VPollSyncAndTX_First(bool)+0x18>
    1980:	81 2f       	mov	r24, r17
    1982:	0e 94 a0 0b 	call	0x1740	; 0x1740 <doSync(bool)>
    1986:	30 c0       	rjmp	.+96     	; 0x19e8 <FHT8VPollSyncAndTX_First(bool)+0x78>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
    1988:	80 91 76 01 	lds	r24, 0x0176
    198c:	88 23       	and	r24, r24
    198e:	31 f4       	brne	.+12     	; 0x199c <FHT8VPollSyncAndTX_First(bool)+0x2c>
    1990:	8b e4       	ldi	r24, 0x4B	; 75
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1998:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    199c:	80 91 76 01 	lds	r24, 0x0176
    19a0:	85 30       	cpi	r24, 0x05	; 5
    19a2:	10 f0       	brcs	.+4      	; 0x19a8 <FHT8VPollSyncAndTX_First(bool)+0x38>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    19a4:	84 50       	subi	r24, 0x04	; 4
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <FHT8VPollSyncAndTX_First(bool)+0x72>
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    19a8:	81 50       	subi	r24, 0x01	; 1
    19aa:	80 93 76 01 	sts	0x0176, r24
    19ae:	88 23       	and	r24, r24
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <FHT8VPollSyncAndTX_First(bool)+0x46>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	19 c0       	rjmp	.+50     	; 0x19e8 <FHT8VPollSyncAndTX_First(bool)+0x78>
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    19b6:	81 2f       	mov	r24, r17
    19b8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    19bc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    19c6:	82 e4       	ldi	r24, 0x42	; 66
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19ce:	f9 99       	sbic	0x1f, 1	; 31
    19d0:	fe cf       	rjmp	.-4      	; 0x19ce <FHT8VPollSyncAndTX_First(bool)+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    19d2:	81 e1       	ldi	r24, 0x11	; 17
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	92 bd       	out	0x22, r25	; 34
    19d8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19da:	f8 9a       	sbi	0x1f, 0	; 31
    19dc:	80 b5       	in	r24, 0x20	; 32
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    19de:	87 70       	andi	r24, 0x07	; 7
    19e0:	8d 51       	subi	r24, 0x1D	; 29
    19e2:	80 93 76 01 	sts	0x0176, r24
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    19e8:	1f 91       	pop	r17
    19ea:	08 95       	ret

000019ec <FHT8VSetHC2(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    19ec:	68 2f       	mov	r22, r24
    19ee:	81 e1       	ldi	r24, 0x11	; 17
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    19f6:	08 95       	ret

000019f8 <FHT8VSetHC1(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    19f8:	68 2f       	mov	r22, r24
    19fa:	80 e1       	ldi	r24, 0x10	; 16
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    1a02:	08 95       	ret

00001a04 <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    1a04:	80 e1       	ldi	r24, 0x10	; 16
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    1a0c:	81 e1       	ldi	r24, 0x11	; 17
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
  }
    1a14:	08 95       	ret

00001a16 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    1a26:	80 91 b5 01 	lds	r24, 0x01B5
  sTemp += MAIN_TICK_S;
    1a2a:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    1a2c:	8c 33       	cpi	r24, 0x3C	; 60
    1a2e:	c8 f0       	brcs	.+50     	; 0x1a62 <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    1a30:	80 91 b6 01 	lds	r24, 0x01B6
    1a34:	90 91 b7 01 	lds	r25, 0x01B7
    1a38:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    1a3a:	25 e0       	ldi	r18, 0x05	; 5
    1a3c:	80 3a       	cpi	r24, 0xA0	; 160
    1a3e:	92 07       	cpc	r25, r18
    1a40:	58 f0       	brcs	.+22     	; 0x1a58 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    1a42:	80 91 b8 01 	lds	r24, 0x01B8
    1a46:	90 91 b9 01 	lds	r25, 0x01B9
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	90 93 b9 01 	sts	0x01B9, r25
    1a50:	80 93 b8 01 	sts	0x01B8, r24
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    1a58:	90 93 b7 01 	sts	0x01B7, r25
    1a5c:	80 93 b6 01 	sts	0x01B6, r24
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    1a62:	80 93 b5 01 	sts	0x01B5, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	2f 91       	pop	r18
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    1a76:	1f 92       	push	r1
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	0f 92       	push	r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	0f 92       	push	r0
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    1a8e:	88 e1       	ldi	r24, 0x18	; 24
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	80 93 60 00 	sts	0x0060, r24
    1a98:	10 92 60 00 	sts	0x0060, r1
    1a9c:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  uint8_t x;
  _watchdogFired = (uint8_t) 0x80 | (uint8_t) (int) &x; // Ensure non-zero, retaining any entropy in ls bits.
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	80 68       	ori	r24, 0x80	; 128
    1aa4:	80 93 ab 01 	sts	0x01AB, r24
  }
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    1abc:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    1abe:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    1ac2:	28 e0       	ldi	r18, 0x08	; 8
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	40 93 61 00 	sts	0x0061, r20
    1ad0:	20 93 61 00 	sts	0x0061, r18
    1ad4:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1ad6:	31 97       	sbiw	r30, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	8f 70       	andi	r24, 0x0F	; 15
    1ade:	90 70       	andi	r25, 0x00	; 0
    1ae0:	20 e8       	ldi	r18, 0x80	; 128
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	20 93 61 00 	sts	0x0061, r18
    1aea:	80 93 61 00 	sts	0x0061, r24
    1aee:	0f be       	out	0x3f, r0	; 63
  }
    1af0:	08 95       	ret

00001af2 <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1af2:	83 b7       	in	r24, 0x33	; 51
    1af4:	81 7f       	andi	r24, 0xF1	; 241
    1af6:	86 60       	ori	r24, 0x06	; 6
    1af8:	83 bf       	out	0x33, r24	; 51
  cli();
    1afa:	f8 94       	cli
  sleep_enable();
    1afc:	83 b7       	in	r24, 0x33	; 51
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1b02:	85 b7       	in	r24, 0x35	; 53
    1b04:	80 66       	ori	r24, 0x60	; 96
    1b06:	85 bf       	out	0x35, r24	; 53
    1b08:	8f 7d       	andi	r24, 0xDF	; 223
    1b0a:	85 bf       	out	0x35, r24	; 53
  sei();
    1b0c:	78 94       	sei
  sleep_cpu();
    1b0e:	88 95       	sleep
  sleep_disable();
    1b10:	83 b7       	in	r24, 0x33	; 51
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	83 bf       	out	0x33, r24	; 51
  sei();
    1b16:	78 94       	sei
  }
    1b18:	08 95       	ret

00001b1a <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1b1a:	10 92 ab 01 	sts	0x01AB, r1

  wdt_enable(watchdogSleep);
    1b1e:	83 fd       	sbrc	r24, 3
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <nap(signed char)+0xc>
    1b22:	28 e0       	ldi	r18, 0x08	; 8
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <nap(signed char)+0xe>
    1b26:	28 e2       	ldi	r18, 0x28	; 40
    1b28:	87 70       	andi	r24, 0x07	; 7
    1b2a:	28 2b       	or	r18, r24
    1b2c:	88 e1       	ldi	r24, 0x18	; 24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	a8 95       	wdr
    1b36:	80 93 60 00 	sts	0x0060, r24
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1b40:	80 91 60 00 	lds	r24, 0x0060
    1b44:	80 64       	ori	r24, 0x40	; 64
    1b46:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1b4a:	83 b7       	in	r24, 0x33	; 51
    1b4c:	81 7f       	andi	r24, 0xF1	; 241
    1b4e:	86 60       	ori	r24, 0x06	; 6
    1b50:	83 bf       	out	0x33, r24	; 51
  cli();
    1b52:	f8 94       	cli
  sleep_enable();
    1b54:	83 b7       	in	r24, 0x33	; 51
    1b56:	81 60       	ori	r24, 0x01	; 1
    1b58:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1b5a:	85 b7       	in	r24, 0x35	; 53
    1b5c:	80 66       	ori	r24, 0x60	; 96
    1b5e:	85 bf       	out	0x35, r24	; 53
    1b60:	8f 7d       	andi	r24, 0xDF	; 223
    1b62:	85 bf       	out	0x35, r24	; 53
  sei();
    1b64:	78 94       	sei
  sleep_cpu();
    1b66:	88 95       	sleep
  sleep_disable();
    1b68:	83 b7       	in	r24, 0x33	; 51
    1b6a:	8e 7f       	andi	r24, 0xFE	; 254
    1b6c:	83 bf       	out	0x33, r24	; 51
  sei();
    1b6e:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(_watchdogFired)
    1b70:	80 91 ab 01 	lds	r24, 0x01AB
    1b74:	88 23       	and	r24, r24
    1b76:	49 f3       	breq	.-46     	; 0x1b4a <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    1b78:	88 e1       	ldi	r24, 0x18	; 24
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	80 93 60 00 	sts	0x0060, r24
    1b82:	10 92 60 00 	sts	0x0060, r1
    1b86:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    1b88:	08 95       	ret

00001b8a <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1b8a:	10 92 ab 01 	sts	0x01AB, r1
  wdt_enable(watchdogSleep);
    1b8e:	83 fd       	sbrc	r24, 3
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <idleCPU(signed char)+0xc>
    1b92:	28 e0       	ldi	r18, 0x08	; 8
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <idleCPU(signed char)+0xe>
    1b96:	28 e2       	ldi	r18, 0x28	; 40
    1b98:	87 70       	andi	r24, 0x07	; 7
    1b9a:	28 2b       	or	r18, r24
    1b9c:	88 e1       	ldi	r24, 0x18	; 24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	a8 95       	wdr
    1ba6:	80 93 60 00 	sts	0x0060, r24
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1bb0:	80 91 60 00 	lds	r24, 0x0060
    1bb4:	80 64       	ori	r24, 0x40	; 64
    1bb6:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    1bba:	83 b7       	in	r24, 0x33	; 51
    1bbc:	81 7f       	andi	r24, 0xF1	; 241
    1bbe:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    1bc0:	83 b7       	in	r24, 0x33	; 51
    1bc2:	81 60       	ori	r24, 0x01	; 1
    1bc4:	83 bf       	out	0x33, r24	; 51
    1bc6:	88 95       	sleep
    1bc8:	83 b7       	in	r24, 0x33	; 51
    1bca:	8e 7f       	andi	r24, 0xFE	; 254
    1bcc:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    1bce:	88 e1       	ldi	r24, 0x18	; 24
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	80 93 60 00 	sts	0x0060, r24
    1bd8:	10 92 60 00 	sts	0x0060, r1
    1bdc:	0f be       	out	0x3f, r0	; 63
  return(_watchdogFired != 0);
    1bde:	80 91 ab 01 	lds	r24, 0x01AB
    1be2:	81 11       	cpse	r24, r1
    1be4:	81 e0       	ldi	r24, 0x01	; 1
  }
    1be6:	08 95       	ret

00001be8 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    1be8:	1f 92       	push	r1
    1bea:	0f 92       	push	r0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	0f 92       	push	r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	8f 93       	push	r24
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	80 93 ad 01 	sts	0x01AD, r24
    1bfa:	8f 91       	pop	r24
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	0f 90       	pop	r0
    1c02:	1f 90       	pop	r1
    1c04:	18 95       	reti

00001c06 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    1c0e:	80 91 64 00 	lds	r24, 0x0064
    1c12:	80 fd       	sbrc	r24, 0
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	0b c0       	rjmp	.+22     	; 0x1c30 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1c1a:	80 91 64 00 	lds	r24, 0x0064
    1c1e:	8e 7f       	andi	r24, 0xFE	; 254
    1c20:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1c24:	80 91 7a 00 	lds	r24, 0x007A
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	80 93 7a 00 	sts	0x007A, r24
    1c2e:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    1c30:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    1c34:	12 30       	cpi	r17, 0x02	; 2
    1c36:	1c f4       	brge	.+6      	; 0x1c3e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    1c3e:	83 b7       	in	r24, 0x33	; 51
    1c40:	81 7f       	andi	r24, 0xF1	; 241
    1c42:	82 60       	ori	r24, 0x02	; 2
    1c44:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    1c46:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    1c4a:	12 30       	cpi	r17, 0x02	; 2
    1c4c:	24 f0       	brlt	.+8      	; 0x1c56 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    1c4e:	80 91 7a 00 	lds	r24, 0x007A
    1c52:	80 62       	ori	r24, 0x20	; 32
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    1c56:	80 91 7a 00 	lds	r24, 0x007A
    1c5a:	8f 7d       	andi	r24, 0xDF	; 223
    1c5c:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    1c60:	80 91 7a 00 	lds	r24, 0x007A
    1c64:	88 60       	ori	r24, 0x08	; 8
    1c66:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    1c6a:	80 91 7a 00 	lds	r24, 0x007A
    1c6e:	80 64       	ori	r24, 0x40	; 64
    1c70:	80 93 7a 00 	sts	0x007A, r24
    1c74:	20 91 ac 01 	lds	r18, 0x01AC
    1c78:	5f ef       	ldi	r21, 0xFF	; 255
    1c7a:	4f ef       	ldi	r20, 0xFF	; 255
    1c7c:	1e c0       	rjmp	.+60     	; 0x1cba <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb4>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    1c7e:	10 92 ad 01 	sts	0x01AD, r1
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8c>
      while(!ADC_complete) { sleep_mode(); }
    1c84:	83 b7       	in	r24, 0x33	; 51
    1c86:	81 60       	ori	r24, 0x01	; 1
    1c88:	83 bf       	out	0x33, r24	; 51
    1c8a:	88 95       	sleep
    1c8c:	83 b7       	in	r24, 0x33	; 51
    1c8e:	8e 7f       	andi	r24, 0xFE	; 254
    1c90:	83 bf       	out	0x33, r24	; 51
    1c92:	80 91 ad 01 	lds	r24, 0x01AD
    1c96:	88 23       	and	r24, r24
    1c98:	a9 f3       	breq	.-22     	; 0x1c84 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7e>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1c9a:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    1c9e:	90 91 79 00 	lds	r25, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    1ca2:	94 17       	cp	r25, r20
    1ca4:	11 f4       	brne	.+4      	; 0x1caa <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa4>
    1ca6:	35 17       	cp	r19, r21
    1ca8:	59 f0       	breq	.+22     	; 0x1cc0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xba>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    1caa:	82 2f       	mov	r24, r18
    1cac:	86 95       	lsr	r24
    1cae:	29 2f       	mov	r18, r25
    1cb0:	23 27       	eor	r18, r19
    1cb2:	2e 5f       	subi	r18, 0xFE	; 254
    1cb4:	28 0f       	add	r18, r24
    1cb6:	49 2f       	mov	r20, r25
    1cb8:	53 2f       	mov	r21, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    1cba:	11 50       	subi	r17, 0x01	; 1
    1cbc:	17 ff       	sbrs	r17, 7
    1cbe:	df cf       	rjmp	.-66     	; 0x1c7e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x78>
    1cc0:	20 93 ac 01 	sts	0x01AC, r18
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1cc4:	80 91 7a 00 	lds	r24, 0x007A
    1cc8:	87 7f       	andi	r24, 0xF7	; 247
    1cca:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1cce:	80 91 7a 00 	lds	r24, 0x007A
    1cd2:	8f 7d       	andi	r24, 0xDF	; 223
    1cd4:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1cd8:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    1cdc:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    1ce0:	00 23       	and	r16, r16
    1ce2:	51 f0       	breq	.+20     	; 0x1cf8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf2>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1ce4:	80 91 7a 00 	lds	r24, 0x007A
    1ce8:	8f 77       	andi	r24, 0x7F	; 127
    1cea:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1cee:	80 91 64 00 	lds	r24, 0x0064
    1cf2:	81 60       	ori	r24, 0x01	; 1
    1cf4:	80 93 64 00 	sts	0x0064, r24
    1cf8:	94 2f       	mov	r25, r20
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	28 2b       	or	r18, r24
    1d00:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    1d02:	c9 01       	movw	r24, r18
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <isBatteryLow()>:


// True if battery voltage was low when last read.
// For a 2xAA NiMH configuration this is ~2.0V, where the BOD may force a reset at 1.8V.
static bool batteryLow; // Initially false.
bool isBatteryLow() { return(batteryLow); }
    1d0a:	80 91 b0 01 	lds	r24, 0x01B0
    1d0e:	08 95       	ret

00001d10 <getBatterymV()>:
// Last-read battery voltage.
static uint16_t batterymV;

// Get power supply voltage in mV as last read by readBatterymV(); non-negative, intially zero until first readBatterymV().
uint16_t getBatterymV() { return(batterymV); }
    1d10:	80 91 ae 01 	lds	r24, 0x01AE
    1d14:	90 91 af 01 	lds	r25, 0x01AF
    1d18:	08 95       	ret

00001d1a <readBatterymV()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t readBatterymV()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS0) | 14);
    1d1a:	8e e4       	ldi	r24, 0x4E	; 78
    1d1c:	63 e0       	ldi	r22, 0x03	; 3
    1d1e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d22:	bc 01       	movw	r22, r24
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    1d24:	80 ec       	ldi	r24, 0xC0	; 192
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
    1d28:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	84 e0       	ldi	r24, 0x04	; 4
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	8a 95       	dec	r24
    1d36:	e1 f7       	brne	.-8      	; 0x1d30 <readBatterymV()+0x16>
    1d38:	26 0f       	add	r18, r22
    1d3a:	37 1f       	adc	r19, r23
  batterymV = result;
    1d3c:	30 93 af 01 	sts	0x01AF, r19
    1d40:	20 93 ae 01 	sts	0x01AE, r18
  batteryLow = (result < 2000); // Suitable for 2xAA NiMH, with BOD at 1.8V.
    1d44:	10 92 b0 01 	sts	0x01B0, r1
    1d48:	87 e0       	ldi	r24, 0x07	; 7
    1d4a:	20 3d       	cpi	r18, 0xD0	; 208
    1d4c:	38 07       	cpc	r19, r24
    1d4e:	18 f4       	brcc	.+6      	; 0x1d56 <readBatterymV()+0x3c>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	80 93 b0 01 	sts	0x01B0, r24
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    1d56:	c9 01       	movw	r24, r18
    1d58:	08 95       	ret

00001d5a <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d62:	84 54       	subi	r24, 0x44	; 68
    1d64:	91 40       	sbci	r25, 0x01	; 1
    1d66:	22 ed       	ldi	r18, 0xD2	; 210
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	a9 01       	movw	r20, r18
    1d6c:	84 9f       	mul	r24, r20
    1d6e:	90 01       	movw	r18, r0
    1d70:	85 9f       	mul	r24, r21
    1d72:	30 0d       	add	r19, r0
    1d74:	94 9f       	mul	r25, r20
    1d76:	30 0d       	add	r19, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	94 e0       	ldi	r25, 0x04	; 4
    1d7c:	35 95       	asr	r19
    1d7e:	27 95       	ror	r18
    1d80:	9a 95       	dec	r25
    1d82:	e1 f7       	brne	.-8      	; 0x1d7c <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    1d84:	c9 01       	movw	r24, r18
    1d86:	08 95       	ret

00001d88 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    1d88:	62 95       	swap	r22
    1d8a:	66 0f       	add	r22, r22
    1d8c:	66 0f       	add	r22, r22
    1d8e:	60 7c       	andi	r22, 0xC0	; 192
    1d90:	87 70       	andi	r24, 0x07	; 7
    1d92:	86 2b       	or	r24, r22
    1d94:	63 e0       	ldi	r22, 0x03	; 3
    1d96:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d9a:	08 95       	ret

00001d9c <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    1d9c:	ec eb       	ldi	r30, 0xBC	; 188
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8b 7f       	andi	r24, 0xFB	; 251
    1da4:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    1da6:	e4 e6       	ldi	r30, 0x64	; 100
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 68       	ori	r24, 0x80	; 128
    1dae:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    1db0:	08 95       	ret

00001db2 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    1db2:	10 92 ab 01 	sts	0x01AB, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    1db6:	88 e0       	ldi	r24, 0x08	; 8
    1db8:	28 e1       	ldi	r18, 0x18	; 24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	a8 95       	wdr
    1dc2:	20 93 60 00 	sts	0x0060, r18
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1dcc:	80 91 60 00 	lds	r24, 0x0060
    1dd0:	80 64       	ori	r24, 0x40	; 64
    1dd2:	80 93 60 00 	sts	0x0060, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    1dda:	9f 5f       	subi	r25, 0xFF	; 255
    1ddc:	80 91 ab 01 	lds	r24, 0x01AB
    1de0:	88 23       	and	r24, r24
    1de2:	d9 f3       	breq	.-10     	; 0x1dda <clockJitterWDT()+0x28>
  return(count);
  }
    1de4:	89 2f       	mov	r24, r25
    1de6:	08 95       	ret

00001de8 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    1de8:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    1dea:	90 91 b2 00 	lds	r25, 0x00B2
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    1df4:	4f 5f       	subi	r20, 0xFF	; 255
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	80 91 b2 00 	lds	r24, 0x00B2
    1dfc:	98 17       	cp	r25, r24
    1dfe:	d1 f3       	breq	.-12     	; 0x1df4 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    1e00:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    1e04:	10 92 ab 01 	sts	0x01AB, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    1e08:	88 e0       	ldi	r24, 0x08	; 8
    1e0a:	28 e1       	ldi	r18, 0x18	; 24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	a8 95       	wdr
    1e14:	20 93 60 00 	sts	0x0060, r18
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1e1e:	80 91 60 00 	lds	r24, 0x0060
    1e22:	80 64       	ori	r24, 0x40	; 64
    1e24:	80 93 60 00 	sts	0x0060, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	e0 e0       	ldi	r30, 0x00	; 0
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1e34:	a8 e1       	ldi	r26, 0x18	; 24
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    1e3a:	80 91 ab 01 	lds	r24, 0x01AB
    1e3e:	88 23       	and	r24, r24
    1e40:	11 f4       	brne	.+4      	; 0x1e46 <clockJitterEntropyByte()+0x5e>
    1e42:	2f 5f       	subi	r18, 0xFF	; 255
    1e44:	2a c0       	rjmp	.+84     	; 0x1e9a <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1e46:	27 17       	cp	r18, r23
    1e48:	c1 f0       	breq	.+48     	; 0x1e7a <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    1e4a:	42 27       	eor	r20, r18
    1e4c:	04 2e       	mov	r0, r20
    1e4e:	42 95       	swap	r20
    1e50:	40 7f       	andi	r20, 0xF0	; 240
    1e52:	40 25       	eor	r20, r0
    1e54:	05 2e       	mov	r0, r21
    1e56:	54 2f       	mov	r21, r20
    1e58:	42 95       	swap	r20
    1e5a:	4f 70       	andi	r20, 0x0F	; 15
    1e5c:	04 26       	eor	r0, r20
    1e5e:	46 95       	lsr	r20
    1e60:	54 27       	eor	r21, r20
    1e62:	45 27       	eor	r20, r21
    1e64:	44 0f       	add	r20, r20
    1e66:	44 0f       	add	r20, r20
    1e68:	44 0f       	add	r20, r20
    1e6a:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1e6c:	99 0f       	add	r25, r25
    1e6e:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1e70:	31 50       	subi	r19, 0x01	; 1
    1e72:	13 16       	cp	r1, r19
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <clockJitterEntropyByte()+0x90>
    1e76:	34 c0       	rjmp	.+104    	; 0x1ee0 <clockJitterEntropyByte()+0xf8>
    1e78:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    1e7a:	10 92 ab 01 	sts	0x01AB, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	a8 95       	wdr
    1e84:	a0 93 60 00 	sts	0x0060, r26
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    1e8e:	80 91 60 00 	lds	r24, 0x0060
    1e92:	80 64       	ori	r24, 0x40	; 64
    1e94:	80 93 60 00 	sts	0x0060, r24
    1e98:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    1e9a:	80 91 b2 00 	lds	r24, 0x00B2
    1e9e:	f8 17       	cp	r31, r24
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <clockJitterEntropyByte()+0xbe>
    1ea2:	61 50       	subi	r22, 0x01	; 1
    1ea4:	ca cf       	rjmp	.-108    	; 0x1e3a <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    1ea6:	6e 17       	cp	r22, r30
    1ea8:	b9 f0       	breq	.+46     	; 0x1ed8 <clockJitterEntropyByte()+0xf0>
    1eaa:	46 27       	eor	r20, r22
    1eac:	04 2e       	mov	r0, r20
    1eae:	42 95       	swap	r20
    1eb0:	40 7f       	andi	r20, 0xF0	; 240
    1eb2:	40 25       	eor	r20, r0
    1eb4:	05 2e       	mov	r0, r21
    1eb6:	54 2f       	mov	r21, r20
    1eb8:	42 95       	swap	r20
    1eba:	4f 70       	andi	r20, 0x0F	; 15
    1ebc:	04 26       	eor	r0, r20
    1ebe:	46 95       	lsr	r20
    1ec0:	54 27       	eor	r21, r20
    1ec2:	45 27       	eor	r20, r21
    1ec4:	44 0f       	add	r20, r20
    1ec6:	44 0f       	add	r20, r20
    1ec8:	44 0f       	add	r20, r20
    1eca:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1ecc:	99 0f       	add	r25, r25
    1ece:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1ed0:	31 50       	subi	r19, 0x01	; 1
    1ed2:	13 16       	cp	r1, r19
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <clockJitterEntropyByte()+0xf8>
    1ed6:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    1ed8:	f0 91 b2 00 	lds	r31, 0x00B2
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	ad cf       	rjmp	.-166    	; 0x1e3a <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    1ee0:	88 e1       	ldi	r24, 0x18	; 24
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	80 93 60 00 	sts	0x0060, r24
    1eea:	10 92 60 00 	sts	0x0060, r1
    1eee:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    1ef0:	89 2f       	mov	r24, r25
    1ef2:	1f 91       	pop	r17
    1ef4:	08 95       	ret

00001ef6 <captureEntropy1()>:

// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU(), _watchdogFired); }
    1ef6:	80 91 b2 00 	lds	r24, 0x00B2
    1efa:	66 b5       	in	r22, 0x26	; 38
    1efc:	40 91 ab 01 	lds	r20, 0x01AB
    1f00:	90 91 ac 01 	lds	r25, 0x01AC
    1f04:	89 27       	eor	r24, r25
    1f06:	0e 94 de 10 	call	0x21bc	; 0x21bc <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1f0a:	08 95       	ret

00001f0c <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1f0c:	8c b5       	in	r24, 0x2c	; 44
    1f0e:	8f 7b       	andi	r24, 0xBF	; 191
    1f10:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    1f12:	e4 e6       	ldi	r30, 0x64	; 100
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	84 60       	ori	r24, 0x04	; 4
    1f1a:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1f1c:	8a e0       	ldi	r24, 0x0A	; 10
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1f24:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    1f26:	8d e0       	ldi	r24, 0x0D	; 13
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1f2e:	8b e0       	ldi	r24, 0x0B	; 11
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    1f36:	8c e0       	ldi	r24, 0x0C	; 12
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1f3e:	08 95       	ret

00001f40 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    1f40:	80 91 64 00 	lds	r24, 0x0064
    1f44:	82 fd       	sbrc	r24, 2
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <powerUpSPIIfDisabled()+0xc>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1f4c:	8a e0       	ldi	r24, 0x0A	; 10
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1f54:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    1f56:	80 91 64 00 	lds	r24, 0x0064
    1f5a:	8b 7f       	andi	r24, 0xFB	; 251
    1f5c:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    1f60:	80 e5       	ldi	r24, 0x50	; 80
    1f62:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1f68:	08 95       	ret

00001f6a <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1f6a:	87 e0       	ldi	r24, 0x07	; 7
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  }
    1f72:	08 95       	ret

00001f74 <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to adjust serial power state.
void minimisePowerWithoutSleep()
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    1f78:	88 e1       	ldi	r24, 0x18	; 24
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	80 93 60 00 	sts	0x0060, r24
    1f82:	10 92 60 00 	sts	0x0060, r1
    1f86:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    1f88:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1f8c:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    1f90:	80 e8       	ldi	r24, 0x80	; 128
    1f92:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    1f94:	8f e3       	ldi	r24, 0x3F	; 63
    1f96:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    1fa0:	04 e6       	ldi	r16, 0x64	; 100
    1fa2:	10 e0       	ldi	r17, 0x00	; 0
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	80 81       	ld	r24, Z
    1fa8:	81 60       	ori	r24, 0x01	; 1
    1faa:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    1fac:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>

#ifdef DONT_USE_TIMER0
  power_timer0_disable();
#endif

  power_timer1_disable();
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 60       	ori	r24, 0x08	; 8
    1fb6:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    1fbe:	1f 93       	push	r17
    1fc0:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    1fc2:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    1fc4:	87 e0       	ldi	r24, 0x07	; 7
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    1fcc:	11 23       	and	r17, r17
    1fce:	21 f0       	breq	.+8      	; 0x1fd8 <power_intermittent_peripherals_enable(bool)+0x1a>
    1fd0:	86 e0       	ldi	r24, 0x06	; 6
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    1fd8:	1f 91       	pop	r17
    1fda:	08 95       	ret

00001fdc <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    1fdc:	80 91 64 00 	lds	r24, 0x0064
    1fe0:	87 fd       	sbrc	r24, 7
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <powerUpTWIIfDisabled()+0xc>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    1fe8:	80 91 64 00 	lds	r24, 0x0064
    1fec:	8f 77       	andi	r24, 0x7F	; 127
    1fee:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    1ff2:	80 91 bc 00 	lds	r24, 0x00BC
    1ff6:	84 60       	ori	r24, 0x04	; 4
    1ff8:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1ffc:	8c e1       	ldi	r24, 0x1C	; 28
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	0e 94 80 23 	call	0x4700	; 0x4700 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    2004:	10 92 b8 00 	sts	0x00B8, r1
    2008:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    200a:	08 95       	ret

0000200c <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    200c:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    2010:	81 fd       	sbrc	r24, 1
    2012:	08 c0       	rjmp	.+16     	; 0x2024 <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    2014:	8e e1       	ldi	r24, 0x1E	; 30
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	0e 94 4e 28 	call	0x509c	; 0x509c <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    201c:	8e e1       	ldi	r24, 0x1E	; 30
    201e:	93 e0       	ldi	r25, 0x03	; 3
    2020:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	62 e0       	ldi	r22, 0x02	; 2
    2028:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    2034:	80 91 64 00 	lds	r24, 0x0064
    2038:	82 60       	ori	r24, 0x02	; 2
    203a:	80 93 64 00 	sts	0x0064, r24
  }
    203e:	08 95       	ret

00002040 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    204a:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    204c:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    2050:	81 17       	cp	r24, r17
    2052:	e1 f1       	breq	.+120    	; 0x20cc <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    2054:	18 17       	cp	r17, r24
    2056:	10 f4       	brcc	.+4      	; 0x205c <sleepUntilSubCycleTime(unsigned char)+0x1c>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	39 c0       	rjmp	.+114    	; 0x20ce <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    205c:	21 2f       	mov	r18, r17
    205e:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    2060:	21 30       	cpi	r18, 0x01	; 1
    2062:	19 f4       	brne	.+6      	; 0x206a <sleepUntilSubCycleTime(unsigned char)+0x2a>
      {
      // Take a very short sleep, less than half a tick,
      // eg as may be some way into this tick already.
      //burnHundredsOfCyclesProductively();
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
    2064:	83 e1       	ldi	r24, 0x13	; 19
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	2e c0       	rjmp	.+92     	; 0x20c6 <sleepUntilSubCycleTime(unsigned char)+0x86>
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    206a:	20 9f       	mul	r18, r16
    206c:	e0 01       	movw	r28, r0
    206e:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    if(msLeft >= 20)
    2070:	c4 31       	cpi	r28, 0x14	; 20
    2072:	d1 05       	cpc	r29, r1
    2074:	70 f0       	brcs	.+28     	; 0x2092 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    2076:	c0 35       	cpi	r28, 0x50	; 80
    2078:	d1 05       	cpc	r29, r1
    207a:	38 f0       	brcs	.+14     	; 0x208a <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    207c:	cd 54       	subi	r28, 0x4D	; 77
    207e:	d1 40       	sbci	r29, 0x01	; 1
    2080:	10 f0       	brcs	.+4      	; 0x2086 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    2082:	84 e0       	ldi	r24, 0x04	; 4
    2084:	03 c0       	rjmp	.+6      	; 0x208c <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	01 c0       	rjmp	.+2      	; 0x208c <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    2090:	dd cf       	rjmp	.-70     	; 0x204c <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    2092:	ce 01       	movw	r24, r28
    2094:	02 97       	sbiw	r24, 0x02	; 2
    2096:	87 5e       	subi	r24, 0xE7	; 231
    2098:	93 40       	sbci	r25, 0x03	; 3
    209a:	10 f0       	brcs	.+4      	; 0x20a0 <sleepUntilSubCycleTime(unsigned char)+0x60>
    209c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    20a0:	9e 01       	movw	r18, r28
    20a2:	21 50       	subi	r18, 0x01	; 1
    20a4:	30 40       	sbci	r19, 0x00	; 0
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	da 01       	movw	r26, r20
    20ac:	c9 01       	movw	r24, r18
    20ae:	63 e0       	ldi	r22, 0x03	; 3
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	aa 1f       	adc	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	6a 95       	dec	r22
    20ba:	d1 f7       	brne	.-12     	; 0x20b0 <sleepUntilSubCycleTime(unsigned char)+0x70>
    20bc:	82 1b       	sub	r24, r18
    20be:	93 0b       	sbc	r25, r19
    20c0:	a4 0b       	sbc	r26, r20
    20c2:	b5 0b       	sbc	r27, r21
    20c4:	02 97       	sbiw	r24, 0x02	; 2
    20c6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    20ca:	c0 cf       	rjmp	.-128    	; 0x204c <sleepUntilSubCycleTime(unsigned char)+0xc>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This may churn PRNGs or gather entropy for example.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), 0, getSubCycleTime()); }
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
    20de:	88 23       	and	r24, r24
    20e0:	39 f0       	breq	.+14     	; 0x20f0 <burnHundredsOfCyclesProductivelyAndPoll()+0x18>
    20e2:	86 b5       	in	r24, 0x26	; 38
    20e4:	40 91 b2 00 	lds	r20, 0x00B2
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	0e 94 de 10 	call	0x21bc	; 0x21bc <seedRNG8(unsigned char, unsigned char, unsigned char)>
    20ee:	08 95       	ret
  else { captureEntropy1(); }
    20f0:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <captureEntropy1()>
    20f4:	08 95       	ret

000020f6 <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    20f6:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    20fa:	81 ff       	sbrs	r24, 1
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <flushSerialProductive()+0x12>
    20fe:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    2104:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <burnHundredsOfCyclesProductivelyAndPoll()>
    2108:	80 91 c0 00 	lds	r24, 0x00C0
    210c:	85 ff       	sbrs	r24, 5
    210e:	fa cf       	rjmp	.-12     	; 0x2104 <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    2110:	8e e1       	ldi	r24, 0x1E	; 30
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	0e 94 4e 28 	call	0x509c	; 0x509c <HardwareSerial::flush()>
  }
    2118:	08 95       	ret

0000211a <flushSerialSCTSensitive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    211a:	80 91 64 00 	lds	r24, 0x0064
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    211e:	81 ff       	sbrs	r24, 1
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <flushSerialSCTSensitive()+0xc>
    2122:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    2126:	80 91 c0 00 	lds	r24, 0x00C0
    212a:	85 fd       	sbrc	r24, 5
    212c:	0b c0       	rjmp	.+22     	; 0x2144 <flushSerialSCTSensitive()+0x2a>
    212e:	80 91 b2 00 	lds	r24, 0x00B2
    2132:	8b 3f       	cpi	r24, 0xFB	; 251
    2134:	38 f4       	brcc	.+14     	; 0x2144 <flushSerialSCTSensitive()+0x2a>
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline idle30AndPoll() { idleCPU(WDTO_30MS); pollIO(true); }
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <idleCPU(signed char)>
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
    2142:	f1 cf       	rjmp	.-30     	; 0x2126 <flushSerialSCTSensitive()+0xc>
    {
    idle30AndPoll(); // Save much power by idling CPU, though everything else runs.
    }
#endif
  flushSerialProductive();
    2144:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <flushSerialProductive()>
  }
    2148:	08 95       	ret

0000214a <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    214a:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    214e:	81 fd       	sbrc	r24, 1
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <powerUpSerialIfDisabled()+0xc>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    2156:	80 91 64 00 	lds	r24, 0x0064
    215a:	8d 7f       	andi	r24, 0xFD	; 253
    215c:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    2160:	8e e1       	ldi	r24, 0x1E	; 30
    2162:	93 e0       	ldi	r25, 0x03	; 3
    2164:	40 ec       	ldi	r20, 0xC0	; 192
    2166:	52 e1       	ldi	r21, 0x12	; 18
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <HardwareSerial::begin(unsigned long)>
    2170:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    2172:	08 95       	ret

00002174 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    2174:	80 91 61 00 	lds	r24, 0x0061
    2178:	8f 70       	andi	r24, 0x0F	; 15
    217a:	83 30       	cpi	r24, 0x03	; 3
    217c:	11 f0       	breq	.+4      	; 0x2182 <powerSetup()+0xe>
    217e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2182:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    2186:	80 91 64 00 	lds	r24, 0x0064
    218a:	8f 6e       	ori	r24, 0xEF	; 239
    218c:	80 93 64 00 	sts	0x0064, r24

#ifndef DONT_USE_TIMER0
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2190:	80 91 64 00 	lds	r24, 0x0064
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    219a:	80 91 64 00 	lds	r24, 0x0064
    219e:	8f 7b       	andi	r24, 0xBF	; 191
    21a0:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    21a4:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    21a8:	86 e0       	ldi	r24, 0x06	; 6
    21aa:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    21ba:	08 95       	ret

000021bc <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    21bc:	20 91 b3 01 	lds	r18, 0x01B3
  b ^=s2;
    21c0:	90 91 b4 01 	lds	r25, 0x01B4
    21c4:	69 27       	eor	r22, r25
  c ^=s3;
    21c6:	90 91 b1 01 	lds	r25, 0x01B1
    21ca:	49 27       	eor	r20, r25
  x++;
    21cc:	90 91 b2 01 	lds	r25, 0x01B2
    21d0:	9f 5f       	subi	r25, 0xFF	; 255
    21d2:	90 93 b2 01 	sts	0x01B2, r25
  a = (a^c^x);
    21d6:	28 27       	eor	r18, r24
    21d8:	24 27       	eor	r18, r20
    21da:	29 27       	eor	r18, r25
    21dc:	20 93 b3 01 	sts	0x01B3, r18
  b = (b+a);
    21e0:	62 0f       	add	r22, r18
    21e2:	60 93 b4 01 	sts	0x01B4, r22
  c = ((c+(b>>1))^a);
    21e6:	66 95       	lsr	r22
    21e8:	64 0f       	add	r22, r20
    21ea:	62 27       	eor	r22, r18
    21ec:	60 93 b1 01 	sts	0x01B1, r22
  }
    21f0:	08 95       	ret

000021f2 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    21f2:	80 91 b2 01 	lds	r24, 0x01B2
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	80 93 b2 01 	sts	0x01B2, r24
  a = (a^c^x);       //note the mix of addition and XOR
    21fc:	20 91 b1 01 	lds	r18, 0x01B1
    2200:	90 91 b3 01 	lds	r25, 0x01B3
    2204:	92 27       	eor	r25, r18
    2206:	98 27       	eor	r25, r24
    2208:	90 93 b3 01 	sts	0x01B3, r25
  b = (b+a);         //And the use of very few instructions
    220c:	80 91 b4 01 	lds	r24, 0x01B4
    2210:	89 0f       	add	r24, r25
    2212:	80 93 b4 01 	sts	0x01B4, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    2216:	86 95       	lsr	r24
    2218:	82 0f       	add	r24, r18
    221a:	89 27       	eor	r24, r25
    221c:	80 93 b1 01 	sts	0x01B1, r24
  return(c);         //low order bits of other variables
  }
    2220:	08 95       	ret

00002222 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    2222:	81 e1       	ldi	r24, 0x11	; 17
    2224:	92 e0       	ldi	r25, 0x02	; 2
    2226:	80 93 b2 01 	sts	0x01B2, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    222a:	08 95       	ret

0000222c <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	18 2f       	mov	r17, r24
    2234:	09 2f       	mov	r16, r25
    2236:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2238:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    223c:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    223e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2240:	87 e8       	ldi	r24, 0x87	; 135
    2242:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2244:	0d b4       	in	r0, 0x2d	; 45
    2246:	07 fe       	sbrs	r0, 7
    2248:	fd cf       	rjmp	.-6      	; 0x2244 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    224a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    224c:	0d b4       	in	r0, 0x2d	; 45
    224e:	07 fe       	sbrs	r0, 7
    2250:	fd cf       	rjmp	.-6      	; 0x224c <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2252:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    2254:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2256:	8f e7       	ldi	r24, 0x7F	; 127
    2258:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    225a:	0d b4       	in	r0, 0x2d	; 45
    225c:	07 fe       	sbrs	r0, 7
    225e:	fd cf       	rjmp	.-6      	; 0x225a <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    2260:	8e b5       	in	r24, 0x2e	; 46
    2262:	81 2f       	mov	r24, r17
    2264:	90 2f       	mov	r25, r16
    2266:	9c 01       	movw	r18, r24
    2268:	f9 01       	movw	r30, r18
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	07 c0       	rjmp	.+14     	; 0x227c <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    226e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2270:	0d b4       	in	r0, 0x2d	; 45
    2272:	07 fe       	sbrs	r0, 7
    2274:	fd cf       	rjmp	.-6      	; 0x2270 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    2276:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    2278:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    227a:	9f 5f       	subi	r25, 0xFF	; 255
    227c:	9f 15       	cp	r25, r15
    227e:	b8 f3       	brcs	.-18     	; 0x226e <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    2280:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2282:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2284:	88 e8       	ldi	r24, 0x88	; 136
    2286:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2288:	0d b4       	in	r0, 0x2d	; 45
    228a:	07 fe       	sbrs	r0, 7
    228c:	fd cf       	rjmp	.-6      	; 0x2288 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2292:	0d b4       	in	r0, 0x2d	; 45
    2294:	07 fe       	sbrs	r0, 7
    2296:	fd cf       	rjmp	.-6      	; 0x2292 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2298:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    229a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    229c:	88 e8       	ldi	r24, 0x88	; 136
    229e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22a0:	0d b4       	in	r0, 0x2d	; 45
    22a2:	07 fe       	sbrs	r0, 7
    22a4:	fd cf       	rjmp	.-6      	; 0x22a0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22a6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22a8:	0d b4       	in	r0, 0x2d	; 45
    22aa:	07 fe       	sbrs	r0, 7
    22ac:	fd cf       	rjmp	.-6      	; 0x22a8 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22ae:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    22b0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22b2:	85 e8       	ldi	r24, 0x85	; 133
    22b4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22b6:	0d b4       	in	r0, 0x2d	; 45
    22b8:	07 fe       	sbrs	r0, 7
    22ba:	fd cf       	rjmp	.-6      	; 0x22b6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22bc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22be:	0d b4       	in	r0, 0x2d	; 45
    22c0:	07 fe       	sbrs	r0, 7
    22c2:	fd cf       	rjmp	.-6      	; 0x22be <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22c4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22c6:	0d b4       	in	r0, 0x2d	; 45
    22c8:	07 fe       	sbrs	r0, 7
    22ca:	fd cf       	rjmp	.-6      	; 0x22c6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    22cc:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    22ce:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22d0:	83 e8       	ldi	r24, 0x83	; 131
    22d2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22d4:	0d b4       	in	r0, 0x2d	; 45
    22d6:	07 fe       	sbrs	r0, 7
    22d8:	fd cf       	rjmp	.-6      	; 0x22d4 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22da:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22dc:	0d b4       	in	r0, 0x2d	; 45
    22de:	07 fe       	sbrs	r0, 7
    22e0:	fd cf       	rjmp	.-6      	; 0x22dc <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22e2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22e4:	0d b4       	in	r0, 0x2d	; 45
    22e6:	07 fe       	sbrs	r0, 7
    22e8:	fd cf       	rjmp	.-6      	; 0x22e4 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    22ea:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    22ec:	44 23       	and	r20, r20
    22ee:	11 f0       	breq	.+4      	; 0x22f4 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    22f0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
  }
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ff 90       	pop	r15
    22fa:	08 95       	ret

000022fc <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	18 2f       	mov	r17, r24
    2304:	f6 2e       	mov	r15, r22
    2306:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2308:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    230c:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    230e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2310:	88 e8       	ldi	r24, 0x88	; 136
    2312:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2314:	0d b4       	in	r0, 0x2d	; 45
    2316:	07 fe       	sbrs	r0, 7
    2318:	fd cf       	rjmp	.-6      	; 0x2314 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    231e:	0d b4       	in	r0, 0x2d	; 45
    2320:	07 fe       	sbrs	r0, 7
    2322:	fd cf       	rjmp	.-6      	; 0x231e <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2324:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2326:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2328:	88 e8       	ldi	r24, 0x88	; 136
    232a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    232c:	0d b4       	in	r0, 0x2d	; 45
    232e:	07 fe       	sbrs	r0, 7
    2330:	fd cf       	rjmp	.-6      	; 0x232c <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2332:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2334:	0d b4       	in	r0, 0x2d	; 45
    2336:	07 fe       	sbrs	r0, 7
    2338:	fd cf       	rjmp	.-6      	; 0x2334 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    233a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    233c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    233e:	8e ef       	ldi	r24, 0xFE	; 254
    2340:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2342:	0d b4       	in	r0, 0x2d	; 45
    2344:	07 fe       	sbrs	r0, 7
    2346:	fd cf       	rjmp	.-6      	; 0x2342 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    2348:	81 2f       	mov	r24, r17
    234a:	10 34       	cpi	r17, 0x40	; 64
    234c:	08 f0       	brcs	.+2      	; 0x2350 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    234e:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2350:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2352:	0d b4       	in	r0, 0x2d	; 45
    2354:	07 fe       	sbrs	r0, 7
    2356:	fd cf       	rjmp	.-6      	; 0x2352 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2358:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    235a:	00 23       	and	r16, r16
    235c:	11 f4       	brne	.+4      	; 0x2362 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    2362:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2364:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2366:	85 e8       	ldi	r24, 0x85	; 133
    2368:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    236a:	0d b4       	in	r0, 0x2d	; 45
    236c:	07 fe       	sbrs	r0, 7
    236e:	fd cf       	rjmp	.-6      	; 0x236a <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2370:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2372:	0d b4       	in	r0, 0x2d	; 45
    2374:	07 fe       	sbrs	r0, 7
    2376:	fd cf       	rjmp	.-6      	; 0x2372 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2378:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    237a:	ff 20       	and	r15, r15
    237c:	11 f4       	brne	.+4      	; 0x2382 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    2382:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2384:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2386:	86 e8       	ldi	r24, 0x86	; 134
    2388:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    238a:	0d b4       	in	r0, 0x2d	; 45
    238c:	07 fe       	sbrs	r0, 7
    238e:	fd cf       	rjmp	.-6      	; 0x238a <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2390:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2392:	0d b4       	in	r0, 0x2d	; 45
    2394:	07 fe       	sbrs	r0, 7
    2396:	fd cf       	rjmp	.-6      	; 0x2392 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2398:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    239a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    239c:	83 e8       	ldi	r24, 0x83	; 131
    239e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23a0:	0d b4       	in	r0, 0x2d	; 45
    23a2:	07 fe       	sbrs	r0, 7
    23a4:	fd cf       	rjmp	.-6      	; 0x23a0 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23a6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23a8:	0d b4       	in	r0, 0x2d	; 45
    23aa:	07 fe       	sbrs	r0, 7
    23ac:	fd cf       	rjmp	.-6      	; 0x23a8 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23ae:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23b0:	0d b4       	in	r0, 0x2d	; 45
    23b2:	07 fe       	sbrs	r0, 7
    23b4:	fd cf       	rjmp	.-6      	; 0x23b0 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    23b6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23b8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23ba:	87 e8       	ldi	r24, 0x87	; 135
    23bc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23be:	0d b4       	in	r0, 0x2d	; 45
    23c0:	07 fe       	sbrs	r0, 7
    23c2:	fd cf       	rjmp	.-6      	; 0x23be <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23c4:	85 e0       	ldi	r24, 0x05	; 5
    23c6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23c8:	0d b4       	in	r0, 0x2d	; 45
    23ca:	07 fe       	sbrs	r0, 7
    23cc:	fd cf       	rjmp	.-6      	; 0x23c8 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    23ce:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    23d0:	22 23       	and	r18, r18
    23d2:	11 f0       	breq	.+4      	; 0x23d8 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    23d4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
  }
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	ff 90       	pop	r15
    23de:	08 95       	ret

000023e0 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    23e6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    23ea:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23ec:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23ee:	88 e8       	ldi	r24, 0x88	; 136
    23f0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23f2:	0d b4       	in	r0, 0x2d	; 45
    23f4:	07 fe       	sbrs	r0, 7
    23f6:	fd cf       	rjmp	.-6      	; 0x23f2 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23fc:	0d b4       	in	r0, 0x2d	; 45
    23fe:	07 fe       	sbrs	r0, 7
    2400:	fd cf       	rjmp	.-6      	; 0x23fc <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2402:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2404:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2406:	88 e8       	ldi	r24, 0x88	; 136
    2408:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    240a:	0d b4       	in	r0, 0x2d	; 45
    240c:	07 fe       	sbrs	r0, 7
    240e:	fd cf       	rjmp	.-6      	; 0x240a <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2410:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2412:	0d b4       	in	r0, 0x2d	; 45
    2414:	07 fe       	sbrs	r0, 7
    2416:	fd cf       	rjmp	.-6      	; 0x2412 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2418:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    241a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    241c:	8f ef       	ldi	r24, 0xFF	; 255
    241e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2420:	0d b4       	in	r0, 0x2d	; 45
    2422:	07 fe       	sbrs	r0, 7
    2424:	fd cf       	rjmp	.-6      	; 0x2420 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2428:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    242a:	0d b4       	in	r0, 0x2d	; 45
    242c:	07 fe       	sbrs	r0, 7
    242e:	fd cf       	rjmp	.-6      	; 0x242a <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    2430:	89 91       	ld	r24, Y+
    2432:	8f 3f       	cpi	r24, 0xFF	; 255
    2434:	c9 f7       	brne	.-14     	; 0x2428 <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    2436:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    2438:	99 23       	and	r25, r25
    243a:	11 f0       	breq	.+4      	; 0x2440 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    243c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
  }
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    244c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    2450:	fe 01       	movw	r30, r28
    2452:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    2454:	21 96       	adiw	r28, 0x01	; 1
    2456:	fe 01       	movw	r30, r28
    2458:	24 91       	lpm	r18, Z+
    245a:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    245c:	9f 3f       	cpi	r25, 0xFF	; 255
    245e:	69 f0       	breq	.+26     	; 0x247a <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2460:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    2462:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2464:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2466:	0d b4       	in	r0, 0x2d	; 45
    2468:	07 fe       	sbrs	r0, 7
    246a:	fd cf       	rjmp	.-6      	; 0x2466 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    246c:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    246e:	0d b4       	in	r0, 0x2d	; 45
    2470:	07 fe       	sbrs	r0, 7
    2472:	fd cf       	rjmp	.-6      	; 0x246e <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2474:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    2476:	22 96       	adiw	r28, 0x02	; 2
    2478:	eb cf       	rjmp	.-42     	; 0x2450 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    247a:	88 23       	and	r24, r24
    247c:	11 f0       	breq	.+4      	; 0x2482 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    247e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
  }
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2488:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    248c:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    248e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2490:	87 e8       	ldi	r24, 0x87	; 135
    2492:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2494:	0d b4       	in	r0, 0x2d	; 45
    2496:	07 fe       	sbrs	r0, 7
    2498:	fd cf       	rjmp	.-6      	; 0x2494 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    249a:	80 e8       	ldi	r24, 0x80	; 128
    249c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    249e:	0d b4       	in	r0, 0x2d	; 45
    24a0:	07 fe       	sbrs	r0, 7
    24a2:	fd cf       	rjmp	.-6      	; 0x249e <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24a4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    24a6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24a8:	87 e8       	ldi	r24, 0x87	; 135
    24aa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24ac:	0d b4       	in	r0, 0x2d	; 45
    24ae:	07 fe       	sbrs	r0, 7
    24b0:	fd cf       	rjmp	.-6      	; 0x24ac <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24b2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24b4:	0d b4       	in	r0, 0x2d	; 45
    24b6:	07 fe       	sbrs	r0, 7
    24b8:	fd cf       	rjmp	.-6      	; 0x24b4 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24ba:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    24bc:	99 23       	and	r25, r25
    24be:	11 f0       	breq	.+4      	; 0x24c4 <RFM22PowerOnInit()+0x3c>
    24c0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
    24c4:	08 95       	ret

000024c6 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    24ca:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    24ce:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    24d0:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24d6:	0d b4       	in	r0, 0x2d	; 45
    24d8:	07 fe       	sbrs	r0, 7
    24da:	fd cf       	rjmp	.-6      	; 0x24d6 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    24dc:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24de:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24e0:	0d b4       	in	r0, 0x2d	; 45
    24e2:	07 fe       	sbrs	r0, 7
    24e4:	fd cf       	rjmp	.-6      	; 0x24e0 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    24e6:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24e8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24ea:	0d b4       	in	r0, 0x2d	; 45
    24ec:	07 fe       	sbrs	r0, 7
    24ee:	fd cf       	rjmp	.-6      	; 0x24ea <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    24f0:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    24f2:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    24f4:	99 23       	and	r25, r25
    24f6:	11 f0       	breq	.+4      	; 0x24fc <RFM22ReadStatusBoth()+0x36>
    24f8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
    24fc:	90 2f       	mov	r25, r16
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	21 2f       	mov	r18, r17
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	28 2b       	or	r18, r24
    2506:	39 2b       	or	r19, r25
  return(result);
  }
    2508:	c9 01       	movw	r24, r18
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	08 95       	ret

00002510 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2510:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    2514:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2516:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2518:	87 e8       	ldi	r24, 0x87	; 135
    251a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    251c:	0d b4       	in	r0, 0x2d	; 45
    251e:	07 fe       	sbrs	r0, 7
    2520:	fd cf       	rjmp	.-6      	; 0x251c <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2522:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2524:	0d b4       	in	r0, 0x2d	; 45
    2526:	07 fe       	sbrs	r0, 7
    2528:	fd cf       	rjmp	.-6      	; 0x2524 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    252a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    252c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    252e:	88 e8       	ldi	r24, 0x88	; 136
    2530:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2532:	0d b4       	in	r0, 0x2d	; 45
    2534:	07 fe       	sbrs	r0, 7
    2536:	fd cf       	rjmp	.-6      	; 0x2532 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2538:	83 e0       	ldi	r24, 0x03	; 3
    253a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    253c:	0d b4       	in	r0, 0x2d	; 45
    253e:	07 fe       	sbrs	r0, 7
    2540:	fd cf       	rjmp	.-6      	; 0x253c <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2542:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2544:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2546:	88 e8       	ldi	r24, 0x88	; 136
    2548:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    254a:	0d b4       	in	r0, 0x2d	; 45
    254c:	07 fe       	sbrs	r0, 7
    254e:	fd cf       	rjmp	.-6      	; 0x254a <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2550:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2552:	0d b4       	in	r0, 0x2d	; 45
    2554:	07 fe       	sbrs	r0, 7
    2556:	fd cf       	rjmp	.-6      	; 0x2552 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2558:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    255a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    255c:	85 e8       	ldi	r24, 0x85	; 133
    255e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2560:	0d b4       	in	r0, 0x2d	; 45
    2562:	07 fe       	sbrs	r0, 7
    2564:	fd cf       	rjmp	.-6      	; 0x2560 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2566:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2568:	0d b4       	in	r0, 0x2d	; 45
    256a:	07 fe       	sbrs	r0, 7
    256c:	fd cf       	rjmp	.-6      	; 0x2568 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    256e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2570:	0d b4       	in	r0, 0x2d	; 45
    2572:	07 fe       	sbrs	r0, 7
    2574:	fd cf       	rjmp	.-6      	; 0x2570 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2576:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2578:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    257a:	83 e8       	ldi	r24, 0x83	; 131
    257c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    257e:	0d b4       	in	r0, 0x2d	; 45
    2580:	07 fe       	sbrs	r0, 7
    2582:	fd cf       	rjmp	.-6      	; 0x257e <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2584:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2586:	0d b4       	in	r0, 0x2d	; 45
    2588:	07 fe       	sbrs	r0, 7
    258a:	fd cf       	rjmp	.-6      	; 0x2586 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    258c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    258e:	0d b4       	in	r0, 0x2d	; 45
    2590:	07 fe       	sbrs	r0, 7
    2592:	fd cf       	rjmp	.-6      	; 0x258e <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2594:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    2596:	99 23       	and	r25, r25
    2598:	11 f0       	breq	.+4      	; 0x259e <RFM22ModeStandbyAndClearState()+0x8e>
    259a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
    259e:	08 95       	ret

000025a0 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    25a6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    25aa:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    25ac:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25ae:	85 e8       	ldi	r24, 0x85	; 133
    25b0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25b2:	0d b4       	in	r0, 0x2d	; 45
    25b4:	07 fe       	sbrs	r0, 7
    25b6:	fd cf       	rjmp	.-6      	; 0x25b2 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25b8:	84 e0       	ldi	r24, 0x04	; 4
    25ba:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25bc:	0d b4       	in	r0, 0x2d	; 45
    25be:	07 fe       	sbrs	r0, 7
    25c0:	fd cf       	rjmp	.-6      	; 0x25bc <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    25c2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    25c4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25c6:	86 e8       	ldi	r24, 0x86	; 134
    25c8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25ca:	0d b4       	in	r0, 0x2d	; 45
    25cc:	07 fe       	sbrs	r0, 7
    25ce:	fd cf       	rjmp	.-6      	; 0x25ca <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25d0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25d2:	0d b4       	in	r0, 0x2d	; 45
    25d4:	07 fe       	sbrs	r0, 7
    25d6:	fd cf       	rjmp	.-6      	; 0x25d2 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    25d8:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    25da:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25dc:	83 e8       	ldi	r24, 0x83	; 131
    25de:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25e0:	0d b4       	in	r0, 0x2d	; 45
    25e2:	07 fe       	sbrs	r0, 7
    25e4:	fd cf       	rjmp	.-6      	; 0x25e0 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25e6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25e8:	0d b4       	in	r0, 0x2d	; 45
    25ea:	07 fe       	sbrs	r0, 7
    25ec:	fd cf       	rjmp	.-6      	; 0x25e8 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25ee:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25f0:	0d b4       	in	r0, 0x2d	; 45
    25f2:	07 fe       	sbrs	r0, 7
    25f4:	fd cf       	rjmp	.-6      	; 0x25f0 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    25f6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    25f8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25fa:	87 e8       	ldi	r24, 0x87	; 135
    25fc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25fe:	0d b4       	in	r0, 0x2d	; 45
    2600:	07 fe       	sbrs	r0, 7
    2602:	fd cf       	rjmp	.-6      	; 0x25fe <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2604:	89 e0       	ldi	r24, 0x09	; 9
    2606:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2608:	0d b4       	in	r0, 0x2d	; 45
    260a:	07 fe       	sbrs	r0, 7
    260c:	fd cf       	rjmp	.-6      	; 0x2608 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    260e:	2a 9a       	sbi	0x05, 2	; 5
    2610:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2612:	03 e0       	ldi	r16, 0x03	; 3
    2614:	13 c0       	rjmp	.+38     	; 0x263c <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    261c:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    261e:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2620:	0d b4       	in	r0, 0x2d	; 45
    2622:	07 fe       	sbrs	r0, 7
    2624:	fd cf       	rjmp	.-6      	; 0x2620 <RFM22TXFIFO()+0x80>
  return(SPDR);
    2626:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2628:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    262a:	0d b4       	in	r0, 0x2d	; 45
    262c:	07 fe       	sbrs	r0, 7
    262e:	fd cf       	rjmp	.-6      	; 0x262a <RFM22TXFIFO()+0x8a>
  return(SPDR);
    2630:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2632:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    2634:	82 ff       	sbrs	r24, 2
    2636:	02 c0       	rjmp	.+4      	; 0x263c <RFM22TXFIFO()+0x9c>
    2638:	11 e0       	ldi	r17, 0x01	; 1
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    263c:	11 50       	subi	r17, 0x01	; 1
    263e:	58 f7       	brcc	.-42     	; 0x2616 <RFM22TXFIFO()+0x76>
    2640:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    2642:	ff 20       	and	r15, r15
    2644:	11 f0       	breq	.+4      	; 0x264a <RFM22TXFIFO()+0xaa>
    2646:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
  return(result);
  }
    264a:	81 2f       	mov	r24, r17
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	08 95       	ret

00002654 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2658:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <powerUpSPIIfDisabled()>
    265c:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    265e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2660:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2662:	0d b4       	in	r0, 0x2d	; 45
    2664:	07 fe       	sbrs	r0, 7
    2666:	fd cf       	rjmp	.-6      	; 0x2662 <RFM22CheckConnected()+0xe>
  return(SPDR);
    2668:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    266a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    266c:	0d b4       	in	r0, 0x2d	; 45
    266e:	07 fe       	sbrs	r0, 7
    2670:	fd cf       	rjmp	.-6      	; 0x266c <RFM22CheckConnected()+0x18>
  return(SPDR);
    2672:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2674:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    2676:	18 30       	cpi	r17, 0x08	; 8
    2678:	a1 f4       	brne	.+40     	; 0x26a2 <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    267a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2680:	0d b4       	in	r0, 0x2d	; 45
    2682:	07 fe       	sbrs	r0, 7
    2684:	fd cf       	rjmp	.-6      	; 0x2680 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    2686:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2688:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    268a:	0d b4       	in	r0, 0x2d	; 45
    268c:	07 fe       	sbrs	r0, 7
    268e:	fd cf       	rjmp	.-6      	; 0x268a <RFM22CheckConnected()+0x36>
  return(SPDR);
    2690:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2692:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    2694:	16 30       	cpi	r17, 0x06	; 6
    2696:	11 f4       	brne	.+4      	; 0x269c <RFM22CheckConnected()+0x48>
    2698:	11 e0       	ldi	r17, 0x01	; 1
    269a:	10 c0       	rjmp	.+32     	; 0x26bc <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    269c:	86 e7       	ldi	r24, 0x76	; 118
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    26a2:	85 e6       	ldi	r24, 0x65	; 101
    26a4:	91 e0       	ldi	r25, 0x01	; 1
    26a6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    26aa:	81 2f       	mov	r24, r17
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	60 e1       	ldi	r22, 0x10	; 16
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    26b6:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
    26ba:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    26bc:	00 23       	and	r16, r16
    26be:	11 f0       	breq	.+4      	; 0x26c4 <RFM22CheckConnected()+0x70>
    26c0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <powerDownSPI()>
  return(isOK);
  }
    26c4:	81 2f       	mov	r24, r17
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	08 95       	ret

000026cc <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    26cc:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    26ce:	f9 99       	sbic	0x1f, 1	; 31
    26d0:	fe cf       	rjmp	.-4      	; 0x26ce <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    26d2:	32 bd       	out	0x22, r19	; 34
    26d4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    26d6:	f8 9a       	sbi	0x1f, 0	; 31
    26d8:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    26da:	08 95       	ret

000026dc <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    26dc:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    26de:	f9 99       	sbic	0x1f, 1	; 31
    26e0:	fe cf       	rjmp	.-4      	; 0x26de <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    26e2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26e4:	32 bd       	out	0x22, r19	; 34
    26e6:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    26e8:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	fa 9a       	sbi	0x1f, 2	; 31
    26f0:	f9 9a       	sbi	0x1f, 1	; 31
    26f2:	0f be       	out	0x3f, r0	; 63
}
    26f4:	08 95       	ret

000026f6 <getMinutesSinceMidnightLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    26f6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26f8:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    26fa:	20 91 b6 01 	lds	r18, 0x01B6
    26fe:	30 91 b7 01 	lds	r19, 0x01B7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2702:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    2704:	c9 01       	movw	r24, r18
    2706:	08 95       	ret

00002708 <getMinutesLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2708:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    270a:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    270c:	80 91 b6 01 	lds	r24, 0x01B6
    2710:	90 91 b7 01 	lds	r25, 0x01B7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2714:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2716:	6c e3       	ldi	r22, 0x3C	; 60
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
  return(result);
  }
#endif

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    271e:	08 95       	ret

00002720 <getHoursLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2720:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2722:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    2724:	80 91 b6 01 	lds	r24, 0x01B6
    2728:	90 91 b7 01 	lds	r25, 0x01B7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    272c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    272e:	6c e3       	ldi	r22, 0x3C	; 60
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    2736:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    2738:	08 95       	ret

0000273a <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    273a:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    273c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    273e:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2740:	88 e0       	ldi	r24, 0x08	; 8
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	66 e6       	ldi	r22, 0x66	; 102
    2746:	73 e1       	ldi	r23, 0x13	; 19
    2748:	0e 94 c9 03 	call	0x792	; 0x792 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    274c:	2f ef       	ldi	r18, 0xFF	; 255
    274e:	8f 3f       	cpi	r24, 0xFF	; 255
    2750:	92 07       	cpc	r25, r18
    2752:	21 f0       	breq	.+8      	; 0x275c <restoreRTC()+0x22>
    2754:	90 93 b9 01 	sts	0x01B9, r25
    2758:	80 93 b8 01 	sts	0x01B8, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    275c:	f9 99       	sbic	0x1f, 1	; 31
    275e:	fe cf       	rjmp	.-4      	; 0x275c <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2760:	8a e0       	ldi	r24, 0x0A	; 10
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	92 bd       	out	0x22, r25	; 34
    2766:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2768:	f8 9a       	sbi	0x1f, 0	; 31
    276a:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    276c:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    276e:	60 3c       	cpi	r22, 0xC0	; 192
    2770:	90 f5       	brcc	.+100    	; 0x27d6 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    2772:	86 2f       	mov	r24, r22
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	23 e0       	ldi	r18, 0x03	; 3
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	2a 95       	dec	r18
    277e:	e1 f7       	brne	.-8      	; 0x2778 <restoreRTC()+0x3e>
    2780:	2c e3       	ldi	r18, 0x3C	; 60
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	82 9f       	mul	r24, r18
    2786:	a0 01       	movw	r20, r0
    2788:	83 9f       	mul	r24, r19
    278a:	50 0d       	add	r21, r0
    278c:	92 9f       	mul	r25, r18
    278e:	50 0d       	add	r21, r0
    2790:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    2792:	9a 01       	movw	r18, r20
    2794:	28 5f       	subi	r18, 0xF8	; 248
    2796:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    2798:	86 2f       	mov	r24, r22
    279a:	87 70       	andi	r24, 0x07	; 7
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	59 f0       	breq	.+22     	; 0x27b6 <restoreRTC()+0x7c>
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	28 f0       	brcs	.+10     	; 0x27ae <restoreRTC()+0x74>
    27a4:	83 30       	cpi	r24, 0x03	; 3
    27a6:	59 f0       	breq	.+22     	; 0x27be <restoreRTC()+0x84>
    27a8:	87 30       	cpi	r24, 0x07	; 7
    27aa:	a9 f4       	brne	.+42     	; 0x27d6 <restoreRTC()+0x9c>
    27ac:	0b c0       	rjmp	.+22     	; 0x27c4 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    27ae:	9a 01       	movw	r18, r20
    27b0:	2b 5c       	subi	r18, 0xCB	; 203
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	07 c0       	rjmp	.+14     	; 0x27c4 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    27b6:	9a 01       	movw	r18, r20
    27b8:	2a 5d       	subi	r18, 0xDA	; 218
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    27be:	9a 01       	movw	r18, r20
    27c0:	29 5e       	subi	r18, 0xE9	; 233
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    27c4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27c6:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    27c8:	30 93 b7 01 	sts	0x01B7, r19
    27cc:	20 93 b6 01 	sts	0x01B6, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27d0:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <restoreRTC()+0x9e>

  return(true);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
  }
    27d8:	1f 91       	pop	r17
    27da:	08 95       	ret

000027dc <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    27dc:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    27de:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27e0:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    27e2:	80 91 b6 01 	lds	r24, 0x01B6
    27e6:	90 91 b7 01 	lds	r25, 0x01B7
    27ea:	6f e0       	ldi	r22, 0x0F	; 15
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    27f2:	46 2f       	mov	r20, r22
    27f4:	44 0f       	add	r20, r20
    27f6:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	63 70       	andi	r22, 0x03	; 3
    27fc:	70 70       	andi	r23, 0x00	; 0
    27fe:	61 30       	cpi	r22, 0x01	; 1
    2800:	71 05       	cpc	r23, r1
    2802:	39 f0       	breq	.+14     	; 0x2812 <persistRTC()+0x36>
    2804:	62 30       	cpi	r22, 0x02	; 2
    2806:	71 05       	cpc	r23, r1
    2808:	31 f0       	breq	.+12     	; 0x2816 <persistRTC()+0x3a>
    280a:	67 2b       	or	r22, r23
    280c:	29 f4       	brne	.+10     	; 0x2818 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    280e:	47 60       	ori	r20, 0x07	; 7
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    2812:	43 60       	ori	r20, 0x03	; 3
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    2816:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2818:	f9 99       	sbic	0x1f, 1	; 31
    281a:	fe cf       	rjmp	.-4      	; 0x2818 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    281c:	8a e0       	ldi	r24, 0x0A	; 10
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	92 bd       	out	0x22, r25	; 34
    2822:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2824:	f8 9a       	sbi	0x1f, 0	; 31
    2826:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    2828:	84 17       	cp	r24, r20
    282a:	91 f1       	breq	.+100    	; 0x2890 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    282c:	24 2f       	mov	r18, r20
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	82 23       	and	r24, r18
    2834:	93 23       	and	r25, r19
    2836:	28 17       	cp	r18, r24
    2838:	39 07       	cpc	r19, r25
    283a:	71 f0       	breq	.+28     	; 0x2858 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    283c:	f9 99       	sbic	0x1f, 1	; 31
    283e:	fe cf       	rjmp	.-4      	; 0x283c <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2840:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2842:	8a e0       	ldi	r24, 0x0A	; 10
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	92 bd       	out	0x22, r25	; 34
    2848:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    284a:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	fa 9a       	sbi	0x1f, 2	; 31
    2852:	f9 9a       	sbi	0x1f, 1	; 31
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    2858:	8a e0       	ldi	r24, 0x0A	; 10
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	64 2f       	mov	r22, r20
    285e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2862:	88 e0       	ldi	r24, 0x08	; 8
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	66 e6       	ldi	r22, 0x66	; 102
    2868:	73 e1       	ldi	r23, 0x13	; 19
    286a:	0e 94 c9 03 	call	0x792	; 0x792 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    286e:	20 91 b8 01 	lds	r18, 0x01B8
    2872:	30 91 b9 01 	lds	r19, 0x01B9
    2876:	82 17       	cp	r24, r18
    2878:	93 07       	cpc	r25, r19
    287a:	51 f0       	breq	.+20     	; 0x2890 <persistRTC()+0xb4>
    287c:	60 91 b8 01 	lds	r22, 0x01B8
    2880:	70 91 b9 01 	lds	r23, 0x01B9
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    2884:	88 e0       	ldi	r24, 0x08	; 8
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	4e e6       	ldi	r20, 0x6E	; 110
    288a:	53 e1       	ldi	r21, 0x13	; 19
    288c:	0e 94 df 03 	call	0x7be	; 0x7be <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2890:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    2892:	1f 91       	pop	r17
    2894:	08 95       	ret

00002896 <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    2896:	1f 93       	push	r17
    2898:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    289a:	88 31       	cpi	r24, 0x18	; 24
    289c:	91 05       	cpc	r25, r1
    289e:	10 f5       	brcc	.+68     	; 0x28e4 <setHoursMinutesLT(int, int)+0x4e>
    28a0:	77 fd       	sbrc	r23, 7
    28a2:	20 c0       	rjmp	.+64     	; 0x28e4 <setHoursMinutesLT(int, int)+0x4e>
    28a4:	6c 33       	cpi	r22, 0x3C	; 60
    28a6:	71 05       	cpc	r23, r1
    28a8:	ec f4       	brge	.+58     	; 0x28e4 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    28aa:	8c e3       	ldi	r24, 0x3C	; 60
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	48 9f       	mul	r20, r24
    28b0:	90 01       	movw	r18, r0
    28b2:	49 9f       	mul	r20, r25
    28b4:	30 0d       	add	r19, r0
    28b6:	58 9f       	mul	r21, r24
    28b8:	30 0d       	add	r19, r0
    28ba:	11 24       	eor	r1, r1
    28bc:	26 0f       	add	r18, r22
    28be:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    28c0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28c2:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    28c4:	80 91 b6 01 	lds	r24, 0x01B6
    28c8:	90 91 b7 01 	lds	r25, 0x01B7
    28cc:	28 17       	cp	r18, r24
    28ce:	39 07       	cpc	r19, r25
    28d0:	31 f0       	breq	.+12     	; 0x28de <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    28d2:	30 93 b7 01 	sts	0x01B7, r19
    28d6:	20 93 b6 01 	sts	0x01B6, r18
      persistRTC();
    28da:	0e 94 ee 13 	call	0x27dc	; 0x27dc <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28de:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    28e4:	80 e0       	ldi	r24, 0x00	; 0
  }
    28e6:	1f 91       	pop	r17
    28e8:	08 95       	ret

000028ea <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	d0 f4       	brcc	.+52     	; 0x2922 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    28ee:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28f0:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28f2:	f9 99       	sbic	0x1f, 1	; 31
    28f4:	fe cf       	rjmp	.-4      	; 0x28f2 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0c 96       	adiw	r24, 0x0c	; 12
    28fa:	92 bd       	out	0x22, r25	; 34
    28fc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    28fe:	f8 9a       	sbi	0x1f, 0	; 31
    2900:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2902:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    2904:	90 3f       	cpi	r25, 0xF0	; 240
    2906:	68 f4       	brcc	.+26     	; 0x2922 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    2908:	86 e0       	ldi	r24, 0x06	; 6
    290a:	98 9f       	mul	r25, r24
    290c:	c0 01       	movw	r24, r0
    290e:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    2910:	8f 30       	cpi	r24, 0x0F	; 15
    2912:	91 05       	cpc	r25, r1
    2914:	10 f4       	brcc	.+4      	; 0x291a <getSimpleScheduleOn(unsigned char)+0x30>
    2916:	80 56       	subi	r24, 0x60	; 96
    2918:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    291a:	9c 01       	movw	r18, r24
    291c:	2f 50       	subi	r18, 0x0F	; 15
    291e:	30 40       	sbci	r19, 0x00	; 0
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    2922:	2f ef       	ldi	r18, 0xFF	; 255
    2924:	3f ef       	ldi	r19, 0xFF	; 255
  }
    2926:	c9 01       	movw	r24, r18
    2928:	08 95       	ret

0000292a <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    292a:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    292c:	82 30       	cpi	r24, 0x02	; 2
    292e:	38 f4       	brcc	.+14     	; 0x293e <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2930:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2932:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0c 96       	adiw	r24, 0x0c	; 12
    2938:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    293c:	1f bf       	out	0x3f, r17	; 63
  }
    293e:	1f 91       	pop	r17
    2940:	08 95       	ret

00002942 <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    2942:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    2944:	62 30       	cpi	r22, 0x02	; 2
    2946:	98 f4       	brcc	.+38     	; 0x296e <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    2948:	25 e0       	ldi	r18, 0x05	; 5
    294a:	80 3a       	cpi	r24, 0xA0	; 160
    294c:	92 07       	cpc	r25, r18
    294e:	78 f4       	brcc	.+30     	; 0x296e <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2950:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2952:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    2954:	26 2f       	mov	r18, r22
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	66 e0       	ldi	r22, 0x06	; 6
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    2960:	c9 01       	movw	r24, r18
    2962:	0c 96       	adiw	r24, 0x0c	; 12
    2964:	0e 94 b5 07 	call	0xf6a	; 0xf6a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2968:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    296e:	80 e0       	ldi	r24, 0x00	; 0
  }
    2970:	1f 91       	pop	r17
    2972:	08 95       	ret

00002974 <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    2978:	0e 94 75 14 	call	0x28ea	; 0x28ea <getSimpleScheduleOn(unsigned char)>
    297c:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    2980:	cf 3f       	cpi	r28, 0xFF	; 255
    2982:	d8 07       	cpc	r29, r24
    2984:	19 f4       	brne	.+6      	; 0x298c <getSimpleScheduleOff(unsigned char)+0x18>
    2986:	2f ef       	ldi	r18, 0xFF	; 255
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	16 c0       	rjmp	.+44     	; 0x29b8 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    298c:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    2990:	82 31       	cpi	r24, 0x12	; 18
    2992:	10 f4       	brcc	.+4      	; 0x2998 <getSimpleScheduleOff(unsigned char)+0x24>
    2994:	8c e3       	ldi	r24, 0x3C	; 60
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    2998:	84 31       	cpi	r24, 0x14	; 20
    299a:	10 f4       	brcc	.+4      	; 0x29a0 <getSimpleScheduleOff(unsigned char)+0x2c>
    299c:	8a e5       	ldi	r24, 0x5A	; 90
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <getSimpleScheduleOff(unsigned char)+0x2e>
    29a0:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    29a2:	9e 01       	movw	r18, r28
    29a4:	21 5f       	subi	r18, 0xF1	; 241
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	28 0f       	add	r18, r24
    29aa:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    29ac:	85 e0       	ldi	r24, 0x05	; 5
    29ae:	20 3a       	cpi	r18, 0xA0	; 160
    29b0:	38 07       	cpc	r19, r24
    29b2:	10 f0       	brcs	.+4      	; 0x29b8 <getSimpleScheduleOff(unsigned char)+0x44>
    29b4:	20 5a       	subi	r18, 0xA0	; 160
    29b6:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    29b8:	c9 01       	movw	r24, r18
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    29c8:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <getMinutesSinceMidnightLT()>
    29cc:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	0e 94 75 14 	call	0x28ea	; 0x28ea <getSimpleScheduleOn(unsigned char)>
    29d4:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    29d6:	08 17       	cp	r16, r24
    29d8:	19 07       	cpc	r17, r25
    29da:	68 f0       	brcs	.+26     	; 0x29f6 <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 ba 14 	call	0x2974	; 0x2974 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    29e2:	8c 17       	cp	r24, r28
    29e4:	9d 07       	cpc	r25, r29
    29e6:	20 f0       	brcs	.+8      	; 0x29f0 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    29e8:	08 17       	cp	r16, r24
    29ea:	19 07       	cpc	r17, r25
    29ec:	20 f4       	brcc	.+8      	; 0x29f6 <isAnyScheduleOnWARMNow()+0x36>
    29ee:	17 c0       	rjmp	.+46     	; 0x2a1e <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    29f0:	80 56       	subi	r24, 0x60	; 96
    29f2:	9a 4f       	sbci	r25, 0xFA	; 250
    29f4:	f9 cf       	rjmp	.-14     	; 0x29e8 <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	0e 94 75 14 	call	0x28ea	; 0x28ea <getSimpleScheduleOn(unsigned char)>
    29fc:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    29fe:	08 17       	cp	r16, r24
    2a00:	19 07       	cpc	r17, r25
    2a02:	58 f0       	brcs	.+22     	; 0x2a1a <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	0e 94 ba 14 	call	0x2974	; 0x2974 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    2a0a:	8c 17       	cp	r24, r28
    2a0c:	9d 07       	cpc	r25, r29
    2a0e:	10 f4       	brcc	.+4      	; 0x2a14 <isAnyScheduleOnWARMNow()+0x54>
    2a10:	80 56       	subi	r24, 0x60	; 96
    2a12:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    2a14:	08 17       	cp	r16, r24
    2a16:	19 07       	cpc	r17, r25
    2a18:	10 f0       	brcs	.+4      	; 0x2a1e <isAnyScheduleOnWARMNow()+0x5e>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	08 95       	ret

00002a2a <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    2a2a:	ff 92       	push	r15
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2a30:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2a34:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    2a36:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    2a3a:	10 91 b5 01 	lds	r17, 0x01B5
  const uint16_t m = getMinutesSinceMidnightLT();
    2a3e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <getMinutesSinceMidnightLT()>
    2a42:	bc 01       	movw	r22, r24
  Serial.print(m);
    2a44:	8e e1       	ldi	r24, 0x1E	; 30
    2a46:	93 e0       	ldi	r25, 0x03	; 3
    2a48:	4a e0       	ldi	r20, 0x0A	; 10
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	0e 94 1b 2a 	call	0x5436	; 0x5436 <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    2a50:	8e e1       	ldi	r24, 0x1E	; 30
    2a52:	93 e0       	ldi	r25, 0x03	; 3
    2a54:	6a e3       	ldi	r22, 0x3A	; 58
    2a56:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    2a5a:	8e e1       	ldi	r24, 0x1E	; 30
    2a5c:	93 e0       	ldi	r25, 0x03	; 3
    2a5e:	61 2f       	mov	r22, r17
    2a60:	4a e0       	ldi	r20, 0x0A	; 10
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    2a68:	8e e1       	ldi	r24, 0x1E	; 30
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	6a e3       	ldi	r22, 0x3A	; 58
    2a6e:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    2a72:	8e e1       	ldi	r24, 0x1E	; 30
    2a74:	93 e0       	ldi	r25, 0x03	; 3
    2a76:	60 2f       	mov	r22, r16
    2a78:	4a e0       	ldi	r20, 0x0A	; 10
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
  _flush();
    2a80:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2a84:	ff 20       	and	r15, r15
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <_debug_serial_timestamp()+0x62>
    2a88:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	08 95       	ret

00002a94 <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    2a94:	ff 92       	push	r15
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2a9c:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2aa0:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(u);
    2aa2:	8e e1       	ldi	r24, 0x1E	; 30
    2aa4:	93 e0       	ldi	r25, 0x03	; 3
    2aa6:	b8 01       	movw	r22, r16
    2aa8:	4a e0       	ldi	r20, 0x0A	; 10
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	0e 94 1b 2a 	call	0x5436	; 0x5436 <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2ab0:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2ab4:	ff 20       	and	r15, r15
    2ab6:	11 f0       	breq	.+4      	; 0x2abc <serialPrintAndFlush(unsigned int, int)+0x28>
    2ab8:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2abc:	1f 91       	pop	r17
    2abe:	0f 91       	pop	r16
    2ac0:	ff 90       	pop	r15
    2ac2:	08 95       	ret

00002ac4 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2aca:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2ace:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    2ad0:	8e e1       	ldi	r24, 0x1E	; 30
    2ad2:	93 e0       	ldi	r25, 0x03	; 3
    2ad4:	61 2f       	mov	r22, r17
    2ad6:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2ada:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2ade:	00 23       	and	r16, r16
    2ae0:	11 f0       	breq	.+4      	; 0x2ae6 <serialPrintAndFlush(char)+0x22>
    2ae2:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	08 95       	ret

00002aec <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    2aec:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2aee:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2af2:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    2af4:	8e e1       	ldi	r24, 0x1E	; 30
    2af6:	93 e0       	ldi	r25, 0x03	; 3
    2af8:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2afc:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b00:	11 23       	and	r17, r17
    2b02:	11 f0       	breq	.+4      	; 0x2b08 <serialPrintlnAndFlush()+0x1c>
    2b04:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2b08:	1f 91       	pop	r17
    2b0a:	08 95       	ret

00002b0c <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    2b0c:	ff 92       	push	r15
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b14:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2b18:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(i);
    2b1a:	8e e1       	ldi	r24, 0x1E	; 30
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	b8 01       	movw	r22, r16
    2b20:	4a e0       	ldi	r20, 0x0A	; 10
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b28:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b2c:	ff 20       	and	r15, r15
    2b2e:	11 f0       	breq	.+4      	; 0x2b34 <serialPrintAndFlush(int, int)+0x28>
    2b30:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	08 95       	ret

00002b3c <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    2b3c:	ff 92       	push	r15
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b44:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2b48:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    2b4a:	8e e1       	ldi	r24, 0x1E	; 30
    2b4c:	93 e0       	ldi	r25, 0x03	; 3
    2b4e:	b8 01       	movw	r22, r16
    2b50:	0e 94 91 2a 	call	0x5522	; 0x5522 <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b54:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b58:	ff 20       	and	r15, r15
    2b5a:	11 f0       	breq	.+4      	; 0x2b60 <serialPrintAndFlush(char const*)+0x24>
    2b5c:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	ff 90       	pop	r15
    2b66:	08 95       	ret

00002b68 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b70:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2b74:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    2b76:	8e e1       	ldi	r24, 0x1E	; 30
    2b78:	93 e0       	ldi	r25, 0x03	; 3
    2b7a:	b8 01       	movw	r22, r16
    2b7c:	0e 94 2d 29 	call	0x525a	; 0x525a <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b80:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b84:	ff 20       	and	r15, r15
    2b86:	11 f0       	breq	.+4      	; 0x2b8c <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    2b88:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	08 95       	ret

00002b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b9c:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2ba0:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    2ba2:	8e e1       	ldi	r24, 0x1E	; 30
    2ba4:	93 e0       	ldi	r25, 0x03	; 3
    2ba6:	b8 01       	movw	r22, r16
    2ba8:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2bac:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2bb0:	ff 20       	and	r15, r15
    2bb2:	11 f0       	breq	.+4      	; 0x2bb8 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    2bb4:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	ff 90       	pop	r15
    2bbe:	08 95       	ret

00002bc0 <getTempPotReducedNoise()>:

// Get reduced-noise temperature pot user control value (previously read with readTempPot()) in range [0,255]; very fast.
// In particular this value should not jitter between readings even if the pot is sitting at an ADC boundary level.
uint8_t getTempPotReducedNoise() { return(tempPotReducedNoise); }
    2bc0:	80 91 bc 01 	lds	r24, 0x01BC
    2bc4:	08 95       	ret

00002bc6 <readTempPot()>:

// Read the user 'temperature pot' setting in range [0,1023]; higher value implies higher target temperature.
// This may consume significant power and time.
int readTempPot()
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <power_intermittent_peripherals_enable(bool)>
  const int tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <analogueNoiseReducedRead(int, unsigned char)>
    2bde:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    2be0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const int tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    2be4:	cf ef       	ldi	r28, 0xFF	; 255
    2be6:	d3 e0       	ldi	r29, 0x03	; 3
    2be8:	c0 1b       	sub	r28, r16
    2bea:	d1 0b       	sbc	r29, r17


  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new value.
  tempPot = tp;
    2bec:	d0 93 bb 01 	sts	0x01BB, r29
    2bf0:	c0 93 ba 01 	sts	0x01BA, r28

  // Capture reduced-noise value with a little hysteresis.
  const int shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    2bf4:	9e 01       	movw	r18, r28
    2bf6:	35 95       	asr	r19
    2bf8:	27 95       	ror	r18
    2bfa:	35 95       	asr	r19
    2bfc:	27 95       	ror	r18
  if(((shifted > tempPotReducedNoise) && (shifted - tempPotReducedNoise >= RN_HYST)) ||
    2bfe:	80 91 bc 01 	lds	r24, 0x01BC
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	82 17       	cp	r24, r18
    2c06:	93 07       	cpc	r25, r19
    2c08:	2c f4       	brge	.+10     	; 0x2c14 <readTempPot()+0x4e>
    2c0a:	a9 01       	movw	r20, r18
    2c0c:	48 1b       	sub	r20, r24
    2c0e:	59 0b       	sbc	r21, r25
    2c10:	ca 01       	movw	r24, r20
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <readTempPot()+0x58>
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	44 f4       	brge	.+16     	; 0x2c2a <readTempPot()+0x64>
    2c1a:	82 1b       	sub	r24, r18
    2c1c:	93 0b       	sbc	r25, r19
    2c1e:	04 97       	sbiw	r24, 0x04	; 4
    2c20:	24 f0       	brlt	.+8      	; 0x2c2a <readTempPot()+0x64>
     ((shifted < tempPotReducedNoise) && (tempPotReducedNoise - shifted >= RN_HYST)))
    {
    tempPotReducedNoise = (uint8_t) shifted;
    2c22:	20 93 bc 01 	sts	0x01BC, r18
    markUIControlUsed(); // Note user operation of pot.
    2c26:	0e 94 8d 1c 	call	0x391a	; 0x391a <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	08 95       	ret

00002c36 <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    2c36:	80 91 bd 01 	lds	r24, 0x01BD
    2c3a:	90 91 be 01 	lds	r25, 0x01BE
    2c3e:	08 95       	ret

00002c40 <readTemperatureC16()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
#ifdef FAKE_TMP102
  temp16 = 17 * 16;
  return(temp16); // FAKE IT!
#endif

  const bool neededPowerUp = powerUpTWIIfDisabled();
    2c48:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <powerUpTWIIfDisabled()>
    2c4c:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2c4e:	8c e1       	ldi	r24, 0x1C	; 28
    2c50:	92 e0       	ldi	r25, 0x02	; 2
    2c52:	68 e4       	ldi	r22, 0x48	; 72
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	0e 94 a6 22 	call	0x454c	; 0x454c <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2c5a:	8c e1       	ldi	r24, 0x1C	; 28
    2c5c:	92 e0       	ldi	r25, 0x02	; 2
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	0e 94 28 23 	call	0x4650	; 0x4650 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    2c64:	8c e1       	ldi	r24, 0x1C	; 28
    2c66:	92 e0       	ldi	r25, 0x02	; 2
    2c68:	61 e3       	ldi	r22, 0x31	; 49
    2c6a:	0e 94 28 23 	call	0x4650	; 0x4650 <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    2c6e:	8c e1       	ldi	r24, 0x1C	; 28
    2c70:	92 e0       	ldi	r25, 0x02	; 2
    2c72:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2c76:	8c e1       	ldi	r24, 0x1C	; 28
    2c78:	92 e0       	ldi	r25, 0x02	; 2
    2c7a:	68 e4       	ldi	r22, 0x48	; 72
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	0e 94 a6 22 	call	0x454c	; 0x454c <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2c82:	8c e1       	ldi	r24, 0x1C	; 28
    2c84:	92 e0       	ldi	r25, 0x02	; 2
    2c86:	61 e0       	ldi	r22, 0x01	; 1
    2c88:	0e 94 28 23 	call	0x4650	; 0x4650 <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2c8c:	8c e1       	ldi	r24, 0x1C	; 28
    2c8e:	92 e0       	ldi	r25, 0x02	; 2
    2c90:	61 eb       	ldi	r22, 0xB1	; 177
    2c92:	0e 94 28 23 	call	0x4650	; 0x4650 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2c96:	8c e1       	ldi	r24, 0x1C	; 28
    2c98:	92 e0       	ldi	r25, 0x02	; 2
    2c9a:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <TwoWire::endTransmission()>
    2c9e:	88 23       	and	r24, r24
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <readTemperatureC16()+0x64>
    2ca2:	4d c0       	rjmp	.+154    	; 0x2d3e <readTemperatureC16()+0xfe>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2ca4:	8c e1       	ldi	r24, 0x1C	; 28
    2ca6:	92 e0       	ldi	r25, 0x02	; 2
    2ca8:	68 e4       	ldi	r22, 0x48	; 72
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	0e 94 a6 22 	call	0x454c	; 0x454c <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2cb0:	8c e1       	ldi	r24, 0x1C	; 28
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	61 e0       	ldi	r22, 0x01	; 1
    2cb6:	0e 94 28 23 	call	0x4650	; 0x4650 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2cba:	8c e1       	ldi	r24, 0x1C	; 28
    2cbc:	92 e0       	ldi	r25, 0x02	; 2
    2cbe:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <TwoWire::endTransmission()>
    2cc2:	88 23       	and	r24, r24
    2cc4:	e1 f5       	brne	.+120    	; 0x2d3e <readTemperatureC16()+0xfe>
    2cc6:	c8 e0       	ldi	r28, 0x08	; 8
    2cc8:	d0 e0       	ldi	r29, 0x00	; 0
    2cca:	16 c0       	rjmp	.+44     	; 0x2cf8 <readTemperatureC16()+0xb8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { temp16 = 0; return(0); } // Exit if error.
    2ccc:	1c 16       	cp	r1, r28
    2cce:	1d 06       	cpc	r1, r29
    2cd0:	b4 f5       	brge	.+108    	; 0x2d3e <readTemperatureC16()+0xfe>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { temp16 = 0; return(0); } // Exit if error.
    2cd2:	8c e1       	ldi	r24, 0x1C	; 28
    2cd4:	92 e0       	ldi	r25, 0x02	; 2
    2cd6:	68 e4       	ldi	r22, 0x48	; 72
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <TwoWire::requestFrom(int, int)>
    2ce2:	81 30       	cpi	r24, 0x01	; 1
    2ce4:	61 f5       	brne	.+88     	; 0x2d3e <readTemperatureC16()+0xfe>
    const byte b1 = Wire.read();
    2ce6:	8c e1       	ldi	r24, 0x1C	; 28
    2ce8:	92 e0       	ldi	r25, 0x02	; 2
    2cea:	0e 94 b9 22 	call	0x4572	; 0x4572 <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    2cee:	87 fd       	sbrc	r24, 7
    2cf0:	05 c0       	rjmp	.+10     	; 0x2cfc <readTemperatureC16()+0xbc>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    2cf8:	21 97       	sbiw	r28, 0x01	; 1
    2cfa:	41 f7       	brne	.-48     	; 0x2ccc <readTemperatureC16()+0x8c>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2cfc:	8c e1       	ldi	r24, 0x1C	; 28
    2cfe:	92 e0       	ldi	r25, 0x02	; 2
    2d00:	68 e4       	ldi	r22, 0x48	; 72
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	0e 94 a6 22 	call	0x454c	; 0x454c <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    2d08:	8c e1       	ldi	r24, 0x1C	; 28
    2d0a:	92 e0       	ldi	r25, 0x02	; 2
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	0e 94 28 23 	call	0x4650	; 0x4650 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2d12:	8c e1       	ldi	r24, 0x1C	; 28
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <TwoWire::endTransmission()>
    2d1a:	88 23       	and	r24, r24
    2d1c:	81 f4       	brne	.+32     	; 0x2d3e <readTemperatureC16()+0xfe>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { temp16 = 0; return(0); }
    2d1e:	8c e1       	ldi	r24, 0x1C	; 28
    2d20:	92 e0       	ldi	r25, 0x02	; 2
    2d22:	68 e4       	ldi	r22, 0x48	; 72
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	42 e0       	ldi	r20, 0x02	; 2
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <TwoWire::requestFrom(int, int)>
    2d2e:	82 30       	cpi	r24, 0x02	; 2
    2d30:	31 f4       	brne	.+12     	; 0x2d3e <readTemperatureC16()+0xfe>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2d32:	8c e1       	ldi	r24, 0x1C	; 28
    2d34:	92 e0       	ldi	r25, 0x02	; 2
    2d36:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <TwoWire::endTransmission()>
    2d3a:	88 23       	and	r24, r24
    2d3c:	39 f0       	breq	.+14     	; 0x2d4c <readTemperatureC16()+0x10c>
    2d3e:	10 92 be 01 	sts	0x01BE, r1
    2d42:	10 92 bd 01 	sts	0x01BD, r1
    2d46:	c0 e0       	ldi	r28, 0x00	; 0
    2d48:	d0 e0       	ldi	r29, 0x00	; 0
    2d4a:	2a c0       	rjmp	.+84     	; 0x2da0 <readTemperatureC16()+0x160>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    2d4c:	8c e1       	ldi	r24, 0x1C	; 28
    2d4e:	92 e0       	ldi	r25, 0x02	; 2
    2d50:	0e 94 b9 22 	call	0x4572	; 0x4572 <TwoWire::read()>
    2d54:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    2d56:	8c e1       	ldi	r24, 0x1C	; 28
    2d58:	92 e0       	ldi	r25, 0x02	; 2
    2d5a:	0e 94 b9 22 	call	0x4572	; 0x4572 <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    2d5e:	17 fd       	sbrc	r17, 7
    2d60:	03 c0       	rjmp	.+6      	; 0x2d68 <readTemperatureC16()+0x128>
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <readTemperatureC16()+0x12c>
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 ef       	ldi	r19, 0xF0	; 240
    2d6c:	c8 2f       	mov	r28, r24
    2d6e:	d0 e0       	ldi	r29, 0x00	; 0
    2d70:	54 e0       	ldi	r21, 0x04	; 4
    2d72:	d5 95       	asr	r29
    2d74:	c7 95       	ror	r28
    2d76:	5a 95       	dec	r21
    2d78:	e1 f7       	brne	.-8      	; 0x2d72 <readTemperatureC16()+0x132>
    2d7a:	81 2f       	mov	r24, r17
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	44 e0       	ldi	r20, 0x04	; 4
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	4a 95       	dec	r20
    2d86:	e1 f7       	brne	.-8      	; 0x2d80 <readTemperatureC16()+0x140>
    2d88:	c8 2b       	or	r28, r24
    2d8a:	d9 2b       	or	r29, r25
    2d8c:	c2 2b       	or	r28, r18
    2d8e:	d3 2b       	or	r29, r19

  // Store the result for access at any time.
  temp16 = t16;
    2d90:	d0 93 be 01 	sts	0x01BE, r29
    2d94:	c0 93 bd 01 	sts	0x01BD, r28
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    2d98:	00 23       	and	r16, r16
    2d9a:	11 f0       	breq	.+4      	; 0x2da0 <readTemperatureC16()+0x160>
    2d9c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <powerDownTWI()>

  return(t16);
  }
    2da0:	ce 01       	movw	r24, r28
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	08 95       	ret

00002dac <inWarmModeDebounced()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then is in WARM (or BAKE) mode, but 'debounced' to avoid accidental operation.
static bool isWarmModeDebounced;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmModeDebounced() { return(isWarmModeDebounced); }
    2dac:	80 91 c9 01 	lds	r24, 0x01C9
    2db0:	08 95       	ret

00002db2 <inBakeModeDebounced()>:
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    2db2:	80 91 c9 01 	lds	r24, 0x01C9
    2db6:	88 23       	and	r24, r24
    2db8:	21 f0       	breq	.+8      	; 0x2dc2 <inBakeModeDebounced()+0x10>
    2dba:	80 91 cb 01 	lds	r24, 0x01CB
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	08 95       	ret

00002dc4 <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    2dc4:	10 92 cb 01 	sts	0x01CB, r1
    2dc8:	08 95       	ret

00002dca <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLITimeoutM); }
    2dca:	80 91 04 01 	lds	r24, 0x0104
    2dce:	81 11       	cpse	r24, r1
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	08 95       	ret

00002dd4 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    2dd4:	8e e1       	ldi	r24, 0x1E	; 30
    2dd6:	93 e0       	ldi	r25, 0x03	; 3
    2dd8:	60 e2       	ldi	r22, 0x20	; 32
    2dda:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    2dde:	08 95       	ret

00002de0 <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    2de0:	8e e1       	ldi	r24, 0x1E	; 30
    2de2:	93 e0       	ldi	r25, 0x03	; 3
    2de4:	6b e9       	ldi	r22, 0x9B	; 155
    2de6:	73 e0       	ldi	r23, 0x03	; 3
    2de8:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
    2dec:	08 95       	ret

00002dee <printCLILine(char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(char syntax, __FlashStringHelper const *description)
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	28 2f       	mov	r18, r24
    2df6:	eb 01       	movw	r28, r22
  {
  Serial.print(syntax);
    2df8:	8e e1       	ldi	r24, 0x1E	; 30
    2dfa:	93 e0       	ldi	r25, 0x03	; 3
    2dfc:	62 2f       	mov	r22, r18
    2dfe:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  Serial.flush();
    2e02:	8e e1       	ldi	r24, 0x1E	; 30
    2e04:	93 e0       	ldi	r25, 0x03	; 3
    2e06:	0e 94 4e 28 	call	0x509c	; 0x509c <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2e0a:	80 91 b2 00 	lds	r24, 0x00B2
    2e0e:	80 3e       	cpi	r24, 0xE0	; 224
    2e10:	10 f4       	brcc	.+4      	; 0x2e16 <printCLILine(char, __FlashStringHelper const*)+0x28>
    2e12:	19 e0       	ldi	r17, 0x09	; 9
    2e14:	07 c0       	rjmp	.+14     	; 0x2e24 <printCLILine(char, __FlashStringHelper const*)+0x36>
    2e16:	8e e1       	ldi	r24, 0x1E	; 30
    2e18:	93 e0       	ldi	r25, 0x03	; 3
    2e1a:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
    2e1e:	09 c0       	rjmp	.+18     	; 0x2e32 <printCLILine(char, __FlashStringHelper const*)+0x44>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    2e20:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    2e24:	11 50       	subi	r17, 0x01	; 1
    2e26:	e0 f7       	brcc	.-8      	; 0x2e20 <printCLILine(char, __FlashStringHelper const*)+0x32>
  Serial.println(description);
    2e28:	8e e1       	ldi	r24, 0x1E	; 30
    2e2a:	93 e0       	ldi	r25, 0x03	; 3
    2e2c:	be 01       	movw	r22, r28
    2e2e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
  }
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	1f 91       	pop	r17
    2e38:	08 95       	ret

00002e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>:

#define SYNTAX_COL_WIDTH 10 // Width of 'syntax' column; strictly positive.
#define STOP_PRINTING_DESCRIPTION_AT (GSCT_MAX-(GSCT_MAX/8)) // Time into minor cycle after which the description should be skipped.
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(__FlashStringHelper const *syntax, __FlashStringHelper const *description)
    2e3a:	ef 92       	push	r14
    2e3c:	ff 92       	push	r15
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	ec 01       	movw	r28, r24
    2e46:	7b 01       	movw	r14, r22
  {
  Serial.print(syntax);
    2e48:	8e e1       	ldi	r24, 0x1E	; 30
    2e4a:	93 e0       	ldi	r25, 0x03	; 3
    2e4c:	be 01       	movw	r22, r28
    2e4e:	0e 94 2d 29 	call	0x525a	; 0x525a <Print::print(__FlashStringHelper const*)>
  Serial.flush();
    2e52:	8e e1       	ldi	r24, 0x1E	; 30
    2e54:	93 e0       	ldi	r25, 0x03	; 3
    2e56:	0e 94 4e 28 	call	0x509c	; 0x509c <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2e5a:	80 91 b2 00 	lds	r24, 0x00B2
    2e5e:	80 3e       	cpi	r24, 0xE0	; 224
    2e60:	28 f0       	brcs	.+10     	; 0x2e6c <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x32>
    2e62:	8e e1       	ldi	r24, 0x1E	; 30
    2e64:	93 e0       	ldi	r25, 0x03	; 3
    2e66:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
    2e6a:	10 c0       	rjmp	.+32     	; 0x2e8c <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x52>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	0e 94 84 03 	call	0x708	; 0x708 <strlen_P>
    2e72:	1a e0       	ldi	r17, 0x0A	; 10
    2e74:	18 1b       	sub	r17, r24
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x42>
    2e78:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    2e7c:	11 50       	subi	r17, 0x01	; 1
    2e7e:	17 ff       	sbrs	r17, 7
    2e80:	fb cf       	rjmp	.-10     	; 0x2e78 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
  Serial.println(description);
    2e82:	8e e1       	ldi	r24, 0x1E	; 30
    2e84:	93 e0       	ldi	r25, 0x03	; 3
    2e86:	b7 01       	movw	r22, r14
    2e88:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
  }
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	ff 90       	pop	r15
    2e94:	ef 90       	pop	r14
    2e96:	08 95       	ret

00002e98 <dumpCLIUsage()>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage()
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
  {
  Serial.println();
    2e9c:	0e e1       	ldi	r16, 0x1E	; 30
    2e9e:	13 e0       	ldi	r17, 0x03	; 3
    2ea0:	c8 01       	movw	r24, r16
    2ea2:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
  Serial.println(F("CLI usage:"));
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	60 e9       	ldi	r22, 0x90	; 144
    2eaa:	73 e0       	ldi	r23, 0x03	; 3
    2eac:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
  printCLILine('?', F("this help"));
    2eb0:	8f e3       	ldi	r24, 0x3F	; 63
    2eb2:	66 e8       	ldi	r22, 0x86	; 134
    2eb4:	73 e0       	ldi	r23, 0x03	; 3
    2eb6:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(F("C M"), F("Central hub: minimum M mins on, 0 off"));
    2eba:	82 e8       	ldi	r24, 0x82	; 130
    2ebc:	93 e0       	ldi	r25, 0x03	; 3
    2ebe:	6c e5       	ldi	r22, 0x5C	; 92
    2ec0:	73 e0       	ldi	r23, 0x03	; 3
    2ec2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(F("D N"), F("Dump stats set N"));
    2ec6:	88 e5       	ldi	r24, 0x58	; 88
    2ec8:	93 e0       	ldi	r25, 0x03	; 3
    2eca:	67 e4       	ldi	r22, 0x47	; 71
    2ecc:	73 e0       	ldi	r23, 0x03	; 3
    2ece:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('E', F("Exit CLI"));
    2ed2:	85 e4       	ldi	r24, 0x45	; 69
    2ed4:	6e e3       	ldi	r22, 0x3E	; 62
    2ed6:	73 e0       	ldi	r23, 0x03	; 3
    2ed8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('F', F("Frost"));
    2edc:	86 e4       	ldi	r24, 0x46	; 70
    2ede:	68 e3       	ldi	r22, 0x38	; 56
    2ee0:	73 e0       	ldi	r23, 0x03	; 3
    2ee2:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(F("F CC"), F("set Frost temp CC"));
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(F("H H1 H2"), F("set wireless FHT8V House codes 1&2"));
    2ee6:	80 e3       	ldi	r24, 0x30	; 48
    2ee8:	93 e0       	ldi	r25, 0x03	; 3
    2eea:	6d e0       	ldi	r22, 0x0D	; 13
    2eec:	73 e0       	ldi	r23, 0x03	; 3
    2eee:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('H', F("clear House codes"));
    2ef2:	88 e4       	ldi	r24, 0x48	; 72
    2ef4:	6b ef       	ldi	r22, 0xFB	; 251
    2ef6:	72 e0       	ldi	r23, 0x02	; 2
    2ef8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
#endif
  //printCLILine('L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    2efc:	87 ef       	ldi	r24, 0xF7	; 247
    2efe:	92 e0       	ldi	r25, 0x02	; 2
    2f00:	6e eb       	ldi	r22, 0xBE	; 190
    2f02:	72 e0       	ldi	r23, 0x02	; 2
    2f04:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    2f08:	84 eb       	ldi	r24, 0xB4	; 180
    2f0a:	92 e0       	ldi	r25, 0x02	; 2
    2f0c:	63 e8       	ldi	r22, 0x83	; 131
    2f0e:	72 e0       	ldi	r23, 0x02	; 2
    2f10:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(F("O PP"), F("min % for valve to be Open"));
    2f14:	8e e7       	ldi	r24, 0x7E	; 126
    2f16:	92 e0       	ldi	r25, 0x02	; 2
    2f18:	63 e6       	ldi	r22, 0x63	; 99
    2f1a:	72 e0       	ldi	r23, 0x02	; 2
    2f1c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('O', F("reset Open %"));
    2f20:	8f e4       	ldi	r24, 0x4F	; 79
    2f22:	66 e5       	ldi	r22, 0x56	; 86
    2f24:	72 e0       	ldi	r23, 0x02	; 2
    2f26:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine('Q', F("Quick Heat"));
    2f2a:	81 e5       	ldi	r24, 0x51	; 81
    2f2c:	6b e4       	ldi	r22, 0x4B	; 75
    2f2e:	72 e0       	ldi	r23, 0x02	; 2
    2f30:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
#endif
  printCLILine(F("R N"), F("dump Raw stats set N"));
    2f34:	87 e4       	ldi	r24, 0x47	; 71
    2f36:	92 e0       	ldi	r25, 0x02	; 2
    2f38:	62 e3       	ldi	r22, 0x32	; 50
    2f3a:	72 e0       	ldi	r23, 0x02	; 2
    2f3c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('S', F("show Status and smart warming for next 24h"));
    2f40:	83 e5       	ldi	r24, 0x53	; 83
    2f42:	67 e0       	ldi	r22, 0x07	; 7
    2f44:	72 e0       	ldi	r23, 0x02	; 2
    2f46:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("T HH MM"), F("set 24h Time"));
    2f4a:	8f ef       	ldi	r24, 0xFF	; 255
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	62 ef       	ldi	r22, 0xF2	; 242
    2f50:	71 e0       	ldi	r23, 0x01	; 1
    2f52:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('W', F("Warm"));
    2f56:	87 e5       	ldi	r24, 0x57	; 87
    2f58:	6d ee       	ldi	r22, 0xED	; 237
    2f5a:	71 e0       	ldi	r23, 0x01	; 1
    2f5c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('V', F("code/board Version"));
    2f60:	86 e5       	ldi	r24, 0x56	; 86
    2f62:	6a ed       	ldi	r22, 0xDA	; 218
    2f64:	71 e0       	ldi	r23, 0x01	; 1
    2f66:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(F("W CC"), F("set Warm temp CC"));
#endif
  printCLILine('Z', F("Zap stats"));
    2f6a:	8a e5       	ldi	r24, 0x5A	; 90
    2f6c:	60 ed       	ldi	r22, 0xD0	; 208
    2f6e:	71 e0       	ldi	r23, 0x01	; 1
    2f70:	0e 94 f7 16 	call	0x2dee	; 0x2dee <printCLILine(char, __FlashStringHelper const*)>
  Serial.println();
    2f74:	c8 01       	movw	r24, r16
    2f76:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
  }
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    2f80:	1f 93       	push	r17
    2f82:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(isWarmModeDebounced) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    2f84:	80 91 c9 01 	lds	r24, 0x01C9
    2f88:	88 23       	and	r24, r24
    2f8a:	31 f0       	breq	.+12     	; 0x2f98 <handleLEARN(unsigned char)+0x18>
    2f8c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <getMinutesSinceMidnightLT()>
    2f90:	61 2f       	mov	r22, r17
    2f92:	0e 94 a1 14 	call	0x2942	; 0x2942 <setSimpleSchedule(unsigned int, unsigned char)>
    2f96:	03 c0       	rjmp	.+6      	; 0x2f9e <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    2f98:	81 2f       	mov	r24, r17
    2f9a:	0e 94 95 14 	call	0x292a	; 0x292a <clearSimpleSchedule(unsigned char)>
  }
    2f9e:	1f 91       	pop	r17
    2fa0:	08 95       	ret

00002fa2 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    2fa2:	df 92       	push	r13
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2fb0:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    2fb4:	d8 2e       	mov	r13, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
    2fb6:	8e e1       	ldi	r24, 0x1E	; 30
    2fb8:	93 e0       	ldi	r25, 0x03	; 3
    2fba:	6d e3       	ldi	r22, 0x3D	; 61
    2fbc:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    2fc0:	80 91 c9 01 	lds	r24, 0x01C9
    2fc4:	88 23       	and	r24, r24
    2fc6:	11 f4       	brne	.+4      	; 0x2fcc <serialStatusReport()+0x2a>
    2fc8:	66 e4       	ldi	r22, 0x46	; 70
    2fca:	07 c0       	rjmp	.+14     	; 0x2fda <serialStatusReport()+0x38>
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    2fcc:	80 91 cb 01 	lds	r24, 0x01CB
    2fd0:	88 23       	and	r24, r24
    2fd2:	11 f4       	brne	.+4      	; 0x2fd8 <serialStatusReport()+0x36>
    2fd4:	67 e5       	ldi	r22, 0x57	; 87
    2fd6:	01 c0       	rjmp	.+2      	; 0x2fda <serialStatusReport()+0x38>
    2fd8:	62 e4       	ldi	r22, 0x42	; 66

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    2fda:	8e e1       	ldi	r24, 0x1E	; 30
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
    2fde:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
#else
  Serial.print(inWarmModeDebounced() ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target valve position.
    2fe2:	0e 94 31 04 	call	0x862	; 0x862 <getTRVPercentOpen()>
    2fe6:	68 2f       	mov	r22, r24
    2fe8:	8e e1       	ldi	r24, 0x1E	; 30
    2fea:	93 e0       	ldi	r25, 0x03	; 3
    2fec:	4a e0       	ldi	r20, 0x0A	; 10
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    2ff4:	8e e1       	ldi	r24, 0x1E	; 30
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	65 e2       	ldi	r22, 0x25	; 37
    2ffa:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  const int temp = getTemperatureC16();
    2ffe:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <getTemperatureC16()>
    3002:	8c 01       	movw	r16, r24
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    3004:	8e e1       	ldi	r24, 0x1E	; 30
    3006:	93 e0       	ldi	r25, 0x03	; 3
    3008:	60 e4       	ldi	r22, 0x40	; 64
    300a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    300e:	b8 01       	movw	r22, r16
    3010:	84 e0       	ldi	r24, 0x04	; 4
    3012:	75 95       	asr	r23
    3014:	67 95       	ror	r22
    3016:	8a 95       	dec	r24
    3018:	e1 f7       	brne	.-8      	; 0x3012 <serialStatusReport()+0x70>
    301a:	8e e1       	ldi	r24, 0x1E	; 30
    301c:	93 e0       	ldi	r25, 0x03	; 3
    301e:	4a e0       	ldi	r20, 0x0A	; 10
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
    3026:	8e e1       	ldi	r24, 0x1E	; 30
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	63 e4       	ldi	r22, 0x43	; 67
    302c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    3030:	0f 70       	andi	r16, 0x0F	; 15
    3032:	10 70       	andi	r17, 0x00	; 0
    3034:	8e e1       	ldi	r24, 0x1E	; 30
    3036:	93 e0       	ldi	r25, 0x03	; 3
    3038:	b8 01       	movw	r22, r16
    303a:	40 e1       	ldi	r20, 0x10	; 16
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>

  Serial.print(';'); // End of initial section.
    3042:	8e e1       	ldi	r24, 0x1E	; 30
    3044:	93 e0       	ldi	r25, 0x03	; 3
    3046:	6b e3       	ldi	r22, 0x3B	; 59
    3048:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  const uint_least8_t hh = getHoursLT();
    304c:	0e 94 90 13 	call	0x2720	; 0x2720 <getHoursLT()>
    3050:	e8 2e       	mov	r14, r24
  const uint_least8_t mm = getMinutesLT();
    3052:	0e 94 84 13 	call	0x2708	; 0x2708 <getMinutesLT()>
    3056:	18 2f       	mov	r17, r24
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    3058:	8e e1       	ldi	r24, 0x1E	; 30
    305a:	93 e0       	ldi	r25, 0x03	; 3
    305c:	64 e5       	ldi	r22, 0x54	; 84
    305e:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    3062:	8e e1       	ldi	r24, 0x1E	; 30
    3064:	93 e0       	ldi	r25, 0x03	; 3
    3066:	6e 2d       	mov	r22, r14
    3068:	4a e0       	ldi	r20, 0x0A	; 10
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    3070:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    3074:	8e e1       	ldi	r24, 0x1E	; 30
    3076:	93 e0       	ldi	r25, 0x03	; 3
    3078:	61 2f       	mov	r22, r17
    307a:	4a e0       	ldi	r20, 0x0A	; 10
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    3082:	ff 24       	eor	r15, r15

  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    3084:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    3088:	8f 2d       	mov	r24, r15
    308a:	0e 94 75 14 	call	0x28ea	; 0x28ea <getSimpleScheduleOn(unsigned char)>
    308e:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    3090:	85 e0       	ldi	r24, 0x05	; 5
    3092:	e0 3a       	cpi	r30, 0xA0	; 160
    3094:	f8 07       	cpc	r31, r24
    3096:	28 f0       	brcs	.+10     	; 0x30a2 <serialStatusReport()+0x100>
    3098:	00 e0       	ldi	r16, 0x00	; 0
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	cf ef       	ldi	r28, 0xFF	; 255
    309e:	d0 e0       	ldi	r29, 0x00	; 0
    30a0:	0c c0       	rjmp	.+24     	; 0x30ba <serialStatusReport()+0x118>
    30a2:	cf 01       	movw	r24, r30
    30a4:	6c e3       	ldi	r22, 0x3C	; 60
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    30ac:	eb 01       	movw	r28, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    30ae:	cf 01       	movw	r24, r30
    30b0:	6c e3       	ldi	r22, 0x3C	; 60
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    30b8:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    30ba:	8e e1       	ldi	r24, 0x1E	; 30
    30bc:	93 e0       	ldi	r25, 0x03	; 3
    30be:	67 e5       	ldi	r22, 0x57	; 87
    30c0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    30c4:	8e e1       	ldi	r24, 0x1E	; 30
    30c6:	93 e0       	ldi	r25, 0x03	; 3
    30c8:	be 01       	movw	r22, r28
    30ca:	4a e0       	ldi	r20, 0x0A	; 10
    30cc:	50 e0       	ldi	r21, 0x00	; 0
    30ce:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
    30d2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    30d6:	8e e1       	ldi	r24, 0x1E	; 30
    30d8:	93 e0       	ldi	r25, 0x03	; 3
    30da:	b8 01       	movw	r22, r16
    30dc:	4a e0       	ldi	r20, 0x0A	; 10
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
    Serial_print_space();
    30e4:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    30e8:	8f 2d       	mov	r24, r15
    30ea:	0e 94 ba 14 	call	0x2974	; 0x2974 <getSimpleScheduleOff(unsigned char)>
    30ee:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    30f0:	85 e0       	ldi	r24, 0x05	; 5
    30f2:	e0 3a       	cpi	r30, 0xA0	; 160
    30f4:	f8 07       	cpc	r31, r24
    30f6:	28 f0       	brcs	.+10     	; 0x3102 <serialStatusReport()+0x160>
    30f8:	00 e0       	ldi	r16, 0x00	; 0
    30fa:	10 e0       	ldi	r17, 0x00	; 0
    30fc:	cf ef       	ldi	r28, 0xFF	; 255
    30fe:	d0 e0       	ldi	r29, 0x00	; 0
    3100:	0c c0       	rjmp	.+24     	; 0x311a <serialStatusReport()+0x178>
    3102:	cf 01       	movw	r24, r30
    3104:	6c e3       	ldi	r22, 0x3C	; 60
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    310c:	eb 01       	movw	r28, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    310e:	cf 01       	movw	r24, r30
    3110:	6c e3       	ldi	r22, 0x3C	; 60
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__udivmodhi4>
    3118:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    311a:	8e e1       	ldi	r24, 0x1E	; 30
    311c:	93 e0       	ldi	r25, 0x03	; 3
    311e:	66 e4       	ldi	r22, 0x46	; 70
    3120:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    3124:	8e e1       	ldi	r24, 0x1E	; 30
    3126:	93 e0       	ldi	r25, 0x03	; 3
    3128:	be 01       	movw	r22, r28
    312a:	4a e0       	ldi	r20, 0x0A	; 10
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
    3132:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    3136:	8e e1       	ldi	r24, 0x1E	; 30
    3138:	93 e0       	ldi	r25, 0x03	; 3
    313a:	b8 01       	movw	r22, r16
    313c:	4a e0       	ldi	r20, 0x0A	; 10
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);

  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    3144:	f3 94       	inc	r15
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	f8 16       	cp	r15, r24
    314a:	09 f0       	breq	.+2      	; 0x314e <serialStatusReport()+0x1ac>
    314c:	9b cf       	rjmp	.-202    	; 0x3084 <serialStatusReport()+0xe2>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate at least one schedule should be on now.
    314e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <isAnyScheduleOnWARMNow()>
    3152:	88 23       	and	r24, r24
    3154:	29 f0       	breq	.+10     	; 0x3160 <serialStatusReport()+0x1be>
    3156:	8e e1       	ldi	r24, 0x1E	; 30
    3158:	93 e0       	ldi	r25, 0x03	; 3
    315a:	6a e2       	ldi	r22, 0x2A	; 42
    315c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>

#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    3160:	8e e1       	ldi	r24, 0x1E	; 30
    3162:	93 e0       	ldi	r25, 0x03	; 3
    3164:	6b e3       	ldi	r22, 0x3B	; 59
    3166:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    316a:	8e e1       	ldi	r24, 0x1E	; 30
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	63 e5       	ldi	r22, 0x53	; 83
    3170:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  Serial.print(getTargetTempC());
    3174:	0e 94 34 04 	call	0x868	; 0x868 <getTargetTempC()>
    3178:	68 2f       	mov	r22, r24
    317a:	8e e1       	ldi	r24, 0x1E	; 30
    317c:	93 e0       	ldi	r25, 0x03	; 3
    317e:	4a e0       	ldi	r20, 0x0A	; 10
    3180:	50 e0       	ldi	r21, 0x00	; 0
    3182:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
  Serial_print_space();
    3186:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    318a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <getFROSTTargetC()>
    318e:	68 2f       	mov	r22, r24
    3190:	8e e1       	ldi	r24, 0x1E	; 30
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	4a e0       	ldi	r20, 0x0A	; 10
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
  Serial_print_space();
    319c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    31a0:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
    31a4:	68 2f       	mov	r22, r24
    31a6:	8e e1       	ldi	r24, 0x1E	; 30
    31a8:	93 e0       	ldi	r25, 0x03	; 3
    31aa:	4a e0       	ldi	r20, 0x0A	; 10
    31ac:	50 e0       	ldi	r21, 0x00	; 0
    31ae:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
  Serial_print_space();
    31b2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
  // Show bias.
  Serial.print(hasEcoBias() ? 'e' : 'c'); // Show eco/comfort bias.
    31b6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <hasEcoBias()>
    31ba:	88 23       	and	r24, r24
    31bc:	11 f4       	brne	.+4      	; 0x31c2 <serialStatusReport()+0x220>
    31be:	63 e6       	ldi	r22, 0x63	; 99
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <serialStatusReport()+0x222>
    31c2:	65 e6       	ldi	r22, 0x65	; 101
    31c4:	8e e1       	ldi	r24, 0x1E	; 30
    31c6:	93 e0       	ldi	r25, 0x03	; 3
    31c8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  // Show warming predictions.
  Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f');
    31cc:	8e 2d       	mov	r24, r14
    31ce:	0e 94 20 05 	call	0xa40	; 0xa40 <shouldBeWarmedAtHour(unsigned char)>
    31d2:	88 23       	and	r24, r24
    31d4:	11 f4       	brne	.+4      	; 0x31da <serialStatusReport()+0x238>
    31d6:	66 e6       	ldi	r22, 0x66	; 102
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <serialStatusReport()+0x23a>
    31da:	67 e7       	ldi	r22, 0x77	; 119
    31dc:	8e e1       	ldi	r24, 0x1E	; 30
    31de:	93 e0       	ldi	r25, 0x03	; 3
    31e0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  Serial.print(shouldBeWarmedAtHour(hh < 23 ? (hh+1) : 0) ? 'w' : 'f');
    31e4:	86 e1       	ldi	r24, 0x16	; 22
    31e6:	8e 15       	cp	r24, r14
    31e8:	10 f4       	brcc	.+4      	; 0x31ee <serialStatusReport()+0x24c>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <serialStatusReport()+0x250>
    31ee:	8e 2d       	mov	r24, r14
    31f0:	8f 5f       	subi	r24, 0xFF	; 255
    31f2:	0e 94 20 05 	call	0xa40	; 0xa40 <shouldBeWarmedAtHour(unsigned char)>
    31f6:	88 23       	and	r24, r24
    31f8:	11 f4       	brne	.+4      	; 0x31fe <serialStatusReport()+0x25c>
    31fa:	66 e6       	ldi	r22, 0x66	; 102
    31fc:	01 c0       	rjmp	.+2      	; 0x3200 <serialStatusReport()+0x25e>
    31fe:	67 e7       	ldi	r22, 0x77	; 119
    3200:	8e e1       	ldi	r24, 0x1E	; 30
    3202:	93 e0       	ldi	r25, 0x03	; 3
    3204:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  // Show occupancy if known.
  if(isLikelyOccupied()) { Serial.print(isLikelyRecentlyOccupied() ? 'O' : 'o'); } // Show room occupied and how recently.
    3208:	0e 94 41 04 	call	0x882	; 0x882 <isLikelyOccupied()>
    320c:	88 23       	and	r24, r24
    320e:	59 f0       	breq	.+22     	; 0x3226 <serialStatusReport()+0x284>
    3210:	0e 94 46 04 	call	0x88c	; 0x88c <isLikelyRecentlyOccupied()>
    3214:	88 23       	and	r24, r24
    3216:	11 f4       	brne	.+4      	; 0x321c <serialStatusReport()+0x27a>
    3218:	6f e6       	ldi	r22, 0x6F	; 111
    321a:	01 c0       	rjmp	.+2      	; 0x321e <serialStatusReport()+0x27c>
    321c:	6f e4       	ldi	r22, 0x4F	; 79
    321e:	8e e1       	ldi	r24, 0x1E	; 30
    3220:	93 e0       	ldi	r25, 0x03	; 3
    3222:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
#endif

#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    3226:	0e 94 37 04 	call	0x86e	; 0x86e <getMinBoilerOnMinutes()>
    322a:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    322c:	88 23       	and	r24, r24
    322e:	89 f0       	breq	.+34     	; 0x3252 <serialStatusReport()+0x2b0>
    {
    Serial.print(';'); // Terminate previous section.
    3230:	8e e1       	ldi	r24, 0x1E	; 30
    3232:	93 e0       	ldi	r25, 0x03	; 3
    3234:	6b e3       	ldi	r22, 0x3B	; 59
    3236:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    323a:	8e e1       	ldi	r24, 0x1E	; 30
    323c:	93 e0       	ldi	r25, 0x03	; 3
    323e:	63 e4       	ldi	r22, 0x43	; 67
    3240:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    3244:	8e e1       	ldi	r24, 0x1E	; 30
    3246:	93 e0       	ldi	r25, 0x03	; 3
    3248:	61 2f       	mov	r22, r17
    324a:	4a e0       	ldi	r20, 0x0A	; 10
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    }
#endif

#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    3252:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3256:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    3258:	8f 3f       	cpi	r24, 0xFF	; 255
    325a:	41 f1       	breq	.+80     	; 0x32ac <serialStatusReport()+0x30a>
    {
    Serial.print(';'); // Terminate previous section.
    325c:	8e e1       	ldi	r24, 0x1E	; 30
    325e:	93 e0       	ldi	r25, 0x03	; 3
    3260:	6b e3       	ldi	r22, 0x3B	; 59
    3262:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    Serial.print(F("HC"));
    3266:	8e e1       	ldi	r24, 0x1E	; 30
    3268:	93 e0       	ldi	r25, 0x03	; 3
    326a:	6d ea       	ldi	r22, 0xAD	; 173
    326c:	73 e0       	ldi	r23, 0x03	; 3
    326e:	0e 94 2d 29 	call	0x525a	; 0x525a <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    3272:	8e e1       	ldi	r24, 0x1E	; 30
    3274:	93 e0       	ldi	r25, 0x03	; 3
    3276:	61 2f       	mov	r22, r17
    3278:	4a e0       	ldi	r20, 0x0A	; 10
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    Serial_print_space();
    3280:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    3284:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3288:	68 2f       	mov	r22, r24
    328a:	8e e1       	ldi	r24, 0x1E	; 30
    328c:	93 e0       	ldi	r25, 0x03	; 3
    328e:	4a e0       	ldi	r20, 0x0A	; 10
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    3296:	0e 94 ae 08 	call	0x115c	; 0x115c <isSyncedWithFHT8V()>
    329a:	88 23       	and	r24, r24
    329c:	39 f4       	brne	.+14     	; 0x32ac <serialStatusReport()+0x30a>
      {
      Serial_print_space();
    329e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    32a2:	8e e1       	ldi	r24, 0x1E	; 30
    32a4:	93 e0       	ldi	r25, 0x03	; 3
    32a6:	63 e7       	ldi	r22, 0x73	; 115
    32a8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
      }
    }
#endif

  // Print optional min-valve-percentage open section if not at default value.
  const uint8_t minValvePcOpen = getMinValvePcReallyOpen();
    32ac:	0e 94 b4 04 	call	0x968	; 0x968 <getMinValvePcReallyOpen()>
    32b0:	18 2f       	mov	r17, r24
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen)
    32b2:	8a 30       	cpi	r24, 0x0A	; 10
    32b4:	89 f0       	breq	.+34     	; 0x32d8 <serialStatusReport()+0x336>
    {
    Serial.print(';'); // Terminate previous section.
    32b6:	8e e1       	ldi	r24, 0x1E	; 30
    32b8:	93 e0       	ldi	r25, 0x03	; 3
    32ba:	6b e3       	ldi	r22, 0x3B	; 59
    32bc:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    Serial.print('O');
    32c0:	8e e1       	ldi	r24, 0x1E	; 30
    32c2:	93 e0       	ldi	r25, 0x03	; 3
    32c4:	6f e4       	ldi	r22, 0x4F	; 79
    32c6:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    Serial.print(minValvePcOpen);
    32ca:	8e e1       	ldi	r24, 0x1E	; 30
    32cc:	93 e0       	ldi	r25, 0x03	; 3
    32ce:	61 2f       	mov	r22, r17
    32d0:	4a e0       	ldi	r20, 0x0A	; 10
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    }

  // Terminate line.
  Serial.println();
    32d8:	8e e1       	ldi	r24, 0x1E	; 30
    32da:	93 e0       	ldi	r25, 0x03	; 3
    32dc:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    32e0:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    32e4:	dd 20       	and	r13, r13
    32e6:	11 f0       	breq	.+4      	; 0x32ec <serialStatusReport()+0x34a>
    32e8:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  }
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	df 90       	pop	r13
    32fa:	08 95       	ret

000032fc <pollCLI(unsigned char)>:
#endif
// Used to poll user side for CLI input until specified sub-cycle time.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	00 d0       	rcall	.+0      	; 0x3310 <pollCLI(unsigned char)+0x14>
    3310:	00 d0       	rcall	.+0      	; 0x3312 <pollCLI(unsigned char)+0x16>
    3312:	00 d0       	rcall	.+0      	; 0x3314 <pollCLI(unsigned char)+0x18>
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    3318:	83 30       	cpi	r24, 0x03	; 3
    331a:	10 f4       	brcc	.+4      	; 0x3320 <pollCLI(unsigned char)+0x24>
    331c:	00 e0       	ldi	r16, 0x00	; 0
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <pollCLI(unsigned char)+0x28>
    3320:	08 2f       	mov	r16, r24
    3322:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    3324:	80 91 b2 00 	lds	r24, 0x00B2
    3328:	80 17       	cp	r24, r16
    332a:	08 f0       	brcs	.+2      	; 0x332e <pollCLI(unsigned char)+0x32>
    332c:	ad c2       	rjmp	.+1370   	; 0x3888 <pollCLI(unsigned char)+0x58c>

  const bool neededWaking = powerUpSerialIfDisabled();
    332e:	0e 94 a5 10 	call	0x214a	; 0x214a <powerUpSerialIfDisabled()>
    3332:	b8 2e       	mov	r11, r24
    3334:	04 c0       	rjmp	.+8      	; 0x333e <pollCLI(unsigned char)+0x42>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    3336:	8e e1       	ldi	r24, 0x1E	; 30
    3338:	93 e0       	ldi	r25, 0x03	; 3
    333a:	0e 94 25 28 	call	0x504a	; 0x504a <HardwareSerial::read()>
    333e:	8e e1       	ldi	r24, 0x1E	; 30
    3340:	93 e0       	ldi	r25, 0x03	; 3
    3342:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <HardwareSerial::available()>
    3346:	18 16       	cp	r1, r24
    3348:	19 06       	cpc	r1, r25
    334a:	ac f3       	brlt	.-22     	; 0x3336 <pollCLI(unsigned char)+0x3a>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  Serial.println();
    334c:	8e e1       	ldi	r24, 0x1E	; 30
    334e:	93 e0       	ldi	r25, 0x03	; 3
    3350:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
  Serial.print(CLIPromptChar);
    3354:	8e e1       	ldi	r24, 0x1E	; 30
    3356:	93 e0       	ldi	r25, 0x03	; 3
    3358:	6e e3       	ldi	r22, 0x3E	; 62
    335a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    335e:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>
    3362:	10 e0       	ldi	r17, 0x00	; 0
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    3364:	8e e1       	ldi	r24, 0x1E	; 30
    3366:	93 e0       	ldi	r25, 0x03	; 3
    3368:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <HardwareSerial::available()>
    336c:	18 16       	cp	r1, r24
    336e:	19 06       	cpc	r1, r25
    3370:	8c f4       	brge	.+34     	; 0x3394 <pollCLI(unsigned char)+0x98>
      {
      const int ic = Serial.read();
    3372:	8e e1       	ldi	r24, 0x1E	; 30
    3374:	93 e0       	ldi	r25, 0x03	; 3
    3376:	0e 94 25 28 	call	0x504a	; 0x504a <HardwareSerial::read()>
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    337a:	8d 30       	cpi	r24, 0x0D	; 13
    337c:	91 05       	cpc	r25, r1
    337e:	c1 f0       	breq	.+48     	; 0x33b0 <pollCLI(unsigned char)+0xb4>
    3380:	8a 30       	cpi	r24, 0x0A	; 10
    3382:	91 05       	cpc	r25, r1
    3384:	a9 f0       	breq	.+42     	; 0x33b0 <pollCLI(unsigned char)+0xb4>
      buf[n++] = (char) ic;
    3386:	e1 2f       	mov	r30, r17
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	e1 54       	subi	r30, 0x41	; 65
    338c:	fe 4f       	sbci	r31, 0xFE	; 254
    338e:	80 83       	st	Z, r24
    3390:	1f 5f       	subi	r17, 0xFF	; 255
    3392:	0b c0       	rjmp	.+22     	; 0x33aa <pollCLI(unsigned char)+0xae>
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    3394:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    3398:	80 17       	cp	r24, r16
    339a:	08 f0       	brcs	.+2      	; 0x339e <pollCLI(unsigned char)+0xa2>
    339c:	5f c2       	rjmp	.+1214   	; 0x385c <pollCLI(unsigned char)+0x560>
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <idleCPU(signed char)>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    33aa:	19 30       	cpi	r17, 0x09	; 9
    33ac:	d8 f2       	brcs	.-74     	; 0x3364 <pollCLI(unsigned char)+0x68>
    33ae:	03 c0       	rjmp	.+6      	; 0x33b6 <pollCLI(unsigned char)+0xba>
#else
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
#endif
    }

  if(n > 0)
    33b0:	11 23       	and	r17, r17
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <pollCLI(unsigned char)+0xba>
    33b4:	53 c2       	rjmp	.+1190   	; 0x385c <pollCLI(unsigned char)+0x560>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    33b6:	80 91 bf 01 	lds	r24, 0x01BF
    33ba:	8f 53       	subi	r24, 0x3F	; 63
    33bc:	8c 33       	cpi	r24, 0x3C	; 60
    33be:	08 f0       	brcs	.+2      	; 0x33c2 <pollCLI(unsigned char)+0xc6>
    33c0:	43 c0       	rjmp	.+134    	; 0x3448 <pollCLI(unsigned char)+0x14c>
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	80 93 04 01 	sts	0x0104, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the command line.
    buf[n] = '\0';
    33c8:	e1 2f       	mov	r30, r17
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	e1 54       	subi	r30, 0x41	; 65
    33ce:	fe 4f       	sbci	r31, 0xFE	; 254
    33d0:	10 82       	st	Z, r1

    // Force to upper-case and echo the line received.
    strupr(buf);
    33d2:	8f eb       	ldi	r24, 0xBF	; 191
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	0e 94 bf 03 	call	0x77e	; 0x77e <strupr>
    Serial.println(buf);
    33da:	8e e1       	ldi	r24, 0x1E	; 30
    33dc:	93 e0       	ldi	r25, 0x03	; 3
    33de:	6f eb       	ldi	r22, 0xBF	; 191
    33e0:	71 e0       	ldi	r23, 0x01	; 1
    33e2:	0e 94 94 2a 	call	0x5528	; 0x5528 <Print::println(char const*)>

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    33e6:	80 91 bf 01 	lds	r24, 0x01BF
    33ea:	80 35       	cpi	r24, 0x50	; 80
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <pollCLI(unsigned char)+0xf4>
    33ee:	41 c1       	rjmp	.+642    	; 0x3672 <pollCLI(unsigned char)+0x376>
    33f0:	81 35       	cpi	r24, 0x51	; 81
    33f2:	b4 f4       	brge	.+44     	; 0x3420 <pollCLI(unsigned char)+0x124>
    33f4:	86 34       	cpi	r24, 0x46	; 70
    33f6:	09 f4       	brne	.+2      	; 0x33fa <pollCLI(unsigned char)+0xfe>
    33f8:	d3 c0       	rjmp	.+422    	; 0x35a0 <pollCLI(unsigned char)+0x2a4>
    33fa:	87 34       	cpi	r24, 0x47	; 71
    33fc:	44 f4       	brge	.+16     	; 0x340e <pollCLI(unsigned char)+0x112>
    33fe:	84 34       	cpi	r24, 0x44	; 68
    3400:	09 f4       	brne	.+2      	; 0x3404 <pollCLI(unsigned char)+0x108>
    3402:	65 c0       	rjmp	.+202    	; 0x34ce <pollCLI(unsigned char)+0x1d2>
    3404:	85 34       	cpi	r24, 0x45	; 69
    3406:	e4 f5       	brge	.+120    	; 0x3480 <pollCLI(unsigned char)+0x184>
    3408:	83 34       	cpi	r24, 0x43	; 67
    340a:	19 f5       	brne	.+70     	; 0x3452 <pollCLI(unsigned char)+0x156>
    340c:	25 c0       	rjmp	.+74     	; 0x3458 <pollCLI(unsigned char)+0x15c>
    340e:	8c 34       	cpi	r24, 0x4C	; 76
    3410:	09 f4       	brne	.+2      	; 0x3414 <pollCLI(unsigned char)+0x118>
    3412:	07 c1       	rjmp	.+526    	; 0x3622 <pollCLI(unsigned char)+0x326>
    3414:	8f 34       	cpi	r24, 0x4F	; 79
    3416:	09 f4       	brne	.+2      	; 0x341a <pollCLI(unsigned char)+0x11e>
    3418:	18 c1       	rjmp	.+560    	; 0x364a <pollCLI(unsigned char)+0x34e>
    341a:	88 34       	cpi	r24, 0x48	; 72
    341c:	d1 f4       	brne	.+52     	; 0x3452 <pollCLI(unsigned char)+0x156>
    341e:	c5 c0       	rjmp	.+394    	; 0x35aa <pollCLI(unsigned char)+0x2ae>
    3420:	84 35       	cpi	r24, 0x54	; 84
    3422:	09 f4       	brne	.+2      	; 0x3426 <pollCLI(unsigned char)+0x12a>
    3424:	b0 c1       	rjmp	.+864    	; 0x3786 <pollCLI(unsigned char)+0x48a>
    3426:	85 35       	cpi	r24, 0x55	; 85
    3428:	34 f4       	brge	.+12     	; 0x3436 <pollCLI(unsigned char)+0x13a>
    342a:	82 35       	cpi	r24, 0x52	; 82
    342c:	61 f1       	breq	.+88     	; 0x3486 <pollCLI(unsigned char)+0x18a>
    342e:	83 35       	cpi	r24, 0x53	; 83
    3430:	0c f0       	brlt	.+2      	; 0x3434 <pollCLI(unsigned char)+0x138>
    3432:	69 c1       	rjmp	.+722    	; 0x3706 <pollCLI(unsigned char)+0x40a>
    3434:	61 c1       	rjmp	.+706    	; 0x36f8 <pollCLI(unsigned char)+0x3fc>
    3436:	87 35       	cpi	r24, 0x57	; 87
    3438:	09 f4       	brne	.+2      	; 0x343c <pollCLI(unsigned char)+0x140>
    343a:	d6 c1       	rjmp	.+940    	; 0x37e8 <pollCLI(unsigned char)+0x4ec>
    343c:	8a 35       	cpi	r24, 0x5A	; 90
    343e:	09 f4       	brne	.+2      	; 0x3442 <pollCLI(unsigned char)+0x146>
    3440:	db c1       	rjmp	.+950    	; 0x37f8 <pollCLI(unsigned char)+0x4fc>
    3442:	86 35       	cpi	r24, 0x56	; 86
    3444:	31 f4       	brne	.+12     	; 0x3452 <pollCLI(unsigned char)+0x156>
    3446:	cd c1       	rjmp	.+922    	; 0x37e2 <pollCLI(unsigned char)+0x4e6>
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    3448:	8e e1       	ldi	r24, 0x1E	; 30
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	61 ec       	ldi	r22, 0xC1	; 193
    344e:	71 e0       	ldi	r23, 0x01	; 1
    3450:	02 c2       	rjmp	.+1028   	; 0x3856 <pollCLI(unsigned char)+0x55a>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(); showStatus = false; break; }
    3452:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <dumpCLIUsage()>
    3456:	fb c1       	rjmp	.+1014   	; 0x384e <pollCLI(unsigned char)+0x552>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3458:	13 30       	cpi	r17, 0x03	; 3
    345a:	08 f4       	brcc	.+2      	; 0x345e <pollCLI(unsigned char)+0x162>
    345c:	12 c2       	rjmp	.+1060   	; 0x3882 <pollCLI(unsigned char)+0x586>
    345e:	81 ec       	ldi	r24, 0xC1	; 193
    3460:	91 e0       	ldi	r25, 0x01	; 1
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	71 e0       	ldi	r23, 0x01	; 1
    3466:	ae 01       	movw	r20, r28
    3468:	4f 5f       	subi	r20, 0xFF	; 255
    346a:	5f 4f       	sbci	r21, 0xFF	; 255
    346c:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    3470:	00 97       	sbiw	r24, 0x00	; 0
    3472:	09 f4       	brne	.+2      	; 0x3476 <pollCLI(unsigned char)+0x17a>
    3474:	06 c2       	rjmp	.+1036   	; 0x3882 <pollCLI(unsigned char)+0x586>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    3476:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
          setMinBoilerOnMinutes(m);
    347a:	0e 94 ef 04 	call	0x9de	; 0x9de <setMinBoilerOnMinutes(unsigned char)>
    347e:	01 c2       	rjmp	.+1026   	; 0x3882 <pollCLI(unsigned char)+0x586>
        break;
        }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLITimeoutM = 0; break; }
    3480:	10 92 04 01 	sts	0x0104, r1
    3484:	fe c1       	rjmp	.+1020   	; 0x3882 <pollCLI(unsigned char)+0x586>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3486:	13 30       	cpi	r17, 0x03	; 3
    3488:	08 f4       	brcc	.+2      	; 0x348c <pollCLI(unsigned char)+0x190>
    348a:	fb c1       	rjmp	.+1014   	; 0x3882 <pollCLI(unsigned char)+0x586>
    348c:	81 ec       	ldi	r24, 0xC1	; 193
    348e:	91 e0       	ldi	r25, 0x01	; 1
    3490:	60 e0       	ldi	r22, 0x00	; 0
    3492:	71 e0       	ldi	r23, 0x01	; 1
    3494:	ae 01       	movw	r20, r28
    3496:	4f 5f       	subi	r20, 0xFF	; 255
    3498:	5f 4f       	sbci	r21, 0xFF	; 255
    349a:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <pollCLI(unsigned char)+0x1a8>
    34a2:	ef c1       	rjmp	.+990    	; 0x3882 <pollCLI(unsigned char)+0x586>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    34a4:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    34a8:	08 2f       	mov	r16, r24
    34aa:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    34ac:	81 2f       	mov	r24, r17
    34ae:	60 2f       	mov	r22, r16
    34b0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <getByHourStat(unsigned char, unsigned char)>
    34b4:	68 2f       	mov	r22, r24
    34b6:	8e e1       	ldi	r24, 0x1E	; 30
    34b8:	93 e0       	ldi	r25, 0x03	; 3
    34ba:	4a e0       	ldi	r20, 0x0A	; 10
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
    34c2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    34c6:	1f 5f       	subi	r17, 0xFF	; 255
    34c8:	18 31       	cpi	r17, 0x18	; 24
    34ca:	81 f7       	brne	.-32     	; 0x34ac <pollCLI(unsigned char)+0x1b0>
    34cc:	57 c1       	rjmp	.+686    	; 0x377c <pollCLI(unsigned char)+0x480>
      case 'D':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    34ce:	13 30       	cpi	r17, 0x03	; 3
    34d0:	08 f4       	brcc	.+2      	; 0x34d4 <pollCLI(unsigned char)+0x1d8>
    34d2:	bd c1       	rjmp	.+890    	; 0x384e <pollCLI(unsigned char)+0x552>
    34d4:	81 ec       	ldi	r24, 0xC1	; 193
    34d6:	91 e0       	ldi	r25, 0x01	; 1
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	71 e0       	ldi	r23, 0x01	; 1
    34dc:	ae 01       	movw	r20, r28
    34de:	4f 5f       	subi	r20, 0xFF	; 255
    34e0:	5f 4f       	sbci	r21, 0xFF	; 255
    34e2:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	09 f4       	brne	.+2      	; 0x34ec <pollCLI(unsigned char)+0x1f0>
    34ea:	b1 c1       	rjmp	.+866    	; 0x384e <pollCLI(unsigned char)+0x552>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    34ec:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    34f0:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    34f2:	0e 94 90 13 	call	0x2720	; 0x2720 <getHoursLT()>
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
    34f6:	88 23       	and	r24, r24
    34f8:	19 f4       	brne	.+6      	; 0x3500 <pollCLI(unsigned char)+0x204>
    34fa:	f7 e1       	ldi	r31, 0x17	; 23
    34fc:	ff 2e       	mov	r15, r31
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <pollCLI(unsigned char)+0x208>
    3500:	f8 2e       	mov	r15, r24
    3502:	fa 94       	dec	r15
    3504:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    3506:	81 2f       	mov	r24, r17
    3508:	60 2f       	mov	r22, r16
    350a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <getByHourStat(unsigned char, unsigned char)>
    350e:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    3510:	8f 3f       	cpi	r24, 0xFF	; 255
    3512:	21 f4       	brne	.+8      	; 0x351c <pollCLI(unsigned char)+0x220>
    3514:	8e e1       	ldi	r24, 0x1E	; 30
    3516:	93 e0       	ldi	r25, 0x03	; 3
    3518:	6d e2       	ldi	r22, 0x2D	; 45
    351a:	1b c0       	rjmp	.+54     	; 0x3552 <pollCLI(unsigned char)+0x256>
            // ...else print more human-friendly version of stat.
            else switch(setN) // Relationship between stats set and type should probably be centralised to avoid getting out of sync with usage.
    351c:	04 30       	cpi	r16, 0x04	; 4
    351e:	18 f4       	brcc	.+6      	; 0x3526 <pollCLI(unsigned char)+0x22a>
    3520:	02 30       	cpi	r16, 0x02	; 2
    3522:	d0 f4       	brcc	.+52     	; 0x3558 <pollCLI(unsigned char)+0x25c>
    3524:	03 c0       	rjmp	.+6      	; 0x352c <pollCLI(unsigned char)+0x230>
    3526:	04 30       	cpi	r16, 0x04	; 4
    3528:	49 f5       	brne	.+82     	; 0x357c <pollCLI(unsigned char)+0x280>
    352a:	22 c0       	rjmp	.+68     	; 0x3570 <pollCLI(unsigned char)+0x274>
              {
              case 0: case 1: { Serial.print((expandTempC16(statRaw)+8) >> 4); Serial.print('C'); break; } // Uncompanded temperature, rounded.
    352c:	0e 94 91 04 	call	0x922	; 0x922 <expandTempC16(unsigned char)>
    3530:	bc 01       	movw	r22, r24
    3532:	68 5f       	subi	r22, 0xF8	; 248
    3534:	7f 4f       	sbci	r23, 0xFF	; 255
    3536:	e4 e0       	ldi	r30, 0x04	; 4
    3538:	75 95       	asr	r23
    353a:	67 95       	ror	r22
    353c:	ea 95       	dec	r30
    353e:	e1 f7       	brne	.-8      	; 0x3538 <pollCLI(unsigned char)+0x23c>
    3540:	8e e1       	ldi	r24, 0x1E	; 30
    3542:	93 e0       	ldi	r25, 0x03	; 3
    3544:	4a e0       	ldi	r20, 0x0A	; 10
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
    354c:	8e e1       	ldi	r24, 0x1E	; 30
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	63 e4       	ldi	r22, 0x43	; 67
    3552:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
    3556:	12 c0       	rjmp	.+36     	; 0x357c <pollCLI(unsigned char)+0x280>
              case 2: case 3: { Serial.print(((int)statRaw) << 2); break; } // Uncompressed ambient light level.
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	66 0f       	add	r22, r22
    355c:	77 1f       	adc	r23, r23
    355e:	66 0f       	add	r22, r22
    3560:	77 1f       	adc	r23, r23
    3562:	8e e1       	ldi	r24, 0x1E	; 30
    3564:	93 e0       	ldi	r25, 0x03	; 3
    3566:	4a e0       	ldi	r20, 0x0A	; 10
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <Print::print(int, int)>
    356e:	06 c0       	rjmp	.+12     	; 0x357c <pollCLI(unsigned char)+0x280>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
    3570:	8e e1       	ldi	r24, 0x1E	; 30
    3572:	93 e0       	ldi	r25, 0x03	; 3
    3574:	40 e1       	ldi	r20, 0x10	; 16
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
    357c:	1f 15       	cp	r17, r15
    357e:	29 f4       	brne	.+10     	; 0x358a <pollCLI(unsigned char)+0x28e>
    3580:	8e e1       	ldi	r24, 0x1E	; 30
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	6c e3       	ldi	r22, 0x3C	; 60
    3586:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
            Serial_print_space();
    358a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <Serial_print_space()>
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          const uint8_t thisHH = getHoursLT();
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          for(uint8_t hh = 0; hh < 24; ++hh)
    358e:	1f 5f       	subi	r17, 0xFF	; 255
    3590:	18 31       	cpi	r17, 0x18	; 24
    3592:	09 f0       	breq	.+2      	; 0x3596 <pollCLI(unsigned char)+0x29a>
    3594:	b8 cf       	rjmp	.-144    	; 0x3506 <pollCLI(unsigned char)+0x20a>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
            Serial_print_space();
            }
          Serial.println();
    3596:	8e e1       	ldi	r24, 0x1E	; 30
    3598:	93 e0       	ldi	r25, 0x03	; 3
    359a:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
    359e:	57 c1       	rjmp	.+686    	; 0x384e <pollCLI(unsigned char)+0x552>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    35a0:	10 92 ca 01 	sts	0x01CA, r1
  isWarmModeDebounced = warm;
    35a4:	10 92 c9 01 	sts	0x01C9, r1
    35a8:	24 c1       	rjmp	.+584    	; 0x37f2 <pollCLI(unsigned char)+0x4f6>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    35aa:	15 30       	cpi	r17, 0x05	; 5
    35ac:	08 f4       	brcc	.+2      	; 0x35b0 <pollCLI(unsigned char)+0x2b4>
    35ae:	61 c1       	rjmp	.+706    	; 0x3872 <pollCLI(unsigned char)+0x576>
    35b0:	81 ec       	ldi	r24, 0xC1	; 193
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	71 e0       	ldi	r23, 0x01	; 1
    35b8:	ae 01       	movw	r20, r28
    35ba:	4f 5f       	subi	r20, 0xFF	; 255
    35bc:	5f 4f       	sbci	r21, 0xFF	; 255
    35be:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    35c2:	7c 01       	movw	r14, r24
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	09 f4       	brne	.+2      	; 0x35ca <pollCLI(unsigned char)+0x2ce>
    35c8:	54 c1       	rjmp	.+680    	; 0x3872 <pollCLI(unsigned char)+0x576>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	71 e0       	ldi	r23, 0x01	; 1
    35d2:	ae 01       	movw	r20, r28
    35d4:	4f 5f       	subi	r20, 0xFF	; 255
    35d6:	5f 4f       	sbci	r21, 0xFF	; 255
    35d8:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    35dc:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    35de:	00 97       	sbiw	r24, 0x00	; 0
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <pollCLI(unsigned char)+0x2e8>
    35e2:	4f c1       	rjmp	.+670    	; 0x3882 <pollCLI(unsigned char)+0x586>
            {
            const int hc1 = atoi(tok1);
    35e4:	c7 01       	movw	r24, r14
    35e6:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    35ea:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    35ec:	c8 01       	movw	r24, r16
    35ee:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    35f2:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    35f4:	24 e6       	ldi	r18, 0x64	; 100
    35f6:	e2 16       	cp	r14, r18
    35f8:	f1 04       	cpc	r15, r1
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <pollCLI(unsigned char)+0x302>
    35fc:	ef c0       	rjmp	.+478    	; 0x37dc <pollCLI(unsigned char)+0x4e0>
    35fe:	97 fd       	sbrc	r25, 7
    3600:	ed c0       	rjmp	.+474    	; 0x37dc <pollCLI(unsigned char)+0x4e0>
    3602:	84 36       	cpi	r24, 0x64	; 100
    3604:	91 05       	cpc	r25, r1
    3606:	0c f0       	brlt	.+2      	; 0x360a <pollCLI(unsigned char)+0x30e>
    3608:	e9 c0       	rjmp	.+466    	; 0x37dc <pollCLI(unsigned char)+0x4e0>
            else
              {
              FHT8VSetHC1(hc1);
    360a:	8e 2d       	mov	r24, r14
    360c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    3610:	80 2f       	mov	r24, r16
    3612:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <FHT8VSetHC2(unsigned char)>
    3616:	02 c0       	rjmp	.+4      	; 0x361c <pollCLI(unsigned char)+0x320>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    3618:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    361c:	0e 94 ba 08 	call	0x1174	; 0x1174 <FHT8VSyncAndTXReset()>
    3620:	30 c1       	rjmp	.+608    	; 0x3882 <pollCLI(unsigned char)+0x586>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3622:	13 30       	cpi	r17, 0x03	; 3
    3624:	08 f4       	brcc	.+2      	; 0x3628 <pollCLI(unsigned char)+0x32c>
    3626:	28 c1       	rjmp	.+592    	; 0x3878 <pollCLI(unsigned char)+0x57c>
    3628:	81 ec       	ldi	r24, 0xC1	; 193
    362a:	91 e0       	ldi	r25, 0x01	; 1
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	71 e0       	ldi	r23, 0x01	; 1
    3630:	ae 01       	movw	r20, r28
    3632:	4f 5f       	subi	r20, 0xFF	; 255
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	09 f4       	brne	.+2      	; 0x3640 <pollCLI(unsigned char)+0x344>
    363e:	1c c1       	rjmp	.+568    	; 0x3878 <pollCLI(unsigned char)+0x57c>
          {
          s = atoi(tok1);
    3640:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    3644:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <handleLEARN(unsigned char)>
    3648:	1c c1       	rjmp	.+568    	; 0x3882 <pollCLI(unsigned char)+0x586>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    364a:	12 30       	cpi	r17, 0x02	; 2
    364c:	08 f4       	brcc	.+2      	; 0x3650 <pollCLI(unsigned char)+0x354>
    364e:	17 c1       	rjmp	.+558    	; 0x387e <pollCLI(unsigned char)+0x582>
    3650:	81 ec       	ldi	r24, 0xC1	; 193
    3652:	91 e0       	ldi	r25, 0x01	; 1
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	71 e0       	ldi	r23, 0x01	; 1
    3658:	ae 01       	movw	r20, r28
    365a:	4f 5f       	subi	r20, 0xFF	; 255
    365c:	5f 4f       	sbci	r21, 0xFF	; 255
    365e:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	09 f4       	brne	.+2      	; 0x3668 <pollCLI(unsigned char)+0x36c>
    3666:	0b c1       	rjmp	.+534    	; 0x387e <pollCLI(unsigned char)+0x582>
          { minPcOpen = (uint8_t) atoi(tok1); }
    3668:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
        setMinValvePcReallyOpen(minPcOpen);
    366c:	0e 94 df 04 	call	0x9be	; 0x9be <setMinValvePcReallyOpen(unsigned char)>
    3670:	08 c1       	rjmp	.+528    	; 0x3882 <pollCLI(unsigned char)+0x586>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3672:	15 30       	cpi	r17, 0x05	; 5
    3674:	08 f4       	brcc	.+2      	; 0x3678 <pollCLI(unsigned char)+0x37c>
    3676:	05 c1       	rjmp	.+522    	; 0x3882 <pollCLI(unsigned char)+0x586>
    3678:	81 ec       	ldi	r24, 0xC1	; 193
    367a:	91 e0       	ldi	r25, 0x01	; 1
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	71 e0       	ldi	r23, 0x01	; 1
    3680:	6e 01       	movw	r12, r28
    3682:	08 94       	sec
    3684:	c1 1c       	adc	r12, r1
    3686:	d1 1c       	adc	r13, r1
    3688:	a6 01       	movw	r20, r12
    368a:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    368e:	7c 01       	movw	r14, r24
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	09 f4       	brne	.+2      	; 0x3696 <pollCLI(unsigned char)+0x39a>
    3694:	f6 c0       	rjmp	.+492    	; 0x3882 <pollCLI(unsigned char)+0x586>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	71 e0       	ldi	r23, 0x01	; 1
    369e:	a6 01       	movw	r20, r12
    36a0:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    36a4:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	09 f4       	brne	.+2      	; 0x36ac <pollCLI(unsigned char)+0x3b0>
    36aa:	eb c0       	rjmp	.+470    	; 0x3882 <pollCLI(unsigned char)+0x586>
            {
            const int hh = atoi(tok1);
    36ac:	c7 01       	movw	r24, r14
    36ae:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    36b2:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    36b4:	c8 01       	movw	r24, r16
    36b6:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    36ba:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	71 e0       	ldi	r23, 0x01	; 1
    36c4:	a6 01       	movw	r20, r12
    36c6:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
            if(NULL != tok3)
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	19 f4       	brne	.+6      	; 0x36d4 <pollCLI(unsigned char)+0x3d8>
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	03 c0       	rjmp	.+6      	; 0x36da <pollCLI(unsigned char)+0x3de>
              {
              s = atoi(tok3);
    36d4:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    36d8:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    36da:	8c e3       	ldi	r24, 0x3C	; 60
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	9c 01       	movw	r18, r24
    36e0:	e2 9e       	mul	r14, r18
    36e2:	c0 01       	movw	r24, r0
    36e4:	e3 9e       	mul	r14, r19
    36e6:	90 0d       	add	r25, r0
    36e8:	f2 9e       	mul	r15, r18
    36ea:	90 0d       	add	r25, r0
    36ec:	11 24       	eor	r1, r1
    36ee:	80 0f       	add	r24, r16
    36f0:	91 1f       	adc	r25, r17
    36f2:	0e 94 a1 14 	call	0x2942	; 0x2942 <setSimpleSchedule(unsigned int, unsigned char)>
    36f6:	6f c0       	rjmp	.+222    	; 0x37d6 <pollCLI(unsigned char)+0x4da>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	80 93 ca 01 	sts	0x01CA, r24
    36fe:	8e e1       	ldi	r24, 0x1E	; 30
    3700:	80 93 cb 01 	sts	0x01CB, r24
    3704:	be c0       	rjmp	.+380    	; 0x3882 <pollCLI(unsigned char)+0x586>
#endif

      // Status line and smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Reset count: "));
    3706:	8e e1       	ldi	r24, 0x1E	; 30
    3708:	93 e0       	ldi	r25, 0x03	; 3
    370a:	63 eb       	ldi	r22, 0xB3	; 179
    370c:	71 e0       	ldi	r23, 0x01	; 1
    370e:	0e 94 2d 29 	call	0x525a	; 0x525a <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3712:	f9 99       	sbic	0x1f, 1	; 31
    3714:	fe cf       	rjmp	.-4      	; 0x3712 <pollCLI(unsigned char)+0x416>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3716:	86 e0       	ldi	r24, 0x06	; 6
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	92 bd       	out	0x22, r25	; 34
    371c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    371e:	f8 9a       	sbi	0x1f, 0	; 31
    3720:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    3722:	8e e1       	ldi	r24, 0x1E	; 30
    3724:	93 e0       	ldi	r25, 0x03	; 3
    3726:	4a e0       	ldi	r20, 0x0A	; 10
    3728:	50 e0       	ldi	r21, 0x00	; 0
    372a:	0e 94 2c 2a 	call	0x5458	; 0x5458 <Print::print(unsigned char, int)>
        Serial.println();
    372e:	8e e1       	ldi	r24, 0x1E	; 30
    3730:	93 e0       	ldi	r25, 0x03	; 3
    3732:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
        uint_least8_t hh = getHoursLT();
    3736:	0e 94 90 13 	call	0x2720	; 0x2720 <getHoursLT()>
    373a:	f8 2e       	mov	r15, r24
        Serial.print(F("Smart warming: "));
    373c:	8e e1       	ldi	r24, 0x1E	; 30
    373e:	93 e0       	ldi	r25, 0x03	; 3
    3740:	63 ea       	ldi	r22, 0xA3	; 163
    3742:	71 e0       	ldi	r23, 0x01	; 1
    3744:	0e 94 2d 29 	call	0x525a	; 0x525a <Print::print(__FlashStringHelper const*)>
    3748:	08 e1       	ldi	r16, 0x18	; 24
    374a:	10 e0       	ldi	r17, 0x00	; 0
    374c:	11 c0       	rjmp	.+34     	; 0x3770 <pollCLI(unsigned char)+0x474>
        for(int i = 24; --i >= 0; )
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
    374e:	8f 2d       	mov	r24, r15
    3750:	0e 94 20 05 	call	0xa40	; 0xa40 <shouldBeWarmedAtHour(unsigned char)>
    3754:	88 23       	and	r24, r24
    3756:	11 f4       	brne	.+4      	; 0x375c <pollCLI(unsigned char)+0x460>
    3758:	66 e6       	ldi	r22, 0x66	; 102
    375a:	01 c0       	rjmp	.+2      	; 0x375e <pollCLI(unsigned char)+0x462>
    375c:	67 e7       	ldi	r22, 0x77	; 119
    375e:	8e e1       	ldi	r24, 0x1E	; 30
    3760:	93 e0       	ldi	r25, 0x03	; 3
    3762:	0e 94 50 29 	call	0x52a0	; 0x52a0 <Print::print(char)>
          if(++hh > 23) { hh = 0; }
    3766:	f3 94       	inc	r15
    3768:	37 e1       	ldi	r19, 0x17	; 23
    376a:	3f 15       	cp	r19, r15
    376c:	08 f4       	brcc	.+2      	; 0x3770 <pollCLI(unsigned char)+0x474>
    376e:	ff 24       	eor	r15, r15
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
        Serial.println();
        uint_least8_t hh = getHoursLT();
        Serial.print(F("Smart warming: "));
        for(int i = 24; --i >= 0; )
    3770:	01 50       	subi	r16, 0x01	; 1
    3772:	10 40       	sbci	r17, 0x00	; 0
    3774:	8f ef       	ldi	r24, 0xFF	; 255
    3776:	0f 3f       	cpi	r16, 0xFF	; 255
    3778:	18 07       	cpc	r17, r24
    377a:	49 f7       	brne	.-46     	; 0x374e <pollCLI(unsigned char)+0x452>
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
          if(++hh > 23) { hh = 0; }
          }
        Serial.println();
    377c:	8e e1       	ldi	r24, 0x1E	; 30
    377e:	93 e0       	ldi	r25, 0x03	; 3
    3780:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
    3784:	7e c0       	rjmp	.+252    	; 0x3882 <pollCLI(unsigned char)+0x586>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3786:	15 30       	cpi	r17, 0x05	; 5
    3788:	08 f4       	brcc	.+2      	; 0x378c <pollCLI(unsigned char)+0x490>
    378a:	7b c0       	rjmp	.+246    	; 0x3882 <pollCLI(unsigned char)+0x586>
    378c:	81 ec       	ldi	r24, 0xC1	; 193
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	71 e0       	ldi	r23, 0x01	; 1
    3794:	7e 01       	movw	r14, r28
    3796:	08 94       	sec
    3798:	e1 1c       	adc	r14, r1
    379a:	f1 1c       	adc	r15, r1
    379c:	a7 01       	movw	r20, r14
    379e:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    37a2:	8c 01       	movw	r16, r24
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	09 f4       	brne	.+2      	; 0x37aa <pollCLI(unsigned char)+0x4ae>
    37a8:	6c c0       	rjmp	.+216    	; 0x3882 <pollCLI(unsigned char)+0x586>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	71 e0       	ldi	r23, 0x01	; 1
    37b2:	a7 01       	movw	r20, r14
    37b4:	0e 94 8d 03 	call	0x71a	; 0x71a <strtok_r>
    37b8:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <pollCLI(unsigned char)+0x4c4>
    37be:	61 c0       	rjmp	.+194    	; 0x3882 <pollCLI(unsigned char)+0x586>
            {
            const int hh = atoi(tok1);
    37c0:	c8 01       	movw	r24, r16
    37c2:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    37c6:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    37c8:	c7 01       	movw	r24, r14
    37ca:	0e 94 66 03 	call	0x6cc	; 0x6cc <atoi>
    37ce:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    37d0:	c8 01       	movw	r24, r16
    37d2:	0e 94 4b 14 	call	0x2896	; 0x2896 <setHoursMinutesLT(int, int)>
    37d6:	88 23       	and	r24, r24
    37d8:	09 f0       	breq	.+2      	; 0x37dc <pollCLI(unsigned char)+0x4e0>
    37da:	53 c0       	rjmp	.+166    	; 0x3882 <pollCLI(unsigned char)+0x586>
    37dc:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <InvalidIgnored()>
    37e0:	50 c0       	rjmp	.+160    	; 0x3882 <pollCLI(unsigned char)+0x586>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    37e2:	0e 94 76 20 	call	0x40ec	; 0x40ec <serialPrintlnBuildVersion()>
    37e6:	4d c0       	rjmp	.+154    	; 0x3882 <pollCLI(unsigned char)+0x586>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	80 93 ca 01 	sts	0x01CA, r24
  isWarmModeDebounced = warm;
    37ee:	80 93 c9 01 	sts	0x01C9, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    37f2:	10 92 cb 01 	sts	0x01CB, r1
    37f6:	45 c0       	rjmp	.+138    	; 0x3882 <pollCLI(unsigned char)+0x586>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	9c 83       	std	Y+4, r25	; 0x04
    37fe:	8b 83       	std	Y+3, r24	; 0x03
    3800:	80 91 b2 00 	lds	r24, 0x00B2
    3804:	2f ef       	ldi	r18, 0xFF	; 255
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	28 1b       	sub	r18, r24
    380a:	31 09       	sbc	r19, r1
    380c:	c9 01       	movw	r24, r18
    380e:	43 e0       	ldi	r20, 0x03	; 3
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	4a 95       	dec	r20
    3816:	e1 f7       	brne	.-8      	; 0x3810 <pollCLI(unsigned char)+0x514>
    3818:	82 1b       	sub	r24, r18
    381a:	93 0b       	sbc	r25, r19
    381c:	95 95       	asr	r25
    381e:	87 95       	ror	r24
    3820:	44 97       	sbiw	r24, 0x14	; 20
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	8d 83       	std	Y+5, r24	; 0x05
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	91 05       	cpc	r25, r1
    382a:	14 f4       	brge	.+4      	; 0x3830 <pollCLI(unsigned char)+0x534>
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0e 94 c3 04 	call	0x986	; 0x986 <zapStats(unsigned int)>
    3834:	88 23       	and	r24, r24
    3836:	29 f0       	breq	.+10     	; 0x3842 <pollCLI(unsigned char)+0x546>
          { Serial.println(F("Zapped.")); }
    3838:	8e e1       	ldi	r24, 0x1E	; 30
    383a:	93 e0       	ldi	r25, 0x03	; 3
    383c:	6b e9       	ldi	r22, 0x9B	; 155
    383e:	71 e0       	ldi	r23, 0x01	; 1
    3840:	04 c0       	rjmp	.+8      	; 0x384a <pollCLI(unsigned char)+0x54e>
        else
          { Serial.println(F("Not finished.")); }
    3842:	8e e1       	ldi	r24, 0x1E	; 30
    3844:	93 e0       	ldi	r25, 0x03	; 3
    3846:	6d e8       	ldi	r22, 0x8D	; 141
    3848:	71 e0       	ldi	r23, 0x01	; 1
    384a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    384e:	8e e1       	ldi	r24, 0x1E	; 30
    3850:	93 e0       	ldi	r25, 0x03	; 3
    3852:	6a e8       	ldi	r22, 0x8A	; 138
    3854:	71 e0       	ldi	r23, 0x01	; 1
    3856:	0e 94 78 29 	call	0x52f0	; 0x52f0 <Print::println(__FlashStringHelper const*)>
    385a:	04 c0       	rjmp	.+8      	; 0x3864 <pollCLI(unsigned char)+0x568>
    }
  else { Serial.println(); } // Terminate empty CLI input line after timeout.
    385c:	8e e1       	ldi	r24, 0x1E	; 30
    385e:	93 e0       	ldi	r25, 0x03	; 3
    3860:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    3864:	0e 94 8d 10 	call	0x211a	; 0x211a <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    3868:	bb 20       	and	r11, r11
    386a:	71 f0       	breq	.+28     	; 0x3888 <pollCLI(unsigned char)+0x58c>
    386c:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
    3870:	0b c0       	rjmp	.+22     	; 0x3888 <pollCLI(unsigned char)+0x58c>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    3872:	12 30       	cpi	r17, 0x02	; 2
    3874:	30 f4       	brcc	.+12     	; 0x3882 <pollCLI(unsigned char)+0x586>
    3876:	d0 ce       	rjmp	.-608    	; 0x3618 <pollCLI(unsigned char)+0x31c>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	e3 ce       	rjmp	.-570    	; 0x3644 <pollCLI(unsigned char)+0x348>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	f5 ce       	rjmp	.-534    	; 0x366c <pollCLI(unsigned char)+0x370>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    3882:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <serialStatusReport()>
    3886:	ee cf       	rjmp	.-36     	; 0x3864 <pollCLI(unsigned char)+0x568>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    3888:	26 96       	adiw	r28, 0x06	; 6
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	1f 91       	pop	r17
    389a:	0f 91       	pop	r16
    389c:	ff 90       	pop	r15
    389e:	ef 90       	pop	r14
    38a0:	df 90       	pop	r13
    38a2:	cf 90       	pop	r12
    38a4:	bf 90       	pop	r11
    38a6:	08 95       	ret

000038a8 <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    38b0:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <getMinutesSinceMidnightLT()>
    38b4:	ec 01       	movw	r28, r24
    38b6:	10 e0       	ldi	r17, 0x00	; 0

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    38b8:	01 e0       	ldi	r16, 0x01	; 1
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    38ba:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <isAnyScheduleOnWARMNow()>
    38be:	88 23       	and	r24, r24
    38c0:	c9 f4       	brne	.+50     	; 0x38f4 <checkUserSchedule()+0x4c>
    38c2:	81 2f       	mov	r24, r17
    38c4:	0e 94 ba 14 	call	0x2974	; 0x2974 <getSimpleScheduleOff(unsigned char)>
    38c8:	c8 17       	cp	r28, r24
    38ca:	d9 07       	cpc	r29, r25
    38cc:	99 f4       	brne	.+38     	; 0x38f4 <checkUserSchedule()+0x4c>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    38ce:	10 92 ca 01 	sts	0x01CA, r1
  isWarmModeDebounced = warm;
    38d2:	10 92 c9 01 	sts	0x01C9, r1
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    38d6:	10 92 cb 01 	sts	0x01CB, r1
    38da:	08 c0       	rjmp	.+16     	; 0x38ec <checkUserSchedule()+0x44>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    38dc:	00 93 ca 01 	sts	0x01CA, r16
  isWarmModeDebounced = warm;
    38e0:	00 93 c9 01 	sts	0x01C9, r16
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    38e4:	10 92 cb 01 	sts	0x01CB, r1
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      {
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
    38e8:	0e 94 84 06 	call	0xd08	; 0xd08 <markAsPossiblyOccupied()>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    38ec:	1f 5f       	subi	r17, 0xFF	; 255
    38ee:	12 30       	cpi	r17, 0x02	; 2
    38f0:	21 f7       	brne	.-56     	; 0x38ba <checkUserSchedule()+0x12>
    38f2:	07 c0       	rjmp	.+14     	; 0x3902 <checkUserSchedule()+0x5a>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmMode(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    38f4:	81 2f       	mov	r24, r17
    38f6:	0e 94 75 14 	call	0x28ea	; 0x28ea <getSimpleScheduleOn(unsigned char)>
    38fa:	c8 17       	cp	r28, r24
    38fc:	d9 07       	cpc	r29, r25
    38fe:	b1 f7       	brne	.-20     	; 0x38ec <checkUserSchedule()+0x44>
    3900:	ed cf       	rjmp	.-38     	; 0x38dc <checkUserSchedule()+0x34>
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
      }
    }
  }
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	08 95       	ret

0000390c <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    390c:	83 e0       	ldi	r24, 0x03	; 3
    390e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
  }
    3918:	08 95       	ret

0000391a <markUIControlUsed()>:
bool isCLIActive() { return(0 != CLITimeoutM); }

// Record local manual operation of a UI control, eg not remote or via CLI.
void markUIControlUsed()
  {
  statusChange = true; // Note a user interaction with the system.
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	80 93 ce 01 	sts	0x01CE, r24
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
    3920:	82 e0       	ldi	r24, 0x02	; 2
    3922:	80 93 cc 01 	sts	0x01CC, r24
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    3926:	80 93 04 01 	sts	0x0104, r24
  statusChange = true; // Note a user interaction with the system.
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while.
  resetCLIActiveTimer();
  // User operation of controls locally is strong indication of presence.
  markAsOccupied();
    392a:	0e 94 4e 04 	call	0x89c	; 0x89c <markAsOccupied()>
  }
    392e:	08 95       	ret

00003930 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    3934:	88 23       	and	r24, r24
    3936:	a9 f4       	brne	.+42     	; 0x3962 <tickUI(unsigned char)+0x32>
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    if(bakeCountdownM > 0) { --bakeCountdownM; }
    3938:	80 91 cb 01 	lds	r24, 0x01CB
    393c:	88 23       	and	r24, r24
    393e:	19 f0       	breq	.+6      	; 0x3946 <tickUI(unsigned char)+0x16>
    3940:	81 50       	subi	r24, 0x01	; 1
    3942:	80 93 cb 01 	sts	0x01CB, r24
#endif

    // Run down UI iteraction timer if need be, one tick per minute.
    if(uiTimeoutM > 0) { --uiTimeoutM; }
    3946:	80 91 cc 01 	lds	r24, 0x01CC
    394a:	88 23       	and	r24, r24
    394c:	19 f0       	breq	.+6      	; 0x3954 <tickUI(unsigned char)+0x24>
    394e:	81 50       	subi	r24, 0x01	; 1
    3950:	80 93 cc 01 	sts	0x01CC, r24

    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    3954:	80 91 04 01 	lds	r24, 0x0104
    3958:	88 23       	and	r24, r24
    395a:	19 f0       	breq	.+6      	; 0x3962 <tickUI(unsigned char)+0x32>
    395c:	81 50       	subi	r24, 0x01	; 1
    395e:	80 93 04 01 	sts	0x0104, r24
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    3962:	10 91 cd 01 	lds	r17, 0x01CD
    3966:	1f 5f       	subi	r17, 0xFF	; 255
    3968:	10 93 cd 01 	sts	0x01CD, r17
#ifdef TEMP_POT_AVAILABLE
//  const bool rUIcu = recentUIControlUse();
  //if(rUIcu || forthTick) // If recent UI activity, and periodically
    {
    // Force re-read of temp pot UI device.
    readTempPot();
    396c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <readTempPot()>
    }
#endif

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    3970:	4d 99       	sbic	0x09, 5	; 9
    3972:	21 c0       	rjmp	.+66     	; 0x39b6 <tickUI(unsigned char)+0x86>
    {
    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    3974:	0e 94 8d 1c 	call	0x391a	; 0x391a <markUIControlUsed()>
    // LED on...
    LED_HEATCALL_ON();
    3978:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    3980:	80 91 ca 01 	lds	r24, 0x01CA
    3984:	88 23       	and	r24, r24
    3986:	69 f4       	brne	.+26     	; 0x39a2 <tickUI(unsigned char)+0x72>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	80 93 ca 01 	sts	0x01CA, r24
  isWarmModeDebounced = warm;
    398e:	80 93 c9 01 	sts	0x01C9, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    3992:	10 92 cb 01 	sts	0x01CB, r1
      setWarmMode(true);
#ifdef SUPPORT_BAKE
      cancelBake(); // Ensure no bake mode running.
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    3996:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    3998:	0e 94 86 1c 	call	0x390c	; 0x390c <offPause()>
      LED_HEATCALL_ON();
    399c:	5c 98       	cbi	0x0b, 4	; 11
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	d0 c0       	rjmp	.+416    	; 0x3b42 <tickUI(unsigned char)+0x212>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    39a2:	80 91 cb 01 	lds	r24, 0x01CB
    39a6:	88 23       	and	r24, r24
    39a8:	09 f4       	brne	.+2      	; 0x39ac <tickUI(unsigned char)+0x7c>
    39aa:	b8 c0       	rjmp	.+368    	; 0x3b1c <tickUI(unsigned char)+0x1ec>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    39ac:	10 92 ca 01 	sts	0x01CA, r1
  isWarmModeDebounced = warm;
    39b0:	10 92 c9 01 	sts	0x01C9, r1
    39b4:	9d c0       	rjmp	.+314    	; 0x3af0 <tickUI(unsigned char)+0x1c0>
    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    39b6:	00 e0       	ldi	r16, 0x00	; 0
    39b8:	81 2f       	mov	r24, r17
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	83 70       	andi	r24, 0x03	; 3
    39be:	90 70       	andi	r25, 0x00	; 0
    39c0:	89 2b       	or	r24, r25
    39c2:	09 f4       	brne	.+2      	; 0x39c6 <tickUI(unsigned char)+0x96>
    39c4:	01 e0       	ldi	r16, 0x01	; 1
    }
  else
    {
    // Don't update the debounced WARM mode while button held down.
    // Will also capture programmatic changes to isWarmMode, eg from schedules.
    isWarmModeDebounced = isWarmMode;
    39c6:	80 91 ca 01 	lds	r24, 0x01CA
    39ca:	80 93 c9 01 	sts	0x01C9, r24

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(isWarmModeDebounced || statusChange) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    39ce:	88 23       	and	r24, r24
    39d0:	29 f4       	brne	.+10     	; 0x39dc <tickUI(unsigned char)+0xac>
    39d2:	80 91 ce 01 	lds	r24, 0x01CE
    39d6:	88 23       	and	r24, r24
    39d8:	09 f4       	brne	.+2      	; 0x39dc <tickUI(unsigned char)+0xac>
    39da:	5b c0       	rjmp	.+182    	; 0x3a92 <tickUI(unsigned char)+0x162>
      {
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      if(!isRoomDark() || statusChange || (forthTick && (0 != readAmbientLight()) && !isRoomDark()))
    39dc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <isRoomLit()>
    39e0:	88 23       	and	r24, r24
    39e2:	89 f4       	brne	.+34     	; 0x3a06 <tickUI(unsigned char)+0xd6>
    39e4:	80 91 ce 01 	lds	r24, 0x01CE
    39e8:	88 23       	and	r24, r24
    39ea:	69 f4       	brne	.+26     	; 0x3a06 <tickUI(unsigned char)+0xd6>
    39ec:	00 23       	and	r16, r16
    39ee:	09 f4       	brne	.+2      	; 0x39f2 <tickUI(unsigned char)+0xc2>
    39f0:	6e c0       	rjmp	.+220    	; 0x3ace <tickUI(unsigned char)+0x19e>
    39f2:	0e 94 04 04 	call	0x808	; 0x808 <readAmbientLight()>
    39f6:	89 2b       	or	r24, r25
    39f8:	09 f4       	brne	.+2      	; 0x39fc <tickUI(unsigned char)+0xcc>
    39fa:	69 c0       	rjmp	.+210    	; 0x3ace <tickUI(unsigned char)+0x19e>
    39fc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <isRoomLit()>
    3a00:	88 23       	and	r24, r24
    3a02:	09 f4       	brne	.+2      	; 0x3a06 <tickUI(unsigned char)+0xd6>
    3a04:	64 c0       	rjmp	.+200    	; 0x3ace <tickUI(unsigned char)+0x19e>
//#ifdef LEARN_BUTTON_AVAILABLE
//        if((!forthTick) || isSimpleScheduleSet()) // Omit every 4th set of flashes unless a schedule is set.
//#endif
          {
          // First flash to indicate WARM mode (or pot being twiddled).
          LED_HEATCALL_ON();
    3a06:	5c 98       	cbi	0x0b, 4	; 11
          // LED on stepwise proportional to temp pot setting.
          // Small number of steps (3) should help make positioning more obvious.
          const uint8_t wt = getWARMTargetC();
    3a08:	0e 94 05 05 	call	0xa0a	; 0xa0a <getWARMTargetC()>
    3a0c:	08 2f       	mov	r16, r24
          // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    3a0e:	82 31       	cpi	r24, 0x12	; 18
    3a10:	28 f4       	brcc	.+10     	; 0x3a1c <tickUI(unsigned char)+0xec>


// Use WDT-based timer for xxxPause() routines.
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
    3a12:	85 e2       	ldi	r24, 0x25	; 37
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    3a1a:	07 c0       	rjmp	.+14     	; 0x3a2a <tickUI(unsigned char)+0xfa>
          else if(!isComfortTemperature(wt)) { tinyPause(); }
    3a1c:	84 31       	cpi	r24, 0x14	; 20
    3a1e:	10 f4       	brcc	.+4      	; 0x3a24 <tickUI(unsigned char)+0xf4>
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <tickUI(unsigned char)+0xf6>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
          else { mediumPause(); }
  
          // Second flash to indicate nominally calling for heat.
          // TODO: could consider using isControlledValveOpen() instead.
          if(getTRVPercentOpen() >= getMinValvePcReallyOpen())
    3a2a:	0e 94 31 04 	call	0x862	; 0x862 <getTRVPercentOpen()>
    3a2e:	18 2f       	mov	r17, r24
    3a30:	0e 94 b4 04 	call	0x968	; 0x968 <getMinValvePcReallyOpen()>
    3a34:	18 17       	cp	r17, r24
    3a36:	08 f4       	brcc	.+2      	; 0x3a3a <tickUI(unsigned char)+0x10a>
    3a38:	4a c0       	rjmp	.+148    	; 0x3ace <tickUI(unsigned char)+0x19e>
            {
            LED_HEATCALL_OFF();
    3a3a:	5c 9a       	sbi	0x0b, 4	; 11
            offPause(); // V0.09 was mediumPause().
    3a3c:	0e 94 86 1c 	call	0x390c	; 0x390c <offPause()>
            LED_HEATCALL_ON(); // flash
    3a40:	5c 98       	cbi	0x0b, 4	; 11
            if(isEcoTemperature(wt)) { veryTinyPause(); }
    3a42:	02 31       	cpi	r16, 0x12	; 18
    3a44:	18 f4       	brcc	.+6      	; 0x3a4c <tickUI(unsigned char)+0x11c>


// Use WDT-based timer for xxxPause() routines.
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
    3a46:	85 e2       	ldi	r24, 0x25	; 37
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	04 c0       	rjmp	.+8      	; 0x3a54 <tickUI(unsigned char)+0x124>
            else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    3a4c:	04 31       	cpi	r16, 0x14	; 20
    3a4e:	28 f4       	brcc	.+10     	; 0x3a5a <tickUI(unsigned char)+0x12a>
    3a50:	8c e4       	ldi	r24, 0x4C	; 76
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    3a58:	03 c0       	rjmp	.+6      	; 0x3a60 <tickUI(unsigned char)+0x130>
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    3a60:	80 91 ca 01 	lds	r24, 0x01CA
    3a64:	88 23       	and	r24, r24
    3a66:	99 f1       	breq	.+102    	; 0x3ace <tickUI(unsigned char)+0x19e>
    3a68:	80 91 cb 01 	lds	r24, 0x01CB
    3a6c:	88 23       	and	r24, r24
    3a6e:	79 f1       	breq	.+94     	; 0x3ace <tickUI(unsigned char)+0x19e>

#ifdef SUPPORT_BAKE
            if(inBakeMode())
              {
              // Third (lengthened) flash to indicate BAKE mode.
              LED_HEATCALL_OFF();
    3a70:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
              mediumPause(); // Note different flash off time to try to distinguish this last flash.
              LED_HEATCALL_ON();
    3a78:	5c 98       	cbi	0x0b, 4	; 11
              // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
              if(isEcoTemperature(wt)) { tinyPause(); }
    3a7a:	02 31       	cpi	r16, 0x12	; 18
    3a7c:	10 f4       	brcc	.+4      	; 0x3a82 <tickUI(unsigned char)+0x152>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	05 c0       	rjmp	.+10     	; 0x3a8c <tickUI(unsigned char)+0x15c>
              else if(!isComfortTemperature(wt)) { smallPause(); }
    3a82:	04 31       	cpi	r16, 0x14	; 20
    3a84:	10 f4       	brcc	.+4      	; 0x3a8a <tickUI(unsigned char)+0x15a>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	01 c0       	rjmp	.+2      	; 0x3a8c <tickUI(unsigned char)+0x15c>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    3a8a:	82 e0       	ldi	r24, 0x02	; 2
    3a8c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    3a90:	1e c0       	rjmp	.+60     	; 0x3ace <tickUI(unsigned char)+0x19e>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick && !isRoomDark() && isControlledValveOpen() && (getTRVPercentOpen() >= getMinValvePcReallyOpen()))
    3a92:	00 23       	and	r16, r16
    3a94:	e1 f0       	breq	.+56     	; 0x3ace <tickUI(unsigned char)+0x19e>
    3a96:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <isRoomLit()>
    3a9a:	88 23       	and	r24, r24
    3a9c:	c1 f0       	breq	.+48     	; 0x3ace <tickUI(unsigned char)+0x19e>
    3a9e:	0e 94 b1 08 	call	0x1162	; 0x1162 <isControlledValveOpen()>
    3aa2:	88 23       	and	r24, r24
    3aa4:	a1 f0       	breq	.+40     	; 0x3ace <tickUI(unsigned char)+0x19e>
    3aa6:	0e 94 31 04 	call	0x862	; 0x862 <getTRVPercentOpen()>
    3aaa:	18 2f       	mov	r17, r24
    3aac:	0e 94 b4 04 	call	0x968	; 0x968 <getMinValvePcReallyOpen()>
    3ab0:	18 17       	cp	r17, r24
    3ab2:	68 f0       	brcs	.+26     	; 0x3ace <tickUI(unsigned char)+0x19e>
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    3ab4:	5c 98       	cbi	0x0b, 4	; 11


// Use WDT-based timer for xxxPause() routines.
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
    3ab6:	85 e2       	ldi	r24, 0x25	; 37
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    3abe:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    3ac0:	0e 94 86 1c 	call	0x390c	; 0x390c <offPause()>
      LED_HEATCALL_ON(); // flash
    3ac4:	5c 98       	cbi	0x0b, 4	; 11
    3ac6:	85 e2       	ldi	r24, 0x25	; 37
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    3ace:	80 91 ce 01 	lds	r24, 0x01CE
    3ad2:	88 23       	and	r24, r24
    3ad4:	79 f0       	breq	.+30     	; 0x3af4 <tickUI(unsigned char)+0x1c4>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    3ad6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <isAnyScheduleOnWARMNow()>
    3ada:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    3adc:	80 91 cf 01 	lds	r24, 0x01CF
    3ae0:	98 17       	cp	r25, r24
    3ae2:	41 f0       	breq	.+16     	; 0x3af4 <tickUI(unsigned char)+0x1c4>
        {
        prevScheduleStatus = currentScheduleStatus;
    3ae4:	90 93 cf 01 	sts	0x01CF, r25

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3ae8:	90 93 ca 01 	sts	0x01CA, r25
  isWarmModeDebounced = warm;
    3aec:	90 93 c9 01 	sts	0x01C9, r25
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    3af0:	10 92 cb 01 	sts	0x01CB, r1
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    3af4:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    3af6:	18 99       	sbic	0x03, 0	; 3
    3af8:	02 c0       	rjmp	.+4      	; 0x3afe <tickUI(unsigned char)+0x1ce>
    {
    handleLEARN(0);
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	03 c0       	rjmp	.+6      	; 0x3b04 <tickUI(unsigned char)+0x1d4>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    3afe:	4b 99       	sbic	0x09, 3	; 9
    3b00:	06 c0       	rjmp	.+12     	; 0x3b0e <tickUI(unsigned char)+0x1de>
    {
    handleLEARN(1);
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <handleLEARN(unsigned char)>
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    3b08:	0e 94 8d 1c 	call	0x391a	; 0x391a <markUIControlUsed()>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    3b0c:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    3b0e:	80 91 ce 01 	lds	r24, 0x01CE
  statusChange = false; // Potential race.
    3b12:	10 92 ce 01 	sts	0x01CE, r1
  return(statusChanged);
  }
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	08 95       	ret
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	80 93 ca 01 	sts	0x01CA, r24
    3b22:	8e e1       	ldi	r24, 0x1E	; 30
    3b24:	80 93 cb 01 	sts	0x01CB, r24
#ifdef SUPPORT_BAKE
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    3b28:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    3b2a:	0e 94 86 1c 	call	0x390c	; 0x390c <offPause()>
      LED_HEATCALL_ON();
    3b2e:	5c 98       	cbi	0x0b, 4	; 11
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    3b36:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    3b3e:	5c 98       	cbi	0x0b, 4	; 11
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    3b46:	d6 cf       	rjmp	.-84     	; 0x3af4 <tickUI(unsigned char)+0x1c4>

00003b48 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    3b48:	92 e3       	ldi	r25, 0x32	; 50
    3b4a:	90 93 05 01 	sts	0x0105, r25
    3b4e:	80 e3       	ldi	r24, 0x30	; 48
    3b50:	80 93 06 01 	sts	0x0106, r24
    3b54:	81 e3       	ldi	r24, 0x31	; 49
    3b56:	80 93 07 01 	sts	0x0107, r24
    3b5a:	84 e3       	ldi	r24, 0x34	; 52
    3b5c:	80 93 08 01 	sts	0x0108, r24
    3b60:	8d e4       	ldi	r24, 0x4D	; 77
    3b62:	80 93 0a 01 	sts	0x010A, r24
    3b66:	81 e6       	ldi	r24, 0x61	; 97
    3b68:	80 93 0b 01 	sts	0x010B, r24
    3b6c:	82 e7       	ldi	r24, 0x72	; 114
    3b6e:	80 93 0c 01 	sts	0x010C, r24
    3b72:	90 93 0e 01 	sts	0x010E, r25
    3b76:	83 e3       	ldi	r24, 0x33	; 51
    3b78:	80 93 0f 01 	sts	0x010F, r24
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    }
  }
    3b7c:	08 95       	ret

00003b7e <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
    3b7e:	1f 93       	push	r17
    3b80:	18 2f       	mov	r17, r24
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
    3b82:	0e 94 37 04 	call	0x86e	; 0x86e <getMinBoilerOnMinutes()>
    3b86:	88 23       	and	r24, r24
    3b88:	99 f0       	breq	.+38     	; 0x3bb0 <pollIO(bool)+0x32>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
    3b8a:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
    3b8e:	11 23       	and	r17, r17
    3b90:	51 f4       	brne	.+20     	; 0x3ba6 <pollIO(bool)+0x28>
    3b92:	82 2f       	mov	r24, r18
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	83 70       	andi	r24, 0x03	; 3
    3b98:	90 70       	andi	r25, 0x00	; 0
    3b9a:	89 2b       	or	r24, r25
    3b9c:	49 f4       	brne	.+18     	; 0x3bb0 <pollIO(bool)+0x32>
    3b9e:	80 91 d5 01 	lds	r24, 0x01D5
    3ba2:	28 17       	cp	r18, r24
    3ba4:	29 f0       	breq	.+10     	; 0x3bb0 <pollIO(bool)+0x32>
      {
      _pO_lastPoll = sct;
    3ba6:	20 93 d5 01 	sts	0x01D5, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
    3baa:	0e 94 4d 0a 	call	0x149a	; 0x149a <FHT8VCallForHeatPoll()>
    3bae:	01 c0       	rjmp	.+2      	; 0x3bb2 <pollIO(bool)+0x34>
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
    3bb2:	1f 91       	pop	r17
    3bb4:	08 95       	ret

00003bb6 <loop>:
static uint8_t boilerNoCallM;
#endif

// The main control loop routine runs forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    3bb6:	8f 92       	push	r8
    3bb8:	9f 92       	push	r9
    3bba:	af 92       	push	r10
    3bbc:	bf 92       	push	r11
    3bbe:	cf 92       	push	r12
    3bc0:	df 92       	push	r13
    3bc2:	ef 92       	push	r14
    3bc4:	ff 92       	push	r15
    3bc6:	0f 93       	push	r16
    3bc8:	1f 93       	push	r17
    3bca:	df 93       	push	r29
    3bcc:	cf 93       	push	r28
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <loop+0x1a>
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <loop+0x1c>
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep resets, etc.
  const bool second0 = (0 == TIME_LSD);
    3bd6:	ff 24       	eor	r15, r15
    3bd8:	80 91 d0 01 	lds	r24, 0x01D0
    3bdc:	88 23       	and	r24, r24
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <loop+0x2e>
    3be0:	ff 24       	eor	r15, r15
    3be2:	f3 94       	inc	r15
//  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and if possible noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == (minuteCount & 3));
    3be4:	ee 24       	eor	r14, r14
    3be6:	80 91 d1 01 	lds	r24, 0x01D1
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	83 70       	andi	r24, 0x03	; 3
    3bee:	90 70       	andi	r25, 0x00	; 0
    3bf0:	89 2b       	or	r24, r25
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <loop+0x42>
    3bf4:	ee 24       	eor	r14, r14
    3bf6:	e3 94       	inc	r14

  // Note last-measured battery status.
  const bool batteryLow = isBatteryLow();
    3bf8:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <isBatteryLow()>
    3bfc:	88 2e       	mov	r8, r24
    (batteryLow || !inWarmModeDebounced()) && // Don't spare the batteries unless in FROST mode (which should be most of the time) or the batteries are low.
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!isControlledValveOpen()) &&  // Run at full speed until the FHT8V valve should actually have shut and the boiler gone off.
    (0 == getTRVPercentOpen()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    3bfe:	88 23       	and	r24, r24
    3c00:	21 f4       	brne	.+8      	; 0x3c0a <loop+0x54>
    3c02:	0e 94 d6 16 	call	0x2dac	; 0x2dac <inWarmModeDebounced()>
    3c06:	88 23       	and	r24, r24
    3c08:	89 f4       	brne	.+34     	; 0x3c2c <loop+0x76>
    3c0a:	80 91 d2 01 	lds	r24, 0x01D2
    3c0e:	90 91 d3 01 	lds	r25, 0x01D3
    3c12:	89 2b       	or	r24, r25
    3c14:	59 f4       	brne	.+22     	; 0x3c2c <loop+0x76>
    3c16:	0e 94 b1 08 	call	0x1162	; 0x1162 <isControlledValveOpen()>
    3c1a:	88 23       	and	r24, r24
    3c1c:	39 f4       	brne	.+14     	; 0x3c2c <loop+0x76>
    3c1e:	0e 94 31 04 	call	0x862	; 0x862 <getTRVPercentOpen()>
    3c22:	88 23       	and	r24, r24
    3c24:	19 f4       	brne	.+6      	; 0x3c2c <loop+0x76>
    3c26:	aa 24       	eor	r10, r10
    3c28:	a3 94       	inc	r10
    3c2a:	01 c0       	rjmp	.+2      	; 0x3c2e <loop+0x78>
    3c2c:	aa 24       	eor	r10, r10


  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    3c2e:	0e 94 37 04 	call	0x86e	; 0x86e <getMinBoilerOnMinutes()>
    3c32:	98 2e       	mov	r9, r24
    3c34:	88 23       	and	r24, r24
    3c36:	69 f0       	breq	.+26     	; 0x3c52 <loop+0x9c>
    3c38:	99 24       	eor	r9, r9
    3c3a:	93 94       	inc	r9
  if(hubMode)
    {
#if defined(USE_MODULE_FHT8VSIMPLE)
    // Final poll to to cover up to end of previous minor loop.
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();
    3c3c:	0e 94 4d 0a 	call	0x149a	; 0x149a <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    3c40:	0e 94 c3 08 	call	0x1186	; 0x1186 <FHT8VCallForHeatHeardGetAndClear()>
    3c44:	8c 01       	movw	r16, r24
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    3c46:	dd 24       	eor	r13, r13
    3c48:	8f ef       	ldi	r24, 0xFF	; 255
    3c4a:	0f 3f       	cpi	r16, 0xFF	; 255
    3c4c:	18 07       	cpc	r17, r24
    3c4e:	19 f4       	brne	.+6      	; 0x3c56 <loop+0xa0>
    3c50:	1f c0       	rjmp	.+62     	; 0x3c90 <loop+0xda>
  // and could be disabled if no local valve is being run to provide better response to remote nodes.
  bool hubModeBoilerOn = false; // If true then remote call for heat is in progress.
#if defined(USE_MODULE_FHT8VSIMPLE)
  bool needsToEavesdrop = false; // By default assume no need to eavesdrop.
#endif
  if(hubMode)
    3c52:	10 e0       	ldi	r17, 0x00	; 0
    3c54:	7c c0       	rjmp	.+248    	; 0x3d4e <loop+0x198>
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    3c56:	dd 24       	eor	r13, r13
    3c58:	d3 94       	inc	r13
    if(heardIt)
      {
      DEBUG_SERIAL_TIMESTAMP();
    3c5a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    3c5e:	80 e2       	ldi	r24, 0x20	; 32
    3c60:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <serialPrintAndFlush(char)>
      serialPrintAndFlush(F("Call for heat from "));
    3c64:	8a e1       	ldi	r24, 0x1A	; 26
    3c66:	94 e0       	ldi	r25, 0x04	; 4
    3c68:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush((hcRequest >> 8) & 0xff);
    3c6c:	81 2f       	mov	r24, r17
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	6a e0       	ldi	r22, 0x0A	; 10
    3c72:	70 e0       	ldi	r23, 0x00	; 0
    3c74:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <serialPrintAndFlush(unsigned int, int)>
      serialPrintAndFlush(' ');
    3c78:	80 e2       	ldi	r24, 0x20	; 32
    3c7a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <serialPrintAndFlush(char)>
      serialPrintAndFlush(hcRequest & 0xff);
    3c7e:	c8 01       	movw	r24, r16
    3c80:	90 70       	andi	r25, 0x00	; 0
    3c82:	6a e0       	ldi	r22, 0x0A	; 10
    3c84:	70 e0       	ldi	r23, 0x00	; 0
    3c86:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <serialPrintAndFlush(unsigned int, int)>
      serialPrintlnAndFlush();
    3c8a:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
    3c8e:	16 c0       	rjmp	.+44     	; 0x3cbc <loop+0x106>
      }
    else
      {
      // Chck for error if nothing received.
      const uint8_t err = FHT8VLastRXErrGetAndClear();
    3c90:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <FHT8VLastRXErrGetAndClear()>
    3c94:	18 2f       	mov	r17, r24
      if(0 != err)
    3c96:	88 23       	and	r24, r24
    3c98:	61 f0       	breq	.+24     	; 0x3cb2 <loop+0xfc>
        {
        serialPrintAndFlush(F("FHT8V RX err "));
    3c9a:	8c e0       	ldi	r24, 0x0C	; 12
    3c9c:	94 e0       	ldi	r25, 0x04	; 4
    3c9e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(err);
    3ca2:	81 2f       	mov	r24, r17
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	6a e0       	ldi	r22, 0x0A	; 10
    3ca8:	70 e0       	ldi	r23, 0x00	; 0
    3caa:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    3cae:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
        }
      }

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: may be able to stop RX if boiler is on for local demand (can measure local temp better: less self-heating).
    if(heardIt ||
    3cb2:	0e 94 b1 08 	call	0x1162	; 0x1162 <isControlledValveOpen()>
    3cb6:	88 23       	and	r24, r24
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <loop+0x106>
    3cba:	9b c1       	rjmp	.+822    	; 0x3ff2 <loop+0x43c>
       isControlledValveOpen()) // Treat local call for heat as iff a remote one for timeout purposes.
      {
      if(0 == boilerCountdownTicks) { serialPrintlnAndFlush(F("Remote call for heat on")); }
    3cbc:	80 91 d2 01 	lds	r24, 0x01D2
    3cc0:	90 91 d3 01 	lds	r25, 0x01D3
    3cc4:	89 2b       	or	r24, r25
    3cc6:	21 f4       	brne	.+8      	; 0x3cd0 <loop+0x11a>
    3cc8:	84 ef       	ldi	r24, 0xF4	; 244
    3cca:	93 e0       	ldi	r25, 0x03	; 3
    3ccc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
    3cd0:	0e 94 37 04 	call	0x86e	; 0x86e <getMinBoilerOnMinutes()>
    3cd4:	9e e1       	ldi	r25, 0x1E	; 30
    3cd6:	89 9f       	mul	r24, r25
    3cd8:	c0 01       	movw	r24, r0
    3cda:	11 24       	eor	r1, r1
    3cdc:	90 93 d3 01 	sts	0x01D3, r25
    3ce0:	80 93 d2 01 	sts	0x01D2, r24
      boilerNoCallM = 0; // No time has passed since the last call.
    3ce4:	10 92 d4 01 	sts	0x01D4, r1
    3ce8:	15 c0       	rjmp	.+42     	; 0x3d14 <loop+0x15e>
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
      { if(0 == --boilerCountdownTicks) { serialPrintlnAndFlush(F("Remote call for heat off")); } }
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	90 93 d3 01 	sts	0x01D3, r25
    3cf0:	80 93 d2 01 	sts	0x01D2, r24
    3cf4:	89 2b       	or	r24, r25
    3cf6:	71 f4       	brne	.+28     	; 0x3d14 <loop+0x15e>
    3cf8:	8b ed       	ldi	r24, 0xDB	; 219
    3cfa:	93 e0       	ldi	r25, 0x03	; 3
    3cfc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    3d00:	09 c0       	rjmp	.+18     	; 0x3d14 <loop+0x15e>
    // Else already off so count up quiet minutes...
    else if(second0 && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }         
    3d02:	ff 20       	and	r15, r15
    3d04:	39 f0       	breq	.+14     	; 0x3d14 <loop+0x15e>
    3d06:	80 91 d4 01 	lds	r24, 0x01D4
    3d0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d0c:	19 f0       	breq	.+6      	; 0x3d14 <loop+0x15e>
    3d0e:	8f 5f       	subi	r24, 0xFF	; 255
    3d10:	80 93 d4 01 	sts	0x01D4, r24

    // Turn boiler output on or off in response to calls for heat.
    hubModeBoilerOn = (boilerCountdownTicks > 0);
    3d14:	10 e0       	ldi	r17, 0x00	; 0
    3d16:	80 91 d2 01 	lds	r24, 0x01D2
    3d1a:	90 91 d3 01 	lds	r25, 0x01D3
    3d1e:	89 2b       	or	r24, r25
    3d20:	09 f0       	breq	.+2      	; 0x3d24 <loop+0x16e>
    3d22:	11 e0       	ldi	r17, 0x01	; 1
    
    // If not running a local TRV, and this without local temperature measurement problems from self-heating,
    // then just listen all the time for maximum simplicity and responsiveness at some cost in extra power consumption.
    // (At least as long as power is not running low for some reasons.)
    if(!localFHT8VTRVEnabled() && !batteryLow)
    3d24:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3d28:	84 36       	cpi	r24, 0x64	; 100
    3d2a:	28 f4       	brcc	.+10     	; 0x3d36 <loop+0x180>
    3d2c:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3d30:	84 36       	cpi	r24, 0x64	; 100
    3d32:	08 f4       	brcc	.+2      	; 0x3d36 <loop+0x180>
    3d34:	66 c1       	rjmp	.+716    	; 0x4002 <loop+0x44c>
    3d36:	88 20       	and	r8, r8
    3d38:	09 f0       	breq	.+2      	; 0x3d3c <loop+0x186>
    3d3a:	63 c1       	rjmp	.+710    	; 0x4002 <loop+0x44c>
    3d3c:	6b c1       	rjmp	.+726    	; 0x4014 <loop+0x45e>
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
       (boilerCountdownTicks != 0)) // But don't force unit to listen/RX all the time if no recent call for heat.
      { needsToEavesdrop = true; }
    else if((!heardIt) &&
    3d3e:	dd 20       	and	r13, r13
    3d40:	31 f4       	brne	.+12     	; 0x3d4e <loop+0x198>
    3d42:	ee 20       	and	r14, r14
    3d44:	21 f4       	brne	.+8      	; 0x3d4e <loop+0x198>
    3d46:	29 55       	subi	r18, 0x59	; 89
    3d48:	32 40       	sbci	r19, 0x02	; 2
    3d4a:	08 f4       	brcc	.+2      	; 0x3d4e <loop+0x198>
    3d4c:	63 c1       	rjmp	.+710    	; 0x4014 <loop+0x45e>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    3d4e:	8f 2d       	mov	r24, r15
    3d50:	0e 94 08 09 	call	0x1210	; 0x1210 <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    3d54:	0e 94 c3 08 	call	0x1186	; 0x1186 <FHT8VCallForHeatHeardGetAndClear()>
    3d58:	00 e0       	ldi	r16, 0x00	; 0
    }
#endif


  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || isControlledValveOpen()) ? HIGH : LOW));
    3d5a:	11 23       	and	r17, r17
    3d5c:	31 f4       	brne	.+12     	; 0x3d6a <loop+0x1b4>
    3d5e:	0e 94 b1 08 	call	0x1162	; 0x1162 <isControlledValveOpen()>
    3d62:	88 23       	and	r24, r24
    3d64:	11 f4       	brne	.+4      	; 0x3d6a <loop+0x1b4>
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <loop+0x1b6>
    3d6a:	61 e0       	ldi	r22, 0x01	; 1
    3d6c:	86 e0       	ldi	r24, 0x06	; 6
    3d6e:	0e 94 32 26 	call	0x4c64	; 0x4c64 <digitalWrite>
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
    3d72:	0e 94 06 10 	call	0x200c	; 0x200c <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    3d76:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <minimisePowerWithoutSleep()>
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <loop+0x1e8>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    3d7c:	00 23       	and	r16, r16
    3d7e:	39 f0       	breq	.+14     	; 0x3d8e <loop+0x1d8>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <pollIO(bool)>
    3d8c:	08 c0       	rjmp	.+16     	; 0x3d9e <loop+0x1e8>
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    3d8e:	88 20       	and	r8, r8
    3d90:	11 f4       	brne	.+4      	; 0x3d96 <loop+0x1e0>
    3d92:	ff 20       	and	r15, r15
    3d94:	11 f0       	breq	.+4      	; 0x3d9a <loop+0x1e4>
    3d96:	0e 94 88 12 	call	0x2510	; 0x2510 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    3d9a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sleepPwrSaveWithBODDisabled()>
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    3d9e:	90 91 b5 01 	lds	r25, 0x01B5
    3da2:	80 91 d0 01 	lds	r24, 0x01D0
    3da6:	89 17       	cp	r24, r25
    3da8:	49 f3       	breq	.-46     	; 0x3d7c <loop+0x1c6>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    3daa:	90 93 d0 01 	sts	0x01D0, r25


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(!conserveBattery); // Time for extra TX before UI.
    3dae:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3db2:	84 36       	cpi	r24, 0x64	; 100
    3db4:	68 f4       	brcc	.+26     	; 0x3dd0 <loop+0x21a>
    3db6:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3dba:	84 36       	cpi	r24, 0x64	; 100
    3dbc:	48 f4       	brcc	.+18     	; 0x3dd0 <loop+0x21a>
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	8a 25       	eor	r24, r10
    3dc2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <FHT8VPollSyncAndTX_First(bool)>
    3dc6:	88 23       	and	r24, r24
    3dc8:	19 f0       	breq	.+6      	; 0x3dd0 <loop+0x21a>
    3dca:	dd 24       	eor	r13, r13
    3dcc:	d3 94       	inc	r13
    3dce:	01 c0       	rjmp	.+2      	; 0x3dd2 <loop+0x21c>
    3dd0:	dd 24       	eor	r13, r13
  // Must take ~300ms or less so as not to run over into next half second if two TXs are done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    3dd2:	80 91 d0 01 	lds	r24, 0x01D0
    3dd6:	0e 94 98 1c 	call	0x3930	; 0x3930 <tickUI(unsigned char)>
    3dda:	88 23       	and	r24, r24
    3ddc:	11 f4       	brne	.+4      	; 0x3de2 <loop+0x22c>
    3dde:	bb 24       	eor	r11, r11
    3de0:	04 c0       	rjmp	.+8      	; 0x3dea <loop+0x234>
      {
      showStatus = true;
      computeTargetTemperature(); // Force recompute of temperature for (UI) responsivene
    3de2:	0e 94 96 06 	call	0xd2c	; 0xd2c <computeTargetTemperature()>
    3de6:	bb 24       	eor	r11, r11
    3de8:	b3 94       	inc	r11
      }
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    3dea:	dd 20       	and	r13, r13
    3dec:	79 f0       	breq	.+30     	; 0x3e0c <loop+0x256>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3dee:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3df2:	84 36       	cpi	r24, 0x64	; 100
    3df4:	50 f4       	brcc	.+20     	; 0x3e0a <loop+0x254>
    3df6:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3dfa:	84 36       	cpi	r24, 0x64	; 100
    3dfc:	30 f4       	brcc	.+12     	; 0x3e0a <loop+0x254>
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	8a 25       	eor	r24, r10
    3e02:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <FHT8VPollSyncAndTX_Next(bool)>
    3e06:	88 23       	and	r24, r24
    3e08:	09 f4       	brne	.+2      	; 0x3e0c <loop+0x256>
    3e0a:	dd 24       	eor	r13, r13
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    3e0c:	cc 24       	eor	r12, r12
    3e0e:	c3 94       	inc	r12
    3e10:	ca 24       	eor	r12, r10
    3e12:	11 f0       	breq	.+4      	; 0x3e18 <loop+0x262>
    3e14:	11 e0       	ldi	r17, 0x01	; 1
    3e16:	01 c0       	rjmp	.+2      	; 0x3e1a <loop+0x264>
    3e18:	1e 2d       	mov	r17, r14

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    3e1a:	80 91 d0 01 	lds	r24, 0x01D0
    3e1e:	82 33       	cpi	r24, 0x32	; 50
    3e20:	09 f4       	brne	.+2      	; 0x3e24 <loop+0x26e>
    3e22:	42 c0       	rjmp	.+132    	; 0x3ea8 <loop+0x2f2>
    3e24:	83 33       	cpi	r24, 0x33	; 51
    3e26:	38 f4       	brcc	.+14     	; 0x3e36 <loop+0x280>
    3e28:	82 30       	cpi	r24, 0x02	; 2
    3e2a:	f9 f0       	breq	.+62     	; 0x3e6a <loop+0x2b4>
    3e2c:	84 30       	cpi	r24, 0x04	; 4
    3e2e:	b1 f1       	breq	.+108    	; 0x3e9c <loop+0x2e6>
    3e30:	88 23       	and	r24, r24
    3e32:	89 f0       	breq	.+34     	; 0x3e56 <loop+0x2a0>
    3e34:	90 c0       	rjmp	.+288    	; 0x3f56 <loop+0x3a0>
    3e36:	86 33       	cpi	r24, 0x36	; 54
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <loop+0x286>
    3e3a:	42 c0       	rjmp	.+132    	; 0x3ec0 <loop+0x30a>
    3e3c:	87 33       	cpi	r24, 0x37	; 55
    3e3e:	20 f4       	brcc	.+8      	; 0x3e48 <loop+0x292>
    3e40:	84 33       	cpi	r24, 0x34	; 52
    3e42:	09 f0       	breq	.+2      	; 0x3e46 <loop+0x290>
    3e44:	88 c0       	rjmp	.+272    	; 0x3f56 <loop+0x3a0>
    3e46:	36 c0       	rjmp	.+108    	; 0x3eb4 <loop+0x2fe>
    3e48:	88 33       	cpi	r24, 0x38	; 56
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <loop+0x298>
    3e4c:	42 c0       	rjmp	.+132    	; 0x3ed2 <loop+0x31c>
    3e4e:	8a 33       	cpi	r24, 0x3A	; 58
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <loop+0x29e>
    3e52:	81 c0       	rjmp	.+258    	; 0x3f56 <loop+0x3a0>
    3e54:	69 c0       	rjmp	.+210    	; 0x3f28 <loop+0x372>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    3e56:	80 91 d1 01 	lds	r24, 0x01D1
    3e5a:	8f 5f       	subi	r24, 0xFF	; 255
    3e5c:	80 93 d1 01 	sts	0x01D1, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    3e60:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <checkUserSchedule()>
      // Ensure that RTC is persisted promptly when needed.
      persistRTC();
    3e64:	0e 94 ee 13 	call	0x27dc	; 0x27dc <persistRTC()>
    3e68:	76 c0       	rjmp	.+236    	; 0x3f56 <loop+0x3a0>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)getBatterymV(), getSubCycleTime() ^ (uint8_t)getAmbientLight(), (uint8_t)getTemperatureC16()); } break; }
    3e6a:	11 23       	and	r17, r17
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <loop+0x2ba>
    3e6e:	73 c0       	rjmp	.+230    	; 0x3f56 <loop+0x3a0>
    3e70:	06 b5       	in	r16, 0x26	; 38
    3e72:	80 91 d1 01 	lds	r24, 0x01D1
    3e76:	08 27       	eor	r16, r24
    3e78:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <getBatterymV()>
    3e7c:	e8 2e       	mov	r14, r24
    3e7e:	10 91 b2 00 	lds	r17, 0x00B2
    3e82:	0e 94 ff 03 	call	0x7fe	; 0x7fe <getAmbientLight()>
    3e86:	f8 2e       	mov	r15, r24
    3e88:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <getTemperatureC16()>
    3e8c:	48 2f       	mov	r20, r24
    3e8e:	1f 25       	eor	r17, r15
    3e90:	80 2f       	mov	r24, r16
    3e92:	8e 25       	eor	r24, r14
    3e94:	61 2f       	mov	r22, r17
    3e96:	0e 94 de 10 	call	0x21bc	; 0x21bc <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3e9a:	5d c0       	rjmp	.+186    	; 0x3f56 <loop+0x3a0>
    // Monitor battery voltage; measure and recompute status less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { readBatterymV(); } break; }
    3e9c:	11 23       	and	r17, r17
    3e9e:	09 f4       	brne	.+2      	; 0x3ea2 <loop+0x2ec>
    3ea0:	5a c0       	rjmp	.+180    	; 0x3f56 <loop+0x3a0>
    3ea2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <readBatterymV()>
    3ea6:	57 c0       	rjmp	.+174    	; 0x3f56 <loop+0x3a0>
#endif

    // Read all environmental inputs, late in the cycle.
#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected WARM temperature target.
    case 50: { if(runAll) { readTempPot(); } break; }
    3ea8:	11 23       	and	r17, r17
    3eaa:	09 f4       	brne	.+2      	; 0x3eae <loop+0x2f8>
    3eac:	54 c0       	rjmp	.+168    	; 0x3f56 <loop+0x3a0>
    3eae:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <readTempPot()>
    3eb2:	51 c0       	rjmp	.+162    	; 0x3f56 <loop+0x3a0>
#endif
    // Sample ambient light levels.
    case 52: { if(runAll) { readAmbientLight(); } break; }
    3eb4:	11 23       	and	r17, r17
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <loop+0x304>
    3eb8:	4e c0       	rjmp	.+156    	; 0x3f56 <loop+0x3a0>
    3eba:	0e 94 04 04 	call	0x808	; 0x808 <readAmbientLight()>
    3ebe:	4b c0       	rjmp	.+150    	; 0x3f56 <loop+0x3a0>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { readTemperatureC16(); } break; }
    3ec0:	99 20       	and	r9, r9
    3ec2:	09 f4       	brne	.+2      	; 0x3ec6 <loop+0x310>
    3ec4:	e1 2e       	mov	r14, r17
    3ec6:	ee 20       	and	r14, r14
    3ec8:	09 f4       	brne	.+2      	; 0x3ecc <loop+0x316>
    3eca:	45 c0       	rjmp	.+138    	; 0x3f56 <loop+0x3a0>
    3ecc:	0e 94 20 16 	call	0x2c40	; 0x2c40 <readTemperatureC16()>
    3ed0:	42 c0       	rjmp	.+132    	; 0x3f56 <loop+0x3a0>
      {
      static bool boilerOn; // Internal record of current boiler-out state.

      // Recompute target, valve position and call for heat, etc.
      // Should be called once per minute to work correctly.
      if(computeCallForHeat())
    3ed2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <computeCallForHeat()>
    3ed6:	88 23       	and	r24, r24
    3ed8:	51 f0       	breq	.+20     	; 0x3eee <loop+0x338>
        {
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    3eda:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3ede:	84 36       	cpi	r24, 0x64	; 100
    3ee0:	30 f4       	brcc	.+12     	; 0x3eee <loop+0x338>
    3ee2:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3ee6:	84 36       	cpi	r24, 0x64	; 100
    3ee8:	10 f4       	brcc	.+4      	; 0x3eee <loop+0x338>
    3eea:	0e 94 77 0b 	call	0x16ee	; 0x16ee <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode)
    3eee:	99 20       	and	r9, r9
    3ef0:	b1 f0       	breq	.+44     	; 0x3f1e <loop+0x368>
        {
        if(boilerCountdownTicks != 0)
    3ef2:	80 91 d2 01 	lds	r24, 0x01D2
    3ef6:	90 91 d3 01 	lds	r25, 0x01D3
    3efa:	89 2b       	or	r24, r25
    3efc:	81 f0       	breq	.+32     	; 0x3f1e <loop+0x368>
          {
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, s left: ");
    3efe:	87 ec       	ldi	r24, 0xC7	; 199
    3f00:	93 e0       	ldi	r25, 0x03	; 3
    3f02:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT(boilerCountdownTicks * MAIN_TICK_S);
    3f06:	80 91 d2 01 	lds	r24, 0x01D2
    3f0a:	90 91 d3 01 	lds	r25, 0x01D3
    3f0e:	88 0f       	add	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	6a e0       	ldi	r22, 0x0A	; 10
    3f14:	70 e0       	ldi	r23, 0x00	; 0
    3f16:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <serialPrintAndFlush(unsigned int, int)>
          DEBUG_SERIAL_PRINTLN();
    3f1a:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    3f1e:	11 23       	and	r17, r17
    3f20:	d1 f0       	breq	.+52     	; 0x3f56 <loop+0x3a0>
    3f22:	bb 24       	eor	r11, r11
    3f24:	b3 94       	inc	r11
    3f26:	17 c0       	rjmp	.+46     	; 0x3f56 <loop+0x3a0>
    // Stats samples; should never be missed.
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      if(minute0From4ForSensors) // Hope to take lowest-noise samples on the special minute out of each 4.
    3f28:	ee 20       	and	r14, r14
    3f2a:	a9 f0       	breq	.+42     	; 0x3f56 <loop+0x3a0>
        {
        const uint_least8_t mm = getMinutesLT();
    3f2c:	0e 94 84 13 	call	0x2708	; 0x2708 <getMinutesLT()>
        switch(mm)
    3f30:	88 32       	cpi	r24, 0x28	; 40
    3f32:	30 f4       	brcc	.+12     	; 0x3f40 <loop+0x38a>
    3f34:	84 32       	cpi	r24, 0x24	; 36
    3f36:	40 f4       	brcc	.+16     	; 0x3f48 <loop+0x392>
    3f38:	80 51       	subi	r24, 0x10	; 16
    3f3a:	84 30       	cpi	r24, 0x04	; 4
    3f3c:	60 f4       	brcc	.+24     	; 0x3f56 <loop+0x3a0>
    3f3e:	04 c0       	rjmp	.+8      	; 0x3f48 <loop+0x392>
    3f40:	88 53       	subi	r24, 0x38	; 56
    3f42:	84 30       	cpi	r24, 0x04	; 4
    3f44:	40 f4       	brcc	.+16     	; 0x3f56 <loop+0x3a0>
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <loop+0x39a>
          {
          case 16: case 17: case 18: case 19:
          case 36: case 37: case 38: case 39:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of juice.
    3f48:	88 20       	and	r8, r8
    3f4a:	29 f4       	brne	.+10     	; 0x3f56 <loop+0x3a0>
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	01 c0       	rjmp	.+2      	; 0x3f52 <loop+0x39c>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at end of hour.
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	0e 94 b8 05 	call	0xb70	; 0xb70 <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3f56:	dd 20       	and	r13, r13
    3f58:	71 f0       	breq	.+28     	; 0x3f76 <loop+0x3c0>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3f5a:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3f5e:	84 36       	cpi	r24, 0x64	; 100
    3f60:	48 f4       	brcc	.+18     	; 0x3f74 <loop+0x3be>
    3f62:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3f66:	84 36       	cpi	r24, 0x64	; 100
    3f68:	28 f4       	brcc	.+10     	; 0x3f74 <loop+0x3be>
    3f6a:	8c 2d       	mov	r24, r12
    3f6c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <FHT8VPollSyncAndTX_Next(bool)>
    3f70:	88 23       	and	r24, r24
    3f72:	09 f4       	brne	.+2      	; 0x3f76 <loop+0x3c0>
    3f74:	dd 24       	eor	r13, r13
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    3f76:	bb 20       	and	r11, r11
    3f78:	11 f0       	breq	.+4      	; 0x3f7e <loop+0x3c8>
    3f7a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3f7e:	dd 20       	and	r13, r13
    3f80:	59 f0       	breq	.+22     	; 0x3f98 <loop+0x3e2>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3f82:	0e 94 9c 08 	call	0x1138	; 0x1138 <FHT8VGetHC1()>
    3f86:	84 36       	cpi	r24, 0x64	; 100
    3f88:	38 f4       	brcc	.+14     	; 0x3f98 <loop+0x3e2>
    3f8a:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VGetHC2()>
    3f8e:	84 36       	cpi	r24, 0x64	; 100
    3f90:	18 f4       	brcc	.+6      	; 0x3f98 <loop+0x3e2>
    3f92:	8c 2d       	mov	r24, r12
    3f94:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <FHT8VPollSyncAndTX_Next(bool)>
  // then poll/prompt the user for input
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
  // TODO: be clever and if getSubCycleTime() has gone backwards then assume end tick has been missed and return from loop() without sleeping.
#if defined(SUPPORT_CLI)
  if(showStatus || isCLIActive())
    3f98:	bb 20       	and	r11, r11
    3f9a:	21 f4       	brne	.+8      	; 0x3fa4 <loop+0x3ee>
    3f9c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <isCLIActive()>
    3fa0:	88 23       	and	r24, r24
    3fa2:	b1 f0       	breq	.+44     	; 0x3fd0 <loop+0x41a>
    {
    const uint8_t sct = getSubCycleTime();
    3fa4:	20 91 b2 00 	lds	r18, 0x00B2
    if(sct < (GSCT_MAX-(GSCT_MAX/8)))
    3fa8:	20 3e       	cpi	r18, 0xE0	; 224
    3faa:	90 f4       	brcc	.+36     	; 0x3fd0 <loop+0x41a>
      // Don't listen longer than ~500ms or beyond the last 16th of the cycle,
      // as listening for UART RX uses lots of power.
      { pollCLI((uint8_t)fnmin(GSCT_MAX-(GSCT_MAX/16), sct+(int)(SUB_CYCLE_TICKS_PER_S/2))); }
    3fac:	80 ef       	ldi	r24, 0xF0	; 240
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	9a 83       	std	Y+2, r25	; 0x02
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	20 5c       	subi	r18, 0xC0	; 192
    3fb8:	3f 4f       	sbci	r19, 0xFF	; 255




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    3fba:	20 3f       	cpi	r18, 0xF0	; 240
    3fbc:	31 05       	cpc	r19, r1
    3fbe:	14 f4       	brge	.+4      	; 0x3fc4 <loop+0x40e>
    3fc0:	c9 01       	movw	r24, r18
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <loop+0x412>
    3fc4:	80 ef       	ldi	r24, 0xF0	; 240
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	3c 83       	std	Y+4, r19	; 0x04
    3fca:	2b 83       	std	Y+3, r18	; 0x03
    3fcc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    3fd0:	90 91 b5 01 	lds	r25, 0x01B5
    3fd4:	80 91 d0 01 	lds	r24, 0x01D0
    3fd8:	89 17       	cp	r24, r25
    3fda:	09 f1       	breq	.+66     	; 0x401e <loop+0x468>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("ERROR: loop() overrun!");
    3fdc:	80 eb       	ldi	r24, 0xB0	; 176
    3fde:	93 e0       	ldi	r25, 0x03	; 3
    3fe0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    3fe4:	0e 94 ba 08 	call	0x1174	; 0x1174 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    3fe8:	80 91 b5 01 	lds	r24, 0x01B5
    3fec:	80 93 d0 01 	sts	0x01D0, r24
    3ff0:	16 c0       	rjmp	.+44     	; 0x401e <loop+0x468>
      if(0 == boilerCountdownTicks) { serialPrintlnAndFlush(F("Remote call for heat on")); }
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
      boilerNoCallM = 0; // No time has passed since the last call.
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
    3ff2:	80 91 d2 01 	lds	r24, 0x01D2
    3ff6:	90 91 d3 01 	lds	r25, 0x01D3
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	09 f0       	breq	.+2      	; 0x4000 <loop+0x44a>
    3ffe:	75 ce       	rjmp	.-790    	; 0x3cea <loop+0x134>
    4000:	80 ce       	rjmp	.-768    	; 0x3d02 <loop+0x14c>
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
    4002:	20 91 d2 01 	lds	r18, 0x01D2
    4006:	30 91 d3 01 	lds	r19, 0x01D3
    400a:	c9 01       	movw	r24, r18
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	cb 97       	sbiw	r24, 0x3b	; 59
    4010:	08 f0       	brcs	.+2      	; 0x4014 <loop+0x45e>
    4012:	95 ce       	rjmp	.-726    	; 0x3d3e <loop+0x188>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    4014:	8f 2d       	mov	r24, r15
    4016:	0e 94 1b 09 	call	0x1236	; 0x1236 <SetupToEavesdropOnFHT8V(bool)>
    401a:	01 e0       	ldi	r16, 0x01	; 1
    401c:	9e ce       	rjmp	.-708    	; 0x3d5a <loop+0x1a4>
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    }
  }
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	cf 91       	pop	r28
    4028:	df 91       	pop	r29
    402a:	1f 91       	pop	r17
    402c:	0f 91       	pop	r16
    402e:	ff 90       	pop	r15
    4030:	ef 90       	pop	r14
    4032:	df 90       	pop	r13
    4034:	cf 90       	pop	r12
    4036:	bf 90       	pop	r11
    4038:	af 90       	pop	r10
    403a:	9f 90       	pop	r9
    403c:	8f 90       	pop	r8
    403e:	08 95       	ret

00004040 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	f8 2e       	mov	r15, r24
    404c:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    404e:	83 e8       	ldi	r24, 0x83	; 131
    4050:	9e e1       	ldi	r25, 0x1E	; 30
    4052:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    4056:	81 ee       	ldi	r24, 0xE1	; 225
    4058:	95 e0       	ldi	r25, 0x05	; 5
    405a:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    405e:	cf 2d       	mov	r28, r15
    4060:	d0 e0       	ldi	r29, 0x00	; 0
    4062:	ce 01       	movw	r24, r28
    4064:	6a e0       	ldi	r22, 0x0A	; 10
    4066:	70 e0       	ldi	r23, 0x00	; 0
    4068:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    406c:	8e ed       	ldi	r24, 0xDE	; 222
    406e:	95 e0       	ldi	r25, 0x05	; 5
    4070:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    4074:	c8 01       	movw	r24, r16
    4076:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    407a:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    407e:	5c 9a       	sbi	0x0b, 4	; 11
  sleepLowPowerMs(2*PP_OFF_MS);
    4080:	80 e4       	ldi	r24, 0x40	; 64
    4082:	9f e0       	ldi	r25, 0x0F	; 15
    4084:	07 c0       	rjmp	.+14     	; 0x4094 <posPOST(unsigned char, __FlashStringHelper const*)+0x54>
  
  int i = position;
  while(--i >= 0)
    {
    LED_HEATCALL_ON();
    4086:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    408e:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(PP_OFF_MS);
    4090:	8f e9       	ldi	r24, 0x9F	; 159
    4092:	97 e0       	ldi	r25, 0x07	; 7
    4094:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
  sleepLowPowerMs(2*PP_OFF_MS);
  
  int i = position;
  while(--i >= 0)
    4098:	21 97       	sbiw	r28, 0x01	; 1
    409a:	8f ef       	ldi	r24, 0xFF	; 255
    409c:	cf 3f       	cpi	r28, 0xFF	; 255
    409e:	d8 07       	cpc	r29, r24
    40a0:	91 f7       	brne	.-28     	; 0x4086 <posPOST(unsigned char, __FlashStringHelper const*)+0x46>
    tinyPause();
    LED_HEATCALL_OFF();
    sleepLowPowerMs(PP_OFF_MS);
    }

  sleepLowPowerMs(PP_OFF_MS);
    40a2:	8f e9       	ldi	r24, 0x9F	; 159
    40a4:	97 e0       	ldi	r25, 0x07	; 7
    40a6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  LED_HEATCALL_ON();
    40aa:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000);
    40ac:	83 e8       	ldi	r24, 0x83	; 131
    40ae:	9e e1       	ldi	r25, 0x1E	; 30
    40b0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
    40b8:	1f 91       	pop	r17
    40ba:	0f 91       	pop	r16
    40bc:	ff 90       	pop	r15
    40be:	08 95       	ret

000040c0 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    40c0:	0e 94 44 12 	call	0x2488	; 0x2488 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    40c4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    40c8:	84 e0       	ldi	r24, 0x04	; 4
    40ca:	61 e0       	ldi	r22, 0x01	; 1
    40cc:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    40d0:	5c 98       	cbi	0x0b, 4	; 11
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    40d8:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    40da:	83 e0       	ldi	r24, 0x03	; 3
    40dc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <nap(signed char)>
    40e0:	f7 cf       	rjmp	.-18     	; 0x40d0 <panic()+0x10>

000040e2 <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    40e2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    40e6:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
  }
    40ea:	08 95       	ret

000040ec <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    40ec:	8d ef       	ldi	r24, 0xFD	; 253
    40ee:	95 e0       	ldi	r25, 0x05	; 5
    40f0:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    40f4:	82 e0       	ldi	r24, 0x02	; 2
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	6a e0       	ldi	r22, 0x0A	; 10
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code "));
    4100:	85 ef       	ldi	r24, 0xF5	; 245
    4102:	95 e0       	ldi	r25, 0x05	; 5
    4104:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    4108:	85 e0       	ldi	r24, 0x05	; 5
    410a:	91 e0       	ldi	r25, 0x01	; 1
    410c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    4110:	8b ee       	ldi	r24, 0xEB	; 235
    4112:	95 e0       	ldi	r25, 0x05	; 5
    4114:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    4118:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
  }
    411c:	08 95       	ret

0000411e <setup>:

// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    411e:	2f 92       	push	r2
    4120:	3f 92       	push	r3
    4122:	4f 92       	push	r4
    4124:	5f 92       	push	r5
    4126:	6f 92       	push	r6
    4128:	7f 92       	push	r7
    412a:	8f 92       	push	r8
    412c:	9f 92       	push	r9
    412e:	af 92       	push	r10
    4130:	bf 92       	push	r11
    4132:	cf 92       	push	r12
    4134:	df 92       	push	r13
    4136:	ef 92       	push	r14
    4138:	ff 92       	push	r15
    413a:	0f 93       	push	r16
    413c:	1f 93       	push	r17
    413e:	df 93       	push	r29
    4140:	cf 93       	push	r28
    4142:	00 d0       	rcall	.+0      	; 0x4144 <setup+0x26>
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    4148:	0e 94 ba 10 	call	0x2174	; 0x2174 <powerSetup()>

  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    414c:	e0 90 b2 00 	lds	r14, 0x00B2
    4150:	0e e0       	ldi	r16, 0x0E	; 14
    4152:	10 e0       	ldi	r17, 0x00	; 0
    4154:	3f c0       	rjmp	.+126    	; 0x41d4 <setup+0xb6>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    4156:	04 30       	cpi	r16, 0x04	; 4
    4158:	11 05       	cpc	r17, r1
    415a:	31 f1       	breq	.+76     	; 0x41a8 <setup+0x8a>
    415c:	05 30       	cpi	r16, 0x05	; 5
    415e:	11 05       	cpc	r17, r1
    4160:	4c f4       	brge	.+18     	; 0x4174 <setup+0x56>
    4162:	02 30       	cpi	r16, 0x02	; 2
    4164:	11 05       	cpc	r17, r1
    4166:	79 f1       	breq	.+94     	; 0x41c6 <setup+0xa8>
    4168:	03 30       	cpi	r16, 0x03	; 3
    416a:	11 05       	cpc	r17, r1
    416c:	34 f5       	brge	.+76     	; 0x41ba <setup+0x9c>
    416e:	17 ff       	sbrs	r17, 7
    4170:	24 c0       	rjmp	.+72     	; 0x41ba <setup+0x9c>
    4172:	13 c0       	rjmp	.+38     	; 0x419a <setup+0x7c>
    4174:	09 30       	cpi	r16, 0x09	; 9
    4176:	11 05       	cpc	r17, r1
    4178:	49 f1       	breq	.+82     	; 0x41cc <setup+0xae>
    417a:	0a 30       	cpi	r16, 0x0A	; 10
    417c:	11 05       	cpc	r17, r1
    417e:	3c f4       	brge	.+14     	; 0x418e <setup+0x70>
    4180:	05 30       	cpi	r16, 0x05	; 5
    4182:	11 05       	cpc	r17, r1
    4184:	d1 f0       	breq	.+52     	; 0x41ba <setup+0x9c>
    4186:	08 30       	cpi	r16, 0x08	; 8
    4188:	11 05       	cpc	r17, r1
    418a:	39 f4       	brne	.+14     	; 0x419a <setup+0x7c>
    418c:	16 c0       	rjmp	.+44     	; 0x41ba <setup+0x9c>
    418e:	0a 30       	cpi	r16, 0x0A	; 10
    4190:	11 05       	cpc	r17, r1
    4192:	a9 f0       	breq	.+42     	; 0x41be <setup+0xa0>
    4194:	0c 30       	cpi	r16, 0x0C	; 12
    4196:	11 05       	cpc	r17, r1
    4198:	a1 f0       	breq	.+40     	; 0x41c2 <setup+0xa4>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    419a:	80 2f       	mov	r24, r16
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	0e 94 32 26 	call	0x4c64	; 0x4c64 <digitalWrite>
    41a2:	80 2f       	mov	r24, r16
    41a4:	61 e0       	ldi	r22, 0x01	; 1
    41a6:	14 c0       	rjmp	.+40     	; 0x41d0 <setup+0xb2>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    41a8:	84 e0       	ldi	r24, 0x04	; 4
    41aa:	61 e0       	ldi	r22, 0x01	; 1
    41ac:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
    41b0:	84 e0       	ldi	r24, 0x04	; 4
    41b2:	60 e0       	ldi	r22, 0x00	; 0
    41b4:	0e 94 32 26 	call	0x4c64	; 0x4c64 <digitalWrite>
    41b8:	0d c0       	rjmp	.+26     	; 0x41d4 <setup+0xb6>
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
#ifdef BUTTON_LEARN2_L
      case BUTTON_LEARN2_L: // Learn button 2 is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    41ba:	80 2f       	mov	r24, r16
    41bc:	05 c0       	rjmp	.+10     	; 0x41c8 <setup+0xaa>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    41be:	8a e0       	ldi	r24, 0x0A	; 10
    41c0:	03 c0       	rjmp	.+6      	; 0x41c8 <setup+0xaa>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    41c2:	8c e0       	ldi	r24, 0x0C	; 12
    41c4:	01 c0       	rjmp	.+2      	; 0x41c8 <setup+0xaa>
#endif

#ifdef PIN_OW_DQ_DATA
      // Weak pull-up to avoid leakage current.
      case PIN_OW_DQ_DATA: { pinMode(PIN_OW_DQ_DATA, INPUT_PULLUP); break; }
    41c6:	82 e0       	ldi	r24, 0x02	; 2
    41c8:	62 e0       	ldi	r22, 0x02	; 2
    41ca:	02 c0       	rjmp	.+4      	; 0x41d0 <setup+0xb2>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    41cc:	89 e0       	ldi	r24, 0x09	; 9
    41ce:	60 e0       	ldi	r22, 0x00	; 0
    41d0:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    41d4:	01 50       	subi	r16, 0x01	; 1
    41d6:	10 40       	sbci	r17, 0x00	; 0
    41d8:	17 ff       	sbrs	r17, 7
    41da:	bd cf       	rjmp	.-134    	; 0x4156 <setup+0x38>

  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    41dc:	0e 94 9d 13 	call	0x273a	; 0x273a <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    41e0:	8a ec       	ldi	r24, 0xCA	; 202
    41e2:	95 e0       	ldi	r25, 0x05	; 5
    41e4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    41e8:	0e 94 76 20 	call	0x40ec	; 0x40ec <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    41ec:	f9 99       	sbic	0x1f, 1	; 31
    41ee:	fe cf       	rjmp	.-4      	; 0x41ec <setup+0xce>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    41f0:	86 e0       	ldi	r24, 0x06	; 6
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	92 bd       	out	0x22, r25	; 34
    41f6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    41f8:	f8 9a       	sbi	0x1f, 0	; 31
    41fa:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    41fc:	f9 99       	sbic	0x1f, 1	; 31
    41fe:	fe cf       	rjmp	.-4      	; 0x41fc <setup+0xde>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    4200:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    4202:	86 e0       	ldi	r24, 0x06	; 6
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	92 bd       	out	0x22, r25	; 34
    4208:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    420a:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    420c:	10 bd       	out	0x20, r17	; 32
    420e:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	fa 9a       	sbi	0x1f, 2	; 31
    4216:	f9 9a       	sbi	0x1f, 1	; 31
    4218:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    421a:	8b ea       	ldi	r24, 0xAB	; 171
    421c:	95 e0       	ldi	r25, 0x05	; 5
    421e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Reset count: ");
    4222:	8d e9       	ldi	r24, 0x9D	; 157
    4224:	95 e0       	ldi	r25, 0x05	; 5
    4226:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    422a:	81 2f       	mov	r24, r17
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	6a e0       	ldi	r22, 0x0A	; 10
    4230:	70 e0       	ldi	r23, 0x00	; 0
    4232:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    4236:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
//  DEBUG_SERIAL_PRINT_FLASHSTRING("MCUSR: "); // bits: 3 WDRF, 2 BORF, 1 EXTRF, 0 PORF.
//  DEBUG_SERIAL_PRINTFMT(mcusr, HEX);
//  DEBUG_SERIAL_PRINTLN();
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    423a:	82 e9       	ldi	r24, 0x92	; 146
    423c:	95 e0       	ldi	r25, 0x05	; 5
    423e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    4242:	80 91 49 03 	lds	r24, 0x0349
    4246:	90 91 4a 03 	lds	r25, 0x034A
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	11 f0       	breq	.+4      	; 0x4252 <setup+0x134>
    424e:	9c 01       	movw	r18, r24
    4250:	02 c0       	rjmp	.+4      	; 0x4256 <setup+0x138>
    4252:	2d e4       	ldi	r18, 0x4D	; 77
    4254:	33 e0       	ldi	r19, 0x03	; 3
    4256:	ce 01       	movw	r24, r28
    4258:	01 96       	adiw	r24, 0x01	; 1
    425a:	82 1b       	sub	r24, r18
    425c:	93 0b       	sbc	r25, r19
    425e:	6a e0       	ldi	r22, 0x0A	; 10
    4260:	70 e0       	ldi	r23, 0x00	; 0
    4262:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    4266:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
#ifdef UNIT_TESTS
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS WILL BE RUN...");
#endif
#endif

  posPOST(1, F("about to test RFM23"));
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	6e e7       	ldi	r22, 0x7E	; 126
    426e:	75 e0       	ldi	r23, 0x05	; 5
    4270:	0e 94 20 20 	call	0x4040	; 0x4040 <posPOST(unsigned char, __FlashStringHelper const*)>
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    4274:	0e 94 44 12 	call	0x2488	; 0x2488 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    4278:	0e 94 2a 13 	call	0x2654	; 0x2654 <RFM22CheckConnected()>
    427c:	88 23       	and	r24, r24
    427e:	11 f4       	brne	.+4      	; 0x4284 <setup+0x166>
    4280:	0e 94 60 20 	call	0x40c0	; 0x40c0 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    4284:	88 e6       	ldi	r24, 0x68	; 104
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	0e 94 23 12 	call	0x2446	; 0x2446 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    428c:	0e 94 88 12 	call	0x2510	; 0x2510 <RFM22ModeStandbyAndClearState()>
#endif

  posPOST(2, F("RFM23 OK"));
    4290:	82 e0       	ldi	r24, 0x02	; 2
    4292:	65 e7       	ldi	r22, 0x75	; 117
    4294:	75 e0       	ldi	r23, 0x05	; 5
    4296:	0e 94 20 20 	call	0x4040	; 0x4040 <posPOST(unsigned char, __FlashStringHelper const*)>
  // Do additional POST.
  optionalPOST();
#endif

  // Get current power supply voltage.
  const uint16_t Vcc = readBatterymV();
    429a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <readBatterymV()>
    429e:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    42a0:	8f e6       	ldi	r24, 0x6F	; 111
    42a2:	95 e0       	ldi	r25, 0x05	; 5
    42a4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    42a8:	c1 01       	movw	r24, r2
    42aa:	6a e0       	ldi	r22, 0x0A	; 10
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    42b2:	8c e6       	ldi	r24, 0x6C	; 108
    42b4:	95 e0       	ldi	r25, 0x05	; 5
    42b6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement.
  const int intTempC16 = readInternalTemperatureC16();
    42ba:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <readInternalTemperatureC16()>
    42be:	2c 01       	movw	r4, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    42c0:	81 e6       	ldi	r24, 0x61	; 97
    42c2:	95 e0       	ldi	r25, 0x05	; 5
    42c4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    42c8:	c2 01       	movw	r24, r4
    42ca:	08 96       	adiw	r24, 0x08	; 8
    42cc:	e4 e0       	ldi	r30, 0x04	; 4
    42ce:	95 95       	asr	r25
    42d0:	87 95       	ror	r24
    42d2:	ea 95       	dec	r30
    42d4:	e1 f7       	brne	.-8      	; 0x42ce <setup+0x1b0>
    42d6:	6a e0       	ldi	r22, 0x0A	; 10
    42d8:	70 e0       	ldi	r23, 0x00	; 0
    42da:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    42de:	8c e5       	ldi	r24, 0x5C	; 92
    42e0:	95 e0       	ldi	r25, 0x05	; 5
    42e2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    42e6:	c2 01       	movw	r24, r4
    42e8:	6a e0       	ldi	r22, 0x0A	; 10
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    42f0:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
#endif

  posPOST(3, F("internal sensors OK, next light/temp/other"));
    42f4:	83 e0       	ldi	r24, 0x03	; 3
    42f6:	61 e3       	ldi	r22, 0x31	; 49
    42f8:	75 e0       	ldi	r23, 0x05	; 5
    42fa:	0e 94 20 20 	call	0x4040	; 0x4040 <posPOST(unsigned char, __FlashStringHelper const*)>

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
    42fe:	89 ef       	ldi	r24, 0xF9	; 249
    4300:	94 e0       	ldi	r25, 0x04	; 4
    4302:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Collect full set of environmental values before entering loop().
  // This should also help ensure that sensors are properly initialised.
  const int light = readAmbientLight();
    4306:	0e 94 04 04 	call	0x808	; 0x808 <readAmbientLight()>
    430a:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    430c:	81 ef       	ldi	r24, 0xF1	; 241
    430e:	94 e0       	ldi	r25, 0x04	; 4
    4310:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    4314:	c3 01       	movw	r24, r6
    4316:	6a e0       	ldi	r22, 0x0A	; 10
    4318:	70 e0       	ldi	r23, 0x00	; 0
    431a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    431e:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }

  const int heat = readTemperatureC16();
    4322:	0e 94 20 16 	call	0x2c40	; 0x2c40 <readTemperatureC16()>
    4326:	4c 01       	movw	r8, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    4328:	8a ee       	ldi	r24, 0xEA	; 234
    432a:	94 e0       	ldi	r25, 0x04	; 4
    432c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    4330:	c4 01       	movw	r24, r8
    4332:	6a e0       	ldi	r22, 0x0A	; 10
    4334:	70 e0       	ldi	r23, 0x00	; 0
    4336:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    433a:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
#endif

#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = readTempPot();
    433e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <readTempPot()>
    4342:	8c 01       	movw	r16, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp pot: ");
    4344:	8f ed       	ldi	r24, 0xDF	; 223
    4346:	94 e0       	ldi	r25, 0x04	; 4
    4348:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(tempPot);
    434c:	c8 01       	movw	r24, r16
    434e:	6a e0       	ldi	r22, 0x0A	; 10
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    4356:	0e 94 76 15 	call	0x2aec	; 0x2aec <serialPrintlnAndFlush()>
#endif
#endif

  // Check buttons not stuck enabled.
  if(fastDigitalRead(BUTTON_MODE_L) == LOW) { panic(F("M stuck")); }
    435a:	4d 99       	sbic	0x09, 5	; 9
    435c:	04 c0       	rjmp	.+8      	; 0x4366 <setup+0x248>
    435e:	87 ed       	ldi	r24, 0xD7	; 215
    4360:	94 e0       	ldi	r25, 0x04	; 4
    4362:	0e 94 71 20 	call	0x40e2	; 0x40e2 <panic(__FlashStringHelper const*)>
#if defined(BUTTON_LEARN_L)
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW) { panic(F("L stuck")); }
    4366:	18 99       	sbic	0x03, 0	; 3
    4368:	04 c0       	rjmp	.+8      	; 0x4372 <setup+0x254>
    436a:	8f ec       	ldi	r24, 0xCF	; 207
    436c:	94 e0       	ldi	r25, 0x04	; 4
    436e:	0e 94 71 20 	call	0x40e2	; 0x40e2 <panic(__FlashStringHelper const*)>
#endif
#if defined(BUTTON_LEARN2_L)
  if(fastDigitalRead(BUTTON_LEARN2_L) == LOW) { panic(F("L2 stuck")); }
    4372:	4b 99       	sbic	0x09, 3	; 9
    4374:	04 c0       	rjmp	.+8      	; 0x437e <setup+0x260>
    4376:	86 ec       	ldi	r24, 0xC6	; 198
    4378:	94 e0       	ldi	r25, 0x04	; 4
    437a:	0e 94 71 20 	call	0x40e2	; 0x40e2 <panic(__FlashStringHelper const*)>
#endif


  posPOST(4, F("light/temp OK"));
    437e:	84 e0       	ldi	r24, 0x04	; 4
    4380:	68 eb       	ldi	r22, 0xB8	; 184
    4382:	74 e0       	ldi	r23, 0x04	; 4
    4384:	0e 94 20 20 	call	0x4040	; 0x4040 <posPOST(unsigned char, __FlashStringHelper const*)>

#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
#endif
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeCallForHeat();
    4388:	0e 94 c6 06 	call	0xd8c	; 0xd8c <computeCallForHeat()>
#if defined(USE_MODULE_FHT8VSIMPLE)
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored.
  FHT8VCreateValveSetCmdFrame();
    438c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <FHT8VCreateValveSetCmdFrame()>
    4390:	e0 e0       	ldi	r30, 0x00	; 0
    4392:	f1 e0       	ldi	r31, 0x01	; 1
    4394:	aa 24       	eor	r10, r10
    4396:	aa 94       	dec	r10
    4398:	ba 2c       	mov	r11, r10
    439a:	81 91       	ld	r24, Z+
    439c:	95 01       	movw	r18, r10
    439e:	28 27       	eor	r18, r24
    43a0:	02 2e       	mov	r0, r18
    43a2:	22 95       	swap	r18
    43a4:	20 7f       	andi	r18, 0xF0	; 240
    43a6:	20 25       	eor	r18, r0
    43a8:	03 2e       	mov	r0, r19
    43aa:	32 2f       	mov	r19, r18
    43ac:	22 95       	swap	r18
    43ae:	2f 70       	andi	r18, 0x0F	; 15
    43b0:	02 26       	eor	r0, r18
    43b2:	26 95       	lsr	r18
    43b4:	32 27       	eor	r19, r18
    43b6:	23 27       	eor	r18, r19
    43b8:	22 0f       	add	r18, r18
    43ba:	22 0f       	add	r18, r18
    43bc:	22 0f       	add	r18, r18
    43be:	20 25       	eor	r18, r0
    43c0:	59 01       	movw	r10, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    43c2:	39 e0       	ldi	r19, 0x09	; 9
    43c4:	e0 30       	cpi	r30, 0x00	; 0
    43c6:	f3 07       	cpc	r31, r19
    43c8:	41 f7       	brne	.-48     	; 0x439a <setup+0x27c>
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	cc 24       	eor	r12, r12
    43d0:	ca 94       	dec	r12
    43d2:	dc 2c       	mov	r13, r12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    43d4:	f9 99       	sbic	0x1f, 1	; 31
    43d6:	fe cf       	rjmp	.-4      	; 0x43d4 <setup+0x2b6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    43d8:	32 bd       	out	0x22, r19	; 34
    43da:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    43dc:	f8 9a       	sbi	0x1f, 0	; 31
    43de:	80 b5       	in	r24, 0x20	; 32
    43e0:	a6 01       	movw	r20, r12
    43e2:	48 27       	eor	r20, r24
    43e4:	04 2e       	mov	r0, r20
    43e6:	42 95       	swap	r20
    43e8:	40 7f       	andi	r20, 0xF0	; 240
    43ea:	40 25       	eor	r20, r0
    43ec:	05 2e       	mov	r0, r21
    43ee:	54 2f       	mov	r21, r20
    43f0:	42 95       	swap	r20
    43f2:	4f 70       	andi	r20, 0x0F	; 15
    43f4:	04 26       	eor	r0, r20
    43f6:	46 95       	lsr	r20
    43f8:	54 27       	eor	r21, r20
    43fa:	45 27       	eor	r20, r21
    43fc:	44 0f       	add	r20, r20
    43fe:	44 0f       	add	r20, r20
    4400:	44 0f       	add	r20, r20
    4402:	40 25       	eor	r20, r0
    4404:	6a 01       	movw	r12, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    4406:	2f 5f       	subi	r18, 0xFF	; 255
    4408:	3f 4f       	sbci	r19, 0xFF	; 255
    440a:	54 e0       	ldi	r21, 0x04	; 4
    440c:	20 30       	cpi	r18, 0x00	; 0
    440e:	35 07       	cpc	r19, r21
    4410:	09 f7       	brne	.-62     	; 0x43d4 <setup+0x2b6>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Starting seed computation...");
#endif
  const uint16_t srseed = sramCRC();
  const uint16_t eeseed = eeCRC();
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    4412:	f0 90 b2 00 	lds	r15, 0x00B2
  if(laterSCT == earlySCT)
    4416:	fe 14       	cp	r15, r14
    4418:	09 f5       	brne	.+66     	; 0x445c <setup+0x33e>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    441a:	8b e8       	ldi	r24, 0x8B	; 139
    441c:	94 e0       	ldi	r25, 0x04	; 4
    441e:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4422:	04 e1       	ldi	r16, 0x14	; 20
    4424:	10 e0       	ldi	r17, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    4426:	01 50       	subi	r16, 0x01	; 1
    4428:	10 40       	sbci	r17, 0x00	; 0
    442a:	8f ef       	ldi	r24, 0xFF	; 255
    442c:	0f 3f       	cpi	r16, 0xFF	; 255
    442e:	18 07       	cpc	r17, r24
    4430:	09 f4       	brne	.+2      	; 0x4434 <setup+0x316>
    4432:	86 c0       	rjmp	.+268    	; 0x4540 <setup+0x422>
    4434:	80 91 b2 00 	lds	r24, 0x00B2
    4438:	f8 16       	cp	r15, r24
    443a:	09 f0       	breq	.+2      	; 0x443e <setup+0x320>
    443c:	81 c0       	rjmp	.+258    	; 0x4540 <setup+0x422>
      {
      sleepLowPowerMs(691);
    443e:	84 e1       	ldi	r24, 0x14	; 20
    4440:	95 e1       	ldi	r25, 0x15	; 21
    4442:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      captureEntropy1();
    4446:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <captureEntropy1()>
    444a:	ed cf       	rjmp	.-38     	; 0x4426 <setup+0x308>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    444c:	83 e6       	ldi	r24, 0x63	; 99
    444e:	94 e0       	ldi	r25, 0x04	; 4
    4450:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(F("XTAL dead")); // Async clock not running.
    4454:	89 e5       	ldi	r24, 0x59	; 89
    4456:	94 e0       	ldi	r25, 0x04	; 4
    4458:	0e 94 71 20 	call	0x40e2	; 0x40e2 <panic(__FlashStringHelper const*)>
      }
    }
  posPOST(5, F("slow RTC clock OK"));
    445c:	85 e0       	ldi	r24, 0x05	; 5
    445e:	67 e4       	ldi	r22, 0x47	; 71
    4460:	74 e0       	ldi	r23, 0x04	; 4
    4462:	0e 94 20 20 	call	0x4040	; 0x4040 <posPOST(unsigned char, __FlashStringHelper const*)>
  // DHD20130430: maybe as much as 16 bits of entropy on each reset in seed1, concentrated in the least-significant bits.
  const uint16_t s16 = (__DATE__[5]) ^ ((getMinutesSinceMidnightLT() << 5) ^ (((int)getSubCycleTime()) << 7) ^ (heat << 2) ^ (light << 6) ^ Vcc ^ intTempC16); /* This fits in an int (16 bits). */
    4466:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <getMinutesSinceMidnightLT()>
    446a:	00 91 b2 00 	lds	r16, 0x00B2
    446e:	10 e0       	ldi	r17, 0x00	; 0
    4470:	16 95       	lsr	r17
    4472:	10 2f       	mov	r17, r16
    4474:	00 27       	eor	r16, r16
    4476:	17 95       	ror	r17
    4478:	07 95       	ror	r16
    447a:	03 63       	ori	r16, 0x33	; 51
    447c:	02 25       	eor	r16, r2
    447e:	13 25       	eor	r17, r3
    4480:	04 25       	eor	r16, r4
    4482:	15 25       	eor	r17, r5
    4484:	88 0c       	add	r8, r8
    4486:	99 1c       	adc	r9, r9
    4488:	88 0c       	add	r8, r8
    448a:	99 1c       	adc	r9, r9
    448c:	08 25       	eor	r16, r8
    448e:	19 25       	eor	r17, r9
    4490:	56 e0       	ldi	r21, 0x06	; 6
    4492:	66 0c       	add	r6, r6
    4494:	77 1c       	adc	r7, r7
    4496:	5a 95       	dec	r21
    4498:	e1 f7       	brne	.-8      	; 0x4492 <setup+0x374>
    449a:	06 25       	eor	r16, r6
    449c:	17 25       	eor	r17, r7
    449e:	45 e0       	ldi	r20, 0x05	; 5
    44a0:	88 0f       	add	r24, r24
    44a2:	99 1f       	adc	r25, r25
    44a4:	4a 95       	dec	r20
    44a6:	e1 f7       	brne	.-8      	; 0x44a0 <setup+0x382>
    44a8:	08 27       	eor	r16, r24
    44aa:	19 27       	eor	r17, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  seedRNG8((uint8_t) s16, (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    44ac:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <clockJitterWDT()>
    44b0:	98 01       	movw	r18, r16
    44b2:	2c 0d       	add	r18, r12
    44b4:	3d 1d       	adc	r19, r13
    44b6:	48 2f       	mov	r20, r24
    44b8:	4a 25       	eor	r20, r10
    44ba:	80 2f       	mov	r24, r16
    44bc:	63 2f       	mov	r22, r19
    44be:	0e 94 de 10 	call	0x21bc	; 0x21bc <seedRNG8(unsigned char, unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    44c2:	8d 2d       	mov	r24, r13
    44c4:	99 27       	eor	r25, r25
    44c6:	c2 96       	adiw	r24, 0x32	; 50
    44c8:	80 27       	eor	r24, r16
    44ca:	91 27       	eor	r25, r17
    44cc:	83 70       	andi	r24, 0x03	; 3
    44ce:	90 70       	andi	r25, 0x00	; 0
    44d0:	02 96       	adiw	r24, 0x02	; 2
    44d2:	18 2f       	mov	r17, r24
    44d4:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    44d6:	f9 99       	sbic	0x1f, 1	; 31
    44d8:	fe cf       	rjmp	.-4      	; 0x44d6 <setup+0x3b8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    44da:	92 bd       	out	0x22, r25	; 34
    44dc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    44de:	f8 9a       	sbi	0x1f, 0	; 31
    44e0:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    44e2:	88 23       	and	r24, r24
    44e4:	29 f4       	brne	.+10     	; 0x44f0 <setup+0x3d2>
    44e6:	81 2f       	mov	r24, r17
    44e8:	90 2f       	mov	r25, r16
    44ea:	0e 94 8b 07 	call	0xf16	; 0xf16 <eeprom_smart_erase_byte(unsigned char*)>
    44ee:	08 c0       	rjmp	.+16     	; 0x4500 <setup+0x3e2>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    44f0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <clockJitterEntropyByte()>
    44f4:	68 2f       	mov	r22, r24
    44f6:	6c 0d       	add	r22, r12
    44f8:	81 2f       	mov	r24, r17
    44fa:	90 2f       	mov	r25, r16
    44fc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
  DEBUG_SERIAL_PRINTLN();
#endif

  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    4500:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    4502:	8e e2       	ldi	r24, 0x2E	; 46
    4504:	94 e0       	ldi	r25, 0x04	; 4
    4506:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

  // Report initial status.
  serialStatusReport();
    450a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <serialStatusReport()>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    450e:	80 91 b5 01 	lds	r24, 0x01B5
    4512:	80 93 d0 01 	sts	0x01D0, r24
  }
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	cf 91       	pop	r28
    451c:	df 91       	pop	r29
    451e:	1f 91       	pop	r17
    4520:	0f 91       	pop	r16
    4522:	ff 90       	pop	r15
    4524:	ef 90       	pop	r14
    4526:	df 90       	pop	r13
    4528:	cf 90       	pop	r12
    452a:	bf 90       	pop	r11
    452c:	af 90       	pop	r10
    452e:	9f 90       	pop	r9
    4530:	8f 90       	pop	r8
    4532:	7f 90       	pop	r7
    4534:	6f 90       	pop	r6
    4536:	5f 90       	pop	r5
    4538:	4f 90       	pop	r4
    453a:	3f 90       	pop	r3
    453c:	2f 90       	pop	r2
    453e:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    4540:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    4544:	8f 15       	cp	r24, r15
    4546:	09 f0       	breq	.+2      	; 0x454a <setup+0x42c>
    4548:	89 cf       	rjmp	.-238    	; 0x445c <setup+0x33e>
    454a:	80 cf       	rjmp	.-256    	; 0x444c <setup+0x32e>

0000454c <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	80 93 1b 02 	sts	0x021B, r24
  // set address of targeted slave
  txAddress = address;
    4552:	60 93 f8 01 	sts	0x01F8, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4556:	10 92 19 02 	sts	0x0219, r1
  txBufferLength = 0;
    455a:	10 92 1a 02 	sts	0x021A, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    455e:	08 95       	ret

00004560 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4560:	20 91 f7 01 	lds	r18, 0x01F7
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	80 91 f6 01 	lds	r24, 0x01F6
    456a:	28 1b       	sub	r18, r24
    456c:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    456e:	c9 01       	movw	r24, r18
    4570:	08 95       	ret

00004572 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4572:	40 91 f6 01 	lds	r20, 0x01F6
    4576:	80 91 f7 01 	lds	r24, 0x01F7
    457a:	48 17       	cp	r20, r24
    457c:	18 f0       	brcs	.+6      	; 0x4584 <TwoWire::read()+0x12>
    457e:	2f ef       	ldi	r18, 0xFF	; 255
    4580:	3f ef       	ldi	r19, 0xFF	; 255
    4582:	0a c0       	rjmp	.+20     	; 0x4598 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    4584:	e4 2f       	mov	r30, r20
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	ea 52       	subi	r30, 0x2A	; 42
    458a:	fe 4f       	sbci	r31, 0xFE	; 254
    458c:	80 81       	ld	r24, Z
    458e:	28 2f       	mov	r18, r24
    4590:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4592:	4f 5f       	subi	r20, 0xFF	; 255
    4594:	40 93 f6 01 	sts	0x01F6, r20
  }

  return value;
}
    4598:	c9 01       	movw	r24, r18
    459a:	08 95       	ret

0000459c <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    459c:	e0 91 f6 01 	lds	r30, 0x01F6
    45a0:	80 91 f7 01 	lds	r24, 0x01F7
    45a4:	e8 17       	cp	r30, r24
    45a6:	18 f0       	brcs	.+6      	; 0x45ae <TwoWire::peek()+0x12>
    45a8:	ef ef       	ldi	r30, 0xFF	; 255
    45aa:	ff ef       	ldi	r31, 0xFF	; 255
    45ac:	06 c0       	rjmp	.+12     	; 0x45ba <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	ea 52       	subi	r30, 0x2A	; 42
    45b2:	fe 4f       	sbci	r31, 0xFE	; 254
    45b4:	80 81       	ld	r24, Z
    45b6:	e8 2f       	mov	r30, r24
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    45ba:	cf 01       	movw	r24, r30
    45bc:	08 95       	ret

000045be <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    45be:	08 95       	ret

000045c0 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    45c0:	10 92 1f 02 	sts	0x021F, r1
    45c4:	10 92 1e 02 	sts	0x021E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    45c8:	88 ee       	ldi	r24, 0xE8	; 232
    45ca:	93 e0       	ldi	r25, 0x03	; 3
    45cc:	a0 e0       	ldi	r26, 0x00	; 0
    45ce:	b0 e0       	ldi	r27, 0x00	; 0
    45d0:	80 93 20 02 	sts	0x0220, r24
    45d4:	90 93 21 02 	sts	0x0221, r25
    45d8:	a0 93 22 02 	sts	0x0222, r26
    45dc:	b0 93 23 02 	sts	0x0223, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    45e0:	85 e1       	ldi	r24, 0x15	; 21
    45e2:	91 e0       	ldi	r25, 0x01	; 1
    45e4:	90 93 1d 02 	sts	0x021D, r25
    45e8:	80 93 1c 02 	sts	0x021C, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    45ec:	08 95       	ret

000045ee <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    45ee:	cf 92       	push	r12
    45f0:	df 92       	push	r13
    45f2:	ef 92       	push	r14
    45f4:	ff 92       	push	r15
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	7c 01       	movw	r14, r24
    4600:	6b 01       	movw	r12, r22
    4602:	8a 01       	movw	r16, r20
{
  if(transmitting){
    4604:	80 91 1b 02 	lds	r24, 0x021B
    4608:	88 23       	and	r24, r24
    460a:	a1 f0       	breq	.+40     	; 0x4634 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    460c:	c0 e0       	ldi	r28, 0x00	; 0
    460e:	d0 e0       	ldi	r29, 0x00	; 0
    4610:	0d c0       	rjmp	.+26     	; 0x462c <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4612:	d7 01       	movw	r26, r14
    4614:	ed 91       	ld	r30, X+
    4616:	fc 91       	ld	r31, X
    4618:	d6 01       	movw	r26, r12
    461a:	ac 0f       	add	r26, r28
    461c:	bd 1f       	adc	r27, r29
    461e:	01 90       	ld	r0, Z+
    4620:	f0 81       	ld	r31, Z
    4622:	e0 2d       	mov	r30, r0
    4624:	c7 01       	movw	r24, r14
    4626:	6c 91       	ld	r22, X
    4628:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    462a:	21 96       	adiw	r28, 0x01	; 1
    462c:	c0 17       	cp	r28, r16
    462e:	d1 07       	cpc	r29, r17
    4630:	80 f3       	brcs	.-32     	; 0x4612 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    4632:	04 c0       	rjmp	.+8      	; 0x463c <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4634:	cb 01       	movw	r24, r22
    4636:	64 2f       	mov	r22, r20
    4638:	0e 94 29 24 	call	0x4852	; 0x4852 <twi_transmit>
  }
  return quantity;
}
    463c:	c8 01       	movw	r24, r16
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	1f 91       	pop	r17
    4644:	0f 91       	pop	r16
    4646:	ff 90       	pop	r15
    4648:	ef 90       	pop	r14
    464a:	df 90       	pop	r13
    464c:	cf 90       	pop	r12
    464e:	08 95       	ret

00004650 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4650:	df 93       	push	r29
    4652:	cf 93       	push	r28
    4654:	0f 92       	push	r0
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	fc 01       	movw	r30, r24
    465c:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    465e:	80 91 1b 02 	lds	r24, 0x021B
    4662:	88 23       	and	r24, r24
    4664:	c9 f0       	breq	.+50     	; 0x4698 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4666:	80 91 1a 02 	lds	r24, 0x021A
    466a:	80 32       	cpi	r24, 0x20	; 32
    466c:	38 f0       	brcs	.+14     	; 0x467c <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	93 83       	std	Z+3, r25	; 0x03
    4674:	82 83       	std	Z+2, r24	; 0x02
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	15 c0       	rjmp	.+42     	; 0x46a6 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    467c:	80 91 19 02 	lds	r24, 0x0219
    4680:	e8 2f       	mov	r30, r24
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	e7 50       	subi	r30, 0x07	; 7
    4686:	fe 4f       	sbci	r31, 0xFE	; 254
    4688:	99 81       	ldd	r25, Y+1	; 0x01
    468a:	90 83       	st	Z, r25
    ++txBufferIndex;
    468c:	8f 5f       	subi	r24, 0xFF	; 255
    468e:	80 93 19 02 	sts	0x0219, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4692:	80 93 1a 02 	sts	0x021A, r24
    4696:	05 c0       	rjmp	.+10     	; 0x46a2 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4698:	ce 01       	movw	r24, r28
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	61 e0       	ldi	r22, 0x01	; 1
    469e:	0e 94 29 24 	call	0x4852	; 0x4852 <twi_transmit>
    46a2:	21 e0       	ldi	r18, 0x01	; 1
    46a4:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    46a6:	c9 01       	movw	r24, r18
    46a8:	0f 90       	pop	r0
    46aa:	cf 91       	pop	r28
    46ac:	df 91       	pop	r29
    46ae:	08 95       	ret

000046b0 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    46b0:	0f 93       	push	r16
    46b2:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    46b4:	80 91 f8 01 	lds	r24, 0x01F8
    46b8:	69 ef       	ldi	r22, 0xF9	; 249
    46ba:	71 e0       	ldi	r23, 0x01	; 1
    46bc:	40 91 1a 02 	lds	r20, 0x021A
    46c0:	21 e0       	ldi	r18, 0x01	; 1
    46c2:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    46c6:	10 92 19 02 	sts	0x0219, r1
  txBufferLength = 0;
    46ca:	10 92 1a 02 	sts	0x021A, r1
  // indicate that we are done transmitting
  transmitting = 0;
    46ce:	10 92 1b 02 	sts	0x021B, r1
  return ret;
}
    46d2:	0f 91       	pop	r16
    46d4:	08 95       	ret

000046d6 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    46d6:	61 e0       	ldi	r22, 0x01	; 1
    46d8:	0e 94 58 23 	call	0x46b0	; 0x46b0 <TwoWire::endTransmission(unsigned char)>
}
    46dc:	08 95       	ret

000046de <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    46de:	41 32       	cpi	r20, 0x21	; 33
    46e0:	08 f0       	brcs	.+2      	; 0x46e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    46e2:	40 e2       	ldi	r20, 0x20	; 32
    46e4:	86 2f       	mov	r24, r22
    46e6:	66 ed       	ldi	r22, 0xD6	; 214
    46e8:	71 e0       	ldi	r23, 0x01	; 1
    46ea:	0e 94 8b 23 	call	0x4716	; 0x4716 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    46ee:	10 92 f6 01 	sts	0x01F6, r1
  rxBufferLength = read;
    46f2:	80 93 f7 01 	sts	0x01F7, r24

  return read;
}
    46f6:	08 95       	ret

000046f8 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    46f8:	21 e0       	ldi	r18, 0x01	; 1
    46fa:	0e 94 6f 23 	call	0x46de	; 0x46de <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    46fe:	08 95       	ret

00004700 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4700:	10 92 f6 01 	sts	0x01F6, r1
  rxBufferLength = 0;
    4704:	10 92 f7 01 	sts	0x01F7, r1

  txBufferIndex = 0;
    4708:	10 92 19 02 	sts	0x0219, r1
  txBufferLength = 0;
    470c:	10 92 1a 02 	sts	0x021A, r1

  twi_init();
    4710:	0e 94 d5 25 	call	0x4baa	; 0x4baa <twi_init>
}
    4714:	08 95       	ret

00004716 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4716:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4718:	41 32       	cpi	r20, 0x21	; 33
    471a:	10 f0       	brcs	.+4      	; 0x4720 <twi_readFrom+0xa>
    471c:	40 e0       	ldi	r20, 0x00	; 0
    471e:	42 c0       	rjmp	.+132    	; 0x47a4 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4720:	80 91 28 02 	lds	r24, 0x0228
    4724:	88 23       	and	r24, r24
    4726:	e1 f7       	brne	.-8      	; 0x4720 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    4728:	91 e0       	ldi	r25, 0x01	; 1
    472a:	90 93 28 02 	sts	0x0228, r25
  twi_sendStop = sendStop;
    472e:	20 93 2a 02 	sts	0x022A, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4732:	8f ef       	ldi	r24, 0xFF	; 255
    4734:	80 93 95 02 	sts	0x0295, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4738:	10 92 50 02 	sts	0x0250, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    473c:	41 50       	subi	r20, 0x01	; 1
    473e:	40 93 51 02 	sts	0x0251, r20
    4742:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4744:	90 93 29 02 	sts	0x0229, r25
  twi_slarw |= address << 1;
    4748:	80 91 29 02 	lds	r24, 0x0229
    474c:	33 0f       	add	r19, r19
    474e:	83 2b       	or	r24, r19
    4750:	80 93 29 02 	sts	0x0229, r24

  if (true == twi_inRepStart) {
    4754:	80 91 2b 02 	lds	r24, 0x022B
    4758:	81 30       	cpi	r24, 0x01	; 1
    475a:	41 f4       	brne	.+16     	; 0x476c <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    475c:	10 92 2b 02 	sts	0x022B, r1
    TWDR = twi_slarw;
    4760:	80 91 29 02 	lds	r24, 0x0229
    4764:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4768:	85 ec       	ldi	r24, 0xC5	; 197
    476a:	01 c0       	rjmp	.+2      	; 0x476e <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    476c:	85 ee       	ldi	r24, 0xE5	; 229
    476e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4772:	80 91 28 02 	lds	r24, 0x0228
    4776:	81 30       	cpi	r24, 0x01	; 1
    4778:	e1 f3       	breq	.-8      	; 0x4772 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    477a:	80 91 50 02 	lds	r24, 0x0250
    477e:	84 17       	cp	r24, r20
    4780:	10 f4       	brcc	.+4      	; 0x4786 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4782:	40 91 50 02 	lds	r20, 0x0250
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	0a c0       	rjmp	.+20     	; 0x47a0 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    478c:	fb 01       	movw	r30, r22
    478e:	e2 0f       	add	r30, r18
    4790:	f3 1f       	adc	r31, r19
    4792:	d9 01       	movw	r26, r18
    4794:	a0 5d       	subi	r26, 0xD0	; 208
    4796:	bd 4f       	sbci	r27, 0xFD	; 253
    4798:	8c 91       	ld	r24, X
    479a:	80 83       	st	Z, r24
    479c:	2f 5f       	subi	r18, 0xFF	; 255
    479e:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    47a0:	24 17       	cp	r18, r20
    47a2:	a0 f3       	brcs	.-24     	; 0x478c <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    47a4:	84 2f       	mov	r24, r20
    47a6:	08 95       	ret

000047a8 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    47a8:	0f 93       	push	r16
    47aa:	1f 93       	push	r17
    47ac:	58 2f       	mov	r21, r24
    47ae:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    47b0:	41 32       	cpi	r20, 0x21	; 33
    47b2:	10 f0       	brcs	.+4      	; 0x47b8 <twi_writeTo+0x10>
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	4a c0       	rjmp	.+148    	; 0x484c <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    47b8:	80 91 28 02 	lds	r24, 0x0228
    47bc:	88 23       	and	r24, r24
    47be:	e1 f7       	brne	.-8      	; 0x47b8 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    47c0:	82 e0       	ldi	r24, 0x02	; 2
    47c2:	80 93 28 02 	sts	0x0228, r24
  twi_sendStop = sendStop;
    47c6:	00 93 2a 02 	sts	0x022A, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    47ca:	8f ef       	ldi	r24, 0xFF	; 255
    47cc:	80 93 95 02 	sts	0x0295, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    47d0:	10 92 50 02 	sts	0x0250, r1
  twi_masterBufferLength = length;
    47d4:	40 93 51 02 	sts	0x0251, r20
    47d8:	a0 e3       	ldi	r26, 0x30	; 48
    47da:	b2 e0       	ldi	r27, 0x02	; 2
    47dc:	fb 01       	movw	r30, r22
    47de:	02 c0       	rjmp	.+4      	; 0x47e4 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    47e0:	81 91       	ld	r24, Z+
    47e2:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    47e4:	8e 2f       	mov	r24, r30
    47e6:	86 1b       	sub	r24, r22
    47e8:	84 17       	cp	r24, r20
    47ea:	d0 f3       	brcs	.-12     	; 0x47e0 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    47ec:	10 92 29 02 	sts	0x0229, r1
  twi_slarw |= address << 1;
    47f0:	80 91 29 02 	lds	r24, 0x0229
    47f4:	55 0f       	add	r21, r21
    47f6:	85 2b       	or	r24, r21
    47f8:	80 93 29 02 	sts	0x0229, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    47fc:	80 91 2b 02 	lds	r24, 0x022B
    4800:	81 30       	cpi	r24, 0x01	; 1
    4802:	41 f4       	brne	.+16     	; 0x4814 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4804:	10 92 2b 02 	sts	0x022B, r1
    TWDR = twi_slarw;				
    4808:	80 91 29 02 	lds	r24, 0x0229
    480c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4810:	85 ec       	ldi	r24, 0xC5	; 197
    4812:	01 c0       	rjmp	.+2      	; 0x4816 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4814:	85 ee       	ldi	r24, 0xE5	; 229
    4816:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    481a:	11 23       	and	r17, r17
    481c:	21 f0       	breq	.+8      	; 0x4826 <twi_writeTo+0x7e>
    481e:	80 91 28 02 	lds	r24, 0x0228
    4822:	82 30       	cpi	r24, 0x02	; 2
    4824:	e1 f3       	breq	.-8      	; 0x481e <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4826:	80 91 95 02 	lds	r24, 0x0295
    482a:	8f 3f       	cpi	r24, 0xFF	; 255
    482c:	11 f4       	brne	.+4      	; 0x4832 <twi_writeTo+0x8a>
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	0d c0       	rjmp	.+26     	; 0x484c <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4832:	80 91 95 02 	lds	r24, 0x0295
    4836:	80 32       	cpi	r24, 0x20	; 32
    4838:	11 f4       	brne	.+4      	; 0x483e <twi_writeTo+0x96>
    483a:	82 e0       	ldi	r24, 0x02	; 2
    483c:	07 c0       	rjmp	.+14     	; 0x484c <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    483e:	80 91 95 02 	lds	r24, 0x0295
    4842:	80 33       	cpi	r24, 0x30	; 48
    4844:	11 f0       	breq	.+4      	; 0x484a <twi_writeTo+0xa2>
    4846:	84 e0       	ldi	r24, 0x04	; 4
    4848:	01 c0       	rjmp	.+2      	; 0x484c <twi_writeTo+0xa4>
    484a:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    484c:	1f 91       	pop	r17
    484e:	0f 91       	pop	r16
    4850:	08 95       	ret

00004852 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4852:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4854:	61 32       	cpi	r22, 0x21	; 33
    4856:	10 f0       	brcs	.+4      	; 0x485c <twi_transmit+0xa>
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    485c:	80 91 28 02 	lds	r24, 0x0228
    4860:	84 30       	cpi	r24, 0x04	; 4
    4862:	11 f0       	breq	.+4      	; 0x4868 <twi_transmit+0x16>
    4864:	82 e0       	ldi	r24, 0x02	; 2
    4866:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    4868:	60 93 73 02 	sts	0x0273, r22
    486c:	a2 e5       	ldi	r26, 0x52	; 82
    486e:	b2 e0       	ldi	r27, 0x02	; 2
    4870:	84 2f       	mov	r24, r20
    4872:	9c 01       	movw	r18, r24
    4874:	f9 01       	movw	r30, r18
    4876:	02 c0       	rjmp	.+4      	; 0x487c <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    4878:	81 91       	ld	r24, Z+
    487a:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    487c:	8e 2f       	mov	r24, r30
    487e:	84 1b       	sub	r24, r20
    4880:	86 17       	cp	r24, r22
    4882:	d0 f3       	brcs	.-12     	; 0x4878 <twi_transmit+0x26>
    4884:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4886:	08 95       	ret

00004888 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4888:	1f 92       	push	r1
    488a:	0f 92       	push	r0
    488c:	0f b6       	in	r0, 0x3f	; 63
    488e:	0f 92       	push	r0
    4890:	11 24       	eor	r1, r1
    4892:	2f 93       	push	r18
    4894:	3f 93       	push	r19
    4896:	4f 93       	push	r20
    4898:	5f 93       	push	r21
    489a:	6f 93       	push	r22
    489c:	7f 93       	push	r23
    489e:	8f 93       	push	r24
    48a0:	9f 93       	push	r25
    48a2:	af 93       	push	r26
    48a4:	bf 93       	push	r27
    48a6:	ef 93       	push	r30
    48a8:	ff 93       	push	r31
  switch(TW_STATUS){
    48aa:	80 91 b9 00 	lds	r24, 0x00B9
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	88 7f       	andi	r24, 0xF8	; 248
    48b2:	90 70       	andi	r25, 0x00	; 0
    48b4:	80 36       	cpi	r24, 0x60	; 96
    48b6:	91 05       	cpc	r25, r1
    48b8:	09 f4       	brne	.+2      	; 0x48bc <__vector_24+0x34>
    48ba:	f2 c0       	rjmp	.+484    	; 0x4aa0 <__vector_24+0x218>
    48bc:	81 36       	cpi	r24, 0x61	; 97
    48be:	91 05       	cpc	r25, r1
    48c0:	cc f5       	brge	.+114    	; 0x4934 <__vector_24+0xac>
    48c2:	88 32       	cpi	r24, 0x28	; 40
    48c4:	91 05       	cpc	r25, r1
    48c6:	09 f4       	brne	.+2      	; 0x48ca <__vector_24+0x42>
    48c8:	7b c0       	rjmp	.+246    	; 0x49c0 <__vector_24+0x138>
    48ca:	89 32       	cpi	r24, 0x29	; 41
    48cc:	91 05       	cpc	r25, r1
    48ce:	b4 f4       	brge	.+44     	; 0x48fc <__vector_24+0x74>
    48d0:	80 31       	cpi	r24, 0x10	; 16
    48d2:	91 05       	cpc	r25, r1
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <__vector_24+0x50>
    48d6:	6f c0       	rjmp	.+222    	; 0x49b6 <__vector_24+0x12e>
    48d8:	81 31       	cpi	r24, 0x11	; 17
    48da:	91 05       	cpc	r25, r1
    48dc:	3c f4       	brge	.+14     	; 0x48ec <__vector_24+0x64>
    48de:	00 97       	sbiw	r24, 0x00	; 0
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <__vector_24+0x5c>
    48e2:	47 c1       	rjmp	.+654    	; 0x4b72 <__vector_24+0x2ea>
    48e4:	08 97       	sbiw	r24, 0x08	; 8
    48e6:	09 f0       	breq	.+2      	; 0x48ea <__vector_24+0x62>
    48e8:	4f c1       	rjmp	.+670    	; 0x4b88 <__vector_24+0x300>
    48ea:	65 c0       	rjmp	.+202    	; 0x49b6 <__vector_24+0x12e>
    48ec:	88 31       	cpi	r24, 0x18	; 24
    48ee:	91 05       	cpc	r25, r1
    48f0:	09 f4       	brne	.+2      	; 0x48f4 <__vector_24+0x6c>
    48f2:	66 c0       	rjmp	.+204    	; 0x49c0 <__vector_24+0x138>
    48f4:	80 97       	sbiw	r24, 0x20	; 32
    48f6:	09 f0       	breq	.+2      	; 0x48fa <__vector_24+0x72>
    48f8:	47 c1       	rjmp	.+654    	; 0x4b88 <__vector_24+0x300>
    48fa:	82 c0       	rjmp	.+260    	; 0x4a00 <__vector_24+0x178>
    48fc:	80 34       	cpi	r24, 0x40	; 64
    48fe:	91 05       	cpc	r25, r1
    4900:	09 f4       	brne	.+2      	; 0x4904 <__vector_24+0x7c>
    4902:	a4 c0       	rjmp	.+328    	; 0x4a4c <__vector_24+0x1c4>
    4904:	81 34       	cpi	r24, 0x41	; 65
    4906:	91 05       	cpc	r25, r1
    4908:	44 f4       	brge	.+16     	; 0x491a <__vector_24+0x92>
    490a:	80 33       	cpi	r24, 0x30	; 48
    490c:	91 05       	cpc	r25, r1
    490e:	09 f4       	brne	.+2      	; 0x4912 <__vector_24+0x8a>
    4910:	82 c0       	rjmp	.+260    	; 0x4a16 <__vector_24+0x18e>
    4912:	c8 97       	sbiw	r24, 0x38	; 56
    4914:	09 f0       	breq	.+2      	; 0x4918 <__vector_24+0x90>
    4916:	38 c1       	rjmp	.+624    	; 0x4b88 <__vector_24+0x300>
    4918:	89 c0       	rjmp	.+274    	; 0x4a2c <__vector_24+0x1a4>
    491a:	80 35       	cpi	r24, 0x50	; 80
    491c:	91 05       	cpc	r25, r1
    491e:	09 f4       	brne	.+2      	; 0x4922 <__vector_24+0x9a>
    4920:	89 c0       	rjmp	.+274    	; 0x4a34 <__vector_24+0x1ac>
    4922:	88 35       	cpi	r24, 0x58	; 88
    4924:	91 05       	cpc	r25, r1
    4926:	09 f4       	brne	.+2      	; 0x492a <__vector_24+0xa2>
    4928:	96 c0       	rjmp	.+300    	; 0x4a56 <__vector_24+0x1ce>
    492a:	88 34       	cpi	r24, 0x48	; 72
    492c:	91 05       	cpc	r25, r1
    492e:	09 f0       	breq	.+2      	; 0x4932 <__vector_24+0xaa>
    4930:	2b c1       	rjmp	.+598    	; 0x4b88 <__vector_24+0x300>
    4932:	ae c0       	rjmp	.+348    	; 0x4a90 <__vector_24+0x208>
    4934:	88 39       	cpi	r24, 0x98	; 152
    4936:	91 05       	cpc	r25, r1
    4938:	09 f4       	brne	.+2      	; 0x493c <__vector_24+0xb4>
    493a:	13 c1       	rjmp	.+550    	; 0x4b62 <__vector_24+0x2da>
    493c:	89 39       	cpi	r24, 0x99	; 153
    493e:	91 05       	cpc	r25, r1
    4940:	ec f4       	brge	.+58     	; 0x497c <__vector_24+0xf4>
    4942:	88 37       	cpi	r24, 0x78	; 120
    4944:	91 05       	cpc	r25, r1
    4946:	09 f4       	brne	.+2      	; 0x494a <__vector_24+0xc2>
    4948:	ab c0       	rjmp	.+342    	; 0x4aa0 <__vector_24+0x218>
    494a:	89 37       	cpi	r24, 0x79	; 121
    494c:	91 05       	cpc	r25, r1
    494e:	4c f4       	brge	.+18     	; 0x4962 <__vector_24+0xda>
    4950:	88 36       	cpi	r24, 0x68	; 104
    4952:	91 05       	cpc	r25, r1
    4954:	09 f4       	brne	.+2      	; 0x4958 <__vector_24+0xd0>
    4956:	a4 c0       	rjmp	.+328    	; 0x4aa0 <__vector_24+0x218>
    4958:	80 37       	cpi	r24, 0x70	; 112
    495a:	91 05       	cpc	r25, r1
    495c:	09 f0       	breq	.+2      	; 0x4960 <__vector_24+0xd8>
    495e:	14 c1       	rjmp	.+552    	; 0x4b88 <__vector_24+0x300>
    4960:	9f c0       	rjmp	.+318    	; 0x4aa0 <__vector_24+0x218>
    4962:	88 38       	cpi	r24, 0x88	; 136
    4964:	91 05       	cpc	r25, r1
    4966:	09 f4       	brne	.+2      	; 0x496a <__vector_24+0xe2>
    4968:	fc c0       	rjmp	.+504    	; 0x4b62 <__vector_24+0x2da>
    496a:	80 39       	cpi	r24, 0x90	; 144
    496c:	91 05       	cpc	r25, r1
    496e:	09 f4       	brne	.+2      	; 0x4972 <__vector_24+0xea>
    4970:	9d c0       	rjmp	.+314    	; 0x4aac <__vector_24+0x224>
    4972:	80 38       	cpi	r24, 0x80	; 128
    4974:	91 05       	cpc	r25, r1
    4976:	09 f0       	breq	.+2      	; 0x497a <__vector_24+0xf2>
    4978:	07 c1       	rjmp	.+526    	; 0x4b88 <__vector_24+0x300>
    497a:	98 c0       	rjmp	.+304    	; 0x4aac <__vector_24+0x224>
    497c:	80 3b       	cpi	r24, 0xB0	; 176
    497e:	91 05       	cpc	r25, r1
    4980:	09 f4       	brne	.+2      	; 0x4984 <__vector_24+0xfc>
    4982:	c6 c0       	rjmp	.+396    	; 0x4b10 <__vector_24+0x288>
    4984:	81 3b       	cpi	r24, 0xB1	; 177
    4986:	91 05       	cpc	r25, r1
    4988:	4c f4       	brge	.+18     	; 0x499c <__vector_24+0x114>
    498a:	80 3a       	cpi	r24, 0xA0	; 160
    498c:	91 05       	cpc	r25, r1
    498e:	09 f4       	brne	.+2      	; 0x4992 <__vector_24+0x10a>
    4990:	9f c0       	rjmp	.+318    	; 0x4ad0 <__vector_24+0x248>
    4992:	88 3a       	cpi	r24, 0xA8	; 168
    4994:	91 05       	cpc	r25, r1
    4996:	09 f0       	breq	.+2      	; 0x499a <__vector_24+0x112>
    4998:	f7 c0       	rjmp	.+494    	; 0x4b88 <__vector_24+0x300>
    499a:	ba c0       	rjmp	.+372    	; 0x4b10 <__vector_24+0x288>
    499c:	80 3c       	cpi	r24, 0xC0	; 192
    499e:	91 05       	cpc	r25, r1
    49a0:	09 f4       	brne	.+2      	; 0x49a4 <__vector_24+0x11c>
    49a2:	e3 c0       	rjmp	.+454    	; 0x4b6a <__vector_24+0x2e2>
    49a4:	88 3c       	cpi	r24, 0xC8	; 200
    49a6:	91 05       	cpc	r25, r1
    49a8:	09 f4       	brne	.+2      	; 0x49ac <__vector_24+0x124>
    49aa:	df c0       	rjmp	.+446    	; 0x4b6a <__vector_24+0x2e2>
    49ac:	88 3b       	cpi	r24, 0xB8	; 184
    49ae:	91 05       	cpc	r25, r1
    49b0:	09 f0       	breq	.+2      	; 0x49b4 <__vector_24+0x12c>
    49b2:	ea c0       	rjmp	.+468    	; 0x4b88 <__vector_24+0x300>
    49b4:	c2 c0       	rjmp	.+388    	; 0x4b3a <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    49b6:	80 91 29 02 	lds	r24, 0x0229
    49ba:	80 93 bb 00 	sts	0x00BB, r24
    49be:	cf c0       	rjmp	.+414    	; 0x4b5e <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    49c0:	90 91 50 02 	lds	r25, 0x0250
    49c4:	80 91 51 02 	lds	r24, 0x0251
    49c8:	98 17       	cp	r25, r24
    49ca:	68 f4       	brcc	.+26     	; 0x49e6 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    49cc:	90 91 50 02 	lds	r25, 0x0250
    49d0:	e9 2f       	mov	r30, r25
    49d2:	f0 e0       	ldi	r31, 0x00	; 0
    49d4:	e0 5d       	subi	r30, 0xD0	; 208
    49d6:	fd 4f       	sbci	r31, 0xFD	; 253
    49d8:	80 81       	ld	r24, Z
    49da:	80 93 bb 00 	sts	0x00BB, r24
    49de:	9f 5f       	subi	r25, 0xFF	; 255
    49e0:	90 93 50 02 	sts	0x0250, r25
    49e4:	bc c0       	rjmp	.+376    	; 0x4b5e <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    49e6:	80 91 2a 02 	lds	r24, 0x022A
    49ea:	88 23       	and	r24, r24
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <__vector_24+0x168>
    49ee:	4b c0       	rjmp	.+150    	; 0x4a86 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    49f0:	85 ed       	ldi	r24, 0xD5	; 213
    49f2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    49f6:	80 91 bc 00 	lds	r24, 0x00BC
    49fa:	84 fd       	sbrc	r24, 4
    49fc:	fc cf       	rjmp	.-8      	; 0x49f6 <__vector_24+0x16e>
    49fe:	c2 c0       	rjmp	.+388    	; 0x4b84 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4a00:	80 e2       	ldi	r24, 0x20	; 32
    4a02:	80 93 95 02 	sts	0x0295, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4a06:	85 ed       	ldi	r24, 0xD5	; 213
    4a08:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4a0c:	80 91 bc 00 	lds	r24, 0x00BC
    4a10:	84 fd       	sbrc	r24, 4
    4a12:	fc cf       	rjmp	.-8      	; 0x4a0c <__vector_24+0x184>
    4a14:	b7 c0       	rjmp	.+366    	; 0x4b84 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4a16:	80 e3       	ldi	r24, 0x30	; 48
    4a18:	80 93 95 02 	sts	0x0295, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4a1c:	85 ed       	ldi	r24, 0xD5	; 213
    4a1e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4a22:	80 91 bc 00 	lds	r24, 0x00BC
    4a26:	84 fd       	sbrc	r24, 4
    4a28:	fc cf       	rjmp	.-8      	; 0x4a22 <__vector_24+0x19a>
    4a2a:	ac c0       	rjmp	.+344    	; 0x4b84 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4a2c:	88 e3       	ldi	r24, 0x38	; 56
    4a2e:	80 93 95 02 	sts	0x0295, r24
    4a32:	9b c0       	rjmp	.+310    	; 0x4b6a <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4a34:	80 91 50 02 	lds	r24, 0x0250
    4a38:	90 91 bb 00 	lds	r25, 0x00BB
    4a3c:	e8 2f       	mov	r30, r24
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	e0 5d       	subi	r30, 0xD0	; 208
    4a42:	fd 4f       	sbci	r31, 0xFD	; 253
    4a44:	90 83       	st	Z, r25
    4a46:	8f 5f       	subi	r24, 0xFF	; 255
    4a48:	80 93 50 02 	sts	0x0250, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4a4c:	90 91 50 02 	lds	r25, 0x0250
    4a50:	80 91 51 02 	lds	r24, 0x0251
    4a54:	82 c0       	rjmp	.+260    	; 0x4b5a <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4a56:	80 91 50 02 	lds	r24, 0x0250
    4a5a:	90 91 bb 00 	lds	r25, 0x00BB
    4a5e:	e8 2f       	mov	r30, r24
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	e0 5d       	subi	r30, 0xD0	; 208
    4a64:	fd 4f       	sbci	r31, 0xFD	; 253
    4a66:	90 83       	st	Z, r25
    4a68:	8f 5f       	subi	r24, 0xFF	; 255
    4a6a:	80 93 50 02 	sts	0x0250, r24
	if (twi_sendStop)
    4a6e:	80 91 2a 02 	lds	r24, 0x022A
    4a72:	88 23       	and	r24, r24
    4a74:	41 f0       	breq	.+16     	; 0x4a86 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4a76:	85 ed       	ldi	r24, 0xD5	; 213
    4a78:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4a7c:	80 91 bc 00 	lds	r24, 0x00BC
    4a80:	84 fd       	sbrc	r24, 4
    4a82:	fc cf       	rjmp	.-8      	; 0x4a7c <__vector_24+0x1f4>
    4a84:	7f c0       	rjmp	.+254    	; 0x4b84 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	80 93 2b 02 	sts	0x022B, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4a8c:	84 ea       	ldi	r24, 0xA4	; 164
    4a8e:	6e c0       	rjmp	.+220    	; 0x4b6c <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4a90:	85 ed       	ldi	r24, 0xD5	; 213
    4a92:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4a96:	80 91 bc 00 	lds	r24, 0x00BC
    4a9a:	84 fd       	sbrc	r24, 4
    4a9c:	fc cf       	rjmp	.-8      	; 0x4a96 <__vector_24+0x20e>
    4a9e:	72 c0       	rjmp	.+228    	; 0x4b84 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4aa0:	83 e0       	ldi	r24, 0x03	; 3
    4aa2:	80 93 28 02 	sts	0x0228, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4aa6:	10 92 94 02 	sts	0x0294, r1
    4aaa:	59 c0       	rjmp	.+178    	; 0x4b5e <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4aac:	80 91 94 02 	lds	r24, 0x0294
    4ab0:	80 32       	cpi	r24, 0x20	; 32
    4ab2:	08 f0       	brcs	.+2      	; 0x4ab6 <__vector_24+0x22e>
    4ab4:	56 c0       	rjmp	.+172    	; 0x4b62 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4ab6:	80 91 94 02 	lds	r24, 0x0294
    4aba:	90 91 bb 00 	lds	r25, 0x00BB
    4abe:	e8 2f       	mov	r30, r24
    4ac0:	f0 e0       	ldi	r31, 0x00	; 0
    4ac2:	ec 58       	subi	r30, 0x8C	; 140
    4ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ac6:	90 83       	st	Z, r25
    4ac8:	8f 5f       	subi	r24, 0xFF	; 255
    4aca:	80 93 94 02 	sts	0x0294, r24
    4ace:	47 c0       	rjmp	.+142    	; 0x4b5e <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4ad0:	80 91 94 02 	lds	r24, 0x0294
    4ad4:	80 32       	cpi	r24, 0x20	; 32
    4ad6:	30 f4       	brcc	.+12     	; 0x4ae4 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4ad8:	e0 91 94 02 	lds	r30, 0x0294
    4adc:	f0 e0       	ldi	r31, 0x00	; 0
    4ade:	ec 58       	subi	r30, 0x8C	; 140
    4ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ae2:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4ae4:	85 ed       	ldi	r24, 0xD5	; 213
    4ae6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4aea:	80 91 bc 00 	lds	r24, 0x00BC
    4aee:	84 fd       	sbrc	r24, 4
    4af0:	fc cf       	rjmp	.-8      	; 0x4aea <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4af2:	10 92 28 02 	sts	0x0228, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4af6:	60 91 94 02 	lds	r22, 0x0294
    4afa:	e0 91 2e 02 	lds	r30, 0x022E
    4afe:	f0 91 2f 02 	lds	r31, 0x022F
    4b02:	84 e7       	ldi	r24, 0x74	; 116
    4b04:	92 e0       	ldi	r25, 0x02	; 2
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4b0a:	10 92 94 02 	sts	0x0294, r1
    4b0e:	2d c0       	rjmp	.+90     	; 0x4b6a <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4b10:	84 e0       	ldi	r24, 0x04	; 4
    4b12:	80 93 28 02 	sts	0x0228, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4b16:	10 92 72 02 	sts	0x0272, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4b1a:	10 92 73 02 	sts	0x0273, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4b1e:	e0 91 2c 02 	lds	r30, 0x022C
    4b22:	f0 91 2d 02 	lds	r31, 0x022D
    4b26:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4b28:	80 91 73 02 	lds	r24, 0x0273
    4b2c:	88 23       	and	r24, r24
    4b2e:	29 f4       	brne	.+10     	; 0x4b3a <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	80 93 73 02 	sts	0x0273, r24
        twi_txBuffer[0] = 0x00;
    4b36:	10 92 52 02 	sts	0x0252, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4b3a:	90 91 72 02 	lds	r25, 0x0272
    4b3e:	e9 2f       	mov	r30, r25
    4b40:	f0 e0       	ldi	r31, 0x00	; 0
    4b42:	ee 5a       	subi	r30, 0xAE	; 174
    4b44:	fd 4f       	sbci	r31, 0xFD	; 253
    4b46:	80 81       	ld	r24, Z
    4b48:	80 93 bb 00 	sts	0x00BB, r24
    4b4c:	9f 5f       	subi	r25, 0xFF	; 255
    4b4e:	90 93 72 02 	sts	0x0272, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4b52:	90 91 72 02 	lds	r25, 0x0272
    4b56:	80 91 73 02 	lds	r24, 0x0273
    4b5a:	98 17       	cp	r25, r24
    4b5c:	10 f4       	brcc	.+4      	; 0x4b62 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4b5e:	85 ec       	ldi	r24, 0xC5	; 197
    4b60:	01 c0       	rjmp	.+2      	; 0x4b64 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4b62:	85 e8       	ldi	r24, 0x85	; 133
    4b64:	80 93 bc 00 	sts	0x00BC, r24
    4b68:	0f c0       	rjmp	.+30     	; 0x4b88 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4b6a:	85 ec       	ldi	r24, 0xC5	; 197
    4b6c:	80 93 bc 00 	sts	0x00BC, r24
    4b70:	09 c0       	rjmp	.+18     	; 0x4b84 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4b72:	10 92 95 02 	sts	0x0295, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4b76:	85 ed       	ldi	r24, 0xD5	; 213
    4b78:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4b7c:	80 91 bc 00 	lds	r24, 0x00BC
    4b80:	84 fd       	sbrc	r24, 4
    4b82:	fc cf       	rjmp	.-8      	; 0x4b7c <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4b84:	10 92 28 02 	sts	0x0228, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4b88:	ff 91       	pop	r31
    4b8a:	ef 91       	pop	r30
    4b8c:	bf 91       	pop	r27
    4b8e:	af 91       	pop	r26
    4b90:	9f 91       	pop	r25
    4b92:	8f 91       	pop	r24
    4b94:	7f 91       	pop	r23
    4b96:	6f 91       	pop	r22
    4b98:	5f 91       	pop	r21
    4b9a:	4f 91       	pop	r20
    4b9c:	3f 91       	pop	r19
    4b9e:	2f 91       	pop	r18
    4ba0:	0f 90       	pop	r0
    4ba2:	0f be       	out	0x3f, r0	; 63
    4ba4:	0f 90       	pop	r0
    4ba6:	1f 90       	pop	r1
    4ba8:	18 95       	reti

00004baa <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4baa:	10 92 28 02 	sts	0x0228, r1
  twi_sendStop = true;		// default value
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	80 93 2a 02 	sts	0x022A, r24
  twi_inRepStart = false;
    4bb4:	10 92 2b 02 	sts	0x022B, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    4bb8:	82 e1       	ldi	r24, 0x12	; 18
    4bba:	61 e0       	ldi	r22, 0x01	; 1
    4bbc:	0e 94 32 26 	call	0x4c64	; 0x4c64 <digitalWrite>
  digitalWrite(SCL, 1);
    4bc0:	83 e1       	ldi	r24, 0x13	; 19
    4bc2:	61 e0       	ldi	r22, 0x01	; 1
    4bc4:	0e 94 32 26 	call	0x4c64	; 0x4c64 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    4bc8:	e9 eb       	ldi	r30, 0xB9	; 185
    4bca:	f0 e0       	ldi	r31, 0x00	; 0
    4bcc:	80 81       	ld	r24, Z
    4bce:	8e 7f       	andi	r24, 0xFE	; 254
    4bd0:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    4bd2:	80 81       	ld	r24, Z
    4bd4:	8d 7f       	andi	r24, 0xFD	; 253
    4bd6:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    4bd8:	8d ef       	ldi	r24, 0xFD	; 253
    4bda:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4bde:	85 e4       	ldi	r24, 0x45	; 69
    4be0:	80 93 bc 00 	sts	0x00BC, r24
}
    4be4:	08 95       	ret

00004be6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4bea:	48 2f       	mov	r20, r24
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	ca 01       	movw	r24, r20
    4bf0:	82 5c       	subi	r24, 0xC2	; 194
    4bf2:	99 4f       	sbci	r25, 0xF9	; 249
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    4bf8:	46 5d       	subi	r20, 0xD6	; 214
    4bfa:	59 4f       	sbci	r21, 0xF9	; 249
    4bfc:	fa 01       	movw	r30, r20
    4bfe:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4c00:	88 23       	and	r24, r24
    4c02:	69 f1       	breq	.+90     	; 0x4c5e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	88 0f       	add	r24, r24
    4c08:	99 1f       	adc	r25, r25
    4c0a:	fc 01       	movw	r30, r24
    4c0c:	e4 5f       	subi	r30, 0xF4	; 244
    4c0e:	f9 4f       	sbci	r31, 0xF9	; 249
    4c10:	a5 91       	lpm	r26, Z+
    4c12:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    4c14:	fc 01       	movw	r30, r24
    4c16:	ea 5e       	subi	r30, 0xEA	; 234
    4c18:	f9 4f       	sbci	r31, 0xF9	; 249
    4c1a:	c5 91       	lpm	r28, Z+
    4c1c:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    4c1e:	66 23       	and	r22, r22
    4c20:	51 f4       	brne	.+20     	; 0x4c36 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    4c22:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4c24:	f8 94       	cli
		*reg &= ~bit;
    4c26:	8c 91       	ld	r24, X
    4c28:	93 2f       	mov	r25, r19
    4c2a:	90 95       	com	r25
    4c2c:	89 23       	and	r24, r25
    4c2e:	8c 93       	st	X, r24
		*out &= ~bit;
    4c30:	88 81       	ld	r24, Y
    4c32:	89 23       	and	r24, r25
    4c34:	0b c0       	rjmp	.+22     	; 0x4c4c <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4c36:	62 30       	cpi	r22, 0x02	; 2
    4c38:	61 f4       	brne	.+24     	; 0x4c52 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    4c3a:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4c3c:	f8 94       	cli
		*reg &= ~bit;
    4c3e:	8c 91       	ld	r24, X
    4c40:	93 2f       	mov	r25, r19
    4c42:	90 95       	com	r25
    4c44:	89 23       	and	r24, r25
    4c46:	8c 93       	st	X, r24
		*out |= bit;
    4c48:	88 81       	ld	r24, Y
    4c4a:	83 2b       	or	r24, r19
    4c4c:	88 83       	st	Y, r24
		SREG = oldSREG;
    4c4e:	2f bf       	out	0x3f, r18	; 63
    4c50:	06 c0       	rjmp	.+12     	; 0x4c5e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    4c52:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4c54:	f8 94       	cli
		*reg |= bit;
    4c56:	8c 91       	ld	r24, X
    4c58:	83 2b       	or	r24, r19
    4c5a:	8c 93       	st	X, r24
		SREG = oldSREG;
    4c5c:	9f bf       	out	0x3f, r25	; 63
	}
}
    4c5e:	df 91       	pop	r29
    4c60:	cf 91       	pop	r28
    4c62:	08 95       	ret

00004c64 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    4c64:	48 2f       	mov	r20, r24
    4c66:	50 e0       	ldi	r21, 0x00	; 0
    4c68:	ca 01       	movw	r24, r20
    4c6a:	8e 5a       	subi	r24, 0xAE	; 174
    4c6c:	99 4f       	sbci	r25, 0xF9	; 249
    4c6e:	fc 01       	movw	r30, r24
    4c70:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    4c72:	ca 01       	movw	r24, r20
    4c74:	82 5c       	subi	r24, 0xC2	; 194
    4c76:	99 4f       	sbci	r25, 0xF9	; 249
    4c78:	fc 01       	movw	r30, r24
    4c7a:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    4c7c:	46 5d       	subi	r20, 0xD6	; 214
    4c7e:	59 4f       	sbci	r21, 0xF9	; 249
    4c80:	fa 01       	movw	r30, r20
    4c82:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4c84:	33 23       	and	r19, r19
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <digitalWrite+0x26>
    4c88:	40 c0       	rjmp	.+128    	; 0x4d0a <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4c8a:	22 23       	and	r18, r18
    4c8c:	51 f1       	breq	.+84     	; 0x4ce2 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4c8e:	23 30       	cpi	r18, 0x03	; 3
    4c90:	71 f0       	breq	.+28     	; 0x4cae <digitalWrite+0x4a>
    4c92:	24 30       	cpi	r18, 0x04	; 4
    4c94:	28 f4       	brcc	.+10     	; 0x4ca0 <digitalWrite+0x3c>
    4c96:	21 30       	cpi	r18, 0x01	; 1
    4c98:	a1 f0       	breq	.+40     	; 0x4cc2 <digitalWrite+0x5e>
    4c9a:	22 30       	cpi	r18, 0x02	; 2
    4c9c:	11 f5       	brne	.+68     	; 0x4ce2 <digitalWrite+0x7e>
    4c9e:	14 c0       	rjmp	.+40     	; 0x4cc8 <digitalWrite+0x64>
    4ca0:	26 30       	cpi	r18, 0x06	; 6
    4ca2:	b1 f0       	breq	.+44     	; 0x4cd0 <digitalWrite+0x6c>
    4ca4:	27 30       	cpi	r18, 0x07	; 7
    4ca6:	c1 f0       	breq	.+48     	; 0x4cd8 <digitalWrite+0x74>
    4ca8:	24 30       	cpi	r18, 0x04	; 4
    4caa:	d9 f4       	brne	.+54     	; 0x4ce2 <digitalWrite+0x7e>
    4cac:	04 c0       	rjmp	.+8      	; 0x4cb6 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4cae:	80 91 80 00 	lds	r24, 0x0080
    4cb2:	8f 77       	andi	r24, 0x7F	; 127
    4cb4:	03 c0       	rjmp	.+6      	; 0x4cbc <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4cb6:	80 91 80 00 	lds	r24, 0x0080
    4cba:	8f 7d       	andi	r24, 0xDF	; 223
    4cbc:	80 93 80 00 	sts	0x0080, r24
    4cc0:	10 c0       	rjmp	.+32     	; 0x4ce2 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4cc2:	84 b5       	in	r24, 0x24	; 36
    4cc4:	8f 77       	andi	r24, 0x7F	; 127
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4cc8:	84 b5       	in	r24, 0x24	; 36
    4cca:	8f 7d       	andi	r24, 0xDF	; 223
    4ccc:	84 bd       	out	0x24, r24	; 36
    4cce:	09 c0       	rjmp	.+18     	; 0x4ce2 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4cd0:	80 91 b0 00 	lds	r24, 0x00B0
    4cd4:	8f 77       	andi	r24, 0x7F	; 127
    4cd6:	03 c0       	rjmp	.+6      	; 0x4cde <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4cd8:	80 91 b0 00 	lds	r24, 0x00B0
    4cdc:	8f 7d       	andi	r24, 0xDF	; 223
    4cde:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    4ce2:	e3 2f       	mov	r30, r19
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	ee 0f       	add	r30, r30
    4ce8:	ff 1f       	adc	r31, r31
    4cea:	ea 5e       	subi	r30, 0xEA	; 234
    4cec:	f9 4f       	sbci	r31, 0xF9	; 249
    4cee:	a5 91       	lpm	r26, Z+
    4cf0:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    4cf2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4cf4:	f8 94       	cli

	if (val == LOW) {
    4cf6:	66 23       	and	r22, r22
    4cf8:	21 f4       	brne	.+8      	; 0x4d02 <digitalWrite+0x9e>
		*out &= ~bit;
    4cfa:	8c 91       	ld	r24, X
    4cfc:	90 95       	com	r25
    4cfe:	89 23       	and	r24, r25
    4d00:	02 c0       	rjmp	.+4      	; 0x4d06 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    4d02:	8c 91       	ld	r24, X
    4d04:	89 2b       	or	r24, r25
    4d06:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    4d08:	2f bf       	out	0x3f, r18	; 63
    4d0a:	08 95       	ret

00004d0c <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    4d0c:	08 95       	ret

00004d0e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    4d0e:	1f 92       	push	r1
    4d10:	0f 92       	push	r0
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	0f 92       	push	r0
    4d16:	11 24       	eor	r1, r1
    4d18:	2f 93       	push	r18
    4d1a:	3f 93       	push	r19
    4d1c:	4f 93       	push	r20
    4d1e:	8f 93       	push	r24
    4d20:	9f 93       	push	r25
    4d22:	ef 93       	push	r30
    4d24:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    4d26:	80 91 c0 00 	lds	r24, 0x00C0
    4d2a:	82 fd       	sbrc	r24, 2
    4d2c:	1d c0       	rjmp	.+58     	; 0x4d68 <__vector_18+0x5a>
      unsigned char c = UDR0;
    4d2e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4d32:	20 91 d6 02 	lds	r18, 0x02D6
    4d36:	30 91 d7 02 	lds	r19, 0x02D7

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4d3a:	2f 5f       	subi	r18, 0xFF	; 255
    4d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3e:	2f 73       	andi	r18, 0x3F	; 63
    4d40:	30 70       	andi	r19, 0x00	; 0
    4d42:	80 91 d8 02 	lds	r24, 0x02D8
    4d46:	90 91 d9 02 	lds	r25, 0x02D9
    4d4a:	28 17       	cp	r18, r24
    4d4c:	39 07       	cpc	r19, r25
    4d4e:	71 f0       	breq	.+28     	; 0x4d6c <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    4d50:	e0 91 d6 02 	lds	r30, 0x02D6
    4d54:	f0 91 d7 02 	lds	r31, 0x02D7
    4d58:	ea 56       	subi	r30, 0x6A	; 106
    4d5a:	fd 4f       	sbci	r31, 0xFD	; 253
    4d5c:	40 83       	st	Z, r20
    buffer->head = i;
    4d5e:	30 93 d7 02 	sts	0x02D7, r19
    4d62:	20 93 d6 02 	sts	0x02D6, r18
    4d66:	02 c0       	rjmp	.+4      	; 0x4d6c <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    4d68:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    4d6c:	ff 91       	pop	r31
    4d6e:	ef 91       	pop	r30
    4d70:	9f 91       	pop	r25
    4d72:	8f 91       	pop	r24
    4d74:	4f 91       	pop	r20
    4d76:	3f 91       	pop	r19
    4d78:	2f 91       	pop	r18
    4d7a:	0f 90       	pop	r0
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	0f 90       	pop	r0
    4d80:	1f 90       	pop	r1
    4d82:	18 95       	reti

00004d84 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4d84:	e0 91 2a 03 	lds	r30, 0x032A
    4d88:	f0 91 2b 03 	lds	r31, 0x032B
    4d8c:	e0 5c       	subi	r30, 0xC0	; 192
    4d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d90:	81 91       	ld	r24, Z+
    4d92:	91 91       	ld	r25, Z+
    4d94:	20 81       	ld	r18, Z
    4d96:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4d98:	82 1b       	sub	r24, r18
    4d9a:	93 0b       	sbc	r25, r19
    4d9c:	8f 73       	andi	r24, 0x3F	; 63
    4d9e:	90 70       	andi	r25, 0x00	; 0
    4da0:	89 2b       	or	r24, r25
    4da2:	11 f0       	breq	.+4      	; 0x4da8 <serialEventRun()+0x24>
    4da4:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <serialEvent()>
    4da8:	08 95       	ret

00004daa <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    4daa:	1f 92       	push	r1
    4dac:	0f 92       	push	r0
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	0f 92       	push	r0
    4db2:	11 24       	eor	r1, r1
    4db4:	2f 93       	push	r18
    4db6:	3f 93       	push	r19
    4db8:	8f 93       	push	r24
    4dba:	9f 93       	push	r25
    4dbc:	ef 93       	push	r30
    4dbe:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    4dc0:	20 91 1a 03 	lds	r18, 0x031A
    4dc4:	30 91 1b 03 	lds	r19, 0x031B
    4dc8:	80 91 1c 03 	lds	r24, 0x031C
    4dcc:	90 91 1d 03 	lds	r25, 0x031D
    4dd0:	28 17       	cp	r18, r24
    4dd2:	39 07       	cpc	r19, r25
    4dd4:	31 f4       	brne	.+12     	; 0x4de2 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4dd6:	80 91 c1 00 	lds	r24, 0x00C1
    4dda:	8f 7d       	andi	r24, 0xDF	; 223
    4ddc:	80 93 c1 00 	sts	0x00C1, r24
    4de0:	14 c0       	rjmp	.+40     	; 0x4e0a <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4de2:	e0 91 1c 03 	lds	r30, 0x031C
    4de6:	f0 91 1d 03 	lds	r31, 0x031D
    4dea:	e6 52       	subi	r30, 0x26	; 38
    4dec:	fd 4f       	sbci	r31, 0xFD	; 253
    4dee:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4df0:	80 91 1c 03 	lds	r24, 0x031C
    4df4:	90 91 1d 03 	lds	r25, 0x031D
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	8f 73       	andi	r24, 0x3F	; 63
    4dfc:	90 70       	andi	r25, 0x00	; 0
    4dfe:	90 93 1d 03 	sts	0x031D, r25
    4e02:	80 93 1c 03 	sts	0x031C, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4e06:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4e0a:	ff 91       	pop	r31
    4e0c:	ef 91       	pop	r30
    4e0e:	9f 91       	pop	r25
    4e10:	8f 91       	pop	r24
    4e12:	3f 91       	pop	r19
    4e14:	2f 91       	pop	r18
    4e16:	0f 90       	pop	r0
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	0f 90       	pop	r0
    4e1c:	1f 90       	pop	r1
    4e1e:	18 95       	reti

00004e20 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4e20:	af 92       	push	r10
    4e22:	bf 92       	push	r11
    4e24:	df 92       	push	r13
    4e26:	ef 92       	push	r14
    4e28:	ff 92       	push	r15
    4e2a:	0f 93       	push	r16
    4e2c:	1f 93       	push	r17
    4e2e:	cf 93       	push	r28
    4e30:	df 93       	push	r29
    4e32:	ec 01       	movw	r28, r24
    4e34:	7a 01       	movw	r14, r20
    4e36:	8b 01       	movw	r16, r22
    4e38:	dd 24       	eor	r13, r13
    4e3a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4e3c:	91 e0       	ldi	r25, 0x01	; 1
    4e3e:	a9 2e       	mov	r10, r25
    4e40:	b1 2c       	mov	r11, r1
    4e42:	ec 89       	ldd	r30, Y+20	; 0x14
    4e44:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    4e46:	dd 20       	and	r13, r13
    4e48:	69 f0       	breq	.+26     	; 0x4e64 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    4e4a:	c5 01       	movw	r24, r10
    4e4c:	08 a0       	ldd	r0, Y+32	; 0x20
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <HardwareSerial::begin(unsigned long)+0x34>
    4e50:	88 0f       	add	r24, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	0a 94       	dec	r0
    4e56:	e2 f7       	brpl	.-8      	; 0x4e50 <HardwareSerial::begin(unsigned long)+0x30>
    4e58:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4e5a:	60 e9       	ldi	r22, 0x90	; 144
    4e5c:	70 ed       	ldi	r23, 0xD0	; 208
    4e5e:	83 e0       	ldi	r24, 0x03	; 3
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	05 c0       	rjmp	.+10     	; 0x4e6e <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    4e64:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4e66:	68 e4       	ldi	r22, 0x48	; 72
    4e68:	78 ee       	ldi	r23, 0xE8	; 232
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	a8 01       	movw	r20, r16
    4e70:	97 01       	movw	r18, r14
    4e72:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    4e76:	21 50       	subi	r18, 0x01	; 1
    4e78:	30 40       	sbci	r19, 0x00	; 0
    4e7a:	40 40       	sbci	r20, 0x00	; 0
    4e7c:	50 40       	sbci	r21, 0x00	; 0
    4e7e:	56 95       	lsr	r21
    4e80:	47 95       	ror	r20
    4e82:	37 95       	ror	r19
    4e84:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4e86:	80 e1       	ldi	r24, 0x10	; 16
    4e88:	20 30       	cpi	r18, 0x00	; 0
    4e8a:	38 07       	cpc	r19, r24
    4e8c:	20 f0       	brcs	.+8      	; 0x4e96 <HardwareSerial::begin(unsigned long)+0x76>
    4e8e:	dd 20       	and	r13, r13
    4e90:	11 f0       	breq	.+4      	; 0x4e96 <HardwareSerial::begin(unsigned long)+0x76>
    4e92:	dd 24       	eor	r13, r13
    4e94:	d6 cf       	rjmp	.-84     	; 0x4e42 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4e96:	e8 89       	ldd	r30, Y+16	; 0x10
    4e98:	f9 89       	ldd	r31, Y+17	; 0x11
    4e9a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4e9c:	ea 89       	ldd	r30, Y+18	; 0x12
    4e9e:	fb 89       	ldd	r31, Y+19	; 0x13
    4ea0:	20 83       	st	Z, r18

  transmitting = false;
    4ea2:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    4ea4:	ee 89       	ldd	r30, Y+22	; 0x16
    4ea6:	ff 89       	ldd	r31, Y+23	; 0x17
    4ea8:	40 81       	ld	r20, Z
    4eaa:	21 e0       	ldi	r18, 0x01	; 1
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	c9 01       	movw	r24, r18
    4eb0:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4eb2:	02 c0       	rjmp	.+4      	; 0x4eb8 <HardwareSerial::begin(unsigned long)+0x98>
    4eb4:	88 0f       	add	r24, r24
    4eb6:	99 1f       	adc	r25, r25
    4eb8:	0a 94       	dec	r0
    4eba:	e2 f7       	brpl	.-8      	; 0x4eb4 <HardwareSerial::begin(unsigned long)+0x94>
    4ebc:	48 2b       	or	r20, r24
    4ebe:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4ec0:	ee 89       	ldd	r30, Y+22	; 0x16
    4ec2:	ff 89       	ldd	r31, Y+23	; 0x17
    4ec4:	40 81       	ld	r20, Z
    4ec6:	c9 01       	movw	r24, r18
    4ec8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <HardwareSerial::begin(unsigned long)+0xb0>
    4ecc:	88 0f       	add	r24, r24
    4ece:	99 1f       	adc	r25, r25
    4ed0:	0a 94       	dec	r0
    4ed2:	e2 f7       	brpl	.-8      	; 0x4ecc <HardwareSerial::begin(unsigned long)+0xac>
    4ed4:	48 2b       	or	r20, r24
    4ed6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4ed8:	ee 89       	ldd	r30, Y+22	; 0x16
    4eda:	ff 89       	ldd	r31, Y+23	; 0x17
    4edc:	40 81       	ld	r20, Z
    4ede:	c9 01       	movw	r24, r18
    4ee0:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <HardwareSerial::begin(unsigned long)+0xc8>
    4ee4:	88 0f       	add	r24, r24
    4ee6:	99 1f       	adc	r25, r25
    4ee8:	0a 94       	dec	r0
    4eea:	e2 f7       	brpl	.-8      	; 0x4ee4 <HardwareSerial::begin(unsigned long)+0xc4>
    4eec:	48 2b       	or	r20, r24
    4eee:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4ef0:	ee 89       	ldd	r30, Y+22	; 0x16
    4ef2:	ff 89       	ldd	r31, Y+23	; 0x17
    4ef4:	80 81       	ld	r24, Z
    4ef6:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4ef8:	02 c0       	rjmp	.+4      	; 0x4efe <HardwareSerial::begin(unsigned long)+0xde>
    4efa:	22 0f       	add	r18, r18
    4efc:	33 1f       	adc	r19, r19
    4efe:	0a 94       	dec	r0
    4f00:	e2 f7       	brpl	.-8      	; 0x4efa <HardwareSerial::begin(unsigned long)+0xda>
    4f02:	20 95       	com	r18
    4f04:	28 23       	and	r18, r24
    4f06:	20 83       	st	Z, r18
}
    4f08:	df 91       	pop	r29
    4f0a:	cf 91       	pop	r28
    4f0c:	1f 91       	pop	r17
    4f0e:	0f 91       	pop	r16
    4f10:	ff 90       	pop	r15
    4f12:	ef 90       	pop	r14
    4f14:	df 90       	pop	r13
    4f16:	bf 90       	pop	r11
    4f18:	af 90       	pop	r10
    4f1a:	08 95       	ret

00004f1c <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    4f1c:	cf 93       	push	r28
    4f1e:	df 93       	push	r29
    4f20:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4f22:	1e 96       	adiw	r26, 0x0e	; 14
    4f24:	8d 91       	ld	r24, X+
    4f26:	9c 91       	ld	r25, X
    4f28:	1f 97       	sbiw	r26, 0x0f	; 15
    4f2a:	ec 01       	movw	r28, r24
    4f2c:	c0 5c       	subi	r28, 0xC0	; 192
    4f2e:	df 4f       	sbci	r29, 0xFF	; 255
    4f30:	fc 01       	movw	r30, r24
    4f32:	ee 5b       	subi	r30, 0xBE	; 190
    4f34:	ff 4f       	sbci	r31, 0xFF	; 255
    4f36:	28 81       	ld	r18, Y
    4f38:	39 81       	ldd	r19, Y+1	; 0x01
    4f3a:	80 81       	ld	r24, Z
    4f3c:	91 81       	ldd	r25, Z+1	; 0x01
    4f3e:	28 17       	cp	r18, r24
    4f40:	39 07       	cpc	r19, r25
    4f42:	c9 f7       	brne	.-14     	; 0x4f36 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    4f44:	56 96       	adiw	r26, 0x16	; 22
    4f46:	ed 91       	ld	r30, X+
    4f48:	fc 91       	ld	r31, X
    4f4a:	57 97       	sbiw	r26, 0x17	; 23
    4f4c:	40 81       	ld	r20, Z
    4f4e:	21 e0       	ldi	r18, 0x01	; 1
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	c9 01       	movw	r24, r18
    4f54:	5c 96       	adiw	r26, 0x1c	; 28
    4f56:	0c 90       	ld	r0, X
    4f58:	5c 97       	sbiw	r26, 0x1c	; 28
    4f5a:	02 c0       	rjmp	.+4      	; 0x4f60 <HardwareSerial::end()+0x44>
    4f5c:	88 0f       	add	r24, r24
    4f5e:	99 1f       	adc	r25, r25
    4f60:	0a 94       	dec	r0
    4f62:	e2 f7       	brpl	.-8      	; 0x4f5c <HardwareSerial::end()+0x40>
    4f64:	80 95       	com	r24
    4f66:	84 23       	and	r24, r20
    4f68:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    4f6a:	56 96       	adiw	r26, 0x16	; 22
    4f6c:	ed 91       	ld	r30, X+
    4f6e:	fc 91       	ld	r31, X
    4f70:	57 97       	sbiw	r26, 0x17	; 23
    4f72:	40 81       	ld	r20, Z
    4f74:	c9 01       	movw	r24, r18
    4f76:	5d 96       	adiw	r26, 0x1d	; 29
    4f78:	0c 90       	ld	r0, X
    4f7a:	5d 97       	sbiw	r26, 0x1d	; 29
    4f7c:	02 c0       	rjmp	.+4      	; 0x4f82 <HardwareSerial::end()+0x66>
    4f7e:	88 0f       	add	r24, r24
    4f80:	99 1f       	adc	r25, r25
    4f82:	0a 94       	dec	r0
    4f84:	e2 f7       	brpl	.-8      	; 0x4f7e <HardwareSerial::end()+0x62>
    4f86:	80 95       	com	r24
    4f88:	84 23       	and	r24, r20
    4f8a:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    4f8c:	56 96       	adiw	r26, 0x16	; 22
    4f8e:	ed 91       	ld	r30, X+
    4f90:	fc 91       	ld	r31, X
    4f92:	57 97       	sbiw	r26, 0x17	; 23
    4f94:	40 81       	ld	r20, Z
    4f96:	c9 01       	movw	r24, r18
    4f98:	5e 96       	adiw	r26, 0x1e	; 30
    4f9a:	0c 90       	ld	r0, X
    4f9c:	5e 97       	sbiw	r26, 0x1e	; 30
    4f9e:	02 c0       	rjmp	.+4      	; 0x4fa4 <HardwareSerial::end()+0x88>
    4fa0:	88 0f       	add	r24, r24
    4fa2:	99 1f       	adc	r25, r25
    4fa4:	0a 94       	dec	r0
    4fa6:	e2 f7       	brpl	.-8      	; 0x4fa0 <HardwareSerial::end()+0x84>
    4fa8:	80 95       	com	r24
    4faa:	84 23       	and	r24, r20
    4fac:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    4fae:	56 96       	adiw	r26, 0x16	; 22
    4fb0:	ed 91       	ld	r30, X+
    4fb2:	fc 91       	ld	r31, X
    4fb4:	57 97       	sbiw	r26, 0x17	; 23
    4fb6:	80 81       	ld	r24, Z
    4fb8:	5f 96       	adiw	r26, 0x1f	; 31
    4fba:	0c 90       	ld	r0, X
    4fbc:	5f 97       	sbiw	r26, 0x1f	; 31
    4fbe:	02 c0       	rjmp	.+4      	; 0x4fc4 <HardwareSerial::end()+0xa8>
    4fc0:	22 0f       	add	r18, r18
    4fc2:	33 1f       	adc	r19, r19
    4fc4:	0a 94       	dec	r0
    4fc6:	e2 f7       	brpl	.-8      	; 0x4fc0 <HardwareSerial::end()+0xa4>
    4fc8:	20 95       	com	r18
    4fca:	28 23       	and	r18, r24
    4fcc:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4fce:	1c 96       	adiw	r26, 0x0c	; 12
    4fd0:	ed 91       	ld	r30, X+
    4fd2:	fc 91       	ld	r31, X
    4fd4:	1d 97       	sbiw	r26, 0x0d	; 13
    4fd6:	ee 5b       	subi	r30, 0xBE	; 190
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	80 81       	ld	r24, Z
    4fdc:	91 81       	ldd	r25, Z+1	; 0x01
    4fde:	92 93       	st	-Z, r25
    4fe0:	82 93       	st	-Z, r24
}
    4fe2:	df 91       	pop	r29
    4fe4:	cf 91       	pop	r28
    4fe6:	08 95       	ret

00004fe8 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4fe8:	dc 01       	movw	r26, r24
    4fea:	1c 96       	adiw	r26, 0x0c	; 12
    4fec:	ed 91       	ld	r30, X+
    4fee:	fc 91       	ld	r31, X
    4ff0:	1d 97       	sbiw	r26, 0x0d	; 13
    4ff2:	e0 5c       	subi	r30, 0xC0	; 192
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	21 91       	ld	r18, Z+
    4ff8:	31 91       	ld	r19, Z+
    4ffa:	80 81       	ld	r24, Z
    4ffc:	91 81       	ldd	r25, Z+1	; 0x01
    4ffe:	28 1b       	sub	r18, r24
    5000:	39 0b       	sbc	r19, r25
    5002:	2f 73       	andi	r18, 0x3F	; 63
    5004:	30 70       	andi	r19, 0x00	; 0
}
    5006:	c9 01       	movw	r24, r18
    5008:	08 95       	ret

0000500a <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    500a:	dc 01       	movw	r26, r24
    500c:	1c 96       	adiw	r26, 0x0c	; 12
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	1d 97       	sbiw	r26, 0x0d	; 13
    5014:	e0 5c       	subi	r30, 0xC0	; 192
    5016:	ff 4f       	sbci	r31, 0xFF	; 255
    5018:	20 81       	ld	r18, Z
    501a:	31 81       	ldd	r19, Z+1	; 0x01
    501c:	e0 54       	subi	r30, 0x40	; 64
    501e:	f0 40       	sbci	r31, 0x00	; 0
    5020:	df 01       	movw	r26, r30
    5022:	ae 5b       	subi	r26, 0xBE	; 190
    5024:	bf 4f       	sbci	r27, 0xFF	; 255
    5026:	8d 91       	ld	r24, X+
    5028:	9c 91       	ld	r25, X
    502a:	11 97       	sbiw	r26, 0x01	; 1
    502c:	28 17       	cp	r18, r24
    502e:	39 07       	cpc	r19, r25
    5030:	19 f4       	brne	.+6      	; 0x5038 <HardwareSerial::peek()+0x2e>
    5032:	2f ef       	ldi	r18, 0xFF	; 255
    5034:	3f ef       	ldi	r19, 0xFF	; 255
    5036:	07 c0       	rjmp	.+14     	; 0x5046 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    5038:	8d 91       	ld	r24, X+
    503a:	9c 91       	ld	r25, X
    503c:	e8 0f       	add	r30, r24
    503e:	f9 1f       	adc	r31, r25
    5040:	80 81       	ld	r24, Z
    5042:	28 2f       	mov	r18, r24
    5044:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5046:	c9 01       	movw	r24, r18
    5048:	08 95       	ret

0000504a <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    504a:	dc 01       	movw	r26, r24
    504c:	1c 96       	adiw	r26, 0x0c	; 12
    504e:	ed 91       	ld	r30, X+
    5050:	fc 91       	ld	r31, X
    5052:	1d 97       	sbiw	r26, 0x0d	; 13
    5054:	e0 5c       	subi	r30, 0xC0	; 192
    5056:	ff 4f       	sbci	r31, 0xFF	; 255
    5058:	20 81       	ld	r18, Z
    505a:	31 81       	ldd	r19, Z+1	; 0x01
    505c:	e0 54       	subi	r30, 0x40	; 64
    505e:	f0 40       	sbci	r31, 0x00	; 0
    5060:	df 01       	movw	r26, r30
    5062:	ae 5b       	subi	r26, 0xBE	; 190
    5064:	bf 4f       	sbci	r27, 0xFF	; 255
    5066:	8d 91       	ld	r24, X+
    5068:	9c 91       	ld	r25, X
    506a:	11 97       	sbiw	r26, 0x01	; 1
    506c:	28 17       	cp	r18, r24
    506e:	39 07       	cpc	r19, r25
    5070:	19 f4       	brne	.+6      	; 0x5078 <HardwareSerial::read()+0x2e>
    5072:	2f ef       	ldi	r18, 0xFF	; 255
    5074:	3f ef       	ldi	r19, 0xFF	; 255
    5076:	10 c0       	rjmp	.+32     	; 0x5098 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    5078:	8d 91       	ld	r24, X+
    507a:	9c 91       	ld	r25, X
    507c:	11 97       	sbiw	r26, 0x01	; 1
    507e:	e8 0f       	add	r30, r24
    5080:	f9 1f       	adc	r31, r25
    5082:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    5084:	8d 91       	ld	r24, X+
    5086:	9c 91       	ld	r25, X
    5088:	11 97       	sbiw	r26, 0x01	; 1
    508a:	01 96       	adiw	r24, 0x01	; 1
    508c:	8f 73       	andi	r24, 0x3F	; 63
    508e:	90 70       	andi	r25, 0x00	; 0
    5090:	11 96       	adiw	r26, 0x01	; 1
    5092:	9c 93       	st	X, r25
    5094:	8e 93       	st	-X, r24
    return c;
    5096:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5098:	c9 01       	movw	r24, r18
    509a:	08 95       	ret

0000509c <HardwareSerial::flush()>:

void HardwareSerial::flush()
    509c:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    509e:	91 96       	adiw	r26, 0x21	; 33
    50a0:	8c 91       	ld	r24, X
    50a2:	91 97       	sbiw	r26, 0x21	; 33
    50a4:	88 23       	and	r24, r24
    50a6:	39 f0       	breq	.+14     	; 0x50b6 <HardwareSerial::flush()+0x1a>
    50a8:	54 96       	adiw	r26, 0x14	; 20
    50aa:	ed 91       	ld	r30, X+
    50ac:	fc 91       	ld	r31, X
    50ae:	55 97       	sbiw	r26, 0x15	; 21
    50b0:	80 81       	ld	r24, Z
    50b2:	86 ff       	sbrs	r24, 6
    50b4:	f9 cf       	rjmp	.-14     	; 0x50a8 <HardwareSerial::flush()+0xc>
  transmitting = false;
    50b6:	91 96       	adiw	r26, 0x21	; 33
    50b8:	1c 92       	st	X, r1
}
    50ba:	08 95       	ret

000050bc <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    50c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    50c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    50c6:	e0 5c       	subi	r30, 0xC0	; 192
    50c8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ca:	20 81       	ld	r18, Z
    50cc:	31 81       	ldd	r19, Z+1	; 0x01
    50ce:	e0 54       	subi	r30, 0x40	; 64
    50d0:	f0 40       	sbci	r31, 0x00	; 0
    50d2:	2f 5f       	subi	r18, 0xFF	; 255
    50d4:	3f 4f       	sbci	r19, 0xFF	; 255
    50d6:	2f 73       	andi	r18, 0x3F	; 63
    50d8:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    50da:	df 01       	movw	r26, r30
    50dc:	ae 5b       	subi	r26, 0xBE	; 190
    50de:	bf 4f       	sbci	r27, 0xFF	; 255
    50e0:	8d 91       	ld	r24, X+
    50e2:	9c 91       	ld	r25, X
    50e4:	11 97       	sbiw	r26, 0x01	; 1
    50e6:	28 17       	cp	r18, r24
    50e8:	39 07       	cpc	r19, r25
    50ea:	d1 f3       	breq	.-12     	; 0x50e0 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    50ec:	e0 5c       	subi	r30, 0xC0	; 192
    50ee:	ff 4f       	sbci	r31, 0xFF	; 255
    50f0:	80 81       	ld	r24, Z
    50f2:	91 81       	ldd	r25, Z+1	; 0x01
    50f4:	e0 54       	subi	r30, 0x40	; 64
    50f6:	f0 40       	sbci	r31, 0x00	; 0
    50f8:	e8 0f       	add	r30, r24
    50fa:	f9 1f       	adc	r31, r25
    50fc:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    50fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    5100:	ff 85       	ldd	r31, Y+15	; 0x0f
    5102:	e0 5c       	subi	r30, 0xC0	; 192
    5104:	ff 4f       	sbci	r31, 0xFF	; 255
    5106:	31 83       	std	Z+1, r19	; 0x01
    5108:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    510a:	ee 89       	ldd	r30, Y+22	; 0x16
    510c:	ff 89       	ldd	r31, Y+23	; 0x17
    510e:	20 81       	ld	r18, Z
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	0f 8c       	ldd	r0, Y+31	; 0x1f
    5116:	02 c0       	rjmp	.+4      	; 0x511c <HardwareSerial::write(unsigned char)+0x60>
    5118:	88 0f       	add	r24, r24
    511a:	99 1f       	adc	r25, r25
    511c:	0a 94       	dec	r0
    511e:	e2 f7       	brpl	.-8      	; 0x5118 <HardwareSerial::write(unsigned char)+0x5c>
    5120:	28 2b       	or	r18, r24
    5122:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    5128:	ec 89       	ldd	r30, Y+20	; 0x14
    512a:	fd 89       	ldd	r31, Y+21	; 0x15
    512c:	80 81       	ld	r24, Z
    512e:	80 64       	ori	r24, 0x40	; 64
    5130:	80 83       	st	Z, r24
  
  return 1;
}
    5132:	81 e0       	ldi	r24, 0x01	; 1
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	df 91       	pop	r29
    5138:	cf 91       	pop	r28
    513a:	08 95       	ret

0000513c <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    513c:	10 92 21 03 	sts	0x0321, r1
    5140:	10 92 20 03 	sts	0x0320, r1
    5144:	88 ee       	ldi	r24, 0xE8	; 232
    5146:	93 e0       	ldi	r25, 0x03	; 3
    5148:	a0 e0       	ldi	r26, 0x00	; 0
    514a:	b0 e0       	ldi	r27, 0x00	; 0
    514c:	80 93 22 03 	sts	0x0322, r24
    5150:	90 93 23 03 	sts	0x0323, r25
    5154:	a0 93 24 03 	sts	0x0324, r26
    5158:	b0 93 25 03 	sts	0x0325, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    515c:	85 e2       	ldi	r24, 0x25	; 37
    515e:	91 e0       	ldi	r25, 0x01	; 1
    5160:	90 93 1f 03 	sts	0x031F, r25
    5164:	80 93 1e 03 	sts	0x031E, r24
{
  _rx_buffer = rx_buffer;
    5168:	86 e9       	ldi	r24, 0x96	; 150
    516a:	92 e0       	ldi	r25, 0x02	; 2
    516c:	90 93 2b 03 	sts	0x032B, r25
    5170:	80 93 2a 03 	sts	0x032A, r24
  _tx_buffer = tx_buffer;
    5174:	8a ed       	ldi	r24, 0xDA	; 218
    5176:	92 e0       	ldi	r25, 0x02	; 2
    5178:	90 93 2d 03 	sts	0x032D, r25
    517c:	80 93 2c 03 	sts	0x032C, r24
  _ubrrh = ubrrh;
    5180:	85 ec       	ldi	r24, 0xC5	; 197
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	90 93 2f 03 	sts	0x032F, r25
    5188:	80 93 2e 03 	sts	0x032E, r24
  _ubrrl = ubrrl;
    518c:	84 ec       	ldi	r24, 0xC4	; 196
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	90 93 31 03 	sts	0x0331, r25
    5194:	80 93 30 03 	sts	0x0330, r24
  _ucsra = ucsra;
    5198:	80 ec       	ldi	r24, 0xC0	; 192
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	90 93 33 03 	sts	0x0333, r25
    51a0:	80 93 32 03 	sts	0x0332, r24
  _ucsrb = ucsrb;
    51a4:	81 ec       	ldi	r24, 0xC1	; 193
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	90 93 35 03 	sts	0x0335, r25
    51ac:	80 93 34 03 	sts	0x0334, r24
  _ucsrc = ucsrc;
    51b0:	82 ec       	ldi	r24, 0xC2	; 194
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	90 93 37 03 	sts	0x0337, r25
    51b8:	80 93 36 03 	sts	0x0336, r24
  _udr = udr;
    51bc:	86 ec       	ldi	r24, 0xC6	; 198
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	90 93 39 03 	sts	0x0339, r25
    51c4:	80 93 38 03 	sts	0x0338, r24
  _rxen = rxen;
    51c8:	84 e0       	ldi	r24, 0x04	; 4
    51ca:	80 93 3a 03 	sts	0x033A, r24
  _txen = txen;
    51ce:	83 e0       	ldi	r24, 0x03	; 3
    51d0:	80 93 3b 03 	sts	0x033B, r24
  _rxcie = rxcie;
    51d4:	87 e0       	ldi	r24, 0x07	; 7
    51d6:	80 93 3c 03 	sts	0x033C, r24
  _udrie = udrie;
    51da:	85 e0       	ldi	r24, 0x05	; 5
    51dc:	80 93 3d 03 	sts	0x033D, r24
  _u2x = u2x;
    51e0:	81 e0       	ldi	r24, 0x01	; 1
    51e2:	80 93 3e 03 	sts	0x033E, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    51e6:	08 95       	ret

000051e8 <main>:
#include <Arduino.h>

int main(void)
    51e8:	cf 93       	push	r28
    51ea:	df 93       	push	r29
{
	init();
    51ec:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    51f0:	0e 94 8f 20 	call	0x411e	; 0x411e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    51f4:	c2 ec       	ldi	r28, 0xC2	; 194
    51f6:	d6 e2       	ldi	r29, 0x26	; 38
#endif
	
	setup();
    
	for (;;) {
		loop();
    51f8:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <loop>
		if (serialEventRun) serialEventRun();
    51fc:	20 97       	sbiw	r28, 0x00	; 0
    51fe:	e1 f3       	breq	.-8      	; 0x51f8 <main+0x10>
    5200:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <serialEventRun()>
    5204:	f9 cf       	rjmp	.-14     	; 0x51f8 <main+0x10>

00005206 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    5206:	cf 92       	push	r12
    5208:	df 92       	push	r13
    520a:	ef 92       	push	r14
    520c:	ff 92       	push	r15
    520e:	0f 93       	push	r16
    5210:	1f 93       	push	r17
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	7c 01       	movw	r14, r24
    5218:	6b 01       	movw	r12, r22
    521a:	8a 01       	movw	r16, r20
    521c:	c0 e0       	ldi	r28, 0x00	; 0
    521e:	d0 e0       	ldi	r29, 0x00	; 0
    5220:	0f c0       	rjmp	.+30     	; 0x5240 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    5222:	d6 01       	movw	r26, r12
    5224:	6d 91       	ld	r22, X+
    5226:	6d 01       	movw	r12, r26
    5228:	d7 01       	movw	r26, r14
    522a:	ed 91       	ld	r30, X+
    522c:	fc 91       	ld	r31, X
    522e:	01 90       	ld	r0, Z+
    5230:	f0 81       	ld	r31, Z
    5232:	e0 2d       	mov	r30, r0
    5234:	c7 01       	movw	r24, r14
    5236:	09 95       	icall
    5238:	c8 0f       	add	r28, r24
    523a:	d9 1f       	adc	r29, r25
    523c:	01 50       	subi	r16, 0x01	; 1
    523e:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    5240:	01 15       	cp	r16, r1
    5242:	11 05       	cpc	r17, r1
    5244:	71 f7       	brne	.-36     	; 0x5222 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    5246:	ce 01       	movw	r24, r28
    5248:	df 91       	pop	r29
    524a:	cf 91       	pop	r28
    524c:	1f 91       	pop	r17
    524e:	0f 91       	pop	r16
    5250:	ff 90       	pop	r15
    5252:	ef 90       	pop	r14
    5254:	df 90       	pop	r13
    5256:	cf 90       	pop	r12
    5258:	08 95       	ret

0000525a <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    525a:	ef 92       	push	r14
    525c:	ff 92       	push	r15
    525e:	0f 93       	push	r16
    5260:	1f 93       	push	r17
    5262:	cf 93       	push	r28
    5264:	df 93       	push	r29
    5266:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    5268:	8b 01       	movw	r16, r22
    526a:	c0 e0       	ldi	r28, 0x00	; 0
    526c:	d0 e0       	ldi	r29, 0x00	; 0
    526e:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    5270:	0f 5f       	subi	r16, 0xFF	; 255
    5272:	1f 4f       	sbci	r17, 0xFF	; 255
    5274:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    5276:	66 23       	and	r22, r22
    5278:	59 f0       	breq	.+22     	; 0x5290 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    527a:	d7 01       	movw	r26, r14
    527c:	ed 91       	ld	r30, X+
    527e:	fc 91       	ld	r31, X
    5280:	01 90       	ld	r0, Z+
    5282:	f0 81       	ld	r31, Z
    5284:	e0 2d       	mov	r30, r0
    5286:	c7 01       	movw	r24, r14
    5288:	09 95       	icall
    528a:	c8 0f       	add	r28, r24
    528c:	d9 1f       	adc	r29, r25
    528e:	ef cf       	rjmp	.-34     	; 0x526e <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    5290:	ce 01       	movw	r24, r28
    5292:	df 91       	pop	r29
    5294:	cf 91       	pop	r28
    5296:	1f 91       	pop	r17
    5298:	0f 91       	pop	r16
    529a:	ff 90       	pop	r15
    529c:	ef 90       	pop	r14
    529e:	08 95       	ret

000052a0 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    52a0:	dc 01       	movw	r26, r24
{
  return write(c);
    52a2:	ed 91       	ld	r30, X+
    52a4:	fc 91       	ld	r31, X
    52a6:	01 90       	ld	r0, Z+
    52a8:	f0 81       	ld	r31, Z
    52aa:	e0 2d       	mov	r30, r0
    52ac:	09 95       	icall
}
    52ae:	08 95       	ret

000052b0 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    52b0:	ef 92       	push	r14
    52b2:	ff 92       	push	r15
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    52ba:	dc 01       	movw	r26, r24
    52bc:	ed 91       	ld	r30, X+
    52be:	fc 91       	ld	r31, X
    52c0:	01 90       	ld	r0, Z+
    52c2:	f0 81       	ld	r31, Z
    52c4:	e0 2d       	mov	r30, r0
    52c6:	6d e0       	ldi	r22, 0x0D	; 13
    52c8:	09 95       	icall
    52ca:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    52cc:	d8 01       	movw	r26, r16
    52ce:	ed 91       	ld	r30, X+
    52d0:	fc 91       	ld	r31, X
    52d2:	01 90       	ld	r0, Z+
    52d4:	f0 81       	ld	r31, Z
    52d6:	e0 2d       	mov	r30, r0
    52d8:	c8 01       	movw	r24, r16
    52da:	6a e0       	ldi	r22, 0x0A	; 10
    52dc:	09 95       	icall
    52de:	9c 01       	movw	r18, r24
    52e0:	2e 0d       	add	r18, r14
    52e2:	3f 1d       	adc	r19, r15
    52e4:	c9 01       	movw	r24, r18
    52e6:	1f 91       	pop	r17
    52e8:	0f 91       	pop	r16
    52ea:	ff 90       	pop	r15
    52ec:	ef 90       	pop	r14
    52ee:	08 95       	ret

000052f0 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    52f0:	ef 92       	push	r14
    52f2:	ff 92       	push	r15
    52f4:	0f 93       	push	r16
    52f6:	1f 93       	push	r17
    52f8:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    52fa:	0e 94 2d 29 	call	0x525a	; 0x525a <Print::print(__FlashStringHelper const*)>
    52fe:	8c 01       	movw	r16, r24
  n += println();
    5300:	c7 01       	movw	r24, r14
    5302:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
    5306:	9c 01       	movw	r18, r24
    5308:	20 0f       	add	r18, r16
    530a:	31 1f       	adc	r19, r17
  return n;
}
    530c:	c9 01       	movw	r24, r18
    530e:	1f 91       	pop	r17
    5310:	0f 91       	pop	r16
    5312:	ff 90       	pop	r15
    5314:	ef 90       	pop	r14
    5316:	08 95       	ret

00005318 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    531e:	61 15       	cp	r22, r1
    5320:	71 05       	cpc	r23, r1
    5322:	19 f4       	brne	.+6      	; 0x532a <Print::write(char const*)+0x12>
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	0f c0       	rjmp	.+30     	; 0x5348 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    532a:	db 01       	movw	r26, r22
    532c:	0d 90       	ld	r0, X+
    532e:	00 20       	and	r0, r0
    5330:	e9 f7       	brne	.-6      	; 0x532c <Print::write(char const*)+0x14>
    5332:	11 97       	sbiw	r26, 0x01	; 1
    5334:	a6 1b       	sub	r26, r22
    5336:	b7 0b       	sbc	r27, r23
    5338:	e8 81       	ld	r30, Y
    533a:	f9 81       	ldd	r31, Y+1	; 0x01
    533c:	02 80       	ldd	r0, Z+2	; 0x02
    533e:	f3 81       	ldd	r31, Z+3	; 0x03
    5340:	e0 2d       	mov	r30, r0
    5342:	ad 01       	movw	r20, r26
    5344:	09 95       	icall
    5346:	9c 01       	movw	r18, r24
    }
    5348:	c9 01       	movw	r24, r18
    534a:	df 91       	pop	r29
    534c:	cf 91       	pop	r28
    534e:	08 95       	ret

00005350 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    5350:	4f 92       	push	r4
    5352:	5f 92       	push	r5
    5354:	7f 92       	push	r7
    5356:	8f 92       	push	r8
    5358:	9f 92       	push	r9
    535a:	af 92       	push	r10
    535c:	bf 92       	push	r11
    535e:	cf 92       	push	r12
    5360:	df 92       	push	r13
    5362:	ef 92       	push	r14
    5364:	ff 92       	push	r15
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	df 93       	push	r29
    536c:	cf 93       	push	r28
    536e:	cd b7       	in	r28, 0x3d	; 61
    5370:	de b7       	in	r29, 0x3e	; 62
    5372:	a1 97       	sbiw	r28, 0x21	; 33
    5374:	0f b6       	in	r0, 0x3f	; 63
    5376:	f8 94       	cli
    5378:	de bf       	out	0x3e, r29	; 62
    537a:	0f be       	out	0x3f, r0	; 63
    537c:	cd bf       	out	0x3d, r28	; 61
    537e:	2c 01       	movw	r4, r24
    5380:	74 2e       	mov	r7, r20
    5382:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5384:	22 30       	cpi	r18, 0x02	; 2
    5386:	08 f4       	brcc	.+2      	; 0x538a <Print::printNumber(unsigned long, unsigned char)+0x3a>
    5388:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    538a:	19 a2       	std	Y+33, r1	; 0x21
    538c:	31 e2       	ldi	r19, 0x21	; 33
    538e:	c3 2e       	mov	r12, r19
    5390:	d1 2c       	mov	r13, r1
    5392:	cc 0e       	add	r12, r28
    5394:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    5396:	82 2e       	mov	r8, r18
    5398:	99 24       	eor	r9, r9
    539a:	aa 24       	eor	r10, r10
    539c:	bb 24       	eor	r11, r11
    539e:	67 2d       	mov	r22, r7
    53a0:	75 2f       	mov	r23, r21
    53a2:	a5 01       	movw	r20, r10
    53a4:	94 01       	movw	r18, r8
    53a6:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodsi4>
    53aa:	79 01       	movw	r14, r18
    53ac:	8a 01       	movw	r16, r20
    char c = m - base * n;
    53ae:	c8 01       	movw	r24, r16
    53b0:	b7 01       	movw	r22, r14
    53b2:	a5 01       	movw	r20, r10
    53b4:	94 01       	movw	r18, r8
    53b6:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsi3>
    53ba:	47 2d       	mov	r20, r7
    53bc:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    53be:	08 94       	sec
    53c0:	c1 08       	sbc	r12, r1
    53c2:	d1 08       	sbc	r13, r1
    53c4:	4a 30       	cpi	r20, 0x0A	; 10
    53c6:	14 f4       	brge	.+4      	; 0x53cc <Print::printNumber(unsigned long, unsigned char)+0x7c>
    53c8:	40 5d       	subi	r20, 0xD0	; 208
    53ca:	01 c0       	rjmp	.+2      	; 0x53ce <Print::printNumber(unsigned long, unsigned char)+0x7e>
    53cc:	49 5c       	subi	r20, 0xC9	; 201
    53ce:	f6 01       	movw	r30, r12
    53d0:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    53d2:	e1 14       	cp	r14, r1
    53d4:	f1 04       	cpc	r15, r1
    53d6:	01 05       	cpc	r16, r1
    53d8:	11 05       	cpc	r17, r1
    53da:	21 f0       	breq	.+8      	; 0x53e4 <Print::printNumber(unsigned long, unsigned char)+0x94>
    53dc:	7e 2c       	mov	r7, r14
    53de:	5f 2d       	mov	r21, r15
    53e0:	c8 01       	movw	r24, r16
    53e2:	dd cf       	rjmp	.-70     	; 0x539e <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    53e4:	c2 01       	movw	r24, r4
    53e6:	b6 01       	movw	r22, r12
    53e8:	0e 94 8c 29 	call	0x5318	; 0x5318 <Print::write(char const*)>
}
    53ec:	a1 96       	adiw	r28, 0x21	; 33
    53ee:	0f b6       	in	r0, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	de bf       	out	0x3e, r29	; 62
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	cd bf       	out	0x3d, r28	; 61
    53f8:	cf 91       	pop	r28
    53fa:	df 91       	pop	r29
    53fc:	1f 91       	pop	r17
    53fe:	0f 91       	pop	r16
    5400:	ff 90       	pop	r15
    5402:	ef 90       	pop	r14
    5404:	df 90       	pop	r13
    5406:	cf 90       	pop	r12
    5408:	bf 90       	pop	r11
    540a:	af 90       	pop	r10
    540c:	9f 90       	pop	r9
    540e:	8f 90       	pop	r8
    5410:	7f 90       	pop	r7
    5412:	5f 90       	pop	r5
    5414:	4f 90       	pop	r4
    5416:	08 95       	ret

00005418 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    5418:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    541a:	21 15       	cp	r18, r1
    541c:	31 05       	cpc	r19, r1
    541e:	41 f4       	brne	.+16     	; 0x5430 <Print::print(unsigned long, int)+0x18>
    5420:	ed 91       	ld	r30, X+
    5422:	fc 91       	ld	r31, X
    5424:	01 90       	ld	r0, Z+
    5426:	f0 81       	ld	r31, Z
    5428:	e0 2d       	mov	r30, r0
    542a:	64 2f       	mov	r22, r20
    542c:	09 95       	icall
    542e:	08 95       	ret
  else return printNumber(n, base);
    5430:	0e 94 a8 29 	call	0x5350	; 0x5350 <Print::printNumber(unsigned long, unsigned char)>
}
    5434:	08 95       	ret

00005436 <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    5436:	ef 92       	push	r14
    5438:	ff 92       	push	r15
    543a:	0f 93       	push	r16
    543c:	1f 93       	push	r17
    543e:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    5440:	7b 01       	movw	r14, r22
    5442:	00 e0       	ldi	r16, 0x00	; 0
    5444:	10 e0       	ldi	r17, 0x00	; 0
    5446:	b8 01       	movw	r22, r16
    5448:	a7 01       	movw	r20, r14
    544a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <Print::print(unsigned long, int)>
}
    544e:	1f 91       	pop	r17
    5450:	0f 91       	pop	r16
    5452:	ff 90       	pop	r15
    5454:	ef 90       	pop	r14
    5456:	08 95       	ret

00005458 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    5458:	ef 92       	push	r14
    545a:	ff 92       	push	r15
    545c:	0f 93       	push	r16
    545e:	1f 93       	push	r17
    5460:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    5462:	e6 2e       	mov	r14, r22
    5464:	ff 24       	eor	r15, r15
    5466:	00 e0       	ldi	r16, 0x00	; 0
    5468:	10 e0       	ldi	r17, 0x00	; 0
    546a:	b8 01       	movw	r22, r16
    546c:	a7 01       	movw	r20, r14
    546e:	0e 94 0c 2a 	call	0x5418	; 0x5418 <Print::print(unsigned long, int)>
}
    5472:	1f 91       	pop	r17
    5474:	0f 91       	pop	r16
    5476:	ff 90       	pop	r15
    5478:	ef 90       	pop	r14
    547a:	08 95       	ret

0000547c <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    547c:	cf 92       	push	r12
    547e:	df 92       	push	r13
    5480:	ef 92       	push	r14
    5482:	ff 92       	push	r15
    5484:	0f 93       	push	r16
    5486:	1f 93       	push	r17
    5488:	cf 93       	push	r28
    548a:	df 93       	push	r29
    548c:	ec 01       	movw	r28, r24
    548e:	6a 01       	movw	r12, r20
    5490:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    5492:	21 15       	cp	r18, r1
    5494:	31 05       	cpc	r19, r1
    5496:	41 f4       	brne	.+16     	; 0x54a8 <Print::print(long, int)+0x2c>
    return write(n);
    5498:	e8 81       	ld	r30, Y
    549a:	f9 81       	ldd	r31, Y+1	; 0x01
    549c:	01 90       	ld	r0, Z+
    549e:	f0 81       	ld	r31, Z
    54a0:	e0 2d       	mov	r30, r0
    54a2:	64 2f       	mov	r22, r20
    54a4:	09 95       	icall
    54a6:	1f c0       	rjmp	.+62     	; 0x54e6 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    54a8:	2a 30       	cpi	r18, 0x0A	; 10
    54aa:	31 05       	cpc	r19, r1
    54ac:	d1 f4       	brne	.+52     	; 0x54e2 <Print::print(long, int)+0x66>
    if (n < 0) {
    54ae:	77 ff       	sbrs	r23, 7
    54b0:	17 c0       	rjmp	.+46     	; 0x54e0 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    54b2:	e8 81       	ld	r30, Y
    54b4:	f9 81       	ldd	r31, Y+1	; 0x01
    54b6:	01 90       	ld	r0, Z+
    54b8:	f0 81       	ld	r31, Z
    54ba:	e0 2d       	mov	r30, r0
    54bc:	6d e2       	ldi	r22, 0x2D	; 45
    54be:	09 95       	icall
    54c0:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    54c2:	44 27       	eor	r20, r20
    54c4:	55 27       	eor	r21, r21
    54c6:	ba 01       	movw	r22, r20
    54c8:	4c 19       	sub	r20, r12
    54ca:	5d 09       	sbc	r21, r13
    54cc:	6e 09       	sbc	r22, r14
    54ce:	7f 09       	sbc	r23, r15
    54d0:	ce 01       	movw	r24, r28
    54d2:	2a e0       	ldi	r18, 0x0A	; 10
    54d4:	0e 94 a8 29 	call	0x5350	; 0x5350 <Print::printNumber(unsigned long, unsigned char)>
    54d8:	98 01       	movw	r18, r16
    54da:	28 0f       	add	r18, r24
    54dc:	39 1f       	adc	r19, r25
    54de:	04 c0       	rjmp	.+8      	; 0x54e8 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    54e0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    54e2:	0e 94 a8 29 	call	0x5350	; 0x5350 <Print::printNumber(unsigned long, unsigned char)>
    54e6:	9c 01       	movw	r18, r24
  }
}
    54e8:	c9 01       	movw	r24, r18
    54ea:	df 91       	pop	r29
    54ec:	cf 91       	pop	r28
    54ee:	1f 91       	pop	r17
    54f0:	0f 91       	pop	r16
    54f2:	ff 90       	pop	r15
    54f4:	ef 90       	pop	r14
    54f6:	df 90       	pop	r13
    54f8:	cf 90       	pop	r12
    54fa:	08 95       	ret

000054fc <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    54fc:	ef 92       	push	r14
    54fe:	ff 92       	push	r15
    5500:	0f 93       	push	r16
    5502:	1f 93       	push	r17
    5504:	7b 01       	movw	r14, r22
    5506:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    5508:	00 27       	eor	r16, r16
    550a:	f7 fc       	sbrc	r15, 7
    550c:	00 95       	com	r16
    550e:	10 2f       	mov	r17, r16
    5510:	b8 01       	movw	r22, r16
    5512:	a7 01       	movw	r20, r14
    5514:	0e 94 3e 2a 	call	0x547c	; 0x547c <Print::print(long, int)>
}
    5518:	1f 91       	pop	r17
    551a:	0f 91       	pop	r16
    551c:	ff 90       	pop	r15
    551e:	ef 90       	pop	r14
    5520:	08 95       	ret

00005522 <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5522:	0e 94 8c 29 	call	0x5318	; 0x5318 <Print::write(char const*)>
}
    5526:	08 95       	ret

00005528 <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    5528:	ef 92       	push	r14
    552a:	ff 92       	push	r15
    552c:	0f 93       	push	r16
    552e:	1f 93       	push	r17
    5530:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5532:	0e 94 8c 29 	call	0x5318	; 0x5318 <Print::write(char const*)>
    5536:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5538:	c7 01       	movw	r24, r14
    553a:	0e 94 58 29 	call	0x52b0	; 0x52b0 <Print::println()>
    553e:	08 0f       	add	r16, r24
    5540:	19 1f       	adc	r17, r25
  return n;
}
    5542:	c8 01       	movw	r24, r16
    5544:	1f 91       	pop	r17
    5546:	0f 91       	pop	r16
    5548:	ff 90       	pop	r15
    554a:	ef 90       	pop	r14
    554c:	08 95       	ret

0000554e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    554e:	1f 92       	push	r1
    5550:	0f 92       	push	r0
    5552:	0f b6       	in	r0, 0x3f	; 63
    5554:	0f 92       	push	r0
    5556:	11 24       	eor	r1, r1
    5558:	2f 93       	push	r18
    555a:	3f 93       	push	r19
    555c:	4f 93       	push	r20
    555e:	5f 93       	push	r21
    5560:	6f 93       	push	r22
    5562:	7f 93       	push	r23
    5564:	8f 93       	push	r24
    5566:	9f 93       	push	r25
    5568:	af 93       	push	r26
    556a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    556c:	20 91 44 03 	lds	r18, 0x0344
    5570:	30 91 45 03 	lds	r19, 0x0345
    5574:	40 91 46 03 	lds	r20, 0x0346
    5578:	50 91 47 03 	lds	r21, 0x0347
	unsigned char f = timer0_fract;
    557c:	70 91 48 03 	lds	r23, 0x0348

	m += MILLIS_INC;
    5580:	da 01       	movw	r26, r20
    5582:	c9 01       	movw	r24, r18
    5584:	40 96       	adiw	r24, 0x10	; 16
    5586:	a1 1d       	adc	r26, r1
    5588:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    558a:	67 2f       	mov	r22, r23
    558c:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    558e:	6d 37       	cpi	r22, 0x7D	; 125
    5590:	30 f0       	brcs	.+12     	; 0x559e <__vector_16+0x50>
		f -= FRACT_MAX;
    5592:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    5594:	da 01       	movw	r26, r20
    5596:	c9 01       	movw	r24, r18
    5598:	41 96       	adiw	r24, 0x11	; 17
    559a:	a1 1d       	adc	r26, r1
    559c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    559e:	60 93 48 03 	sts	0x0348, r22
	timer0_millis = m;
    55a2:	80 93 44 03 	sts	0x0344, r24
    55a6:	90 93 45 03 	sts	0x0345, r25
    55aa:	a0 93 46 03 	sts	0x0346, r26
    55ae:	b0 93 47 03 	sts	0x0347, r27
	timer0_overflow_count++;
    55b2:	80 91 40 03 	lds	r24, 0x0340
    55b6:	90 91 41 03 	lds	r25, 0x0341
    55ba:	a0 91 42 03 	lds	r26, 0x0342
    55be:	b0 91 43 03 	lds	r27, 0x0343
    55c2:	01 96       	adiw	r24, 0x01	; 1
    55c4:	a1 1d       	adc	r26, r1
    55c6:	b1 1d       	adc	r27, r1
    55c8:	80 93 40 03 	sts	0x0340, r24
    55cc:	90 93 41 03 	sts	0x0341, r25
    55d0:	a0 93 42 03 	sts	0x0342, r26
    55d4:	b0 93 43 03 	sts	0x0343, r27
}
    55d8:	bf 91       	pop	r27
    55da:	af 91       	pop	r26
    55dc:	9f 91       	pop	r25
    55de:	8f 91       	pop	r24
    55e0:	7f 91       	pop	r23
    55e2:	6f 91       	pop	r22
    55e4:	5f 91       	pop	r21
    55e6:	4f 91       	pop	r20
    55e8:	3f 91       	pop	r19
    55ea:	2f 91       	pop	r18
    55ec:	0f 90       	pop	r0
    55ee:	0f be       	out	0x3f, r0	; 63
    55f0:	0f 90       	pop	r0
    55f2:	1f 90       	pop	r1
    55f4:	18 95       	reti

000055f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    55f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    55f8:	84 b5       	in	r24, 0x24	; 36
    55fa:	82 60       	ori	r24, 0x02	; 2
    55fc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    55fe:	84 b5       	in	r24, 0x24	; 36
    5600:	81 60       	ori	r24, 0x01	; 1
    5602:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5604:	85 b5       	in	r24, 0x25	; 37
    5606:	82 60       	ori	r24, 0x02	; 2
    5608:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    560a:	85 b5       	in	r24, 0x25	; 37
    560c:	81 60       	ori	r24, 0x01	; 1
    560e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5610:	ee e6       	ldi	r30, 0x6E	; 110
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	80 81       	ld	r24, Z
    5616:	81 60       	ori	r24, 0x01	; 1
    5618:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    561a:	e1 e8       	ldi	r30, 0x81	; 129
    561c:	f0 e0       	ldi	r31, 0x00	; 0
    561e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5620:	80 81       	ld	r24, Z
    5622:	82 60       	ori	r24, 0x02	; 2
    5624:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5626:	e0 e8       	ldi	r30, 0x80	; 128
    5628:	f0 e0       	ldi	r31, 0x00	; 0
    562a:	80 81       	ld	r24, Z
    562c:	81 60       	ori	r24, 0x01	; 1
    562e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5630:	e1 eb       	ldi	r30, 0xB1	; 177
    5632:	f0 e0       	ldi	r31, 0x00	; 0
    5634:	80 81       	ld	r24, Z
    5636:	84 60       	ori	r24, 0x04	; 4
    5638:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    563a:	e0 eb       	ldi	r30, 0xB0	; 176
    563c:	f0 e0       	ldi	r31, 0x00	; 0
    563e:	80 81       	ld	r24, Z
    5640:	81 60       	ori	r24, 0x01	; 1
    5642:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    5644:	ea e7       	ldi	r30, 0x7A	; 122
    5646:	f0 e0       	ldi	r31, 0x00	; 0
    5648:	80 81       	ld	r24, Z
    564a:	84 60       	ori	r24, 0x04	; 4
    564c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    564e:	80 81       	ld	r24, Z
    5650:	82 60       	ori	r24, 0x02	; 2
    5652:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    5654:	80 81       	ld	r24, Z
    5656:	81 60       	ori	r24, 0x01	; 1
    5658:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    565a:	80 81       	ld	r24, Z
    565c:	80 68       	ori	r24, 0x80	; 128
    565e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5660:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    5664:	08 95       	ret

00005666 <__fixunssfsi>:
    5666:	b3 d0       	rcall	.+358    	; 0x57ce <__fp_splitA>
    5668:	88 f0       	brcs	.+34     	; 0x568c <__fixunssfsi+0x26>
    566a:	9f 57       	subi	r25, 0x7F	; 127
    566c:	90 f0       	brcs	.+36     	; 0x5692 <__fixunssfsi+0x2c>
    566e:	b9 2f       	mov	r27, r25
    5670:	99 27       	eor	r25, r25
    5672:	b7 51       	subi	r27, 0x17	; 23
    5674:	a0 f0       	brcs	.+40     	; 0x569e <__fixunssfsi+0x38>
    5676:	d1 f0       	breq	.+52     	; 0x56ac <__fixunssfsi+0x46>
    5678:	66 0f       	add	r22, r22
    567a:	77 1f       	adc	r23, r23
    567c:	88 1f       	adc	r24, r24
    567e:	99 1f       	adc	r25, r25
    5680:	1a f0       	brmi	.+6      	; 0x5688 <__fixunssfsi+0x22>
    5682:	ba 95       	dec	r27
    5684:	c9 f7       	brne	.-14     	; 0x5678 <__fixunssfsi+0x12>
    5686:	12 c0       	rjmp	.+36     	; 0x56ac <__fixunssfsi+0x46>
    5688:	b1 30       	cpi	r27, 0x01	; 1
    568a:	81 f0       	breq	.+32     	; 0x56ac <__fixunssfsi+0x46>
    568c:	ba d0       	rcall	.+372    	; 0x5802 <__fp_zero>
    568e:	b1 e0       	ldi	r27, 0x01	; 1
    5690:	08 95       	ret
    5692:	b7 c0       	rjmp	.+366    	; 0x5802 <__fp_zero>
    5694:	67 2f       	mov	r22, r23
    5696:	78 2f       	mov	r23, r24
    5698:	88 27       	eor	r24, r24
    569a:	b8 5f       	subi	r27, 0xF8	; 248
    569c:	39 f0       	breq	.+14     	; 0x56ac <__fixunssfsi+0x46>
    569e:	b9 3f       	cpi	r27, 0xF9	; 249
    56a0:	cc f3       	brlt	.-14     	; 0x5694 <__fixunssfsi+0x2e>
    56a2:	86 95       	lsr	r24
    56a4:	77 95       	ror	r23
    56a6:	67 95       	ror	r22
    56a8:	b3 95       	inc	r27
    56aa:	d9 f7       	brne	.-10     	; 0x56a2 <__fixunssfsi+0x3c>
    56ac:	3e f4       	brtc	.+14     	; 0x56bc <__fixunssfsi+0x56>
    56ae:	90 95       	com	r25
    56b0:	80 95       	com	r24
    56b2:	70 95       	com	r23
    56b4:	61 95       	neg	r22
    56b6:	7f 4f       	sbci	r23, 0xFF	; 255
    56b8:	8f 4f       	sbci	r24, 0xFF	; 255
    56ba:	9f 4f       	sbci	r25, 0xFF	; 255
    56bc:	08 95       	ret

000056be <__floatunsisf>:
    56be:	e8 94       	clt
    56c0:	09 c0       	rjmp	.+18     	; 0x56d4 <__floatsisf+0x12>

000056c2 <__floatsisf>:
    56c2:	97 fb       	bst	r25, 7
    56c4:	3e f4       	brtc	.+14     	; 0x56d4 <__floatsisf+0x12>
    56c6:	90 95       	com	r25
    56c8:	80 95       	com	r24
    56ca:	70 95       	com	r23
    56cc:	61 95       	neg	r22
    56ce:	7f 4f       	sbci	r23, 0xFF	; 255
    56d0:	8f 4f       	sbci	r24, 0xFF	; 255
    56d2:	9f 4f       	sbci	r25, 0xFF	; 255
    56d4:	99 23       	and	r25, r25
    56d6:	a9 f0       	breq	.+42     	; 0x5702 <__floatsisf+0x40>
    56d8:	f9 2f       	mov	r31, r25
    56da:	96 e9       	ldi	r25, 0x96	; 150
    56dc:	bb 27       	eor	r27, r27
    56de:	93 95       	inc	r25
    56e0:	f6 95       	lsr	r31
    56e2:	87 95       	ror	r24
    56e4:	77 95       	ror	r23
    56e6:	67 95       	ror	r22
    56e8:	b7 95       	ror	r27
    56ea:	f1 11       	cpse	r31, r1
    56ec:	f8 cf       	rjmp	.-16     	; 0x56de <__floatsisf+0x1c>
    56ee:	fa f4       	brpl	.+62     	; 0x572e <__floatsisf+0x6c>
    56f0:	bb 0f       	add	r27, r27
    56f2:	11 f4       	brne	.+4      	; 0x56f8 <__floatsisf+0x36>
    56f4:	60 ff       	sbrs	r22, 0
    56f6:	1b c0       	rjmp	.+54     	; 0x572e <__floatsisf+0x6c>
    56f8:	6f 5f       	subi	r22, 0xFF	; 255
    56fa:	7f 4f       	sbci	r23, 0xFF	; 255
    56fc:	8f 4f       	sbci	r24, 0xFF	; 255
    56fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5700:	16 c0       	rjmp	.+44     	; 0x572e <__floatsisf+0x6c>
    5702:	88 23       	and	r24, r24
    5704:	11 f0       	breq	.+4      	; 0x570a <__floatsisf+0x48>
    5706:	96 e9       	ldi	r25, 0x96	; 150
    5708:	11 c0       	rjmp	.+34     	; 0x572c <__floatsisf+0x6a>
    570a:	77 23       	and	r23, r23
    570c:	21 f0       	breq	.+8      	; 0x5716 <__floatsisf+0x54>
    570e:	9e e8       	ldi	r25, 0x8E	; 142
    5710:	87 2f       	mov	r24, r23
    5712:	76 2f       	mov	r23, r22
    5714:	05 c0       	rjmp	.+10     	; 0x5720 <__floatsisf+0x5e>
    5716:	66 23       	and	r22, r22
    5718:	71 f0       	breq	.+28     	; 0x5736 <__floatsisf+0x74>
    571a:	96 e8       	ldi	r25, 0x86	; 134
    571c:	86 2f       	mov	r24, r22
    571e:	70 e0       	ldi	r23, 0x00	; 0
    5720:	60 e0       	ldi	r22, 0x00	; 0
    5722:	2a f0       	brmi	.+10     	; 0x572e <__floatsisf+0x6c>
    5724:	9a 95       	dec	r25
    5726:	66 0f       	add	r22, r22
    5728:	77 1f       	adc	r23, r23
    572a:	88 1f       	adc	r24, r24
    572c:	da f7       	brpl	.-10     	; 0x5724 <__floatsisf+0x62>
    572e:	88 0f       	add	r24, r24
    5730:	96 95       	lsr	r25
    5732:	87 95       	ror	r24
    5734:	97 f9       	bld	r25, 7
    5736:	08 95       	ret

00005738 <fmax>:
    5738:	99 0f       	add	r25, r25
    573a:	bb 0b       	sbc	r27, r27
    573c:	55 0f       	add	r21, r21
    573e:	aa 0b       	sbc	r26, r26
    5740:	e0 e8       	ldi	r30, 0x80	; 128
    5742:	fe ef       	ldi	r31, 0xFE	; 254
    5744:	16 16       	cp	r1, r22
    5746:	17 06       	cpc	r1, r23
    5748:	e8 07       	cpc	r30, r24
    574a:	f9 07       	cpc	r31, r25
    574c:	70 f0       	brcs	.+28     	; 0x576a <fmax+0x32>
    574e:	12 16       	cp	r1, r18
    5750:	13 06       	cpc	r1, r19
    5752:	e4 07       	cpc	r30, r20
    5754:	f5 07       	cpc	r31, r21
    5756:	60 f0       	brcs	.+24     	; 0x5770 <fmax+0x38>
    5758:	ba 17       	cp	r27, r26
    575a:	3c f0       	brlt	.+14     	; 0x576a <fmax+0x32>
    575c:	49 f4       	brne	.+18     	; 0x5770 <fmax+0x38>
    575e:	62 17       	cp	r22, r18
    5760:	73 07       	cpc	r23, r19
    5762:	84 07       	cpc	r24, r20
    5764:	95 07       	cpc	r25, r21
    5766:	a7 95       	ror	r26
    5768:	1b f4       	brvc	.+6      	; 0x5770 <fmax+0x38>
    576a:	b9 01       	movw	r22, r18
    576c:	ca 01       	movw	r24, r20
    576e:	ba 2f       	mov	r27, r26
    5770:	b6 95       	lsr	r27
    5772:	97 95       	ror	r25
    5774:	08 95       	ret

00005776 <__fp_cmp>:
    5776:	99 0f       	add	r25, r25
    5778:	00 08       	sbc	r0, r0
    577a:	55 0f       	add	r21, r21
    577c:	aa 0b       	sbc	r26, r26
    577e:	e0 e8       	ldi	r30, 0x80	; 128
    5780:	fe ef       	ldi	r31, 0xFE	; 254
    5782:	16 16       	cp	r1, r22
    5784:	17 06       	cpc	r1, r23
    5786:	e8 07       	cpc	r30, r24
    5788:	f9 07       	cpc	r31, r25
    578a:	c0 f0       	brcs	.+48     	; 0x57bc <__fp_cmp+0x46>
    578c:	12 16       	cp	r1, r18
    578e:	13 06       	cpc	r1, r19
    5790:	e4 07       	cpc	r30, r20
    5792:	f5 07       	cpc	r31, r21
    5794:	98 f0       	brcs	.+38     	; 0x57bc <__fp_cmp+0x46>
    5796:	62 1b       	sub	r22, r18
    5798:	73 0b       	sbc	r23, r19
    579a:	84 0b       	sbc	r24, r20
    579c:	95 0b       	sbc	r25, r21
    579e:	39 f4       	brne	.+14     	; 0x57ae <__fp_cmp+0x38>
    57a0:	0a 26       	eor	r0, r26
    57a2:	61 f0       	breq	.+24     	; 0x57bc <__fp_cmp+0x46>
    57a4:	23 2b       	or	r18, r19
    57a6:	24 2b       	or	r18, r20
    57a8:	25 2b       	or	r18, r21
    57aa:	21 f4       	brne	.+8      	; 0x57b4 <__fp_cmp+0x3e>
    57ac:	08 95       	ret
    57ae:	0a 26       	eor	r0, r26
    57b0:	09 f4       	brne	.+2      	; 0x57b4 <__fp_cmp+0x3e>
    57b2:	a1 40       	sbci	r26, 0x01	; 1
    57b4:	a6 95       	lsr	r26
    57b6:	8f ef       	ldi	r24, 0xFF	; 255
    57b8:	81 1d       	adc	r24, r1
    57ba:	81 1d       	adc	r24, r1
    57bc:	08 95       	ret

000057be <__fp_split3>:
    57be:	57 fd       	sbrc	r21, 7
    57c0:	90 58       	subi	r25, 0x80	; 128
    57c2:	44 0f       	add	r20, r20
    57c4:	55 1f       	adc	r21, r21
    57c6:	59 f0       	breq	.+22     	; 0x57de <__fp_splitA+0x10>
    57c8:	5f 3f       	cpi	r21, 0xFF	; 255
    57ca:	71 f0       	breq	.+28     	; 0x57e8 <__fp_splitA+0x1a>
    57cc:	47 95       	ror	r20

000057ce <__fp_splitA>:
    57ce:	88 0f       	add	r24, r24
    57d0:	97 fb       	bst	r25, 7
    57d2:	99 1f       	adc	r25, r25
    57d4:	61 f0       	breq	.+24     	; 0x57ee <__fp_splitA+0x20>
    57d6:	9f 3f       	cpi	r25, 0xFF	; 255
    57d8:	79 f0       	breq	.+30     	; 0x57f8 <__fp_splitA+0x2a>
    57da:	87 95       	ror	r24
    57dc:	08 95       	ret
    57de:	12 16       	cp	r1, r18
    57e0:	13 06       	cpc	r1, r19
    57e2:	14 06       	cpc	r1, r20
    57e4:	55 1f       	adc	r21, r21
    57e6:	f2 cf       	rjmp	.-28     	; 0x57cc <__fp_split3+0xe>
    57e8:	46 95       	lsr	r20
    57ea:	f1 df       	rcall	.-30     	; 0x57ce <__fp_splitA>
    57ec:	08 c0       	rjmp	.+16     	; 0x57fe <__fp_splitA+0x30>
    57ee:	16 16       	cp	r1, r22
    57f0:	17 06       	cpc	r1, r23
    57f2:	18 06       	cpc	r1, r24
    57f4:	99 1f       	adc	r25, r25
    57f6:	f1 cf       	rjmp	.-30     	; 0x57da <__fp_splitA+0xc>
    57f8:	86 95       	lsr	r24
    57fa:	71 05       	cpc	r23, r1
    57fc:	61 05       	cpc	r22, r1
    57fe:	08 94       	sec
    5800:	08 95       	ret

00005802 <__fp_zero>:
    5802:	e8 94       	clt

00005804 <__fp_szero>:
    5804:	bb 27       	eor	r27, r27
    5806:	66 27       	eor	r22, r22
    5808:	77 27       	eor	r23, r23
    580a:	cb 01       	movw	r24, r22
    580c:	97 f9       	bld	r25, 7
    580e:	08 95       	ret

00005810 <__gesf2>:
    5810:	b2 df       	rcall	.-156    	; 0x5776 <__fp_cmp>
    5812:	08 f4       	brcc	.+2      	; 0x5816 <__gesf2+0x6>
    5814:	8f ef       	ldi	r24, 0xFF	; 255
    5816:	08 95       	ret

00005818 <__mulsi3>:
    5818:	62 9f       	mul	r22, r18
    581a:	d0 01       	movw	r26, r0
    581c:	73 9f       	mul	r23, r19
    581e:	f0 01       	movw	r30, r0
    5820:	82 9f       	mul	r24, r18
    5822:	e0 0d       	add	r30, r0
    5824:	f1 1d       	adc	r31, r1
    5826:	64 9f       	mul	r22, r20
    5828:	e0 0d       	add	r30, r0
    582a:	f1 1d       	adc	r31, r1
    582c:	92 9f       	mul	r25, r18
    582e:	f0 0d       	add	r31, r0
    5830:	83 9f       	mul	r24, r19
    5832:	f0 0d       	add	r31, r0
    5834:	74 9f       	mul	r23, r20
    5836:	f0 0d       	add	r31, r0
    5838:	65 9f       	mul	r22, r21
    583a:	f0 0d       	add	r31, r0
    583c:	99 27       	eor	r25, r25
    583e:	72 9f       	mul	r23, r18
    5840:	b0 0d       	add	r27, r0
    5842:	e1 1d       	adc	r30, r1
    5844:	f9 1f       	adc	r31, r25
    5846:	63 9f       	mul	r22, r19
    5848:	b0 0d       	add	r27, r0
    584a:	e1 1d       	adc	r30, r1
    584c:	f9 1f       	adc	r31, r25
    584e:	bd 01       	movw	r22, r26
    5850:	cf 01       	movw	r24, r30
    5852:	11 24       	eor	r1, r1
    5854:	08 95       	ret

00005856 <__udivmodhi4>:
    5856:	aa 1b       	sub	r26, r26
    5858:	bb 1b       	sub	r27, r27
    585a:	51 e1       	ldi	r21, 0x11	; 17
    585c:	07 c0       	rjmp	.+14     	; 0x586c <__udivmodhi4_ep>

0000585e <__udivmodhi4_loop>:
    585e:	aa 1f       	adc	r26, r26
    5860:	bb 1f       	adc	r27, r27
    5862:	a6 17       	cp	r26, r22
    5864:	b7 07       	cpc	r27, r23
    5866:	10 f0       	brcs	.+4      	; 0x586c <__udivmodhi4_ep>
    5868:	a6 1b       	sub	r26, r22
    586a:	b7 0b       	sbc	r27, r23

0000586c <__udivmodhi4_ep>:
    586c:	88 1f       	adc	r24, r24
    586e:	99 1f       	adc	r25, r25
    5870:	5a 95       	dec	r21
    5872:	a9 f7       	brne	.-22     	; 0x585e <__udivmodhi4_loop>
    5874:	80 95       	com	r24
    5876:	90 95       	com	r25
    5878:	bc 01       	movw	r22, r24
    587a:	cd 01       	movw	r24, r26
    587c:	08 95       	ret

0000587e <__divmodhi4>:
    587e:	97 fb       	bst	r25, 7
    5880:	09 2e       	mov	r0, r25
    5882:	07 26       	eor	r0, r23
    5884:	0a d0       	rcall	.+20     	; 0x589a <__divmodhi4_neg1>
    5886:	77 fd       	sbrc	r23, 7
    5888:	04 d0       	rcall	.+8      	; 0x5892 <__divmodhi4_neg2>
    588a:	e5 df       	rcall	.-54     	; 0x5856 <__udivmodhi4>
    588c:	06 d0       	rcall	.+12     	; 0x589a <__divmodhi4_neg1>
    588e:	00 20       	and	r0, r0
    5890:	1a f4       	brpl	.+6      	; 0x5898 <__divmodhi4_exit>

00005892 <__divmodhi4_neg2>:
    5892:	70 95       	com	r23
    5894:	61 95       	neg	r22
    5896:	7f 4f       	sbci	r23, 0xFF	; 255

00005898 <__divmodhi4_exit>:
    5898:	08 95       	ret

0000589a <__divmodhi4_neg1>:
    589a:	f6 f7       	brtc	.-4      	; 0x5898 <__divmodhi4_exit>
    589c:	90 95       	com	r25
    589e:	81 95       	neg	r24
    58a0:	9f 4f       	sbci	r25, 0xFF	; 255
    58a2:	08 95       	ret

000058a4 <__udivmodsi4>:
    58a4:	a1 e2       	ldi	r26, 0x21	; 33
    58a6:	1a 2e       	mov	r1, r26
    58a8:	aa 1b       	sub	r26, r26
    58aa:	bb 1b       	sub	r27, r27
    58ac:	fd 01       	movw	r30, r26
    58ae:	0d c0       	rjmp	.+26     	; 0x58ca <__udivmodsi4_ep>

000058b0 <__udivmodsi4_loop>:
    58b0:	aa 1f       	adc	r26, r26
    58b2:	bb 1f       	adc	r27, r27
    58b4:	ee 1f       	adc	r30, r30
    58b6:	ff 1f       	adc	r31, r31
    58b8:	a2 17       	cp	r26, r18
    58ba:	b3 07       	cpc	r27, r19
    58bc:	e4 07       	cpc	r30, r20
    58be:	f5 07       	cpc	r31, r21
    58c0:	20 f0       	brcs	.+8      	; 0x58ca <__udivmodsi4_ep>
    58c2:	a2 1b       	sub	r26, r18
    58c4:	b3 0b       	sbc	r27, r19
    58c6:	e4 0b       	sbc	r30, r20
    58c8:	f5 0b       	sbc	r31, r21

000058ca <__udivmodsi4_ep>:
    58ca:	66 1f       	adc	r22, r22
    58cc:	77 1f       	adc	r23, r23
    58ce:	88 1f       	adc	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	1a 94       	dec	r1
    58d4:	69 f7       	brne	.-38     	; 0x58b0 <__udivmodsi4_loop>
    58d6:	60 95       	com	r22
    58d8:	70 95       	com	r23
    58da:	80 95       	com	r24
    58dc:	90 95       	com	r25
    58de:	9b 01       	movw	r18, r22
    58e0:	ac 01       	movw	r20, r24
    58e2:	bd 01       	movw	r22, r26
    58e4:	cf 01       	movw	r24, r30
    58e6:	08 95       	ret

000058e8 <__tablejump2__>:
    58e8:	ee 0f       	add	r30, r30
    58ea:	ff 1f       	adc	r31, r31

000058ec <__tablejump__>:
    58ec:	05 90       	lpm	r0, Z+
    58ee:	f4 91       	lpm	r31, Z+
    58f0:	e0 2d       	mov	r30, r0
    58f2:	09 94       	ijmp

000058f4 <_exit>:
    58f4:	f8 94       	cli

000058f6 <__stop_program>:
    58f6:	ff cf       	rjmp	.-2      	; 0x58f6 <__stop_program>
