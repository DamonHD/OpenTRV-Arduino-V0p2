
/var/folders/ZH/ZH8hTfdkHJyweqk9InnHyE+++TI/-Tmp-/build5675720215756468054.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00003d8e  00003e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cb  00800124  00800124  00003e46  2**0
                  ALLOC
  3 .debug_aranges 00000ba8  00000000  00000000  00003e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001afd  00000000  00000000  000049ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e787  00000000  00000000  000064eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000330a  00000000  00000000  00014c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000bc27  00000000  00000000  00017f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000013e0  00000000  00000000  00023ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003a79  00000000  00000000  00024f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000619a  00000000  00000000  000289fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0008874b  00000000  00000000  0002eb97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  000b72e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
bool isSyncedWithFHT8V() { return(true); } // Lie and claim always synced.
#endif

// True if FHT8V valve is believed to be open under instruction from this system; undefined if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(FHT8V_isValveOpen); }
       0:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__ctors_end>


// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
       4:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
       8:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
       c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      10:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      14:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      18:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_6>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      1c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      20:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
      24:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_9>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      28:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      2c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      30:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      34:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      38:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      3c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      40:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__vector_16>
      44:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      48:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__vector_18>
      4c:	0c 94 87 19 	jmp	0x330e	; 0x330e <__vector_19>
      50:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      54:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__vector_21>
      58:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      5c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      60:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__vector_24>
      64:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>

00000068 <readAmbientLight()::__c>:
      68:	41 6d 62 69 65 6e 74 20 6c 69 67 68 74 3a 20 00     Ambient light: .

00000078 <FHT8V_RFM22_Reg_Values>:
      78:	06 00 08 00 0b 15 0c 12 30 00 33 06 34 08 35 10     ........0.3.4.5.
      88:	36 aa 37 cc 38 cc 39 cc 6d 0d 6e 28 6f f5 70 20     6.7.8.9.m.n(o.p 
      98:	71 21 72 20 73 00 74 00 75 73 76 64 77 00 79 23     q!r s.t.usvdw.y#
      a8:	7a 01 ff ff                                         z...

000000ac <FHT8VPollSyncAndTX_Next(bool)::__c>:
      ac:	20 46 48 54 38 56 20 54 58 00                        FHT8V TX.

000000b6 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      b6:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
      c6:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
      d6:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

000000e1 <doSync(bool)::__c>:
      e1:	20 46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41      FHT8V SYNC FINA
      f1:	4c 00                                               L.

000000f3 <doSync(bool)::__c>:
      f3:	46 48 54 38 56 20 73 79 6e 63 69 6e 67 2e 2e 2e     FHT8V syncing...
	...

00000104 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)::__c>:
     104:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
     114:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

00000120 <FHT8VPollSyncAndTX_First(bool)::__c>:
     120:	20 46 48 54 38 56 20 54 58 00                        FHT8V TX.

0000012a <FHT8VPollSyncAndTX_First(bool)::__c>:
     12a:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     13a:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

00000144 <RFM22QueueCmdToFF(unsigned char const*)::__c>:
     144:	52 46 4d 32 32 51 75 65 75 65 43 6d 64 54 6f 46     RFM22QueueCmdToF
     154:	46 3a 20 62 75 66 66 65 72 20 75 6e 74 65 72 6d     F: buffer unterm
     164:	69 6e 61 74 65 64 00                                inated.

0000016b <RFM22CheckConnected()::__c>:
     16b:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

0000017c <RFM22CheckConnected()::__c>:
     17c:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     18c:	6e 3a 20 00                                         n: .

00000190 <readTemperatureC16()::__c>:
     190:	43 20 2f 20 00                                      C / .

00000195 <readTemperatureC16()::__c>:
     195:	54 65 6d 70 3a 20 00                                Temp: .

0000019c <dumpCLIUsage()::__c>:
     19c:	73 65 74 20 57 61 72 6d 20 74 65 6d 70 20 43 43     set Warm temp CC
	...

000001ad <dumpCLIUsage()::__c>:
     1ad:	57 20 43 43 00                                      W CC.

000001b2 <dumpCLIUsage()::__c>:
     1b2:	57 61 72 6d 00                                      Warm.

000001b7 <dumpCLIUsage()::__c>:
     1b7:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000001c4 <dumpCLIUsage()::__c>:
     1c4:	54 20 48 48 20 4d 4d 00                             T HH MM.

000001cc <dumpCLIUsage()::__c>:
     1cc:	73 68 6f 77 20 53 74 61 74 75 73 00                 show Status.

000001d8 <dumpCLIUsage()::__c>:
     1d8:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     1e8:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     1f8:	48 48 20 4d 4d 20 66 6f 72 20 4c 4c 20 68 6f 75     HH MM for LL hou
     208:	72 73 00                                            rs.

0000020b <dumpCLIUsage()::__c>:
     20b:	50 20 48 48 20 4d 4d 20 4c 4c 00                    P HH MM LL.

00000216 <dumpCLIUsage()::__c>:
     216:	4c 65 61 72 6e 20 74 6f 20 77 61 72 6d 20 65 76     Learn to warm ev
     226:	65 72 79 20 32 34 68 20 66 72 6f 6d 20 6e 6f 77     ery 24h from now
     236:	2c 20 65 6c 73 65 20 63 61 6e 63 65 6c 20 73 63     , else cancel sc
     246:	68 65 64 75 6c 65 20 69 66 20 69 6e 20 66 72 6f     hedule if in fro
     256:	73 74 20 6d 6f 64 65 00                             st mode.

0000025e <dumpCLIUsage()::__c>:
     25e:	73 65 74 20 77 69 72 65 6c 65 73 73 20 46 48 54     set wireless FHT
     26e:	38 56 20 48 6f 75 73 65 20 63 6f 64 65 73 20 31     8V House codes 1
     27e:	26 32 00                                            &2.

00000281 <dumpCLIUsage()::__c>:
     281:	48 20 48 31 20 48 32 00                             H H1 H2.

00000289 <dumpCLIUsage()::__c>:
     289:	73 65 74 20 46 72 6f 73 74 20 74 65 6d 70 20 43     set Frost temp C
     299:	43 00                                               C.

0000029b <dumpCLIUsage()::__c>:
     29b:	46 20 43 43 00                                      F CC.

000002a0 <dumpCLIUsage()::__c>:
     2a0:	46 72 6f 73 74 00                                   Frost.

000002a6 <dumpCLIUsage()::__c>:
     2a6:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

000002af <dumpCLIUsage()::__c>:
     2af:	42 61 6b 65 00                                      Bake.

000002b4 <dumpCLIUsage()::__c>:
     2b4:	74 68 69 73 20 68 65 6c 70 00                       this help.

000002be <dumpCLIUsage()::__c>:
     2be:	43 4c 49 20 75 73 61 67 65 3a 00                    CLI usage:.

000002c9 <InvalidIgnored()::__c>:
     2c9:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     2d9:	2e 00                                               ..

000002db <serialStatusReport()::__c>:
     2db:	48 43 00                                            HC.

000002de <setup::__c>:
     2de:	65 72 76 20 00                                      erv .

000002e3 <setup::__c>:
     2e3:	52 4e 47 38 20 00                                   RNG8 .

000002e9 <setup::__c>:
     2e9:	65 65 73 65 65 64 20 00                             eeseed .

000002f1 <setup::__c>:
     2f1:	73 72 73 65 65 64 20 00                             srseed .

000002f9 <setup::__c>:
     2f9:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     309:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     319:	75 6e 6e 69 6e 67 21 00                             unning!.

00000321 <setup::__c>:
     321:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     331:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     341:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

0000034e <setup::__c>:
     34e:	47 61 74 68 65 72 69 6e 67 20 69 6e 69 74 69 61     Gathering initia
     35e:	6c 20 69 6e 70 75 74 73 20 61 6e 64 20 63 6f 6d     l inputs and com
     36e:	70 75 74 69 6e 67 20 74 61 72 67 65 74 2f 64 65     puting target/de
     37e:	6d 61 6e 64 2e 2e 2e 00                             mand....

00000386 <setup::__c>:
     386:	43 00                                               C.

00000388 <setup::__c>:
     388:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

00000393 <setup::__c>:
     393:	6d 56 00                                            mV.

00000396 <setup::__c>:
     396:	56 63 63 3a 20 00                                   Vcc: .

0000039c <setup::__c>:
     39c:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     3ac:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 2e 2e     serial logging..
     3bc:	2e 00                                               ..

000003be <port_to_mode_PGM>:
     3be:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003c8 <port_to_output_PGM>:
     3c8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003d2 <port_to_input_PGM>:
     3d2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003dc <digital_pin_to_port_PGM>:
     3dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3ec:	03 03 03 03                                         ....

000003f0 <digital_pin_to_bit_mask_PGM>:
     3f0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     400:	04 08 10 20                                         ... 

00000404 <digital_pin_to_timer_PGM>:
     404:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     414:	00 00 00 00                                         ....

00000418 <__ctors_start>:
     418:	92 15       	cp	r25, r2
     41a:	50 1b       	sub	r21, r16

0000041c <__ctors_end>:
     41c:	11 24       	eor	r1, r1
     41e:	1f be       	out	0x3f, r1	; 63
     420:	cf ef       	ldi	r28, 0xFF	; 255
     422:	d8 e0       	ldi	r29, 0x08	; 8
     424:	de bf       	out	0x3e, r29	; 62
     426:	cd bf       	out	0x3d, r28	; 61

00000428 <__do_copy_data>:
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	ee e8       	ldi	r30, 0x8E	; 142
     430:	fd e3       	ldi	r31, 0x3D	; 61
     432:	02 c0       	rjmp	.+4      	; 0x438 <.do_copy_data_start>

00000434 <.do_copy_data_loop>:
     434:	05 90       	lpm	r0, Z+
     436:	0d 92       	st	X+, r0

00000438 <.do_copy_data_start>:
     438:	a4 32       	cpi	r26, 0x24	; 36
     43a:	b1 07       	cpc	r27, r17
     43c:	d9 f7       	brne	.-10     	; 0x434 <.do_copy_data_loop>

0000043e <__do_clear_bss>:
     43e:	12 e0       	ldi	r17, 0x02	; 2
     440:	a4 e2       	ldi	r26, 0x24	; 36
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	01 c0       	rjmp	.+2      	; 0x448 <.do_clear_bss_start>

00000446 <.do_clear_bss_loop>:
     446:	1d 92       	st	X+, r1

00000448 <.do_clear_bss_start>:
     448:	af 3e       	cpi	r26, 0xEF	; 239
     44a:	b1 07       	cpc	r27, r17
     44c:	e1 f7       	brne	.-8      	; 0x446 <.do_clear_bss_loop>

0000044e <__do_global_ctors>:
     44e:	14 e0       	ldi	r17, 0x04	; 4
     450:	cc e1       	ldi	r28, 0x1C	; 28
     452:	d4 e0       	ldi	r29, 0x04	; 4
     454:	04 c0       	rjmp	.+8      	; 0x45e <.do_global_ctors_start>

00000456 <.do_global_ctors_loop>:
     456:	22 97       	sbiw	r28, 0x02	; 2
     458:	fe 01       	movw	r30, r28
     45a:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__tablejump__>

0000045e <.do_global_ctors_start>:
     45e:	c8 31       	cpi	r28, 0x18	; 24
     460:	d1 07       	cpc	r29, r17
     462:	c9 f7       	brne	.-14     	; 0x456 <.do_global_ctors_loop>
     464:	0e 94 a6 1b 	call	0x374c	; 0x374c <main>
     468:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <_exit>

0000046c <__bad_interrupt>:
     46c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000470 <abort>:
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	f8 94       	cli
     476:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <_exit>

0000047a <atoi>:
     47a:	fc 01       	movw	r30, r24
     47c:	88 27       	eor	r24, r24
     47e:	99 27       	eor	r25, r25
     480:	e8 94       	clt
     482:	21 91       	ld	r18, Z+
     484:	20 32       	cpi	r18, 0x20	; 32
     486:	e9 f3       	breq	.-6      	; 0x482 <atoi+0x8>
     488:	29 30       	cpi	r18, 0x09	; 9
     48a:	10 f0       	brcs	.+4      	; 0x490 <atoi+0x16>
     48c:	2e 30       	cpi	r18, 0x0E	; 14
     48e:	c8 f3       	brcs	.-14     	; 0x482 <atoi+0x8>
     490:	2b 32       	cpi	r18, 0x2B	; 43
     492:	41 f0       	breq	.+16     	; 0x4a4 <atoi+0x2a>
     494:	2d 32       	cpi	r18, 0x2D	; 45
     496:	39 f4       	brne	.+14     	; 0x4a6 <atoi+0x2c>
     498:	68 94       	set
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <atoi+0x2a>
     49c:	0e 94 cb 02 	call	0x596	; 0x596 <__mulhi_const_10>
     4a0:	82 0f       	add	r24, r18
     4a2:	91 1d       	adc	r25, r1
     4a4:	21 91       	ld	r18, Z+
     4a6:	20 53       	subi	r18, 0x30	; 48
     4a8:	2a 30       	cpi	r18, 0x0A	; 10
     4aa:	c0 f3       	brcs	.-16     	; 0x49c <atoi+0x22>
     4ac:	1e f4       	brtc	.+6      	; 0x4b4 <atoi+0x3a>
     4ae:	90 95       	com	r25
     4b0:	81 95       	neg	r24
     4b2:	9f 4f       	sbci	r25, 0xFF	; 255
     4b4:	08 95       	ret

000004b6 <strlen_P>:
     4b6:	fc 01       	movw	r30, r24
     4b8:	05 90       	lpm	r0, Z+
     4ba:	00 20       	and	r0, r0
     4bc:	e9 f7       	brne	.-6      	; 0x4b8 <strlen_P+0x2>
     4be:	80 95       	com	r24
     4c0:	90 95       	com	r25
     4c2:	8e 0f       	add	r24, r30
     4c4:	9f 1f       	adc	r25, r31
     4c6:	08 95       	ret

000004c8 <strtok_r>:
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	31 f4       	brne	.+12     	; 0x4d8 <strtok_r+0x10>
     4cc:	da 01       	movw	r26, r20
     4ce:	8d 91       	ld	r24, X+
     4d0:	9c 91       	ld	r25, X
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <strtok_r+0x10>
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <strtok_r+0x2c>
     4d8:	dc 01       	movw	r26, r24
     4da:	fb 01       	movw	r30, r22
     4dc:	3d 91       	ld	r19, X+
     4de:	21 91       	ld	r18, Z+
     4e0:	22 23       	and	r18, r18
     4e2:	19 f0       	breq	.+6      	; 0x4ea <strtok_r+0x22>
     4e4:	32 17       	cp	r19, r18
     4e6:	c9 f3       	breq	.-14     	; 0x4da <strtok_r+0x12>
     4e8:	fa cf       	rjmp	.-12     	; 0x4de <strtok_r+0x16>
     4ea:	33 23       	and	r19, r19
     4ec:	31 f4       	brne	.+12     	; 0x4fa <strtok_r+0x32>
     4ee:	da 01       	movw	r26, r20
     4f0:	1d 92       	st	X+, r1
     4f2:	1c 92       	st	X, r1
     4f4:	88 27       	eor	r24, r24
     4f6:	99 27       	eor	r25, r25
     4f8:	08 95       	ret
     4fa:	11 97       	sbiw	r26, 0x01	; 1
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	fb 01       	movw	r30, r22
     502:	3d 91       	ld	r19, X+
     504:	21 91       	ld	r18, Z+
     506:	32 17       	cp	r19, r18
     508:	71 f4       	brne	.+28     	; 0x526 <strtok_r+0x5e>
     50a:	33 23       	and	r19, r19
     50c:	21 f4       	brne	.+8      	; 0x516 <strtok_r+0x4e>
     50e:	88 27       	eor	r24, r24
     510:	99 27       	eor	r25, r25
     512:	11 97       	sbiw	r26, 0x01	; 1
     514:	02 c0       	rjmp	.+4      	; 0x51a <strtok_r+0x52>
     516:	1e 92       	st	-X, r1
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	fa 01       	movw	r30, r20
     51c:	a1 93       	st	Z+, r26
     51e:	b0 83       	st	Z, r27
     520:	9f 91       	pop	r25
     522:	8f 91       	pop	r24
     524:	08 95       	ret
     526:	22 23       	and	r18, r18
     528:	69 f7       	brne	.-38     	; 0x504 <strtok_r+0x3c>
     52a:	ea cf       	rjmp	.-44     	; 0x500 <strtok_r+0x38>

0000052c <strupr>:
     52c:	dc 01       	movw	r26, r24
     52e:	6c 91       	ld	r22, X
     530:	61 56       	subi	r22, 0x61	; 97
     532:	6a 31       	cpi	r22, 0x1A	; 26
     534:	08 f0       	brcs	.+2      	; 0x538 <strupr+0xc>
     536:	60 5e       	subi	r22, 0xE0	; 224
     538:	6f 5b       	subi	r22, 0xBF	; 191
     53a:	6d 93       	st	X+, r22
     53c:	c1 f7       	brne	.-16     	; 0x52e <strupr+0x2>
     53e:	08 95       	ret

00000540 <__eerd_word>:
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	7b 01       	movw	r14, r22
     54c:	8c 01       	movw	r16, r24
     54e:	fb 01       	movw	r30, r22
     550:	09 95       	icall
     552:	d8 2e       	mov	r13, r24
     554:	c8 01       	movw	r24, r16
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	f7 01       	movw	r30, r14
     55a:	09 95       	icall
     55c:	98 2f       	mov	r25, r24
     55e:	8d 2d       	mov	r24, r13
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	08 95       	ret

0000056c <__eewr_word>:
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	d7 2e       	mov	r13, r23
     578:	7a 01       	movw	r14, r20
     57a:	8c 01       	movw	r16, r24
     57c:	fa 01       	movw	r30, r20
     57e:	09 95       	icall
     580:	c8 01       	movw	r24, r16
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	6d 2d       	mov	r22, r13
     586:	f7 01       	movw	r30, r14
     588:	09 95       	icall
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	08 95       	ret

00000596 <__mulhi_const_10>:
     596:	7a e0       	ldi	r23, 0x0A	; 10
     598:	97 9f       	mul	r25, r23
     59a:	90 2d       	mov	r25, r0
     59c:	87 9f       	mul	r24, r23
     59e:	80 2d       	mov	r24, r0
     5a0:	91 0d       	add	r25, r1
     5a2:	11 24       	eor	r1, r1
     5a4:	08 95       	ret

000005a6 <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     5a6:	80 91 26 01 	lds	r24, 0x0126
     5aa:	08 95       	ret

000005ac <readAmbientLight()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
// Measure/store/return the current room ambient light levels.
int readAmbientLight()
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(true);
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	0e 94 bb 09 	call	0x1376	; 0x1376 <power_intermittent_peripherals_enable(bool)>

  //analogReference(DEFAULT); // Force use of Vcc as reference.

  const int al = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <analogueNoiseReducedRead(int, unsigned char)>
     5c0:	ec 01       	movw	r28, r24
  ambientLightLevel = al;
     5c2:	90 93 25 01 	sts	0x0125, r25
     5c6:	80 93 24 01 	sts	0x0124, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Ambient light: ");
     5ca:	84 ec       	ldi	r24, 0xC4	; 196
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	68 e6       	ldi	r22, 0x68	; 104
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
     5d6:	84 ec       	ldi	r24, 0xC4	; 196
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT(ambientLightLevel);
     5de:	60 91 24 01 	lds	r22, 0x0124
     5e2:	70 91 25 01 	lds	r23, 0x0125
     5e6:	84 ec       	ldi	r24, 0xC4	; 196
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	4a e0       	ldi	r20, 0x0A	; 10
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
     5f2:	84 ec       	ldi	r24, 0xC4	; 196
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN();
     5fa:	84 ec       	ldi	r24, 0xC4	; 196
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
     602:	84 ec       	ldi	r24, 0xC4	; 196
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif

  // Adjust room-lit flag, with hysteresis.
  if(al < LDR_THR_LOW) { isRoomLitFlag = false; }
     60a:	c0 3a       	cpi	r28, 0xA0	; 160
     60c:	d1 05       	cpc	r29, r1
     60e:	1c f4       	brge	.+6      	; 0x616 <readAmbientLight()+0x6a>
     610:	10 92 26 01 	sts	0x0126, r1
     614:	06 c0       	rjmp	.+12     	; 0x622 <readAmbientLight()+0x76>
  else if(al > LDR_THR_HIGH) { isRoomLitFlag = true; }
     616:	c9 3c       	cpi	r28, 0xC9	; 201
     618:	d1 05       	cpc	r29, r1
     61a:	1c f0       	brlt	.+6      	; 0x622 <readAmbientLight()+0x76>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 26 01 	sts	0x0126, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  power_intermittent_peripherals_disable();
     622:	0e 94 4a 09 	call	0x1294	; 0x1294 <power_intermittent_peripherals_disable()>

  return(al);
  }
     626:	ce 01       	movw	r24, r28
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <getTRVPercentOpen()>:
#include "Temperature_Sensor.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     62e:	80 91 28 01 	lds	r24, 0x0128
     632:	08 95       	ret

00000634 <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     634:	80 91 27 01 	lds	r24, 0x0127
     638:	08 95       	ret

0000063a <getFROSTTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     63a:	f9 99       	sbic	0x1f, 1	; 31
     63c:	fe cf       	rjmp	.-4      	; 0x63a <getFROSTTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     63e:	8c e0       	ldi	r24, 0x0C	; 12
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	92 bd       	out	0x22, r25	; 34
     644:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     646:	f8 9a       	sbi	0x1f, 0	; 31
     648:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     64a:	89 2f       	mov	r24, r25
     64c:	85 50       	subi	r24, 0x05	; 5
     64e:	8b 35       	cpi	r24, 0x5B	; 91
     650:	08 f0       	brcs	.+2      	; 0x654 <getFROSTTargetC()+0x1a>
     652:	95 e0       	ldi	r25, 0x05	; 5
  // Return valid persisted value.
  return(stored);
  }
     654:	89 2f       	mov	r24, r25
     656:	08 95       	ret

00000658 <getWARMTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     658:	f9 99       	sbic	0x1f, 1	; 31
     65a:	fe cf       	rjmp	.-4      	; 0x658 <getWARMTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	92 bd       	out	0x22, r25	; 34
     662:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     664:	f8 9a       	sbi	0x1f, 0	; 31
     666:	20 b5       	in	r18, 0x20	; 32
uint8_t getWARMTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(max(WARM, getFROSTTargetC())); }
     668:	82 2f       	mov	r24, r18
     66a:	85 50       	subi	r24, 0x05	; 5
     66c:	8b 35       	cpi	r24, 0x5B	; 91
     66e:	88 f0       	brcs	.+34     	; 0x692 <getWARMTargetC()+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     670:	f9 99       	sbic	0x1f, 1	; 31
     672:	fe cf       	rjmp	.-4      	; 0x670 <getWARMTargetC()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     674:	8c e0       	ldi	r24, 0x0C	; 12
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	92 bd       	out	0x22, r25	; 34
     67a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     67c:	f8 9a       	sbi	0x1f, 0	; 31
     67e:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     680:	89 2f       	mov	r24, r25
     682:	85 50       	subi	r24, 0x05	; 5
     684:	8b 35       	cpi	r24, 0x5B	; 91
     686:	08 f5       	brcc	.+66     	; 0x6ca <getWARMTargetC()+0x72>
uint8_t getWARMTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(max(WARM, getFROSTTargetC())); }
     688:	91 31       	cpi	r25, 0x11	; 17
     68a:	f8 f0       	brcs	.+62     	; 0x6ca <getWARMTargetC()+0x72>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     68c:	f9 99       	sbic	0x1f, 1	; 31
     68e:	fe cf       	rjmp	.-4      	; 0x68c <getWARMTargetC()+0x34>
     690:	11 c0       	rjmp	.+34     	; 0x6b4 <getWARMTargetC()+0x5c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     692:	f9 99       	sbic	0x1f, 1	; 31
     694:	fe cf       	rjmp	.-4      	; 0x692 <getWARMTargetC()+0x3a>
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	92 bd       	out	0x22, r25	; 34
     69c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     69e:	f8 9a       	sbi	0x1f, 0	; 31
     6a0:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     6a2:	89 2f       	mov	r24, r25
     6a4:	85 50       	subi	r24, 0x05	; 5
     6a6:	8b 35       	cpi	r24, 0x5B	; 91
     6a8:	08 f0       	brcs	.+2      	; 0x6ac <getWARMTargetC()+0x54>
     6aa:	95 e0       	ldi	r25, 0x05	; 5
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(max(WARM, getFROSTTargetC())); }
  // Return valid persisted value (or frost value if set and higher).
  return(max(stored, getFROSTTargetC()));
     6ac:	92 17       	cp	r25, r18
     6ae:	80 f0       	brcs	.+32     	; 0x6d0 <getWARMTargetC()+0x78>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     6b0:	f9 99       	sbic	0x1f, 1	; 31
     6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <getWARMTargetC()+0x58>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     6b4:	8c e0       	ldi	r24, 0x0C	; 12
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	92 bd       	out	0x22, r25	; 34
     6ba:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     6bc:	f8 9a       	sbi	0x1f, 0	; 31
     6be:	20 b5       	in	r18, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     6c0:	82 2f       	mov	r24, r18
     6c2:	85 50       	subi	r24, 0x05	; 5
     6c4:	8b 35       	cpi	r24, 0x5B	; 91
     6c6:	18 f4       	brcc	.+6      	; 0x6ce <getWARMTargetC()+0x76>
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <getWARMTargetC()+0x78>
     6ca:	21 e1       	ldi	r18, 0x11	; 17
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <getWARMTargetC()+0x78>
     6ce:	25 e0       	ldi	r18, 0x05	; 5
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(max(WARM, getFROSTTargetC())); }
  // Return valid persisted value (or frost value if set and higher).
  return(max(stored, getFROSTTargetC()));
  }
     6d0:	82 2f       	mov	r24, r18
     6d2:	08 95       	ret

000006d4 <computeTargetAndDemand()>:


// Compute target temperature.
static void computeTargetTemperature()
  {
  if(!inWarmMode()) // In FROST mode.
     6d4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <inWarmMode()>
     6d8:	88 23       	and	r24, r24
     6da:	81 f4       	brne	.+32     	; 0x6fc <computeTargetAndDemand()+0x28>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     6dc:	f9 99       	sbic	0x1f, 1	; 31
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <computeTargetAndDemand()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     6e0:	8c e0       	ldi	r24, 0x0C	; 12
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	92 bd       	out	0x22, r25	; 34
     6e6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     6e8:	f8 9a       	sbi	0x1f, 0	; 31
     6ea:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     6ec:	89 2f       	mov	r24, r25
     6ee:	85 50       	subi	r24, 0x05	; 5
     6f0:	8b 35       	cpi	r24, 0x5B	; 91
     6f2:	08 f0       	brcs	.+2      	; 0x6f6 <computeTargetAndDemand()+0x22>
     6f4:	95 e0       	ldi	r25, 0x05	; 5

// Compute target temperature.
static void computeTargetTemperature()
  {
  if(!inWarmMode()) // In FROST mode.
    { targetTempC = getFROSTTargetC(); } // No setbacks apply in FROST mode.
     6f6:	90 93 27 01 	sts	0x0127, r25
     6fa:	23 c0       	rjmp	.+70     	; 0x742 <computeTargetAndDemand()+0x6e>

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
     6fc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <inBakeMode()>
     700:	88 23       	and	r24, r24
     702:	61 f0       	breq	.+24     	; 0x71c <computeTargetAndDemand()+0x48>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = min(getWARMTargetC() + BAKE_UPLIFT, MAX_TARGET_C); // No setbacks apply in BAKE mode.
     704:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	8a 35       	cpi	r24, 0x5A	; 90
     70c:	91 05       	cpc	r25, r1
     70e:	14 f0       	brlt	.+4      	; 0x714 <computeTargetAndDemand()+0x40>
     710:	8f e5       	ldi	r24, 0x5F	; 95
     712:	15 c0       	rjmp	.+42     	; 0x73e <computeTargetAndDemand()+0x6a>
     714:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
     718:	8b 5f       	subi	r24, 0xFB	; 251
     71a:	11 c0       	rjmp	.+34     	; 0x73e <computeTargetAndDemand()+0x6a>

  else // In 'WARM' mode with possible setback.
    {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
    // Set back target temperature a little if room is too dark for activity.
    if(!isRoomLit())
     71c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <isRoomLit()>
     720:	88 23       	and	r24, r24
     722:	59 f4       	brne	.+22     	; 0x73a <computeTargetAndDemand()+0x66>
      { targetTempC = max(getWARMTargetC() - SETBACK, MIN_TARGET_C); } // Target must never be below low enough for real frost hazard.
     724:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	07 97       	sbiw	r24, 0x07	; 7
     72c:	14 f4       	brge	.+4      	; 0x732 <computeTargetAndDemand()+0x5e>
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	06 c0       	rjmp	.+12     	; 0x73e <computeTargetAndDemand()+0x6a>
     732:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
     736:	81 50       	subi	r24, 0x01	; 1
     738:	02 c0       	rjmp	.+4      	; 0x73e <computeTargetAndDemand()+0x6a>
    else
      { targetTempC = getWARMTargetC(); } // Room light enough for normal activity so use WARM target directly.
     73a:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
     73e:	80 93 27 01 	sts	0x0127, r24
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
     742:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <getTemperatureC16()>
     746:	bc 01       	movw	r22, r24
  const int currentTempC = currentTempC16 >> 4;
     748:	ac 01       	movw	r20, r24
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	55 95       	asr	r21
     74e:	47 95       	ror	r20
     750:	8a 95       	dec	r24
     752:	e1 f7       	brne	.-8      	; 0x74c <computeTargetAndDemand()+0x78>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     754:	80 91 27 01 	lds	r24, 0x0127
     758:	28 2f       	mov	r18, r24
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	42 17       	cp	r20, r18
     75e:	53 07       	cpc	r21, r19
     760:	4c f4       	brge	.+18     	; 0x774 <computeTargetAndDemand()+0xa0>
    {
    // Limit value open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
     762:	80 91 28 01 	lds	r24, 0x0128
     766:	84 36       	cpi	r24, 0x64	; 100
     768:	a9 f1       	breq	.+106    	; 0x7d4 <computeTargetAndDemand()+0x100>
      {
      const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
     76a:	86 5f       	subi	r24, 0xF6	; 246
      if(tmp < 100) { TRVPercentOpen = tmp; } else { TRVPercentOpen = 100; } // Capped at 100%.        
     76c:	84 36       	cpi	r24, 0x64	; 100
     76e:	58 f1       	brcs	.+86     	; 0x7c6 <computeTargetAndDemand()+0xf2>
     770:	84 e6       	ldi	r24, 0x64	; 100
     772:	29 c0       	rjmp	.+82     	; 0x7c6 <computeTargetAndDemand()+0xf2>
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve.
     774:	24 17       	cp	r18, r20
     776:	35 07       	cpc	r19, r21
     778:	4c f4       	brge	.+18     	; 0x78c <computeTargetAndDemand()+0xb8>
    {
#if defined(SUPPORT_BAKE)
    cancelBake(); // Ensure bake mode cancelled immediately if over target (eg when target is BAKE).
     77a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <cancelBake()>
#endif
    if(TRVPercentOpen != 0)
     77e:	80 91 28 01 	lds	r24, 0x0128
     782:	88 23       	and	r24, r24
     784:	39 f1       	breq	.+78     	; 0x7d4 <computeTargetAndDemand()+0x100>
      {
      TRVPercentOpen = 0; // Always force to off immediately when requested.  (Eagerly stop heating to conserve.)
     786:	10 92 28 01 	sts	0x0128, r1
     78a:	22 c0       	rjmp	.+68     	; 0x7d0 <computeTargetAndDemand()+0xfc>
    }
  else // Close to temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = currentTempC16 & 0xf; // Only interested in lsbits.
     78c:	86 2f       	mov	r24, r22
     78e:	8f 70       	andi	r24, 0x0F	; 15
    tmp = 16 - tmp; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
    const uint8_t targetPO = tmp * 6; // Now in range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
     790:	90 e1       	ldi	r25, 0x10	; 16
     792:	98 1b       	sub	r25, r24
     794:	86 e0       	ldi	r24, 0x06	; 6
     796:	98 9f       	mul	r25, r24
     798:	90 01       	movw	r18, r0
     79a:	11 24       	eor	r1, r1
     79c:	92 2f       	mov	r25, r18
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO < TRVPercentOpen) // Currently open more than required.
     79e:	80 91 28 01 	lds	r24, 0x0128
     7a2:	28 17       	cp	r18, r24
     7a4:	40 f4       	brcc	.+16     	; 0x7b6 <computeTargetAndDemand()+0xe2>
      {
      const uint8_t slew = TRVPercentOpen - targetPO;
     7a6:	48 2f       	mov	r20, r24
     7a8:	42 1b       	sub	r20, r18
      if(slew >= TRV_MIN_SLEW_PC)
     7aa:	47 30       	cpi	r20, 0x07	; 7
     7ac:	98 f0       	brcs	.+38     	; 0x7d4 <computeTargetAndDemand()+0x100>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
     7ae:	4b 30       	cpi	r20, 0x0B	; 11
     7b0:	68 f0       	brcs	.+26     	; 0x7cc <computeTargetAndDemand()+0xf8>
            { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     7b2:	8a 50       	subi	r24, 0x0A	; 10
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <computeTargetAndDemand()+0xf2>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
        changed = true; // TRV setting has been changed.
        }
      }
    else if(targetPO > TRVPercentOpen) // Currently open less than required.
     7b6:	82 17       	cp	r24, r18
     7b8:	68 f4       	brcc	.+26     	; 0x7d4 <computeTargetAndDemand()+0x100>
      {
      const uint8_t slew = targetPO - TRVPercentOpen;
     7ba:	98 1b       	sub	r25, r24
      if(slew >= TRV_MIN_SLEW_PC)
     7bc:	97 30       	cpi	r25, 0x07	; 7
     7be:	50 f0       	brcs	.+20     	; 0x7d4 <computeTargetAndDemand()+0x100>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
     7c0:	9b 30       	cpi	r25, 0x0B	; 11
     7c2:	20 f0       	brcs	.+8      	; 0x7cc <computeTargetAndDemand()+0xf8>
            { TRVPercentOpen += TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     7c4:	86 5f       	subi	r24, 0xF6	; 246
     7c6:	80 93 28 01 	sts	0x0128, r24
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <computeTargetAndDemand()+0xfc>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
     7cc:	20 93 28 01 	sts	0x0128, r18
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	08 95       	ret
     7d4:	80 e0       	ldi	r24, 0x00	; 0
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeTargetAndDemand()
  {
  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
     7d6:	08 95       	ret

000007d8 <setWARMTargetC(unsigned char)>:
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
  return(true); // Assume value correctly written.
  }
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
     7d8:	68 2f       	mov	r22, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     7da:	85 50       	subi	r24, 0x05	; 5
     7dc:	8b 35       	cpi	r24, 0x5B	; 91
     7de:	a8 f4       	brcc	.+42     	; 0x80a <setWARMTargetC(unsigned char)+0x32>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     7e0:	f9 99       	sbic	0x1f, 1	; 31
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <setWARMTargetC(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     7e4:	8c e0       	ldi	r24, 0x0C	; 12
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	92 bd       	out	0x22, r25	; 34
     7ea:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     7ec:	f8 9a       	sbi	0x1f, 0	; 31
     7ee:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     7f0:	89 2f       	mov	r24, r25
     7f2:	85 50       	subi	r24, 0x05	; 5
     7f4:	8b 35       	cpi	r24, 0x5B	; 91
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <setWARMTargetC(unsigned char)+0x22>
     7f8:	95 e0       	ldi	r25, 0x05	; 5
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
  if(tempC < getFROSTTargetC()) { return(false); } // Cannot set below FROST target.
     7fa:	69 17       	cp	r22, r25
     7fc:	30 f0       	brcs	.+12     	; 0x80a <setWARMTargetC(unsigned char)+0x32>
  eeprom_smart_update_byte((uint8_t *)EE_START_WARM_C, tempC); // Update in EEPROM if necessary.
     7fe:	8d e0       	ldi	r24, 0x0D	; 13
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 1a 04 	call	0x834	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	08 95       	ret
  return(true); // Assume value correctly written.
     80a:	80 e0       	ldi	r24, 0x00	; 0
  }
     80c:	08 95       	ret

0000080e <setFROSTTargetC(unsigned char)>:
#endif

#ifdef SETTABLE_TARGET_TEMPERATURES
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     80e:	1f 93       	push	r17
     810:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     812:	85 50       	subi	r24, 0x05	; 5
     814:	8b 35       	cpi	r24, 0x5B	; 91
     816:	58 f4       	brcc	.+22     	; 0x82e <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     818:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
     81c:	81 17       	cp	r24, r17
     81e:	38 f0       	brcs	.+14     	; 0x82e <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     820:	8c e0       	ldi	r24, 0x0C	; 12
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	61 2f       	mov	r22, r17
     826:	0e 94 1a 04 	call	0x834	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	01 c0       	rjmp	.+2      	; 0x830 <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     82e:	80 e0       	ldi	r24, 0x00	; 0
  }
     830:	1f 91       	pop	r17
     832:	08 95       	ret

00000834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     834:	f9 99       	sbic	0x1f, 1	; 31
     836:	fe cf       	rjmp	.-4      	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     838:	9c 01       	movw	r18, r24
     83a:	92 bd       	out	0x22, r25	; 34
     83c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     83e:	f8 9a       	sbi	0x1f, 0	; 31
     840:	80 b5       	in	r24, 0x20	; 32
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// Returns true if a write was done.
// TODO: make smarter (eg don't wait twice, do selective erase/write where possible)...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
  {
  if(value == eeprom_read_byte(p)) { return(false); } // No change needed.
     842:	68 17       	cp	r22, r24
     844:	11 f4       	brne	.+4      	; 0x84a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x16>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     84a:	f9 99       	sbic	0x1f, 1	; 31
     84c:	fe cf       	rjmp	.-4      	; 0x84a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x16>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     84e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     850:	32 bd       	out	0x22, r19	; 34
     852:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     854:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	fa 9a       	sbi	0x1f, 2	; 31
     85c:	f9 9a       	sbi	0x1f, 1	; 31
     85e:	0f be       	out	0x3f, r0	; 63
     860:	81 e0       	ldi	r24, 0x01	; 1
  eeprom_write_byte(p, value);
  return(true); // Performed an update.
  }
     862:	08 95       	ret

00000864 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, interrupts should be avoided/disabled during this call.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     864:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     866:	f9 99       	sbic	0x1f, 1	; 31
     868:	fe cf       	rjmp	.-4      	; 0x866 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     86a:	32 bd       	out	0x22, r19	; 34
     86c:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     872:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff == oldValue) { return(false); }
     874:	8f 3f       	cpi	r24, 0xFF	; 255
     876:	11 f4       	brne	.+4      	; 0x87c <eeprom_smart_erase_byte(unsigned char*)+0x18>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret

  // Erase to 0xff; no write needed.
  EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     87c:	84 e1       	ldi	r24, 0x14	; 20
     87e:	8f bb       	out	0x1f, r24	; 31
  EECR |= _BV(EEPE);  // Start erase-only operation.
     880:	f9 9a       	sbi	0x1f, 1	; 31
     882:	81 e0       	ldi	r24, 0x01	; 1
  return(true); // Performed an erase.
#endif
  }
     884:	08 95       	ret

00000886 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, interrupts should be avoided/disabled during this call.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     886:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     888:	f9 99       	sbic	0x1f, 1	; 31
     88a:	fe cf       	rjmp	.-4      	; 0x888 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     88c:	32 bd       	out	0x22, r19	; 34
     88e:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     894:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     896:	68 23       	and	r22, r24
  if(oldValue == newValue) { return(false); } // No change/write needed.
     898:	86 17       	cp	r24, r22
     89a:	11 f4       	brne	.+4      	; 0x8a0 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret

  // Do the write: no erase is needed.
  EEDR = newValue; // Set EEPROM data register.
     8a0:	60 bd       	out	0x20, r22	; 32
  EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     8a2:	84 e2       	ldi	r24, 0x24	; 36
     8a4:	8f bb       	out	0x1f, r24	; 31
  EECR |= _BV(EEPE);  // Start write-only operation.
     8a6:	f9 9a       	sbi	0x1f, 1	; 31
     8a8:	81 e0       	ldi	r24, 0x01	; 1
  return(true); // Performed a write.
#endif
  }
     8aa:	08 95       	ret

000008ac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, bool is1)
     8ac:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
     8ae:	80 81       	ld	r24, Z
     8b0:	98 2f       	mov	r25, r24
     8b2:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
     8b4:	66 23       	and	r22, r22
     8b6:	b1 f4       	brne	.+44     	; 0x8e4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
     8b8:	92 30       	cpi	r25, 0x02	; 2
     8ba:	51 f0       	breq	.+20     	; 0x8d0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
     8bc:	93 30       	cpi	r25, 0x03	; 3
     8be:	31 f0       	breq	.+12     	; 0x8cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
     8c0:	9f 01       	movw	r18, r30
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	91 30       	cpi	r25, 0x01	; 1
     8c8:	59 f4       	brne	.+22     	; 0x8e0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
     8cc:	8d ec       	ldi	r24, 0xCD	; 205
     8ce:	25 c0       	rjmp	.+74     	; 0x91a <__stack+0x1b>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
     8d0:	80 7c       	andi	r24, 0xC0	; 192
     8d2:	80 63       	ori	r24, 0x30	; 48
     8d4:	22 c0       	rjmp	.+68     	; 0x91a <__stack+0x1b>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
     8d6:	80 7f       	andi	r24, 0xF0	; 240
     8d8:	8c 60       	ori	r24, 0x0C	; 12
     8da:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     8dc:	f9 01       	movw	r30, r18
     8de:	11 c0       	rjmp	.+34     	; 0x902 <__stack+0x3>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     8e0:	83 60       	ori	r24, 0x03	; 3
     8e2:	13 c0       	rjmp	.+38     	; 0x90a <__stack+0xb>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
     8e4:	92 30       	cpi	r25, 0x02	; 2
     8e6:	51 f0       	breq	.+20     	; 0x8fc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
     8e8:	93 30       	cpi	r25, 0x03	; 3
     8ea:	31 f0       	breq	.+12     	; 0x8f8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
     8ec:	9f 01       	movw	r18, r30
     8ee:	2f 5f       	subi	r18, 0xFF	; 255
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	91 30       	cpi	r25, 0x01	; 1
     8f4:	71 f4       	brne	.+28     	; 0x912 <__stack+0x13>
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <__stack+0x7>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
     8f8:	80 ee       	ldi	r24, 0xE0	; 224
     8fa:	0f c0       	rjmp	.+30     	; 0x91a <__stack+0x1b>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
     8fc:	80 7c       	andi	r24, 0xC0	; 192
     8fe:	88 63       	ori	r24, 0x38	; 56
     900:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	0a c0       	rjmp	.+20     	; 0x91a <__stack+0x1b>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
     906:	80 7f       	andi	r24, 0xF0	; 240
     908:	8e 60       	ori	r24, 0x0E	; 14
     90a:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
     90c:	f9 01       	movw	r30, r18
     90e:	8e e3       	ldi	r24, 0x3E	; 62
     910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0x1b>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     912:	83 60       	ori	r24, 0x03	; 3
     914:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
     916:	f9 01       	movw	r30, r18
     918:	8d e8       	ldi	r24, 0x8D	; 141
     91a:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
     91c:	cf 01       	movw	r24, r30
     91e:	08 95       	ret

00000920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	9c 01       	movw	r18, r24
     92e:	16 2f       	mov	r17, r22
     930:	00 e8       	ldi	r16, 0x80	; 128
     932:	c0 e0       	ldi	r28, 0x00	; 0
     934:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
     936:	e6 2e       	mov	r14, r22
     938:	ff 24       	eor	r15, r15
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	80 2f       	mov	r24, r16
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	8e 21       	and	r24, r14
     942:	9f 21       	and	r25, r15
     944:	89 2b       	or	r24, r25
     946:	09 f0       	breq	.+2      	; 0x94a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	c9 01       	movw	r24, r18
     94c:	0e 94 56 04 	call	0x8ac	; 0x8ac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
     950:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
     952:	06 95       	lsr	r16
     954:	21 96       	adiw	r28, 0x01	; 1
     956:	c8 30       	cpi	r28, 0x08	; 8
     958:	d1 05       	cpc	r29, r1
     95a:	79 f7       	brne	.-34     	; 0x93a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
     95c:	01 2e       	mov	r0, r17
     95e:	12 95       	swap	r17
     960:	10 25       	eor	r17, r0
     962:	01 2e       	mov	r0, r17
     964:	16 95       	lsr	r17
     966:	16 95       	lsr	r17
     968:	10 25       	eor	r17, r0
     96a:	61 2f       	mov	r22, r17
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	61 70       	andi	r22, 0x01	; 1
     978:	c9 01       	movw	r24, r18
     97a:	0e 94 56 04 	call	0x8ac	; 0x8ac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	08 95       	ret

0000098c <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	dc 01       	movw	r26, r24
     994:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
     996:	8c ec       	ldi	r24, 0xCC	; 204
     998:	fd 01       	movw	r30, r26
     99a:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	8c 93       	st	X, r24
     9a0:	df 01       	movw	r26, r30
     9a2:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
     9a4:	81 83       	std	Z+1, r24	; 0x01
     9a6:	fd 01       	movw	r30, r26
     9a8:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	8c 93       	st	X, r24
     9ae:	df 01       	movw	r26, r30
     9b0:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
     9b2:	81 83       	std	Z+1, r24	; 0x01
     9b4:	fd 01       	movw	r30, r26
     9b6:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
     9bc:	ff 24       	eor	r15, r15
     9be:	fa 94       	dec	r15
     9c0:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
     9c2:	cf 01       	movw	r24, r30
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
     9cc:	f8 01       	movw	r30, r16
     9ce:	60 81       	ld	r22, Z
     9d0:	0e 94 90 04 	call	0x920	; 0x920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
     9d4:	f8 01       	movw	r30, r16
     9d6:	61 81       	ldd	r22, Z+1	; 0x01
     9d8:	0e 94 90 04 	call	0x920	; 0x920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	0e 94 90 04 	call	0x920	; 0x920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
     9e2:	f8 01       	movw	r30, r16
     9e4:	62 81       	ldd	r22, Z+2	; 0x02
     9e6:	0e 94 90 04 	call	0x920	; 0x920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
     9ea:	f8 01       	movw	r30, r16
     9ec:	63 81       	ldd	r22, Z+3	; 0x03
     9ee:	0e 94 90 04 	call	0x920	; 0x920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
     9f2:	f8 01       	movw	r30, r16
     9f4:	60 81       	ld	r22, Z
     9f6:	21 81       	ldd	r18, Z+1	; 0x01
     9f8:	62 0f       	add	r22, r18
     9fa:	64 5f       	subi	r22, 0xF4	; 244
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	62 0f       	add	r22, r18
     a00:	23 81       	ldd	r18, Z+3	; 0x03
     a02:	62 0f       	add	r22, r18
     a04:	0e 94 90 04 	call	0x920	; 0x920 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	0e 94 56 04 	call	0x8ac	; 0x8ac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bit to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	0e 94 56 04 	call	0x8ac	; 0x8ac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
     a14:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
     a16:	f0 82       	st	Z, r15
  return(bptr);
  }
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	08 95       	ret

00000a20 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
// The TRVPercentOpen value is used to generate the frame.
// On entry hc1, hc2 (and addresss if used) must be set correctly; this sets command and extension.
// The generated command frame can be resent indefinitely.
// The command buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
     a26:	9b 01       	movw	r18, r22
  {
  command->command = 0x26;
     a28:	86 e2       	ldi	r24, 0x26	; 38
     a2a:	fb 01       	movw	r30, r22
     a2c:	82 83       	std	Z+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	48 9f       	mul	r20, r24
     a32:	c0 01       	movw	r24, r0
     a34:	11 24       	eor	r1, r1
     a36:	64 e6       	ldi	r22, 0x64	; 100
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__divmodhi4>
     a3e:	63 83       	std	Z+3, r22	; 0x03
#ifdef RFM22_SYNC_ONLY_BCFH
    // Huge cheat: only add RFM22-friendly pre-preamble if calling for heat from the boiler (TRV not closed).
    // NOTE: this requires more buffer space.
    // NOTE: the percentage-open threshold to call for heat from the boiler could be raised above 0 to allow the valve to open significantly, etc.
    if(TRVPercentOpen != 0)
     a40:	44 23       	and	r20, r20
     a42:	61 f0       	breq	.+24     	; 0xa5c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
      {
      *bptr++ = 0xaa;
     a44:	8a ea       	ldi	r24, 0xAA	; 170
     a46:	fe 01       	movw	r30, r28
     a48:	81 93       	st	Z+, r24
      *bptr++ = 0xaa;
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	df 01       	movw	r26, r30
     a4e:	11 96       	adiw	r26, 0x01	; 1
      *bptr++ = 0xaa;
     a50:	81 83       	std	Z+1, r24	; 0x01
      *bptr++ = 0xaa;
     a52:	11 96       	adiw	r26, 0x01	; 1
     a54:	8c 93       	st	X, r24
     a56:	11 97       	sbiw	r26, 0x01	; 1
     a58:	ed 01       	movw	r28, r26
     a5a:	22 96       	adiw	r28, 0x02	; 2
      }
#endif
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
     a5c:	ce 01       	movw	r24, r28
     a5e:	b9 01       	movw	r22, r18
     a60:	0e 94 c6 04 	call	0x98c	; 0x98c <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
  }
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a6a:	f9 99       	sbic	0x1f, 1	; 31
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a6e:	8a e0       	ldi	r24, 0x0A	; 10
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	92 bd       	out	0x22, r25	; 34
     a74:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a76:	f8 9a       	sbi	0x1f, 0	; 31
     a78:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
     a7a:	08 95       	ret

00000a7c <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a7c:	f9 99       	sbic	0x1f, 1	; 31
     a7e:	fe cf       	rjmp	.-4      	; 0xa7c <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a80:	8b e0       	ldi	r24, 0x0B	; 11
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	92 bd       	out	0x22, r25	; 34
     a86:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a88:	f8 9a       	sbi	0x1f, 0	; 31
     a8a:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
     a8c:	08 95       	ret

00000a8e <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
     a8e:	80 91 2a 01 	lds	r24, 0x012A
     a92:	08 95       	ret

00000a94 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
     a94:	10 92 2a 01 	sts	0x012A, r1
  syncStateFHT8V = 0;
     a98:	10 92 5e 01 	sts	0x015E, r1
  halfSecondsToNextFHT8VTX = 0;
     a9c:	10 92 2b 01 	sts	0x012B, r1
  FHT8V_isValveOpen = false;
     aa0:	10 92 5f 01 	sts	0x015F, r1
  }
     aa4:	08 95       	ret

00000aa6 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)>:

// Sends to FHT8V in FIFO mode command bitstream from buffer starting at bptr up until terminating 0xff, then reverts to low-power standby mode.
// The trailing 0xff is not sent.
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
static void FHT8VTXFHTQueueAndSendCmd(const uint8_t *bptr, bool doubleTX)
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	ec 01       	movw	r28, r24
     aae:	16 2f       	mov	r17, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
     ab0:	88 81       	ld	r24, Y
     ab2:	8f 3f       	cpi	r24, 0xFF	; 255
     ab4:	e9 f0       	breq	.+58     	; 0xaf0 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)+0x4a>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
     ab6:	88 23       	and	r24, r24
     ab8:	61 f4       	brne	.+24     	; 0xad2 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)+0x2c>
     aba:	84 ec       	ldi	r24, 0xC4	; 196
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	64 e0       	ldi	r22, 0x04	; 4
     ac0:	71 e0       	ldi	r23, 0x01	; 1
     ac2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
     ac6:	84 ec       	ldi	r24, 0xC4	; 196
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
     ace:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
#endif

  RFM22QueueCmdToFF(bptr);
     ad2:	ce 01       	movw	r24, r28
     ad4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <RFM22QueueCmdToFF(unsigned char const*)>
  RFM22TXFIFO(); // Send it!
     ad8:	0e 94 4d 0b 	call	0x169a	; 0x169a <RFM22TXFIFO()>

  if(doubleTX)
     adc:	11 23       	and	r17, r17
     ade:	31 f0       	breq	.+12     	; 0xaec <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)+0x46>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
     ae0:	8d e3       	ldi	r24, 0x3D	; 61
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 56 07 	call	0xeac	; 0xeac <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    RFM22TXFIFO(); // Re-send it!
     ae8:	0e 94 4d 0b 	call	0x169a	; 0x169a <RFM22TXFIFO()>
    }

  RFM22ModeStandbyAndClearState();
     aec:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <RFM22ModeStandbyAndClearState()>
  }
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	08 95       	ret

00000af8 <FHT8VCreateValveSetCmdFrame()>:

// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	00 d0       	rcall	.+0      	; 0xafe <FHT8VCreateValveSetCmdFrame()+0x6>
     afe:	00 d0       	rcall	.+0      	; 0xb00 <FHT8VCreateValveSetCmdFrame()+0x8>
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b04:	f9 99       	sbic	0x1f, 1	; 31
     b06:	fe cf       	rjmp	.-4      	; 0xb04 <FHT8VCreateValveSetCmdFrame()+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b08:	8a e0       	ldi	r24, 0x0A	; 10
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	92 bd       	out	0x22, r25	; 34
     b0e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b10:	f8 9a       	sbi	0x1f, 0	; 31
     b12:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b14:	f9 99       	sbic	0x1f, 1	; 31
     b16:	fe cf       	rjmp	.-4      	; 0xb14 <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b18:	8b e0       	ldi	r24, 0x0B	; 11
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	92 bd       	out	0x22, r25	; 34
     b1e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b20:	f8 9a       	sbi	0x1f, 0	; 31
     b22:	80 b5       	in	r24, 0x20	; 32
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
     b24:	8a 83       	std	Y+2, r24	; 0x02
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
     b26:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif
  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
     b28:	0e 94 17 03 	call	0x62e	; 0x62e <getTRVPercentOpen()>
     b2c:	48 2f       	mov	r20, r24
     b2e:	8c e2       	ldi	r24, 0x2C	; 44
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	be 01       	movw	r22, r28
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	0e 94 10 05 	call	0xa20	; 0xa20 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	cf 91       	pop	r28
     b46:	df 91       	pop	r29
     b48:	08 95       	ret

00000b4a <doSync(bool)>:
  { return(FHT8VTXGapHalfSeconds(hc2) - (MAX_HSC - halfSecondCountInMinorCycle)); }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(bool allowDoubleTX)
     b4a:	1f 93       	push	r17
     b4c:	df 93       	push	r29
     b4e:	cf 93       	push	r28
     b50:	00 d0       	rcall	.+0      	; 0xb52 <doSync(bool)+0x8>
     b52:	00 d0       	rcall	.+0      	; 0xb54 <doSync(bool)+0xa>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	18 2f       	mov	r17, r24
  {
  if(0 == syncStateFHT8V)
     b5a:	80 91 5e 01 	lds	r24, 0x015E
     b5e:	88 23       	and	r24, r24
     b60:	b9 f4       	brne	.+46     	; 0xb90 <doSync(bool)+0x46>
    {
    // Starting sync process.
    syncStateFHT8V = 241;
     b62:	81 ef       	ldi	r24, 0xF1	; 241
     b64:	80 93 5e 01 	sts	0x015E, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
     b68:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT_FLASHSTRING("FHT8V syncing...");
     b6c:	84 ec       	ldi	r24, 0xC4	; 196
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	63 ef       	ldi	r22, 0xF3	; 243
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
     b78:	84 ec       	ldi	r24, 0xC4	; 196
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
    DEBUG_SERIAL_PRINTLN();
     b80:	84 ec       	ldi	r24, 0xC4	; 196
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
     b88:	84 ec       	ldi	r24, 0xC4	; 196
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif
    }

  if(syncStateFHT8V >= 2)
     b90:	20 91 5e 01 	lds	r18, 0x015E
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	08 f4       	brcc	.+2      	; 0xb9a <doSync(bool)+0x50>
     b98:	45 c0       	rjmp	.+138    	; 0xc24 <doSync(bool)+0xda>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
     b9a:	20 ff       	sbrs	r18, 0
     b9c:	2b c0       	rjmp	.+86     	; 0xbf4 <doSync(bool)+0xaa>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b9e:	f9 99       	sbic	0x1f, 1	; 31
     ba0:	fe cf       	rjmp	.-4      	; 0xb9e <doSync(bool)+0x54>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	92 bd       	out	0x22, r25	; 34
     ba8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     baa:	f8 9a       	sbi	0x1f, 0	; 31
     bac:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bae:	f9 99       	sbic	0x1f, 1	; 31
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <doSync(bool)+0x64>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     bb2:	8b e0       	ldi	r24, 0x0B	; 11
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	92 bd       	out	0x22, r25	; 34
     bb8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     bba:	f8 9a       	sbi	0x1f, 0	; 31
     bbc:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
     bbe:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
     bc0:	8c e2       	ldi	r24, 0x2C	; 44
     bc2:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
     bc4:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
     bc6:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
     bc8:	8c e2       	ldi	r24, 0x2C	; 44
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	be 01       	movw	r22, r28
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	0e 94 c6 04 	call	0x98c	; 0x98c <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTime((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
     bd6:	80 91 29 01 	lds	r24, 0x0129
     bda:	88 23       	and	r24, r24
     bdc:	31 f0       	breq	.+12     	; 0xbea <doSync(bool)+0xa0>
     bde:	82 95       	swap	r24
     be0:	88 0f       	add	r24, r24
     be2:	88 0f       	add	r24, r24
     be4:	80 7c       	andi	r24, 0xC0	; 192
     be6:	0e 94 cd 09 	call	0x139a	; 0x139a <sleepUntilSubCycleTime(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
     bea:	8c e2       	ldi	r24, 0x2C	; 44
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	61 2f       	mov	r22, r17
     bf0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)>
    DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
     bf4:	80 91 5e 01 	lds	r24, 0x015E
     bf8:	81 50       	subi	r24, 0x01	; 1
     bfa:	80 93 5e 01 	sts	0x015E, r24
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	09 f0       	breq	.+2      	; 0xc04 <doSync(bool)+0xba>
     c02:	5e c0       	rjmp	.+188    	; 0xcc0 <doSync(bool)+0x176>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c04:	f9 99       	sbic	0x1f, 1	; 31
     c06:	fe cf       	rjmp	.-4      	; 0xc04 <doSync(bool)+0xba>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c08:	8b e0       	ldi	r24, 0x0B	; 11
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	92 bd       	out	0x22, r25	; 34
     c0e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c10:	f8 9a       	sbi	0x1f, 0	; 31
     c12:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
     c14:	80 91 29 01 	lds	r24, 0x0129
     c18:	8b 5f       	subi	r24, 0xFB	; 251
     c1a:	97 70       	andi	r25, 0x07	; 7
     c1c:	89 0f       	add	r24, r25
     c1e:	80 93 2b 01 	sts	0x012B, r24
     c22:	4c c0       	rjmp	.+152    	; 0xcbc <doSync(bool)+0x172>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
     c24:	80 91 2b 01 	lds	r24, 0x012B
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	80 93 2b 01 	sts	0x012B, r24
     c2e:	88 23       	and	r24, r24
     c30:	09 f0       	breq	.+2      	; 0xc34 <doSync(bool)+0xea>
     c32:	46 c0       	rjmp	.+140    	; 0xcc0 <doSync(bool)+0x176>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c34:	f9 99       	sbic	0x1f, 1	; 31
     c36:	fe cf       	rjmp	.-4      	; 0xc34 <doSync(bool)+0xea>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	92 bd       	out	0x22, r25	; 34
     c3e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c40:	f8 9a       	sbi	0x1f, 0	; 31
     c42:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c44:	f9 99       	sbic	0x1f, 1	; 31
     c46:	fe cf       	rjmp	.-4      	; 0xc44 <doSync(bool)+0xfa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c48:	8b e0       	ldi	r24, 0x0B	; 11
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	92 bd       	out	0x22, r25	; 34
     c4e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c50:	f8 9a       	sbi	0x1f, 0	; 31
     c52:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
     c54:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
     c56:	80 e2       	ldi	r24, 0x20	; 32
     c58:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
     c5a:	1c 82       	std	Y+4, r1	; 0x04
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
     c5c:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
     c5e:	8c e2       	ldi	r24, 0x2C	; 44
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	0e 94 c6 04 	call	0x98c	; 0x98c <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTime((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
     c6c:	80 91 29 01 	lds	r24, 0x0129
     c70:	88 23       	and	r24, r24
     c72:	31 f0       	breq	.+12     	; 0xc80 <doSync(bool)+0x136>
     c74:	82 95       	swap	r24
     c76:	88 0f       	add	r24, r24
     c78:	88 0f       	add	r24, r24
     c7a:	80 7c       	andi	r24, 0xC0	; 192
     c7c:	0e 94 cd 09 	call	0x139a	; 0x139a <sleepUntilSubCycleTime(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
     c80:	8c e2       	ldi	r24, 0x2C	; 44
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	61 2f       	mov	r22, r17
     c86:	0e 94 53 05 	call	0xaa6	; 0xaa6 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
     DEBUG_SERIAL_TIMESTAMP();
     c8a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_debug_serial_timestamp()>
     DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
     c8e:	84 ec       	ldi	r24, 0xC4	; 196
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	61 ee       	ldi	r22, 0xE1	; 225
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
     c9a:	84 ec       	ldi	r24, 0xC4	; 196
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif

      // Assume now in sync...
      syncedWithFHT8V = true;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 2a 01 	sts	0x012A, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
     ca8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
     cac:	90 91 29 01 	lds	r25, 0x0129
     cb0:	9d 51       	subi	r25, 0x1D	; 29
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	87 70       	andi	r24, 0x07	; 7
     cb6:	98 0f       	add	r25, r24
     cb8:	90 93 2b 01 	sts	0x012B, r25
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <doSync(bool)+0x178>
      return(false);
     cc0:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	1f 91       	pop	r17
     cd0:	08 95       	ret

00000cd2 <FHT8VPollSyncAndTX_Next(bool)>:
// This will sleep (at reasonably low power) as necessary to the start of its TX slot,
// else will return immediately if no TX needed in this slot.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(bool allowDoubleTX)
     cd2:	1f 93       	push	r17
     cd4:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
     cd6:	80 91 29 01 	lds	r24, 0x0129
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 29 01 	sts	0x0129, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
     ce0:	84 30       	cpi	r24, 0x04	; 4
     ce2:	60 f0       	brcs	.+24     	; 0xcfc <FHT8VPollSyncAndTX_Next(bool)+0x2a>
     ce4:	84 ec       	ldi	r24, 0xC4	; 196
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	66 eb       	ldi	r22, 0xB6	; 182
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
     cf0:	84 ec       	ldi	r24, 0xC4	; 196
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
     cf8:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
     cfc:	80 91 2a 01 	lds	r24, 0x012A
     d00:	88 23       	and	r24, r24
     d02:	21 f4       	brne	.+8      	; 0xd0c <FHT8VPollSyncAndTX_Next(bool)+0x3a>
     d04:	81 2f       	mov	r24, r17
     d06:	0e 94 a5 05 	call	0xb4a	; 0xb4a <doSync(bool)>
     d0a:	32 c0       	rjmp	.+100    	; 0xd70 <FHT8VPollSyncAndTX_Next(bool)+0x9e>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
     d0c:	80 91 2b 01 	lds	r24, 0x012B
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	80 93 2b 01 	sts	0x012B, r24
     d16:	88 23       	and	r24, r24
     d18:	11 f0       	breq	.+4      	; 0xd1e <FHT8VPollSyncAndTX_Next(bool)+0x4c>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	29 c0       	rjmp	.+82     	; 0xd70 <FHT8VPollSyncAndTX_Next(bool)+0x9e>
    {
    sleepUntilSubCycleTime((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount);
     d1e:	80 91 29 01 	lds	r24, 0x0129
     d22:	82 95       	swap	r24
     d24:	88 0f       	add	r24, r24
     d26:	88 0f       	add	r24, r24
     d28:	80 7c       	andi	r24, 0xC0	; 192
     d2a:	0e 94 cd 09 	call	0x139a	; 0x139a <sleepUntilSubCycleTime(unsigned char)>
    FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
     d2e:	8c e2       	ldi	r24, 0x2C	; 44
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	61 2f       	mov	r22, r17
     d34:	0e 94 53 05 	call	0xaa6	; 0xaa6 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)>
#if 1 && defined(DEBUG)
     DEBUG_SERIAL_TIMESTAMP();
     d38:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_debug_serial_timestamp()>
     DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
     d3c:	84 ec       	ldi	r24, 0xC4	; 196
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	6c ea       	ldi	r22, 0xAC	; 172
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
     d48:	84 ec       	ldi	r24, 0xC4	; 196
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d50:	f9 99       	sbic	0x1f, 1	; 31
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <FHT8VPollSyncAndTX_Next(bool)+0x7e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d54:	8b e0       	ldi	r24, 0x0B	; 11
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	92 bd       	out	0x22, r25	; 34
     d5a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d5c:	f8 9a       	sbi	0x1f, 0	; 31
     d5e:	90 b5       	in	r25, 0x20	; 32
#endif
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
     d60:	80 91 29 01 	lds	r24, 0x0129
     d64:	8d 51       	subi	r24, 0x1D	; 29
     d66:	97 70       	andi	r25, 0x07	; 7
     d68:	89 0f       	add	r24, r25
     d6a:	80 93 2b 01 	sts	0x012B, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
     d70:	1f 91       	pop	r17
     d72:	08 95       	ret

00000d74 <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(bool allowDoubleTX)
     d74:	1f 93       	push	r17
     d76:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
     d78:	10 92 29 01 	sts	0x0129, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
     d7c:	80 91 2a 01 	lds	r24, 0x012A
     d80:	88 23       	and	r24, r24
     d82:	21 f4       	brne	.+8      	; 0xd8c <FHT8VPollSyncAndTX_First(bool)+0x18>
     d84:	81 2f       	mov	r24, r17
     d86:	0e 94 a5 05 	call	0xb4a	; 0xb4a <doSync(bool)>
     d8a:	3b c0       	rjmp	.+118    	; 0xe02 <FHT8VPollSyncAndTX_First(bool)+0x8e>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
     d8c:	80 91 2b 01 	lds	r24, 0x012B
     d90:	88 23       	and	r24, r24
     d92:	61 f4       	brne	.+24     	; 0xdac <FHT8VPollSyncAndTX_First(bool)+0x38>
     d94:	84 ec       	ldi	r24, 0xC4	; 196
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	6a e2       	ldi	r22, 0x2A	; 42
     d9a:	71 e0       	ldi	r23, 0x01	; 1
     d9c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
     da0:	84 ec       	ldi	r24, 0xC4	; 196
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
     da8:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
     dac:	80 91 2b 01 	lds	r24, 0x012B
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	10 f0       	brcs	.+4      	; 0xdb8 <FHT8VPollSyncAndTX_First(bool)+0x44>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
     db4:	84 50       	subi	r24, 0x04	; 4
     db6:	22 c0       	rjmp	.+68     	; 0xdfc <FHT8VPollSyncAndTX_First(bool)+0x88>
    return(false); // No TX this minor cycle.
    }

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	80 93 2b 01 	sts	0x012B, r24
     dbe:	88 23       	and	r24, r24
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <FHT8VPollSyncAndTX_First(bool)+0x52>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	1e c0       	rjmp	.+60     	; 0xe02 <FHT8VPollSyncAndTX_First(bool)+0x8e>
    {
    FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
     dc6:	8c e2       	ldi	r24, 0x2C	; 44
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	61 2f       	mov	r22, r17
     dcc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <FHT8VTXFHTQueueAndSendCmd(unsigned char const*, bool)>
#if 1 && defined(DEBUG)
     DEBUG_SERIAL_TIMESTAMP();
     dd0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_debug_serial_timestamp()>
     DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
     dd4:	84 ec       	ldi	r24, 0xC4	; 196
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	60 e2       	ldi	r22, 0x20	; 32
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
     de0:	84 ec       	ldi	r24, 0xC4	; 196
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     de8:	f9 99       	sbic	0x1f, 1	; 31
     dea:	fe cf       	rjmp	.-4      	; 0xde8 <FHT8VPollSyncAndTX_First(bool)+0x74>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     dec:	8b e0       	ldi	r24, 0x0B	; 11
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	92 bd       	out	0x22, r25	; 34
     df2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     df4:	f8 9a       	sbi	0x1f, 0	; 31
     df6:	80 b5       	in	r24, 0x20	; 32
#endif
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
     df8:	87 70       	andi	r24, 0x07	; 7
     dfa:	8d 51       	subi	r24, 0x1D	; 29
     dfc:	80 93 2b 01 	sts	0x012B, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
     e02:	1f 91       	pop	r17
     e04:	08 95       	ret

00000e06 <FHT8VSetHC2(unsigned char)>:
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
     e06:	68 2f       	mov	r22, r24
     e08:	8b e0       	ldi	r24, 0x0B	; 11
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 1a 04 	call	0x834	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     e10:	08 95       	ret

00000e12 <FHT8VSetHC1(unsigned char)>:
#endif
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
     e12:	68 2f       	mov	r22, r24
     e14:	8a e0       	ldi	r24, 0x0A	; 10
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 1a 04 	call	0x834	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     e1c:	08 95       	ret

00000e1e <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
     e2e:	80 91 66 01 	lds	r24, 0x0166
#if defined(TWO_S_TICK_RTC_SUPPORT)
  sTemp += 2;
     e32:	8e 5f       	subi	r24, 0xFE	; 254
#else
  ++sTemp;
#endif
  if(sTemp > 59)
     e34:	8c 33       	cpi	r24, 0x3C	; 60
     e36:	c8 f0       	brcs	.+50     	; 0xe6a <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
     e38:	80 91 67 01 	lds	r24, 0x0167
     e3c:	90 91 68 01 	lds	r25, 0x0168
     e40:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
     e42:	25 e0       	ldi	r18, 0x05	; 5
     e44:	80 3a       	cpi	r24, 0xA0	; 160
     e46:	92 07       	cpc	r25, r18
     e48:	58 f0       	brcs	.+22     	; 0xe60 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
     e4a:	80 91 69 01 	lds	r24, 0x0169
     e4e:	90 91 6a 01 	lds	r25, 0x016A
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	90 93 6a 01 	sts	0x016A, r25
     e58:	80 93 69 01 	sts	0x0169, r24
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
     e60:	90 93 68 01 	sts	0x0168, r25
     e64:	80 93 67 01 	sts	0x0167, r24
     e68:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
     e6a:	80 93 66 01 	sts	0x0166, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
     e6e:	9f 91       	pop	r25
     e70:	8f 91       	pop	r24
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_6>:
// Cleared by the watchdog sleep routine.
volatile bool watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	8f 93       	push	r24
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
     e8a:	88 e1       	ldi	r24, 0x18	; 24
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	80 93 60 00 	sts	0x0060, r24
     e94:	10 92 60 00 	sts	0x0060, r1
     e98:	0f be       	out	0x3f, r0	; 63
  watchdogFired = true;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 60 01 	sts	0x0160, r24
  }
     ea0:	8f 91       	pop	r24
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
     eac:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
     eae:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
     eb2:	28 e0       	ldi	r18, 0x08	; 8
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e8       	ldi	r20, 0x80	; 128
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	40 93 61 00 	sts	0x0061, r20
     ec0:	20 93 61 00 	sts	0x0061, r18
     ec4:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     ec6:	31 97       	sbiw	r30, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	8f 70       	andi	r24, 0x0F	; 15
     ece:	90 70       	andi	r25, 0x00	; 0
     ed0:	20 e8       	ldi	r18, 0x80	; 128
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	20 93 61 00 	sts	0x0061, r18
     eda:	80 93 61 00 	sts	0x0061, r24
     ede:	0f be       	out	0x3f, r0	; 63
  }
     ee0:	08 95       	ret

00000ee2 <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
     ee2:	83 b7       	in	r24, 0x33	; 51
     ee4:	81 7f       	andi	r24, 0xF1	; 241
     ee6:	86 60       	ori	r24, 0x06	; 6
     ee8:	83 bf       	out	0x33, r24	; 51
  cli();
     eea:	f8 94       	cli
  sleep_enable();
     eec:	83 b7       	in	r24, 0x33	; 51
     eee:	81 60       	ori	r24, 0x01	; 1
     ef0:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
     ef2:	85 b7       	in	r24, 0x35	; 53
     ef4:	80 66       	ori	r24, 0x60	; 96
     ef6:	85 bf       	out	0x35, r24	; 53
     ef8:	8f 7d       	andi	r24, 0xDF	; 223
     efa:	85 bf       	out	0x35, r24	; 53
  sei();
     efc:	78 94       	sei
  sleep_cpu();
     efe:	88 95       	sleep
  sleep_disable();
     f00:	83 b7       	in	r24, 0x33	; 51
     f02:	8e 7f       	andi	r24, 0xFE	; 254
     f04:	83 bf       	out	0x33, r24	; 51
  sei();
     f06:	78 94       	sei
  }
     f08:	08 95       	ret

00000f0a <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  watchdogFired = false;
     f0a:	10 92 60 01 	sts	0x0160, r1

  wdt_enable(watchdogSleep);
     f0e:	83 fd       	sbrc	r24, 3
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <nap(signed char)+0xc>
     f12:	28 e0       	ldi	r18, 0x08	; 8
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <nap(signed char)+0xe>
     f16:	28 e2       	ldi	r18, 0x28	; 40
     f18:	87 70       	andi	r24, 0x07	; 7
     f1a:	28 2b       	or	r18, r24
     f1c:	88 e1       	ldi	r24, 0x18	; 24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	a8 95       	wdr
     f26:	80 93 60 00 	sts	0x0060, r24
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
     f30:	80 91 60 00 	lds	r24, 0x0060
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
     f3a:	83 b7       	in	r24, 0x33	; 51
     f3c:	81 7f       	andi	r24, 0xF1	; 241
     f3e:	86 60       	ori	r24, 0x06	; 6
     f40:	83 bf       	out	0x33, r24	; 51
  cli();
     f42:	f8 94       	cli
  sleep_enable();
     f44:	83 b7       	in	r24, 0x33	; 51
     f46:	81 60       	ori	r24, 0x01	; 1
     f48:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
     f4a:	85 b7       	in	r24, 0x35	; 53
     f4c:	80 66       	ori	r24, 0x60	; 96
     f4e:	85 bf       	out	0x35, r24	; 53
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	85 bf       	out	0x35, r24	; 53
  sei();
     f54:	78 94       	sei
  sleep_cpu();
     f56:	88 95       	sleep
  sleep_disable();
     f58:	83 b7       	in	r24, 0x33	; 51
     f5a:	8e 7f       	andi	r24, 0xFE	; 254
     f5c:	83 bf       	out	0x33, r24	; 51
  sei();
     f5e:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(watchdogFired) { return; } // All done!
     f60:	80 91 60 01 	lds	r24, 0x0160
     f64:	88 23       	and	r24, r24
     f66:	49 f3       	breq	.-46     	; 0xf3a <nap(signed char)+0x30>
    }
 }
     f68:	08 95       	ret

00000f6a <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
     f6a:	1f 92       	push	r1
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	0f 92       	push	r0
     f72:	11 24       	eor	r1, r1
     f74:	8f 93       	push	r24
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 61 01 	sts	0x0161, r24
     f7c:	8f 91       	pop	r24
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <_analogueNoiseReducedReadM(unsigned char, int)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  number of samples to take (if one, nap() before); strictly positive
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int samples = 3)
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	98 2f       	mov	r25, r24
     f90:	eb 01       	movw	r28, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
     f92:	80 91 64 00 	lds	r24, 0x0064
     f96:	80 fd       	sbrc	r24, 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <_analogueNoiseReducedReadM(unsigned char, int)+0x16>
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <_analogueNoiseReducedReadM(unsigned char, int)+0x2c>
  PRR &= ~_BV(PRADC); // Enable the ADC.
     f9e:	80 91 64 00 	lds	r24, 0x0064
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
     fa8:	80 91 7a 00 	lds	r24, 0x007A
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	80 93 7a 00 	sts	0x007A, r24
     fb2:	11 e0       	ldi	r17, 0x01	; 1
//   * samples  number of samples to take (if one, nap() before); strictly positive
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
     fb4:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
     fb8:	c2 30       	cpi	r28, 0x02	; 2
     fba:	d1 05       	cpc	r29, r1
     fbc:	1c f4       	brge	.+6      	; 0xfc4 <_analogueNoiseReducedReadM(unsigned char, int)+0x3c>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
     fc4:	83 b7       	in	r24, 0x33	; 51
     fc6:	81 7f       	andi	r24, 0xF1	; 241
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
     fcc:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable  ADC auto-trigger iff wanting multiple samples.
     fd0:	c2 30       	cpi	r28, 0x02	; 2
     fd2:	d1 05       	cpc	r29, r1
     fd4:	24 f0       	brlt	.+8      	; 0xfde <_analogueNoiseReducedReadM(unsigned char, int)+0x56>
     fd6:	80 91 7a 00 	lds	r24, 0x007A
     fda:	80 62       	ori	r24, 0x20	; 32
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <_analogueNoiseReducedReadM(unsigned char, int)+0x5c>
     fde:	80 91 7a 00 	lds	r24, 0x007A
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
     fe8:	80 91 7a 00 	lds	r24, 0x007A
     fec:	88 60       	ori	r24, 0x08	; 8
     fee:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
     ff2:	80 91 7a 00 	lds	r24, 0x007A
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	80 93 7a 00 	sts	0x007A, r24
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <_analogueNoiseReducedReadM(unsigned char, int)+0x92>
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
     ffe:	10 92 61 01 	sts	0x0161, r1
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <_analogueNoiseReducedReadM(unsigned char, int)+0x8a>
      while(!ADC_complete) { sleep_mode(); }
    1004:	83 b7       	in	r24, 0x33	; 51
    1006:	81 60       	ori	r24, 0x01	; 1
    1008:	83 bf       	out	0x33, r24	; 51
    100a:	88 95       	sleep
    100c:	83 b7       	in	r24, 0x33	; 51
    100e:	8e 7f       	andi	r24, 0xFE	; 254
    1010:	83 bf       	out	0x33, r24	; 51
    1012:	80 91 61 01 	lds	r24, 0x0161
    1016:	88 23       	and	r24, r24
    1018:	a9 f3       	breq	.-22     	; 0x1004 <_analogueNoiseReducedReadM(unsigned char, int)+0x7c>
  ADCSRB = 0; // Enable free-running mode.
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable  ADC auto-trigger iff wanting multiple samples.
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    101a:	21 97       	sbiw	r28, 0x01	; 1
    101c:	d7 ff       	sbrs	r29, 7
    101e:	ef cf       	rjmp	.-34     	; 0xffe <_analogueNoiseReducedReadM(unsigned char, int)+0x76>
      {
      ADC_complete = false;
      while(!ADC_complete) { sleep_mode(); }
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1020:	80 91 7a 00 	lds	r24, 0x007A
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    102a:	80 91 7a 00 	lds	r24, 0x007A
    102e:	8f 7d       	andi	r24, 0xDF	; 223
    1030:	80 93 7a 00 	sts	0x007A, r24
  sleep_disable();
    1034:	83 b7       	in	r24, 0x33	; 51
    1036:	8e 7f       	andi	r24, 0xFE	; 254
    1038:	83 bf       	out	0x33, r24	; 51
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    103a:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    103e:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    1042:	11 23       	and	r17, r17
    1044:	51 f0       	breq	.+20     	; 0x105a <_analogueNoiseReducedReadM(unsigned char, int)+0xd2>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1046:	80 91 7a 00 	lds	r24, 0x007A
    104a:	8f 77       	andi	r24, 0x7F	; 127
    104c:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1050:	80 91 64 00 	lds	r24, 0x0064
    1054:	81 60       	ori	r24, 0x01	; 1
    1056:	80 93 64 00 	sts	0x0064, r24
    105a:	94 2f       	mov	r25, r20
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	28 2b       	or	r18, r24
    1062:	39 2b       	or	r19, r25
  sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    1064:	c9 01       	movw	r24, r18
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	08 95       	ret

0000106e <powerSupplyVoltage()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t powerSupplyVoltage()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS0) | 14);
    106e:	8e e4       	ldi	r24, 0x4E	; 78
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	0e 94 c4 07 	call	0xf88	; 0xf88 <_analogueNoiseReducedReadM(unsigned char, int)>
    1078:	bc 01       	movw	r22, r24
    107a:	80 ec       	ldi	r24, 0xC0	; 192
    107c:	9f ef       	ldi	r25, 0xFF	; 255
    107e:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    1082:	9b 01       	movw	r18, r22
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	8a 95       	dec	r24
    108c:	e1 f7       	brne	.-8      	; 0x1086 <powerSupplyVoltage()+0x18>
    108e:	26 0f       	add	r18, r22
    1090:	37 1f       	adc	r19, r23
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
  return(result);
  }
    1092:	c9 01       	movw	r24, r18
    1094:	08 95       	ret

00001096 <internalTemperatureC()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int internalTemperatureC()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const int raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    1096:	88 ec       	ldi	r24, 0xC8	; 200
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	0e 94 c4 07 	call	0xf88	; 0xf88 <_analogueNoiseReducedReadM(unsigned char, int)>
    10a0:	88 54       	subi	r24, 0x48	; 72
    10a2:	91 40       	sbci	r25, 0x01	; 1
    10a4:	22 ed       	ldi	r18, 0xD2	; 210
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	a9 01       	movw	r20, r18
    10aa:	84 9f       	mul	r24, r20
    10ac:	90 01       	movw	r18, r0
    10ae:	85 9f       	mul	r24, r21
    10b0:	30 0d       	add	r19, r0
    10b2:	94 9f       	mul	r25, r20
    10b4:	30 0d       	add	r19, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	20 58       	subi	r18, 0x80	; 128
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	23 2f       	mov	r18, r19
    10be:	33 0f       	add	r19, r19
    10c0:	33 0b       	sbc	r19, r19
#endif
  //const int degC = (raw + (raw>>4)) - 289; // Adjust to mV slope (and thus C) given ref at 1.1V and FSD of 1023.
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((raw - 328) * 210 + 128) >> 8; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    10c2:	c9 01       	movw	r24, r18
    10c4:	08 95       	ret

000010c6 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
int analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    10c6:	62 95       	swap	r22
    10c8:	66 0f       	add	r22, r22
    10ca:	66 0f       	add	r22, r22
    10cc:	60 7c       	andi	r22, 0xC0	; 192
    10ce:	87 70       	andi	r24, 0x07	; 7
    10d0:	86 2b       	or	r24, r22
    10d2:	63 e0       	ldi	r22, 0x03	; 3
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	0e 94 c4 07 	call	0xf88	; 0xf88 <_analogueNoiseReducedReadM(unsigned char, int)>
    10da:	08 95       	ret

000010dc <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    10dc:	ec eb       	ldi	r30, 0xBC	; 188
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    10e6:	e4 e6       	ldi	r30, 0x64	; 100
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 68       	ori	r24, 0x80	; 128
    10ee:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    10f0:	08 95       	ret

000010f2 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  watchdogFired = false;
    10f2:	10 92 60 01 	sts	0x0160, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	28 e1       	ldi	r18, 0x18	; 24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	a8 95       	wdr
    1102:	20 93 60 00 	sts	0x0060, r18
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    110c:	80 91 60 00 	lds	r24, 0x0060
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	80 93 60 00 	sts	0x0060, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	01 c0       	rjmp	.+2      	; 0x111c <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	80 91 60 01 	lds	r24, 0x0160
    1120:	88 23       	and	r24, r24
    1122:	d9 f3       	breq	.-10     	; 0x111a <clockJitterWDT()+0x28>
  return(count);
  }
    1124:	89 2f       	mov	r24, r25
    1126:	08 95       	ret

00001128 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    1128:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    112a:	90 91 b2 00 	lds	r25, 0x00B2
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    1134:	4f 5f       	subi	r20, 0xFF	; 255
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	80 91 b2 00 	lds	r24, 0x00B2
    113c:	98 17       	cp	r25, r24
    113e:	d1 f3       	breq	.-12     	; 0x1134 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    1140:	f0 91 b2 00 	lds	r31, 0x00B2

  watchdogFired = false;
    1144:	10 92 60 01 	sts	0x0160, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    1148:	88 e0       	ldi	r24, 0x08	; 8
    114a:	28 e1       	ldi	r18, 0x18	; 24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	a8 95       	wdr
    1154:	20 93 60 00 	sts	0x0060, r18
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    115e:	80 91 60 00 	lds	r24, 0x0060
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	80 93 60 00 	sts	0x0060, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	e0 e0       	ldi	r30, 0x00	; 0
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      watchdogFired = false;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1174:	a8 e1       	ldi	r26, 0x18	; 24
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!watchdogFired) { ++countW; }
    117a:	80 91 60 01 	lds	r24, 0x0160
    117e:	88 23       	and	r24, r24
    1180:	11 f4       	brne	.+4      	; 0x1186 <clockJitterEntropyByte()+0x5e>
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	2a c0       	rjmp	.+84     	; 0x11da <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1186:	27 17       	cp	r18, r23
    1188:	c1 f0       	breq	.+48     	; 0x11ba <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    118a:	42 27       	eor	r20, r18
    118c:	04 2e       	mov	r0, r20
    118e:	42 95       	swap	r20
    1190:	40 7f       	andi	r20, 0xF0	; 240
    1192:	40 25       	eor	r20, r0
    1194:	05 2e       	mov	r0, r21
    1196:	54 2f       	mov	r21, r20
    1198:	42 95       	swap	r20
    119a:	4f 70       	andi	r20, 0x0F	; 15
    119c:	04 26       	eor	r0, r20
    119e:	46 95       	lsr	r20
    11a0:	54 27       	eor	r21, r20
    11a2:	45 27       	eor	r20, r21
    11a4:	44 0f       	add	r20, r20
    11a6:	44 0f       	add	r20, r20
    11a8:	44 0f       	add	r20, r20
    11aa:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    11ac:	99 0f       	add	r25, r25
    11ae:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    11b0:	31 50       	subi	r19, 0x01	; 1
    11b2:	13 16       	cp	r1, r19
    11b4:	0c f0       	brlt	.+2      	; 0x11b8 <clockJitterEntropyByte()+0x90>
    11b6:	34 c0       	rjmp	.+104    	; 0x1220 <clockJitterEntropyByte()+0xf8>
    11b8:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      watchdogFired = false;
    11ba:	10 92 60 01 	sts	0x0160, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	a8 95       	wdr
    11c4:	a0 93 60 00 	sts	0x0060, r26
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    11ce:	80 91 60 00 	lds	r24, 0x0060
    11d2:	80 64       	ori	r24, 0x40	; 64
    11d4:	80 93 60 00 	sts	0x0060, r24
    11d8:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    11da:	80 91 b2 00 	lds	r24, 0x00B2
    11de:	f8 17       	cp	r31, r24
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <clockJitterEntropyByte()+0xbe>
    11e2:	61 50       	subi	r22, 0x01	; 1
    11e4:	ca cf       	rjmp	.-108    	; 0x117a <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    11e6:	6e 17       	cp	r22, r30
    11e8:	b9 f0       	breq	.+46     	; 0x1218 <clockJitterEntropyByte()+0xf0>
    11ea:	46 27       	eor	r20, r22
    11ec:	04 2e       	mov	r0, r20
    11ee:	42 95       	swap	r20
    11f0:	40 7f       	andi	r20, 0xF0	; 240
    11f2:	40 25       	eor	r20, r0
    11f4:	05 2e       	mov	r0, r21
    11f6:	54 2f       	mov	r21, r20
    11f8:	42 95       	swap	r20
    11fa:	4f 70       	andi	r20, 0x0F	; 15
    11fc:	04 26       	eor	r0, r20
    11fe:	46 95       	lsr	r20
    1200:	54 27       	eor	r21, r20
    1202:	45 27       	eor	r20, r21
    1204:	44 0f       	add	r20, r20
    1206:	44 0f       	add	r20, r20
    1208:	44 0f       	add	r20, r20
    120a:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    120c:	99 0f       	add	r25, r25
    120e:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1210:	31 50       	subi	r19, 0x01	; 1
    1212:	13 16       	cp	r1, r19
    1214:	2c f4       	brge	.+10     	; 0x1220 <clockJitterEntropyByte()+0xf8>
    1216:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    1218:	f0 91 b2 00 	lds	r31, 0x00B2
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	ad cf       	rjmp	.-166    	; 0x117a <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    1220:	88 e1       	ldi	r24, 0x18	; 24
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	80 93 60 00 	sts	0x0060, r24
    122a:	10 92 60 00 	sts	0x0060, r1
    122e:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    1230:	89 2f       	mov	r24, r25
    1232:	1f 91       	pop	r17
    1234:	08 95       	ret

00001236 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1236:	8c b5       	in	r24, 0x2c	; 44
    1238:	8f 7b       	andi	r24, 0xBF	; 191
    123a:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    123c:	e4 e6       	ldi	r30, 0x64	; 100
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	84 60       	ori	r24, 0x04	; 4
    1244:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1246:	8a e0       	ldi	r24, 0x0A	; 10
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    124e:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    1250:	8d e0       	ldi	r24, 0x0D	; 13
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1258:	8b e0       	ldi	r24, 0x0B	; 11
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    1260:	8c e0       	ldi	r24, 0x0C	; 12
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1268:	08 95       	ret

0000126a <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    126a:	80 91 64 00 	lds	r24, 0x0064
    126e:	82 fd       	sbrc	r24, 2
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <powerUpSPIIfDisabled()+0xc>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    127e:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    1280:	80 91 64 00 	lds	r24, 0x0064
    1284:	8b 7f       	andi	r24, 0xFB	; 251
    1286:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    128a:	80 e5       	ldi	r24, 0x50	; 80
    128c:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1292:	08 95       	ret

00001294 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up(ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1294:	87 e0       	ldi	r24, 0x07	; 7
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  }
    129c:	08 95       	ret

0000129e <minimsePowerWithoutSleep()>:
// Selectively turn off all modules that need not run continuously so as to minimise power without sleeping.
// Suitable for start-up and for belt-and-braces use before main sleep on each cycle,
// to ensure that nothing is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
void minimsePowerWithoutSleep()
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    12a2:	88 e1       	ldi	r24, 0x18	; 24
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	80 93 60 00 	sts	0x0060, r24
    12ac:	10 92 60 00 	sts	0x0060, r1
    12b0:	0f be       	out	0x3f, r0	; 63
  
  // Turn off external peripherals.
  power_intermittent_peripherals_disable();
    12b2:	0e 94 4a 09 	call	0x1294	; 0x1294 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    12b6:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    12be:	8f e3       	ldi	r24, 0x3F	; 63
    12c0:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    12ca:	04 e6       	ldi	r16, 0x64	; 100
    12cc:	10 e0       	ldi	r17, 0x00	; 0
    12ce:	f8 01       	movw	r30, r16
    12d0:	80 81       	ld	r24, Z
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Put the radio in low-power standby mode.
  //RFM22ModeStandbyAndClearState();
#endif
  // Power down SPI during major sleep.
  powerDownSPI();
    12d6:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>

#ifdef DONT_USE_TIMER0
  power_timer0_disable();
#endif

  power_timer1_disable();
    12da:	f8 01       	movw	r30, r16
    12dc:	80 81       	ld	r24, Z
    12de:	88 60       	ori	r24, 0x08	; 8
    12e0:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	08 95       	ret

000012e8 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    12e8:	80 91 64 00 	lds	r24, 0x0064
    12ec:	87 fd       	sbrc	r24, 7
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <powerUpTWIIfDisabled()+0xc>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    12f4:	80 91 64 00 	lds	r24, 0x0064
    12f8:	8f 77       	andi	r24, 0x7F	; 127
    12fa:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    12fe:	80 91 bc 00 	lds	r24, 0x00BC
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1308:	82 ec       	ldi	r24, 0xC2	; 194
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    1310:	10 92 b8 00 	sts	0x00B8, r1
    1314:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    1316:	08 95       	ret

00001318 <powerDownSerial()>:
  return;
  }
#endif

// Flush any pending serial output and power it down.
void powerDownSerial()
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
  {
  // Flush serial output and shut down to minimal power state including minimising leakage to serial lines!
  Serial.flush();
    131c:	04 ec       	ldi	r16, 0xC4	; 196
    131e:	12 e0       	ldi	r17, 0x02	; 2
    1320:	c8 01       	movw	r24, r16
    1322:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  //flushSerialHW();
  Serial.end();
    1326:	c8 01       	movw	r24, r16
    1328:	0e 94 40 1a 	call	0x3480	; 0x3480 <HardwareSerial::end()>
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	62 e0       	ldi	r22, 0x02	; 2
    1338:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    133c:	e4 e6       	ldi	r30, 0x64	; 100
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	80 83       	st	Z, r24
  }
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <powerUpSerialIfDisabled()>:
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(!(PRR & _BV(PRUSART0))) { return(false); }
    134c:	80 91 64 00 	lds	r24, 0x0064
    1350:	81 fd       	sbrc	r24, 1
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <powerUpSerialIfDisabled()+0xc>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    1358:	80 91 64 00 	lds	r24, 0x0064
    135c:	8d 7f       	andi	r24, 0xFD	; 253
    135e:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    1362:	84 ec       	ldi	r24, 0xC4	; 196
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	40 ec       	ldi	r20, 0xC0	; 192
    1368:	52 e1       	ldi	r21, 0x12	; 18
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	0e 94 c2 19 	call	0x3384	; 0x3384 <HardwareSerial::begin(unsigned long)>
    1372:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    1374:	08 95       	ret

00001376 <power_intermittent_peripherals_enable(bool)>:
// Enable power to intermittent peripherals.
//   * waitUntilStable  wait long enough (and maybe test) for I/O power to become stable.
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    1376:	1f 93       	push	r17
    1378:	18 2f       	mov	r17, r24
  {
  digitalWrite(IO_POWER_UP, HIGH);
    137a:	87 e0       	ldi	r24, 0x07	; 7
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <digitalWrite>
  pinMode(IO_POWER_UP, OUTPUT);
    1382:	87 e0       	ldi	r24, 0x07	; 7
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    138a:	11 23       	and	r17, r17
    138c:	21 f0       	breq	.+8      	; 0x1396 <power_intermittent_peripherals_enable(bool)+0x20>
    138e:	86 e0       	ldi	r24, 0x06	; 6
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 56 07 	call	0xeac	; 0xeac <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    1396:	1f 91       	pop	r17
    1398:	08 95       	ret

0000139a <sleepUntilSubCycleTime(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    13a4:	07 e0       	ldi	r16, 0x07	; 7
// This is NOT intended to be used to sleep over the end of a minor cycle.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    13a6:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    13aa:	81 17       	cp	r24, r17
    13ac:	e1 f1       	breq	.+120    	; 0x1426 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    13ae:	18 17       	cp	r17, r24
    13b0:	10 f4       	brcc	.+4      	; 0x13b6 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	39 c0       	rjmp	.+114    	; 0x1428 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    13b6:	21 2f       	mov	r18, r17
    13b8:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    13ba:	21 30       	cpi	r18, 0x01	; 1
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <sleepUntilSubCycleTime(unsigned char)+0x2a>
      {
      // Take a very short sleep, less than half a tick,
      // eg as may be some way into this tick already.
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
    13be:	83 e1       	ldi	r24, 0x13	; 19
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	2e c0       	rjmp	.+92     	; 0x1420 <sleepUntilSubCycleTime(unsigned char)+0x86>
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    13c4:	20 9f       	mul	r18, r16
    13c6:	e0 01       	movw	r28, r0
    13c8:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing their timing to the wire.
    if(msLeft >= 20)
    13ca:	c4 31       	cpi	r28, 0x14	; 20
    13cc:	d1 05       	cpc	r29, r1
    13ce:	70 f0       	brcs	.+28     	; 0x13ec <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    13d0:	c0 35       	cpi	r28, 0x50	; 80
    13d2:	d1 05       	cpc	r29, r1
    13d4:	38 f0       	brcs	.+14     	; 0x13e4 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    13d6:	cd 54       	subi	r28, 0x4D	; 77
    13d8:	d1 40       	sbci	r29, 0x01	; 1
    13da:	10 f0       	brcs	.+4      	; 0x13e0 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
    13ea:	dd cf       	rjmp	.-70     	; 0x13a6 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    13ec:	ce 01       	movw	r24, r28
    13ee:	02 97       	sbiw	r24, 0x02	; 2
    13f0:	87 5e       	subi	r24, 0xE7	; 231
    13f2:	93 40       	sbci	r25, 0x03	; 3
    13f4:	10 f0       	brcs	.+4      	; 0x13fa <sleepUntilSubCycleTime(unsigned char)+0x60>
    13f6:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    13fa:	9e 01       	movw	r18, r28
    13fc:	21 50       	subi	r18, 0x01	; 1
    13fe:	30 40       	sbci	r19, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	da 01       	movw	r26, r20
    1406:	c9 01       	movw	r24, r18
    1408:	63 e0       	ldi	r22, 0x03	; 3
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	aa 1f       	adc	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	6a 95       	dec	r22
    1414:	d1 f7       	brne	.-12     	; 0x140a <sleepUntilSubCycleTime(unsigned char)+0x70>
    1416:	82 1b       	sub	r24, r18
    1418:	93 0b       	sbc	r25, r19
    141a:	a4 0b       	sbc	r26, r20
    141c:	b5 0b       	sbc	r27, r21
    141e:	02 97       	sbiw	r24, 0x02	; 2
    1420:	0e 94 56 07 	call	0xeac	; 0xeac <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    1424:	c0 cf       	rjmp	.-128    	; 0x13a6 <sleepUntilSubCycleTime(unsigned char)+0xc>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    1432:	80 91 61 00 	lds	r24, 0x0061
    1436:	8f 70       	andi	r24, 0x0F	; 15
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	11 f0       	breq	.+4      	; 0x1440 <powerSetup()+0xe>
    143c:	0e 94 38 02 	call	0x470	; 0x470 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimsePowerWithoutSleep();
    1440:	0e 94 4f 09 	call	0x129e	; 0x129e <minimsePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    1444:	80 91 64 00 	lds	r24, 0x0064
    1448:	8f 6e       	ori	r24, 0xEF	; 239
    144a:	80 93 64 00 	sts	0x0064, r24

#ifndef DONT_USE_TIMER0
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    144e:	80 91 64 00 	lds	r24, 0x0064
    1452:	8f 7d       	andi	r24, 0xDF	; 223
    1454:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    1458:	80 91 64 00 	lds	r24, 0x0064
    145c:	8f 7b       	andi	r24, 0xBF	; 191
    145e:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    1462:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    1466:	86 e0       	ldi	r24, 0x06	; 6
    1468:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    1478:	08 95       	ret

0000147a <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    147a:	20 91 63 01 	lds	r18, 0x0163
  b ^=s2;
    147e:	90 91 65 01 	lds	r25, 0x0165
    1482:	69 27       	eor	r22, r25
  c ^=s3;
    1484:	90 91 64 01 	lds	r25, 0x0164
    1488:	49 27       	eor	r20, r25
  x++;
    148a:	90 91 62 01 	lds	r25, 0x0162
    148e:	9f 5f       	subi	r25, 0xFF	; 255
    1490:	90 93 62 01 	sts	0x0162, r25
  a = (a^c^x);
    1494:	28 27       	eor	r18, r24
    1496:	24 27       	eor	r18, r20
    1498:	29 27       	eor	r18, r25
    149a:	20 93 63 01 	sts	0x0163, r18
  b = (b+a);
    149e:	62 0f       	add	r22, r18
    14a0:	60 93 65 01 	sts	0x0165, r22
  c = (c+(b>>1)^a);
    14a4:	66 95       	lsr	r22
    14a6:	64 0f       	add	r22, r20
    14a8:	62 27       	eor	r22, r18
    14aa:	60 93 64 01 	sts	0x0164, r22
  }
    14ae:	08 95       	ret

000014b0 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    14b0:	80 91 62 01 	lds	r24, 0x0162
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	80 93 62 01 	sts	0x0162, r24
  a = (a^c^x);       //note the mix of addition and XOR
    14ba:	20 91 64 01 	lds	r18, 0x0164
    14be:	90 91 63 01 	lds	r25, 0x0163
    14c2:	92 27       	eor	r25, r18
    14c4:	98 27       	eor	r25, r24
    14c6:	90 93 63 01 	sts	0x0163, r25
  b = (b+a);         //And the use of very few instructions
    14ca:	80 91 65 01 	lds	r24, 0x0165
    14ce:	89 0f       	add	r24, r25
    14d0:	80 93 65 01 	sts	0x0165, r24
  c = (c+(b>>1)^a);  //the right shift is to ensure that high-order bits from b can affect  
    14d4:	86 95       	lsr	r24
    14d6:	82 0f       	add	r24, r18
    14d8:	89 27       	eor	r24, r25
    14da:	80 93 64 01 	sts	0x0164, r24
  return(c);         //low order bits of other variables
  }
    14de:	08 95       	ret

000014e0 <RFM22QueueCmdToFF(unsigned char const*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(const uint8_t *bptr)
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    14ea:	0e 94 35 09 	call	0x126a	; 0x126a <powerUpSPIIfDisabled()>
    14ee:	08 2f       	mov	r16, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    14f0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    14f2:	88 e8       	ldi	r24, 0x88	; 136
    14f4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    14f6:	0d b4       	in	r0, 0x2d	; 45
    14f8:	07 fe       	sbrs	r0, 7
    14fa:	fd cf       	rjmp	.-6      	; 0x14f6 <RFM22QueueCmdToFF(unsigned char const*)+0x16>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1500:	0d b4       	in	r0, 0x2d	; 45
    1502:	07 fe       	sbrs	r0, 7
    1504:	fd cf       	rjmp	.-6      	; 0x1500 <RFM22QueueCmdToFF(unsigned char const*)+0x20>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1506:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    1508:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    150a:	88 e8       	ldi	r24, 0x88	; 136
    150c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    150e:	0d b4       	in	r0, 0x2d	; 45
    1510:	07 fe       	sbrs	r0, 7
    1512:	fd cf       	rjmp	.-6      	; 0x150e <RFM22QueueCmdToFF(unsigned char const*)+0x2e>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1514:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1516:	0d b4       	in	r0, 0x2d	; 45
    1518:	07 fe       	sbrs	r0, 7
    151a:	fd cf       	rjmp	.-6      	; 0x1516 <RFM22QueueCmdToFF(unsigned char const*)+0x36>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    151c:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    151e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1524:	0d b4       	in	r0, 0x2d	; 45
    1526:	07 fe       	sbrs	r0, 7
    1528:	fd cf       	rjmp	.-6      	; 0x1524 <RFM22QueueCmdToFF(unsigned char const*)+0x44>
    152a:	10 e4       	ldi	r17, 0x40	; 64
    152c:	13 c0       	rjmp	.+38     	; 0x1554 <RFM22QueueCmdToFF(unsigned char const*)+0x74>
  uint8_t val;
#if 1 && defined(DEBUG)
  for(int8_t i = 64; ((uint8_t)0xff) != (val = *bptr++); )
    {
    // DEBUG_SERIAL_PRINTFMT(val, HEX); DEBUG_SERIAL_PRINTLN();
    SPDR = val;
    152e:	8e bd       	out	0x2e, r24	; 46
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    1530:	11 50       	subi	r17, 0x01	; 1
    1532:	17 ff       	sbrs	r17, 7
    1534:	0c c0       	rjmp	.+24     	; 0x154e <RFM22QueueCmdToFF(unsigned char const*)+0x6e>
    1536:	84 ec       	ldi	r24, 0xC4	; 196
    1538:	92 e0       	ldi	r25, 0x02	; 2
    153a:	64 e4       	ldi	r22, 0x44	; 68
    153c:	71 e0       	ldi	r23, 0x01	; 1
    153e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    1542:	84 ec       	ldi	r24, 0xC4	; 196
    1544:	92 e0       	ldi	r25, 0x02	; 2
    1546:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
    154a:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
    while (!(SPSR & _BV(SPIF))) { }
    154e:	0d b4       	in	r0, 0x2d	; 45
    1550:	07 fe       	sbrs	r0, 7
    1552:	fd cf       	rjmp	.-6      	; 0x154e <RFM22QueueCmdToFF(unsigned char const*)+0x6e>
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
  _RFM22_wr(RFM22REG_FIFO | 0x80); // Start burst write to TX FIFO.
  uint8_t val;
#if 1 && defined(DEBUG)
  for(int8_t i = 64; ((uint8_t)0xff) != (val = *bptr++); )
    1554:	89 91       	ld	r24, Y+
    1556:	8f 3f       	cpi	r24, 0xFF	; 255
    1558:	51 f7       	brne	.-44     	; 0x152e <RFM22QueueCmdToFF(unsigned char const*)+0x4e>
    //val = SPDR; // Not clear if SPDR has to be read...
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
#endif
  _RFM22_DESELECT();
    155a:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    155c:	00 23       	and	r16, r16
    155e:	11 f0       	breq	.+4      	; 0x1564 <RFM22QueueCmdToFF(unsigned char const*)+0x84>
    1560:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>
  }
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    1574:	0e 94 35 09 	call	0x126a	; 0x126a <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    1578:	fe 01       	movw	r30, r28
    157a:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    157c:	21 96       	adiw	r28, 0x01	; 1
    157e:	fe 01       	movw	r30, r28
    1580:	24 91       	lpm	r18, Z+
    1582:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    1584:	9f 3f       	cpi	r25, 0xFF	; 255
    1586:	69 f0       	breq	.+26     	; 0x15a2 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    1588:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    158a:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    158c:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    158e:	0d b4       	in	r0, 0x2d	; 45
    1590:	07 fe       	sbrs	r0, 7
    1592:	fd cf       	rjmp	.-6      	; 0x158e <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1594:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1596:	0d b4       	in	r0, 0x2d	; 45
    1598:	07 fe       	sbrs	r0, 7
    159a:	fd cf       	rjmp	.-6      	; 0x1596 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    159c:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    159e:	22 96       	adiw	r28, 0x02	; 2
    15a0:	eb cf       	rjmp	.-42     	; 0x1578 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    15a2:	88 23       	and	r24, r24
    15a4:	11 f0       	breq	.+4      	; 0x15aa <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    15a6:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>
  }
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    15b0:	0e 94 35 09 	call	0x126a	; 0x126a <powerUpSPIIfDisabled()>
    15b4:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    15b6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    15b8:	87 e8       	ldi	r24, 0x87	; 135
    15ba:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    15bc:	0d b4       	in	r0, 0x2d	; 45
    15be:	07 fe       	sbrs	r0, 7
    15c0:	fd cf       	rjmp	.-6      	; 0x15bc <RFM22PowerOnInit()+0xc>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    15c2:	80 e8       	ldi	r24, 0x80	; 128
    15c4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    15c6:	0d b4       	in	r0, 0x2d	; 45
    15c8:	07 fe       	sbrs	r0, 7
    15ca:	fd cf       	rjmp	.-6      	; 0x15c6 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    15cc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    15ce:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    15d0:	87 e8       	ldi	r24, 0x87	; 135
    15d2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    15d4:	0d b4       	in	r0, 0x2d	; 45
    15d6:	07 fe       	sbrs	r0, 7
    15d8:	fd cf       	rjmp	.-6      	; 0x15d4 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    15da:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    15dc:	0d b4       	in	r0, 0x2d	; 45
    15de:	07 fe       	sbrs	r0, 7
    15e0:	fd cf       	rjmp	.-6      	; 0x15dc <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    15e2:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    15e4:	99 23       	and	r25, r25
    15e6:	11 f0       	breq	.+4      	; 0x15ec <RFM22PowerOnInit()+0x3c>
    15e8:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>
    15ec:	08 95       	ret

000015ee <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    15ee:	0e 94 35 09 	call	0x126a	; 0x126a <powerUpSPIIfDisabled()>
    15f2:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    15f4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    15f6:	87 e8       	ldi	r24, 0x87	; 135
    15f8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    15fa:	0d b4       	in	r0, 0x2d	; 45
    15fc:	07 fe       	sbrs	r0, 7
    15fe:	fd cf       	rjmp	.-6      	; 0x15fa <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1600:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1602:	0d b4       	in	r0, 0x2d	; 45
    1604:	07 fe       	sbrs	r0, 7
    1606:	fd cf       	rjmp	.-6      	; 0x1602 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1608:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    160a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    160c:	88 e8       	ldi	r24, 0x88	; 136
    160e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1610:	0d b4       	in	r0, 0x2d	; 45
    1612:	07 fe       	sbrs	r0, 7
    1614:	fd cf       	rjmp	.-6      	; 0x1610 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    161a:	0d b4       	in	r0, 0x2d	; 45
    161c:	07 fe       	sbrs	r0, 7
    161e:	fd cf       	rjmp	.-6      	; 0x161a <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1620:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    1622:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1624:	88 e8       	ldi	r24, 0x88	; 136
    1626:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1628:	0d b4       	in	r0, 0x2d	; 45
    162a:	07 fe       	sbrs	r0, 7
    162c:	fd cf       	rjmp	.-6      	; 0x1628 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    162e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1630:	0d b4       	in	r0, 0x2d	; 45
    1632:	07 fe       	sbrs	r0, 7
    1634:	fd cf       	rjmp	.-6      	; 0x1630 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1636:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    1638:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    163a:	85 e8       	ldi	r24, 0x85	; 133
    163c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    163e:	0d b4       	in	r0, 0x2d	; 45
    1640:	07 fe       	sbrs	r0, 7
    1642:	fd cf       	rjmp	.-6      	; 0x163e <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1644:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1646:	0d b4       	in	r0, 0x2d	; 45
    1648:	07 fe       	sbrs	r0, 7
    164a:	fd cf       	rjmp	.-6      	; 0x1646 <RFM22ModeStandbyAndClearState()+0x58>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    164c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    164e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1650:	86 e8       	ldi	r24, 0x86	; 134
    1652:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1654:	0d b4       	in	r0, 0x2d	; 45
    1656:	07 fe       	sbrs	r0, 7
    1658:	fd cf       	rjmp	.-6      	; 0x1654 <RFM22ModeStandbyAndClearState()+0x66>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    165a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    165c:	0d b4       	in	r0, 0x2d	; 45
    165e:	07 fe       	sbrs	r0, 7
    1660:	fd cf       	rjmp	.-6      	; 0x165c <RFM22ModeStandbyAndClearState()+0x6e>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1662:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    1664:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1666:	83 e8       	ldi	r24, 0x83	; 131
    1668:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    166a:	0d b4       	in	r0, 0x2d	; 45
    166c:	07 fe       	sbrs	r0, 7
    166e:	fd cf       	rjmp	.-6      	; 0x166a <RFM22ModeStandbyAndClearState()+0x7c>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1670:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1672:	0d b4       	in	r0, 0x2d	; 45
    1674:	07 fe       	sbrs	r0, 7
    1676:	fd cf       	rjmp	.-6      	; 0x1672 <RFM22ModeStandbyAndClearState()+0x84>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1678:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    167a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    167c:	84 e8       	ldi	r24, 0x84	; 132
    167e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1680:	0d b4       	in	r0, 0x2d	; 45
    1682:	07 fe       	sbrs	r0, 7
    1684:	fd cf       	rjmp	.-6      	; 0x1680 <RFM22ModeStandbyAndClearState()+0x92>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1686:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1688:	0d b4       	in	r0, 0x2d	; 45
    168a:	07 fe       	sbrs	r0, 7
    168c:	fd cf       	rjmp	.-6      	; 0x1688 <RFM22ModeStandbyAndClearState()+0x9a>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    168e:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, 0);
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    1690:	99 23       	and	r25, r25
    1692:	11 f0       	breq	.+4      	; 0x1698 <RFM22ModeStandbyAndClearState()+0xaa>
    1694:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>
    1698:	08 95       	ret

0000169a <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    16a0:	0e 94 35 09 	call	0x126a	; 0x126a <powerUpSPIIfDisabled()>
    16a4:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    16a6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16a8:	85 e8       	ldi	r24, 0x85	; 133
    16aa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16ac:	0d b4       	in	r0, 0x2d	; 45
    16ae:	07 fe       	sbrs	r0, 7
    16b0:	fd cf       	rjmp	.-6      	; 0x16ac <RFM22TXFIFO()+0x12>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16b6:	0d b4       	in	r0, 0x2d	; 45
    16b8:	07 fe       	sbrs	r0, 7
    16ba:	fd cf       	rjmp	.-6      	; 0x16b6 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    16bc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    16be:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16c0:	86 e8       	ldi	r24, 0x86	; 134
    16c2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16c4:	0d b4       	in	r0, 0x2d	; 45
    16c6:	07 fe       	sbrs	r0, 7
    16c8:	fd cf       	rjmp	.-6      	; 0x16c4 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16ca:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16cc:	0d b4       	in	r0, 0x2d	; 45
    16ce:	07 fe       	sbrs	r0, 7
    16d0:	fd cf       	rjmp	.-6      	; 0x16cc <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    16d2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    16d4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16d6:	83 e8       	ldi	r24, 0x83	; 131
    16d8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16da:	0d b4       	in	r0, 0x2d	; 45
    16dc:	07 fe       	sbrs	r0, 7
    16de:	fd cf       	rjmp	.-6      	; 0x16da <RFM22TXFIFO()+0x40>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16e0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16e2:	0d b4       	in	r0, 0x2d	; 45
    16e4:	07 fe       	sbrs	r0, 7
    16e6:	fd cf       	rjmp	.-6      	; 0x16e2 <RFM22TXFIFO()+0x48>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    16e8:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    16ea:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16ec:	84 e8       	ldi	r24, 0x84	; 132
    16ee:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16f0:	0d b4       	in	r0, 0x2d	; 45
    16f2:	07 fe       	sbrs	r0, 7
    16f4:	fd cf       	rjmp	.-6      	; 0x16f0 <RFM22TXFIFO()+0x56>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    16f6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16f8:	0d b4       	in	r0, 0x2d	; 45
    16fa:	07 fe       	sbrs	r0, 7
    16fc:	fd cf       	rjmp	.-6      	; 0x16f8 <RFM22TXFIFO()+0x5e>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    16fe:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
    1700:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    1702:	87 e8       	ldi	r24, 0x87	; 135
    1704:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1706:	0d b4       	in	r0, 0x2d	; 45
    1708:	07 fe       	sbrs	r0, 7
    170a:	fd cf       	rjmp	.-6      	; 0x1706 <RFM22TXFIFO()+0x6c>

// Write one byte over SPI...
// SPI must already be configured and running.
static void _RFM22_wr(uint8_t data)
  {
  SPDR = data;
    170c:	89 e0       	ldi	r24, 0x09	; 9
    170e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1710:	0d b4       	in	r0, 0x2d	; 45
    1712:	07 fe       	sbrs	r0, 7
    1714:	fd cf       	rjmp	.-6      	; 0x1710 <RFM22TXFIFO()+0x76>
static void _RFM22WriteReg8Bit(uint8_t addr, uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1716:	2a 9a       	sbi	0x05, 2	; 5
    1718:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    171a:	03 e0       	ldi	r16, 0x03	; 3
    171c:	11 c0       	rjmp	.+34     	; 0x1740 <RFM22TXFIFO()+0xa6>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a bit waiting for bits to be sent...
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(uint8_t addr)
  {
  _RFM22_SELECT();
    1724:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    1726:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1728:	0d b4       	in	r0, 0x2d	; 45
    172a:	07 fe       	sbrs	r0, 7
    172c:	fd cf       	rjmp	.-6      	; 0x1728 <RFM22TXFIFO()+0x8e>
  return(SPDR);
    172e:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    1730:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1732:	0d b4       	in	r0, 0x2d	; 45
    1734:	07 fe       	sbrs	r0, 7
    1736:	fd cf       	rjmp	.-6      	; 0x1732 <RFM22TXFIFO()+0x98>
  return(SPDR);
    1738:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    173a:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a bit waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1);
    if(status & 4) { result = true; break; } // Packet sent!
    173c:	82 fd       	sbrc	r24, 2
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <RFM22TXFIFO()+0xaa>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    1740:	11 50       	subi	r17, 0x01	; 1
    1742:	68 f7       	brcc	.-38     	; 0x171e <RFM22TXFIFO()+0x84>
    nap(WDTO_15MS); // Sleep in low power mode for a bit waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1);
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    1744:	ff 20       	and	r15, r15
    1746:	11 f0       	breq	.+4      	; 0x174c <RFM22TXFIFO()+0xb2>
    1748:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>
  return(false);
  }
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	08 95       	ret

00001756 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    175a:	0e 94 35 09 	call	0x126a	; 0x126a <powerUpSPIIfDisabled()>
    175e:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(uint8_t addr)
  {
  _RFM22_SELECT();
    1760:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    1762:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1764:	0d b4       	in	r0, 0x2d	; 45
    1766:	07 fe       	sbrs	r0, 7
    1768:	fd cf       	rjmp	.-6      	; 0x1764 <RFM22CheckConnected()+0xe>
  return(SPDR);
    176a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    176c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    176e:	0d b4       	in	r0, 0x2d	; 45
    1770:	07 fe       	sbrs	r0, 7
    1772:	fd cf       	rjmp	.-6      	; 0x176e <RFM22CheckConnected()+0x18>
  return(SPDR);
    1774:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    1776:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    1778:	18 30       	cpi	r17, 0x08	; 8
    177a:	b1 f4       	brne	.+44     	; 0x17a8 <RFM22CheckConnected()+0x52>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(uint8_t addr)
  {
  _RFM22_SELECT();
    177c:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1782:	0d b4       	in	r0, 0x2d	; 45
    1784:	07 fe       	sbrs	r0, 7
    1786:	fd cf       	rjmp	.-6      	; 0x1782 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    1788:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(uint8_t data)
  {
  SPDR = data;
    178a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    178c:	0d b4       	in	r0, 0x2d	; 45
    178e:	07 fe       	sbrs	r0, 7
    1790:	fd cf       	rjmp	.-6      	; 0x178c <RFM22CheckConnected()+0x36>
  return(SPDR);
    1792:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    1794:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    1796:	16 30       	cpi	r17, 0x06	; 6
    1798:	11 f4       	brne	.+4      	; 0x179e <RFM22CheckConnected()+0x48>
    179a:	11 e0       	ldi	r17, 0x01	; 1
    179c:	23 c0       	rjmp	.+70     	; 0x17e4 <RFM22CheckConnected()+0x8e>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    179e:	84 ec       	ldi	r24, 0xC4	; 196
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	6c e7       	ldi	r22, 0x7C	; 124
    17a4:	71 e0       	ldi	r23, 0x01	; 1
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <RFM22CheckConnected()+0x5a>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    17a8:	84 ec       	ldi	r24, 0xC4	; 196
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	6b e6       	ldi	r22, 0x6B	; 107
    17ae:	71 e0       	ldi	r23, 0x01	; 1
    17b0:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    17b4:	84 ec       	ldi	r24, 0xC4	; 196
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    17bc:	84 ec       	ldi	r24, 0xC4	; 196
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	61 2f       	mov	r22, r17
    17c2:	40 e1       	ldi	r20, 0x10	; 16
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
    17ca:	84 ec       	ldi	r24, 0xC4	; 196
    17cc:	92 e0       	ldi	r25, 0x02	; 2
    17ce:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
    DEBUG_SERIAL_PRINTLN();
    17d2:	84 ec       	ldi	r24, 0xC4	; 196
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    17da:	84 ec       	ldi	r24, 0xC4	; 196
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
    17e2:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    17e4:	00 23       	and	r16, r16
    17e6:	11 f0       	breq	.+4      	; 0x17ec <RFM22CheckConnected()+0x96>
    17e8:	0e 94 1b 09 	call	0x1236	; 0x1236 <powerDownSPI()>
  return(isOK);
  }
    17ec:	81 2f       	mov	r24, r17
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	08 95       	ret

000017f4 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    17f4:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    17f6:	f9 99       	sbic	0x1f, 1	; 31
    17f8:	fe cf       	rjmp	.-4      	; 0x17f6 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17fa:	32 bd       	out	0x22, r19	; 34
    17fc:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17fe:	f8 9a       	sbi	0x1f, 0	; 31
    1800:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    1802:	08 95       	ret

00001804 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    1804:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    1806:	f9 99       	sbic	0x1f, 1	; 31
    1808:	fe cf       	rjmp	.-4      	; 0x1806 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    180a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    180c:	32 bd       	out	0x22, r19	; 34
    180e:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    1810:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	fa 9a       	sbi	0x1f, 2	; 31
    1818:	f9 9a       	sbi	0x1f, 1	; 31
    181a:	0f be       	out	0x3f, r0	; 63
}
    181c:	08 95       	ret

0000181e <getMinutesSinceMidnightLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    181e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1820:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    1822:	20 91 67 01 	lds	r18, 0x0167
    1826:	30 91 68 01 	lds	r19, 0x0168
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    182a:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    182c:	c9 01       	movw	r24, r18
    182e:	08 95       	ret

00001830 <getMinutesLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1830:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1832:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    1834:	80 91 67 01 	lds	r24, 0x0167
    1838:	90 91 68 01 	lds	r25, 0x0168
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    183c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    183e:	6c e3       	ldi	r22, 0x3C	; 60
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
  return(result);
  }

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    1846:	08 95       	ret

00001848 <getHoursLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1848:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    184a:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    184c:	80 91 67 01 	lds	r24, 0x0167
    1850:	90 91 68 01 	lds	r25, 0x0168
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1854:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1856:	6c e3       	ldi	r22, 0x3C	; 60
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    185e:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    1860:	08 95       	ret

00001862 <restoreRTC()>:
  }

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// TODO: extend to handle date when supported...
bool restoreRTC()
    1862:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1864:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1866:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	6a ef       	ldi	r22, 0xFA	; 250
    186e:	7b e0       	ldi	r23, 0x0B	; 11
    1870:	0e 94 a0 02 	call	0x540	; 0x540 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    1874:	2f ef       	ldi	r18, 0xFF	; 255
    1876:	8f 3f       	cpi	r24, 0xFF	; 255
    1878:	92 07       	cpc	r25, r18
    187a:	21 f0       	breq	.+8      	; 0x1884 <restoreRTC()+0x22>
    187c:	90 93 6a 01 	sts	0x016A, r25
    1880:	80 93 69 01 	sts	0x0169, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1884:	f9 99       	sbic	0x1f, 1	; 31
    1886:	fe cf       	rjmp	.-4      	; 0x1884 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1888:	86 e0       	ldi	r24, 0x06	; 6
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	92 bd       	out	0x22, r25	; 34
    188e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1890:	f8 9a       	sbi	0x1f, 0	; 31
    1892:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1894:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(0); }
    1896:	60 3c       	cpi	r22, 0xC0	; 192
    1898:	60 f5       	brcc	.+88     	; 0x18f2 <restoreRTC()+0x90>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    189a:	86 2f       	mov	r24, r22
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	23 e0       	ldi	r18, 0x03	; 3
    18a0:	95 95       	asr	r25
    18a2:	87 95       	ror	r24
    18a4:	2a 95       	dec	r18
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <restoreRTC()+0x3e>
    18a8:	2c e3       	ldi	r18, 0x3C	; 60
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	82 9f       	mul	r24, r18
    18ae:	a0 01       	movw	r20, r0
    18b0:	83 9f       	mul	r24, r19
    18b2:	50 0d       	add	r21, r0
    18b4:	92 9f       	mul	r25, r18
    18b6:	50 0d       	add	r21, r0
    18b8:	11 24       	eor	r1, r1
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    18ba:	86 2f       	mov	r24, r22
    18bc:	87 70       	andi	r24, 0x07	; 7
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	51 f0       	breq	.+20     	; 0x18d6 <restoreRTC()+0x74>
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	28 f0       	brcs	.+10     	; 0x18d0 <restoreRTC()+0x6e>
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	49 f0       	breq	.+18     	; 0x18dc <restoreRTC()+0x7a>
    18ca:	87 30       	cpi	r24, 0x07	; 7
    18cc:	91 f4       	brne	.+36     	; 0x18f2 <restoreRTC()+0x90>
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <restoreRTC()+0x7e>
    {
    case 0: minutesSinceMidnight += 45; break;
    18d0:	43 5d       	subi	r20, 0xD3	; 211
    18d2:	5f 4f       	sbci	r21, 0xFF	; 255
    18d4:	05 c0       	rjmp	.+10     	; 0x18e0 <restoreRTC()+0x7e>
    case 1: minutesSinceMidnight += 30; break;
    18d6:	42 5e       	subi	r20, 0xE2	; 226
    18d8:	5f 4f       	sbci	r21, 0xFF	; 255
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <restoreRTC()+0x7e>
    case 3: minutesSinceMidnight += 15; break;
    18dc:	41 5f       	subi	r20, 0xF1	; 241
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    18e0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18e2:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    18e4:	50 93 68 01 	sts	0x0168, r21
    18e8:	40 93 67 01 	sts	0x0167, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18ec:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <restoreRTC()+0x92>

  return(true);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
  }
    18f4:	1f 91       	pop	r17
    18f6:	08 95       	ret

000018f8 <persistRTC()>:
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
// TODO: extend to handle date when supported...
void persistRTC()
    18f8:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    18fa:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18fc:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    18fe:	80 91 67 01 	lds	r24, 0x0167
    1902:	90 91 68 01 	lds	r25, 0x0168
    1906:	6f e0       	ldi	r22, 0x0F	; 15
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    190e:	26 2f       	mov	r18, r22
    1910:	22 0f       	add	r18, r18
    1912:	28 7f       	andi	r18, 0xF8	; 248
    switch(quarterHours &= 3)
    1914:	63 70       	andi	r22, 0x03	; 3
    1916:	61 30       	cpi	r22, 0x01	; 1
    1918:	39 f0       	breq	.+14     	; 0x1928 <persistRTC()+0x30>
    191a:	61 30       	cpi	r22, 0x01	; 1
    191c:	18 f0       	brcs	.+6      	; 0x1924 <persistRTC()+0x2c>
    191e:	62 30       	cpi	r22, 0x02	; 2
    1920:	31 f4       	brne	.+12     	; 0x192e <persistRTC()+0x36>
    1922:	04 c0       	rjmp	.+8      	; 0x192c <persistRTC()+0x34>
      {
      case 0: targetByte |= 7; break;
    1924:	27 60       	ori	r18, 0x07	; 7
    1926:	03 c0       	rjmp	.+6      	; 0x192e <persistRTC()+0x36>
      case 1: targetByte |= 3; break;
    1928:	23 60       	ori	r18, 0x03	; 3
    192a:	01 c0       	rjmp	.+2      	; 0x192e <persistRTC()+0x36>
      case 2: targetByte |= 1; break;
    192c:	21 60       	ori	r18, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    192e:	f9 99       	sbic	0x1f, 1	; 31
    1930:	fe cf       	rjmp	.-4      	; 0x192e <persistRTC()+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1932:	86 e0       	ldi	r24, 0x06	; 6
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	92 bd       	out	0x22, r25	; 34
    1938:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    193a:	f8 9a       	sbi	0x1f, 0	; 31
    193c:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    193e:	82 17       	cp	r24, r18
    1940:	79 f1       	breq	.+94     	; 0x19a0 <persistRTC()+0xa8>
      {
      // For a new hour (ie completely different hour to that in EEPROM and on roll to new hour), do a full erase/write...
      if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
    1942:	66 23       	and	r22, r22
    1944:	19 f0       	breq	.+6      	; 0x194c <persistRTC()+0x54>
    1946:	82 27       	eor	r24, r18
    1948:	88 7f       	andi	r24, 0xF8	; 248
    194a:	71 f0       	breq	.+28     	; 0x1968 <persistRTC()+0x70>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    194c:	f9 99       	sbic	0x1f, 1	; 31
    194e:	fe cf       	rjmp	.-4      	; 0x194c <persistRTC()+0x54>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1950:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1952:	86 e0       	ldi	r24, 0x06	; 6
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	92 bd       	out	0x22, r25	; 34
    1958:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    195a:	20 bd       	out	0x20, r18	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	fa 9a       	sbi	0x1f, 2	; 31
    1962:	f9 9a       	sbi	0x1f, 1	; 31
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <persistRTC()+0x7a>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else just do a write clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    1968:	86 e0       	ldi	r24, 0x06	; 6
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	62 2f       	mov	r22, r18
    196e:	0e 94 43 04 	call	0x886	; 0x886 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    1972:	84 e0       	ldi	r24, 0x04	; 4
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	6a ef       	ldi	r22, 0xFA	; 250
    1978:	7b e0       	ldi	r23, 0x0B	; 11
    197a:	0e 94 a0 02 	call	0x540	; 0x540 <__eerd_word>

      // Also persist the current days if not up to date.
      // Could probably do this just on the 0 quarter if feeling very parsimonious,
      // but user could then lose a date-setting if power fails within an hour.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    197e:	20 91 69 01 	lds	r18, 0x0169
    1982:	30 91 6a 01 	lds	r19, 0x016A
    1986:	82 17       	cp	r24, r18
    1988:	93 07       	cpc	r25, r19
    198a:	51 f0       	breq	.+20     	; 0x19a0 <persistRTC()+0xa8>
    198c:	60 91 69 01 	lds	r22, 0x0169
    1990:	70 91 6a 01 	lds	r23, 0x016A
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	42 e0       	ldi	r20, 0x02	; 2
    199a:	5c e0       	ldi	r21, 0x0C	; 12
    199c:	0e 94 b6 02 	call	0x56c	; 0x56c <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19a0:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    19a2:	1f 91       	pop	r17
    19a4:	08 95       	ret

000019a6 <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    19a6:	1f 93       	push	r17
    19a8:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    19aa:	88 31       	cpi	r24, 0x18	; 24
    19ac:	91 05       	cpc	r25, r1
    19ae:	10 f5       	brcc	.+68     	; 0x19f4 <setHoursMinutesLT(int, int)+0x4e>
    19b0:	77 fd       	sbrc	r23, 7
    19b2:	20 c0       	rjmp	.+64     	; 0x19f4 <setHoursMinutesLT(int, int)+0x4e>
    19b4:	6c 33       	cpi	r22, 0x3C	; 60
    19b6:	71 05       	cpc	r23, r1
    19b8:	ec f4       	brge	.+58     	; 0x19f4 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    19ba:	8c e3       	ldi	r24, 0x3C	; 60
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	48 9f       	mul	r20, r24
    19c0:	90 01       	movw	r18, r0
    19c2:	49 9f       	mul	r20, r25
    19c4:	30 0d       	add	r19, r0
    19c6:	58 9f       	mul	r21, r24
    19c8:	30 0d       	add	r19, r0
    19ca:	11 24       	eor	r1, r1
    19cc:	26 0f       	add	r18, r22
    19ce:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    19d0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19d2:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    19d4:	80 91 67 01 	lds	r24, 0x0167
    19d8:	90 91 68 01 	lds	r25, 0x0168
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	31 f0       	breq	.+12     	; 0x19ee <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    19e2:	30 93 68 01 	sts	0x0168, r19
    19e6:	20 93 67 01 	sts	0x0167, r18
      persistRTC();
    19ea:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19ee:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    19f4:	80 e0       	ldi	r24, 0x00	; 0
  }
    19f6:	1f 91       	pop	r17
    19f8:	08 95       	ret

000019fa <getSimpleScheduleOn()>:
// Get the simple schedule on time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// Note that unprogrammed EEPROM value will result in invalid time, ie not set.
uint_least16_t getSimpleScheduleOn()
  {
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    19fa:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19fc:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19fe:	f9 99       	sbic	0x1f, 1	; 31
    1a00:	fe cf       	rjmp	.-4      	; 0x19fe <getSimpleScheduleOn()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a02:	88 e0       	ldi	r24, 0x08	; 8
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	92 bd       	out	0x22, r25	; 34
    1a08:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a0a:	f8 9a       	sbi	0x1f, 0	; 31
    1a0c:	20 b5       	in	r18, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a0e:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    1a10:	86 e0       	ldi	r24, 0x06	; 6
    1a12:	28 9f       	mul	r18, r24
    1a14:	90 01       	movw	r18, r0
    1a16:	11 24       	eor	r1, r1
    { startMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON); }
  return(SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM);
  }
    1a18:	c9 01       	movw	r24, r18
    1a1a:	08 95       	ret

00001a1c <getSimpleScheduleOff()>:

// Get the simple schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
uint_least16_t getSimpleScheduleOff()
  {
  uint8_t endMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1a1c:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a1e:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a20:	f9 99       	sbic	0x1f, 1	; 31
    1a22:	fe cf       	rjmp	.-4      	; 0x1a20 <getSimpleScheduleOff()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a24:	89 e0       	ldi	r24, 0x09	; 9
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	92 bd       	out	0x22, r25	; 34
    1a2a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a2c:	f8 9a       	sbi	0x1f, 0	; 31
    1a2e:	20 b5       	in	r18, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a30:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	28 9f       	mul	r18, r24
    1a36:	90 01       	movw	r18, r0
    1a38:	11 24       	eor	r1, r1
    { endMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF); }
  return(SIMPLE_SCHEDULE_GRANULARITY_MINS * endMM);
  }
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	08 95       	ret

00001a3e <isSimpleScheduleSet()>:
// Returns true if a simple schedule is set, false otherwise.
// This implementation just checks for a valid 'on' time.
bool isSimpleScheduleSet()
  {
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1a3e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a40:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a42:	f9 99       	sbic	0x1f, 1	; 31
    1a44:	fe cf       	rjmp	.-4      	; 0x1a42 <isSimpleScheduleSet()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a46:	88 e0       	ldi	r24, 0x08	; 8
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	92 bd       	out	0x22, r25	; 34
    1a4c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a4e:	f8 9a       	sbi	0x1f, 0	; 31
    1a50:	80 b5       	in	r24, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a52:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	80 3f       	cpi	r24, 0xF0	; 240
    1a58:	08 f4       	brcc	.+2      	; 0x1a5c <isSimpleScheduleSet()+0x1e>
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    { startMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON); }
  return(startMM <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT);
  }
    1a5c:	89 2f       	mov	r24, r25
    1a5e:	08 95       	ret

00001a60 <clearSimpleSchedule()>:
  }

// Clear simple schedule.
// There will be no on nor off events from the simple schedule once this is called,
// and isSimpleScheduleSet() will return false.
void clearSimpleSchedule()
    1a60:	1f 93       	push	r17
  {
  // Clear the schedule back to 'unprogrammed' values.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1a62:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a64:	f8 94       	cli
    {
    eeprom_smart_erase_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON);
    1a66:	88 e0       	ldi	r24, 0x08	; 8
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 32 04 	call	0x864	; 0x864 <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF);
    1a6e:	89 e0       	ldi	r24, 0x09	; 9
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 32 04 	call	0x864	; 0x864 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a76:	1f bf       	out	0x3f, r17	; 63
    }
  }
    1a78:	1f 91       	pop	r17
    1a7a:	08 95       	ret

00001a7c <setSimpleSchedule(unsigned int, unsigned int)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * durationMinutes  is duration in minutes in range [1,1439]
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear our the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint_least16_t durationMinutes)
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	9b 01       	movw	r18, r22
  {
  if((startMinutesSinceMidnightLT >= 1440) || (durationMinutes == 0) || (durationMinutes >= 1439)) { return(false); }
    1a86:	45 e0       	ldi	r20, 0x05	; 5
    1a88:	80 3a       	cpi	r24, 0xA0	; 160
    1a8a:	94 07       	cpc	r25, r20
    1a8c:	70 f5       	brcc	.+92     	; 0x1aea <setSimpleSchedule(unsigned int, unsigned int)+0x6e>
    1a8e:	61 15       	cp	r22, r1
    1a90:	71 05       	cpc	r23, r1
    1a92:	59 f1       	breq	.+86     	; 0x1aea <setSimpleSchedule(unsigned int, unsigned int)+0x6e>
    1a94:	45 e0       	ldi	r20, 0x05	; 5
    1a96:	6f 39       	cpi	r22, 0x9F	; 159
    1a98:	74 07       	cpc	r23, r20
    1a9a:	38 f5       	brcc	.+78     	; 0x1aea <setSimpleSchedule(unsigned int, unsigned int)+0x6e>
  
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
    1a9c:	66 e0       	ldi	r22, 0x06	; 6
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    1aa4:	06 2f       	mov	r16, r22
  const uint8_t endMM = (startMM + max(durationMinutes/SIMPLE_SCHEDULE_GRANULARITY_MINS, 1)) % (MAX_COMPRESSED_MINS_AFTER_MIDNIGHT+1);
    1aa6:	2c 30       	cpi	r18, 0x0C	; 12
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	18 f4       	brcc	.+6      	; 0x1ab2 <setSimpleSchedule(unsigned int, unsigned int)+0x36>
    1aac:	c1 e0       	ldi	r28, 0x01	; 1
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <setSimpleSchedule(unsigned int, unsigned int)+0x42>
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	66 e0       	ldi	r22, 0x06	; 6
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    1abc:	eb 01       	movw	r28, r22

  // Set the schedule.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1abe:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ac0:	f8 94       	cli
    {
    eeprom_smart_update_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON, startMM);
    1ac2:	88 e0       	ldi	r24, 0x08	; 8
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	60 2f       	mov	r22, r16
    1ac8:	0e 94 1a 04 	call	0x834	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    eeprom_smart_update_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF, endMM);
    1acc:	ce 01       	movw	r24, r28
    1ace:	80 0f       	add	r24, r16
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	60 ef       	ldi	r22, 0xF0	; 240
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    1ada:	68 2f       	mov	r22, r24
    1adc:	89 e0       	ldi	r24, 0x09	; 9
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 1a 04 	call	0x834	; 0x834 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ae4:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <setSimpleSchedule(unsigned int, unsigned int)+0x70>
    }
  return(true); // Assume EEPROM programmed OK...
    1aea:	80 e0       	ldi	r24, 0x00	; 0
  }
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	08 95       	ret

00001af6 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    1af6:	ef 92       	push	r14
    1af8:	ff 92       	push	r15
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
  {
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    1afe:	e0 90 b2 00 	lds	r14, 0x00B2
  const uint8_t s = getSecondsLT();
    1b02:	f0 90 66 01 	lds	r15, 0x0166
  const uint16_t m = getMinutesSinceMidnightLT();
    1b06:	0e 94 0f 0c 	call	0x181e	; 0x181e <getMinutesSinceMidnightLT()>
    1b0a:	bc 01       	movw	r22, r24
  Serial.print(m);
    1b0c:	04 ec       	ldi	r16, 0xC4	; 196
    1b0e:	12 e0       	ldi	r17, 0x02	; 2
    1b10:	c8 01       	movw	r24, r16
    1b12:	4a e0       	ldi	r20, 0x0A	; 10
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	0e 94 cd 1c 	call	0x399a	; 0x399a <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    1b1a:	c8 01       	movw	r24, r16
    1b1c:	6a e3       	ldi	r22, 0x3A	; 58
    1b1e:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    1b22:	c8 01       	movw	r24, r16
    1b24:	6f 2d       	mov	r22, r15
    1b26:	4a e0       	ldi	r20, 0x0A	; 10
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    1b2e:	c8 01       	movw	r24, r16
    1b30:	6a e3       	ldi	r22, 0x3A	; 58
    1b32:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    1b36:	c8 01       	movw	r24, r16
    1b38:	6e 2d       	mov	r22, r14
    1b3a:	4a e0       	ldi	r20, 0x0A	; 10
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  Serial.flush();
    1b42:	c8 01       	movw	r24, r16
    1b44:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  }
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	08 95       	ret

00001b52 <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    1b52:	80 91 6b 01 	lds	r24, 0x016B
    1b56:	90 91 6c 01 	lds	r25, 0x016C
    1b5a:	08 95       	ret

00001b5c <readTemperatureC16()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    1b64:	0e 94 74 09 	call	0x12e8	; 0x12e8 <powerUpTWIIfDisabled()>
    1b68:	08 2f       	mov	r16, r24

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    1b6a:	82 ec       	ldi	r24, 0xC2	; 194
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	68 e4       	ldi	r22, 0x48	; 72
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    1b76:	82 ec       	ldi	r24, 0xC2	; 194
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    1b80:	82 ec       	ldi	r24, 0xC2	; 194
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	61 e3       	ldi	r22, 0x31	; 49
    1b86:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    1b8a:	82 ec       	ldi	r24, 0xC2	; 194
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    1b92:	82 ec       	ldi	r24, 0xC2	; 194
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	68 e4       	ldi	r22, 0x48	; 72
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    1b9e:	82 ec       	ldi	r24, 0xC2	; 194
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1ba8:	82 ec       	ldi	r24, 0xC2	; 194
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	61 eb       	ldi	r22, 0xB1	; 177
    1bae:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    1bb2:	82 ec       	ldi	r24, 0xC2	; 194
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TwoWire::endTransmission()>
    1bba:	88 23       	and	r24, r24
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <readTemperatureC16()+0x64>
    1bbe:	4d c0       	rjmp	.+154    	; 0x1c5a <readTemperatureC16()+0xfe>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    1bc0:	82 ec       	ldi	r24, 0xC2	; 194
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	68 e4       	ldi	r22, 0x48	; 72
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    1bcc:	82 ec       	ldi	r24, 0xC2	; 194
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    1bd6:	82 ec       	ldi	r24, 0xC2	; 194
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TwoWire::endTransmission()>
    1bde:	88 23       	and	r24, r24
    1be0:	e1 f5       	brne	.+120    	; 0x1c5a <readTemperatureC16()+0xfe>
    1be2:	c8 e0       	ldi	r28, 0x08	; 8
    1be4:	d0 e0       	ldi	r29, 0x00	; 0
    1be6:	16 c0       	rjmp	.+44     	; 0x1c14 <readTemperatureC16()+0xb8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { temp16 = 0; return(0); } // Exit if error.
    1be8:	1c 16       	cp	r1, r28
    1bea:	1d 06       	cpc	r1, r29
    1bec:	b4 f5       	brge	.+108    	; 0x1c5a <readTemperatureC16()+0xfe>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { temp16 = 0; return(0); } // Exit if error.
    1bee:	82 ec       	ldi	r24, 0xC2	; 194
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	68 e4       	ldi	r22, 0x48	; 72
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <TwoWire::requestFrom(int, int)>
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	61 f5       	brne	.+88     	; 0x1c5a <readTemperatureC16()+0xfe>
    const byte b1 = Wire.read();
    1c02:	82 ec       	ldi	r24, 0xC2	; 194
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    1c0a:	87 fd       	sbrc	r24, 7
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <readTemperatureC16()+0xbc>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    1c14:	21 97       	sbiw	r28, 0x01	; 1
    1c16:	41 f7       	brne	.-48     	; 0x1be8 <readTemperatureC16()+0x8c>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    }

  // Fetch temperature.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    1c18:	82 ec       	ldi	r24, 0xC2	; 194
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	68 e4       	ldi	r22, 0x48	; 72
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    1c24:	82 ec       	ldi	r24, 0xC2	; 194
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    1c2e:	82 ec       	ldi	r24, 0xC2	; 194
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TwoWire::endTransmission()>
    1c36:	88 23       	and	r24, r24
    1c38:	81 f4       	brne	.+32     	; 0x1c5a <readTemperatureC16()+0xfe>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { temp16 = 0; return(0); }
    1c3a:	82 ec       	ldi	r24, 0xC2	; 194
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	68 e4       	ldi	r22, 0x48	; 72
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	42 e0       	ldi	r20, 0x02	; 2
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <TwoWire::requestFrom(int, int)>
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	31 f4       	brne	.+12     	; 0x1c5a <readTemperatureC16()+0xfe>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    1c4e:	82 ec       	ldi	r24, 0xC2	; 194
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TwoWire::endTransmission()>
    1c56:	88 23       	and	r24, r24
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <readTemperatureC16()+0x10c>
    1c5a:	10 92 6c 01 	sts	0x016C, r1
    1c5e:	10 92 6b 01 	sts	0x016B, r1
    1c62:	c0 e0       	ldi	r28, 0x00	; 0
    1c64:	d0 e0       	ldi	r29, 0x00	; 0
    1c66:	5f c0       	rjmp	.+190    	; 0x1d26 <readTemperatureC16()+0x1ca>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    1c68:	82 ec       	ldi	r24, 0xC2	; 194
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TwoWire::read()>
    1c70:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    1c72:	82 ec       	ldi	r24, 0xC2	; 194
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    1c7a:	17 fd       	sbrc	r17, 7
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <readTemperatureC16()+0x128>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <readTemperatureC16()+0x12c>
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 ef       	ldi	r19, 0xF0	; 240
    1c88:	c8 2f       	mov	r28, r24
    1c8a:	d0 e0       	ldi	r29, 0x00	; 0
    1c8c:	54 e0       	ldi	r21, 0x04	; 4
    1c8e:	d5 95       	asr	r29
    1c90:	c7 95       	ror	r28
    1c92:	5a 95       	dec	r21
    1c94:	e1 f7       	brne	.-8      	; 0x1c8e <readTemperatureC16()+0x132>
    1c96:	81 2f       	mov	r24, r17
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	44 e0       	ldi	r20, 0x04	; 4
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	4a 95       	dec	r20
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <readTemperatureC16()+0x140>
    1ca4:	c8 2b       	or	r28, r24
    1ca6:	d9 2b       	or	r29, r25
    1ca8:	c2 2b       	or	r28, r18
    1caa:	d3 2b       	or	r29, r19

  // Store the result for access at any time.
  temp16 = t16;
    1cac:	d0 93 6c 01 	sts	0x016C, r29
    1cb0:	c0 93 6b 01 	sts	0x016B, r28

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Temp: ");
    1cb4:	84 ec       	ldi	r24, 0xC4	; 196
    1cb6:	92 e0       	ldi	r25, 0x02	; 2
    1cb8:	65 e9       	ldi	r22, 0x95	; 149
    1cba:	71 e0       	ldi	r23, 0x01	; 1
    1cbc:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    1cc0:	84 ec       	ldi	r24, 0xC4	; 196
    1cc2:	92 e0       	ldi	r25, 0x02	; 2
    1cc4:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT(b1);
    1cc8:	84 ec       	ldi	r24, 0xC4	; 196
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	61 2f       	mov	r22, r17
    1cce:	4a e0       	ldi	r20, 0x0A	; 10
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
    1cd6:	84 ec       	ldi	r24, 0xC4	; 196
    1cd8:	92 e0       	ldi	r25, 0x02	; 2
    1cda:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    1cde:	84 ec       	ldi	r24, 0xC4	; 196
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	60 e9       	ldi	r22, 0x90	; 144
    1ce4:	71 e0       	ldi	r23, 0x01	; 1
    1ce6:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    1cea:	84 ec       	ldi	r24, 0xC4	; 196
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT(temp16);
    1cf2:	60 91 6b 01 	lds	r22, 0x016B
    1cf6:	70 91 6c 01 	lds	r23, 0x016C
    1cfa:	84 ec       	ldi	r24, 0xC4	; 196
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	4a e0       	ldi	r20, 0x0A	; 10
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
    1d06:	84 ec       	ldi	r24, 0xC4	; 196
    1d08:	92 e0       	ldi	r25, 0x02	; 2
    1d0a:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN();
    1d0e:	84 ec       	ldi	r24, 0xC4	; 196
    1d10:	92 e0       	ldi	r25, 0x02	; 2
    1d12:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    1d16:	84 ec       	ldi	r24, 0xC4	; 196
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif

  if(neededPowerUp) { powerDownTWI(); }
    1d1e:	00 23       	and	r16, r16
    1d20:	11 f0       	breq	.+4      	; 0x1d26 <readTemperatureC16()+0x1ca>
    1d22:	0e 94 6e 08 	call	0x10dc	; 0x10dc <powerDownTWI()>

  return(t16);
  }
    1d26:	ce 01       	movw	r24, r28
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <inWarmMode()>:
#include "Temperature_Sensor.h"
#include "UI_Minimal.h"

static bool isWarmMode; // Defaults to / starts at false/'frost'.
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
    1d32:	80 91 6d 01 	lds	r24, 0x016D
    1d36:	08 95       	ret

00001d38 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    1d38:	80 91 6d 01 	lds	r24, 0x016D
    1d3c:	88 23       	and	r24, r24
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <inBakeMode()+0x10>
    1d40:	80 91 79 01 	lds	r24, 0x0179
    1d44:	81 11       	cpse	r24, r1
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	08 95       	ret

00001d4a <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    1d4a:	10 92 79 01 	sts	0x0179, r1
    1d4e:	08 95       	ret

00001d50 <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
#define resetCLIActiveTimer() { CLISecondsLeft = CLIActiveS; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLISecondsLeft); }
    1d50:	80 91 02 01 	lds	r24, 0x0102
    1d54:	81 11       	cpse	r24, r1
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	08 95       	ret

00001d5a <Serial_print_space()>:
    { isWarmMode = true; }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    1d5a:	84 ec       	ldi	r24, 0xC4	; 196
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	60 e2       	ldi	r22, 0x20	; 32
    1d60:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    1d64:	08 95       	ret

00001d66 <printCLILine(char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(char syntax, __FlashStringHelper const *description)
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	18 2f       	mov	r17, r24
    1d6e:	eb 01       	movw	r28, r22
  {
  Serial_print_space();
    1d70:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  Serial.print(syntax);
    1d74:	84 ec       	ldi	r24, 0xC4	; 196
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	61 2f       	mov	r22, r17
    1d7a:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.flush();
    1d7e:	84 ec       	ldi	r24, 0xC4	; 196
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    1d86:	80 91 b2 00 	lds	r24, 0x00B2
    1d8a:	80 3e       	cpi	r24, 0xE0	; 224
    1d8c:	10 f4       	brcc	.+4      	; 0x1d92 <printCLILine(char, __FlashStringHelper const*)+0x2c>
    1d8e:	1a e0       	ldi	r17, 0x0A	; 10
    1d90:	07 c0       	rjmp	.+14     	; 0x1da0 <printCLILine(char, __FlashStringHelper const*)+0x3a>
    1d92:	84 ec       	ldi	r24, 0xC4	; 196
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    1d9a:	09 c0       	rjmp	.+18     	; 0x1dae <printCLILine(char, __FlashStringHelper const*)+0x48>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    1d9c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
    1da0:	11 50       	subi	r17, 0x01	; 1
    1da2:	e0 f7       	brcc	.-8      	; 0x1d9c <printCLILine(char, __FlashStringHelper const*)+0x36>
  Serial.println(description);
    1da4:	84 ec       	ldi	r24, 0xC4	; 196
    1da6:	92 e0       	ldi	r25, 0x02	; 2
    1da8:	be 01       	movw	r22, r28
    1daa:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
  }
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	08 95       	ret

00001db6 <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probablu should nto be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    1db6:	84 ec       	ldi	r24, 0xC4	; 196
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	69 ec       	ldi	r22, 0xC9	; 201
    1dbc:	72 e0       	ldi	r23, 0x02	; 2
    1dbe:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    1dc2:	08 95       	ret

00001dc4 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>:

#define SYNTAX_COL_WIDTH 11 // Width of 'syntax' column; strictly positive.
#define STOP_PRINTING_DESCRIPTION_AT (GSCT_MAX-(GSCT_MAX/8)) // Time into minor cycle to drop description.
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(__FlashStringHelper const *syntax, __FlashStringHelper const *description)
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	ec 01       	movw	r28, r24
    1dd0:	7b 01       	movw	r14, r22
  {
  Serial_print_space();
    1dd2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  Serial.print(syntax);
    1dd6:	84 ec       	ldi	r24, 0xC4	; 196
    1dd8:	92 e0       	ldi	r25, 0x02	; 2
    1dda:	be 01       	movw	r22, r28
    1ddc:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
  Serial.flush();
    1de0:	84 ec       	ldi	r24, 0xC4	; 196
    1de2:	92 e0       	ldi	r25, 0x02	; 2
    1de4:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    1de8:	80 91 b2 00 	lds	r24, 0x00B2
    1dec:	80 3e       	cpi	r24, 0xE0	; 224
    1dee:	28 f0       	brcs	.+10     	; 0x1dfa <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x36>
    1df0:	84 ec       	ldi	r24, 0xC4	; 196
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    1df8:	10 c0       	rjmp	.+32     	; 0x1e1a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x56>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <strlen_P>
    1e00:	1b e0       	ldi	r17, 0x0B	; 11
    1e02:	18 1b       	sub	r17, r24
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x46>
    1e06:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
    1e0a:	11 50       	subi	r17, 0x01	; 1
    1e0c:	17 ff       	sbrs	r17, 7
    1e0e:	fb cf       	rjmp	.-10     	; 0x1e06 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x42>
  Serial.println(description);
    1e10:	84 ec       	ldi	r24, 0xC4	; 196
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	b7 01       	movw	r22, r14
    1e16:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
  }
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	08 95       	ret

00001e26 <dumpCLIUsage()>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage()
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
  {
  Serial.println(F("CLI usage:"));
    1e2a:	04 ec       	ldi	r16, 0xC4	; 196
    1e2c:	12 e0       	ldi	r17, 0x02	; 2
    1e2e:	c8 01       	movw	r24, r16
    1e30:	6e eb       	ldi	r22, 0xBE	; 190
    1e32:	72 e0       	ldi	r23, 0x02	; 2
    1e34:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
  printCLILine('?', F("this help"));
    1e38:	8f e3       	ldi	r24, 0x3F	; 63
    1e3a:	64 eb       	ldi	r22, 0xB4	; 180
    1e3c:	72 e0       	ldi	r23, 0x02	; 2
    1e3e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine('B', F("Bake"));
    1e42:	82 e4       	ldi	r24, 0x42	; 66
    1e44:	6f ea       	ldi	r22, 0xAF	; 175
    1e46:	72 e0       	ldi	r23, 0x02	; 2
    1e48:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
#endif
  printCLILine('E', F("Exit CLI"));
    1e4c:	85 e4       	ldi	r24, 0x45	; 69
    1e4e:	66 ea       	ldi	r22, 0xA6	; 166
    1e50:	72 e0       	ldi	r23, 0x02	; 2
    1e52:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('F', F("Frost"));
    1e56:	86 e4       	ldi	r24, 0x46	; 70
    1e58:	60 ea       	ldi	r22, 0xA0	; 160
    1e5a:	72 e0       	ldi	r23, 0x02	; 2
    1e5c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("F CC"), F("set Frost temp CC"));
    1e60:	8b e9       	ldi	r24, 0x9B	; 155
    1e62:	92 e0       	ldi	r25, 0x02	; 2
    1e64:	69 e8       	ldi	r22, 0x89	; 137
    1e66:	72 e0       	ldi	r23, 0x02	; 2
    1e68:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
  printCLILine(F("H H1 H2"), F("set wireless FHT8V House codes 1&2"));
    1e6c:	81 e8       	ldi	r24, 0x81	; 129
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	6e e5       	ldi	r22, 0x5E	; 94
    1e72:	72 e0       	ldi	r23, 0x02	; 2
    1e74:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('L', F("Learn to warm every 24h from now, else cancel schedule if in frost mode"));
    1e78:	8c e4       	ldi	r24, 0x4C	; 76
    1e7a:	66 e1       	ldi	r22, 0x16	; 22
    1e7c:	72 e0       	ldi	r23, 0x02	; 2
    1e7e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("P HH MM LL"), F("Program: warm daily starting at HH MM for LL hours"));
    1e82:	8b e0       	ldi	r24, 0x0B	; 11
    1e84:	92 e0       	ldi	r25, 0x02	; 2
    1e86:	68 ed       	ldi	r22, 0xD8	; 216
    1e88:	71 e0       	ldi	r23, 0x01	; 1
    1e8a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('S', F("show Status"));
    1e8e:	83 e5       	ldi	r24, 0x53	; 83
    1e90:	6c ec       	ldi	r22, 0xCC	; 204
    1e92:	71 e0       	ldi	r23, 0x01	; 1
    1e94:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("T HH MM"), F("set 24h Time"));
    1e98:	84 ec       	ldi	r24, 0xC4	; 196
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	67 eb       	ldi	r22, 0xB7	; 183
    1e9e:	71 e0       	ldi	r23, 0x01	; 1
    1ea0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('W', F("Warm"));
    1ea4:	87 e5       	ldi	r24, 0x57	; 87
    1ea6:	62 eb       	ldi	r22, 0xB2	; 178
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("W CC"), F("set Warm temp CC"));
    1eae:	8d ea       	ldi	r24, 0xAD	; 173
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	6c e9       	ldi	r22, 0x9C	; 156
    1eb4:	71 e0       	ldi	r23, 0x01	; 1
    1eb6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  Serial.println();
    1eba:	c8 01       	movw	r24, r16
    1ebc:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
  }
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <handleLearnButton()>:
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now for 2h.
// May be called from pushbutton or CLI UI components.
static void handleLearnButton()
  {
  // Set simple schedule starting every 24h from now and running 120 minutes.  
  if(isWarmMode) { setSimpleSchedule(getMinutesSinceMidnightLT(), LEARNED_ON_PERIOD_M); }
    1ec6:	80 91 6d 01 	lds	r24, 0x016D
    1eca:	88 23       	and	r24, r24
    1ecc:	39 f0       	breq	.+14     	; 0x1edc <handleLearnButton()+0x16>
    1ece:	0e 94 0f 0c 	call	0x181e	; 0x181e <getMinutesSinceMidnightLT()>
    1ed2:	68 e7       	ldi	r22, 0x78	; 120
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <setSimpleSchedule(unsigned int, unsigned int)>
    1eda:	08 95       	ret
  // Clear simple schedule.
  else { clearSimpleSchedule(); }
    1edc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <clearSimpleSchedule()>
    1ee0:	08 95       	ret

00001ee2 <checkUserSchedule()>:
  return(statusChange);
  }


// Check the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    1ee6:	0e 94 0f 0c 	call	0x181e	; 0x181e <getMinutesSinceMidnightLT()>
    1eea:	ec 01       	movw	r28, r24

  // Get the simple schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
  // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
  if(msm == getSimpleScheduleOff())
    1eec:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <getSimpleScheduleOff()>
    1ef0:	c8 17       	cp	r28, r24
    1ef2:	d9 07       	cpc	r29, r25
    1ef4:	19 f4       	brne	.+6      	; 0x1efc <checkUserSchedule()+0x1a>
    { isWarmMode = false; }
    1ef6:	10 92 6d 01 	sts	0x016D, r1
    1efa:	08 c0       	rjmp	.+16     	; 0x1f0c <checkUserSchedule()+0x2a>
  else if(msm == getSimpleScheduleOn())
    1efc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <getSimpleScheduleOn()>
    1f00:	c8 17       	cp	r28, r24
    1f02:	d9 07       	cpc	r29, r25
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <checkUserSchedule()+0x2a>
    { isWarmMode = true; }
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 6d 01 	sts	0x016D, r24
  }
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <serialStatusReport()>:
The ";" terminates this current/Celsius section.
'HC' introduces the FHT8V house codes, if supported.
eg 'HC255 255'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    1f12:	ff 92       	push	r15
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    1f1c:	0e 94 a6 09 	call	0x134c	; 0x134c <powerUpSerialIfDisabled()>
    1f20:	f8 2e       	mov	r15, r24

  Serial.print('=');
    1f22:	84 ec       	ldi	r24, 0xC4	; 196
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	6d e3       	ldi	r22, 0x3D	; 61
    1f28:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(isWarmMode ? (inBakeMode() ? 'B' : 'W') : 'F');
    1f2c:	80 91 6d 01 	lds	r24, 0x016D
    1f30:	88 23       	and	r24, r24
    1f32:	11 f4       	brne	.+4      	; 0x1f38 <serialStatusReport()+0x26>
    1f34:	66 e4       	ldi	r22, 0x46	; 70
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <serialStatusReport()+0x34>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    1f38:	80 91 79 01 	lds	r24, 0x0179
    1f3c:	88 23       	and	r24, r24
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <serialStatusReport()+0x32>
    1f40:	67 e5       	ldi	r22, 0x57	; 87
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <serialStatusReport()+0x34>
    1f44:	62 e4       	ldi	r22, 0x42	; 66
  {
  const bool neededWaking = powerUpSerialIfDisabled();

  Serial.print('=');
#ifdef SUPPORT_BAKE
  Serial.print(isWarmMode ? (inBakeMode() ? 'B' : 'W') : 'F');
    1f46:	84 ec       	ldi	r24, 0xC4	; 196
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
#else
  Serial.print(isWarmMode ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target Valve position.
    1f4e:	0e 94 17 03 	call	0x62e	; 0x62e <getTRVPercentOpen()>
    1f52:	68 2f       	mov	r22, r24
    1f54:	84 ec       	ldi	r24, 0xC4	; 196
    1f56:	92 e0       	ldi	r25, 0x02	; 2
    1f58:	4a e0       	ldi	r20, 0x0A	; 10
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
    1f60:	84 ec       	ldi	r24, 0xC4	; 196
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	65 e2       	ldi	r22, 0x25	; 37
    1f66:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.print('@'); Serial.print((getTemperatureC16() + 8) >> 4); Serial.print('C'); // Round to nearest.
    1f6a:	84 ec       	ldi	r24, 0xC4	; 196
    1f6c:	92 e0       	ldi	r25, 0x02	; 2
    1f6e:	60 e4       	ldi	r22, 0x40	; 64
    1f70:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    1f74:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <getTemperatureC16()>
    1f78:	bc 01       	movw	r22, r24
    1f7a:	68 5f       	subi	r22, 0xF8	; 248
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	84 e0       	ldi	r24, 0x04	; 4
    1f80:	75 95       	asr	r23
    1f82:	67 95       	ror	r22
    1f84:	8a 95       	dec	r24
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <serialStatusReport()+0x6e>
    1f88:	84 ec       	ldi	r24, 0xC4	; 196
    1f8a:	92 e0       	ldi	r25, 0x02	; 2
    1f8c:	4a e0       	ldi	r20, 0x0A	; 10
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
    1f94:	84 ec       	ldi	r24, 0xC4	; 196
    1f96:	92 e0       	ldi	r25, 0x02	; 2
    1f98:	63 e4       	ldi	r22, 0x43	; 67
    1f9a:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.print(';'); // End of initial section.
    1f9e:	84 ec       	ldi	r24, 0xC4	; 196
    1fa0:	92 e0       	ldi	r25, 0x02	; 2
    1fa2:	6b e3       	ldi	r22, 0x3B	; 59
    1fa4:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.print('T'); Serial.print(getHoursLT()); Serial_print_space(); Serial.print(getMinutesLT());
    1fa8:	84 ec       	ldi	r24, 0xC4	; 196
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	64 e5       	ldi	r22, 0x54	; 84
    1fae:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    1fb2:	0e 94 24 0c 	call	0x1848	; 0x1848 <getHoursLT()>
    1fb6:	68 2f       	mov	r22, r24
    1fb8:	84 ec       	ldi	r24, 0xC4	; 196
    1fba:	92 e0       	ldi	r25, 0x02	; 2
    1fbc:	4a e0       	ldi	r20, 0x0A	; 10
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
    1fc4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
    1fc8:	0e 94 18 0c 	call	0x1830	; 0x1830 <getMinutesLT()>
    1fcc:	68 2f       	mov	r22, r24
    1fce:	84 ec       	ldi	r24, 0xC4	; 196
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	4a e0       	ldi	r20, 0x0A	; 10
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  Serial_print_space();
    1fda:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn();
    1fde:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <getSimpleScheduleOn()>
    1fe2:	fc 01       	movw	r30, r24
  const bool invalidStartTime = startMinutesSinceMidnightLT >= 1440;
  const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    1fe4:	85 e0       	ldi	r24, 0x05	; 5
    1fe6:	e0 3a       	cpi	r30, 0xA0	; 160
    1fe8:	f8 07       	cpc	r31, r24
    1fea:	28 f0       	brcs	.+10     	; 0x1ff6 <serialStatusReport()+0xe4>
    1fec:	c0 e0       	ldi	r28, 0x00	; 0
    1fee:	d0 e0       	ldi	r29, 0x00	; 0
    1ff0:	0f ef       	ldi	r16, 0xFF	; 255
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	0c c0       	rjmp	.+24     	; 0x200e <serialStatusReport()+0xfc>
    1ff6:	cf 01       	movw	r24, r30
    1ff8:	6c e3       	ldi	r22, 0x3C	; 60
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    2000:	8b 01       	movw	r16, r22
  const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    2002:	cf 01       	movw	r24, r30
    2004:	6c e3       	ldi	r22, 0x3C	; 60
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    200c:	ec 01       	movw	r28, r24
  Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    200e:	84 ec       	ldi	r24, 0xC4	; 196
    2010:	92 e0       	ldi	r25, 0x02	; 2
    2012:	67 e5       	ldi	r22, 0x57	; 87
    2014:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    2018:	84 ec       	ldi	r24, 0xC4	; 196
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	b8 01       	movw	r22, r16
    201e:	4a e0       	ldi	r20, 0x0A	; 10
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
    2026:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
    202a:	84 ec       	ldi	r24, 0xC4	; 196
    202c:	92 e0       	ldi	r25, 0x02	; 2
    202e:	be 01       	movw	r22, r28
    2030:	4a e0       	ldi	r20, 0x0A	; 10
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
  Serial_print_space();
    2038:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff();
    203c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <getSimpleScheduleOff()>
    2040:	fc 01       	movw	r30, r24
  const bool invalidEndTime = endMinutesSinceMidnightLT >= 1440;
  const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    2042:	85 e0       	ldi	r24, 0x05	; 5
    2044:	e0 3a       	cpi	r30, 0xA0	; 160
    2046:	f8 07       	cpc	r31, r24
    2048:	28 f0       	brcs	.+10     	; 0x2054 <serialStatusReport()+0x142>
    204a:	c0 e0       	ldi	r28, 0x00	; 0
    204c:	d0 e0       	ldi	r29, 0x00	; 0
    204e:	0f ef       	ldi	r16, 0xFF	; 255
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	0c c0       	rjmp	.+24     	; 0x206c <serialStatusReport()+0x15a>
    2054:	cf 01       	movw	r24, r30
    2056:	6c e3       	ldi	r22, 0x3C	; 60
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    205e:	8b 01       	movw	r16, r22
  const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    2060:	cf 01       	movw	r24, r30
    2062:	6c e3       	ldi	r22, 0x3C	; 60
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    206a:	ec 01       	movw	r28, r24
  Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    206c:	84 ec       	ldi	r24, 0xC4	; 196
    206e:	92 e0       	ldi	r25, 0x02	; 2
    2070:	66 e4       	ldi	r22, 0x46	; 70
    2072:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    2076:	84 ec       	ldi	r24, 0xC4	; 196
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	b8 01       	movw	r22, r16
    207c:	4a e0       	ldi	r20, 0x0A	; 10
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
    2084:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
    2088:	84 ec       	ldi	r24, 0xC4	; 196
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	be 01       	movw	r22, r28
    208e:	4a e0       	ldi	r20, 0x0A	; 10
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    2096:	84 ec       	ldi	r24, 0xC4	; 196
    2098:	92 e0       	ldi	r25, 0x02	; 2
    209a:	6b e3       	ldi	r22, 0x3B	; 59
    209c:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.print('C'); // Current Celsius target, and FROST and WARM settings.
    20a0:	84 ec       	ldi	r24, 0xC4	; 196
    20a2:	92 e0       	ldi	r25, 0x02	; 2
    20a4:	63 e4       	ldi	r22, 0x43	; 67
    20a6:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.print(getTargetTempC());
    20aa:	0e 94 1a 03 	call	0x634	; 0x634 <getTargetTempC()>
    20ae:	68 2f       	mov	r22, r24
    20b0:	84 ec       	ldi	r24, 0xC4	; 196
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	4a e0       	ldi	r20, 0x0A	; 10
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  Serial_print_space();
    20bc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    20c0:	0e 94 1d 03 	call	0x63a	; 0x63a <getFROSTTargetC()>
    20c4:	68 2f       	mov	r22, r24
    20c6:	84 ec       	ldi	r24, 0xC4	; 196
    20c8:	92 e0       	ldi	r25, 0x02	; 2
    20ca:	4a e0       	ldi	r20, 0x0A	; 10
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  Serial_print_space();
    20d2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  Serial.print(getWARMTargetC());
    20d6:	0e 94 2c 03 	call	0x658	; 0x658 <getWARMTargetC()>
    20da:	68 2f       	mov	r22, r24
    20dc:	84 ec       	ldi	r24, 0xC4	; 196
    20de:	92 e0       	ldi	r25, 0x02	; 2
    20e0:	4a e0       	ldi	r20, 0x0A	; 10
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
  Serial.print(';'); // Terminate previous section.
    20e8:	84 ec       	ldi	r24, 0xC4	; 196
    20ea:	92 e0       	ldi	r25, 0x02	; 2
    20ec:	6b e3       	ldi	r22, 0x3B	; 59
    20ee:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.print(F("HC"));
    20f2:	84 ec       	ldi	r24, 0xC4	; 196
    20f4:	92 e0       	ldi	r25, 0x02	; 2
    20f6:	6b ed       	ldi	r22, 0xDB	; 219
    20f8:	72 e0       	ldi	r23, 0x02	; 2
    20fa:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
  Serial.print(FHT8VGetHC1());
    20fe:	0e 94 35 05 	call	0xa6a	; 0xa6a <FHT8VGetHC1()>
    2102:	68 2f       	mov	r22, r24
    2104:	84 ec       	ldi	r24, 0xC4	; 196
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	4a e0       	ldi	r20, 0x0A	; 10
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  Serial_print_space();
    2110:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
  Serial.print(FHT8VGetHC2());
    2114:	0e 94 3e 05 	call	0xa7c	; 0xa7c <FHT8VGetHC2()>
    2118:	68 2f       	mov	r22, r24
    211a:	84 ec       	ldi	r24, 0xC4	; 196
    211c:	92 e0       	ldi	r25, 0x02	; 2
    211e:	4a e0       	ldi	r20, 0x0A	; 10
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
  if(!isSyncedWithFHT8V())
    2126:	0e 94 47 05 	call	0xa8e	; 0xa8e <isSyncedWithFHT8V()>
    212a:	88 23       	and	r24, r24
    212c:	39 f4       	brne	.+14     	; 0x213c <serialStatusReport()+0x22a>
    {
    Serial_print_space();
    212e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Serial_print_space()>
    Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    2132:	84 ec       	ldi	r24, 0xC4	; 196
    2134:	92 e0       	ldi	r25, 0x02	; 2
    2136:	63 e7       	ldi	r22, 0x73	; 115
    2138:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
    }
#endif
  Serial.println();
    213c:	84 ec       	ldi	r24, 0xC4	; 196
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case a sleep follows that kills the UART.
  Serial.flush();
    2144:	84 ec       	ldi	r24, 0xC4	; 196
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>

  if(neededWaking) { powerDownSerial(); }
    214c:	ff 20       	and	r15, r15
    214e:	11 f0       	breq	.+4      	; 0x2154 <serialStatusReport()+0x242>
    2150:	0e 94 8c 09 	call	0x1318	; 0x1318 <powerDownSerial()>
  }
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	ff 90       	pop	r15
    215e:	08 95       	ret

00002160 <pollCLI(int)>:
// Used to poll user side for CLI input for at most approximately the number of milliseconds specified.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
#define MAXIMUM_CLI_RESPONSE_CHARS 10 // Just enough for any valid command expected not including trailing CR.  (Note that Serial RX buffer is 64 bytes.)
void pollCLI(int timeoutms)
    2160:	9f 92       	push	r9
    2162:	af 92       	push	r10
    2164:	bf 92       	push	r11
    2166:	cf 92       	push	r12
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <pollCLI(int)+0x18>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    217e:	0e 94 a6 09 	call	0x134c	; 0x134c <powerUpSerialIfDisabled()>
    2182:	98 2e       	mov	r9, r24
    2184:	04 c0       	rjmp	.+8      	; 0x218e <pollCLI(int)+0x2e>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    2186:	84 ec       	ldi	r24, 0xC4	; 196
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <HardwareSerial::read()>
    218e:	84 ec       	ldi	r24, 0xC4	; 196
    2190:	92 e0       	ldi	r25, 0x02	; 2
    2192:	0e 94 a6 1a 	call	0x354c	; 0x354c <HardwareSerial::available()>
    2196:	18 16       	cp	r1, r24
    2198:	19 06       	cpc	r1, r25
    219a:	ac f3       	brlt	.-22     	; 0x2186 <pollCLI(int)+0x26>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  Serial.println();
    219c:	84 ec       	ldi	r24, 0xC4	; 196
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
  Serial.print(CLIPromptChar); 
    21a4:	84 ec       	ldi	r24, 0xC4	; 196
    21a6:	92 e0       	ldi	r25, 0x02	; 2
    21a8:	6e e3       	ldi	r22, 0x3E	; 62
    21aa:	0e 94 02 1c 	call	0x3804	; 0x3804 <Print::print(char)>
  Serial.flush();
    21ae:	84 ec       	ldi	r24, 0xC4	; 196
    21b0:	92 e0       	ldi	r25, 0x02	; 2
    21b2:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>

  // Wait for input from the user (received characters may already have been queued)...
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  Serial.setTimeout(timeoutms);
    21b6:	a8 01       	movw	r20, r16
    21b8:	66 27       	eor	r22, r22
    21ba:	57 fd       	sbrc	r21, 7
    21bc:	60 95       	com	r22
    21be:	76 2f       	mov	r23, r22
    21c0:	84 ec       	ldi	r24, 0xC4	; 196
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 56 1d 	call	0x3aac	; 0x3aac <Stream::setTimeout(unsigned long)>
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.
  const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
    21c8:	84 ec       	ldi	r24, 0xC4	; 196
    21ca:	92 e0       	ldi	r25, 0x02	; 2
    21cc:	6d e0       	ldi	r22, 0x0D	; 13
    21ce:	4e e6       	ldi	r20, 0x6E	; 110
    21d0:	51 e0       	ldi	r21, 0x01	; 1
    21d2:	2a e0       	ldi	r18, 0x0A	; 10
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <Stream::readBytesUntil(char, char*, unsigned int)>
    21da:	8c 01       	movw	r16, r24
  if(n > 0)
    21dc:	18 16       	cp	r1, r24
    21de:	19 06       	cpc	r1, r25
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <pollCLI(int)+0x84>
    21e2:	0c c1       	rjmp	.+536    	; 0x23fc <pollCLI(int)+0x29c>
    {
    // Keep CLI active for a while.
    resetCLIActiveTimer();
    21e4:	88 e7       	ldi	r24, 0x78	; 120
    21e6:	80 93 02 01 	sts	0x0102, r24

    // Null-terminate the command line.
    buf[n] = '\0';
    21ea:	f8 01       	movw	r30, r16
    21ec:	e2 59       	subi	r30, 0x92	; 146
    21ee:	fe 4f       	sbci	r31, 0xFE	; 254
    21f0:	10 82       	st	Z, r1

    // Force to upper-case and echo the line received.
    strupr(buf);
    21f2:	8e e6       	ldi	r24, 0x6E	; 110
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	0e 94 96 02 	call	0x52c	; 0x52c <strupr>
    Serial.println(buf);
    21fa:	84 ec       	ldi	r24, 0xC4	; 196
    21fc:	92 e0       	ldi	r25, 0x02	; 2
    21fe:	6e e6       	ldi	r22, 0x6E	; 110
    2200:	71 e0       	ldi	r23, 0x01	; 1
    2202:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <Print::println(char const*)>

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    2206:	80 91 6e 01 	lds	r24, 0x016E
    220a:	8c 34       	cpi	r24, 0x4C	; 76
    220c:	09 f4       	brne	.+2      	; 0x2210 <pollCLI(int)+0xb0>
    220e:	73 c0       	rjmp	.+230    	; 0x22f6 <pollCLI(int)+0x196>
    2210:	8d 34       	cpi	r24, 0x4D	; 77
    2212:	64 f4       	brge	.+24     	; 0x222c <pollCLI(int)+0xcc>
    2214:	85 34       	cpi	r24, 0x45	; 69
    2216:	11 f1       	breq	.+68     	; 0x225c <pollCLI(int)+0xfc>
    2218:	86 34       	cpi	r24, 0x46	; 70
    221a:	1c f4       	brge	.+6      	; 0x2222 <pollCLI(int)+0xc2>
    221c:	82 34       	cpi	r24, 0x42	; 66
    221e:	a1 f4       	brne	.+40     	; 0x2248 <pollCLI(int)+0xe8>
    2220:	16 c0       	rjmp	.+44     	; 0x224e <pollCLI(int)+0xee>
    2222:	86 34       	cpi	r24, 0x46	; 70
    2224:	f1 f0       	breq	.+60     	; 0x2262 <pollCLI(int)+0x102>
    2226:	88 34       	cpi	r24, 0x48	; 72
    2228:	79 f4       	brne	.+30     	; 0x2248 <pollCLI(int)+0xe8>
    222a:	30 c0       	rjmp	.+96     	; 0x228c <pollCLI(int)+0x12c>
    222c:	83 35       	cpi	r24, 0x53	; 83
    222e:	09 f4       	brne	.+2      	; 0x2232 <pollCLI(int)+0xd2>
    2230:	f6 c0       	rjmp	.+492    	; 0x241e <pollCLI(int)+0x2be>
    2232:	84 35       	cpi	r24, 0x54	; 84
    2234:	1c f4       	brge	.+6      	; 0x223c <pollCLI(int)+0xdc>
    2236:	80 35       	cpi	r24, 0x50	; 80
    2238:	39 f4       	brne	.+14     	; 0x2248 <pollCLI(int)+0xe8>
    223a:	60 c0       	rjmp	.+192    	; 0x22fc <pollCLI(int)+0x19c>
    223c:	84 35       	cpi	r24, 0x54	; 84
    223e:	09 f4       	brne	.+2      	; 0x2242 <pollCLI(int)+0xe2>
    2240:	a2 c0       	rjmp	.+324    	; 0x2386 <pollCLI(int)+0x226>
    2242:	87 35       	cpi	r24, 0x57	; 87
    2244:	09 f4       	brne	.+2      	; 0x2248 <pollCLI(int)+0xe8>
    2246:	c3 c0       	rjmp	.+390    	; 0x23ce <pollCLI(int)+0x26e>
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(); showStatus = false; break; }
    2248:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <dumpCLIUsage()>
    224c:	d7 c0       	rjmp	.+430    	; 0x23fc <pollCLI(int)+0x29c>
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	80 93 6d 01 	sts	0x016D, r24
    2254:	8e e1       	ldi	r24, 0x1E	; 30
    2256:	80 93 79 01 	sts	0x0179, r24
    225a:	e1 c0       	rjmp	.+450    	; 0x241e <pollCLI(int)+0x2be>
      // Switch to (or restart) BAKE mode.
      case 'B': { startBake(); break; }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLISecondsLeft = 0; break; }
    225c:	10 92 02 01 	sts	0x0102, r1
    2260:	de c0       	rjmp	.+444    	; 0x241e <pollCLI(int)+0x2be>
      case 'F':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    2262:	03 30       	cpi	r16, 0x03	; 3
    2264:	11 05       	cpc	r17, r1
    2266:	0c f4       	brge	.+2      	; 0x226a <pollCLI(int)+0x10a>
    2268:	d2 c0       	rjmp	.+420    	; 0x240e <pollCLI(int)+0x2ae>
    226a:	80 e7       	ldi	r24, 0x70	; 112
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	71 e0       	ldi	r23, 0x01	; 1
    2272:	ae 01       	movw	r20, r28
    2274:	4f 5f       	subi	r20, 0xFF	; 255
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	09 f4       	brne	.+2      	; 0x2282 <pollCLI(int)+0x122>
    2280:	c6 c0       	rjmp	.+396    	; 0x240e <pollCLI(int)+0x2ae>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    2282:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    2286:	0e 94 07 04 	call	0x80e	; 0x80e <setFROSTTargetC(unsigned char)>
    228a:	b3 c0       	rjmp	.+358    	; 0x23f2 <pollCLI(int)+0x292>
#if defined(USE_MODULE_FHT8VSIMPLE)
      // Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1 = strtok_r(buf+2, " ", &last);
    228c:	80 e7       	ldi	r24, 0x70	; 112
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	71 e0       	ldi	r23, 0x01	; 1
    2294:	8e 01       	movw	r16, r28
    2296:	0f 5f       	subi	r16, 0xFF	; 255
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	a8 01       	movw	r20, r16
    229c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    22a0:	7c 01       	movw	r14, r24
        if(NULL != tok1)
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <pollCLI(int)+0x148>
    22a6:	bb c0       	rjmp	.+374    	; 0x241e <pollCLI(int)+0x2be>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	71 e0       	ldi	r23, 0x01	; 1
    22b0:	a8 01       	movw	r20, r16
    22b2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    22b6:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	09 f4       	brne	.+2      	; 0x22be <pollCLI(int)+0x15e>
    22bc:	b0 c0       	rjmp	.+352    	; 0x241e <pollCLI(int)+0x2be>
            {
            const int hc1 = atoi(tok1);
    22be:	c7 01       	movw	r24, r14
    22c0:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
    22c4:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    22c6:	c8 01       	movw	r24, r16
    22c8:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
    22cc:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    22ce:	84 e6       	ldi	r24, 0x64	; 100
    22d0:	e8 16       	cp	r14, r24
    22d2:	f1 04       	cpc	r15, r1
    22d4:	08 f0       	brcs	.+2      	; 0x22d8 <pollCLI(int)+0x178>
    22d6:	8f c0       	rjmp	.+286    	; 0x23f6 <pollCLI(int)+0x296>
    22d8:	17 fd       	sbrc	r17, 7
    22da:	8d c0       	rjmp	.+282    	; 0x23f6 <pollCLI(int)+0x296>
    22dc:	04 36       	cpi	r16, 0x64	; 100
    22de:	11 05       	cpc	r17, r1
    22e0:	0c f0       	brlt	.+2      	; 0x22e4 <pollCLI(int)+0x184>
    22e2:	89 c0       	rjmp	.+274    	; 0x23f6 <pollCLI(int)+0x296>
            else
              {
              FHT8VSetHC1(hc1);
    22e4:	8e 2d       	mov	r24, r14
    22e6:	0e 94 09 07 	call	0xe12	; 0xe12 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    22ea:	80 2f       	mov	r24, r16
    22ec:	0e 94 03 07 	call	0xe06	; 0xe06 <FHT8VSetHC2(unsigned char)>
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
    22f0:	0e 94 4a 05 	call	0xa94	; 0xa94 <FHT8VSyncAndTXReset()>
    22f4:	94 c0       	rjmp	.+296    	; 0x241e <pollCLI(int)+0x2be>
        break;
        }
#endif

      // Learn current settings, just as if LEARN button had been pressed.
      case 'L': { handleLearnButton(); break; }
    22f6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <handleLearnButton()>
    22fa:	91 c0       	rjmp	.+290    	; 0x241e <pollCLI(int)+0x2be>

      // Program simple schedule HH MM DD.
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1 = strtok_r(buf+2, " ", &last);
    22fc:	80 e7       	ldi	r24, 0x70	; 112
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	71 e0       	ldi	r23, 0x01	; 1
    2304:	8e 01       	movw	r16, r28
    2306:	0f 5f       	subi	r16, 0xFF	; 255
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	a8 01       	movw	r20, r16
    230c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    2310:	7c 01       	movw	r14, r24
        if(NULL != tok1)
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	09 f4       	brne	.+2      	; 0x2318 <pollCLI(int)+0x1b8>
    2316:	83 c0       	rjmp	.+262    	; 0x241e <pollCLI(int)+0x2be>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	71 e0       	ldi	r23, 0x01	; 1
    2320:	a8 01       	movw	r20, r16
    2322:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    2326:	5c 01       	movw	r10, r24
          if(NULL != tok2)
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	09 f4       	brne	.+2      	; 0x232e <pollCLI(int)+0x1ce>
    232c:	78 c0       	rjmp	.+240    	; 0x241e <pollCLI(int)+0x2be>
            {
            char *tok3 = strtok_r(NULL, " ", &last);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	71 e0       	ldi	r23, 0x01	; 1
    2336:	a8 01       	movw	r20, r16
    2338:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    233c:	6c 01       	movw	r12, r24
            if(NULL != tok3)
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	09 f4       	brne	.+2      	; 0x2344 <pollCLI(int)+0x1e4>
    2342:	6d c0       	rjmp	.+218    	; 0x241e <pollCLI(int)+0x2be>
              {
                const int hh = atoi(tok1);
    2344:	c7 01       	movw	r24, r14
    2346:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
    234a:	7c 01       	movw	r14, r24
                const int mm = atoi(tok2);
    234c:	c5 01       	movw	r24, r10
    234e:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
    2352:	8c 01       	movw	r16, r24
                const int dd = atoi(tok3);
    2354:	c6 01       	movw	r24, r12
    2356:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
                // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
                if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint_least16_t) (dd * 60))) { InvalidIgnored(); }
    235a:	2c e3       	ldi	r18, 0x3C	; 60
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	e2 9e       	mul	r14, r18
    2360:	a0 01       	movw	r20, r0
    2362:	e3 9e       	mul	r14, r19
    2364:	50 0d       	add	r21, r0
    2366:	f2 9e       	mul	r15, r18
    2368:	50 0d       	add	r21, r0
    236a:	11 24       	eor	r1, r1
    236c:	82 9f       	mul	r24, r18
    236e:	b0 01       	movw	r22, r0
    2370:	83 9f       	mul	r24, r19
    2372:	70 0d       	add	r23, r0
    2374:	92 9f       	mul	r25, r18
    2376:	70 0d       	add	r23, r0
    2378:	11 24       	eor	r1, r1
    237a:	ca 01       	movw	r24, r20
    237c:	80 0f       	add	r24, r16
    237e:	91 1f       	adc	r25, r17
    2380:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <setSimpleSchedule(unsigned int, unsigned int)>
    2384:	36 c0       	rjmp	.+108    	; 0x23f2 <pollCLI(int)+0x292>

      // Time set.
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1 = strtok_r(buf+2, " ", &last);
    2386:	80 e7       	ldi	r24, 0x70	; 112
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	71 e0       	ldi	r23, 0x01	; 1
    238e:	7e 01       	movw	r14, r28
    2390:	08 94       	sec
    2392:	e1 1c       	adc	r14, r1
    2394:	f1 1c       	adc	r15, r1
    2396:	a7 01       	movw	r20, r14
    2398:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    239c:	8c 01       	movw	r16, r24
        if(NULL != tok1)
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	f1 f1       	breq	.+124    	; 0x241e <pollCLI(int)+0x2be>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	71 e0       	ldi	r23, 0x01	; 1
    23aa:	a7 01       	movw	r20, r14
    23ac:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    23b0:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	a1 f1       	breq	.+104    	; 0x241e <pollCLI(int)+0x2be>
            {
            const int hh = atoi(tok1);
    23b6:	c8 01       	movw	r24, r16
    23b8:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
    23bc:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    23be:	c7 01       	movw	r24, r14
    23c0:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
    23c4:	bc 01       	movw	r22, r24
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    23c6:	c8 01       	movw	r24, r16
    23c8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <setHoursMinutesLT(int, int)>
    23cc:	12 c0       	rjmp	.+36     	; 0x23f2 <pollCLI(int)+0x292>
      case 'W':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    23ce:	03 30       	cpi	r16, 0x03	; 3
    23d0:	11 05       	cpc	r17, r1
    23d2:	04 f1       	brlt	.+64     	; 0x2414 <pollCLI(int)+0x2b4>
    23d4:	80 e7       	ldi	r24, 0x70	; 112
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	71 e0       	ldi	r23, 0x01	; 1
    23dc:	ae 01       	movw	r20, r28
    23de:	4f 5f       	subi	r20, 0xFF	; 255
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <strtok_r>
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	a9 f0       	breq	.+42     	; 0x2414 <pollCLI(int)+0x2b4>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    23ea:	0e 94 3d 02 	call	0x47a	; 0x47a <atoi>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
    23ee:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <setWARMTargetC(unsigned char)>
    23f2:	88 23       	and	r24, r24
    23f4:	a1 f4       	brne	.+40     	; 0x241e <pollCLI(int)+0x2be>
    23f6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <InvalidIgnored()>
    23fa:	11 c0       	rjmp	.+34     	; 0x241e <pollCLI(int)+0x2be>
    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    }

  // Force any pending output before return / possible UART power-down.
  Serial.flush();
    23fc:	84 ec       	ldi	r24, 0xC4	; 196
    23fe:	92 e0       	ldi	r25, 0x02	; 2
    2400:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>

  if(neededWaking) { powerDownSerial(); }
    2404:	99 20       	and	r9, r9
    2406:	71 f0       	breq	.+28     	; 0x2424 <pollCLI(int)+0x2c4>
    2408:	0e 94 8c 09 	call	0x1318	; 0x1318 <powerDownSerial()>
    240c:	0b c0       	rjmp	.+22     	; 0x2424 <pollCLI(int)+0x2c4>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { isWarmMode = false; } // No parameter supplied; switch to FROST mode.
    240e:	10 92 6d 01 	sts	0x016D, r1
    2412:	05 c0       	rjmp	.+10     	; 0x241e <pollCLI(int)+0x2be>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          {
          isWarmMode = true; // No parameter supplied; switch to WARM mode.
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	80 93 6d 01 	sts	0x016D, r24
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    241a:	10 92 79 01 	sts	0x0179, r1
        break;
        }
      }
 
    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    241e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <serialStatusReport()>
    2422:	ec cf       	rjmp	.-40     	; 0x23fc <pollCLI(int)+0x29c>

  // Force any pending output before return / possible UART power-down.
  Serial.flush();

  if(neededWaking) { powerDownSerial(); }
  }
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	cf 90       	pop	r12
    2438:	bf 90       	pop	r11
    243a:	af 90       	pop	r10
    243c:	9f 90       	pop	r9
    243e:	08 95       	ret

00002440 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(uint_fast8_t sec)
    2440:	1f 93       	push	r17
    2442:	98 2f       	mov	r25, r24
  {
  bool statusChange = false;

  // Run down BAKE mode timer if need be, one tick per minute.
#ifdef SUPPORT_BAKE
  if((0 == sec) && (bakeCountdownM > 0)) { --bakeCountdownM; }
    2444:	88 23       	and	r24, r24
    2446:	39 f4       	brne	.+14     	; 0x2456 <tickUI(unsigned char)+0x16>
    2448:	80 91 79 01 	lds	r24, 0x0179
    244c:	88 23       	and	r24, r24
    244e:	19 f0       	breq	.+6      	; 0x2456 <tickUI(unsigned char)+0x16>
    2450:	81 50       	subi	r24, 0x01	; 1
    2452:	80 93 79 01 	sts	0x0179, r24
#endif

  // Time out CLI activation if need be, one tick per second.
  if(CLISecondsLeft != 0)
    2456:	80 91 02 01 	lds	r24, 0x0102
    245a:	88 23       	and	r24, r24
    245c:	39 f0       	breq	.+14     	; 0x246c <tickUI(unsigned char)+0x2c>
    {
    // Decrements two at a time (because routine called every two seconds) but avoids underflow.
    if((CLISecondsLeft -= 2) < 0) { CLISecondsLeft = 0; }
    245e:	82 50       	subi	r24, 0x02	; 2
    2460:	80 93 02 01 	sts	0x0102, r24
    2464:	87 ff       	sbrs	r24, 7
    2466:	02 c0       	rjmp	.+4      	; 0x246c <tickUI(unsigned char)+0x2c>
    2468:	10 92 02 01 	sts	0x0102, r1
    246c:	20 91 6d 01 	lds	r18, 0x016D
    }

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    2470:	4d 99       	sbic	0x09, 5	; 9
    2472:	16 c0       	rjmp	.+44     	; 0x24a0 <tickUI(unsigned char)+0x60>
    {
    // User has pressed button: cycle through frost | warm [ | bake ] states.
    statusChange = true;
    // Also re-activate CLI for a while.
    resetCLIActiveTimer();
    2474:	88 e7       	ldi	r24, 0x78	; 120
    2476:	80 93 02 01 	sts	0x0102, r24
    // LED on...
    fastDigitalWrite(LED_HEATCALL, HIGH);
    247a:	2d 9a       	sbi	0x05, 5	; 5
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    247c:	22 23       	and	r18, r18
    247e:	39 f4       	brne	.+14     	; 0x248e <tickUI(unsigned char)+0x4e>
      {
      isWarmMode = true;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	80 93 6d 01 	sts	0x016D, r24
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    2486:	10 92 79 01 	sts	0x0179, r1
      {
      isWarmMode = true;
#ifdef SUPPORT_BAKE
      cancelBake(); // Ensure no bake mode running.
#endif
      bigPause(); // Long flash 'heat call' to indicate now in warm mode.   
    248a:	83 e0       	ldi	r24, 0x03	; 3
    248c:	57 c0       	rjmp	.+174    	; 0x253c <tickUI(unsigned char)+0xfc>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    248e:	80 91 79 01 	lds	r24, 0x0179
    2492:	88 23       	and	r24, r24
    2494:	09 f4       	brne	.+2      	; 0x2498 <tickUI(unsigned char)+0x58>
    2496:	43 c0       	rjmp	.+134    	; 0x251e <tickUI(unsigned char)+0xde>
      tinyPause(); // V0.09 was mediumPause().
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmMode = false;
    2498:	10 92 6d 01 	sts	0x016D, r1
      mediumPause(); // Medium flash 'heat call' to indicate now in frost mode.
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	4e c0       	rjmp	.+156    	; 0x253c <tickUI(unsigned char)+0xfc>
    }
  else
    {
    // Button not pressed: quickly indicate current mode with flash(es), then optional further flash if actually calling for heat.

    if(isWarmMode) // Basically only generate any flash (and consume power) at all if in warm mode.
    24a0:	22 23       	and	r18, r18
    24a2:	99 f1       	breq	.+102    	; 0x250a <tickUI(unsigned char)+0xca>
      {
#ifdef LEARN_BUTTON_AVAILABLE
      const bool learnActive = (!(sec & 6)) && isSimpleScheduleSet(); // Do something different every 4th time.
    24a4:	96 70       	andi	r25, 0x06	; 6
    24a6:	09 f0       	breq	.+2      	; 0x24aa <tickUI(unsigned char)+0x6a>
    24a8:	4d c0       	rjmp	.+154    	; 0x2544 <tickUI(unsigned char)+0x104>
    24aa:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <isSimpleScheduleSet()>
    24ae:	88 23       	and	r24, r24
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <tickUI(unsigned char)+0x74>
    24b2:	48 c0       	rjmp	.+144    	; 0x2544 <tickUI(unsigned char)+0x104>
      if(learnActive) { pinMode(LED_HEATCALL, INPUT_PULLUP); } // Have LED dim: HIGH => weak pull-up, LOW means hi-Z.
    24b4:	8d e0       	ldi	r24, 0x0D	; 13
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
    24bc:	11 e0       	ldi	r17, 0x01	; 1
#else     
      const bool learnActive = false; // No learn/schedule.
#endif

      fastDigitalWrite(LED_HEATCALL, HIGH); // Flash 'heat call' to indicate heating mode.
    24be:	2d 9a       	sbi	0x05, 5	; 5

      // TODO: this tinyPause() could be topping up an underful entropy pool...
      tinyPause();
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>

      // Display representation of internal heat-demand value iff in warm mode to avoid confusion.
      if(getTRVPercentOpen() != 0)
    24c6:	0e 94 17 03 	call	0x62e	; 0x62e <getTRVPercentOpen()>
    24ca:	88 23       	and	r24, r24
    24cc:	c1 f0       	breq	.+48     	; 0x24fe <tickUI(unsigned char)+0xbe>
        {
        fastDigitalWrite(LED_HEATCALL, LOW);
    24ce:	2d 98       	cbi	0x05, 5	; 5
        offPause(); // V0.09 was mediumPause().
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
        fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    24d6:	2d 9a       	sbi	0x05, 5	; 5
        tinyPause();
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    24de:	80 91 6d 01 	lds	r24, 0x016D
    24e2:	88 23       	and	r24, r24
    24e4:	61 f0       	breq	.+24     	; 0x24fe <tickUI(unsigned char)+0xbe>
    24e6:	80 91 79 01 	lds	r24, 0x0179
    24ea:	88 23       	and	r24, r24
    24ec:	41 f0       	breq	.+16     	; 0x24fe <tickUI(unsigned char)+0xbe>
        tinyPause();

#ifdef SUPPORT_BAKE
        if(inBakeMode()) // Third flash if in 'bake' mode.
          {
          fastDigitalWrite(LED_HEATCALL, LOW);
    24ee:	2d 98       	cbi	0x05, 5	; 5
          offPause(); // V0.09 was mediumPause().
    24f0:	83 e0       	ldi	r24, 0x03	; 3
    24f2:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
          fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    24f6:	2d 9a       	sbi	0x05, 5	; 5
          tinyPause();
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
          }
#endif
        }

#ifdef LEARN_BUTTON_AVAILABLE
      if(learnActive) { pinMode(LED_HEATCALL, OUTPUT); } // Revert LED to full brightness subsequently.
    24fe:	11 23       	and	r17, r17
    2500:	21 f0       	breq	.+8      	; 0x250a <tickUI(unsigned char)+0xca>
    2502:	8d e0       	ldi	r24, 0x0D	; 13
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
    250a:	80 e0       	ldi	r24, 0x00	; 0
#endif
      }
    }

  // Ensure LED forced off/LOW at least once each cycle.
  fastDigitalWrite(LED_HEATCALL, LOW);
    250c:	2d 98       	cbi	0x05, 5	; 5

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    250e:	18 99       	sbic	0x03, 0	; 3
    2510:	04 c0       	rjmp	.+8      	; 0x251a <tickUI(unsigned char)+0xda>
    {
    statusChange = true;
    handleLearnButton();
    2512:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <handleLearnButton()>
    fastDigitalWrite(LED_HEATCALL, HIGH); // Leave heatcall LED on while learn button held down.
    2516:	2d 9a       	sbi	0x05, 5	; 5
    2518:	81 e0       	ldi	r24, 0x01	; 1
    }
#endif

  return(statusChange);
  }
    251a:	1f 91       	pop	r17
    251c:	08 95       	ret
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	80 93 6d 01 	sts	0x016D, r24
    2524:	8e e1       	ldi	r24, 0x1E	; 30
    2526:	80 93 79 01 	sts	0x0179, r24
      }
#ifdef SUPPORT_BAKE
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      bigPause(); // Long then tiny flash 'heat call' to indicate now in bake mode.
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
      fastDigitalWrite(LED_HEATCALL, LOW);
    2530:	2d 98       	cbi	0x05, 5	; 5
      offPause(); // V0.09 was mediumPause().
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
      fastDigitalWrite(LED_HEATCALL, HIGH);
    2538:	2d 9a       	sbi	0x05, 5	; 5
      tinyPause(); // V0.09 was mediumPause().
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	e4 cf       	rjmp	.-56     	; 0x250c <tickUI(unsigned char)+0xcc>
    2544:	10 e0       	ldi	r17, 0x00	; 0
    2546:	bb cf       	rjmp	.-138    	; 0x24be <tickUI(unsigned char)+0x7e>

00002548 <loop>:
// 'Elapsed minutes' count of minute/major cycles; cheaper than accessing RTC and not tied to real time.
static uint8_t minuteCount;

// The main control loop routine runs over and over again forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
  {
  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  const bool conserveEnergy = !inWarmMode(); // Expect to spend most time in FROST mode, so save energy then.
    2552:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <inWarmMode()>
    2556:	e8 2e       	mov	r14, r24
  bool showStatus = false; // Show status at end of loop?

  // Sleep in low-power mode (waiting for interrupts) until seconds roll.
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
  minimsePowerWithoutSleep();
    2558:	0e 94 4f 09 	call	0x129e	; 0x129e <minimsePowerWithoutSleep()>
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <loop+0x1a>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT())) { sleepUntilInt(); }
    255e:	0e 94 71 07 	call	0xee2	; 0xee2 <sleepPwrSaveWithBODDisabled()>
    2562:	90 91 66 01 	lds	r25, 0x0166
    2566:	80 91 7a 01 	lds	r24, 0x017A
    256a:	89 17       	cp	r24, r25
    256c:	c1 f3       	breq	.-16     	; 0x255e <loop+0x16>
  TIME_LSD = newTLSD;
    256e:	90 93 7a 01 	sts	0x017A, r25


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = FHT8VPollSyncAndTX_First(!conserveEnergy); // Time for extra TX before UI.
    2572:	8e 2d       	mov	r24, r14
    2574:	0e 94 ba 06 	call	0xd74	; 0xd74 <FHT8VPollSyncAndTX_First(bool)>
    2578:	f8 2e       	mov	r15, r24
  // Show status if the user changed something significant.
  // Must take ~300ms or less so as not to run over into next half second if two TXs are done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    { if(tickUI(TIME_LSD)) { showStatus = true; } }
    257a:	80 91 7a 01 	lds	r24, 0x017A
    257e:	0e 94 20 12 	call	0x2440	; 0x2440 <tickUI(unsigned char)>
    2582:	d8 2e       	mov	r13, r24


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    2584:	ff 20       	and	r15, r15
    2586:	21 f0       	breq	.+8      	; 0x2590 <loop+0x48>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = FHT8VPollSyncAndTX_Next(!conserveEnergy); 
    2588:	8e 2d       	mov	r24, r14
    258a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <FHT8VPollSyncAndTX_Next(bool)>
    258e:	f8 2e       	mov	r15, r24
  // DO SCHEDULING

  // Once-per-minute tasks: all must take << 0.3s.

  // TODO: set up prioritised task set as per PICAXE V0.09 version...
  if(0 == TIME_LSD)
    2590:	80 91 7a 01 	lds	r24, 0x017A
    2594:	88 23       	and	r24, r24
    2596:	49 f4       	brne	.+18     	; 0x25aa <loop+0x62>
    {
    // Tasks that must be run every minute.
    ++minuteCount;
    2598:	80 91 7b 01 	lds	r24, 0x017B
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	80 93 7b 01 	sts	0x017B, r24
    checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    25a2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <checkUserSchedule()>
    // Ensure that RTC is persisted promptly when needed.
    persistRTC();
    25a6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <persistRTC()>
    }

  // Run tasks spread throughout the minute
  // that can be run somewhat less often when particularly conserving energy.
  // Runs only each 4 minutes in 'conserving' mode.
  if((!conserveEnergy) || (0 == (minuteCount & 3))) // DHD20130522: Arduino IDE / gcc generates poor code here...
    25aa:	ee 20       	and	r14, r14
    25ac:	39 f4       	brne	.+14     	; 0x25bc <loop+0x74>
    25ae:	80 91 7b 01 	lds	r24, 0x017B
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	83 70       	andi	r24, 0x03	; 3
    25b6:	90 70       	andi	r25, 0x00	; 0
    25b8:	89 2b       	or	r24, r25
    25ba:	a1 f5       	brne	.+104    	; 0x2624 <loop+0xdc>
    {
    switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    25bc:	80 91 7a 01 	lds	r24, 0x017A
    25c0:	86 30       	cpi	r24, 0x06	; 6
    25c2:	a9 f0       	breq	.+42     	; 0x25ee <loop+0xa6>
    25c4:	87 30       	cpi	r24, 0x07	; 7
    25c6:	28 f4       	brcc	.+10     	; 0x25d2 <loop+0x8a>
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	59 f0       	breq	.+22     	; 0x25e2 <loop+0x9a>
    25cc:	84 30       	cpi	r24, 0x04	; 4
    25ce:	51 f5       	brne	.+84     	; 0x2624 <loop+0xdc>
    25d0:	0b c0       	rjmp	.+22     	; 0x25e8 <loop+0xa0>
    25d2:	88 30       	cpi	r24, 0x08	; 8
    25d4:	19 f0       	breq	.+6      	; 0x25dc <loop+0x94>
    25d6:	8a 30       	cpi	r24, 0x0A	; 10
    25d8:	29 f5       	brne	.+74     	; 0x2624 <loop+0xdc>
    25da:	17 c0       	rjmp	.+46     	; 0x260a <loop+0xc2>
    25dc:	dd 24       	eor	r13, r13
    25de:	d3 94       	inc	r13
    25e0:	21 c0       	rjmp	.+66     	; 0x2624 <loop+0xdc>
      {
      // Read all environmental inputs.
      case 2: { readAmbientLight(); break; }
    25e2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <readAmbientLight()>
    25e6:	1e c0       	rjmp	.+60     	; 0x2624 <loop+0xdc>
      case 4: { readTemperatureC16(); break; }
    25e8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <readTemperatureC16()>
    25ec:	1b c0       	rjmp	.+54     	; 0x2624 <loop+0xdc>

      // Compute targets and heat demand based on environmental inputs.
      case 6:
        {
        if(computeTargetAndDemand())
    25ee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <computeTargetAndDemand()>
    25f2:	88 23       	and	r24, r24
    25f4:	11 f0       	breq	.+4      	; 0x25fa <loop+0xb2>
          {
#if defined(USE_MODULE_FHT8VSIMPLE)
          // Recompute FHT8V command to send if target valve setting has changed...
          FHT8VCreateValveSetCmdFrame();
    25f6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <FHT8VCreateValveSetCmdFrame()>
#if 0 && defined(BOILER_HUB)
        if boilerCountdownS != 0 then ; Remote calls for heat are still active.
            high OUT_HEATCALL
        else
#endif
          if(0 != getTRVPercentOpen()) // Local call for heat given local TRV is at least partly open/on.  (TODO: modulating!)
    25fa:	0e 94 17 03 	call	0x62e	; 0x62e <getTRVPercentOpen()>
    25fe:	88 23       	and	r24, r24
    2600:	11 f0       	breq	.+4      	; 0x2606 <loop+0xbe>
            { fastDigitalWrite(OUT_HEATCALL, HIGH); }
    2602:	5e 9a       	sbi	0x0b, 6	; 11
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <loop+0xdc>
          else // Stop calling for heat from the boiler.
            { fastDigitalWrite(OUT_HEATCALL, LOW); }
    2606:	5e 98       	cbi	0x0b, 6	; 11
    2608:	0d c0       	rjmp	.+26     	; 0x2624 <loop+0xdc>
        }

      // Trailing less-critical/housekeeping tasks.
      case 8: { showStatus = true; break; }
      // Churn/reseed PRNG(s) a little to improve unpredictability when actually used.
      case 10: { seedRNG8(minuteCount ^ cycleCountCPU(), getSubCycleTime(), (uint8_t)getTemperatureC16()); break; }
    260a:	16 b5       	in	r17, 0x26	; 38
    260c:	80 91 7b 01 	lds	r24, 0x017B
    2610:	18 27       	eor	r17, r24
    2612:	00 91 b2 00 	lds	r16, 0x00B2
    2616:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <getTemperatureC16()>
    261a:	48 2f       	mov	r20, r24
    261c:	81 2f       	mov	r24, r17
    261e:	60 2f       	mov	r22, r16
    2620:	0e 94 3d 0a 	call	0x147a	; 0x147a <seedRNG8(unsigned char, unsigned char, unsigned char)>
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    2624:	ff 20       	and	r15, r15
    2626:	21 f0       	breq	.+8      	; 0x2630 <loop+0xe8>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = FHT8VPollSyncAndTX_Next(!conserveEnergy); 
    2628:	8e 2d       	mov	r24, r14
    262a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <FHT8VPollSyncAndTX_Next(bool)>
    262e:	f8 2e       	mov	r15, r24
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    2630:	dd 20       	and	r13, r13
    2632:	11 f0       	breq	.+4      	; 0x2638 <loop+0xf0>
    2634:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    2638:	ff 20       	and	r15, r15
    263a:	19 f0       	breq	.+6      	; 0x2642 <loop+0xfa>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = FHT8VPollSyncAndTX_Next(!conserveEnergy); 
    263c:	8e 2d       	mov	r24, r14
    263e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <FHT8VPollSyncAndTX_Next(bool)>
  // then poll/prompt the user for input here
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
  // TODO: be clever and if getSubCycleTime() has gone backwards then assume end tick has been missed and return from loop() without sleeping.
#if defined(SUPPORT_CLI)
  if(isCLIActive() && (getSubCycleTime() < (GSCT_MAX-(GSCT_MAX/8))))
    2642:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <isCLIActive()>
    2646:	88 23       	and	r24, r24
    2648:	b1 f0       	breq	.+44     	; 0x2676 <loop+0x12e>
    264a:	80 91 b2 00 	lds	r24, 0x00B2
    264e:	80 3e       	cpi	r24, 0xE0	; 224
    2650:	90 f4       	brcc	.+36     	; 0x2676 <loop+0x12e>
    { pollCLI(msRemainingThisBasicCycle() / 2); }
    2652:	80 91 b2 00 	lds	r24, 0x00B2
    2656:	2f ef       	ldi	r18, 0xFF	; 255
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	28 1b       	sub	r18, r24
    265c:	31 09       	sbc	r19, r1
    265e:	c9 01       	movw	r24, r18
    2660:	43 e0       	ldi	r20, 0x03	; 3
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	4a 95       	dec	r20
    2668:	e1 f7       	brne	.-8      	; 0x2662 <loop+0x11a>
    266a:	82 1b       	sub	r24, r18
    266c:	93 0b       	sbc	r25, r19
    266e:	95 95       	asr	r25
    2670:	87 95       	ror	r24
    2672:	0e 94 b0 10 	call	0x2160	; 0x2160 <pollCLI(int)>
    DEBUG_SERIAL_PRINT_FLASHSTRING(" @ ");
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINTLN();
    }
#endif
  }
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	df 90       	pop	r13
    2680:	08 95       	ret

00002682 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    2682:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimsePowerWithoutSleep();
    2686:	0e 94 4f 09 	call	0x129e	; 0x129e <minimsePowerWithoutSleep()>
  pinMode(LED_HEATCALL, OUTPUT);
    268a:	8d e0       	ldi	r24, 0x0D	; 13
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  for( ; ; )
    {
    fastDigitalWrite(LED_HEATCALL, HIGH);
    2692:	2d 9a       	sbi	0x05, 5	; 5
    tinyPause();
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
    fastDigitalWrite(LED_HEATCALL, LOW);
    269a:	2d 98       	cbi	0x05, 5	; 5
    bigPause();
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	0e 94 85 07 	call	0xf0a	; 0xf0a <nap(signed char)>
    26a2:	f7 cf       	rjmp	.-18     	; 0x2692 <panic()+0x10>

000026a4 <setup>:
  return(result);
  }

// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    26a4:	6f 92       	push	r6
    26a6:	7f 92       	push	r7
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    26c0:	0e 94 19 0a 	call	0x1432	; 0x1432 <powerSetup()>

  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    26c4:	10 91 b2 00 	lds	r17, 0x00B2
    26c8:	ce e0       	ldi	r28, 0x0E	; 14
    26ca:	d0 e0       	ldi	r29, 0x00	; 0
    26cc:	30 c0       	rjmp	.+96     	; 0x272e <setup+0x8a>
  {
  // Initialise all digitial I/O to safe state ASAP and avoid floating.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    26ce:	c8 30       	cpi	r28, 0x08	; 8
    26d0:	d1 05       	cpc	r29, r1
    26d2:	29 f1       	breq	.+74     	; 0x271e <setup+0x7a>
    26d4:	c9 30       	cpi	r28, 0x09	; 9
    26d6:	d1 05       	cpc	r29, r1
    26d8:	4c f4       	brge	.+18     	; 0x26ec <setup+0x48>
    26da:	d7 fd       	sbrc	r29, 7
    26dc:	10 c0       	rjmp	.+32     	; 0x26fe <setup+0x5a>
    26de:	c2 30       	cpi	r28, 0x02	; 2
    26e0:	d1 05       	cpc	r29, r1
    26e2:	ec f0       	brlt	.+58     	; 0x271e <setup+0x7a>
    26e4:	c5 30       	cpi	r28, 0x05	; 5
    26e6:	d1 05       	cpc	r29, r1
    26e8:	51 f4       	brne	.+20     	; 0x26fe <setup+0x5a>
    26ea:	19 c0       	rjmp	.+50     	; 0x271e <setup+0x7a>
    26ec:	cc 30       	cpi	r28, 0x0C	; 12
    26ee:	d1 05       	cpc	r29, r1
    26f0:	d1 f0       	breq	.+52     	; 0x2726 <setup+0x82>
    26f2:	cd 30       	cpi	r28, 0x0D	; 13
    26f4:	d1 05       	cpc	r29, r1
    26f6:	51 f0       	breq	.+20     	; 0x270c <setup+0x68>
    26f8:	ca 30       	cpi	r28, 0x0A	; 10
    26fa:	d1 05       	cpc	r29, r1
    26fc:	91 f0       	breq	.+36     	; 0x2722 <setup+0x7e>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    26fe:	8c 2f       	mov	r24, r28
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <digitalWrite>
    2706:	8c 2f       	mov	r24, r28
    2708:	61 e0       	ldi	r22, 0x01	; 1
    270a:	0f c0       	rjmp	.+30     	; 0x272a <setup+0x86>
      // Weak pull-up empirically found to be lowest leakage current with TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX: { pinMode(i, INPUT_PULLUP); break; }
#endif

      // Switch main UI LED on for the rest of initialisation...
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
    270c:	8d e0       	ldi	r24, 0x0D	; 13
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
    2714:	8d e0       	ldi	r24, 0x0D	; 13
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <digitalWrite>
    271c:	08 c0       	rjmp	.+16     	; 0x272e <setup+0x8a>

      // Make button pins inputs with internal weak pull-ups (saving an external resistor on each case).
#ifdef BUTTON_LEARN_L
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    271e:	8c 2f       	mov	r24, r28
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <setup+0x84>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    2722:	8a e0       	ldi	r24, 0x0A	; 10
    2724:	01 c0       	rjmp	.+2      	; 0x2728 <setup+0x84>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    2726:	8c e0       	ldi	r24, 0x0C	; 12
    2728:	62 e0       	ldi	r22, 0x02	; 2
    272a:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
inline void IOSetup()
  {
  // Initialise all digitial I/O to safe state ASAP and avoid floating.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    272e:	21 97       	sbiw	r28, 0x01	; 1
    2730:	d7 ff       	sbrs	r29, 7
    2732:	cd cf       	rjmp	.-102    	; 0x26ce <setup+0x2a>

  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    2734:	0e 94 31 0c 	call	0x1862	; 0x1862 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

#ifdef DEBUG
  // If debugging, (re)enable USART and enable Serial subsystem.
  power_usart0_enable();
    2738:	80 91 64 00 	lds	r24, 0x0064
    273c:	8d 7f       	andi	r24, 0xFD	; 253
    273e:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD);
    2742:	84 ec       	ldi	r24, 0xC4	; 196
    2744:	92 e0       	ldi	r25, 0x02	; 2
    2746:	40 ec       	ldi	r20, 0xC0	; 192
    2748:	52 e1       	ldi	r21, 0x12	; 18
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	0e 94 c2 19 	call	0x3384	; 0x3384 <HardwareSerial::begin(unsigned long)>
  DEBUG_SERIAL_PRINTLN();
    2752:	84 ec       	ldi	r24, 0xC4	; 196
    2754:	92 e0       	ldi	r25, 0x02	; 2
    2756:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    275a:	84 ec       	ldi	r24, 0xC4	; 196
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging...");
    2762:	84 ec       	ldi	r24, 0xC4	; 196
    2764:	92 e0       	ldi	r25, 0x02	; 2
    2766:	6c e9       	ldi	r22, 0x9C	; 156
    2768:	73 e0       	ldi	r23, 0x03	; 3
    276a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    276e:	84 ec       	ldi	r24, 0xC4	; 196
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif
#endif

#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    2776:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    277a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <RFM22CheckConnected()>
    277e:	88 23       	and	r24, r24
    2780:	11 f4       	brne	.+4      	; 0x2786 <setup+0xe2>
    2782:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    2786:	88 e7       	ldi	r24, 0x78	; 120
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 b7 0a 	call	0x156e	; 0x156e <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    278e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <RFM22ModeStandbyAndClearState()>
  // Do additional POST.
  optionalPOST();
#endif

  // Get current power supply voltage.
  const uint16_t Vcc = powerSupplyVoltage();
    2792:	0e 94 37 08 	call	0x106e	; 0x106e <powerSupplyVoltage()>
    2796:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    2798:	84 ec       	ldi	r24, 0xC4	; 196
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	66 e9       	ldi	r22, 0x96	; 150
    279e:	73 e0       	ldi	r23, 0x03	; 3
    27a0:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    27a4:	84 ec       	ldi	r24, 0xC4	; 196
    27a6:	92 e0       	ldi	r25, 0x02	; 2
    27a8:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT(Vcc);
    27ac:	84 ec       	ldi	r24, 0xC4	; 196
    27ae:	92 e0       	ldi	r25, 0x02	; 2
    27b0:	b3 01       	movw	r22, r6
    27b2:	4a e0       	ldi	r20, 0x0A	; 10
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	0e 94 cd 1c 	call	0x399a	; 0x399a <Print::print(unsigned int, int)>
    27ba:	84 ec       	ldi	r24, 0xC4	; 196
    27bc:	92 e0       	ldi	r25, 0x02	; 2
    27be:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    27c2:	84 ec       	ldi	r24, 0xC4	; 196
    27c4:	92 e0       	ldi	r25, 0x02	; 2
    27c6:	63 e9       	ldi	r22, 0x93	; 147
    27c8:	73 e0       	ldi	r23, 0x03	; 3
    27ca:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    27ce:	84 ec       	ldi	r24, 0xC4	; 196
    27d0:	92 e0       	ldi	r25, 0x02	; 2
    27d2:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif

  // Get internal temperature measurement.
  const int intTempC = internalTemperatureC();
    27d6:	0e 94 4b 08 	call	0x1096	; 0x1096 <internalTemperatureC()>
    27da:	4c 01       	movw	r8, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    27dc:	84 ec       	ldi	r24, 0xC4	; 196
    27de:	92 e0       	ldi	r25, 0x02	; 2
    27e0:	68 e8       	ldi	r22, 0x88	; 136
    27e2:	73 e0       	ldi	r23, 0x03	; 3
    27e4:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    27e8:	84 ec       	ldi	r24, 0xC4	; 196
    27ea:	92 e0       	ldi	r25, 0x02	; 2
    27ec:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT(intTempC);
    27f0:	84 ec       	ldi	r24, 0xC4	; 196
    27f2:	92 e0       	ldi	r25, 0x02	; 2
    27f4:	b4 01       	movw	r22, r8
    27f6:	4a e0       	ldi	r20, 0x0A	; 10
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Print::print(int, int)>
    27fe:	84 ec       	ldi	r24, 0xC4	; 196
    2800:	92 e0       	ldi	r25, 0x02	; 2
    2802:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("C");
    2806:	84 ec       	ldi	r24, 0xC4	; 196
    2808:	92 e0       	ldi	r25, 0x02	; 2
    280a:	66 e8       	ldi	r22, 0x86	; 134
    280c:	73 e0       	ldi	r23, 0x03	; 3
    280e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    2812:	84 ec       	ldi	r24, 0xC4	; 196
    2814:	92 e0       	ldi	r25, 0x02	; 2
    2816:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
    281a:	84 ec       	ldi	r24, 0xC4	; 196
    281c:	92 e0       	ldi	r25, 0x02	; 2
    281e:	6e e4       	ldi	r22, 0x4E	; 78
    2820:	73 e0       	ldi	r23, 0x03	; 3
    2822:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    2826:	84 ec       	ldi	r24, 0xC4	; 196
    2828:	92 e0       	ldi	r25, 0x02	; 2
    282a:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif
  // Collect full set of environmental values before entering loop().
  // This should also help ensure that sensors are properly initialised.
  const int heat = readTemperatureC16();
    282e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <readTemperatureC16()>
    2832:	5c 01       	movw	r10, r24
  const int light = readAmbientLight();
    2834:	0e 94 d6 02 	call	0x5ac	; 0x5ac <readAmbientLight()>
    2838:	ec 01       	movw	r28, r24
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeTargetAndDemand();
    283a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <computeTargetAndDemand()>
#if defined(USE_MODULE_FHT8VSIMPLE)
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored.
  FHT8VCreateValveSetCmdFrame();
    283e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <FHT8VCreateValveSetCmdFrame()>
    2842:	e0 e0       	ldi	r30, 0x00	; 0
    2844:	f1 e0       	ldi	r31, 0x01	; 1
    2846:	cc 24       	eor	r12, r12
    2848:	ca 94       	dec	r12
    284a:	dc 2c       	mov	r13, r12
    284c:	81 91       	ld	r24, Z+
    284e:	96 01       	movw	r18, r12
    2850:	28 27       	eor	r18, r24
    2852:	02 2e       	mov	r0, r18
    2854:	22 95       	swap	r18
    2856:	20 7f       	andi	r18, 0xF0	; 240
    2858:	20 25       	eor	r18, r0
    285a:	03 2e       	mov	r0, r19
    285c:	32 2f       	mov	r19, r18
    285e:	22 95       	swap	r18
    2860:	2f 70       	andi	r18, 0x0F	; 15
    2862:	02 26       	eor	r0, r18
    2864:	26 95       	lsr	r18
    2866:	32 27       	eor	r19, r18
    2868:	23 27       	eor	r18, r19
    286a:	22 0f       	add	r18, r18
    286c:	22 0f       	add	r18, r18
    286e:	22 0f       	add	r18, r18
    2870:	20 25       	eor	r18, r0
    2872:	69 01       	movw	r12, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    2874:	39 e0       	ldi	r19, 0x09	; 9
    2876:	e0 30       	cpi	r30, 0x00	; 0
    2878:	f3 07       	cpc	r31, r19
    287a:	41 f7       	brne	.-48     	; 0x284c <setup+0x1a8>
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	ee 24       	eor	r14, r14
    2882:	ea 94       	dec	r14
    2884:	fe 2c       	mov	r15, r14
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2886:	f9 99       	sbic	0x1f, 1	; 31
    2888:	fe cf       	rjmp	.-4      	; 0x2886 <setup+0x1e2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    288a:	32 bd       	out	0x22, r19	; 34
    288c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    288e:	f8 9a       	sbi	0x1f, 0	; 31
    2890:	80 b5       	in	r24, 0x20	; 32
    2892:	a7 01       	movw	r20, r14
    2894:	48 27       	eor	r20, r24
    2896:	04 2e       	mov	r0, r20
    2898:	42 95       	swap	r20
    289a:	40 7f       	andi	r20, 0xF0	; 240
    289c:	40 25       	eor	r20, r0
    289e:	05 2e       	mov	r0, r21
    28a0:	54 2f       	mov	r21, r20
    28a2:	42 95       	swap	r20
    28a4:	4f 70       	andi	r20, 0x0F	; 15
    28a6:	04 26       	eor	r0, r20
    28a8:	46 95       	lsr	r20
    28aa:	54 27       	eor	r21, r20
    28ac:	45 27       	eor	r20, r21
    28ae:	44 0f       	add	r20, r20
    28b0:	44 0f       	add	r20, r20
    28b2:	44 0f       	add	r20, r20
    28b4:	40 25       	eor	r20, r0
    28b6:	7a 01       	movw	r14, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    28b8:	2f 5f       	subi	r18, 0xFF	; 255
    28ba:	3f 4f       	sbci	r19, 0xFF	; 255
    28bc:	54 e0       	ldi	r21, 0x04	; 4
    28be:	20 30       	cpi	r18, 0x00	; 0
    28c0:	35 07       	cpc	r19, r21
    28c2:	09 f7       	brne	.-62     	; 0x2886 <setup+0x1e2>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Starting seed computation...");
#endif
  const uint16_t srseed = sramCRC();
  const uint16_t eeseed = eeCRC();
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    28c4:	80 91 b2 00 	lds	r24, 0x00B2
  if(laterSCT == earlySCT)
    28c8:	81 17       	cp	r24, r17
    28ca:	f1 f4       	brne	.+60     	; 0x2908 <setup+0x264>
    {
#if 1 && defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    28cc:	84 ec       	ldi	r24, 0xC4	; 196
    28ce:	92 e0       	ldi	r25, 0x02	; 2
    28d0:	61 e2       	ldi	r22, 0x21	; 33
    28d2:	73 e0       	ldi	r23, 0x03	; 3
    28d4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    28d8:	84 ec       	ldi	r24, 0xC4	; 196
    28da:	92 e0       	ldi	r25, 0x02	; 2
    28dc:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif
    sleepLowPowerMs(1500); // Should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    28e0:	85 ec       	ldi	r24, 0xC5	; 197
    28e2:	9d e2       	ldi	r25, 0x2D	; 45
    28e4:	0e 94 56 07 	call	0xeac	; 0xeac <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    28e8:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    28ec:	81 17       	cp	r24, r17
    28ee:	61 f4       	brne	.+24     	; 0x2908 <setup+0x264>
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    28f0:	84 ec       	ldi	r24, 0xC4	; 196
    28f2:	92 e0       	ldi	r25, 0x02	; 2
    28f4:	69 ef       	ldi	r22, 0xF9	; 249
    28f6:	72 e0       	ldi	r23, 0x02	; 2
    28f8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <Print::println(__FlashStringHelper const*)>
    28fc:	84 ec       	ldi	r24, 0xC4	; 196
    28fe:	92 e0       	ldi	r25, 0x02	; 2
    2900:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif
      panic(); // Async clock not running.
    2904:	0e 94 41 13 	call	0x2682	; 0x2682 <panic()>
      }
    }
  // DHD20130430: maybe as much as 16 bits of entropy on each reset in seed1, concentrated in the least-significant bits.
  const uint16_t s16 = ((getMinutesSinceMidnightLT() << 5) ^ (((int)getSubCycleTime()) << 7) ^ heat ^ (light << 6) ^ Vcc ^ intTempC); /* This fits in an int (16 bits). */
    2908:	0e 94 0f 0c 	call	0x181e	; 0x181e <getMinutesSinceMidnightLT()>
    290c:	00 91 b2 00 	lds	r16, 0x00B2
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	16 95       	lsr	r17
    2914:	10 2f       	mov	r17, r16
    2916:	00 27       	eor	r16, r16
    2918:	17 95       	ror	r17
    291a:	07 95       	ror	r16
    291c:	06 25       	eor	r16, r6
    291e:	17 25       	eor	r17, r7
    2920:	0a 25       	eor	r16, r10
    2922:	1b 25       	eor	r17, r11
    2924:	08 25       	eor	r16, r8
    2926:	19 25       	eor	r17, r9
    2928:	76 e0       	ldi	r23, 0x06	; 6
    292a:	cc 0f       	add	r28, r28
    292c:	dd 1f       	adc	r29, r29
    292e:	7a 95       	dec	r23
    2930:	e1 f7       	brne	.-8      	; 0x292a <setup+0x286>
    2932:	0c 27       	eor	r16, r28
    2934:	1d 27       	eor	r17, r29
    2936:	65 e0       	ldi	r22, 0x05	; 5
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	6a 95       	dec	r22
    293e:	e1 f7       	brne	.-8      	; 0x2938 <setup+0x294>
    2940:	08 27       	eor	r16, r24
    2942:	19 27       	eor	r17, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  seedRNG8((uint8_t) s16, (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    2944:	0e 94 79 08 	call	0x10f2	; 0x10f2 <clockJitterWDT()>
    2948:	98 01       	movw	r18, r16
    294a:	2e 0d       	add	r18, r14
    294c:	3f 1d       	adc	r19, r15
    294e:	48 2f       	mov	r20, r24
    2950:	4c 25       	eor	r20, r12
    2952:	80 2f       	mov	r24, r16
    2954:	63 2f       	mov	r22, r19
    2956:	0e 94 3d 0a 	call	0x147a	; 0x147a <seedRNG8(unsigned char, unsigned char, unsigned char)>
  // Capture a few bits of this seed over a reset by picking one of the two designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (1&((s16) ^ (eeseed>>8)))); // Use some new and some eeseed bits to choose byte to updated.
    295a:	8f 2d       	mov	r24, r15
    295c:	99 27       	eor	r25, r25
    295e:	80 27       	eor	r24, r16
    2960:	91 27       	eor	r25, r17
    2962:	81 70       	andi	r24, 0x01	; 1
    2964:	90 70       	andi	r25, 0x00	; 0
    2966:	02 96       	adiw	r24, 0x02	; 2
    2968:	8c 01       	movw	r16, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    296a:	f9 99       	sbic	0x1f, 1	; 31
    296c:	fe cf       	rjmp	.-4      	; 0x296a <setup+0x2c6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    296e:	92 bd       	out	0x22, r25	; 34
    2970:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2972:	f8 9a       	sbi	0x1f, 0	; 31
    2974:	b0 b4       	in	r11, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    2976:	bb 20       	and	r11, r11
    2978:	21 f4       	brne	.+8      	; 0x2982 <setup+0x2de>
    297a:	c8 01       	movw	r24, r16
    297c:	0e 94 32 04 	call	0x864	; 0x864 <eeprom_smart_erase_byte(unsigned char*)>
    2980:	07 c0       	rjmp	.+14     	; 0x2990 <setup+0x2ec>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() ^ ((uint8_t)eeseed)); } // Include disjoint set of eeseed bits in choice of which to clear.
    2982:	0e 94 94 08 	call	0x1128	; 0x1128 <clockJitterEntropyByte()>
    2986:	68 2f       	mov	r22, r24
    2988:	6e 25       	eor	r22, r14
    298a:	c8 01       	movw	r24, r16
    298c:	0e 94 43 04 	call	0x886	; 0x886 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("srseed ");
    2990:	84 ec       	ldi	r24, 0xC4	; 196
    2992:	92 e0       	ldi	r25, 0x02	; 2
    2994:	61 ef       	ldi	r22, 0xF1	; 241
    2996:	72 e0       	ldi	r23, 0x02	; 2
    2998:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    299c:	84 ec       	ldi	r24, 0xC4	; 196
    299e:	92 e0       	ldi	r25, 0x02	; 2
    29a0:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTFMT(srseed, BIN);
    29a4:	84 ec       	ldi	r24, 0xC4	; 196
    29a6:	92 e0       	ldi	r25, 0x02	; 2
    29a8:	b6 01       	movw	r22, r12
    29aa:	42 e0       	ldi	r20, 0x02	; 2
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	0e 94 cd 1c 	call	0x399a	; 0x399a <Print::print(unsigned int, int)>
    29b2:	84 ec       	ldi	r24, 0xC4	; 196
    29b4:	92 e0       	ldi	r25, 0x02	; 2
    29b6:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN();
    29ba:	84 ec       	ldi	r24, 0xC4	; 196
    29bc:	92 e0       	ldi	r25, 0x02	; 2
    29be:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    29c2:	84 ec       	ldi	r24, 0xC4	; 196
    29c4:	92 e0       	ldi	r25, 0x02	; 2
    29c6:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("eeseed ");
    29ca:	84 ec       	ldi	r24, 0xC4	; 196
    29cc:	92 e0       	ldi	r25, 0x02	; 2
    29ce:	69 ee       	ldi	r22, 0xE9	; 233
    29d0:	72 e0       	ldi	r23, 0x02	; 2
    29d2:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    29d6:	84 ec       	ldi	r24, 0xC4	; 196
    29d8:	92 e0       	ldi	r25, 0x02	; 2
    29da:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTFMT(eeseed, BIN);
    29de:	84 ec       	ldi	r24, 0xC4	; 196
    29e0:	92 e0       	ldi	r25, 0x02	; 2
    29e2:	b7 01       	movw	r22, r14
    29e4:	42 e0       	ldi	r20, 0x02	; 2
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	0e 94 cd 1c 	call	0x399a	; 0x399a <Print::print(unsigned int, int)>
    29ec:	84 ec       	ldi	r24, 0xC4	; 196
    29ee:	92 e0       	ldi	r25, 0x02	; 2
    29f0:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN();
    29f4:	84 ec       	ldi	r24, 0xC4	; 196
    29f6:	92 e0       	ldi	r25, 0x02	; 2
    29f8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    29fc:	84 ec       	ldi	r24, 0xC4	; 196
    29fe:	92 e0       	ldi	r25, 0x02	; 2
    2a00:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("RNG8 ");
    2a04:	84 ec       	ldi	r24, 0xC4	; 196
    2a06:	92 e0       	ldi	r25, 0x02	; 2
    2a08:	63 ee       	ldi	r22, 0xE3	; 227
    2a0a:	72 e0       	ldi	r23, 0x02	; 2
    2a0c:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    2a10:	84 ec       	ldi	r24, 0xC4	; 196
    2a12:	92 e0       	ldi	r25, 0x02	; 2
    2a14:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTFMT(randRNG8(), BIN);
    2a18:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <randRNG8()>
    2a1c:	68 2f       	mov	r22, r24
    2a1e:	84 ec       	ldi	r24, 0xC4	; 196
    2a20:	92 e0       	ldi	r25, 0x02	; 2
    2a22:	42 e0       	ldi	r20, 0x02	; 2
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
    2a2a:	84 ec       	ldi	r24, 0xC4	; 196
    2a2c:	92 e0       	ldi	r25, 0x02	; 2
    2a2e:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN();
    2a32:	84 ec       	ldi	r24, 0xC4	; 196
    2a34:	92 e0       	ldi	r25, 0x02	; 2
    2a36:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    2a3a:	84 ec       	ldi	r24, 0xC4	; 196
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("erv ");
    2a42:	84 ec       	ldi	r24, 0xC4	; 196
    2a44:	92 e0       	ldi	r25, 0x02	; 2
    2a46:	6e ed       	ldi	r22, 0xDE	; 222
    2a48:	72 e0       	ldi	r23, 0x02	; 2
    2a4a:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    2a4e:	84 ec       	ldi	r24, 0xC4	; 196
    2a50:	92 e0       	ldi	r25, 0x02	; 2
    2a52:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTFMT(erv, BIN);
    2a56:	84 ec       	ldi	r24, 0xC4	; 196
    2a58:	92 e0       	ldi	r25, 0x02	; 2
    2a5a:	6b 2d       	mov	r22, r11
    2a5c:	42 e0       	ldi	r20, 0x02	; 2
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Print::print(unsigned char, int)>
    2a64:	84 ec       	ldi	r24, 0xC4	; 196
    2a66:	92 e0       	ldi	r25, 0x02	; 2
    2a68:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
  DEBUG_SERIAL_PRINTLN();
    2a6c:	84 ec       	ldi	r24, 0xC4	; 196
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    2a74:	84 ec       	ldi	r24, 0xC4	; 196
    2a76:	92 e0       	ldi	r25, 0x02	; 2
    2a78:	0e 94 00 1b 	call	0x3600	; 0x3600 <HardwareSerial::flush()>
#endif

  // Initialised: turn heatcall UI LED off (and make it an output).
  pinMode(LED_HEATCALL, OUTPUT);
    2a7c:	8d e0       	ldi	r24, 0x0D	; 13
    2a7e:	61 e0       	ldi	r22, 0x01	; 1
    2a80:	0e 94 a5 18 	call	0x314a	; 0x314a <pinMode>
  fastDigitalWrite(LED_HEATCALL, LOW);
    2a84:	2d 98       	cbi	0x05, 5	; 5

  // Report initial status.
  serialStatusReport();
    2a86:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <serialStatusReport()>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    2a8a:	80 91 66 01 	lds	r24, 0x0166
    2a8e:	80 93 7a 01 	sts	0x017A, r24
  }
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	df 90       	pop	r13
    2aa0:	cf 90       	pop	r12
    2aa2:	bf 90       	pop	r11
    2aa4:	af 90       	pop	r10
    2aa6:	9f 90       	pop	r9
    2aa8:	8f 90       	pop	r8
    2aaa:	7f 90       	pop	r7
    2aac:	6f 90       	pop	r6
    2aae:	08 95       	ret

00002ab0 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	80 93 c1 01 	sts	0x01C1, r24
  // set address of targeted slave
  txAddress = address;
    2ab6:	60 93 9e 01 	sts	0x019E, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2aba:	10 92 bf 01 	sts	0x01BF, r1
  txBufferLength = 0;
    2abe:	10 92 c0 01 	sts	0x01C0, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    2ac2:	08 95       	ret

00002ac4 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    2ac4:	20 91 9d 01 	lds	r18, 0x019D
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	80 91 9c 01 	lds	r24, 0x019C
    2ace:	28 1b       	sub	r18, r24
    2ad0:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	08 95       	ret

00002ad6 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2ad6:	40 91 9c 01 	lds	r20, 0x019C
    2ada:	80 91 9d 01 	lds	r24, 0x019D
    2ade:	48 17       	cp	r20, r24
    2ae0:	18 f0       	brcs	.+6      	; 0x2ae8 <TwoWire::read()+0x12>
    2ae2:	2f ef       	ldi	r18, 0xFF	; 255
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	0a c0       	rjmp	.+20     	; 0x2afc <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    2ae8:	e4 2f       	mov	r30, r20
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	e4 58       	subi	r30, 0x84	; 132
    2aee:	fe 4f       	sbci	r31, 0xFE	; 254
    2af0:	80 81       	ld	r24, Z
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    2af6:	4f 5f       	subi	r20, 0xFF	; 255
    2af8:	40 93 9c 01 	sts	0x019C, r20
  }

  return value;
}
    2afc:	c9 01       	movw	r24, r18
    2afe:	08 95       	ret

00002b00 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    2b00:	e0 91 9c 01 	lds	r30, 0x019C
    2b04:	80 91 9d 01 	lds	r24, 0x019D
    2b08:	e8 17       	cp	r30, r24
    2b0a:	18 f0       	brcs	.+6      	; 0x2b12 <TwoWire::peek()+0x12>
    2b0c:	ef ef       	ldi	r30, 0xFF	; 255
    2b0e:	ff ef       	ldi	r31, 0xFF	; 255
    2b10:	06 c0       	rjmp	.+12     	; 0x2b1e <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	e4 58       	subi	r30, 0x84	; 132
    2b16:	fe 4f       	sbci	r31, 0xFE	; 254
    2b18:	80 81       	ld	r24, Z
    2b1a:	e8 2f       	mov	r30, r24
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    2b1e:	cf 01       	movw	r24, r30
    2b20:	08 95       	ret

00002b22 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    2b22:	08 95       	ret

00002b24 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b24:	10 92 c5 01 	sts	0x01C5, r1
    2b28:	10 92 c4 01 	sts	0x01C4, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2b2c:	88 ee       	ldi	r24, 0xE8	; 232
    2b2e:	93 e0       	ldi	r25, 0x03	; 3
    2b30:	a0 e0       	ldi	r26, 0x00	; 0
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	80 93 c6 01 	sts	0x01C6, r24
    2b38:	90 93 c7 01 	sts	0x01C7, r25
    2b3c:	a0 93 c8 01 	sts	0x01C8, r26
    2b40:	b0 93 c9 01 	sts	0x01C9, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2b44:	87 e0       	ldi	r24, 0x07	; 7
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	90 93 c3 01 	sts	0x01C3, r25
    2b4c:	80 93 c2 01 	sts	0x01C2, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2b50:	08 95       	ret

00002b52 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    2b52:	cf 92       	push	r12
    2b54:	df 92       	push	r13
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	7c 01       	movw	r14, r24
    2b64:	6b 01       	movw	r12, r22
    2b66:	8a 01       	movw	r16, r20
{
  if(transmitting){
    2b68:	80 91 c1 01 	lds	r24, 0x01C1
    2b6c:	88 23       	and	r24, r24
    2b6e:	a1 f0       	breq	.+40     	; 0x2b98 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2b70:	c0 e0       	ldi	r28, 0x00	; 0
    2b72:	d0 e0       	ldi	r29, 0x00	; 0
    2b74:	0d c0       	rjmp	.+26     	; 0x2b90 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    2b76:	d7 01       	movw	r26, r14
    2b78:	ed 91       	ld	r30, X+
    2b7a:	fc 91       	ld	r31, X
    2b7c:	d6 01       	movw	r26, r12
    2b7e:	ac 0f       	add	r26, r28
    2b80:	bd 1f       	adc	r27, r29
    2b82:	01 90       	ld	r0, Z+
    2b84:	f0 81       	ld	r31, Z
    2b86:	e0 2d       	mov	r30, r0
    2b88:	c7 01       	movw	r24, r14
    2b8a:	6c 91       	ld	r22, X
    2b8c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2b8e:	21 96       	adiw	r28, 0x01	; 1
    2b90:	c0 17       	cp	r28, r16
    2b92:	d1 07       	cpc	r29, r17
    2b94:	80 f3       	brcs	.-32     	; 0x2b76 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2b98:	cb 01       	movw	r24, r22
    2b9a:	64 2f       	mov	r22, r20
    2b9c:	0e 94 db 16 	call	0x2db6	; 0x2db6 <twi_transmit>
  }
  return quantity;
}
    2ba0:	c8 01       	movw	r24, r16
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	df 90       	pop	r13
    2bb0:	cf 90       	pop	r12
    2bb2:	08 95       	ret

00002bb4 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	0f 92       	push	r0
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    2bc2:	80 91 c1 01 	lds	r24, 0x01C1
    2bc6:	88 23       	and	r24, r24
    2bc8:	c9 f0       	breq	.+50     	; 0x2bfc <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2bca:	80 91 c0 01 	lds	r24, 0x01C0
    2bce:	80 32       	cpi	r24, 0x20	; 32
    2bd0:	38 f0       	brcs	.+14     	; 0x2be0 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	93 83       	std	Z+3, r25	; 0x03
    2bd8:	82 83       	std	Z+2, r24	; 0x02
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	15 c0       	rjmp	.+42     	; 0x2c0a <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2be0:	80 91 bf 01 	lds	r24, 0x01BF
    2be4:	e8 2f       	mov	r30, r24
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	e1 56       	subi	r30, 0x61	; 97
    2bea:	fe 4f       	sbci	r31, 0xFE	; 254
    2bec:	99 81       	ldd	r25, Y+1	; 0x01
    2bee:	90 83       	st	Z, r25
    ++txBufferIndex;
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	80 93 bf 01 	sts	0x01BF, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2bf6:	80 93 c0 01 	sts	0x01C0, r24
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	0e 94 db 16 	call	0x2db6	; 0x2db6 <twi_transmit>
    2c06:	21 e0       	ldi	r18, 0x01	; 1
    2c08:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    2c0a:	c9 01       	movw	r24, r18
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    2c14:	0f 93       	push	r16
    2c16:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2c18:	80 91 9e 01 	lds	r24, 0x019E
    2c1c:	6f e9       	ldi	r22, 0x9F	; 159
    2c1e:	71 e0       	ldi	r23, 0x01	; 1
    2c20:	40 91 c0 01 	lds	r20, 0x01C0
    2c24:	21 e0       	ldi	r18, 0x01	; 1
    2c26:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2c2a:	10 92 bf 01 	sts	0x01BF, r1
  txBufferLength = 0;
    2c2e:	10 92 c0 01 	sts	0x01C0, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2c32:	10 92 c1 01 	sts	0x01C1, r1
  return ret;
}
    2c36:	0f 91       	pop	r16
    2c38:	08 95       	ret

00002c3a <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <TwoWire::endTransmission(unsigned char)>
}
    2c40:	08 95       	ret

00002c42 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2c42:	41 32       	cpi	r20, 0x21	; 33
    2c44:	08 f0       	brcs	.+2      	; 0x2c48 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    2c46:	40 e2       	ldi	r20, 0x20	; 32
    2c48:	86 2f       	mov	r24, r22
    2c4a:	6c e7       	ldi	r22, 0x7C	; 124
    2c4c:	71 e0       	ldi	r23, 0x01	; 1
    2c4e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2c52:	10 92 9c 01 	sts	0x019C, r1
  rxBufferLength = read;
    2c56:	80 93 9d 01 	sts	0x019D, r24

  return read;
}
    2c5a:	08 95       	ret

00002c5c <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2c5c:	21 e0       	ldi	r18, 0x01	; 1
    2c5e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    2c62:	08 95       	ret

00002c64 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2c64:	10 92 9c 01 	sts	0x019C, r1
  rxBufferLength = 0;
    2c68:	10 92 9d 01 	sts	0x019D, r1

  txBufferIndex = 0;
    2c6c:	10 92 bf 01 	sts	0x01BF, r1
  txBufferLength = 0;
    2c70:	10 92 c0 01 	sts	0x01C0, r1

  twi_init();
    2c74:	0e 94 87 18 	call	0x310e	; 0x310e <twi_init>
}
    2c78:	08 95       	ret

00002c7a <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    2c7a:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2c7c:	41 32       	cpi	r20, 0x21	; 33
    2c7e:	10 f0       	brcs	.+4      	; 0x2c84 <twi_readFrom+0xa>
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	42 c0       	rjmp	.+132    	; 0x2d08 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2c84:	80 91 ce 01 	lds	r24, 0x01CE
    2c88:	88 23       	and	r24, r24
    2c8a:	e1 f7       	brne	.-8      	; 0x2c84 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    2c8c:	91 e0       	ldi	r25, 0x01	; 1
    2c8e:	90 93 ce 01 	sts	0x01CE, r25
  twi_sendStop = sendStop;
    2c92:	20 93 d0 01 	sts	0x01D0, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2c96:	8f ef       	ldi	r24, 0xFF	; 255
    2c98:	80 93 3b 02 	sts	0x023B, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2c9c:	10 92 f6 01 	sts	0x01F6, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    2ca0:	41 50       	subi	r20, 0x01	; 1
    2ca2:	40 93 f7 01 	sts	0x01F7, r20
    2ca6:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    2ca8:	90 93 cf 01 	sts	0x01CF, r25
  twi_slarw |= address << 1;
    2cac:	80 91 cf 01 	lds	r24, 0x01CF
    2cb0:	33 0f       	add	r19, r19
    2cb2:	83 2b       	or	r24, r19
    2cb4:	80 93 cf 01 	sts	0x01CF, r24

  if (true == twi_inRepStart) {
    2cb8:	80 91 d1 01 	lds	r24, 0x01D1
    2cbc:	81 30       	cpi	r24, 0x01	; 1
    2cbe:	41 f4       	brne	.+16     	; 0x2cd0 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2cc0:	10 92 d1 01 	sts	0x01D1, r1
    TWDR = twi_slarw;
    2cc4:	80 91 cf 01 	lds	r24, 0x01CF
    2cc8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2ccc:	85 ec       	ldi	r24, 0xC5	; 197
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    2cd0:	85 ee       	ldi	r24, 0xE5	; 229
    2cd2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2cd6:	80 91 ce 01 	lds	r24, 0x01CE
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	e1 f3       	breq	.-8      	; 0x2cd6 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    2cde:	80 91 f6 01 	lds	r24, 0x01F6
    2ce2:	84 17       	cp	r24, r20
    2ce4:	10 f4       	brcc	.+4      	; 0x2cea <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    2ce6:	40 91 f6 01 	lds	r20, 0x01F6
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	0a c0       	rjmp	.+20     	; 0x2d04 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    2cf0:	fb 01       	movw	r30, r22
    2cf2:	e2 0f       	add	r30, r18
    2cf4:	f3 1f       	adc	r31, r19
    2cf6:	d9 01       	movw	r26, r18
    2cf8:	aa 52       	subi	r26, 0x2A	; 42
    2cfa:	be 4f       	sbci	r27, 0xFE	; 254
    2cfc:	8c 91       	ld	r24, X
    2cfe:	80 83       	st	Z, r24
    2d00:	2f 5f       	subi	r18, 0xFF	; 255
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2d04:	24 17       	cp	r18, r20
    2d06:	a0 f3       	brcs	.-24     	; 0x2cf0 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    2d08:	84 2f       	mov	r24, r20
    2d0a:	08 95       	ret

00002d0c <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2d0c:	0f 93       	push	r16
    2d0e:	1f 93       	push	r17
    2d10:	58 2f       	mov	r21, r24
    2d12:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2d14:	41 32       	cpi	r20, 0x21	; 33
    2d16:	10 f0       	brcs	.+4      	; 0x2d1c <twi_writeTo+0x10>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	4a c0       	rjmp	.+148    	; 0x2db0 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2d1c:	80 91 ce 01 	lds	r24, 0x01CE
    2d20:	88 23       	and	r24, r24
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    2d24:	82 e0       	ldi	r24, 0x02	; 2
    2d26:	80 93 ce 01 	sts	0x01CE, r24
  twi_sendStop = sendStop;
    2d2a:	00 93 d0 01 	sts	0x01D0, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2d2e:	8f ef       	ldi	r24, 0xFF	; 255
    2d30:	80 93 3b 02 	sts	0x023B, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2d34:	10 92 f6 01 	sts	0x01F6, r1
  twi_masterBufferLength = length;
    2d38:	40 93 f7 01 	sts	0x01F7, r20
    2d3c:	a6 ed       	ldi	r26, 0xD6	; 214
    2d3e:	b1 e0       	ldi	r27, 0x01	; 1
    2d40:	fb 01       	movw	r30, r22
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    2d44:	81 91       	ld	r24, Z+
    2d46:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2d48:	8e 2f       	mov	r24, r30
    2d4a:	86 1b       	sub	r24, r22
    2d4c:	84 17       	cp	r24, r20
    2d4e:	d0 f3       	brcs	.-12     	; 0x2d44 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2d50:	10 92 cf 01 	sts	0x01CF, r1
  twi_slarw |= address << 1;
    2d54:	80 91 cf 01 	lds	r24, 0x01CF
    2d58:	55 0f       	add	r21, r21
    2d5a:	85 2b       	or	r24, r21
    2d5c:	80 93 cf 01 	sts	0x01CF, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2d60:	80 91 d1 01 	lds	r24, 0x01D1
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	41 f4       	brne	.+16     	; 0x2d78 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2d68:	10 92 d1 01 	sts	0x01D1, r1
    TWDR = twi_slarw;				
    2d6c:	80 91 cf 01 	lds	r24, 0x01CF
    2d70:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2d74:	85 ec       	ldi	r24, 0xC5	; 197
    2d76:	01 c0       	rjmp	.+2      	; 0x2d7a <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2d78:	85 ee       	ldi	r24, 0xE5	; 229
    2d7a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2d7e:	11 23       	and	r17, r17
    2d80:	21 f0       	breq	.+8      	; 0x2d8a <twi_writeTo+0x7e>
    2d82:	80 91 ce 01 	lds	r24, 0x01CE
    2d86:	82 30       	cpi	r24, 0x02	; 2
    2d88:	e1 f3       	breq	.-8      	; 0x2d82 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    2d8a:	80 91 3b 02 	lds	r24, 0x023B
    2d8e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d90:	11 f4       	brne	.+4      	; 0x2d96 <twi_writeTo+0x8a>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0d c0       	rjmp	.+26     	; 0x2db0 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    2d96:	80 91 3b 02 	lds	r24, 0x023B
    2d9a:	80 32       	cpi	r24, 0x20	; 32
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <twi_writeTo+0x96>
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	07 c0       	rjmp	.+14     	; 0x2db0 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    2da2:	80 91 3b 02 	lds	r24, 0x023B
    2da6:	80 33       	cpi	r24, 0x30	; 48
    2da8:	11 f0       	breq	.+4      	; 0x2dae <twi_writeTo+0xa2>
    2daa:	84 e0       	ldi	r24, 0x04	; 4
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <twi_writeTo+0xa4>
    2dae:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	08 95       	ret

00002db6 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    2db6:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2db8:	61 32       	cpi	r22, 0x21	; 33
    2dba:	10 f0       	brcs	.+4      	; 0x2dc0 <twi_transmit+0xa>
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    2dc0:	80 91 ce 01 	lds	r24, 0x01CE
    2dc4:	84 30       	cpi	r24, 0x04	; 4
    2dc6:	11 f0       	breq	.+4      	; 0x2dcc <twi_transmit+0x16>
    2dc8:	82 e0       	ldi	r24, 0x02	; 2
    2dca:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    2dcc:	60 93 19 02 	sts	0x0219, r22
    2dd0:	a8 ef       	ldi	r26, 0xF8	; 248
    2dd2:	b1 e0       	ldi	r27, 0x01	; 1
    2dd4:	84 2f       	mov	r24, r20
    2dd6:	9c 01       	movw	r18, r24
    2dd8:	f9 01       	movw	r30, r18
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    2ddc:	81 91       	ld	r24, Z+
    2dde:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    2de0:	8e 2f       	mov	r24, r30
    2de2:	84 1b       	sub	r24, r20
    2de4:	86 17       	cp	r24, r22
    2de6:	d0 f3       	brcs	.-12     	; 0x2ddc <twi_transmit+0x26>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    2dea:	08 95       	ret

00002dec <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
    2dec:	1f 92       	push	r1
    2dee:	0f 92       	push	r0
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	0f 92       	push	r0
    2df4:	11 24       	eor	r1, r1
    2df6:	2f 93       	push	r18
    2df8:	3f 93       	push	r19
    2dfa:	4f 93       	push	r20
    2dfc:	5f 93       	push	r21
    2dfe:	6f 93       	push	r22
    2e00:	7f 93       	push	r23
    2e02:	8f 93       	push	r24
    2e04:	9f 93       	push	r25
    2e06:	af 93       	push	r26
    2e08:	bf 93       	push	r27
    2e0a:	ef 93       	push	r30
    2e0c:	ff 93       	push	r31
  switch(TW_STATUS){
    2e0e:	80 91 b9 00 	lds	r24, 0x00B9
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	88 7f       	andi	r24, 0xF8	; 248
    2e16:	90 70       	andi	r25, 0x00	; 0
    2e18:	80 36       	cpi	r24, 0x60	; 96
    2e1a:	91 05       	cpc	r25, r1
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <__vector_24+0x34>
    2e1e:	f2 c0       	rjmp	.+484    	; 0x3004 <__vector_24+0x218>
    2e20:	81 36       	cpi	r24, 0x61	; 97
    2e22:	91 05       	cpc	r25, r1
    2e24:	cc f5       	brge	.+114    	; 0x2e98 <__vector_24+0xac>
    2e26:	88 32       	cpi	r24, 0x28	; 40
    2e28:	91 05       	cpc	r25, r1
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <__vector_24+0x42>
    2e2c:	7b c0       	rjmp	.+246    	; 0x2f24 <__vector_24+0x138>
    2e2e:	89 32       	cpi	r24, 0x29	; 41
    2e30:	91 05       	cpc	r25, r1
    2e32:	b4 f4       	brge	.+44     	; 0x2e60 <__vector_24+0x74>
    2e34:	80 31       	cpi	r24, 0x10	; 16
    2e36:	91 05       	cpc	r25, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <__vector_24+0x50>
    2e3a:	6f c0       	rjmp	.+222    	; 0x2f1a <__vector_24+0x12e>
    2e3c:	81 31       	cpi	r24, 0x11	; 17
    2e3e:	91 05       	cpc	r25, r1
    2e40:	3c f4       	brge	.+14     	; 0x2e50 <__vector_24+0x64>
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <__vector_24+0x5c>
    2e46:	47 c1       	rjmp	.+654    	; 0x30d6 <__vector_24+0x2ea>
    2e48:	08 97       	sbiw	r24, 0x08	; 8
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <__vector_24+0x62>
    2e4c:	4f c1       	rjmp	.+670    	; 0x30ec <__vector_24+0x300>
    2e4e:	65 c0       	rjmp	.+202    	; 0x2f1a <__vector_24+0x12e>
    2e50:	88 31       	cpi	r24, 0x18	; 24
    2e52:	91 05       	cpc	r25, r1
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <__vector_24+0x6c>
    2e56:	66 c0       	rjmp	.+204    	; 0x2f24 <__vector_24+0x138>
    2e58:	80 97       	sbiw	r24, 0x20	; 32
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <__vector_24+0x72>
    2e5c:	47 c1       	rjmp	.+654    	; 0x30ec <__vector_24+0x300>
    2e5e:	82 c0       	rjmp	.+260    	; 0x2f64 <__vector_24+0x178>
    2e60:	80 34       	cpi	r24, 0x40	; 64
    2e62:	91 05       	cpc	r25, r1
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <__vector_24+0x7c>
    2e66:	a4 c0       	rjmp	.+328    	; 0x2fb0 <__vector_24+0x1c4>
    2e68:	81 34       	cpi	r24, 0x41	; 65
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	44 f4       	brge	.+16     	; 0x2e7e <__vector_24+0x92>
    2e6e:	80 33       	cpi	r24, 0x30	; 48
    2e70:	91 05       	cpc	r25, r1
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <__vector_24+0x8a>
    2e74:	82 c0       	rjmp	.+260    	; 0x2f7a <__vector_24+0x18e>
    2e76:	c8 97       	sbiw	r24, 0x38	; 56
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <__vector_24+0x90>
    2e7a:	38 c1       	rjmp	.+624    	; 0x30ec <__vector_24+0x300>
    2e7c:	89 c0       	rjmp	.+274    	; 0x2f90 <__vector_24+0x1a4>
    2e7e:	80 35       	cpi	r24, 0x50	; 80
    2e80:	91 05       	cpc	r25, r1
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <__vector_24+0x9a>
    2e84:	89 c0       	rjmp	.+274    	; 0x2f98 <__vector_24+0x1ac>
    2e86:	88 35       	cpi	r24, 0x58	; 88
    2e88:	91 05       	cpc	r25, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <__vector_24+0xa2>
    2e8c:	96 c0       	rjmp	.+300    	; 0x2fba <__vector_24+0x1ce>
    2e8e:	88 34       	cpi	r24, 0x48	; 72
    2e90:	91 05       	cpc	r25, r1
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <__vector_24+0xaa>
    2e94:	2b c1       	rjmp	.+598    	; 0x30ec <__vector_24+0x300>
    2e96:	ae c0       	rjmp	.+348    	; 0x2ff4 <__vector_24+0x208>
    2e98:	88 39       	cpi	r24, 0x98	; 152
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <__vector_24+0xb4>
    2e9e:	13 c1       	rjmp	.+550    	; 0x30c6 <__vector_24+0x2da>
    2ea0:	89 39       	cpi	r24, 0x99	; 153
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	ec f4       	brge	.+58     	; 0x2ee0 <__vector_24+0xf4>
    2ea6:	88 37       	cpi	r24, 0x78	; 120
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <__vector_24+0xc2>
    2eac:	ab c0       	rjmp	.+342    	; 0x3004 <__vector_24+0x218>
    2eae:	89 37       	cpi	r24, 0x79	; 121
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	4c f4       	brge	.+18     	; 0x2ec6 <__vector_24+0xda>
    2eb4:	88 36       	cpi	r24, 0x68	; 104
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <__vector_24+0xd0>
    2eba:	a4 c0       	rjmp	.+328    	; 0x3004 <__vector_24+0x218>
    2ebc:	80 37       	cpi	r24, 0x70	; 112
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <__vector_24+0xd8>
    2ec2:	14 c1       	rjmp	.+552    	; 0x30ec <__vector_24+0x300>
    2ec4:	9f c0       	rjmp	.+318    	; 0x3004 <__vector_24+0x218>
    2ec6:	88 38       	cpi	r24, 0x88	; 136
    2ec8:	91 05       	cpc	r25, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <__vector_24+0xe2>
    2ecc:	fc c0       	rjmp	.+504    	; 0x30c6 <__vector_24+0x2da>
    2ece:	80 39       	cpi	r24, 0x90	; 144
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <__vector_24+0xea>
    2ed4:	9d c0       	rjmp	.+314    	; 0x3010 <__vector_24+0x224>
    2ed6:	80 38       	cpi	r24, 0x80	; 128
    2ed8:	91 05       	cpc	r25, r1
    2eda:	09 f0       	breq	.+2      	; 0x2ede <__vector_24+0xf2>
    2edc:	07 c1       	rjmp	.+526    	; 0x30ec <__vector_24+0x300>
    2ede:	98 c0       	rjmp	.+304    	; 0x3010 <__vector_24+0x224>
    2ee0:	80 3b       	cpi	r24, 0xB0	; 176
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <__vector_24+0xfc>
    2ee6:	c6 c0       	rjmp	.+396    	; 0x3074 <__vector_24+0x288>
    2ee8:	81 3b       	cpi	r24, 0xB1	; 177
    2eea:	91 05       	cpc	r25, r1
    2eec:	4c f4       	brge	.+18     	; 0x2f00 <__vector_24+0x114>
    2eee:	80 3a       	cpi	r24, 0xA0	; 160
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <__vector_24+0x10a>
    2ef4:	9f c0       	rjmp	.+318    	; 0x3034 <__vector_24+0x248>
    2ef6:	88 3a       	cpi	r24, 0xA8	; 168
    2ef8:	91 05       	cpc	r25, r1
    2efa:	09 f0       	breq	.+2      	; 0x2efe <__vector_24+0x112>
    2efc:	f7 c0       	rjmp	.+494    	; 0x30ec <__vector_24+0x300>
    2efe:	ba c0       	rjmp	.+372    	; 0x3074 <__vector_24+0x288>
    2f00:	80 3c       	cpi	r24, 0xC0	; 192
    2f02:	91 05       	cpc	r25, r1
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <__vector_24+0x11c>
    2f06:	e3 c0       	rjmp	.+454    	; 0x30ce <__vector_24+0x2e2>
    2f08:	88 3c       	cpi	r24, 0xC8	; 200
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <__vector_24+0x124>
    2f0e:	df c0       	rjmp	.+446    	; 0x30ce <__vector_24+0x2e2>
    2f10:	88 3b       	cpi	r24, 0xB8	; 184
    2f12:	91 05       	cpc	r25, r1
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <__vector_24+0x12c>
    2f16:	ea c0       	rjmp	.+468    	; 0x30ec <__vector_24+0x300>
    2f18:	c2 c0       	rjmp	.+388    	; 0x309e <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2f1a:	80 91 cf 01 	lds	r24, 0x01CF
    2f1e:	80 93 bb 00 	sts	0x00BB, r24
    2f22:	cf c0       	rjmp	.+414    	; 0x30c2 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f24:	90 91 f6 01 	lds	r25, 0x01F6
    2f28:	80 91 f7 01 	lds	r24, 0x01F7
    2f2c:	98 17       	cp	r25, r24
    2f2e:	68 f4       	brcc	.+26     	; 0x2f4a <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2f30:	90 91 f6 01 	lds	r25, 0x01F6
    2f34:	e9 2f       	mov	r30, r25
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	ea 52       	subi	r30, 0x2A	; 42
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 93 bb 00 	sts	0x00BB, r24
    2f42:	9f 5f       	subi	r25, 0xFF	; 255
    2f44:	90 93 f6 01 	sts	0x01F6, r25
    2f48:	bc c0       	rjmp	.+376    	; 0x30c2 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2f4a:	80 91 d0 01 	lds	r24, 0x01D0
    2f4e:	88 23       	and	r24, r24
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <__vector_24+0x168>
    2f52:	4b c0       	rjmp	.+150    	; 0x2fea <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f54:	85 ed       	ldi	r24, 0xD5	; 213
    2f56:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f5a:	80 91 bc 00 	lds	r24, 0x00BC
    2f5e:	84 fd       	sbrc	r24, 4
    2f60:	fc cf       	rjmp	.-8      	; 0x2f5a <__vector_24+0x16e>
    2f62:	c2 c0       	rjmp	.+388    	; 0x30e8 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2f64:	80 e2       	ldi	r24, 0x20	; 32
    2f66:	80 93 3b 02 	sts	0x023B, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f6a:	85 ed       	ldi	r24, 0xD5	; 213
    2f6c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f70:	80 91 bc 00 	lds	r24, 0x00BC
    2f74:	84 fd       	sbrc	r24, 4
    2f76:	fc cf       	rjmp	.-8      	; 0x2f70 <__vector_24+0x184>
    2f78:	b7 c0       	rjmp	.+366    	; 0x30e8 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f7a:	80 e3       	ldi	r24, 0x30	; 48
    2f7c:	80 93 3b 02 	sts	0x023B, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f80:	85 ed       	ldi	r24, 0xD5	; 213
    2f82:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f86:	80 91 bc 00 	lds	r24, 0x00BC
    2f8a:	84 fd       	sbrc	r24, 4
    2f8c:	fc cf       	rjmp	.-8      	; 0x2f86 <__vector_24+0x19a>
    2f8e:	ac c0       	rjmp	.+344    	; 0x30e8 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f90:	88 e3       	ldi	r24, 0x38	; 56
    2f92:	80 93 3b 02 	sts	0x023B, r24
    2f96:	9b c0       	rjmp	.+310    	; 0x30ce <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f98:	80 91 f6 01 	lds	r24, 0x01F6
    2f9c:	90 91 bb 00 	lds	r25, 0x00BB
    2fa0:	e8 2f       	mov	r30, r24
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	ea 52       	subi	r30, 0x2A	; 42
    2fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa8:	90 83       	st	Z, r25
    2faa:	8f 5f       	subi	r24, 0xFF	; 255
    2fac:	80 93 f6 01 	sts	0x01F6, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fb0:	90 91 f6 01 	lds	r25, 0x01F6
    2fb4:	80 91 f7 01 	lds	r24, 0x01F7
    2fb8:	82 c0       	rjmp	.+260    	; 0x30be <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2fba:	80 91 f6 01 	lds	r24, 0x01F6
    2fbe:	90 91 bb 00 	lds	r25, 0x00BB
    2fc2:	e8 2f       	mov	r30, r24
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	ea 52       	subi	r30, 0x2A	; 42
    2fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fca:	90 83       	st	Z, r25
    2fcc:	8f 5f       	subi	r24, 0xFF	; 255
    2fce:	80 93 f6 01 	sts	0x01F6, r24
	if (twi_sendStop)
    2fd2:	80 91 d0 01 	lds	r24, 0x01D0
    2fd6:	88 23       	and	r24, r24
    2fd8:	41 f0       	breq	.+16     	; 0x2fea <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2fda:	85 ed       	ldi	r24, 0xD5	; 213
    2fdc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2fe0:	80 91 bc 00 	lds	r24, 0x00BC
    2fe4:	84 fd       	sbrc	r24, 4
    2fe6:	fc cf       	rjmp	.-8      	; 0x2fe0 <__vector_24+0x1f4>
    2fe8:	7f c0       	rjmp	.+254    	; 0x30e8 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	80 93 d1 01 	sts	0x01D1, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2ff0:	84 ea       	ldi	r24, 0xA4	; 164
    2ff2:	6e c0       	rjmp	.+220    	; 0x30d0 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ff4:	85 ed       	ldi	r24, 0xD5	; 213
    2ff6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ffa:	80 91 bc 00 	lds	r24, 0x00BC
    2ffe:	84 fd       	sbrc	r24, 4
    3000:	fc cf       	rjmp	.-8      	; 0x2ffa <__vector_24+0x20e>
    3002:	72 c0       	rjmp	.+228    	; 0x30e8 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	80 93 ce 01 	sts	0x01CE, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    300a:	10 92 3a 02 	sts	0x023A, r1
    300e:	59 c0       	rjmp	.+178    	; 0x30c2 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3010:	80 91 3a 02 	lds	r24, 0x023A
    3014:	80 32       	cpi	r24, 0x20	; 32
    3016:	08 f0       	brcs	.+2      	; 0x301a <__vector_24+0x22e>
    3018:	56 c0       	rjmp	.+172    	; 0x30c6 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    301a:	80 91 3a 02 	lds	r24, 0x023A
    301e:	90 91 bb 00 	lds	r25, 0x00BB
    3022:	e8 2f       	mov	r30, r24
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	e6 5e       	subi	r30, 0xE6	; 230
    3028:	fd 4f       	sbci	r31, 0xFD	; 253
    302a:	90 83       	st	Z, r25
    302c:	8f 5f       	subi	r24, 0xFF	; 255
    302e:	80 93 3a 02 	sts	0x023A, r24
    3032:	47 c0       	rjmp	.+142    	; 0x30c2 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3034:	80 91 3a 02 	lds	r24, 0x023A
    3038:	80 32       	cpi	r24, 0x20	; 32
    303a:	30 f4       	brcc	.+12     	; 0x3048 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    303c:	e0 91 3a 02 	lds	r30, 0x023A
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	e6 5e       	subi	r30, 0xE6	; 230
    3044:	fd 4f       	sbci	r31, 0xFD	; 253
    3046:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3048:	85 ed       	ldi	r24, 0xD5	; 213
    304a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    304e:	80 91 bc 00 	lds	r24, 0x00BC
    3052:	84 fd       	sbrc	r24, 4
    3054:	fc cf       	rjmp	.-8      	; 0x304e <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3056:	10 92 ce 01 	sts	0x01CE, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    305a:	60 91 3a 02 	lds	r22, 0x023A
    305e:	e0 91 d4 01 	lds	r30, 0x01D4
    3062:	f0 91 d5 01 	lds	r31, 0x01D5
    3066:	8a e1       	ldi	r24, 0x1A	; 26
    3068:	92 e0       	ldi	r25, 0x02	; 2
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    306e:	10 92 3a 02 	sts	0x023A, r1
    3072:	2d c0       	rjmp	.+90     	; 0x30ce <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3074:	84 e0       	ldi	r24, 0x04	; 4
    3076:	80 93 ce 01 	sts	0x01CE, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    307a:	10 92 18 02 	sts	0x0218, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    307e:	10 92 19 02 	sts	0x0219, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3082:	e0 91 d2 01 	lds	r30, 0x01D2
    3086:	f0 91 d3 01 	lds	r31, 0x01D3
    308a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    308c:	80 91 19 02 	lds	r24, 0x0219
    3090:	88 23       	and	r24, r24
    3092:	29 f4       	brne	.+10     	; 0x309e <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	80 93 19 02 	sts	0x0219, r24
        twi_txBuffer[0] = 0x00;
    309a:	10 92 f8 01 	sts	0x01F8, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    309e:	90 91 18 02 	lds	r25, 0x0218
    30a2:	e9 2f       	mov	r30, r25
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	e8 50       	subi	r30, 0x08	; 8
    30a8:	fe 4f       	sbci	r31, 0xFE	; 254
    30aa:	80 81       	ld	r24, Z
    30ac:	80 93 bb 00 	sts	0x00BB, r24
    30b0:	9f 5f       	subi	r25, 0xFF	; 255
    30b2:	90 93 18 02 	sts	0x0218, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    30b6:	90 91 18 02 	lds	r25, 0x0218
    30ba:	80 91 19 02 	lds	r24, 0x0219
    30be:	98 17       	cp	r25, r24
    30c0:	10 f4       	brcc	.+4      	; 0x30c6 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30c2:	85 ec       	ldi	r24, 0xC5	; 197
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30c6:	85 e8       	ldi	r24, 0x85	; 133
    30c8:	80 93 bc 00 	sts	0x00BC, r24
    30cc:	0f c0       	rjmp	.+30     	; 0x30ec <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30ce:	85 ec       	ldi	r24, 0xC5	; 197
    30d0:	80 93 bc 00 	sts	0x00BC, r24
    30d4:	09 c0       	rjmp	.+18     	; 0x30e8 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30d6:	10 92 3b 02 	sts	0x023B, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    30da:	85 ed       	ldi	r24, 0xD5	; 213
    30dc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    30e0:	80 91 bc 00 	lds	r24, 0x00BC
    30e4:	84 fd       	sbrc	r24, 4
    30e6:	fc cf       	rjmp	.-8      	; 0x30e0 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    30e8:	10 92 ce 01 	sts	0x01CE, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    30ec:	ff 91       	pop	r31
    30ee:	ef 91       	pop	r30
    30f0:	bf 91       	pop	r27
    30f2:	af 91       	pop	r26
    30f4:	9f 91       	pop	r25
    30f6:	8f 91       	pop	r24
    30f8:	7f 91       	pop	r23
    30fa:	6f 91       	pop	r22
    30fc:	5f 91       	pop	r21
    30fe:	4f 91       	pop	r20
    3100:	3f 91       	pop	r19
    3102:	2f 91       	pop	r18
    3104:	0f 90       	pop	r0
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	0f 90       	pop	r0
    310a:	1f 90       	pop	r1
    310c:	18 95       	reti

0000310e <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    310e:	10 92 ce 01 	sts	0x01CE, r1
  twi_sendStop = true;		// default value
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	80 93 d0 01 	sts	0x01D0, r24
  twi_inRepStart = false;
    3118:	10 92 d1 01 	sts	0x01D1, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    311c:	82 e1       	ldi	r24, 0x12	; 18
    311e:	61 e0       	ldi	r22, 0x01	; 1
    3120:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <digitalWrite>
  digitalWrite(SCL, 1);
    3124:	83 e1       	ldi	r24, 0x13	; 19
    3126:	61 e0       	ldi	r22, 0x01	; 1
    3128:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    312c:	e9 eb       	ldi	r30, 0xB9	; 185
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	8e 7f       	andi	r24, 0xFE	; 254
    3134:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3136:	80 81       	ld	r24, Z
    3138:	8d 7f       	andi	r24, 0xFD	; 253
    313a:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    313c:	8d ef       	ldi	r24, 0xFD	; 253
    313e:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3142:	85 e4       	ldi	r24, 0x45	; 69
    3144:	80 93 bc 00 	sts	0x00BC, r24
}
    3148:	08 95       	ret

0000314a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    314e:	48 2f       	mov	r20, r24
    3150:	50 e0       	ldi	r21, 0x00	; 0
    3152:	ca 01       	movw	r24, r20
    3154:	80 51       	subi	r24, 0x10	; 16
    3156:	9c 4f       	sbci	r25, 0xFC	; 252
    3158:	fc 01       	movw	r30, r24
    315a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    315c:	44 52       	subi	r20, 0x24	; 36
    315e:	5c 4f       	sbci	r21, 0xFC	; 252
    3160:	fa 01       	movw	r30, r20
    3162:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3164:	88 23       	and	r24, r24
    3166:	69 f1       	breq	.+90     	; 0x31c2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	fc 01       	movw	r30, r24
    3170:	e2 54       	subi	r30, 0x42	; 66
    3172:	fc 4f       	sbci	r31, 0xFC	; 252
    3174:	a5 91       	lpm	r26, Z+
    3176:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    3178:	fc 01       	movw	r30, r24
    317a:	e8 53       	subi	r30, 0x38	; 56
    317c:	fc 4f       	sbci	r31, 0xFC	; 252
    317e:	c5 91       	lpm	r28, Z+
    3180:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    3182:	66 23       	and	r22, r22
    3184:	51 f4       	brne	.+20     	; 0x319a <pinMode+0x50>
		uint8_t oldSREG = SREG;
    3186:	2f b7       	in	r18, 0x3f	; 63
                cli();
    3188:	f8 94       	cli
		*reg &= ~bit;
    318a:	8c 91       	ld	r24, X
    318c:	93 2f       	mov	r25, r19
    318e:	90 95       	com	r25
    3190:	89 23       	and	r24, r25
    3192:	8c 93       	st	X, r24
		*out &= ~bit;
    3194:	88 81       	ld	r24, Y
    3196:	89 23       	and	r24, r25
    3198:	0b c0       	rjmp	.+22     	; 0x31b0 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    319a:	62 30       	cpi	r22, 0x02	; 2
    319c:	61 f4       	brne	.+24     	; 0x31b6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    319e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    31a0:	f8 94       	cli
		*reg &= ~bit;
    31a2:	8c 91       	ld	r24, X
    31a4:	93 2f       	mov	r25, r19
    31a6:	90 95       	com	r25
    31a8:	89 23       	and	r24, r25
    31aa:	8c 93       	st	X, r24
		*out |= bit;
    31ac:	88 81       	ld	r24, Y
    31ae:	83 2b       	or	r24, r19
    31b0:	88 83       	st	Y, r24
		SREG = oldSREG;
    31b2:	2f bf       	out	0x3f, r18	; 63
    31b4:	06 c0       	rjmp	.+12     	; 0x31c2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    31b6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    31b8:	f8 94       	cli
		*reg |= bit;
    31ba:	8c 91       	ld	r24, X
    31bc:	83 2b       	or	r24, r19
    31be:	8c 93       	st	X, r24
		SREG = oldSREG;
    31c0:	9f bf       	out	0x3f, r25	; 63
	}
}
    31c2:	df 91       	pop	r29
    31c4:	cf 91       	pop	r28
    31c6:	08 95       	ret

000031c8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    31c8:	48 2f       	mov	r20, r24
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	ca 01       	movw	r24, r20
    31ce:	8c 5f       	subi	r24, 0xFC	; 252
    31d0:	9b 4f       	sbci	r25, 0xFB	; 251
    31d2:	fc 01       	movw	r30, r24
    31d4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    31d6:	ca 01       	movw	r24, r20
    31d8:	80 51       	subi	r24, 0x10	; 16
    31da:	9c 4f       	sbci	r25, 0xFC	; 252
    31dc:	fc 01       	movw	r30, r24
    31de:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    31e0:	44 52       	subi	r20, 0x24	; 36
    31e2:	5c 4f       	sbci	r21, 0xFC	; 252
    31e4:	fa 01       	movw	r30, r20
    31e6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    31e8:	33 23       	and	r19, r19
    31ea:	09 f4       	brne	.+2      	; 0x31ee <digitalWrite+0x26>
    31ec:	40 c0       	rjmp	.+128    	; 0x326e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    31ee:	22 23       	and	r18, r18
    31f0:	51 f1       	breq	.+84     	; 0x3246 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    31f2:	23 30       	cpi	r18, 0x03	; 3
    31f4:	71 f0       	breq	.+28     	; 0x3212 <digitalWrite+0x4a>
    31f6:	24 30       	cpi	r18, 0x04	; 4
    31f8:	28 f4       	brcc	.+10     	; 0x3204 <digitalWrite+0x3c>
    31fa:	21 30       	cpi	r18, 0x01	; 1
    31fc:	a1 f0       	breq	.+40     	; 0x3226 <digitalWrite+0x5e>
    31fe:	22 30       	cpi	r18, 0x02	; 2
    3200:	11 f5       	brne	.+68     	; 0x3246 <digitalWrite+0x7e>
    3202:	14 c0       	rjmp	.+40     	; 0x322c <digitalWrite+0x64>
    3204:	26 30       	cpi	r18, 0x06	; 6
    3206:	b1 f0       	breq	.+44     	; 0x3234 <digitalWrite+0x6c>
    3208:	27 30       	cpi	r18, 0x07	; 7
    320a:	c1 f0       	breq	.+48     	; 0x323c <digitalWrite+0x74>
    320c:	24 30       	cpi	r18, 0x04	; 4
    320e:	d9 f4       	brne	.+54     	; 0x3246 <digitalWrite+0x7e>
    3210:	04 c0       	rjmp	.+8      	; 0x321a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3212:	80 91 80 00 	lds	r24, 0x0080
    3216:	8f 77       	andi	r24, 0x7F	; 127
    3218:	03 c0       	rjmp	.+6      	; 0x3220 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    321a:	80 91 80 00 	lds	r24, 0x0080
    321e:	8f 7d       	andi	r24, 0xDF	; 223
    3220:	80 93 80 00 	sts	0x0080, r24
    3224:	10 c0       	rjmp	.+32     	; 0x3246 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3226:	84 b5       	in	r24, 0x24	; 36
    3228:	8f 77       	andi	r24, 0x7F	; 127
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    322c:	84 b5       	in	r24, 0x24	; 36
    322e:	8f 7d       	andi	r24, 0xDF	; 223
    3230:	84 bd       	out	0x24, r24	; 36
    3232:	09 c0       	rjmp	.+18     	; 0x3246 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3234:	80 91 b0 00 	lds	r24, 0x00B0
    3238:	8f 77       	andi	r24, 0x7F	; 127
    323a:	03 c0       	rjmp	.+6      	; 0x3242 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    323c:	80 91 b0 00 	lds	r24, 0x00B0
    3240:	8f 7d       	andi	r24, 0xDF	; 223
    3242:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    3246:	e3 2f       	mov	r30, r19
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	ee 0f       	add	r30, r30
    324c:	ff 1f       	adc	r31, r31
    324e:	e8 53       	subi	r30, 0x38	; 56
    3250:	fc 4f       	sbci	r31, 0xFC	; 252
    3252:	a5 91       	lpm	r26, Z+
    3254:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    3256:	2f b7       	in	r18, 0x3f	; 63
	cli();
    3258:	f8 94       	cli

	if (val == LOW) {
    325a:	66 23       	and	r22, r22
    325c:	21 f4       	brne	.+8      	; 0x3266 <digitalWrite+0x9e>
		*out &= ~bit;
    325e:	8c 91       	ld	r24, X
    3260:	90 95       	com	r25
    3262:	89 23       	and	r24, r25
    3264:	02 c0       	rjmp	.+4      	; 0x326a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    3266:	8c 91       	ld	r24, X
    3268:	89 2b       	or	r24, r25
    326a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    326c:	2f bf       	out	0x3f, r18	; 63
    326e:	08 95       	ret

00003270 <serialEvent()>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    3270:	08 95       	ret

00003272 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    3272:	1f 92       	push	r1
    3274:	0f 92       	push	r0
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	0f 92       	push	r0
    327a:	11 24       	eor	r1, r1
    327c:	2f 93       	push	r18
    327e:	3f 93       	push	r19
    3280:	4f 93       	push	r20
    3282:	8f 93       	push	r24
    3284:	9f 93       	push	r25
    3286:	ef 93       	push	r30
    3288:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    328a:	80 91 c0 00 	lds	r24, 0x00C0
    328e:	82 fd       	sbrc	r24, 2
    3290:	1d c0       	rjmp	.+58     	; 0x32cc <__vector_18+0x5a>
      unsigned char c = UDR0;
    3292:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3296:	20 91 7c 02 	lds	r18, 0x027C
    329a:	30 91 7d 02 	lds	r19, 0x027D

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    329e:	2f 5f       	subi	r18, 0xFF	; 255
    32a0:	3f 4f       	sbci	r19, 0xFF	; 255
    32a2:	2f 73       	andi	r18, 0x3F	; 63
    32a4:	30 70       	andi	r19, 0x00	; 0
    32a6:	80 91 7e 02 	lds	r24, 0x027E
    32aa:	90 91 7f 02 	lds	r25, 0x027F
    32ae:	28 17       	cp	r18, r24
    32b0:	39 07       	cpc	r19, r25
    32b2:	71 f0       	breq	.+28     	; 0x32d0 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    32b4:	e0 91 7c 02 	lds	r30, 0x027C
    32b8:	f0 91 7d 02 	lds	r31, 0x027D
    32bc:	e4 5c       	subi	r30, 0xC4	; 196
    32be:	fd 4f       	sbci	r31, 0xFD	; 253
    32c0:	40 83       	st	Z, r20
    buffer->head = i;
    32c2:	30 93 7d 02 	sts	0x027D, r19
    32c6:	20 93 7c 02 	sts	0x027C, r18
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    32cc:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    32d0:	ff 91       	pop	r31
    32d2:	ef 91       	pop	r30
    32d4:	9f 91       	pop	r25
    32d6:	8f 91       	pop	r24
    32d8:	4f 91       	pop	r20
    32da:	3f 91       	pop	r19
    32dc:	2f 91       	pop	r18
    32de:	0f 90       	pop	r0
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	0f 90       	pop	r0
    32e4:	1f 90       	pop	r1
    32e6:	18 95       	reti

000032e8 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    32e8:	e0 91 d0 02 	lds	r30, 0x02D0
    32ec:	f0 91 d1 02 	lds	r31, 0x02D1
    32f0:	e0 5c       	subi	r30, 0xC0	; 192
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	81 91       	ld	r24, Z+
    32f6:	91 91       	ld	r25, Z+
    32f8:	20 81       	ld	r18, Z
    32fa:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    32fc:	82 1b       	sub	r24, r18
    32fe:	93 0b       	sbc	r25, r19
    3300:	8f 73       	andi	r24, 0x3F	; 63
    3302:	90 70       	andi	r25, 0x00	; 0
    3304:	89 2b       	or	r24, r25
    3306:	11 f0       	breq	.+4      	; 0x330c <serialEventRun()+0x24>
    3308:	0e 94 38 19 	call	0x3270	; 0x3270 <serialEvent()>
    330c:	08 95       	ret

0000330e <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    330e:	1f 92       	push	r1
    3310:	0f 92       	push	r0
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	0f 92       	push	r0
    3316:	11 24       	eor	r1, r1
    3318:	2f 93       	push	r18
    331a:	3f 93       	push	r19
    331c:	8f 93       	push	r24
    331e:	9f 93       	push	r25
    3320:	ef 93       	push	r30
    3322:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    3324:	20 91 c0 02 	lds	r18, 0x02C0
    3328:	30 91 c1 02 	lds	r19, 0x02C1
    332c:	80 91 c2 02 	lds	r24, 0x02C2
    3330:	90 91 c3 02 	lds	r25, 0x02C3
    3334:	28 17       	cp	r18, r24
    3336:	39 07       	cpc	r19, r25
    3338:	31 f4       	brne	.+12     	; 0x3346 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    333a:	80 91 c1 00 	lds	r24, 0x00C1
    333e:	8f 7d       	andi	r24, 0xDF	; 223
    3340:	80 93 c1 00 	sts	0x00C1, r24
    3344:	14 c0       	rjmp	.+40     	; 0x336e <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    3346:	e0 91 c2 02 	lds	r30, 0x02C2
    334a:	f0 91 c3 02 	lds	r31, 0x02C3
    334e:	e0 58       	subi	r30, 0x80	; 128
    3350:	fd 4f       	sbci	r31, 0xFD	; 253
    3352:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    3354:	80 91 c2 02 	lds	r24, 0x02C2
    3358:	90 91 c3 02 	lds	r25, 0x02C3
    335c:	01 96       	adiw	r24, 0x01	; 1
    335e:	8f 73       	andi	r24, 0x3F	; 63
    3360:	90 70       	andi	r25, 0x00	; 0
    3362:	90 93 c3 02 	sts	0x02C3, r25
    3366:	80 93 c2 02 	sts	0x02C2, r24
	
  #if defined(UDR0)
    UDR0 = c;
    336a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    336e:	ff 91       	pop	r31
    3370:	ef 91       	pop	r30
    3372:	9f 91       	pop	r25
    3374:	8f 91       	pop	r24
    3376:	3f 91       	pop	r19
    3378:	2f 91       	pop	r18
    337a:	0f 90       	pop	r0
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	0f 90       	pop	r0
    3380:	1f 90       	pop	r1
    3382:	18 95       	reti

00003384 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    3384:	af 92       	push	r10
    3386:	bf 92       	push	r11
    3388:	df 92       	push	r13
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	ec 01       	movw	r28, r24
    3398:	7a 01       	movw	r14, r20
    339a:	8b 01       	movw	r16, r22
    339c:	dd 24       	eor	r13, r13
    339e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    33a0:	91 e0       	ldi	r25, 0x01	; 1
    33a2:	a9 2e       	mov	r10, r25
    33a4:	b1 2c       	mov	r11, r1
    33a6:	ec 89       	ldd	r30, Y+20	; 0x14
    33a8:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    33aa:	dd 20       	and	r13, r13
    33ac:	69 f0       	breq	.+26     	; 0x33c8 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    33ae:	c5 01       	movw	r24, r10
    33b0:	08 a0       	ldd	r0, Y+32	; 0x20
    33b2:	02 c0       	rjmp	.+4      	; 0x33b8 <HardwareSerial::begin(unsigned long)+0x34>
    33b4:	88 0f       	add	r24, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	0a 94       	dec	r0
    33ba:	e2 f7       	brpl	.-8      	; 0x33b4 <HardwareSerial::begin(unsigned long)+0x30>
    33bc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    33be:	60 e9       	ldi	r22, 0x90	; 144
    33c0:	70 ed       	ldi	r23, 0xD0	; 208
    33c2:	83 e0       	ldi	r24, 0x03	; 3
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	05 c0       	rjmp	.+10     	; 0x33d2 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    33c8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    33ca:	68 e4       	ldi	r22, 0x48	; 72
    33cc:	78 ee       	ldi	r23, 0xE8	; 232
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	a8 01       	movw	r20, r16
    33d4:	97 01       	movw	r18, r14
    33d6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__udivmodsi4>
    33da:	21 50       	subi	r18, 0x01	; 1
    33dc:	30 40       	sbci	r19, 0x00	; 0
    33de:	40 40       	sbci	r20, 0x00	; 0
    33e0:	50 40       	sbci	r21, 0x00	; 0
    33e2:	56 95       	lsr	r21
    33e4:	47 95       	ror	r20
    33e6:	37 95       	ror	r19
    33e8:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    33ea:	80 e1       	ldi	r24, 0x10	; 16
    33ec:	20 30       	cpi	r18, 0x00	; 0
    33ee:	38 07       	cpc	r19, r24
    33f0:	20 f0       	brcs	.+8      	; 0x33fa <HardwareSerial::begin(unsigned long)+0x76>
    33f2:	dd 20       	and	r13, r13
    33f4:	11 f0       	breq	.+4      	; 0x33fa <HardwareSerial::begin(unsigned long)+0x76>
    33f6:	dd 24       	eor	r13, r13
    33f8:	d6 cf       	rjmp	.-84     	; 0x33a6 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    33fa:	e8 89       	ldd	r30, Y+16	; 0x10
    33fc:	f9 89       	ldd	r31, Y+17	; 0x11
    33fe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3400:	ea 89       	ldd	r30, Y+18	; 0x12
    3402:	fb 89       	ldd	r31, Y+19	; 0x13
    3404:	20 83       	st	Z, r18

  transmitting = false;
    3406:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    3408:	ee 89       	ldd	r30, Y+22	; 0x16
    340a:	ff 89       	ldd	r31, Y+23	; 0x17
    340c:	40 81       	ld	r20, Z
    340e:	21 e0       	ldi	r18, 0x01	; 1
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	c9 01       	movw	r24, r18
    3414:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3416:	02 c0       	rjmp	.+4      	; 0x341c <HardwareSerial::begin(unsigned long)+0x98>
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	0a 94       	dec	r0
    341e:	e2 f7       	brpl	.-8      	; 0x3418 <HardwareSerial::begin(unsigned long)+0x94>
    3420:	48 2b       	or	r20, r24
    3422:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    3424:	ee 89       	ldd	r30, Y+22	; 0x16
    3426:	ff 89       	ldd	r31, Y+23	; 0x17
    3428:	40 81       	ld	r20, Z
    342a:	c9 01       	movw	r24, r18
    342c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <HardwareSerial::begin(unsigned long)+0xb0>
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	0a 94       	dec	r0
    3436:	e2 f7       	brpl	.-8      	; 0x3430 <HardwareSerial::begin(unsigned long)+0xac>
    3438:	48 2b       	or	r20, r24
    343a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    343c:	ee 89       	ldd	r30, Y+22	; 0x16
    343e:	ff 89       	ldd	r31, Y+23	; 0x17
    3440:	40 81       	ld	r20, Z
    3442:	c9 01       	movw	r24, r18
    3444:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3446:	02 c0       	rjmp	.+4      	; 0x344c <HardwareSerial::begin(unsigned long)+0xc8>
    3448:	88 0f       	add	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	0a 94       	dec	r0
    344e:	e2 f7       	brpl	.-8      	; 0x3448 <HardwareSerial::begin(unsigned long)+0xc4>
    3450:	48 2b       	or	r20, r24
    3452:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    3454:	ee 89       	ldd	r30, Y+22	; 0x16
    3456:	ff 89       	ldd	r31, Y+23	; 0x17
    3458:	80 81       	ld	r24, Z
    345a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <HardwareSerial::begin(unsigned long)+0xde>
    345e:	22 0f       	add	r18, r18
    3460:	33 1f       	adc	r19, r19
    3462:	0a 94       	dec	r0
    3464:	e2 f7       	brpl	.-8      	; 0x345e <HardwareSerial::begin(unsigned long)+0xda>
    3466:	20 95       	com	r18
    3468:	28 23       	and	r18, r24
    346a:	20 83       	st	Z, r18
}
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	bf 90       	pop	r11
    347c:	af 90       	pop	r10
    347e:	08 95       	ret

00003480 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    3486:	1e 96       	adiw	r26, 0x0e	; 14
    3488:	8d 91       	ld	r24, X+
    348a:	9c 91       	ld	r25, X
    348c:	1f 97       	sbiw	r26, 0x0f	; 15
    348e:	ec 01       	movw	r28, r24
    3490:	c0 5c       	subi	r28, 0xC0	; 192
    3492:	df 4f       	sbci	r29, 0xFF	; 255
    3494:	fc 01       	movw	r30, r24
    3496:	ee 5b       	subi	r30, 0xBE	; 190
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	28 81       	ld	r18, Y
    349c:	39 81       	ldd	r19, Y+1	; 0x01
    349e:	80 81       	ld	r24, Z
    34a0:	91 81       	ldd	r25, Z+1	; 0x01
    34a2:	28 17       	cp	r18, r24
    34a4:	39 07       	cpc	r19, r25
    34a6:	c9 f7       	brne	.-14     	; 0x349a <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    34a8:	56 96       	adiw	r26, 0x16	; 22
    34aa:	ed 91       	ld	r30, X+
    34ac:	fc 91       	ld	r31, X
    34ae:	57 97       	sbiw	r26, 0x17	; 23
    34b0:	40 81       	ld	r20, Z
    34b2:	21 e0       	ldi	r18, 0x01	; 1
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	c9 01       	movw	r24, r18
    34b8:	5c 96       	adiw	r26, 0x1c	; 28
    34ba:	0c 90       	ld	r0, X
    34bc:	5c 97       	sbiw	r26, 0x1c	; 28
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <HardwareSerial::end()+0x44>
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	0a 94       	dec	r0
    34c6:	e2 f7       	brpl	.-8      	; 0x34c0 <HardwareSerial::end()+0x40>
    34c8:	80 95       	com	r24
    34ca:	84 23       	and	r24, r20
    34cc:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    34ce:	56 96       	adiw	r26, 0x16	; 22
    34d0:	ed 91       	ld	r30, X+
    34d2:	fc 91       	ld	r31, X
    34d4:	57 97       	sbiw	r26, 0x17	; 23
    34d6:	40 81       	ld	r20, Z
    34d8:	c9 01       	movw	r24, r18
    34da:	5d 96       	adiw	r26, 0x1d	; 29
    34dc:	0c 90       	ld	r0, X
    34de:	5d 97       	sbiw	r26, 0x1d	; 29
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <HardwareSerial::end()+0x66>
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	0a 94       	dec	r0
    34e8:	e2 f7       	brpl	.-8      	; 0x34e2 <HardwareSerial::end()+0x62>
    34ea:	80 95       	com	r24
    34ec:	84 23       	and	r24, r20
    34ee:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    34f0:	56 96       	adiw	r26, 0x16	; 22
    34f2:	ed 91       	ld	r30, X+
    34f4:	fc 91       	ld	r31, X
    34f6:	57 97       	sbiw	r26, 0x17	; 23
    34f8:	40 81       	ld	r20, Z
    34fa:	c9 01       	movw	r24, r18
    34fc:	5e 96       	adiw	r26, 0x1e	; 30
    34fe:	0c 90       	ld	r0, X
    3500:	5e 97       	sbiw	r26, 0x1e	; 30
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <HardwareSerial::end()+0x88>
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	0a 94       	dec	r0
    350a:	e2 f7       	brpl	.-8      	; 0x3504 <HardwareSerial::end()+0x84>
    350c:	80 95       	com	r24
    350e:	84 23       	and	r24, r20
    3510:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    3512:	56 96       	adiw	r26, 0x16	; 22
    3514:	ed 91       	ld	r30, X+
    3516:	fc 91       	ld	r31, X
    3518:	57 97       	sbiw	r26, 0x17	; 23
    351a:	80 81       	ld	r24, Z
    351c:	5f 96       	adiw	r26, 0x1f	; 31
    351e:	0c 90       	ld	r0, X
    3520:	5f 97       	sbiw	r26, 0x1f	; 31
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <HardwareSerial::end()+0xa8>
    3524:	22 0f       	add	r18, r18
    3526:	33 1f       	adc	r19, r19
    3528:	0a 94       	dec	r0
    352a:	e2 f7       	brpl	.-8      	; 0x3524 <HardwareSerial::end()+0xa4>
    352c:	20 95       	com	r18
    352e:	28 23       	and	r18, r24
    3530:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    3532:	1c 96       	adiw	r26, 0x0c	; 12
    3534:	ed 91       	ld	r30, X+
    3536:	fc 91       	ld	r31, X
    3538:	1d 97       	sbiw	r26, 0x0d	; 13
    353a:	ee 5b       	subi	r30, 0xBE	; 190
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	92 93       	st	-Z, r25
    3544:	82 93       	st	-Z, r24
}
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	08 95       	ret

0000354c <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    354c:	dc 01       	movw	r26, r24
    354e:	1c 96       	adiw	r26, 0x0c	; 12
    3550:	ed 91       	ld	r30, X+
    3552:	fc 91       	ld	r31, X
    3554:	1d 97       	sbiw	r26, 0x0d	; 13
    3556:	e0 5c       	subi	r30, 0xC0	; 192
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	21 91       	ld	r18, Z+
    355c:	31 91       	ld	r19, Z+
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01
    3562:	28 1b       	sub	r18, r24
    3564:	39 0b       	sbc	r19, r25
    3566:	2f 73       	andi	r18, 0x3F	; 63
    3568:	30 70       	andi	r19, 0x00	; 0
}
    356a:	c9 01       	movw	r24, r18
    356c:	08 95       	ret

0000356e <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    356e:	dc 01       	movw	r26, r24
    3570:	1c 96       	adiw	r26, 0x0c	; 12
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	1d 97       	sbiw	r26, 0x0d	; 13
    3578:	e0 5c       	subi	r30, 0xC0	; 192
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	20 81       	ld	r18, Z
    357e:	31 81       	ldd	r19, Z+1	; 0x01
    3580:	e0 54       	subi	r30, 0x40	; 64
    3582:	f0 40       	sbci	r31, 0x00	; 0
    3584:	df 01       	movw	r26, r30
    3586:	ae 5b       	subi	r26, 0xBE	; 190
    3588:	bf 4f       	sbci	r27, 0xFF	; 255
    358a:	8d 91       	ld	r24, X+
    358c:	9c 91       	ld	r25, X
    358e:	11 97       	sbiw	r26, 0x01	; 1
    3590:	28 17       	cp	r18, r24
    3592:	39 07       	cpc	r19, r25
    3594:	19 f4       	brne	.+6      	; 0x359c <HardwareSerial::peek()+0x2e>
    3596:	2f ef       	ldi	r18, 0xFF	; 255
    3598:	3f ef       	ldi	r19, 0xFF	; 255
    359a:	07 c0       	rjmp	.+14     	; 0x35aa <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    359c:	8d 91       	ld	r24, X+
    359e:	9c 91       	ld	r25, X
    35a0:	e8 0f       	add	r30, r24
    35a2:	f9 1f       	adc	r31, r25
    35a4:	80 81       	ld	r24, Z
    35a6:	28 2f       	mov	r18, r24
    35a8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    35aa:	c9 01       	movw	r24, r18
    35ac:	08 95       	ret

000035ae <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    35ae:	dc 01       	movw	r26, r24
    35b0:	1c 96       	adiw	r26, 0x0c	; 12
    35b2:	ed 91       	ld	r30, X+
    35b4:	fc 91       	ld	r31, X
    35b6:	1d 97       	sbiw	r26, 0x0d	; 13
    35b8:	e0 5c       	subi	r30, 0xC0	; 192
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	20 81       	ld	r18, Z
    35be:	31 81       	ldd	r19, Z+1	; 0x01
    35c0:	e0 54       	subi	r30, 0x40	; 64
    35c2:	f0 40       	sbci	r31, 0x00	; 0
    35c4:	df 01       	movw	r26, r30
    35c6:	ae 5b       	subi	r26, 0xBE	; 190
    35c8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ca:	8d 91       	ld	r24, X+
    35cc:	9c 91       	ld	r25, X
    35ce:	11 97       	sbiw	r26, 0x01	; 1
    35d0:	28 17       	cp	r18, r24
    35d2:	39 07       	cpc	r19, r25
    35d4:	19 f4       	brne	.+6      	; 0x35dc <HardwareSerial::read()+0x2e>
    35d6:	2f ef       	ldi	r18, 0xFF	; 255
    35d8:	3f ef       	ldi	r19, 0xFF	; 255
    35da:	10 c0       	rjmp	.+32     	; 0x35fc <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    35dc:	8d 91       	ld	r24, X+
    35de:	9c 91       	ld	r25, X
    35e0:	11 97       	sbiw	r26, 0x01	; 1
    35e2:	e8 0f       	add	r30, r24
    35e4:	f9 1f       	adc	r31, r25
    35e6:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    35e8:	8d 91       	ld	r24, X+
    35ea:	9c 91       	ld	r25, X
    35ec:	11 97       	sbiw	r26, 0x01	; 1
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	8f 73       	andi	r24, 0x3F	; 63
    35f2:	90 70       	andi	r25, 0x00	; 0
    35f4:	11 96       	adiw	r26, 0x01	; 1
    35f6:	9c 93       	st	X, r25
    35f8:	8e 93       	st	-X, r24
    return c;
    35fa:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    35fc:	c9 01       	movw	r24, r18
    35fe:	08 95       	ret

00003600 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    3600:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    3602:	91 96       	adiw	r26, 0x21	; 33
    3604:	8c 91       	ld	r24, X
    3606:	91 97       	sbiw	r26, 0x21	; 33
    3608:	88 23       	and	r24, r24
    360a:	39 f0       	breq	.+14     	; 0x361a <HardwareSerial::flush()+0x1a>
    360c:	54 96       	adiw	r26, 0x14	; 20
    360e:	ed 91       	ld	r30, X+
    3610:	fc 91       	ld	r31, X
    3612:	55 97       	sbiw	r26, 0x15	; 21
    3614:	80 81       	ld	r24, Z
    3616:	86 ff       	sbrs	r24, 6
    3618:	f9 cf       	rjmp	.-14     	; 0x360c <HardwareSerial::flush()+0xc>
  transmitting = false;
    361a:	91 96       	adiw	r26, 0x21	; 33
    361c:	1c 92       	st	X, r1
}
    361e:	08 95       	ret

00003620 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3626:	ee 85       	ldd	r30, Y+14	; 0x0e
    3628:	ff 85       	ldd	r31, Y+15	; 0x0f
    362a:	e0 5c       	subi	r30, 0xC0	; 192
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	20 81       	ld	r18, Z
    3630:	31 81       	ldd	r19, Z+1	; 0x01
    3632:	e0 54       	subi	r30, 0x40	; 64
    3634:	f0 40       	sbci	r31, 0x00	; 0
    3636:	2f 5f       	subi	r18, 0xFF	; 255
    3638:	3f 4f       	sbci	r19, 0xFF	; 255
    363a:	2f 73       	andi	r18, 0x3F	; 63
    363c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    363e:	df 01       	movw	r26, r30
    3640:	ae 5b       	subi	r26, 0xBE	; 190
    3642:	bf 4f       	sbci	r27, 0xFF	; 255
    3644:	8d 91       	ld	r24, X+
    3646:	9c 91       	ld	r25, X
    3648:	11 97       	sbiw	r26, 0x01	; 1
    364a:	28 17       	cp	r18, r24
    364c:	39 07       	cpc	r19, r25
    364e:	d1 f3       	breq	.-12     	; 0x3644 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    3650:	e0 5c       	subi	r30, 0xC0	; 192
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	e0 54       	subi	r30, 0x40	; 64
    365a:	f0 40       	sbci	r31, 0x00	; 0
    365c:	e8 0f       	add	r30, r24
    365e:	f9 1f       	adc	r31, r25
    3660:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    3662:	ee 85       	ldd	r30, Y+14	; 0x0e
    3664:	ff 85       	ldd	r31, Y+15	; 0x0f
    3666:	e0 5c       	subi	r30, 0xC0	; 192
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	31 83       	std	Z+1, r19	; 0x01
    366c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    366e:	ee 89       	ldd	r30, Y+22	; 0x16
    3670:	ff 89       	ldd	r31, Y+23	; 0x17
    3672:	20 81       	ld	r18, Z
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0f 8c       	ldd	r0, Y+31	; 0x1f
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <HardwareSerial::write(unsigned char)+0x60>
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	0a 94       	dec	r0
    3682:	e2 f7       	brpl	.-8      	; 0x367c <HardwareSerial::write(unsigned char)+0x5c>
    3684:	28 2b       	or	r18, r24
    3686:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    368c:	ec 89       	ldd	r30, Y+20	; 0x14
    368e:	fd 89       	ldd	r31, Y+21	; 0x15
    3690:	80 81       	ld	r24, Z
    3692:	80 64       	ori	r24, 0x40	; 64
    3694:	80 83       	st	Z, r24
  
  return 1;
}
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	08 95       	ret

000036a0 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    36a0:	10 92 c7 02 	sts	0x02C7, r1
    36a4:	10 92 c6 02 	sts	0x02C6, r1
    36a8:	88 ee       	ldi	r24, 0xE8	; 232
    36aa:	93 e0       	ldi	r25, 0x03	; 3
    36ac:	a0 e0       	ldi	r26, 0x00	; 0
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	80 93 c8 02 	sts	0x02C8, r24
    36b4:	90 93 c9 02 	sts	0x02C9, r25
    36b8:	a0 93 ca 02 	sts	0x02CA, r26
    36bc:	b0 93 cb 02 	sts	0x02CB, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    36c0:	87 e1       	ldi	r24, 0x17	; 23
    36c2:	91 e0       	ldi	r25, 0x01	; 1
    36c4:	90 93 c5 02 	sts	0x02C5, r25
    36c8:	80 93 c4 02 	sts	0x02C4, r24
{
  _rx_buffer = rx_buffer;
    36cc:	8c e3       	ldi	r24, 0x3C	; 60
    36ce:	92 e0       	ldi	r25, 0x02	; 2
    36d0:	90 93 d1 02 	sts	0x02D1, r25
    36d4:	80 93 d0 02 	sts	0x02D0, r24
  _tx_buffer = tx_buffer;
    36d8:	80 e8       	ldi	r24, 0x80	; 128
    36da:	92 e0       	ldi	r25, 0x02	; 2
    36dc:	90 93 d3 02 	sts	0x02D3, r25
    36e0:	80 93 d2 02 	sts	0x02D2, r24
  _ubrrh = ubrrh;
    36e4:	85 ec       	ldi	r24, 0xC5	; 197
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	90 93 d5 02 	sts	0x02D5, r25
    36ec:	80 93 d4 02 	sts	0x02D4, r24
  _ubrrl = ubrrl;
    36f0:	84 ec       	ldi	r24, 0xC4	; 196
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	90 93 d7 02 	sts	0x02D7, r25
    36f8:	80 93 d6 02 	sts	0x02D6, r24
  _ucsra = ucsra;
    36fc:	80 ec       	ldi	r24, 0xC0	; 192
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	90 93 d9 02 	sts	0x02D9, r25
    3704:	80 93 d8 02 	sts	0x02D8, r24
  _ucsrb = ucsrb;
    3708:	81 ec       	ldi	r24, 0xC1	; 193
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	90 93 db 02 	sts	0x02DB, r25
    3710:	80 93 da 02 	sts	0x02DA, r24
  _ucsrc = ucsrc;
    3714:	82 ec       	ldi	r24, 0xC2	; 194
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	90 93 dd 02 	sts	0x02DD, r25
    371c:	80 93 dc 02 	sts	0x02DC, r24
  _udr = udr;
    3720:	86 ec       	ldi	r24, 0xC6	; 198
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	90 93 df 02 	sts	0x02DF, r25
    3728:	80 93 de 02 	sts	0x02DE, r24
  _rxen = rxen;
    372c:	84 e0       	ldi	r24, 0x04	; 4
    372e:	80 93 e0 02 	sts	0x02E0, r24
  _txen = txen;
    3732:	83 e0       	ldi	r24, 0x03	; 3
    3734:	80 93 e1 02 	sts	0x02E1, r24
  _rxcie = rxcie;
    3738:	87 e0       	ldi	r24, 0x07	; 7
    373a:	80 93 e2 02 	sts	0x02E2, r24
  _udrie = udrie;
    373e:	85 e0       	ldi	r24, 0x05	; 5
    3740:	80 93 e3 02 	sts	0x02E3, r24
  _u2x = u2x;
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	80 93 e4 02 	sts	0x02E4, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    374a:	08 95       	ret

0000374c <main>:
#include <Arduino.h>

int main(void)
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
{
	init();
    3750:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3754:	0e 94 52 13 	call	0x26a4	; 0x26a4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3758:	c4 e7       	ldi	r28, 0x74	; 116
    375a:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    375c:	0e 94 a4 12 	call	0x2548	; 0x2548 <loop>
		if (serialEventRun) serialEventRun();
    3760:	20 97       	sbiw	r28, 0x00	; 0
    3762:	e1 f3       	breq	.-8      	; 0x375c <main+0x10>
    3764:	0e 94 74 19 	call	0x32e8	; 0x32e8 <serialEventRun()>
    3768:	f9 cf       	rjmp	.-14     	; 0x375c <main+0x10>

0000376a <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    376a:	cf 92       	push	r12
    376c:	df 92       	push	r13
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	7c 01       	movw	r14, r24
    377c:	6b 01       	movw	r12, r22
    377e:	8a 01       	movw	r16, r20
    3780:	c0 e0       	ldi	r28, 0x00	; 0
    3782:	d0 e0       	ldi	r29, 0x00	; 0
    3784:	0f c0       	rjmp	.+30     	; 0x37a4 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    3786:	d6 01       	movw	r26, r12
    3788:	6d 91       	ld	r22, X+
    378a:	6d 01       	movw	r12, r26
    378c:	d7 01       	movw	r26, r14
    378e:	ed 91       	ld	r30, X+
    3790:	fc 91       	ld	r31, X
    3792:	01 90       	ld	r0, Z+
    3794:	f0 81       	ld	r31, Z
    3796:	e0 2d       	mov	r30, r0
    3798:	c7 01       	movw	r24, r14
    379a:	09 95       	icall
    379c:	c8 0f       	add	r28, r24
    379e:	d9 1f       	adc	r29, r25
    37a0:	01 50       	subi	r16, 0x01	; 1
    37a2:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    37a4:	01 15       	cp	r16, r1
    37a6:	11 05       	cpc	r17, r1
    37a8:	71 f7       	brne	.-36     	; 0x3786 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    37aa:	ce 01       	movw	r24, r28
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	08 95       	ret

000037be <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    37cc:	8b 01       	movw	r16, r22
    37ce:	c0 e0       	ldi	r28, 0x00	; 0
    37d0:	d0 e0       	ldi	r29, 0x00	; 0
    37d2:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    37d4:	0f 5f       	subi	r16, 0xFF	; 255
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    37da:	66 23       	and	r22, r22
    37dc:	59 f0       	breq	.+22     	; 0x37f4 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    37de:	d7 01       	movw	r26, r14
    37e0:	ed 91       	ld	r30, X+
    37e2:	fc 91       	ld	r31, X
    37e4:	01 90       	ld	r0, Z+
    37e6:	f0 81       	ld	r31, Z
    37e8:	e0 2d       	mov	r30, r0
    37ea:	c7 01       	movw	r24, r14
    37ec:	09 95       	icall
    37ee:	c8 0f       	add	r28, r24
    37f0:	d9 1f       	adc	r29, r25
    37f2:	ef cf       	rjmp	.-34     	; 0x37d2 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    37f4:	ce 01       	movw	r24, r28
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	ff 90       	pop	r15
    3800:	ef 90       	pop	r14
    3802:	08 95       	ret

00003804 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    3804:	dc 01       	movw	r26, r24
{
  return write(c);
    3806:	ed 91       	ld	r30, X+
    3808:	fc 91       	ld	r31, X
    380a:	01 90       	ld	r0, Z+
    380c:	f0 81       	ld	r31, Z
    380e:	e0 2d       	mov	r30, r0
    3810:	09 95       	icall
}
    3812:	08 95       	ret

00003814 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    381e:	dc 01       	movw	r26, r24
    3820:	ed 91       	ld	r30, X+
    3822:	fc 91       	ld	r31, X
    3824:	01 90       	ld	r0, Z+
    3826:	f0 81       	ld	r31, Z
    3828:	e0 2d       	mov	r30, r0
    382a:	6d e0       	ldi	r22, 0x0D	; 13
    382c:	09 95       	icall
    382e:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    3830:	d8 01       	movw	r26, r16
    3832:	ed 91       	ld	r30, X+
    3834:	fc 91       	ld	r31, X
    3836:	01 90       	ld	r0, Z+
    3838:	f0 81       	ld	r31, Z
    383a:	e0 2d       	mov	r30, r0
    383c:	c8 01       	movw	r24, r16
    383e:	6a e0       	ldi	r22, 0x0A	; 10
    3840:	09 95       	icall
    3842:	9c 01       	movw	r18, r24
    3844:	2e 0d       	add	r18, r14
    3846:	3f 1d       	adc	r19, r15
    3848:	c9 01       	movw	r24, r18
    384a:	1f 91       	pop	r17
    384c:	0f 91       	pop	r16
    384e:	ff 90       	pop	r15
    3850:	ef 90       	pop	r14
    3852:	08 95       	ret

00003854 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    3854:	ef 92       	push	r14
    3856:	ff 92       	push	r15
    3858:	0f 93       	push	r16
    385a:	1f 93       	push	r17
    385c:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    385e:	0e 94 df 1b 	call	0x37be	; 0x37be <Print::print(__FlashStringHelper const*)>
    3862:	8c 01       	movw	r16, r24
  n += println();
    3864:	c7 01       	movw	r24, r14
    3866:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    386a:	9c 01       	movw	r18, r24
    386c:	20 0f       	add	r18, r16
    386e:	31 1f       	adc	r19, r17
  return n;
}
    3870:	c9 01       	movw	r24, r18
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	ff 90       	pop	r15
    3878:	ef 90       	pop	r14
    387a:	08 95       	ret

0000387c <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    3882:	61 15       	cp	r22, r1
    3884:	71 05       	cpc	r23, r1
    3886:	19 f4       	brne	.+6      	; 0x388e <Print::write(char const*)+0x12>
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    388e:	db 01       	movw	r26, r22
    3890:	0d 90       	ld	r0, X+
    3892:	00 20       	and	r0, r0
    3894:	e9 f7       	brne	.-6      	; 0x3890 <Print::write(char const*)+0x14>
    3896:	11 97       	sbiw	r26, 0x01	; 1
    3898:	a6 1b       	sub	r26, r22
    389a:	b7 0b       	sbc	r27, r23
    389c:	e8 81       	ld	r30, Y
    389e:	f9 81       	ldd	r31, Y+1	; 0x01
    38a0:	02 80       	ldd	r0, Z+2	; 0x02
    38a2:	f3 81       	ldd	r31, Z+3	; 0x03
    38a4:	e0 2d       	mov	r30, r0
    38a6:	ad 01       	movw	r20, r26
    38a8:	09 95       	icall
    38aa:	9c 01       	movw	r18, r24
    }
    38ac:	c9 01       	movw	r24, r18
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	08 95       	ret

000038b4 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    38b4:	4f 92       	push	r4
    38b6:	5f 92       	push	r5
    38b8:	7f 92       	push	r7
    38ba:	8f 92       	push	r8
    38bc:	9f 92       	push	r9
    38be:	af 92       	push	r10
    38c0:	bf 92       	push	r11
    38c2:	cf 92       	push	r12
    38c4:	df 92       	push	r13
    38c6:	ef 92       	push	r14
    38c8:	ff 92       	push	r15
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	a1 97       	sbiw	r28, 0x21	; 33
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	2c 01       	movw	r4, r24
    38e4:	74 2e       	mov	r7, r20
    38e6:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    38e8:	22 30       	cpi	r18, 0x02	; 2
    38ea:	08 f4       	brcc	.+2      	; 0x38ee <Print::printNumber(unsigned long, unsigned char)+0x3a>
    38ec:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    38ee:	19 a2       	std	Y+33, r1	; 0x21
    38f0:	31 e2       	ldi	r19, 0x21	; 33
    38f2:	c3 2e       	mov	r12, r19
    38f4:	d1 2c       	mov	r13, r1
    38f6:	cc 0e       	add	r12, r28
    38f8:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    38fa:	82 2e       	mov	r8, r18
    38fc:	99 24       	eor	r9, r9
    38fe:	aa 24       	eor	r10, r10
    3900:	bb 24       	eor	r11, r11
    3902:	67 2d       	mov	r22, r7
    3904:	75 2f       	mov	r23, r21
    3906:	a5 01       	movw	r20, r10
    3908:	94 01       	movw	r18, r8
    390a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__udivmodsi4>
    390e:	79 01       	movw	r14, r18
    3910:	8a 01       	movw	r16, r20
    char c = m - base * n;
    3912:	c8 01       	movw	r24, r16
    3914:	b7 01       	movw	r22, r14
    3916:	a5 01       	movw	r20, r10
    3918:	94 01       	movw	r18, r8
    391a:	0e 94 57 1e 	call	0x3cae	; 0x3cae <__mulsi3>
    391e:	47 2d       	mov	r20, r7
    3920:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3922:	08 94       	sec
    3924:	c1 08       	sbc	r12, r1
    3926:	d1 08       	sbc	r13, r1
    3928:	4a 30       	cpi	r20, 0x0A	; 10
    392a:	14 f4       	brge	.+4      	; 0x3930 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    392c:	40 5d       	subi	r20, 0xD0	; 208
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    3930:	49 5c       	subi	r20, 0xC9	; 201
    3932:	f6 01       	movw	r30, r12
    3934:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3936:	e1 14       	cp	r14, r1
    3938:	f1 04       	cpc	r15, r1
    393a:	01 05       	cpc	r16, r1
    393c:	11 05       	cpc	r17, r1
    393e:	21 f0       	breq	.+8      	; 0x3948 <Print::printNumber(unsigned long, unsigned char)+0x94>
    3940:	7e 2c       	mov	r7, r14
    3942:	5f 2d       	mov	r21, r15
    3944:	c8 01       	movw	r24, r16
    3946:	dd cf       	rjmp	.-70     	; 0x3902 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3948:	c2 01       	movw	r24, r4
    394a:	b6 01       	movw	r22, r12
    394c:	0e 94 3e 1c 	call	0x387c	; 0x387c <Print::write(char const*)>
}
    3950:	a1 96       	adiw	r28, 0x21	; 33
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	ff 90       	pop	r15
    3966:	ef 90       	pop	r14
    3968:	df 90       	pop	r13
    396a:	cf 90       	pop	r12
    396c:	bf 90       	pop	r11
    396e:	af 90       	pop	r10
    3970:	9f 90       	pop	r9
    3972:	8f 90       	pop	r8
    3974:	7f 90       	pop	r7
    3976:	5f 90       	pop	r5
    3978:	4f 90       	pop	r4
    397a:	08 95       	ret

0000397c <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    397c:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    397e:	21 15       	cp	r18, r1
    3980:	31 05       	cpc	r19, r1
    3982:	41 f4       	brne	.+16     	; 0x3994 <Print::print(unsigned long, int)+0x18>
    3984:	ed 91       	ld	r30, X+
    3986:	fc 91       	ld	r31, X
    3988:	01 90       	ld	r0, Z+
    398a:	f0 81       	ld	r31, Z
    398c:	e0 2d       	mov	r30, r0
    398e:	64 2f       	mov	r22, r20
    3990:	09 95       	icall
    3992:	08 95       	ret
  else return printNumber(n, base);
    3994:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <Print::printNumber(unsigned long, unsigned char)>
}
    3998:	08 95       	ret

0000399a <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    399a:	ef 92       	push	r14
    399c:	ff 92       	push	r15
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    39a4:	7b 01       	movw	r14, r22
    39a6:	00 e0       	ldi	r16, 0x00	; 0
    39a8:	10 e0       	ldi	r17, 0x00	; 0
    39aa:	b8 01       	movw	r22, r16
    39ac:	a7 01       	movw	r20, r14
    39ae:	0e 94 be 1c 	call	0x397c	; 0x397c <Print::print(unsigned long, int)>
}
    39b2:	1f 91       	pop	r17
    39b4:	0f 91       	pop	r16
    39b6:	ff 90       	pop	r15
    39b8:	ef 90       	pop	r14
    39ba:	08 95       	ret

000039bc <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    39c6:	e6 2e       	mov	r14, r22
    39c8:	ff 24       	eor	r15, r15
    39ca:	00 e0       	ldi	r16, 0x00	; 0
    39cc:	10 e0       	ldi	r17, 0x00	; 0
    39ce:	b8 01       	movw	r22, r16
    39d0:	a7 01       	movw	r20, r14
    39d2:	0e 94 be 1c 	call	0x397c	; 0x397c <Print::print(unsigned long, int)>
}
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	08 95       	ret

000039e0 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    39e0:	cf 92       	push	r12
    39e2:	df 92       	push	r13
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	ec 01       	movw	r28, r24
    39f2:	6a 01       	movw	r12, r20
    39f4:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    39f6:	21 15       	cp	r18, r1
    39f8:	31 05       	cpc	r19, r1
    39fa:	41 f4       	brne	.+16     	; 0x3a0c <Print::print(long, int)+0x2c>
    return write(n);
    39fc:	e8 81       	ld	r30, Y
    39fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3a00:	01 90       	ld	r0, Z+
    3a02:	f0 81       	ld	r31, Z
    3a04:	e0 2d       	mov	r30, r0
    3a06:	64 2f       	mov	r22, r20
    3a08:	09 95       	icall
    3a0a:	1f c0       	rjmp	.+62     	; 0x3a4a <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    3a0c:	2a 30       	cpi	r18, 0x0A	; 10
    3a0e:	31 05       	cpc	r19, r1
    3a10:	d1 f4       	brne	.+52     	; 0x3a46 <Print::print(long, int)+0x66>
    if (n < 0) {
    3a12:	77 ff       	sbrs	r23, 7
    3a14:	17 c0       	rjmp	.+46     	; 0x3a44 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3a16:	e8 81       	ld	r30, Y
    3a18:	f9 81       	ldd	r31, Y+1	; 0x01
    3a1a:	01 90       	ld	r0, Z+
    3a1c:	f0 81       	ld	r31, Z
    3a1e:	e0 2d       	mov	r30, r0
    3a20:	6d e2       	ldi	r22, 0x2D	; 45
    3a22:	09 95       	icall
    3a24:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    3a26:	44 27       	eor	r20, r20
    3a28:	55 27       	eor	r21, r21
    3a2a:	ba 01       	movw	r22, r20
    3a2c:	4c 19       	sub	r20, r12
    3a2e:	5d 09       	sbc	r21, r13
    3a30:	6e 09       	sbc	r22, r14
    3a32:	7f 09       	sbc	r23, r15
    3a34:	ce 01       	movw	r24, r28
    3a36:	2a e0       	ldi	r18, 0x0A	; 10
    3a38:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <Print::printNumber(unsigned long, unsigned char)>
    3a3c:	98 01       	movw	r18, r16
    3a3e:	28 0f       	add	r18, r24
    3a40:	39 1f       	adc	r19, r25
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    3a44:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    3a46:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <Print::printNumber(unsigned long, unsigned char)>
    3a4a:	9c 01       	movw	r18, r24
  }
}
    3a4c:	c9 01       	movw	r24, r18
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	df 90       	pop	r13
    3a5c:	cf 90       	pop	r12
    3a5e:	08 95       	ret

00003a60 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	7b 01       	movw	r14, r22
    3a6a:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    3a6c:	00 27       	eor	r16, r16
    3a6e:	f7 fc       	sbrc	r15, 7
    3a70:	00 95       	com	r16
    3a72:	10 2f       	mov	r17, r16
    3a74:	b8 01       	movw	r22, r16
    3a76:	a7 01       	movw	r20, r14
    3a78:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <Print::print(long, int)>
}
    3a7c:	1f 91       	pop	r17
    3a7e:	0f 91       	pop	r16
    3a80:	ff 90       	pop	r15
    3a82:	ef 90       	pop	r14
    3a84:	08 95       	ret

00003a86 <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    3a86:	ef 92       	push	r14
    3a88:	ff 92       	push	r15
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3a90:	0e 94 3e 1c 	call	0x387c	; 0x387c <Print::write(char const*)>
    3a94:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    3a96:	c7 01       	movw	r24, r14
    3a98:	0e 94 0a 1c 	call	0x3814	; 0x3814 <Print::println()>
    3a9c:	08 0f       	add	r16, r24
    3a9e:	19 1f       	adc	r17, r25
  return n;
}
    3aa0:	c8 01       	movw	r24, r16
    3aa2:	1f 91       	pop	r17
    3aa4:	0f 91       	pop	r16
    3aa6:	ff 90       	pop	r15
    3aa8:	ef 90       	pop	r14
    3aaa:	08 95       	ret

00003aac <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    3aac:	fc 01       	movw	r30, r24
    3aae:	44 83       	std	Z+4, r20	; 0x04
    3ab0:	55 83       	std	Z+5, r21	; 0x05
    3ab2:	66 83       	std	Z+6, r22	; 0x06
    3ab4:	77 83       	std	Z+7, r23	; 0x07
}
    3ab6:	08 95       	ret

00003ab8 <Stream::timedRead()>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
    3abe:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <millis>
    3ac2:	68 87       	std	Y+8, r22	; 0x08
    3ac4:	79 87       	std	Y+9, r23	; 0x09
    3ac6:	8a 87       	std	Y+10, r24	; 0x0a
    3ac8:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
    3aca:	e8 81       	ld	r30, Y
    3acc:	f9 81       	ldd	r31, Y+1	; 0x01
    3ace:	06 80       	ldd	r0, Z+6	; 0x06
    3ad0:	f7 81       	ldd	r31, Z+7	; 0x07
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	09 95       	icall
    3ad8:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
    3ada:	97 ff       	sbrs	r25, 7
    3adc:	15 c0       	rjmp	.+42     	; 0x3b08 <Stream::timedRead()+0x50>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    3ade:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <millis>
    3ae2:	28 85       	ldd	r18, Y+8	; 0x08
    3ae4:	39 85       	ldd	r19, Y+9	; 0x09
    3ae6:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ae8:	5b 85       	ldd	r21, Y+11	; 0x0b
    3aea:	62 1b       	sub	r22, r18
    3aec:	73 0b       	sbc	r23, r19
    3aee:	84 0b       	sbc	r24, r20
    3af0:	95 0b       	sbc	r25, r21
    3af2:	2c 81       	ldd	r18, Y+4	; 0x04
    3af4:	3d 81       	ldd	r19, Y+5	; 0x05
    3af6:	4e 81       	ldd	r20, Y+6	; 0x06
    3af8:	5f 81       	ldd	r21, Y+7	; 0x07
    3afa:	62 17       	cp	r22, r18
    3afc:	73 07       	cpc	r23, r19
    3afe:	84 07       	cpc	r24, r20
    3b00:	95 07       	cpc	r25, r21
    3b02:	18 f3       	brcs	.-58     	; 0x3aca <Stream::timedRead()+0x12>
    3b04:	2f ef       	ldi	r18, 0xFF	; 255
    3b06:	3f ef       	ldi	r19, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    3b08:	c9 01       	movw	r24, r18
    3b0a:	df 91       	pop	r29
    3b0c:	cf 91       	pop	r28
    3b0e:	08 95       	ret

00003b10 <Stream::readBytesUntil(char, char*, unsigned int)>:

// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
    3b10:	af 92       	push	r10
    3b12:	bf 92       	push	r11
    3b14:	cf 92       	push	r12
    3b16:	df 92       	push	r13
    3b18:	ef 92       	push	r14
    3b1a:	ff 92       	push	r15
    3b1c:	0f 93       	push	r16
    3b1e:	1f 93       	push	r17
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	5c 01       	movw	r10, r24
    3b26:	7a 01       	movw	r14, r20
    3b28:	89 01       	movw	r16, r18
{
  if (length < 1) return 0;
    3b2a:	21 15       	cp	r18, r1
    3b2c:	31 05       	cpc	r19, r1
    3b2e:	19 f4       	brne	.+6      	; 0x3b36 <Stream::readBytesUntil(char, char*, unsigned int)+0x26>
    3b30:	c0 e0       	ldi	r28, 0x00	; 0
    3b32:	d0 e0       	ldi	r29, 0x00	; 0
    3b34:	16 c0       	rjmp	.+44     	; 0x3b62 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    3b36:	c0 e0       	ldi	r28, 0x00	; 0
    3b38:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    3b3a:	c6 2e       	mov	r12, r22
    3b3c:	dd 24       	eor	r13, r13
    3b3e:	c7 fc       	sbrc	r12, 7
    3b40:	d0 94       	com	r13
    3b42:	0c c0       	rjmp	.+24     	; 0x3b5c <Stream::readBytesUntil(char, char*, unsigned int)+0x4c>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    3b44:	c5 01       	movw	r24, r10
    3b46:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <Stream::timedRead()>
    if (c < 0 || c == terminator) break;
    3b4a:	97 fd       	sbrc	r25, 7
    3b4c:	0a c0       	rjmp	.+20     	; 0x3b62 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    3b4e:	8c 15       	cp	r24, r12
    3b50:	9d 05       	cpc	r25, r13
    3b52:	39 f0       	breq	.+14     	; 0x3b62 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    *buffer++ = (char)c;
    3b54:	f7 01       	movw	r30, r14
    3b56:	81 93       	st	Z+, r24
    3b58:	7f 01       	movw	r14, r30
    index++;
    3b5a:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    3b5c:	c0 17       	cp	r28, r16
    3b5e:	d1 07       	cpc	r29, r17
    3b60:	88 f3       	brcs	.-30     	; 0x3b44 <Stream::readBytesUntil(char, char*, unsigned int)+0x34>
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    3b62:	ce 01       	movw	r24, r28
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	bf 90       	pop	r11
    3b76:	af 90       	pop	r10
    3b78:	08 95       	ret

00003b7a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    3b7a:	1f 92       	push	r1
    3b7c:	0f 92       	push	r0
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	0f 92       	push	r0
    3b82:	11 24       	eor	r1, r1
    3b84:	2f 93       	push	r18
    3b86:	3f 93       	push	r19
    3b88:	4f 93       	push	r20
    3b8a:	5f 93       	push	r21
    3b8c:	6f 93       	push	r22
    3b8e:	7f 93       	push	r23
    3b90:	8f 93       	push	r24
    3b92:	9f 93       	push	r25
    3b94:	af 93       	push	r26
    3b96:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3b98:	20 91 ea 02 	lds	r18, 0x02EA
    3b9c:	30 91 eb 02 	lds	r19, 0x02EB
    3ba0:	40 91 ec 02 	lds	r20, 0x02EC
    3ba4:	50 91 ed 02 	lds	r21, 0x02ED
	unsigned char f = timer0_fract;
    3ba8:	70 91 ee 02 	lds	r23, 0x02EE

	m += MILLIS_INC;
    3bac:	da 01       	movw	r26, r20
    3bae:	c9 01       	movw	r24, r18
    3bb0:	40 96       	adiw	r24, 0x10	; 16
    3bb2:	a1 1d       	adc	r26, r1
    3bb4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    3bb6:	67 2f       	mov	r22, r23
    3bb8:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    3bba:	6d 37       	cpi	r22, 0x7D	; 125
    3bbc:	30 f0       	brcs	.+12     	; 0x3bca <__vector_16+0x50>
		f -= FRACT_MAX;
    3bbe:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    3bc0:	da 01       	movw	r26, r20
    3bc2:	c9 01       	movw	r24, r18
    3bc4:	41 96       	adiw	r24, 0x11	; 17
    3bc6:	a1 1d       	adc	r26, r1
    3bc8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3bca:	60 93 ee 02 	sts	0x02EE, r22
	timer0_millis = m;
    3bce:	80 93 ea 02 	sts	0x02EA, r24
    3bd2:	90 93 eb 02 	sts	0x02EB, r25
    3bd6:	a0 93 ec 02 	sts	0x02EC, r26
    3bda:	b0 93 ed 02 	sts	0x02ED, r27
	timer0_overflow_count++;
    3bde:	80 91 e6 02 	lds	r24, 0x02E6
    3be2:	90 91 e7 02 	lds	r25, 0x02E7
    3be6:	a0 91 e8 02 	lds	r26, 0x02E8
    3bea:	b0 91 e9 02 	lds	r27, 0x02E9
    3bee:	01 96       	adiw	r24, 0x01	; 1
    3bf0:	a1 1d       	adc	r26, r1
    3bf2:	b1 1d       	adc	r27, r1
    3bf4:	80 93 e6 02 	sts	0x02E6, r24
    3bf8:	90 93 e7 02 	sts	0x02E7, r25
    3bfc:	a0 93 e8 02 	sts	0x02E8, r26
    3c00:	b0 93 e9 02 	sts	0x02E9, r27
}
    3c04:	bf 91       	pop	r27
    3c06:	af 91       	pop	r26
    3c08:	9f 91       	pop	r25
    3c0a:	8f 91       	pop	r24
    3c0c:	7f 91       	pop	r23
    3c0e:	6f 91       	pop	r22
    3c10:	5f 91       	pop	r21
    3c12:	4f 91       	pop	r20
    3c14:	3f 91       	pop	r19
    3c16:	2f 91       	pop	r18
    3c18:	0f 90       	pop	r0
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	0f 90       	pop	r0
    3c1e:	1f 90       	pop	r1
    3c20:	18 95       	reti

00003c22 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3c22:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3c24:	f8 94       	cli
	m = timer0_millis;
    3c26:	20 91 ea 02 	lds	r18, 0x02EA
    3c2a:	30 91 eb 02 	lds	r19, 0x02EB
    3c2e:	40 91 ec 02 	lds	r20, 0x02EC
    3c32:	50 91 ed 02 	lds	r21, 0x02ED
	SREG = oldSREG;
    3c36:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    3c38:	b9 01       	movw	r22, r18
    3c3a:	ca 01       	movw	r24, r20
    3c3c:	08 95       	ret

00003c3e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3c3e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3c40:	84 b5       	in	r24, 0x24	; 36
    3c42:	82 60       	ori	r24, 0x02	; 2
    3c44:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3c46:	84 b5       	in	r24, 0x24	; 36
    3c48:	81 60       	ori	r24, 0x01	; 1
    3c4a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3c4c:	85 b5       	in	r24, 0x25	; 37
    3c4e:	82 60       	ori	r24, 0x02	; 2
    3c50:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3c52:	85 b5       	in	r24, 0x25	; 37
    3c54:	81 60       	ori	r24, 0x01	; 1
    3c56:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3c58:	ee e6       	ldi	r30, 0x6E	; 110
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	81 60       	ori	r24, 0x01	; 1
    3c60:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3c62:	e1 e8       	ldi	r30, 0x81	; 129
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3c68:	80 81       	ld	r24, Z
    3c6a:	82 60       	ori	r24, 0x02	; 2
    3c6c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3c6e:	e0 e8       	ldi	r30, 0x80	; 128
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	80 81       	ld	r24, Z
    3c74:	81 60       	ori	r24, 0x01	; 1
    3c76:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3c78:	e1 eb       	ldi	r30, 0xB1	; 177
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	84 60       	ori	r24, 0x04	; 4
    3c80:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3c82:	e0 eb       	ldi	r30, 0xB0	; 176
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	81 60       	ori	r24, 0x01	; 1
    3c8a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3c8c:	ea e7       	ldi	r30, 0x7A	; 122
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	84 60       	ori	r24, 0x04	; 4
    3c94:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    3c96:	80 81       	ld	r24, Z
    3c98:	82 60       	ori	r24, 0x02	; 2
    3c9a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3c9c:	80 81       	ld	r24, Z
    3c9e:	81 60       	ori	r24, 0x01	; 1
    3ca0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3ca2:	80 81       	ld	r24, Z
    3ca4:	80 68       	ori	r24, 0x80	; 128
    3ca6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3ca8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3cac:	08 95       	ret

00003cae <__mulsi3>:
    3cae:	62 9f       	mul	r22, r18
    3cb0:	d0 01       	movw	r26, r0
    3cb2:	73 9f       	mul	r23, r19
    3cb4:	f0 01       	movw	r30, r0
    3cb6:	82 9f       	mul	r24, r18
    3cb8:	e0 0d       	add	r30, r0
    3cba:	f1 1d       	adc	r31, r1
    3cbc:	64 9f       	mul	r22, r20
    3cbe:	e0 0d       	add	r30, r0
    3cc0:	f1 1d       	adc	r31, r1
    3cc2:	92 9f       	mul	r25, r18
    3cc4:	f0 0d       	add	r31, r0
    3cc6:	83 9f       	mul	r24, r19
    3cc8:	f0 0d       	add	r31, r0
    3cca:	74 9f       	mul	r23, r20
    3ccc:	f0 0d       	add	r31, r0
    3cce:	65 9f       	mul	r22, r21
    3cd0:	f0 0d       	add	r31, r0
    3cd2:	99 27       	eor	r25, r25
    3cd4:	72 9f       	mul	r23, r18
    3cd6:	b0 0d       	add	r27, r0
    3cd8:	e1 1d       	adc	r30, r1
    3cda:	f9 1f       	adc	r31, r25
    3cdc:	63 9f       	mul	r22, r19
    3cde:	b0 0d       	add	r27, r0
    3ce0:	e1 1d       	adc	r30, r1
    3ce2:	f9 1f       	adc	r31, r25
    3ce4:	bd 01       	movw	r22, r26
    3ce6:	cf 01       	movw	r24, r30
    3ce8:	11 24       	eor	r1, r1
    3cea:	08 95       	ret

00003cec <__udivmodhi4>:
    3cec:	aa 1b       	sub	r26, r26
    3cee:	bb 1b       	sub	r27, r27
    3cf0:	51 e1       	ldi	r21, 0x11	; 17
    3cf2:	07 c0       	rjmp	.+14     	; 0x3d02 <__udivmodhi4_ep>

00003cf4 <__udivmodhi4_loop>:
    3cf4:	aa 1f       	adc	r26, r26
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	a6 17       	cp	r26, r22
    3cfa:	b7 07       	cpc	r27, r23
    3cfc:	10 f0       	brcs	.+4      	; 0x3d02 <__udivmodhi4_ep>
    3cfe:	a6 1b       	sub	r26, r22
    3d00:	b7 0b       	sbc	r27, r23

00003d02 <__udivmodhi4_ep>:
    3d02:	88 1f       	adc	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	5a 95       	dec	r21
    3d08:	a9 f7       	brne	.-22     	; 0x3cf4 <__udivmodhi4_loop>
    3d0a:	80 95       	com	r24
    3d0c:	90 95       	com	r25
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	08 95       	ret

00003d14 <__divmodhi4>:
    3d14:	97 fb       	bst	r25, 7
    3d16:	09 2e       	mov	r0, r25
    3d18:	07 26       	eor	r0, r23
    3d1a:	0a d0       	rcall	.+20     	; 0x3d30 <__divmodhi4_neg1>
    3d1c:	77 fd       	sbrc	r23, 7
    3d1e:	04 d0       	rcall	.+8      	; 0x3d28 <__divmodhi4_neg2>
    3d20:	e5 df       	rcall	.-54     	; 0x3cec <__udivmodhi4>
    3d22:	06 d0       	rcall	.+12     	; 0x3d30 <__divmodhi4_neg1>
    3d24:	00 20       	and	r0, r0
    3d26:	1a f4       	brpl	.+6      	; 0x3d2e <__divmodhi4_exit>

00003d28 <__divmodhi4_neg2>:
    3d28:	70 95       	com	r23
    3d2a:	61 95       	neg	r22
    3d2c:	7f 4f       	sbci	r23, 0xFF	; 255

00003d2e <__divmodhi4_exit>:
    3d2e:	08 95       	ret

00003d30 <__divmodhi4_neg1>:
    3d30:	f6 f7       	brtc	.-4      	; 0x3d2e <__divmodhi4_exit>
    3d32:	90 95       	com	r25
    3d34:	81 95       	neg	r24
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	08 95       	ret

00003d3a <__udivmodsi4>:
    3d3a:	a1 e2       	ldi	r26, 0x21	; 33
    3d3c:	1a 2e       	mov	r1, r26
    3d3e:	aa 1b       	sub	r26, r26
    3d40:	bb 1b       	sub	r27, r27
    3d42:	fd 01       	movw	r30, r26
    3d44:	0d c0       	rjmp	.+26     	; 0x3d60 <__udivmodsi4_ep>

00003d46 <__udivmodsi4_loop>:
    3d46:	aa 1f       	adc	r26, r26
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	ee 1f       	adc	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	a2 17       	cp	r26, r18
    3d50:	b3 07       	cpc	r27, r19
    3d52:	e4 07       	cpc	r30, r20
    3d54:	f5 07       	cpc	r31, r21
    3d56:	20 f0       	brcs	.+8      	; 0x3d60 <__udivmodsi4_ep>
    3d58:	a2 1b       	sub	r26, r18
    3d5a:	b3 0b       	sbc	r27, r19
    3d5c:	e4 0b       	sbc	r30, r20
    3d5e:	f5 0b       	sbc	r31, r21

00003d60 <__udivmodsi4_ep>:
    3d60:	66 1f       	adc	r22, r22
    3d62:	77 1f       	adc	r23, r23
    3d64:	88 1f       	adc	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	1a 94       	dec	r1
    3d6a:	69 f7       	brne	.-38     	; 0x3d46 <__udivmodsi4_loop>
    3d6c:	60 95       	com	r22
    3d6e:	70 95       	com	r23
    3d70:	80 95       	com	r24
    3d72:	90 95       	com	r25
    3d74:	9b 01       	movw	r18, r22
    3d76:	ac 01       	movw	r20, r24
    3d78:	bd 01       	movw	r22, r26
    3d7a:	cf 01       	movw	r24, r30
    3d7c:	08 95       	ret

00003d7e <__tablejump2__>:
    3d7e:	ee 0f       	add	r30, r30
    3d80:	ff 1f       	adc	r31, r31

00003d82 <__tablejump__>:
    3d82:	05 90       	lpm	r0, Z+
    3d84:	f4 91       	lpm	r31, Z+
    3d86:	e0 2d       	mov	r30, r0
    3d88:	09 94       	ijmp

00003d8a <_exit>:
    3d8a:	f8 94       	cli

00003d8c <__stop_program>:
    3d8c:	ff cf       	rjmp	.-2      	; 0x3d8c <__stop_program>
