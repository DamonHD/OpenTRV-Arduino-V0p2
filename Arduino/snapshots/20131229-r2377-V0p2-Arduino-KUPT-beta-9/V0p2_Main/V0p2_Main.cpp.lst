
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build2776872588861741890.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000543a  000054ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000543a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000210  00800126  00800126  000054f4  2**0
                  ALLOC
  3 .debug_aranges 00000cd8  00000000  00000000  000054f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001dbe  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f93b  00000000  00000000  00007f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003546  00000000  00000000  000178c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000eb6e  00000000  00000000  0001ae0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001650  00000000  00000000  0002997c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000461b  00000000  00000000  0002afcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007091  00000000  00000000  0002f5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000df147  00000000  00000000  00036678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d50  00000000  00000000  001157bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//  }


// Returns true if there is a pending accepted call for heat.
// If so a non-~0 housecode will be returned by FHT8VCallForHeatHeardGetAndClear().
bool FHT8VCallForHeatHeard()
       0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__ctors_end>
// Sleep briefly in as lower-power mode as possible until the specified (watchdog) time expires, or another interrupt.
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
//   * allowPrematureWakeup if true then if woken before watchdog fires return false; default false
// Returns false if the watchdog timer did not go off.
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
bool nap(int_fast8_t watchdogSleep, bool allowPrematureWakeup)
       4:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
       8:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
    }
  }

// Returns true if a simple schedule is set, false otherwise.
// This implementation just checks for a valid 'on' time.
bool isSimpleScheduleSet()
       c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
      10:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      14:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      18:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__vector_6>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      1c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      20:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      24:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__vector_9>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      28:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      2c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      30:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      34:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      38:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      3c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      40:	0c 94 9d 28 	jmp	0x513a	; 0x513a <__vector_16>
      44:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      48:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__vector_18>
      4c:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__vector_19>
      50:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      54:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_21>
      58:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      5c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      60:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__vector_24>
      64:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 0b 15 0c 12 30 00 33 06 34 08 35 10     ........0.3.4.5.
      78:	36 aa 37 cc 38 cc 39 cc 6d 0d 6e 28 6f f5 70 20     6.7.8.9.m.n(o.p 
      88:	71 21 72 20 73 00 74 00 75 73 76 64 77 00 79 23     q!r s.t.usvdw.y#
      98:	7a 01 1c c1 1d 40 1e 0a 1f 03 20 96 21 00 22 da     z....@.... .!.".
      a8:	23 74 24 00 25 dc 2a 24 2c 28 2d fa 2e 29 69 60     #t$.%.*$,(-..)i`
      b8:	ff ff                                               ..

000000ba <FHT8VCallForHeatPoll()::__c>:
      ba:	52 58 20 46 49 46 4f 20 70 72 6f 62 6c 65 6d 00     RX FIFO problem.

000000ca <FHT8VCallForHeatPoll()::__c>:
      ca:	42 61 64 20 52 58 20 66 72 61 6d 65 00              Bad RX frame.

000000d7 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
      d7:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
      e7:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

000000f3 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      f3:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000fc <FHT8VPollSyncAndTX_Next(bool)::__c>:
      fc:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
     10c:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
     11c:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

00000127 <doSync(bool)::__c>:
     127:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

00000138 <doSync(bool)::__c>:
     138:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000146 <FHT8VPollSyncAndTX_First(bool)::__c>:
     146:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

0000014f <FHT8VPollSyncAndTX_First(bool)::__c>:
     14f:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     15f:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

00000169 <RFM22CheckConnected()::__c>:
     169:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

0000017a <RFM22CheckConnected()::__c>:
     17a:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     18a:	6e 3a 20 00                                         n: .

0000018e <pollCLI(unsigned char)::__c>:
     18e:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

0000019c <pollCLI(unsigned char)::__c>:
     19c:	5a 61 70 70 65 64 2e 00                             Zapped..

000001a4 <pollCLI(unsigned char)::__c>:
     1a4:	53 6d 61 72 74 20 77 61 72 6d 69 6e 67 3a 20 00     Smart warming: .

000001b4 <pollCLI(unsigned char)::__c>:
     1b4:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

000001c2 <pollCLI(unsigned char)::__c>:
     1c2:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

000001d1 <dumpCLIUsage()::__c>:
     1d1:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

000001db <dumpCLIUsage()::__c>:
     1db:	73 65 74 20 57 61 72 6d 20 74 65 6d 70 20 43 43     set Warm temp CC
	...

000001ec <dumpCLIUsage()::__c>:
     1ec:	57 20 43 43 00                                      W CC.

000001f1 <dumpCLIUsage()::__c>:
     1f1:	57 61 72 6d 00                                      Warm.

000001f6 <dumpCLIUsage()::__c>:
     1f6:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

00000203 <dumpCLIUsage()::__c>:
     203:	54 20 48 48 20 4d 4d 00                             T HH MM.

0000020b <dumpCLIUsage()::__c>:
     20b:	73 68 6f 77 20 53 74 61 74 75 73 20 61 6e 64 20     show Status and 
     21b:	73 6d 61 72 74 20 77 61 72 6d 69 6e 67 20 66 6f     smart warming fo
     22b:	72 20 6e 65 78 74 20 32 34 68 00                    r next 24h.

00000236 <dumpCLIUsage()::__c>:
     236:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     246:	65 74 20 4e 00                                      et N.

0000024b <dumpCLIUsage()::__c>:
     24b:	52 20 4e 00                                         R N.

0000024f <dumpCLIUsage()::__c>:
     24f:	51 75 69 63 6b 20 48 65 61 74 20 28 42 41 4b 45     Quick Heat (BAKE
     25f:	29 00                                               ).

00000261 <dumpCLIUsage()::__c>:
     261:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     271:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     281:	48 48 20 4d 4d 20 66 6f 72 20 4c 4c 20 68 6f 75     HH MM for LL hou
     291:	72 73 00                                            rs.

00000294 <dumpCLIUsage()::__c>:
     294:	50 20 48 48 20 4d 4d 20 4c 4c 00                    P HH MM LL.

0000029f <dumpCLIUsage()::__c>:
     29f:	4c 65 61 72 6e 20 74 6f 20 77 61 72 6d 20 65 76     Learn to warm ev
     2af:	65 72 79 20 32 34 68 20 66 72 6f 6d 20 6e 6f 77     ery 24h from now
     2bf:	2c 20 65 6c 73 65 20 63 61 6e 63 65 6c 20 73 63     , else cancel sc
     2cf:	68 65 64 75 6c 65 20 69 66 20 69 6e 20 66 72 6f     hedule if in fro
     2df:	73 74 20 6d 6f 64 65 00                             st mode.

000002e7 <dumpCLIUsage()::__c>:
     2e7:	73 65 74 20 77 69 72 65 6c 65 73 73 20 46 48 54     set wireless FHT
     2f7:	38 56 20 48 6f 75 73 65 20 63 6f 64 65 73 20 31     8V House codes 1
     307:	26 32 00                                            &2.

0000030a <dumpCLIUsage()::__c>:
     30a:	48 20 48 31 20 48 32 00                             H H1 H2.

00000312 <dumpCLIUsage()::__c>:
     312:	63 6c 65 61 72 20 77 69 72 65 6c 65 73 73 20 46     clear wireless F
     322:	48 54 38 56 20 48 6f 75 73 65 20 63 6f 64 65 73     HT8V House codes
	...

00000333 <dumpCLIUsage()::__c>:
     333:	48 00                                               H.

00000335 <dumpCLIUsage()::__c>:
     335:	73 65 74 20 46 72 6f 73 74 20 74 65 6d 70 20 43     set Frost temp C
     345:	43 00                                               C.

00000347 <dumpCLIUsage()::__c>:
     347:	46 20 43 43 00                                      F CC.

0000034c <dumpCLIUsage()::__c>:
     34c:	46 72 6f 73 74 00                                   Frost.

00000352 <dumpCLIUsage()::__c>:
     352:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

0000035b <dumpCLIUsage()::__c>:
     35b:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

0000036c <dumpCLIUsage()::__c>:
     36c:	44 20 4e 00                                         D N.

00000370 <dumpCLIUsage()::__c>:
     370:	63 65 6e 74 72 61 6c 20 68 75 62 3a 20 6d 69 6e     central hub: min
     380:	69 6d 75 6d 20 4d 20 6d 69 6e 73 20 6f 6e 2c 20     imum M mins on, 
     390:	30 20 64 69 73 61 62 6c 65 64 00                    0 disabled.

0000039b <dumpCLIUsage()::__c>:
     39b:	43 20 4d 00                                         C M.

0000039f <dumpCLIUsage()::__c>:
     39f:	42 69 61 73 20 45 20 28 45 63 6f 29 20 6f 72 20     Bias E (Eco) or 
     3af:	43 20 28 43 6f 6d 66 6f 72 74 29 00                 C (Comfort).

000003bb <dumpCLIUsage()::__c>:
     3bb:	74 68 69 73 20 68 65 6c 70 00                       this help.

000003c5 <dumpCLIUsage()::__c>:
     3c5:	43 4c 49 20 75 73 61 67 65 3a 00                    CLI usage:.

000003d0 <InvalidIgnored()::__c>:
     3d0:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     3e0:	2e 00                                               ..

000003e2 <serialStatusReport()::__c>:
     3e2:	48 43 00                                            HC.

000003e5 <loop::__c>:
     3e5:	45 52 52 4f 52 3a 20 6c 6f 6f 70 28 29 20 6f 76     ERROR: loop() ov
     3f5:	65 72 72 75 6e 21 00                                errun!.

000003fc <loop::__c>:
     3fc:	42 6f 69 6c 65 72 20 6f 6e 2c 20 6d 69 6e 73 20     Boiler on, mins 
     40c:	6c 65 66 74 3a 20 00                                left: .

00000413 <loop::__c>:
     413:	45 78 74 72 61 20 54 58 00                          Extra TX.

0000041c <loop::__c>:
     41c:	43 61 6c 6c 20 66 6f 72 20 68 65 61 74 20 66 72     Call for heat fr
     42c:	6f 6d 20 00                                         om .

00000430 <setup::__c>:
     430:	73 6c 6f 77 20 52 54 43 20 63 6c 6f 63 6b 20 4f     slow RTC clock O
     440:	4b 00                                               K.

00000442 <setup::__c>:
     442:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     452:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     462:	75 6e 6e 69 6e 67 21 00                             unning!.

0000046a <setup::__c>:
     46a:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     47a:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     48a:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

00000497 <setup::__c>:
     497:	6c 69 67 68 74 2f 74 65 6d 70 20 4f 4b 00           light/temp OK.

000004a5 <setup::__c>:
     4a5:	74 65 6d 70 3a 20 00                                temp: .

000004ac <setup::__c>:
     4ac:	6c 69 67 68 74 3a 20 00                             light: .

000004b4 <setup::__c>:
     4b4:	47 61 74 68 65 72 69 6e 67 20 69 6e 69 74 69 61     Gathering initia
     4c4:	6c 20 69 6e 70 75 74 73 20 61 6e 64 20 63 6f 6d     l inputs and com
     4d4:	70 75 74 69 6e 67 20 74 61 72 67 65 74 2f 64 65     puting target/de
     4e4:	6d 61 6e 64 2e 2e 2e 00                             mand....

000004ec <setup::__c>:
     4ec:	69 6e 74 65 72 6e 61 6c 20 73 65 6e 73 6f 72 73     internal sensors
     4fc:	20 4f 4b 2c 20 6e 65 78 74 20 6c 69 67 68 74 2f      OK, next light/
     50c:	74 65 6d 70 00                                      temp.

00000511 <setup::__c>:
     511:	43 20 2f 20 00                                      C / .

00000516 <setup::__c>:
     516:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

00000521 <setup::__c>:
     521:	6d 56 00                                            mV.

00000524 <setup::__c>:
     524:	56 63 63 3a 20 00                                   Vcc: .

0000052a <setup::__c>:
     52a:	52 46 4d 32 33 20 4f 4b 00                          RFM23 OK.

00000533 <setup::__c>:
     533:	61 62 6f 75 74 20 74 6f 20 74 65 73 74 20 52 46     about to test RF
     543:	4d 32 33 00                                         M23.

00000547 <setup::__c>:
     547:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000552 <setup::__c>:
     552:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

00000560 <setup::__c>:
     560:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     570:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

0000057f <setup::__c>:
     57f:	42 6f 61 72 64 20 56 30 2e 32 2c 20 52 45 56 00     Board V0.2, REV.

0000058f <setup::__c>:
     58f:	0d 0a 4f 70 65 6e 54 52 56 20 62 75 69 6c 74 20     ..OpenTRV built 
     59f:	44 65 63 20 32 39 20 32 30 31 33 20 30 39 3a 31     Dec 29 2013 09:1
     5af:	39 3a 30 35 20 62 6f 6f 74 69 6e 67 2e 2e 2e 00     9:05 booting....

000005bf <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5bf:	3a 20 00                                            : .

000005c2 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5c2:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000005cc <port_to_mode_PGM>:
     5cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005d6 <port_to_output_PGM>:
     5d6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005e0 <port_to_input_PGM>:
     5e0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000005ea <digital_pin_to_port_PGM>:
     5ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     5fa:	03 03 03 03                                         ....

000005fe <digital_pin_to_bit_mask_PGM>:
     5fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     60e:	04 08 10 20                                         ... 

00000612 <digital_pin_to_timer_PGM>:
     612:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     622:	00 00 00 00                                         ....

00000626 <__ctors_start>:
     626:	83 10       	cpse	r8, r3
     628:	d9 20       	and	r13, r9
     62a:	97 26       	eor	r9, r23

0000062c <__ctors_end>:
     62c:	11 24       	eor	r1, r1
     62e:	1f be       	out	0x3f, r1	; 63
     630:	cf ef       	ldi	r28, 0xFF	; 255
     632:	d8 e0       	ldi	r29, 0x08	; 8
     634:	de bf       	out	0x3e, r29	; 62
     636:	cd bf       	out	0x3d, r28	; 61

00000638 <__do_copy_data>:
     638:	11 e0       	ldi	r17, 0x01	; 1
     63a:	a0 e0       	ldi	r26, 0x00	; 0
     63c:	b1 e0       	ldi	r27, 0x01	; 1
     63e:	ea e3       	ldi	r30, 0x3A	; 58
     640:	f4 e5       	ldi	r31, 0x54	; 84
     642:	02 c0       	rjmp	.+4      	; 0x648 <.do_copy_data_start>

00000644 <.do_copy_data_loop>:
     644:	05 90       	lpm	r0, Z+
     646:	0d 92       	st	X+, r0

00000648 <.do_copy_data_start>:
     648:	a6 32       	cpi	r26, 0x26	; 38
     64a:	b1 07       	cpc	r27, r17
     64c:	d9 f7       	brne	.-10     	; 0x644 <.do_copy_data_loop>

0000064e <__do_clear_bss>:
     64e:	13 e0       	ldi	r17, 0x03	; 3
     650:	a6 e2       	ldi	r26, 0x26	; 38
     652:	b1 e0       	ldi	r27, 0x01	; 1
     654:	01 c0       	rjmp	.+2      	; 0x658 <.do_clear_bss_start>

00000656 <.do_clear_bss_loop>:
     656:	1d 92       	st	X+, r1

00000658 <.do_clear_bss_start>:
     658:	a6 33       	cpi	r26, 0x36	; 54
     65a:	b1 07       	cpc	r27, r17
     65c:	e1 f7       	brne	.-8      	; 0x656 <.do_clear_bss_loop>

0000065e <__do_global_ctors>:
     65e:	16 e0       	ldi	r17, 0x06	; 6
     660:	cc e2       	ldi	r28, 0x2C	; 44
     662:	d6 e0       	ldi	r29, 0x06	; 6
     664:	04 c0       	rjmp	.+8      	; 0x66e <.do_global_ctors_start>

00000666 <.do_global_ctors_loop>:
     666:	22 97       	sbiw	r28, 0x02	; 2
     668:	fe 01       	movw	r30, r28
     66a:	0e 94 17 2a 	call	0x542e	; 0x542e <__tablejump__>

0000066e <.do_global_ctors_start>:
     66e:	c6 32       	cpi	r28, 0x26	; 38
     670:	d1 07       	cpc	r29, r17
     672:	c9 f7       	brne	.-14     	; 0x666 <.do_global_ctors_loop>
     674:	0e 94 ed 26 	call	0x4dda	; 0x4dda <main>
     678:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <_exit>

0000067c <__bad_interrupt>:
     67c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000680 <abort>:
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	f8 94       	cli
     686:	0c 94 1b 2a 	jmp	0x5436	; 0x5436 <_exit>

0000068a <atoi>:
     68a:	fc 01       	movw	r30, r24
     68c:	88 27       	eor	r24, r24
     68e:	99 27       	eor	r25, r25
     690:	e8 94       	clt
     692:	21 91       	ld	r18, Z+
     694:	20 32       	cpi	r18, 0x20	; 32
     696:	e9 f3       	breq	.-6      	; 0x692 <atoi+0x8>
     698:	29 30       	cpi	r18, 0x09	; 9
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <atoi+0x16>
     69c:	2e 30       	cpi	r18, 0x0E	; 14
     69e:	c8 f3       	brcs	.-14     	; 0x692 <atoi+0x8>
     6a0:	2b 32       	cpi	r18, 0x2B	; 43
     6a2:	41 f0       	breq	.+16     	; 0x6b4 <atoi+0x2a>
     6a4:	2d 32       	cpi	r18, 0x2D	; 45
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <atoi+0x2c>
     6a8:	68 94       	set
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <atoi+0x2a>
     6ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulhi_const_10>
     6b0:	82 0f       	add	r24, r18
     6b2:	91 1d       	adc	r25, r1
     6b4:	21 91       	ld	r18, Z+
     6b6:	20 53       	subi	r18, 0x30	; 48
     6b8:	2a 30       	cpi	r18, 0x0A	; 10
     6ba:	c0 f3       	brcs	.-16     	; 0x6ac <atoi+0x22>
     6bc:	1e f4       	brtc	.+6      	; 0x6c4 <atoi+0x3a>
     6be:	90 95       	com	r25
     6c0:	81 95       	neg	r24
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	08 95       	ret

000006c6 <strlen_P>:
     6c6:	fc 01       	movw	r30, r24
     6c8:	05 90       	lpm	r0, Z+
     6ca:	00 20       	and	r0, r0
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <strlen_P+0x2>
     6ce:	80 95       	com	r24
     6d0:	90 95       	com	r25
     6d2:	8e 0f       	add	r24, r30
     6d4:	9f 1f       	adc	r25, r31
     6d6:	08 95       	ret

000006d8 <strtok_r>:
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	31 f4       	brne	.+12     	; 0x6e8 <strtok_r+0x10>
     6dc:	da 01       	movw	r26, r20
     6de:	8d 91       	ld	r24, X+
     6e0:	9c 91       	ld	r25, X
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <strtok_r+0x10>
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <strtok_r+0x2c>
     6e8:	dc 01       	movw	r26, r24
     6ea:	fb 01       	movw	r30, r22
     6ec:	3d 91       	ld	r19, X+
     6ee:	21 91       	ld	r18, Z+
     6f0:	22 23       	and	r18, r18
     6f2:	19 f0       	breq	.+6      	; 0x6fa <strtok_r+0x22>
     6f4:	32 17       	cp	r19, r18
     6f6:	c9 f3       	breq	.-14     	; 0x6ea <strtok_r+0x12>
     6f8:	fa cf       	rjmp	.-12     	; 0x6ee <strtok_r+0x16>
     6fa:	33 23       	and	r19, r19
     6fc:	31 f4       	brne	.+12     	; 0x70a <strtok_r+0x32>
     6fe:	da 01       	movw	r26, r20
     700:	1d 92       	st	X+, r1
     702:	1c 92       	st	X, r1
     704:	88 27       	eor	r24, r24
     706:	99 27       	eor	r25, r25
     708:	08 95       	ret
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	fb 01       	movw	r30, r22
     712:	3d 91       	ld	r19, X+
     714:	21 91       	ld	r18, Z+
     716:	32 17       	cp	r19, r18
     718:	71 f4       	brne	.+28     	; 0x736 <strtok_r+0x5e>
     71a:	33 23       	and	r19, r19
     71c:	21 f4       	brne	.+8      	; 0x726 <strtok_r+0x4e>
     71e:	88 27       	eor	r24, r24
     720:	99 27       	eor	r25, r25
     722:	11 97       	sbiw	r26, 0x01	; 1
     724:	02 c0       	rjmp	.+4      	; 0x72a <strtok_r+0x52>
     726:	1e 92       	st	-X, r1
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	fa 01       	movw	r30, r20
     72c:	a1 93       	st	Z+, r26
     72e:	b0 83       	st	Z, r27
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	08 95       	ret
     736:	22 23       	and	r18, r18
     738:	69 f7       	brne	.-38     	; 0x714 <strtok_r+0x3c>
     73a:	ea cf       	rjmp	.-44     	; 0x710 <strtok_r+0x38>

0000073c <strupr>:
     73c:	dc 01       	movw	r26, r24
     73e:	6c 91       	ld	r22, X
     740:	61 56       	subi	r22, 0x61	; 97
     742:	6a 31       	cpi	r22, 0x1A	; 26
     744:	08 f0       	brcs	.+2      	; 0x748 <strupr+0xc>
     746:	60 5e       	subi	r22, 0xE0	; 224
     748:	6f 5b       	subi	r22, 0xBF	; 191
     74a:	6d 93       	st	X+, r22
     74c:	c1 f7       	brne	.-16     	; 0x73e <strupr+0x2>
     74e:	08 95       	ret

00000750 <__eerd_word>:
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	7b 01       	movw	r14, r22
     75c:	8c 01       	movw	r16, r24
     75e:	fb 01       	movw	r30, r22
     760:	09 95       	icall
     762:	d8 2e       	mov	r13, r24
     764:	c8 01       	movw	r24, r16
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	f7 01       	movw	r30, r14
     76a:	09 95       	icall
     76c:	98 2f       	mov	r25, r24
     76e:	8d 2d       	mov	r24, r13
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	08 95       	ret

0000077c <__eewr_word>:
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	d7 2e       	mov	r13, r23
     788:	7a 01       	movw	r14, r20
     78a:	8c 01       	movw	r16, r24
     78c:	fa 01       	movw	r30, r20
     78e:	09 95       	icall
     790:	c8 01       	movw	r24, r16
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	6d 2d       	mov	r22, r13
     796:	f7 01       	movw	r30, r14
     798:	09 95       	icall
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	08 95       	ret

000007a6 <__mulhi_const_10>:
     7a6:	7a e0       	ldi	r23, 0x0A	; 10
     7a8:	97 9f       	mul	r25, r23
     7aa:	90 2d       	mov	r25, r0
     7ac:	87 9f       	mul	r24, r23
     7ae:	80 2d       	mov	r24, r0
     7b0:	91 0d       	add	r25, r1
     7b2:	11 24       	eor	r1, r1
     7b4:	08 95       	ret

000007b6 <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     7b6:	80 91 28 01 	lds	r24, 0x0128
     7ba:	08 95       	ret

000007bc <getAmbientLight()>:

// Ambient light levels in range [0,1023].
static int ambientLightLevel;

// Return previously-read (with readAmbientLight()) ambient light level in range [0,1023]; very fast.
int getAmbientLight() { return(ambientLightLevel); }
     7bc:	80 91 26 01 	lds	r24, 0x0126
     7c0:	90 91 27 01 	lds	r25, 0x0127
     7c4:	08 95       	ret

000007c6 <readAmbientLight()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
int readAmbientLight()
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(true);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 1a 10 	call	0x2034	; 0x2034 <power_intermittent_peripherals_enable(bool)>

  //analogReference(DEFAULT); // Force use of Vcc as reference.

  const int al = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <analogueNoiseReducedRead(int, unsigned char)>
     7da:	ec 01       	movw	r28, r24
  ambientLightLevel = al;
     7dc:	90 93 27 01 	sts	0x0127, r25
     7e0:	80 93 26 01 	sts	0x0126, r24
  DEBUG_SERIAL_PRINT(ambientLightLevel);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Adjust room-lit flag, with hysteresis.
  if(al < LDR_THR_LOW) { isRoomLitFlag = false; }
     7e4:	80 3a       	cpi	r24, 0xA0	; 160
     7e6:	91 05       	cpc	r25, r1
     7e8:	1c f4       	brge	.+6      	; 0x7f0 <readAmbientLight()+0x2a>
     7ea:	10 92 28 01 	sts	0x0128, r1
     7ee:	06 c0       	rjmp	.+12     	; 0x7fc <readAmbientLight()+0x36>
  else if(al > LDR_THR_HIGH) { isRoomLitFlag = true; }
     7f0:	89 3c       	cpi	r24, 0xC9	; 201
     7f2:	91 05       	cpc	r25, r1
     7f4:	1c f0       	brlt	.+6      	; 0x7fc <readAmbientLight()+0x36>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 28 01 	sts	0x0128, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  power_intermittent_peripherals_disable();
     7fc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <power_intermittent_peripherals_disable()>

  return(al);
  }
     800:	ce 01       	movw	r24, r28
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <getTRVPercentOpen()>:
#include "Temperature_Sensor.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     808:	80 91 30 01 	lds	r24, 0x0130
     80c:	08 95       	ret

0000080e <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     80e:	80 91 2f 01 	lds	r24, 0x012F
     812:	08 95       	ret

00000814 <getFROSTTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     814:	f9 99       	sbic	0x1f, 1	; 31
     816:	fe cf       	rjmp	.-4      	; 0x814 <getFROSTTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     818:	8e e0       	ldi	r24, 0x0E	; 14
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	92 bd       	out	0x22, r25	; 34
     81e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     820:	f8 9a       	sbi	0x1f, 0	; 31
     822:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     824:	89 2f       	mov	r24, r25
     826:	85 50       	subi	r24, 0x05	; 5
     828:	8b 35       	cpi	r24, 0x5B	; 91
     82a:	08 f0       	brcs	.+2      	; 0x82e <getFROSTTargetC()+0x1a>
     82c:	95 e0       	ldi	r25, 0x05	; 5
  // Return valid persisted value.
  return(stored);
  }
     82e:	89 2f       	mov	r24, r25
     830:	08 95       	ret

00000832 <getWARMTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     832:	f9 99       	sbic	0x1f, 1	; 31
     834:	fe cf       	rjmp	.-4      	; 0x832 <getWARMTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     836:	8f e0       	ldi	r24, 0x0F	; 15
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	92 bd       	out	0x22, r25	; 34
     83c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     83e:	f8 9a       	sbi	0x1f, 0	; 31
     840:	20 b5       	in	r18, 0x20	; 32
uint8_t getWARMTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(fnmax((uint8_t)WARM, getFROSTTargetC())); }
     842:	82 2f       	mov	r24, r18
     844:	85 50       	subi	r24, 0x05	; 5
     846:	8b 35       	cpi	r24, 0x5B	; 91
     848:	98 f0       	brcs	.+38     	; 0x870 <getWARMTargetC()+0x3e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     84a:	f9 99       	sbic	0x1f, 1	; 31
     84c:	fe cf       	rjmp	.-4      	; 0x84a <getWARMTargetC()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     84e:	8e e0       	ldi	r24, 0x0E	; 14
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	92 bd       	out	0x22, r25	; 34
     854:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     856:	f8 9a       	sbi	0x1f, 0	; 31
     858:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     85a:	89 2f       	mov	r24, r25
     85c:	85 50       	subi	r24, 0x05	; 5
     85e:	8b 35       	cpi	r24, 0x5B	; 91
     860:	10 f0       	brcs	.+4      	; 0x866 <getWARMTargetC()+0x34>
     862:	81 e1       	ldi	r24, 0x11	; 17
     864:	08 95       	ret
     866:	81 e1       	ldi	r24, 0x11	; 17
     868:	89 17       	cp	r24, r25
     86a:	98 f4       	brcc	.+38     	; 0x892 <getWARMTargetC()+0x60>
     86c:	89 2f       	mov	r24, r25
     86e:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     870:	f9 99       	sbic	0x1f, 1	; 31
     872:	fe cf       	rjmp	.-4      	; 0x870 <getWARMTargetC()+0x3e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     874:	8e e0       	ldi	r24, 0x0E	; 14
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	92 bd       	out	0x22, r25	; 34
     87a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     87c:	f8 9a       	sbi	0x1f, 0	; 31
     87e:	90 b5       	in	r25, 0x20	; 32
     880:	89 2f       	mov	r24, r25
     882:	85 50       	subi	r24, 0x05	; 5
     884:	8b 35       	cpi	r24, 0x5B	; 91
     886:	08 f0       	brcs	.+2      	; 0x88a <getWARMTargetC()+0x58>
     888:	95 e0       	ldi	r25, 0x05	; 5
     88a:	89 2f       	mov	r24, r25
     88c:	92 17       	cp	r25, r18
     88e:	08 f4       	brcc	.+2      	; 0x892 <getWARMTargetC()+0x60>
     890:	82 2f       	mov	r24, r18
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(fnmax((uint8_t)WARM, getFROSTTargetC())); }
  // Return valid persisted value (or frost value if set and higher).
  return(fnmax(stored, getFROSTTargetC()));
  }
     892:	08 95       	ret

00000894 <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     894:	f9 99       	sbic	0x1f, 1	; 31
     896:	fe cf       	rjmp	.-4      	; 0x894 <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     898:	82 e1       	ldi	r24, 0x12	; 18
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	92 bd       	out	0x22, r25	; 34
     89e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8a0:	f8 9a       	sbi	0x1f, 0	; 31
     8a2:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     8a4:	80 95       	com	r24
     8a6:	08 95       	ret

000008a8 <shouldBeWarmedAtHour(unsigned char)>:

// Returns true iff room likely to be occupied and need warming at the specified hour's sample point based on collected stats.
// Used for predictively warming a room in smart mode and for choosing setback depths.
// Returns false if no good evidence to warm the room at the given time based on past history over about one week.
//   * hh hour to check for predictive warming [0,23]
bool shouldBeWarmedAtHour(const uint_least8_t hh)
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
  {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Return false if the sample hour's historic ambient light level falls in the bottom quartile.
  // Thus avoid any 'smart' warming for at least 25% of the daily cycle.
  const uint8_t smoothedAmbLight = eeprom_read_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh));
     8ac:	48 2f       	mov	r20, r24
     8ae:	50 e0       	ldi	r21, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8b0:	f9 99       	sbic	0x1f, 1	; 31
     8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <shouldBeWarmedAtHour(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8b4:	48 5b       	subi	r20, 0xB8	; 184
     8b6:	5e 4f       	sbci	r21, 0xFE	; 254
     8b8:	52 bd       	out	0x22, r21	; 34
     8ba:	41 bd       	out	0x21, r20	; 33
     8bc:	48 54       	subi	r20, 0x48	; 72
     8be:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8c0:	f8 9a       	sbi	0x1f, 0	; 31
     8c2:	60 b5       	in	r22, 0x20	; 32
     8c4:	28 e4       	ldi	r18, 0x48	; 72
     8c6:	31 e0       	ldi	r19, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8ca:	f9 99       	sbic	0x1f, 1	; 31
     8cc:	fe cf       	rjmp	.-4      	; 0x8ca <shouldBeWarmedAtHour(unsigned char)+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8ce:	32 bd       	out	0x22, r19	; 34
     8d0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8d2:	f8 9a       	sbi	0x1f, 0	; 31
     8d4:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full days' worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     8d6:	68 17       	cp	r22, r24
     8d8:	20 f4       	brcc	.+8      	; 0x8e2 <shouldBeWarmedAtHour(unsigned char)+0x3a>
     8da:	9f 5f       	subi	r25, 0xFF	; 255
     8dc:	92 31       	cpi	r25, 0x12	; 18
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <shouldBeWarmedAtHour(unsigned char)+0x3a>
     8e0:	55 c0       	rjmp	.+170    	; 0x98c <__stack+0x8d>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	20 36       	cpi	r18, 0x60	; 96
     8ea:	38 07       	cpc	r19, r24
     8ec:	71 f7       	brne	.-36     	; 0x8ca <shouldBeWarmedAtHour(unsigned char)+0x22>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8ee:	f9 99       	sbic	0x1f, 1	; 31
     8f0:	fe cf       	rjmp	.-4      	; 0x8ee <shouldBeWarmedAtHour(unsigned char)+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8f2:	40 5a       	subi	r20, 0xA0	; 160
     8f4:	5e 4f       	sbci	r21, 0xFE	; 254
     8f6:	52 bd       	out	0x22, r21	; 34
     8f8:	41 bd       	out	0x21, r20	; 33
     8fa:	40 56       	subi	r20, 0x60	; 96
     8fc:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8fe:	f8 9a       	sbi	0x1f, 0	; 31
     900:	80 b5       	in	r24, 0x20	; 32
#endif

  // Return false if no WARM mode this hour for the last week (ie the unit needs reminding at least once per week).
  // Return true if this hour was in WARM mode yesterday or a week ago, and at least one other day.
  const uint8_t warmHistory = eeprom_read_byte((uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh));
  if(0 == (0x80 & warmHistory)) // This hour has a history.
     902:	87 fd       	sbrc	r24, 7
     904:	0e c0       	rjmp	.+28     	; 0x922 <__stack+0x23>
    {
    if(0 == warmHistory) // No explicit WARM for a week at this hour, so prevent 'smart' warming.
     906:	88 23       	and	r24, r24
     908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
     90a:	40 c0       	rjmp	.+128    	; 0x98c <__stack+0x8d>
      { return(false); }
    if((0 != (0x41 & warmHistory)) && (0 != (0x3e & warmHistory)))
     90c:	28 2f       	mov	r18, r24
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	c9 01       	movw	r24, r18
     912:	81 74       	andi	r24, 0x41	; 65
     914:	90 70       	andi	r25, 0x00	; 0
     916:	89 2b       	or	r24, r25
     918:	21 f0       	breq	.+8      	; 0x922 <__stack+0x23>
     91a:	2e 73       	andi	r18, 0x3E	; 62
     91c:	30 70       	andi	r19, 0x00	; 0
     91e:	23 2b       	or	r18, r19
     920:	99 f5       	brne	.+102    	; 0x988 <__stack+0x89>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     922:	f9 99       	sbic	0x1f, 1	; 31
     924:	fe cf       	rjmp	.-4      	; 0x922 <__stack+0x23>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     926:	48 5e       	subi	r20, 0xE8	; 232
     928:	5e 4f       	sbci	r21, 0xFE	; 254
     92a:	52 bd       	out	0x22, r21	; 34
     92c:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     92e:	f8 9a       	sbi	0x1f, 0	; 31
     930:	80 b5       	in	r24, 0x20	; 32

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     932:	80 32       	cpi	r24, 0x20	; 32
     934:	40 f4       	brcc	.+16     	; 0x946 <__stack+0x47>
     936:	c8 2f       	mov	r28, r24
     938:	d0 e0       	ldi	r29, 0x00	; 0
     93a:	43 e0       	ldi	r20, 0x03	; 3
     93c:	cc 0f       	add	r28, r28
     93e:	dd 1f       	adc	r29, r29
     940:	4a 95       	dec	r20
     942:	e1 f7       	brne	.-8      	; 0x93c <__stack+0x3d>
     944:	14 c0       	rjmp	.+40     	; 0x96e <__stack+0x6f>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     946:	80 36       	cpi	r24, 0x60	; 96
     948:	38 f4       	brcc	.+14     	; 0x958 <__stack+0x59>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     94a:	c8 2f       	mov	r28, r24
     94c:	d0 e0       	ldi	r29, 0x00	; 0
     94e:	cc 0f       	add	r28, r28
     950:	dd 1f       	adc	r29, r29
     952:	c0 54       	subi	r28, 0x40	; 64
     954:	df 4f       	sbci	r29, 0xFF	; 255
     956:	0b c0       	rjmp	.+22     	; 0x96e <__stack+0x6f>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     958:	89 3f       	cpi	r24, 0xF9	; 249
     95a:	c0 f4       	brcc	.+48     	; 0x98c <__stack+0x8d>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     95c:	c8 2f       	mov	r28, r24
     95e:	d0 e0       	ldi	r29, 0x00	; 0
     960:	23 e0       	ldi	r18, 0x03	; 3
     962:	cc 0f       	add	r28, r28
     964:	dd 1f       	adc	r29, r29
     966:	2a 95       	dec	r18
     968:	e1 f7       	brne	.-8      	; 0x962 <__stack+0x63>
     96a:	c0 58       	subi	r28, 0x80	; 128
     96c:	d1 40       	sbci	r29, 0x01	; 1
  DEBUG_SERIAL_PRINT(hh);
  DEBUG_SERIAL_PRINT_FLASHSTRING("h is ");
  DEBUG_SERIAL_PRINT(smoothedTempHHNext >> 4);
  DEBUG_SERIAL_PRINTLN();
#endif
  if((STATS_UNSET_INT != smoothedTempHHNext) && (((smoothedTempHHNext+8)>>4) >= getWARMTargetC()))
     96e:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	28 96       	adiw	r28, 0x08	; 8
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	d5 95       	asr	r29
     97a:	c7 95       	ror	r28
     97c:	9a 95       	dec	r25
     97e:	e1 f7       	brne	.-8      	; 0x978 <__stack+0x79>
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	c8 17       	cp	r28, r24
     984:	d9 07       	cpc	r29, r25
     986:	1c f0       	brlt	.+6      	; 0x98e <__stack+0x8f>
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	01 c0       	rjmp	.+2      	; 0x98e <__stack+0x8f>
     98c:	20 e0       	ldi	r18, 0x00	; 0
    { return(true); }

  // No good evidence for room to be warmed for specified hour.
  return(false);
  }
     98e:	82 2f       	mov	r24, r18
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     996:	65 30       	cpi	r22, 0x05	; 5
     998:	98 f4       	brcc	.+38     	; 0x9c0 <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     99a:	88 31       	cpi	r24, 0x18	; 24
     99c:	88 f4       	brcc	.+34     	; 0x9c0 <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     99e:	f9 99       	sbic	0x1f, 1	; 31
     9a0:	fe cf       	rjmp	.-4      	; 0x99e <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     9a2:	28 2f       	mov	r18, r24
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	20 50       	subi	r18, 0x00	; 0
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	88 e1       	ldi	r24, 0x18	; 24
     9ac:	68 9f       	mul	r22, r24
     9ae:	c0 01       	movw	r24, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	28 0f       	add	r18, r24
     9b4:	39 1f       	adc	r19, r25
     9b6:	32 bd       	out	0x22, r19	; 34
     9b8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     9ba:	f8 9a       	sbi	0x1f, 0	; 31
     9bc:	80 b5       	in	r24, 0x20	; 32
     9be:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
  }
     9c2:	08 95       	ret

000009c4 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     9c4:	18 16       	cp	r1, r24
     9c6:	19 06       	cpc	r1, r25
     9c8:	14 f0       	brlt	.+4      	; 0x9ce <compressTempC16(int)+0xa>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     9ce:	8f 3f       	cpi	r24, 0xFF	; 255
     9d0:	91 05       	cpc	r25, r1
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <compressTempC16(int)+0x12>
     9d4:	34 f4       	brge	.+12     	; 0x9e2 <compressTempC16(int)+0x1e>
     9d6:	73 e0       	ldi	r23, 0x03	; 3
     9d8:	95 95       	asr	r25
     9da:	87 95       	ror	r24
     9dc:	7a 95       	dec	r23
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <compressTempC16(int)+0x14>
     9e0:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	80 38       	cpi	r24, 0x80	; 128
     9e6:	92 07       	cpc	r25, r18
     9e8:	34 f4       	brge	.+12     	; 0x9f6 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     9ea:	80 50       	subi	r24, 0x00	; 0
     9ec:	91 40       	sbci	r25, 0x01	; 1
     9ee:	95 95       	asr	r25
     9f0:	87 95       	ror	r24
     9f2:	80 5e       	subi	r24, 0xE0	; 224
     9f4:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     9f6:	26 e0       	ldi	r18, 0x06	; 6
     9f8:	80 34       	cpi	r24, 0x40	; 64
     9fa:	92 07       	cpc	r25, r18
     9fc:	14 f0       	brlt	.+4      	; 0xa02 <compressTempC16(int)+0x3e>
     9fe:	88 ef       	ldi	r24, 0xF8	; 248
     a00:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     a02:	80 58       	subi	r24, 0x80	; 128
     a04:	91 40       	sbci	r25, 0x01	; 1
     a06:	53 e0       	ldi	r21, 0x03	; 3
     a08:	95 95       	asr	r25
     a0a:	87 95       	ror	r24
     a0c:	5a 95       	dec	r21
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <compressTempC16(int)+0x44>
     a10:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     a12:	08 95       	ret

00000a14 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     a14:	80 32       	cpi	r24, 0x20	; 32
     a16:	40 f4       	brcc	.+16     	; 0xa28 <expandTempC16(unsigned char)+0x14>
     a18:	28 2f       	mov	r18, r24
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	a3 e0       	ldi	r26, 0x03	; 3
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	aa 95       	dec	r26
     a24:	e1 f7       	brne	.-8      	; 0xa1e <expandTempC16(unsigned char)+0xa>
     a26:	17 c0       	rjmp	.+46     	; 0xa56 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     a28:	80 36       	cpi	r24, 0x60	; 96
     a2a:	38 f4       	brcc	.+14     	; 0xa3a <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	20 54       	subi	r18, 0x40	; 64
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	0e c0       	rjmp	.+28     	; 0xa56 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     a3a:	89 3f       	cpi	r24, 0xF9	; 249
     a3c:	18 f0       	brcs	.+6      	; 0xa44 <expandTempC16(unsigned char)+0x30>
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
     a40:	3f e7       	ldi	r19, 0x7F	; 127
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     a44:	28 2f       	mov	r18, r24
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	e3 e0       	ldi	r30, 0x03	; 3
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	ea 95       	dec	r30
     a50:	e1 f7       	brne	.-8      	; 0xa4a <expandTempC16(unsigned char)+0x36>
     a52:	20 58       	subi	r18, 0x80	; 128
     a54:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     a56:	c9 01       	movw	r24, r18
     a58:	08 95       	ret

00000a5a <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	8c 01       	movw	r16, r24
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
     a68:	ce 01       	movw	r24, r28
     a6a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
     a6e:	88 23       	and	r24, r24
     a70:	29 f0       	breq	.+10     	; 0xa7c <zapStats(unsigned int)+0x22>
     a72:	01 50       	subi	r16, 0x01	; 1
     a74:	10 40       	sbci	r17, 0x00	; 0
     a76:	11 f4       	brne	.+4      	; 0xa7c <zapStats(unsigned int)+0x22>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
     a7c:	21 96       	adiw	r28, 0x01	; 1
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	c8 37       	cpi	r28, 0x78	; 120
     a82:	d8 07       	cpc	r29, r24
     a84:	89 f7       	brne	.-30     	; 0xa68 <zapStats(unsigned int)+0xe>
     a86:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     a92:	68 2f       	mov	r22, r24
     a94:	60 95       	com	r22
     a96:	82 e1       	ldi	r24, 0x12	; 18
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     a9e:	08 95       	ret

00000aa0 <setWARMTargetC(unsigned char)>:
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
  return(true); // Assume value correctly written.
  }
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
     aa0:	68 2f       	mov	r22, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     aa2:	85 50       	subi	r24, 0x05	; 5
     aa4:	8b 35       	cpi	r24, 0x5B	; 91
     aa6:	a8 f4       	brcc	.+42     	; 0xad2 <setWARMTargetC(unsigned char)+0x32>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     aa8:	f9 99       	sbic	0x1f, 1	; 31
     aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <setWARMTargetC(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     aac:	8e e0       	ldi	r24, 0x0E	; 14
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	92 bd       	out	0x22, r25	; 34
     ab2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ab4:	f8 9a       	sbi	0x1f, 0	; 31
     ab6:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     ab8:	89 2f       	mov	r24, r25
     aba:	85 50       	subi	r24, 0x05	; 5
     abc:	8b 35       	cpi	r24, 0x5B	; 91
     abe:	08 f0       	brcs	.+2      	; 0xac2 <setWARMTargetC(unsigned char)+0x22>
     ac0:	95 e0       	ldi	r25, 0x05	; 5
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
  if(tempC < getFROSTTargetC()) { return(false); } // Cannot set below FROST target.
     ac2:	69 17       	cp	r22, r25
     ac4:	30 f0       	brcs	.+12     	; 0xad2 <setWARMTargetC(unsigned char)+0x32>
  eeprom_smart_update_byte((uint8_t *)EE_START_WARM_C, tempC); // Update in EEPROM if necessary.
     ac6:	8f e0       	ldi	r24, 0x0F	; 15
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	08 95       	ret
  return(true); // Assume value correctly written.
     ad2:	80 e0       	ldi	r24, 0x00	; 0
  }
     ad4:	08 95       	ret

00000ad6 <setFROSTTargetC(unsigned char)>:
#endif

#ifdef SETTABLE_TARGET_TEMPERATURES
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     ad6:	1f 93       	push	r17
     ad8:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     ada:	85 50       	subi	r24, 0x05	; 5
     adc:	8b 35       	cpi	r24, 0x5B	; 91
     ade:	58 f4       	brcc	.+22     	; 0xaf6 <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     ae0:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
     ae4:	81 17       	cp	r24, r17
     ae6:	38 f0       	brcs	.+14     	; 0xaf6 <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     ae8:	8e e0       	ldi	r24, 0x0E	; 14
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	61 2f       	mov	r22, r17
     aee:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     af6:	80 e0       	ldi	r24, 0x00	; 0
  }
     af8:	1f 91       	pop	r17
     afa:	08 95       	ret

00000afc <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	18 2f       	mov	r17, r24
     b02:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     b04:	86 17       	cp	r24, r22
     b06:	b9 f0       	breq	.+46     	; 0xb36 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     b08:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     b0c:	21 2f       	mov	r18, r17
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	a9 01       	movw	r20, r18
     b12:	13 e0       	ldi	r17, 0x03	; 3
     b14:	44 0f       	add	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	1a 95       	dec	r17
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     b1c:	42 1b       	sub	r20, r18
     b1e:	53 0b       	sbc	r21, r19
     b20:	87 70       	andi	r24, 0x07	; 7
     b22:	48 0f       	add	r20, r24
     b24:	51 1d       	adc	r21, r1
     b26:	40 0f       	add	r20, r16
     b28:	51 1d       	adc	r21, r1
     b2a:	b3 e0       	ldi	r27, 0x03	; 3
     b2c:	56 95       	lsr	r21
     b2e:	47 95       	ror	r20
     b30:	ba 95       	dec	r27
     b32:	e1 f7       	brne	.-8      	; 0xb2c <smoothStatsValue(unsigned char, unsigned char)+0x30>
     b34:	14 2f       	mov	r17, r20
  }
     b36:	81 2f       	mov	r24, r17
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	08 95       	ret

00000b3e <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	08 2f       	mov	r16, r24
  {
  // (Sub-)sample processing.
  static uint8_t sampleCount; // General sub-sample count; initially zero, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount++);
     b4c:	80 91 2e 01 	lds	r24, 0x012E
     b50:	10 e0       	ldi	r17, 0x00	; 0
     b52:	88 23       	and	r24, r24
     b54:	09 f4       	brne	.+2      	; 0xb58 <sampleStats(bool)+0x1a>
     b56:	11 e0       	ldi	r17, 0x01	; 1
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 93 2e 01 	sts	0x012E, r24
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmMode()) { ++warmCount; } else { --warmCount; }
     b5e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <inWarmMode()>
     b62:	90 91 2d 01 	lds	r25, 0x012D
     b66:	88 23       	and	r24, r24
     b68:	11 f0       	breq	.+4      	; 0xb6e <sampleStats(bool)+0x30>
     b6a:	9f 5f       	subi	r25, 0xFF	; 255
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <sampleStats(bool)+0x32>
     b6e:	91 50       	subi	r25, 0x01	; 1
     b70:	90 93 2d 01 	sts	0x012D, r25
  // Ambient light.
  const int ambLight = getAmbientLight();
     b74:	0e 94 de 03 	call	0x7bc	; 0x7bc <getAmbientLight()>
     b78:	9c 01       	movw	r18, r24
  static int ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
     b7a:	11 23       	and	r17, r17
     b7c:	31 f4       	brne	.+12     	; 0xb8a <sampleStats(bool)+0x4c>
     b7e:	80 91 2b 01 	lds	r24, 0x012B
     b82:	90 91 2c 01 	lds	r25, 0x012C
     b86:	28 0f       	add	r18, r24
     b88:	39 1f       	adc	r19, r25
     b8a:	30 93 2c 01 	sts	0x012C, r19
     b8e:	20 93 2b 01 	sts	0x012B, r18
  const int tempC16 = getTemperatureC16();
     b92:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <getTemperatureC16()>
     b96:	9c 01       	movw	r18, r24
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
     b98:	11 23       	and	r17, r17
     b9a:	31 f4       	brne	.+12     	; 0xba8 <sampleStats(bool)+0x6a>
     b9c:	80 91 29 01 	lds	r24, 0x0129
     ba0:	90 91 2a 01 	lds	r25, 0x012A
     ba4:	28 0f       	add	r18, r24
     ba6:	39 1f       	adc	r19, r25
     ba8:	30 93 2a 01 	sts	0x012A, r19
     bac:	20 93 29 01 	sts	0x0129, r18
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
     bb0:	00 23       	and	r16, r16
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <sampleStats(bool)+0x78>
     bb4:	89 c0       	rjmp	.+274    	; 0xcc8 <sampleStats(bool)+0x18a>

  const uint_least8_t hh = getHoursLT(); // Get the current local-time hour...
     bb6:	0e 94 02 13 	call	0x2604	; 0x2604 <getHoursLT()>
     bba:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const uint8_t temp = compressTempC16((tempC16Total + (sampleCount/2)) / sampleCount);
     bbc:	60 91 2e 01 	lds	r22, 0x012E
     bc0:	26 2f       	mov	r18, r22
     bc2:	26 95       	lsr	r18
     bc4:	80 91 29 01 	lds	r24, 0x0129
     bc8:	90 91 2a 01 	lds	r25, 0x012A
     bcc:	82 0f       	add	r24, r18
     bce:	91 1d       	adc	r25, r1
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__divmodhi4>
     bd6:	cb 01       	movw	r24, r22
     bd8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <compressTempC16(int)>
     bdc:	08 2f       	mov	r16, r24
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_TEMP_BY_HOUR + hh), temp);
     bde:	e1 2e       	mov	r14, r17
     be0:	ff 24       	eor	r15, r15
     be2:	c7 01       	movw	r24, r14
     be4:	80 50       	subi	r24, 0x00	; 0
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	60 2f       	mov	r22, r16
     bea:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phT = (uint8_t *)(EE_START_LAST_TEMP_BY_HOUR_SMOOTHED + hh);
     bee:	e7 01       	movw	r28, r14
     bf0:	c8 5e       	subi	r28, 0xE8	; 232
     bf2:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bf4:	f9 99       	sbic	0x1f, 1	; 31
     bf6:	fe cf       	rjmp	.-4      	; 0xbf4 <sampleStats(bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     bf8:	d2 bd       	out	0x22, r29	; 34
     bfa:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     bfc:	f8 9a       	sbi	0x1f, 0	; 31
     bfe:	80 b5       	in	r24, 0x20	; 32
  const uint8_t tempSmoothed = eeprom_read_byte(phT);
  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
     c00:	89 3f       	cpi	r24, 0xF9	; 249
     c02:	18 f0       	brcs	.+6      	; 0xc0a <sampleStats(bool)+0xcc>
     c04:	ce 01       	movw	r24, r28
     c06:	60 2f       	mov	r22, r16
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <sampleStats(bool)+0xd6>
  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }
     c0a:	60 2f       	mov	r22, r16
     c0c:	0e 94 7e 05 	call	0xafc	; 0xafc <smoothStatsValue(unsigned char, unsigned char)>
     c10:	68 2f       	mov	r22, r24
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sampleCount<<1)) / (sampleCount<<2));
     c18:	80 91 2e 01 	lds	r24, 0x012E
     c1c:	90 e0       	ldi	r25, 0x00	; 0
  const uint8_t ambL = min(ambLShifted, MAX_STATS_AMBLIGHT);
     c1e:	20 91 2b 01 	lds	r18, 0x012B
     c22:	30 91 2c 01 	lds	r19, 0x012C
     c26:	bc 01       	movw	r22, r24
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	66 0f       	add	r22, r22
     c2e:	77 1f       	adc	r23, r23
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__divmodhi4>
     c3c:	16 2f       	mov	r17, r22
     c3e:	6f 3f       	cpi	r22, 0xFF	; 255
     c40:	08 f0       	brcs	.+2      	; 0xc44 <sampleStats(bool)+0x106>
     c42:	1e ef       	ldi	r17, 0xFE	; 254
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR + hh), ambL);
     c44:	c7 01       	movw	r24, r14
     c46:	80 5d       	subi	r24, 0xD0	; 208
     c48:	9e 4f       	sbci	r25, 0xFE	; 254
     c4a:	61 2f       	mov	r22, r17
     c4c:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phA = (uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh);
     c50:	e7 01       	movw	r28, r14
     c52:	c8 5b       	subi	r28, 0xB8	; 184
     c54:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c56:	f9 99       	sbic	0x1f, 1	; 31
     c58:	fe cf       	rjmp	.-4      	; 0xc56 <sampleStats(bool)+0x118>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c5a:	d2 bd       	out	0x22, r29	; 34
     c5c:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c5e:	f8 9a       	sbi	0x1f, 0	; 31
     c60:	80 b5       	in	r24, 0x20	; 32
  const uint8_t ambLSmoothed = eeprom_read_byte(phA);
  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
     c62:	8f 3f       	cpi	r24, 0xFF	; 255
     c64:	19 f4       	brne	.+6      	; 0xc6c <sampleStats(bool)+0x12e>
     c66:	ce 01       	movw	r24, r28
     c68:	61 2f       	mov	r22, r17
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <sampleStats(bool)+0x138>
  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }
     c6c:	61 2f       	mov	r22, r17
     c6e:	0e 94 7e 05 	call	0xafc	; 0xafc <smoothStatsValue(unsigned char, unsigned char)>
     c72:	68 2f       	mov	r22, r24
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh);
     c7a:	e7 01       	movw	r28, r14
     c7c:	c0 5a       	subi	r28, 0xA0	; 160
     c7e:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c80:	f9 99       	sbic	0x1f, 1	; 31
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <sampleStats(bool)+0x142>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c84:	d2 bd       	out	0x22, r29	; 34
     c86:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c88:	f8 9a       	sbi	0x1f, 0	; 31
     c8a:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmMode() ? 0x7f : 0); } // First use sets all history bits to current sample value.
     c8c:	87 ff       	sbrs	r24, 7
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <sampleStats(bool)+0x168>
     c90:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <inWarmMode()>
     c94:	88 23       	and	r24, r24
     c96:	11 f4       	brne	.+4      	; 0xc9c <sampleStats(bool)+0x15e>
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <sampleStats(bool)+0x160>
     c9c:	6f e7       	ldi	r22, 0x7F	; 127
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 21 07 	call	0xe42	; 0xe42 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <sampleStats(bool)+0x182>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	95 95       	asr	r25
     caa:	87 95       	ror	r24
     cac:	68 2f       	mov	r22, r24
     cae:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
     cb0:	80 91 2d 01 	lds	r24, 0x012D
     cb4:	18 16       	cp	r1, r24
     cb6:	0c f4       	brge	.+2      	; 0xcba <sampleStats(bool)+0x17c>
     cb8:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
     cba:	ce 01       	movw	r24, r28
     cbc:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
     cc0:	10 92 2d 01 	sts	0x012D, r1

  // TODO: other stats measures...


  // Reset generical sub-sample count to initial state after fill sample.
  sampleCount = 0;
     cc4:	10 92 2e 01 	sts	0x012E, r1
  }
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	08 95       	ret

00000cd6 <computeTargetAndDemand()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, TRVPercentOpen.
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeTargetAndDemand()
     cd6:	1f 93       	push	r17


// Compute target temperature.
static void computeTargetTemperature()
  {
  if(!inWarmMode()) // In FROST mode.
     cd8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <inWarmMode()>
     cdc:	88 23       	and	r24, r24
     cde:	81 f4       	brne	.+32     	; 0xd00 <computeTargetAndDemand()+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ce0:	f9 99       	sbic	0x1f, 1	; 31
     ce2:	fe cf       	rjmp	.-4      	; 0xce0 <computeTargetAndDemand()+0xa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ce4:	8e e0       	ldi	r24, 0x0E	; 14
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	92 bd       	out	0x22, r25	; 34
     cea:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cec:	f8 9a       	sbi	0x1f, 0	; 31
     cee:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     cf0:	89 2f       	mov	r24, r25
     cf2:	85 50       	subi	r24, 0x05	; 5
     cf4:	8b 35       	cpi	r24, 0x5B	; 91
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <computeTargetAndDemand()+0x24>
     cf8:	95 e0       	ldi	r25, 0x05	; 5
static void computeTargetTemperature()
  {
  if(!inWarmMode()) // In FROST mode.
    {
    const uint8_t frostC = getFROSTTargetC();
    targetTempC = frostC; // Apply FROST safety target temperature by default in FROST mode; no setbacks apply.
     cfa:	90 93 2f 01 	sts	0x012F, r25
     cfe:	1d c0       	rjmp	.+58     	; 0xd3a <computeTargetAndDemand()+0x64>
      }
#endif
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
     d00:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <inBakeMode()>
     d04:	88 23       	and	r24, r24
     d06:	39 f0       	breq	.+14     	; 0xd16 <computeTargetAndDemand()+0x40>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
     d08:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
     d0c:	8b 5f       	subi	r24, 0xFB	; 251
     d0e:	80 36       	cpi	r24, 0x60	; 96
     d10:	90 f0       	brcs	.+36     	; 0xd36 <computeTargetAndDemand()+0x60>
     d12:	8f e5       	ldi	r24, 0x5F	; 95
     d14:	10 c0       	rjmp	.+32     	; 0xd36 <computeTargetAndDemand()+0x60>
    {
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if room is too dark for activity.
    // TODO: with full occupancy support then allow setback simply based on lack of occupancy.
    if(isRoomDark() && isLikelyUnoccupied())
     d16:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
     d1a:	88 23       	and	r24, r24
     d1c:	09 f0       	breq	.+2      	; 0xd20 <computeTargetAndDemand()+0x4a>
     d1e:	76 c0       	rjmp	.+236    	; 0xe0c <computeTargetAndDemand()+0x136>
     d20:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <isLikelyOccupied()>
     d24:	88 23       	and	r24, r24
     d26:	09 f0       	breq	.+2      	; 0xd2a <computeTargetAndDemand()+0x54>
     d28:	71 c0       	rjmp	.+226    	; 0xe0c <computeTargetAndDemand()+0x136>
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sb = shouldBeWarmedAtHour(hh) ? SETBACK : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - sb), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - SETBACK), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
     d2a:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
     d2e:	81 50       	subi	r24, 0x01	; 1
void panic();


// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     d30:	85 30       	cpi	r24, 0x05	; 5
     d32:	08 f4       	brcc	.+2      	; 0xd36 <computeTargetAndDemand()+0x60>
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	80 93 2f 01 	sts	0x012F, r24
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
     d3a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <getTemperatureC16()>
     d3e:	ac 01       	movw	r20, r24
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     d40:	64 e0       	ldi	r22, 0x04	; 4
     d42:	95 95       	asr	r25
     d44:	87 95       	ror	r24
     d46:	6a 95       	dec	r22
     d48:	e1 f7       	brne	.-8      	; 0xd42 <computeTargetAndDemand()+0x6c>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     d4a:	20 91 2f 01 	lds	r18, 0x012F
     d4e:	82 17       	cp	r24, r18
     d50:	c0 f4       	brcc	.+48     	; 0xd82 <computeTargetAndDemand()+0xac>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
     d52:	80 91 30 01 	lds	r24, 0x0130
     d56:	84 36       	cpi	r24, 0x64	; 100
     d58:	09 f4       	brne	.+2      	; 0xd5c <computeTargetAndDemand()+0x86>
     d5a:	55 c0       	rjmp	.+170    	; 0xe06 <computeTargetAndDemand()+0x130>
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target then in BAKE mode immediately open to 100%, unless always glacial.
      // FIXME: use debounced bake mode value to avoid spurious slamming open of valve if user cycles through modes.
      if(inBakeMode()) { TRVPercentOpen = 100; }
     d5c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <inBakeMode()>
     d60:	88 23       	and	r24, r24
     d62:	69 f4       	brne	.+26     	; 0xd7e <computeTargetAndDemand()+0xa8>
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster with comfort bias.
        const uint8_t tmp = TRVPercentOpen + ((!hasEcoBias()) ? (2*TRV_MAX_SLEW_PC_PER_MIN) : TRV_MAX_SLEW_PC_PER_MIN);
     d64:	10 91 30 01 	lds	r17, 0x0130
     d68:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <hasEcoBias()>
     d6c:	88 23       	and	r24, r24
     d6e:	11 f0       	breq	.+4      	; 0xd74 <computeTargetAndDemand()+0x9e>
     d70:	85 e0       	ldi	r24, 0x05	; 5
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <computeTargetAndDemand()+0xa0>
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	81 0f       	add	r24, r17
#else
        const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(tmp < 100) { TRVPercentOpen = tmp; } else { TRVPercentOpen = 100; } // Capped at 100%.
     d78:	84 36       	cpi	r24, 0x64	; 100
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <computeTargetAndDemand()+0xa8>
     d7c:	41 c0       	rjmp	.+130    	; 0xe00 <computeTargetAndDemand()+0x12a>
     d7e:	84 e6       	ldi	r24, 0x64	; 100
     d80:	3f c0       	rjmp	.+126    	; 0xe00 <computeTargetAndDemand()+0x12a>
        }      
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve.
     d82:	28 17       	cp	r18, r24
     d84:	d8 f4       	brcc	.+54     	; 0xdbc <computeTargetAndDemand()+0xe6>
    {
#if defined(SUPPORT_BAKE)
    cancelBake(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
     d86:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <cancelBake()>
#endif
    if(TRVPercentOpen != 0)
     d8a:	80 91 30 01 	lds	r24, 0x0130
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <computeTargetAndDemand()+0xbe>
     d92:	39 c0       	rjmp	.+114    	; 0xe06 <computeTargetAndDemand()+0x130>
      {
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew relatively slowly.
      const uint8_t slew = (2*TRV_MAX_SLEW_PC_PER_MIN);
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > slew)) { TRVPercentOpen -= slew; }
     d94:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <hasEcoBias()>
     d98:	88 23       	and	r24, r24
     d9a:	51 f0       	breq	.+20     	; 0xdb0 <computeTargetAndDemand()+0xda>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d9c:	f9 99       	sbic	0x1f, 1	; 31
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <computeTargetAndDemand()+0xc6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     da0:	82 e1       	ldi	r24, 0x12	; 18
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	92 bd       	out	0x22, r25	; 34
     da6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     da8:	f8 9a       	sbi	0x1f, 0	; 31
     daa:	80 b5       	in	r24, 0x20	; 32
     dac:	8f 3f       	cpi	r24, 0xFF	; 255
     dae:	89 f1       	breq	.+98     	; 0xe12 <computeTargetAndDemand()+0x13c>
     db0:	80 91 30 01 	lds	r24, 0x0130
     db4:	8b 30       	cpi	r24, 0x0B	; 11
     db6:	68 f1       	brcs	.+90     	; 0xe12 <computeTargetAndDemand()+0x13c>
     db8:	8a 50       	subi	r24, 0x0A	; 10
     dba:	22 c0       	rjmp	.+68     	; 0xe00 <computeTargetAndDemand()+0x12a>
    }
  else // Close to temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     dbc:	84 2f       	mov	r24, r20
     dbe:	8f 70       	andi	r24, 0x0F	; 15
    tmp = 16 - tmp; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
    const uint8_t targetPO = tmp * 6; // Now in range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
     dc0:	90 e1       	ldi	r25, 0x10	; 16
     dc2:	98 1b       	sub	r25, r24
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	98 9f       	mul	r25, r24
     dc8:	90 2d       	mov	r25, r0
     dca:	11 24       	eor	r1, r1
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO < TRVPercentOpen) // Currently open more than required.
     dcc:	20 91 30 01 	lds	r18, 0x0130
     dd0:	92 17       	cp	r25, r18
     dd2:	40 f4       	brcc	.+16     	; 0xde4 <computeTargetAndDemand()+0x10e>
      {
      const uint8_t slew = TRVPercentOpen - targetPO;
      if(slew >= max(7, TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     dd4:	82 2f       	mov	r24, r18
     dd6:	89 1b       	sub	r24, r25
     dd8:	87 30       	cpi	r24, 0x07	; 7
     dda:	a8 f0       	brcs	.+42     	; 0xe06 <computeTargetAndDemand()+0x130>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
            { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     ddc:	25 50       	subi	r18, 0x05	; 5
     dde:	20 93 30 01 	sts	0x0130, r18
     de2:	19 c0       	rjmp	.+50     	; 0xe16 <computeTargetAndDemand()+0x140>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
        changed = true; // TRV setting has been changed.
        }
      }
    else if(targetPO > TRVPercentOpen) // Currently open less than required.
     de4:	29 17       	cp	r18, r25
     de6:	78 f4       	brcc	.+30     	; 0xe06 <computeTargetAndDemand()+0x130>
      {
      const uint8_t slew = targetPO - TRVPercentOpen;
      if(slew >= TRV_MIN_SLEW_PC)
     de8:	92 1b       	sub	r25, r18
     dea:	97 30       	cpi	r25, 0x07	; 7
     dec:	60 f0       	brcs	.+24     	; 0xe06 <computeTargetAndDemand()+0x130>
        {
        // Slew open faster in BAKE mode or with comfort bias (unless always glacial).
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
        const uint8_t maxSlew = (inBakeMode() || !hasEcoBias()) ? (2*TRV_MAX_SLEW_PC_PER_MIN) : TRV_MAX_SLEW_PC_PER_MIN;
     dee:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <inBakeMode()>
     df2:	88 23       	and	r24, r24
     df4:	11 f4       	brne	.+4      	; 0xdfa <computeTargetAndDemand()+0x124>
     df6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <hasEcoBias()>
#else
        const uint8_t maxSlew = TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
            { TRVPercentOpen += TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     dfa:	80 91 30 01 	lds	r24, 0x0130
     dfe:	8b 5f       	subi	r24, 0xFB	; 251
     e00:	80 93 30 01 	sts	0x0130, r24
     e04:	08 c0       	rjmp	.+16     	; 0xe16 <computeTargetAndDemand()+0x140>
     e06:	80 e0       	ldi	r24, 0x00	; 0
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeTargetAndDemand()
  {
  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - SETBACK), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
#endif
      }
    else
      { targetTempC = getWARMTargetC(); } // Room not known to be too dark for normal activity so use WARM target directly.
     e0c:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
     e10:	92 cf       	rjmp	.-220    	; 0xd36 <computeTargetAndDemand()+0x60>
      {
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew relatively slowly.
      const uint8_t slew = (2*TRV_MAX_SLEW_PC_PER_MIN);
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > slew)) { TRVPercentOpen -= slew; }
      // Else (dy default) force to off immediately when requested, ie eagerly stop heating to conserve.
      else { TRVPercentOpen = 0; }
     e12:	10 92 30 01 	sts	0x0130, r1
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	f7 cf       	rjmp	.-18     	; 0xe08 <computeTargetAndDemand()+0x132>

00000e1a <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     e1a:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     e1c:	f9 99       	sbic	0x1f, 1	; 31
     e1e:	fe cf       	rjmp	.-4      	; 0xe1c <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     e20:	32 bd       	out	0x22, r19	; 34
     e22:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     e28:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     e2a:	8f 3f       	cpi	r24, 0xFF	; 255
     e2c:	11 f4       	brne	.+4      	; 0xe32 <eeprom_smart_erase_byte(unsigned char*)+0x18>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     e32:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e34:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     e36:	84 e1       	ldi	r24, 0x14	; 20
     e38:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     e3a:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e3c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     e3e:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     e40:	08 95       	ret

00000e42 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     e42:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     e44:	f9 99       	sbic	0x1f, 1	; 31
     e46:	fe cf       	rjmp	.-4      	; 0xe44 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     e48:	32 bd       	out	0x22, r19	; 34
     e4a:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     e50:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     e52:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     e54:	86 17       	cp	r24, r22
     e56:	11 f4       	brne	.+4      	; 0xe5c <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     e5c:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     e5e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e60:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     e62:	84 e2       	ldi	r24, 0x24	; 36
     e64:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
     e66:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e68:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     e6a:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
     e6c:	08 95       	ret

00000e6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
     e6e:	78 2f       	mov	r23, r24
     e70:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
     e72:	6f 3f       	cpi	r22, 0xFF	; 255
     e74:	19 f4       	brne	.+6      	; 0xe7c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
     e76:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
     e7a:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e7c:	f9 99       	sbic	0x1f, 1	; 31
     e7e:	fe cf       	rjmp	.-4      	; 0xe7c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e80:	47 2f       	mov	r20, r23
     e82:	5e 2f       	mov	r21, r30
     e84:	52 bd       	out	0x22, r21	; 34
     e86:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e88:	f8 9a       	sbi	0x1f, 0	; 31
     e8a:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
     e8c:	68 17       	cp	r22, r24
     e8e:	11 f4       	brne	.+4      	; 0xe94 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
     e94:	26 2f       	mov	r18, r22
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	82 23       	and	r24, r18
     e9c:	93 23       	and	r25, r19
     e9e:	28 17       	cp	r18, r24
     ea0:	39 07       	cpc	r19, r25
     ea2:	29 f4       	brne	.+10     	; 0xeae <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
     ea4:	87 2f       	mov	r24, r23
     ea6:	9e 2f       	mov	r25, r30
     ea8:	0e 94 21 07 	call	0xe42	; 0xe42 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     eac:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     eae:	f9 99       	sbic	0x1f, 1	; 31
     eb0:	fe cf       	rjmp	.-4      	; 0xeae <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     eb2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     eb4:	52 bd       	out	0x22, r21	; 34
     eb6:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     eb8:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	fa 9a       	sbi	0x1f, 2	; 31
     ec0:	f9 9a       	sbi	0x1f, 1	; 31
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
     ec6:	08 95       	ret

00000ec8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
     ec8:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
     eca:	80 81       	ld	r24, Z
     ecc:	98 2f       	mov	r25, r24
     ece:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
     ed0:	66 23       	and	r22, r22
     ed2:	b1 f4       	brne	.+44     	; 0xf00 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
     ed4:	92 30       	cpi	r25, 0x02	; 2
     ed6:	51 f0       	breq	.+20     	; 0xeec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
     ed8:	93 30       	cpi	r25, 0x03	; 3
     eda:	31 f0       	breq	.+12     	; 0xee8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
     edc:	9f 01       	movw	r18, r30
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	91 30       	cpi	r25, 0x01	; 1
     ee4:	59 f4       	brne	.+22     	; 0xefc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
     ee8:	8d ec       	ldi	r24, 0xCD	; 205
     eea:	25 c0       	rjmp	.+74     	; 0xf36 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
     eec:	80 7c       	andi	r24, 0xC0	; 192
     eee:	80 63       	ori	r24, 0x30	; 48
     ef0:	22 c0       	rjmp	.+68     	; 0xf36 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
     ef2:	80 7f       	andi	r24, 0xF0	; 240
     ef4:	8c 60       	ori	r24, 0x0C	; 12
     ef6:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     ef8:	f9 01       	movw	r30, r18
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     efc:	83 60       	ori	r24, 0x03	; 3
     efe:	13 c0       	rjmp	.+38     	; 0xf26 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	51 f0       	breq	.+20     	; 0xf18 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
     f04:	93 30       	cpi	r25, 0x03	; 3
     f06:	31 f0       	breq	.+12     	; 0xf14 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
     f08:	9f 01       	movw	r18, r30
     f0a:	2f 5f       	subi	r18, 0xFF	; 255
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	91 30       	cpi	r25, 0x01	; 1
     f10:	71 f4       	brne	.+28     	; 0xf2e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
     f12:	07 c0       	rjmp	.+14     	; 0xf22 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
     f14:	80 ee       	ldi	r24, 0xE0	; 224
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
     f18:	80 7c       	andi	r24, 0xC0	; 192
     f1a:	88 63       	ori	r24, 0x38	; 56
     f1c:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
     f22:	80 7f       	andi	r24, 0xF0	; 240
     f24:	8e 60       	ori	r24, 0x0E	; 14
     f26:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
     f28:	f9 01       	movw	r30, r18
     f2a:	8e e3       	ldi	r24, 0x3E	; 62
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     f2e:	83 60       	ori	r24, 0x03	; 3
     f30:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
     f32:	f9 01       	movw	r30, r18
     f34:	8d e8       	ldi	r24, 0x8D	; 141
     f36:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
     f38:	cf 01       	movw	r24, r30
     f3a:	08 95       	ret

00000f3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	9c 01       	movw	r18, r24
     f4a:	16 2f       	mov	r17, r22
     f4c:	00 e8       	ldi	r16, 0x80	; 128
     f4e:	c0 e0       	ldi	r28, 0x00	; 0
     f50:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
     f52:	e6 2e       	mov	r14, r22
     f54:	ff 24       	eor	r15, r15
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	80 2f       	mov	r24, r16
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	8e 21       	and	r24, r14
     f5e:	9f 21       	and	r25, r15
     f60:	89 2b       	or	r24, r25
     f62:	09 f0       	breq	.+2      	; 0xf66 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	c9 01       	movw	r24, r18
     f68:	0e 94 64 07 	call	0xec8	; 0xec8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
     f6c:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
     f6e:	06 95       	lsr	r16
     f70:	21 96       	adiw	r28, 0x01	; 1
     f72:	c8 30       	cpi	r28, 0x08	; 8
     f74:	d1 05       	cpc	r29, r1
     f76:	79 f7       	brne	.-34     	; 0xf56 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
     f78:	01 2e       	mov	r0, r17
     f7a:	12 95       	swap	r17
     f7c:	10 25       	eor	r17, r0
     f7e:	01 2e       	mov	r0, r17
     f80:	16 95       	lsr	r17
     f82:	16 95       	lsr	r17
     f84:	10 25       	eor	r17, r0
     f86:	61 2f       	mov	r22, r17
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	76 95       	lsr	r23
     f90:	67 95       	ror	r22
     f92:	61 70       	andi	r22, 0x01	; 1
     f94:	c9 01       	movw	r24, r18
     f96:	0e 94 64 07 	call	0xec8	; 0xec8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	08 95       	ret

00000fa8 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	dc 01       	movw	r26, r24
     fb0:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
     fb2:	8c ec       	ldi	r24, 0xCC	; 204
     fb4:	fd 01       	movw	r30, r26
     fb6:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	8c 93       	st	X, r24
     fbc:	df 01       	movw	r26, r30
     fbe:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
     fc0:	81 83       	std	Z+1, r24	; 0x01
     fc2:	fd 01       	movw	r30, r26
     fc4:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	8c 93       	st	X, r24
     fca:	df 01       	movw	r26, r30
     fcc:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
     fce:	81 83       	std	Z+1, r24	; 0x01
     fd0:	fd 01       	movw	r30, r26
     fd2:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
     fd8:	ff 24       	eor	r15, r15
     fda:	fa 94       	dec	r15
     fdc:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
     fde:	cf 01       	movw	r24, r30
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 64 07 	call	0xec8	; 0xec8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
     fe8:	f8 01       	movw	r30, r16
     fea:	60 81       	ld	r22, Z
     fec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
     ff0:	f8 01       	movw	r30, r16
     ff2:	61 81       	ldd	r22, Z+1	; 0x01
     ff4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
     ffe:	f8 01       	movw	r30, r16
    1000:	62 81       	ldd	r22, Z+2	; 0x02
    1002:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    1006:	f8 01       	movw	r30, r16
    1008:	63 81       	ldd	r22, Z+3	; 0x03
    100a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    100e:	f8 01       	movw	r30, r16
    1010:	60 81       	ld	r22, Z
    1012:	21 81       	ldd	r18, Z+1	; 0x01
    1014:	62 0f       	add	r22, r18
    1016:	64 5f       	subi	r22, 0xF4	; 244
    1018:	22 81       	ldd	r18, Z+2	; 0x02
    101a:	62 0f       	add	r22, r18
    101c:	23 81       	ldd	r18, Z+3	; 0x03
    101e:	62 0f       	add	r22, r18
    1020:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	0e 94 64 07 	call	0xec8	; 0xec8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bit to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	0e 94 64 07 	call	0xec8	; 0xec8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1030:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    1032:	f0 82       	st	Z, r15
  return(bptr);
  }
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	08 95       	ret

0000103c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
// The TRVPercentOpen value is used to generate the frame.
// On entry hc1, hc2 (and addresss if used) must be set correctly; this sets command and extension.
// The generated command frame can be resent indefinitely.
// The command buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ec 01       	movw	r28, r24
    1042:	9b 01       	movw	r18, r22
  {
  command->command = 0x26;
    1044:	86 e2       	ldi	r24, 0x26	; 38
    1046:	fb 01       	movw	r30, r22
    1048:	82 83       	std	Z+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	48 9f       	mul	r20, r24
    104e:	c0 01       	movw	r24, r0
    1050:	11 24       	eor	r1, r1
    1052:	64 e6       	ldi	r22, 0x64	; 100
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__divmodhi4>
    105a:	63 83       	std	Z+3, r22	; 0x03
#ifdef RFM22_SYNC_ONLY_BCFH
  // Huge cheat: only add RFM22-friendly pre-preamble if calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
  if(TRVPercentOpen >= FHT8V_MIN_VALVE_PC_REALLY_OPEN)
    105c:	4a 30       	cpi	r20, 0x0A	; 10
    105e:	60 f0       	brcs	.+24     	; 0x1078 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    {
    *bptr++ = 0xaa;
    1060:	8a ea       	ldi	r24, 0xAA	; 170
    1062:	fe 01       	movw	r30, r28
    1064:	81 93       	st	Z+, r24
    *bptr++ = 0xaa;
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	df 01       	movw	r26, r30
    106a:	11 96       	adiw	r26, 0x01	; 1
    *bptr++ = 0xaa;
    106c:	81 83       	std	Z+1, r24	; 0x01
    *bptr++ = 0xaa;
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	8c 93       	st	X, r24
    1072:	11 97       	sbiw	r26, 0x01	; 1
    1074:	ed 01       	movw	r28, r26
    1076:	22 96       	adiw	r28, 0x02	; 2
    }
#endif
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
    1078:	ce 01       	movw	r24, r28
    107a:	b9 01       	movw	r22, r18
    107c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
  }
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1086:	f9 99       	sbic	0x1f, 1	; 31
    1088:	fe cf       	rjmp	.-4      	; 0x1086 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    108a:	80 e1       	ldi	r24, 0x10	; 16
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	92 bd       	out	0x22, r25	; 34
    1090:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1092:	f8 9a       	sbi	0x1f, 0	; 31
    1094:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    1096:	08 95       	ret

00001098 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1098:	f9 99       	sbic	0x1f, 1	; 31
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    109c:	81 e1       	ldi	r24, 0x11	; 17
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	92 bd       	out	0x22, r25	; 34
    10a2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    10a4:	f8 9a       	sbi	0x1f, 0	; 31
    10a6:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    10a8:	08 95       	ret

000010aa <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    10aa:	80 91 64 01 	lds	r24, 0x0164
    10ae:	08 95       	ret

000010b0 <getFHT8V_isValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    10b0:	80 91 64 01 	lds	r24, 0x0164
    10b4:	88 23       	and	r24, r24
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <getFHT8V_isValveOpen()+0x10>
    10b8:	80 91 9a 01 	lds	r24, 0x019A
    10bc:	81 11       	cpse	r24, r1
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret

000010c2 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    10c2:	10 92 64 01 	sts	0x0164, r1
  syncStateFHT8V = 0;
    10c6:	10 92 99 01 	sts	0x0199, r1
  halfSecondsToNextFHT8VTX = 0;
    10ca:	10 92 65 01 	sts	0x0165, r1
  FHT8V_isValveOpen = false;
    10ce:	10 92 9a 01 	sts	0x019A, r1
  }
    10d2:	08 95       	ret

000010d4 <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns one housecode calling for heat heard since last call and clears, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    10d4:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10d6:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    10d8:	20 91 02 01 	lds	r18, 0x0102
    10dc:	30 91 03 01 	lds	r19, 0x0103
    lastCallForHeatHC = ~0;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	90 93 03 01 	sts	0x0103, r25
    10e8:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ec:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    10ee:	c9 01       	movw	r24, r18
    10f0:	08 95       	ret

000010f2 <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    10f2:	88 23       	and	r24, r24
    10f4:	21 f4       	brne	.+8      	; 0x10fe <StopEavesdropOnFHT8V(bool)+0xc>
    10f6:	80 91 31 01 	lds	r24, 0x0131
    10fa:	88 23       	and	r24, r24
    10fc:	21 f0       	breq	.+8      	; 0x1106 <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    10fe:	10 92 31 01 	sts	0x0131, r1
  RFM22ModeStandbyAndClearState();
    1102:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <RFM22ModeStandbyAndClearState()>
    1106:	08 95       	ret

00001108 <_SetupRFM22ToEavesdropOnFHT8V()>:
// Must be written/read under a lock if any chance of access from ISR.
static volatile uint16_t lastCallForHeatHC = ~0;

static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    1108:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    110c:	8e e2       	ldi	r24, 0x2E	; 46
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    1116:	08 95       	ret

00001118 <SetupToEavesdropOnFHT8V(bool)>:
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
void SetupToEavesdropOnFHT8V(bool force)
  {
  if(!force && eavesdropping) { return; } // Already eavesdropping.
    1118:	88 23       	and	r24, r24
    111a:	21 f4       	brne	.+8      	; 0x1124 <SetupToEavesdropOnFHT8V(bool)+0xc>
    111c:	80 91 31 01 	lds	r24, 0x0131
    1120:	88 23       	and	r24, r24
    1122:	29 f4       	brne	.+10     	; 0x112e <SetupToEavesdropOnFHT8V(bool)+0x16>
  eavesdropping = true;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 31 01 	sts	0x0131, r24
  _SetupRFM22ToEavesdropOnFHT8V();
    112a:	0e 94 84 08 	call	0x1108	; 0x1108 <_SetupRFM22ToEavesdropOnFHT8V()>
    112e:	08 95       	ret

00001130 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    1136:	28 81       	ld	r18, Y
    1138:	39 81       	ldd	r19, Y+1	; 0x01
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	82 17       	cp	r24, r18
    1140:	93 07       	cpc	r25, r19
    1142:	10 f4       	brcc	.+4      	; 0x1148 <readOneBit(decode_state_t*)+0x18>
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	88 23       	and	r24, r24
    114c:	09 f0       	breq	.+2      	; 0x1150 <readOneBit(decode_state_t*)+0x20>
    114e:	7e c0       	rjmp	.+252    	; 0x124c <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	88 23       	and	r24, r24
    1154:	11 f4       	brne	.+4      	; 0x115a <readOneBit(decode_state_t*)+0x2a>
    1156:	80 ec       	ldi	r24, 0xC0	; 192
    1158:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	80 3c       	cpi	r24, 0xC0	; 192
    115e:	41 f0       	breq	.+16     	; 0x1170 <readOneBit(decode_state_t*)+0x40>
    1160:	80 33       	cpi	r24, 0x30	; 48
    1162:	31 f0       	breq	.+12     	; 0x1170 <readOneBit(decode_state_t*)+0x40>
    1164:	8c 30       	cpi	r24, 0x0C	; 12
    1166:	21 f0       	breq	.+8      	; 0x1170 <readOneBit(decode_state_t*)+0x40>
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	11 f0       	breq	.+4      	; 0x1170 <readOneBit(decode_state_t*)+0x40>
    116c:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	e8 81       	ld	r30, Y
    1178:	f9 81       	ldd	r31, Y+1	; 0x01
    117a:	80 81       	ld	r24, Z
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	82 23       	and	r24, r18
    1180:	93 23       	and	r25, r19
    1182:	28 17       	cp	r18, r24
    1184:	39 07       	cpc	r19, r25
    1186:	09 f0       	breq	.+2      	; 0x118a <readOneBit(decode_state_t*)+0x5a>
    1188:	51 c0       	rjmp	.+162    	; 0x122c <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    118a:	c9 01       	movw	r24, r18
    118c:	95 95       	asr	r25
    118e:	87 95       	ror	r24
    1190:	95 95       	asr	r25
    1192:	87 95       	ror	r24
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	88 23       	and	r24, r24
    1198:	61 f4       	brne	.+24     	; 0x11b2 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    119a:	80 ec       	ldi	r24, 0xC0	; 192
    119c:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    119e:	9f 01       	movw	r18, r30
    11a0:	2f 5f       	subi	r18, 0xFF	; 255
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	39 83       	std	Y+1, r19	; 0x01
    11a6:	28 83       	st	Y, r18
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	82 17       	cp	r24, r18
    11ae:	93 07       	cpc	r25, r19
    11b0:	e8 f1       	brcs	.+122    	; 0x122c <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    11b4:	e8 81       	ld	r30, Y
    11b6:	f9 81       	ldd	r31, Y+1	; 0x01
    11b8:	20 81       	ld	r18, Z
    11ba:	28 23       	and	r18, r24
    11bc:	28 30       	cpi	r18, 0x08	; 8
    11be:	c1 f0       	breq	.+48     	; 0x11f0 <readOneBit(decode_state_t*)+0xc0>
    11c0:	29 30       	cpi	r18, 0x09	; 9
    11c2:	28 f4       	brcc	.+10     	; 0x11ce <readOneBit(decode_state_t*)+0x9e>
    11c4:	22 23       	and	r18, r18
    11c6:	41 f0       	breq	.+16     	; 0x11d8 <readOneBit(decode_state_t*)+0xa8>
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	81 f5       	brne	.+96     	; 0x122c <readOneBit(decode_state_t*)+0xfc>
    11cc:	11 c0       	rjmp	.+34     	; 0x11f0 <readOneBit(decode_state_t*)+0xc0>
    11ce:	20 32       	cpi	r18, 0x20	; 32
    11d0:	79 f0       	breq	.+30     	; 0x11f0 <readOneBit(decode_state_t*)+0xc0>
    11d2:	20 38       	cpi	r18, 0x80	; 128
    11d4:	59 f5       	brne	.+86     	; 0x122c <readOneBit(decode_state_t*)+0xfc>
    11d6:	0c c0       	rjmp	.+24     	; 0x11f0 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	95 95       	asr	r25
    11dc:	87 95       	ror	r24
    11de:	95 95       	asr	r25
    11e0:	87 95       	ror	r24
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	88 23       	and	r24, r24
    11e6:	91 f5       	brne	.+100    	; 0x124c <readOneBit(decode_state_t*)+0x11c>
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	f9 83       	std	Y+1, r31	; 0x01
    11ec:	e8 83       	st	Y, r30
    11ee:	2f c0       	rjmp	.+94     	; 0x124e <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	95 95       	asr	r25
    11f4:	87 95       	ror	r24
    11f6:	95 95       	asr	r25
    11f8:	87 95       	ror	r24
    11fa:	8c 83       	std	Y+4, r24	; 0x04
    11fc:	88 23       	and	r24, r24
    11fe:	61 f4       	brne	.+24     	; 0x1218 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    1200:	80 ec       	ldi	r24, 0xC0	; 192
    1202:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1204:	88 81       	ld	r24, Y
    1206:	99 81       	ldd	r25, Y+1	; 0x01
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	99 83       	std	Y+1, r25	; 0x01
    120c:	88 83       	st	Y, r24
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	3b 81       	ldd	r19, Y+3	; 0x03
    1212:	28 17       	cp	r18, r24
    1214:	39 07       	cpc	r19, r25
    1216:	50 f0       	brcs	.+20     	; 0x122c <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	e8 81       	ld	r30, Y
    121c:	f9 81       	ldd	r31, Y+1	; 0x01
    121e:	80 81       	ld	r24, Z
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	82 23       	and	r24, r18
    1226:	93 23       	and	r25, r19
    1228:	89 2b       	or	r24, r25
    122a:	19 f0       	breq	.+6      	; 0x1232 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	0d c0       	rjmp	.+26     	; 0x124c <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1232:	c9 01       	movw	r24, r18
    1234:	95 95       	asr	r25
    1236:	87 95       	ror	r24
    1238:	95 95       	asr	r25
    123a:	87 95       	ror	r24
    123c:	8c 83       	std	Y+4, r24	; 0x04
    123e:	88 23       	and	r24, r24
    1240:	19 f4       	brne	.+6      	; 0x1248 <readOneBit(decode_state_t*)+0x118>
    1242:	31 96       	adiw	r30, 0x01	; 1
    1244:	f9 83       	std	Y+1, r31	; 0x01
    1246:	e8 83       	st	Y, r30
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <readOneBit(decode_state_t*)+0x11e>
    124c:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1262:	fc 01       	movw	r30, r24
    1264:	85 81       	ldd	r24, Z+5	; 0x05
    1266:	88 23       	and	r24, r24
    1268:	11 f0       	breq	.+4      	; 0x126e <readOneByteWithParity(decode_state_t*)+0x1a>
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	1b c0       	rjmp	.+54     	; 0x12a4 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    126e:	c7 01       	movw	r24, r14
    1270:	0e 94 98 08 	call	0x1130	; 0x1130 <readOneBit(decode_state_t*)>
    1274:	18 2f       	mov	r17, r24
    1276:	08 2f       	mov	r16, r24
    1278:	c7 e0       	ldi	r28, 0x07	; 7
    127a:	d0 e0       	ldi	r29, 0x00	; 0
    127c:	06 c0       	rjmp	.+12     	; 0x128a <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    127e:	c7 01       	movw	r24, r14
    1280:	0e 94 98 08 	call	0x1130	; 0x1130 <readOneBit(decode_state_t*)>
    parity ^= bit;
    1284:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    1286:	11 0f       	add	r17, r17
    1288:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    128a:	21 97       	sbiw	r28, 0x01	; 1
    128c:	ff ef       	ldi	r31, 0xFF	; 255
    128e:	cf 3f       	cpi	r28, 0xFF	; 255
    1290:	df 07       	cpc	r29, r31
    1292:	a9 f7       	brne	.-22     	; 0x127e <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 98 08 	call	0x1130	; 0x1130 <readOneBit(decode_state_t*)>
    129a:	08 17       	cp	r16, r24
    129c:	19 f0       	breq	.+6      	; 0x12a4 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	f7 01       	movw	r30, r14
    12a2:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    12a4:	81 2f       	mov	r24, r17
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
bool FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    12d2:	7c 83       	std	Y+4, r23	; 0x04
    12d4:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    12d6:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    12d8:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(false); } }
    12da:	7e 01       	movw	r14, r28
    12dc:	08 94       	sec
    12de:	e1 1c       	adc	r14, r1
    12e0:	f1 1c       	adc	r15, r1
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    12e4:	8e 81       	ldd	r24, Y+6	; 0x06
    12e6:	88 23       	and	r24, r24
    12e8:	c9 f5       	brne	.+114    	; 0x135c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
    12ea:	c7 01       	movw	r24, r14
    12ec:	0e 94 98 08 	call	0x1130	; 0x1130 <readOneBit(decode_state_t*)>
    12f0:	88 23       	and	r24, r24
    12f2:	c1 f3       	breq	.-16     	; 0x12e4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    12f4:	c7 01       	movw	r24, r14
    12f6:	0e 94 2a 09 	call	0x1254	; 0x1254 <readOneByteWithParity(decode_state_t*)>
    12fa:	f8 01       	movw	r30, r16
    12fc:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    12fe:	c7 01       	movw	r24, r14
    1300:	0e 94 2a 09 	call	0x1254	; 0x1254 <readOneByteWithParity(decode_state_t*)>
    1304:	f8 01       	movw	r30, r16
    1306:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    1308:	c7 01       	movw	r24, r14
    130a:	0e 94 2a 09 	call	0x1254	; 0x1254 <readOneByteWithParity(decode_state_t*)>
    130e:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    1310:	c7 01       	movw	r24, r14
    1312:	0e 94 2a 09 	call	0x1254	; 0x1254 <readOneByteWithParity(decode_state_t*)>
    1316:	f8 01       	movw	r30, r16
    1318:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    131a:	c7 01       	movw	r24, r14
    131c:	0e 94 2a 09 	call	0x1254	; 0x1254 <readOneByteWithParity(decode_state_t*)>
    1320:	f8 01       	movw	r30, r16
    1322:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    1324:	c7 01       	movw	r24, r14
    1326:	0e 94 2a 09 	call	0x1254	; 0x1254 <readOneByteWithParity(decode_state_t*)>
    132a:	28 2f       	mov	r18, r24
  if(state.failed)
    132c:	8e 81       	ldd	r24, Y+6	; 0x06
    132e:	88 23       	and	r24, r24
    1330:	a9 f4       	brne	.+42     	; 0x135c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    1332:	f8 01       	movw	r30, r16
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	89 0f       	add	r24, r25
    133a:	84 5f       	subi	r24, 0xF4	; 244
    133c:	92 81       	ldd	r25, Z+2	; 0x02
    133e:	89 0f       	add	r24, r25
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	89 0f       	add	r24, r25
    1344:	8d 0d       	add	r24, r13
    1346:	82 17       	cp	r24, r18
    1348:	49 f4       	brne	.+18     	; 0x135c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#endif
    state.failed = true; return(false);
    }

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state)) { state.failed = true; return(false); }
    134a:	c7 01       	movw	r24, r14
    134c:	0e 94 98 08 	call	0x1130	; 0x1130 <readOneBit(decode_state_t*)>
    1350:	88 23       	and	r24, r24
    1352:	21 f4       	brne	.+8      	; 0x135c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>

  return(!state.failed);
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	98 27       	eor	r25, r24
    135a:	01 c0       	rjmp	.+2      	; 0x135e <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xaa>
    135c:	90 e0       	ldi	r25, 0x00	; 0
  }
    135e:	89 2f       	mov	r24, r25
    1360:	26 96       	adiw	r28, 0x06	; 6
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	08 95       	ret

0000137c <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <FHT8VCallForHeatPoll()+0xa>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <FHT8VCallForHeatPoll()+0xc>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    138c:	80 91 31 01 	lds	r24, 0x0131
    1390:	88 23       	and	r24, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <FHT8VCallForHeatPoll()+0x1a>
    1394:	55 c0       	rjmp	.+170    	; 0x1440 <FHT8VCallForHeatPoll()+0xc4>

// Returns true if there is a pending accepted call for heat.
// If so a non-~0 housecode will be returned by FHT8VCallForHeatHeardGetAndClear().
bool FHT8VCallForHeatHeard()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1396:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1398:	f8 94       	cli
    { return(lastCallForHeatHC != (uint16_t)~0); }
    139a:	80 91 02 01 	lds	r24, 0x0102
    139e:	90 91 03 01 	lds	r25, 0x0103
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13a2:	2f bf       	out	0x3f, r18	; 63
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
#endif

  // Do nothing once call for heat has been collected and is pending action.
  if(FHT8VCallForHeatHeard()) { return(false); }
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	09 f0       	breq	.+2      	; 0x13ac <FHT8VCallForHeatPoll()+0x30>
    13aa:	4a c0       	rjmp	.+148    	; 0x1440 <FHT8VCallForHeatPoll()+0xc4>

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    13ac:	0e 94 d5 11 	call	0x23aa	; 0x23aa <RFM22ReadStatusBoth()>

  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    13b0:	94 ff       	sbrs	r25, 4
    13b2:	48 c0       	rjmp	.+144    	; 0x1444 <FHT8VCallForHeatPoll()+0xc8>
    13b4:	e4 e6       	ldi	r30, 0x64	; 100
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <FHT8VCallForHeatPoll()+0x40>
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
      { *p = 0; }
    13ba:	10 82       	st	Z, r1
  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	e1 33       	cpi	r30, 0x31	; 49
    13c2:	f8 07       	cpc	r31, r24
    13c4:	d1 f7       	brne	.-12     	; 0x13ba <FHT8VCallForHeatPoll()+0x3e>
      { *p = 0; }
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    13c6:	8f 01       	movw	r16, r30
    13c8:	0f 5f       	subi	r16, 0xFF	; 255
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	c8 01       	movw	r24, r16
    13ce:	62 e3       	ldi	r22, 0x32	; 50
    13d0:	0e 94 88 10 	call	0x2110	; 0x2110 <RFM22RXFIFO(unsigned char*, unsigned char)>
    13d4:	f8 01       	movw	r30, r16
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
      {
      if(0xcc != FHT8VRXHubArea[pos])
    13d8:	80 81       	ld	r24, Z
    13da:	8c 3c       	cpi	r24, 0xCC	; 204
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <FHT8VCallForHeatPoll()+0x68>
        {
        if(pos < 2)
    13de:	92 30       	cpi	r25, 0x02	; 2
    13e0:	28 f4       	brcc	.+10     	; 0x13ec <FHT8VCallForHeatPoll()+0x70>
    13e2:	2c c0       	rjmp	.+88     	; 0x143c <FHT8VCallForHeatPoll()+0xc0>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	31 96       	adiw	r30, 0x01	; 1
    13e8:	96 30       	cpi	r25, 0x06	; 6
    13ea:	b1 f7       	brne	.-20     	; 0x13d8 <FHT8VCallForHeatPoll()+0x5c>
          }
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    const bool decoded = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1, &command);
    13ec:	89 2f       	mov	r24, r25
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	8e 5c       	subi	r24, 0xCE	; 206
    13f2:	9e 4f       	sbci	r25, 0xFE	; 254
    13f4:	63 e6       	ldi	r22, 0x63	; 99
    13f6:	71 e0       	ldi	r23, 0x01	; 1
    13f8:	ae 01       	movw	r20, r28
    13fa:	4f 5f       	subi	r20, 0xFF	; 255
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    if(decoded)
    1402:	88 23       	and	r24, r24
    1404:	b9 f0       	breq	.+46     	; 0x1434 <FHT8VCallForHeatPoll()+0xb8>
      DEBUG_SERIAL_PRINT_FLASHSTRING(" ext ");
      DEBUG_SERIAL_PRINT(command.extension);
      DEBUG_SERIAL_PRINTLN();
#endif
      // Potentially accept as call for heat only if command is 0x26 (38) and ext > 0 as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension > 0))
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	86 32       	cpi	r24, 0x26	; 38
    140a:	11 f5       	brne	.+68     	; 0x1450 <FHT8VCallForHeatPoll()+0xd4>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	88 23       	and	r24, r24
    1410:	f9 f0       	breq	.+62     	; 0x1450 <FHT8VCallForHeatPoll()+0xd4>
        {
        const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    1412:	99 81       	ldd	r25, Y+1	; 0x01
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	2a 81       	ldd	r18, Y+2	; 0x02
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	82 2b       	or	r24, r18
    141c:	93 2b       	or	r25, r19
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    141e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1420:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1422:	90 93 03 01 	sts	0x0103, r25
    1426:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    142a:	2f bf       	out	0x3f, r18	; 63
          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <StopEavesdropOnFHT8V(bool)>
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <FHT8VCallForHeatPoll()+0xd4>
      return(true); // Got a valid frame.
      }
    else
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bad RX frame");
    1434:	8a ec       	ldi	r24, 0xCA	; 202
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    143c:	0e 94 84 08 	call	0x1108	; 0x1108 <_SetupRFM22ToEavesdropOnFHT8V()>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <FHT8VCallForHeatPoll()+0xd6>
//  else if(status & 0x80) // Got sync from incoming FHT8V message.
//    { 
////    syncSeen = true;
//    return(true);
//    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1444:	97 ff       	sbrs	r25, 7
    1446:	03 c0       	rjmp	.+6      	; 0x144e <FHT8VCallForHeatPoll()+0xd2>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
    1448:	8a eb       	ldi	r24, 0xBA	; 186
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	f5 cf       	rjmp	.-22     	; 0x1438 <FHT8VCallForHeatPoll()+0xbc>
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <FHT8VCallForHeatPoll()+0xd6>
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false);
    }
  }
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <FHT8VCreateValveSetCmdFrame()>:

// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <FHT8VCreateValveSetCmdFrame()+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <FHT8VCreateValveSetCmdFrame()+0x8>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1470:	f9 99       	sbic	0x1f, 1	; 31
    1472:	fe cf       	rjmp	.-4      	; 0x1470 <FHT8VCreateValveSetCmdFrame()+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1474:	80 e1       	ldi	r24, 0x10	; 16
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	92 bd       	out	0x22, r25	; 34
    147a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    147c:	f8 9a       	sbi	0x1f, 0	; 31
    147e:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1480:	f9 99       	sbic	0x1f, 1	; 31
    1482:	fe cf       	rjmp	.-4      	; 0x1480 <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1484:	81 e1       	ldi	r24, 0x11	; 17
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	92 bd       	out	0x22, r25	; 34
    148a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    148c:	f8 9a       	sbi	0x1f, 0	; 31
    148e:	80 b5       	in	r24, 0x20	; 32
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    1490:	8a 83       	std	Y+2, r24	; 0x02
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    1492:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif
  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
    1494:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    1498:	48 2f       	mov	r20, r24
    149a:	86 e6       	ldi	r24, 0x66	; 102
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	be 01       	movw	r22, r28
    14a0:	6f 5f       	subi	r22, 0xFF	; 255
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	0e 94 1e 08 	call	0x103c	; 0x103c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
// The trailing 0xff is not sent.
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// TODO: in RX-on/HUB mode, this has to turn RX off (noting anything received) before TX, and restore RX after (rather than standby).
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	ec 01       	movw	r28, r24
    14c0:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    14c2:	88 81       	ld	r24, Y
    14c4:	8f 3f       	cpi	r24, 0xFF	; 255
    14c6:	41 f1       	breq	.+80     	; 0x1518 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    14c8:	88 23       	and	r24, r24
    14ca:	31 f4       	brne	.+12     	; 0x14d8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    14cc:	87 ed       	ldi	r24, 0xD7	; 215
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    14d4:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    14d8:	0e 94 4a 04 	call	0x894	; 0x894 <getMinBoilerOnMinutes()>
    14dc:	18 2f       	mov	r17, r24
    14de:	88 23       	and	r24, r24
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    14e2:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    14e4:	0e 94 be 09 	call	0x137c	; 0x137c <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 79 08 	call	0x10f2	; 0x10f2 <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!
    14f4:	0e 94 42 12 	call	0x2484	; 0x2484 <RFM22TXFIFO()>

  if(doubleTX)
    14f8:	00 23       	and	r16, r16
    14fa:	31 f0       	breq	.+12     	; 0x1508 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    14fc:	8d e3       	ldi	r24, 0x3D	; 61
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    RFM22TXFIFO(); // Re-send it!
    1504:	0e 94 42 12 	call	0x2484	; 0x2484 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    1508:	11 23       	and	r17, r17
    150a:	21 f0       	breq	.+8      	; 0x1514 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 8c 08 	call	0x1118	; 0x1118 <SetupToEavesdropOnFHT8V(bool)>
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    1514:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <RFM22ModeStandbyAndClearState()>
  }
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <FHT8VDoSafeExtraTXToHub()>:
// Returns true iff a TX was done.
// This may also be omitted if the TX would not be heard by the hub anyway.
bool FHT8VDoSafeExtraTXToHub()
  {
  // Do nothing until in sync.
  if(!syncedWithFHT8V) { return(false); }
    1522:	80 91 64 01 	lds	r24, 0x0164
    1526:	88 23       	and	r24, r24
    1528:	81 f0       	breq	.+32     	; 0x154a <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do nothing if too close to (within maybe 10s of) the start or finish of a ~2m TX cycle
  // (which might cause FHT8V to latch onto the wrong, extra, TX).
  if((halfSecondsToNextFHT8VTX < 20) || (halfSecondsToNextFHT8VTX > 210)) { return(false); }
    152a:	80 91 65 01 	lds	r24, 0x0165
    152e:	84 51       	subi	r24, 0x14	; 20
    1530:	8f 3b       	cpi	r24, 0xBF	; 191
    1532:	58 f4       	brcc	.+22     	; 0x154a <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do nothing if we would not send something that the hub would hear.
  if(getTRVPercentOpen() < FHT8V_MIN_VALVE_PC_REALLY_OPEN) { return(false); }
    1534:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    1538:	8a 30       	cpi	r24, 0x0A	; 10
    153a:	38 f0       	brcs	.+14     	; 0x154a <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do (single) TX.
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, false);
    153c:	86 e6       	ldi	r24, 0x66	; 102
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	08 95       	ret
  // Done it.
  return(true);
    154a:	80 e0       	ldi	r24, 0x00	; 0
  }
    154c:	08 95       	ret

0000154e <valveSettingTX(bool)>:
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
  }

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    154e:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    1550:	86 e6       	ldi	r24, 0x66	; 102
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (getTRVPercentOpen() >= FHT8V_MIN_VALVE_PC_REALLY_OPEN); }
    1558:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    155c:	10 92 9a 01 	sts	0x019A, r1
    1560:	8a 30       	cpi	r24, 0x0A	; 10
    1562:	18 f0       	brcs	.+6      	; 0x156a <valveSettingTX(bool)+0x1c>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	80 93 9a 01 	sts	0x019A, r24
    156a:	08 95       	ret

0000156c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    156c:	8f 92       	push	r8
    156e:	9f 92       	push	r9
    1570:	af 92       	push	r10
    1572:	bf 92       	push	r11
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    1582:	0e 94 4a 04 	call	0x894	; 0x894 <getMinBoilerOnMinutes()>
    1586:	88 2e       	mov	r8, r24
    1588:	88 23       	and	r24, r24
    158a:	a9 f1       	breq	.+106    	; 0x15f6 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    158c:	88 24       	eor	r8, r8
    158e:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    1590:	89 2d       	mov	r24, r9
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	5c 01       	movw	r10, r24
    1596:	cc 24       	eor	r12, r12
    1598:	b7 fc       	sbrc	r11, 7
    159a:	c0 94       	com	r12
    159c:	dc 2c       	mov	r13, r12
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
    15ac:	60 91 b2 00 	lds	r22, 0x00B2
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	69 5f       	subi	r22, 0xF9	; 249
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	88 27       	eor	r24, r24
    15b8:	77 fd       	sbrc	r23, 7
    15ba:	80 95       	com	r24
    15bc:	98 2f       	mov	r25, r24
    15be:	0e 94 2b 29 	call	0x5256	; 0x5256 <__floatsisf>
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	53 e4       	ldi	r21, 0x43	; 67
    15ca:	0e 94 66 29 	call	0x52cc	; 0x52cc <fmax>
    15ce:	7b 01       	movw	r14, r22
    15d0:	8c 01       	movw	r16, r24
    15d2:	c6 01       	movw	r24, r12
    15d4:	b5 01       	movw	r22, r10
    15d6:	0e 94 2b 29 	call	0x5256	; 0x5256 <__floatsisf>
    15da:	a8 01       	movw	r20, r16
    15dc:	97 01       	movw	r18, r14
    15de:	0e 94 a9 29 	call	0x5352	; 0x5352 <__gesf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	ec f2       	brlt	.-70     	; 0x15a0 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    15ee:	80 91 b2 00 	lds	r24, 0x00B2
    15f2:	89 15       	cp	r24, r9
    15f4:	c8 f3       	brcs	.-14     	; 0x15e8 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    15f6:	89 2d       	mov	r24, r9
    15f8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    15fc:	88 20       	and	r8, r8
    15fe:	11 f0       	breq	.+4      	; 0x1604 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    1600:	0e 94 be 09 	call	0x137c	; 0x137c <FHT8VCallForHeatPoll()>
#endif
    }
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	08 95       	ret

0000161a <doSync(bool)>:

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    161a:	1f 93       	push	r17
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <doSync(bool)+0x8>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <doSync(bool)+0xa>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	18 2f       	mov	r17, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    162a:	f9 99       	sbic	0x1f, 1	; 31
    162c:	fe cf       	rjmp	.-4      	; 0x162a <doSync(bool)+0x10>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	92 bd       	out	0x22, r25	; 34
    1634:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1636:	f8 9a       	sbi	0x1f, 0	; 31
    1638:	80 b5       	in	r24, 0x20	; 32
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    163a:	84 36       	cpi	r24, 0x64	; 100
    163c:	58 f4       	brcc	.+22     	; 0x1654 <doSync(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    163e:	f9 99       	sbic	0x1f, 1	; 31
    1640:	fe cf       	rjmp	.-4      	; 0x163e <doSync(bool)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1642:	81 e1       	ldi	r24, 0x11	; 17
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	92 bd       	out	0x22, r25	; 34
    1648:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    164a:	f8 9a       	sbi	0x1f, 0	; 31
    164c:	80 b5       	in	r24, 0x20	; 32
    164e:	84 36       	cpi	r24, 0x64	; 100
    1650:	08 f4       	brcc	.+2      	; 0x1654 <doSync(bool)+0x3a>
    1652:	af c0       	rjmp	.+350    	; 0x17b2 <doSync(bool)+0x198>
    { syncedWithFHT8V = false; return(false); }
    1654:	10 92 64 01 	sts	0x0164, r1
    1658:	a1 c0       	rjmp	.+322    	; 0x179c <doSync(bool)+0x182>

  if(0 == syncStateFHT8V)
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    165a:	81 ef       	ldi	r24, 0xF1	; 241
    165c:	80 93 99 01 	sts	0x0199, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1660:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1664:	80 e2       	ldi	r24, 0x20	; 32
    1666:	0e 94 9e 14 	call	0x293c	; 0x293c <serialPrintAndFlush(char)>
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    166a:	88 e3       	ldi	r24, 0x38	; 56
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    1672:	20 91 99 01 	lds	r18, 0x0199
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	08 f4       	brcc	.+2      	; 0x167c <doSync(bool)+0x62>
    167a:	45 c0       	rjmp	.+138    	; 0x1706 <doSync(bool)+0xec>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    167c:	20 ff       	sbrs	r18, 0
    167e:	2b c0       	rjmp	.+86     	; 0x16d6 <doSync(bool)+0xbc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1680:	f9 99       	sbic	0x1f, 1	; 31
    1682:	fe cf       	rjmp	.-4      	; 0x1680 <doSync(bool)+0x66>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1684:	80 e1       	ldi	r24, 0x10	; 16
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	92 bd       	out	0x22, r25	; 34
    168a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    168c:	f8 9a       	sbi	0x1f, 0	; 31
    168e:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1690:	f9 99       	sbic	0x1f, 1	; 31
    1692:	fe cf       	rjmp	.-4      	; 0x1690 <doSync(bool)+0x76>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1694:	81 e1       	ldi	r24, 0x11	; 17
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	92 bd       	out	0x22, r25	; 34
    169a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    169c:	f8 9a       	sbi	0x1f, 0	; 31
    169e:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    16a0:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    16a2:	8c e2       	ldi	r24, 0x2C	; 44
    16a4:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    16a6:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    16a8:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    16aa:	86 e6       	ldi	r24, 0x66	; 102
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	be 01       	movw	r22, r28
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
    16b4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    16b8:	80 91 98 01 	lds	r24, 0x0198
    16bc:	88 23       	and	r24, r24
    16be:	31 f0       	breq	.+12     	; 0x16cc <doSync(bool)+0xb2>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    16c0:	82 95       	swap	r24
    16c2:	88 0f       	add	r24, r24
    16c4:	88 0f       	add	r24, r24
    16c6:	80 7c       	andi	r24, 0xC0	; 192
    16c8:	0e 94 b6 0a 	call	0x156c	; 0x156c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    16cc:	86 e6       	ldi	r24, 0x66	; 102
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	61 2f       	mov	r22, r17
    16d2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    16d6:	80 91 99 01 	lds	r24, 0x0199
    16da:	81 50       	subi	r24, 0x01	; 1
    16dc:	80 93 99 01 	sts	0x0199, r24
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <doSync(bool)+0xcc>
    16e4:	5d c0       	rjmp	.+186    	; 0x17a0 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    16e6:	f9 99       	sbic	0x1f, 1	; 31
    16e8:	fe cf       	rjmp	.-4      	; 0x16e6 <doSync(bool)+0xcc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    16ea:	81 e1       	ldi	r24, 0x11	; 17
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	92 bd       	out	0x22, r25	; 34
    16f0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    16f2:	f8 9a       	sbi	0x1f, 0	; 31
    16f4:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    16f6:	80 91 98 01 	lds	r24, 0x0198
    16fa:	8b 5f       	subi	r24, 0xFB	; 251
    16fc:	97 70       	andi	r25, 0x07	; 7
    16fe:	89 0f       	add	r24, r25
    1700:	80 93 65 01 	sts	0x0165, r24
    1704:	4b c0       	rjmp	.+150    	; 0x179c <doSync(bool)+0x182>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    1706:	80 91 65 01 	lds	r24, 0x0165
    170a:	81 50       	subi	r24, 0x01	; 1
    170c:	80 93 65 01 	sts	0x0165, r24
    1710:	88 23       	and	r24, r24
    1712:	09 f0       	breq	.+2      	; 0x1716 <doSync(bool)+0xfc>
    1714:	45 c0       	rjmp	.+138    	; 0x17a0 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1716:	f9 99       	sbic	0x1f, 1	; 31
    1718:	fe cf       	rjmp	.-4      	; 0x1716 <doSync(bool)+0xfc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    171a:	80 e1       	ldi	r24, 0x10	; 16
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	92 bd       	out	0x22, r25	; 34
    1720:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1722:	f8 9a       	sbi	0x1f, 0	; 31
    1724:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1726:	f9 99       	sbic	0x1f, 1	; 31
    1728:	fe cf       	rjmp	.-4      	; 0x1726 <doSync(bool)+0x10c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    172a:	81 e1       	ldi	r24, 0x11	; 17
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	92 bd       	out	0x22, r25	; 34
    1730:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1732:	f8 9a       	sbi	0x1f, 0	; 31
    1734:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    1736:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    173c:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    173e:	10 92 9a 01 	sts	0x019A, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    1742:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    1744:	86 e6       	ldi	r24, 0x66	; 102
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	be 01       	movw	r22, r28
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    1752:	80 91 98 01 	lds	r24, 0x0198
    1756:	88 23       	and	r24, r24
    1758:	31 f0       	breq	.+12     	; 0x1766 <doSync(bool)+0x14c>
    175a:	82 95       	swap	r24
    175c:	88 0f       	add	r24, r24
    175e:	88 0f       	add	r24, r24
    1760:	80 7c       	andi	r24, 0xC0	; 192
    1762:	0e 94 b6 0a 	call	0x156c	; 0x156c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    1766:	86 e6       	ldi	r24, 0x66	; 102
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	61 2f       	mov	r22, r17
    176c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
    1770:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    1774:	80 e2       	ldi	r24, 0x20	; 32
    1776:	0e 94 9e 14 	call	0x293c	; 0x293c <serialPrintAndFlush(char)>
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    177a:	87 e2       	ldi	r24, 0x27	; 39
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 64 01 	sts	0x0164, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    1788:	0e 94 32 0a 	call	0x1464	; 0x1464 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    178c:	90 91 98 01 	lds	r25, 0x0198
    1790:	9d 51       	subi	r25, 0x1D	; 29
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	87 70       	andi	r24, 0x07	; 7
    1796:	98 0f       	add	r25, r24
    1798:	90 93 65 01 	sts	0x0165, r25
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <doSync(bool)+0x188>
      return(false);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	1f 91       	pop	r17
    17b0:	08 95       	ret
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    { syncedWithFHT8V = false; return(false); }

  if(0 == syncStateFHT8V)
    17b2:	80 91 99 01 	lds	r24, 0x0199
    17b6:	88 23       	and	r24, r24
    17b8:	09 f0       	breq	.+2      	; 0x17bc <doSync(bool)+0x1a2>
    17ba:	5b cf       	rjmp	.-330    	; 0x1672 <doSync(bool)+0x58>
    17bc:	4e cf       	rjmp	.-356    	; 0x165a <doSync(bool)+0x40>

000017be <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    17be:	1f 93       	push	r17
    17c0:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
    17c2:	10 92 98 01 	sts	0x0198, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    17c6:	80 91 64 01 	lds	r24, 0x0164
    17ca:	88 23       	and	r24, r24
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <FHT8VPollSyncAndTX_First(bool)+0x18>
    17ce:	81 2f       	mov	r24, r17
    17d0:	0e 94 0d 0b 	call	0x161a	; 0x161a <doSync(bool)>
    17d4:	30 c0       	rjmp	.+96     	; 0x1836 <FHT8VPollSyncAndTX_First(bool)+0x78>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
    17d6:	80 91 65 01 	lds	r24, 0x0165
    17da:	88 23       	and	r24, r24
    17dc:	31 f4       	brne	.+12     	; 0x17ea <FHT8VPollSyncAndTX_First(bool)+0x2c>
    17de:	8f e4       	ldi	r24, 0x4F	; 79
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    17e6:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    17ea:	80 91 65 01 	lds	r24, 0x0165
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	10 f0       	brcs	.+4      	; 0x17f6 <FHT8VPollSyncAndTX_First(bool)+0x38>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    17f2:	84 50       	subi	r24, 0x04	; 4
    17f4:	1d c0       	rjmp	.+58     	; 0x1830 <FHT8VPollSyncAndTX_First(bool)+0x72>
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    17f6:	81 50       	subi	r24, 0x01	; 1
    17f8:	80 93 65 01 	sts	0x0165, r24
    17fc:	88 23       	and	r24, r24
    17fe:	11 f0       	breq	.+4      	; 0x1804 <FHT8VPollSyncAndTX_First(bool)+0x46>
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	19 c0       	rjmp	.+50     	; 0x1836 <FHT8VPollSyncAndTX_First(bool)+0x78>
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    1804:	81 2f       	mov	r24, r17
    1806:	0e 94 a7 0a 	call	0x154e	; 0x154e <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    180a:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    180e:	80 e2       	ldi	r24, 0x20	; 32
    1810:	0e 94 9e 14 	call	0x293c	; 0x293c <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    1814:	86 e4       	ldi	r24, 0x46	; 70
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    181c:	f9 99       	sbic	0x1f, 1	; 31
    181e:	fe cf       	rjmp	.-4      	; 0x181c <FHT8VPollSyncAndTX_First(bool)+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1820:	81 e1       	ldi	r24, 0x11	; 17
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	92 bd       	out	0x22, r25	; 34
    1826:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1828:	f8 9a       	sbi	0x1f, 0	; 31
    182a:	80 b5       	in	r24, 0x20	; 32
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    182c:	87 70       	andi	r24, 0x07	; 7
    182e:	8d 51       	subi	r24, 0x1D	; 29
    1830:	80 93 65 01 	sts	0x0165, r24
    1834:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    1836:	1f 91       	pop	r17
    1838:	08 95       	ret

0000183a <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    183a:	1f 93       	push	r17
    183c:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    183e:	80 91 98 01 	lds	r24, 0x0198
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	80 93 98 01 	sts	0x0198, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	30 f0       	brcs	.+12     	; 0x1858 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    184c:	8c ef       	ldi	r24, 0xFC	; 252
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1854:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1858:	80 91 64 01 	lds	r24, 0x0164
    185c:	88 23       	and	r24, r24
    185e:	21 f4       	brne	.+8      	; 0x1868 <FHT8VPollSyncAndTX_Next(bool)+0x2e>
    1860:	81 2f       	mov	r24, r17
    1862:	0e 94 0d 0b 	call	0x161a	; 0x161a <doSync(bool)>
    1866:	2d c0       	rjmp	.+90     	; 0x18c2 <FHT8VPollSyncAndTX_Next(bool)+0x88>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    1868:	80 91 65 01 	lds	r24, 0x0165
    186c:	81 50       	subi	r24, 0x01	; 1
    186e:	80 93 65 01 	sts	0x0165, r24
    1872:	88 23       	and	r24, r24
    1874:	11 f0       	breq	.+4      	; 0x187a <FHT8VPollSyncAndTX_Next(bool)+0x40>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	24 c0       	rjmp	.+72     	; 0x18c2 <FHT8VPollSyncAndTX_Next(bool)+0x88>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    187a:	80 91 98 01 	lds	r24, 0x0198
    187e:	82 95       	swap	r24
    1880:	88 0f       	add	r24, r24
    1882:	88 0f       	add	r24, r24
    1884:	80 7c       	andi	r24, 0xC0	; 192
    1886:	0e 94 b6 0a 	call	0x156c	; 0x156c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    188a:	81 2f       	mov	r24, r17
    188c:	0e 94 a7 0a 	call	0x154e	; 0x154e <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1890:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	0e 94 9e 14 	call	0x293c	; 0x293c <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    189a:	83 ef       	ldi	r24, 0xF3	; 243
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    18a2:	f9 99       	sbic	0x1f, 1	; 31
    18a4:	fe cf       	rjmp	.-4      	; 0x18a2 <FHT8VPollSyncAndTX_Next(bool)+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    18a6:	81 e1       	ldi	r24, 0x11	; 17
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	92 bd       	out	0x22, r25	; 34
    18ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    18ae:	f8 9a       	sbi	0x1f, 0	; 31
    18b0:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    18b2:	80 91 98 01 	lds	r24, 0x0198
    18b6:	8d 51       	subi	r24, 0x1D	; 29
    18b8:	97 70       	andi	r25, 0x07	; 7
    18ba:	89 0f       	add	r24, r25
    18bc:	80 93 65 01 	sts	0x0165, r24
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    18c2:	1f 91       	pop	r17
    18c4:	08 95       	ret

000018c6 <FHT8VSetHC2(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    18c6:	68 2f       	mov	r22, r24
    18c8:	81 e1       	ldi	r24, 0x11	; 17
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    18d0:	08 95       	ret

000018d2 <FHT8VSetHC1(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    18d2:	68 2f       	mov	r22, r24
    18d4:	80 e1       	ldi	r24, 0x10	; 16
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    18dc:	08 95       	ret

000018de <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    18de:	80 e1       	ldi	r24, 0x10	; 16
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    18e6:	81 e1       	ldi	r24, 0x11	; 17
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
  }
    18ee:	08 95       	ret

000018f0 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    18f0:	1f 92       	push	r1
    18f2:	0f 92       	push	r0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	0f 92       	push	r0
    18f8:	11 24       	eor	r1, r1
    18fa:	2f 93       	push	r18
    18fc:	8f 93       	push	r24
    18fe:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    1900:	80 91 a5 01 	lds	r24, 0x01A5
#if defined(TWO_S_TICK_RTC_SUPPORT)
  sTemp += 2;
    1904:	8e 5f       	subi	r24, 0xFE	; 254
#else
  ++sTemp;
#endif
  if(sTemp > 59)
    1906:	8c 33       	cpi	r24, 0x3C	; 60
    1908:	c8 f0       	brcs	.+50     	; 0x193c <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    190a:	80 91 a6 01 	lds	r24, 0x01A6
    190e:	90 91 a7 01 	lds	r25, 0x01A7
    1912:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    1914:	25 e0       	ldi	r18, 0x05	; 5
    1916:	80 3a       	cpi	r24, 0xA0	; 160
    1918:	92 07       	cpc	r25, r18
    191a:	58 f0       	brcs	.+22     	; 0x1932 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    191c:	80 91 a8 01 	lds	r24, 0x01A8
    1920:	90 91 a9 01 	lds	r25, 0x01A9
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	90 93 a9 01 	sts	0x01A9, r25
    192a:	80 93 a8 01 	sts	0x01A8, r24
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    1932:	90 93 a7 01 	sts	0x01A7, r25
    1936:	80 93 a6 01 	sts	0x01A6, r24
    193a:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    193c:	80 93 a5 01 	sts	0x01A5, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    1950:	1f 92       	push	r1
    1952:	0f 92       	push	r0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	0f 92       	push	r0
    1958:	11 24       	eor	r1, r1
    195a:	8f 93       	push	r24
    195c:	9f 93       	push	r25
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    1968:	88 e1       	ldi	r24, 0x18	; 24
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	80 93 60 00 	sts	0x0060, r24
    1972:	10 92 60 00 	sts	0x0060, r1
    1976:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  uint8_t x;
  _watchdogFired = (uint8_t) 0x80 | (uint8_t) (int) &x; // Ensure non-zero, retaining any entropy in ls bits.
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	80 68       	ori	r24, 0x80	; 128
    197e:	80 93 9b 01 	sts	0x019B, r24
  }
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	9f 91       	pop	r25
    198a:	8f 91       	pop	r24
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    1996:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    1998:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    199c:	28 e0       	ldi	r18, 0x08	; 8
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	40 93 61 00 	sts	0x0061, r20
    19aa:	20 93 61 00 	sts	0x0061, r18
    19ae:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	8f 70       	andi	r24, 0x0F	; 15
    19b8:	90 70       	andi	r25, 0x00	; 0
    19ba:	20 e8       	ldi	r18, 0x80	; 128
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	20 93 61 00 	sts	0x0061, r18
    19c4:	80 93 61 00 	sts	0x0061, r24
    19c8:	0f be       	out	0x3f, r0	; 63
  }
    19ca:	08 95       	ret

000019cc <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    19cc:	83 b7       	in	r24, 0x33	; 51
    19ce:	81 7f       	andi	r24, 0xF1	; 241
    19d0:	86 60       	ori	r24, 0x06	; 6
    19d2:	83 bf       	out	0x33, r24	; 51
  cli();
    19d4:	f8 94       	cli
  sleep_enable();
    19d6:	83 b7       	in	r24, 0x33	; 51
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    19dc:	85 b7       	in	r24, 0x35	; 53
    19de:	80 66       	ori	r24, 0x60	; 96
    19e0:	85 bf       	out	0x35, r24	; 53
    19e2:	8f 7d       	andi	r24, 0xDF	; 223
    19e4:	85 bf       	out	0x35, r24	; 53
  sei();
    19e6:	78 94       	sei
  sleep_cpu();
    19e8:	88 95       	sleep
  sleep_disable();
    19ea:	83 b7       	in	r24, 0x33	; 51
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	83 bf       	out	0x33, r24	; 51
  sei();
    19f0:	78 94       	sei
  }
    19f2:	08 95       	ret

000019f4 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    19f4:	10 92 9b 01 	sts	0x019B, r1

  wdt_enable(watchdogSleep);
    19f8:	83 fd       	sbrc	r24, 3
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <nap(signed char)+0xc>
    19fc:	28 e0       	ldi	r18, 0x08	; 8
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <nap(signed char)+0xe>
    1a00:	28 e2       	ldi	r18, 0x28	; 40
    1a02:	87 70       	andi	r24, 0x07	; 7
    1a04:	28 2b       	or	r18, r24
    1a06:	88 e1       	ldi	r24, 0x18	; 24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	a8 95       	wdr
    1a10:	80 93 60 00 	sts	0x0060, r24
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1a1a:	80 91 60 00 	lds	r24, 0x0060
    1a1e:	80 64       	ori	r24, 0x40	; 64
    1a20:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1a24:	83 b7       	in	r24, 0x33	; 51
    1a26:	81 7f       	andi	r24, 0xF1	; 241
    1a28:	86 60       	ori	r24, 0x06	; 6
    1a2a:	83 bf       	out	0x33, r24	; 51
  cli();
    1a2c:	f8 94       	cli
  sleep_enable();
    1a2e:	83 b7       	in	r24, 0x33	; 51
    1a30:	81 60       	ori	r24, 0x01	; 1
    1a32:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1a34:	85 b7       	in	r24, 0x35	; 53
    1a36:	80 66       	ori	r24, 0x60	; 96
    1a38:	85 bf       	out	0x35, r24	; 53
    1a3a:	8f 7d       	andi	r24, 0xDF	; 223
    1a3c:	85 bf       	out	0x35, r24	; 53
  sei();
    1a3e:	78 94       	sei
  sleep_cpu();
    1a40:	88 95       	sleep
  sleep_disable();
    1a42:	83 b7       	in	r24, 0x33	; 51
    1a44:	8e 7f       	andi	r24, 0xFE	; 254
    1a46:	83 bf       	out	0x33, r24	; 51
  sei();
    1a48:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(_watchdogFired)
    1a4a:	80 91 9b 01 	lds	r24, 0x019B
    1a4e:	88 23       	and	r24, r24
    1a50:	49 f3       	breq	.-46     	; 0x1a24 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    1a52:	88 e1       	ldi	r24, 0x18	; 24
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	80 93 60 00 	sts	0x0060, r24
    1a5c:	10 92 60 00 	sts	0x0060, r1
    1a60:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    1a62:	08 95       	ret

00001a64 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1a64:	10 92 9b 01 	sts	0x019B, r1
  wdt_enable(watchdogSleep);
    1a68:	83 fd       	sbrc	r24, 3
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <idleCPU(signed char)+0xc>
    1a6c:	28 e0       	ldi	r18, 0x08	; 8
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <idleCPU(signed char)+0xe>
    1a70:	28 e2       	ldi	r18, 0x28	; 40
    1a72:	87 70       	andi	r24, 0x07	; 7
    1a74:	28 2b       	or	r18, r24
    1a76:	88 e1       	ldi	r24, 0x18	; 24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	a8 95       	wdr
    1a80:	80 93 60 00 	sts	0x0060, r24
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1a8a:	80 91 60 00 	lds	r24, 0x0060
    1a8e:	80 64       	ori	r24, 0x40	; 64
    1a90:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    1a94:	83 b7       	in	r24, 0x33	; 51
    1a96:	81 7f       	andi	r24, 0xF1	; 241
    1a98:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    1a9a:	83 b7       	in	r24, 0x33	; 51
    1a9c:	81 60       	ori	r24, 0x01	; 1
    1a9e:	83 bf       	out	0x33, r24	; 51
    1aa0:	88 95       	sleep
    1aa2:	83 b7       	in	r24, 0x33	; 51
    1aa4:	8e 7f       	andi	r24, 0xFE	; 254
    1aa6:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    1aa8:	88 e1       	ldi	r24, 0x18	; 24
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	80 93 60 00 	sts	0x0060, r24
    1ab2:	10 92 60 00 	sts	0x0060, r1
    1ab6:	0f be       	out	0x3f, r0	; 63
  return(_watchdogFired != 0);
    1ab8:	80 91 9b 01 	lds	r24, 0x019B
    1abc:	81 11       	cpse	r24, r1
    1abe:	81 e0       	ldi	r24, 0x01	; 1
  }
    1ac0:	08 95       	ret

00001ac2 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	8f 93       	push	r24
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 9d 01 	sts	0x019D, r24
    1ad4:	8f 91       	pop	r24
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    1ae8:	80 91 64 00 	lds	r24, 0x0064
    1aec:	80 fd       	sbrc	r24, 0
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    1af0:	00 e0       	ldi	r16, 0x00	; 0
    1af2:	0b c0       	rjmp	.+22     	; 0x1b0a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1af4:	80 91 64 00 	lds	r24, 0x0064
    1af8:	8e 7f       	andi	r24, 0xFE	; 254
    1afa:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1afe:	80 91 7a 00 	lds	r24, 0x007A
    1b02:	80 68       	ori	r24, 0x80	; 128
    1b04:	80 93 7a 00 	sts	0x007A, r24
    1b08:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    1b0a:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    1b0e:	12 30       	cpi	r17, 0x02	; 2
    1b10:	1c f4       	brge	.+6      	; 0x1b18 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    1b18:	83 b7       	in	r24, 0x33	; 51
    1b1a:	81 7f       	andi	r24, 0xF1	; 241
    1b1c:	82 60       	ori	r24, 0x02	; 2
    1b1e:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    1b20:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    1b24:	12 30       	cpi	r17, 0x02	; 2
    1b26:	24 f0       	brlt	.+8      	; 0x1b30 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    1b28:	80 91 7a 00 	lds	r24, 0x007A
    1b2c:	80 62       	ori	r24, 0x20	; 32
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    1b30:	80 91 7a 00 	lds	r24, 0x007A
    1b34:	8f 7d       	andi	r24, 0xDF	; 223
    1b36:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    1b3a:	80 91 7a 00 	lds	r24, 0x007A
    1b3e:	88 60       	ori	r24, 0x08	; 8
    1b40:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    1b44:	80 91 7a 00 	lds	r24, 0x007A
    1b48:	80 64       	ori	r24, 0x40	; 64
    1b4a:	80 93 7a 00 	sts	0x007A, r24
    1b4e:	20 91 9c 01 	lds	r18, 0x019C
    1b52:	5f ef       	ldi	r21, 0xFF	; 255
    1b54:	4f ef       	ldi	r20, 0xFF	; 255
    1b56:	1e c0       	rjmp	.+60     	; 0x1b94 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb4>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    1b58:	10 92 9d 01 	sts	0x019D, r1
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8c>
      while(!ADC_complete) { sleep_mode(); }
    1b5e:	83 b7       	in	r24, 0x33	; 51
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	83 bf       	out	0x33, r24	; 51
    1b64:	88 95       	sleep
    1b66:	83 b7       	in	r24, 0x33	; 51
    1b68:	8e 7f       	andi	r24, 0xFE	; 254
    1b6a:	83 bf       	out	0x33, r24	; 51
    1b6c:	80 91 9d 01 	lds	r24, 0x019D
    1b70:	88 23       	and	r24, r24
    1b72:	a9 f3       	breq	.-22     	; 0x1b5e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7e>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1b74:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    1b78:	90 91 79 00 	lds	r25, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    1b7c:	94 17       	cp	r25, r20
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa4>
    1b80:	35 17       	cp	r19, r21
    1b82:	59 f0       	breq	.+22     	; 0x1b9a <_analogueNoiseReducedReadM(unsigned char, signed char)+0xba>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    1b84:	82 2f       	mov	r24, r18
    1b86:	86 95       	lsr	r24
    1b88:	29 2f       	mov	r18, r25
    1b8a:	23 27       	eor	r18, r19
    1b8c:	2b 5f       	subi	r18, 0xFB	; 251
    1b8e:	28 0f       	add	r18, r24
    1b90:	49 2f       	mov	r20, r25
    1b92:	53 2f       	mov	r21, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    1b94:	11 50       	subi	r17, 0x01	; 1
    1b96:	17 ff       	sbrs	r17, 7
    1b98:	df cf       	rjmp	.-66     	; 0x1b58 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x78>
    1b9a:	20 93 9c 01 	sts	0x019C, r18
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1b9e:	80 91 7a 00 	lds	r24, 0x007A
    1ba2:	87 7f       	andi	r24, 0xF7	; 247
    1ba4:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1ba8:	80 91 7a 00 	lds	r24, 0x007A
    1bac:	8f 7d       	andi	r24, 0xDF	; 223
    1bae:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1bb2:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    1bb6:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    1bba:	00 23       	and	r16, r16
    1bbc:	51 f0       	breq	.+20     	; 0x1bd2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf2>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1bbe:	80 91 7a 00 	lds	r24, 0x007A
    1bc2:	8f 77       	andi	r24, 0x7F	; 127
    1bc4:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1bc8:	80 91 64 00 	lds	r24, 0x0064
    1bcc:	81 60       	ori	r24, 0x01	; 1
    1bce:	80 93 64 00 	sts	0x0064, r24
    1bd2:	94 2f       	mov	r25, r20
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	28 2b       	or	r18, r24
    1bda:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    1bdc:	c9 01       	movw	r24, r18
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <isBatteryLow()>:


// True if battery voltage was low when last read.
// For a 2xAA NiMH configuration this is ~2.0V, where the BOD may force a reset at 1.8V.
static bool batteryLow; // Initially false.
bool isBatteryLow() { return(batteryLow); }
    1be4:	80 91 a0 01 	lds	r24, 0x01A0
    1be8:	08 95       	ret

00001bea <getBatterymV()>:
// Last-read battery voltage.
static uint16_t batterymV;

// Get power supply voltage in mV as last read by readBatterymV(); non-negative, intially zero until first readBatterymV().
uint16_t getBatterymV() { return(batterymV); }
    1bea:	80 91 9e 01 	lds	r24, 0x019E
    1bee:	90 91 9f 01 	lds	r25, 0x019F
    1bf2:	08 95       	ret

00001bf4 <readBatterymV()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t readBatterymV()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS0) | 14);
    1bf4:	8e e4       	ldi	r24, 0x4E	; 78
    1bf6:	63 e0       	ldi	r22, 0x03	; 3
    1bf8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1bfc:	bc 01       	movw	r22, r24
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    1bfe:	80 ec       	ldi	r24, 0xC0	; 192
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    1c06:	9b 01       	movw	r18, r22
    1c08:	84 e0       	ldi	r24, 0x04	; 4
    1c0a:	22 0f       	add	r18, r18
    1c0c:	33 1f       	adc	r19, r19
    1c0e:	8a 95       	dec	r24
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <readBatterymV()+0x16>
    1c12:	26 0f       	add	r18, r22
    1c14:	37 1f       	adc	r19, r23
  batterymV = result;
    1c16:	30 93 9f 01 	sts	0x019F, r19
    1c1a:	20 93 9e 01 	sts	0x019E, r18
  batteryLow = (result < 2000); // Suitable for 2xAA NiMH, with BOD at 1.8V.
    1c1e:	10 92 a0 01 	sts	0x01A0, r1
    1c22:	87 e0       	ldi	r24, 0x07	; 7
    1c24:	20 3d       	cpi	r18, 0xD0	; 208
    1c26:	38 07       	cpc	r19, r24
    1c28:	18 f4       	brcc	.+6      	; 0x1c30 <readBatterymV()+0x3c>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 a0 01 	sts	0x01A0, r24
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    1c30:	c9 01       	movw	r24, r18
    1c32:	08 95       	ret

00001c34 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1c3c:	84 54       	subi	r24, 0x44	; 68
    1c3e:	91 40       	sbci	r25, 0x01	; 1
    1c40:	22 ed       	ldi	r18, 0xD2	; 210
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	a9 01       	movw	r20, r18
    1c46:	84 9f       	mul	r24, r20
    1c48:	90 01       	movw	r18, r0
    1c4a:	85 9f       	mul	r24, r21
    1c4c:	30 0d       	add	r19, r0
    1c4e:	94 9f       	mul	r25, r20
    1c50:	30 0d       	add	r19, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	94 e0       	ldi	r25, 0x04	; 4
    1c56:	35 95       	asr	r19
    1c58:	27 95       	ror	r18
    1c5a:	9a 95       	dec	r25
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    1c5e:	c9 01       	movw	r24, r18
    1c60:	08 95       	ret

00001c62 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    1c62:	62 95       	swap	r22
    1c64:	66 0f       	add	r22, r22
    1c66:	66 0f       	add	r22, r22
    1c68:	60 7c       	andi	r22, 0xC0	; 192
    1c6a:	87 70       	andi	r24, 0x07	; 7
    1c6c:	86 2b       	or	r24, r22
    1c6e:	63 e0       	ldi	r22, 0x03	; 3
    1c70:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1c74:	08 95       	ret

00001c76 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    1c76:	ec eb       	ldi	r30, 0xBC	; 188
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8b 7f       	andi	r24, 0xFB	; 251
    1c7e:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    1c80:	e4 e6       	ldi	r30, 0x64	; 100
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 68       	ori	r24, 0x80	; 128
    1c88:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    1c8a:	08 95       	ret

00001c8c <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    1c8c:	10 92 9b 01 	sts	0x019B, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    1c90:	88 e0       	ldi	r24, 0x08	; 8
    1c92:	28 e1       	ldi	r18, 0x18	; 24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	a8 95       	wdr
    1c9c:	20 93 60 00 	sts	0x0060, r18
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1ca6:	80 91 60 00 	lds	r24, 0x0060
    1caa:	80 64       	ori	r24, 0x40	; 64
    1cac:	80 93 60 00 	sts	0x0060, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    1cb4:	9f 5f       	subi	r25, 0xFF	; 255
    1cb6:	80 91 9b 01 	lds	r24, 0x019B
    1cba:	88 23       	and	r24, r24
    1cbc:	d9 f3       	breq	.-10     	; 0x1cb4 <clockJitterWDT()+0x28>
  return(count);
  }
    1cbe:	89 2f       	mov	r24, r25
    1cc0:	08 95       	ret

00001cc2 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    1cc2:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    1cc4:	90 91 b2 00 	lds	r25, 0x00B2
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    1cce:	4f 5f       	subi	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	80 91 b2 00 	lds	r24, 0x00B2
    1cd6:	98 17       	cp	r25, r24
    1cd8:	d1 f3       	breq	.-12     	; 0x1cce <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    1cda:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    1cde:	10 92 9b 01 	sts	0x019B, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    1ce2:	88 e0       	ldi	r24, 0x08	; 8
    1ce4:	28 e1       	ldi	r18, 0x18	; 24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	a8 95       	wdr
    1cee:	20 93 60 00 	sts	0x0060, r18
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1cf8:	80 91 60 00 	lds	r24, 0x0060
    1cfc:	80 64       	ori	r24, 0x40	; 64
    1cfe:	80 93 60 00 	sts	0x0060, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	e0 e0       	ldi	r30, 0x00	; 0
    1d0a:	38 e0       	ldi	r19, 0x08	; 8
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1d0e:	a8 e1       	ldi	r26, 0x18	; 24
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    1d14:	80 91 9b 01 	lds	r24, 0x019B
    1d18:	88 23       	and	r24, r24
    1d1a:	11 f4       	brne	.+4      	; 0x1d20 <clockJitterEntropyByte()+0x5e>
    1d1c:	2f 5f       	subi	r18, 0xFF	; 255
    1d1e:	2a c0       	rjmp	.+84     	; 0x1d74 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1d20:	2e 17       	cp	r18, r30
    1d22:	c1 f0       	breq	.+48     	; 0x1d54 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    1d24:	42 27       	eor	r20, r18
    1d26:	04 2e       	mov	r0, r20
    1d28:	42 95       	swap	r20
    1d2a:	40 7f       	andi	r20, 0xF0	; 240
    1d2c:	40 25       	eor	r20, r0
    1d2e:	05 2e       	mov	r0, r21
    1d30:	54 2f       	mov	r21, r20
    1d32:	42 95       	swap	r20
    1d34:	4f 70       	andi	r20, 0x0F	; 15
    1d36:	04 26       	eor	r0, r20
    1d38:	46 95       	lsr	r20
    1d3a:	54 27       	eor	r21, r20
    1d3c:	45 27       	eor	r20, r21
    1d3e:	44 0f       	add	r20, r20
    1d40:	44 0f       	add	r20, r20
    1d42:	44 0f       	add	r20, r20
    1d44:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1d46:	99 0f       	add	r25, r25
    1d48:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1d4a:	31 50       	subi	r19, 0x01	; 1
    1d4c:	13 16       	cp	r1, r19
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <clockJitterEntropyByte()+0x90>
    1d50:	34 c0       	rjmp	.+104    	; 0x1dba <clockJitterEntropyByte()+0xf8>
    1d52:	e2 2f       	mov	r30, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    1d54:	10 92 9b 01 	sts	0x019B, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	a8 95       	wdr
    1d5e:	a0 93 60 00 	sts	0x0060, r26
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    1d68:	80 91 60 00 	lds	r24, 0x0060
    1d6c:	80 64       	ori	r24, 0x40	; 64
    1d6e:	80 93 60 00 	sts	0x0060, r24
    1d72:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    1d74:	80 91 b2 00 	lds	r24, 0x00B2
    1d78:	f8 17       	cp	r31, r24
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <clockJitterEntropyByte()+0xbe>
    1d7c:	61 50       	subi	r22, 0x01	; 1
    1d7e:	ca cf       	rjmp	.-108    	; 0x1d14 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    1d80:	67 17       	cp	r22, r23
    1d82:	b9 f0       	breq	.+46     	; 0x1db2 <clockJitterEntropyByte()+0xf0>
    1d84:	46 27       	eor	r20, r22
    1d86:	04 2e       	mov	r0, r20
    1d88:	42 95       	swap	r20
    1d8a:	40 7f       	andi	r20, 0xF0	; 240
    1d8c:	40 25       	eor	r20, r0
    1d8e:	05 2e       	mov	r0, r21
    1d90:	54 2f       	mov	r21, r20
    1d92:	42 95       	swap	r20
    1d94:	4f 70       	andi	r20, 0x0F	; 15
    1d96:	04 26       	eor	r0, r20
    1d98:	46 95       	lsr	r20
    1d9a:	54 27       	eor	r21, r20
    1d9c:	45 27       	eor	r20, r21
    1d9e:	44 0f       	add	r20, r20
    1da0:	44 0f       	add	r20, r20
    1da2:	44 0f       	add	r20, r20
    1da4:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1da6:	99 0f       	add	r25, r25
    1da8:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1daa:	31 50       	subi	r19, 0x01	; 1
    1dac:	13 16       	cp	r1, r19
    1dae:	2c f4       	brge	.+10     	; 0x1dba <clockJitterEntropyByte()+0xf8>
    1db0:	76 2f       	mov	r23, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    1db2:	f0 91 b2 00 	lds	r31, 0x00B2
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	ad cf       	rjmp	.-166    	; 0x1d14 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    1dba:	88 e1       	ldi	r24, 0x18	; 24
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	80 93 60 00 	sts	0x0060, r24
    1dc4:	10 92 60 00 	sts	0x0060, r1
    1dc8:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    1dca:	89 2f       	mov	r24, r25
    1dcc:	1f 91       	pop	r17
    1dce:	08 95       	ret

00001dd0 <captureEntropy1()>:

// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU(), _watchdogFired); }
    1dd0:	80 91 b2 00 	lds	r24, 0x00B2
    1dd4:	66 b5       	in	r22, 0x26	; 38
    1dd6:	40 91 9b 01 	lds	r20, 0x019B
    1dda:	90 91 9c 01 	lds	r25, 0x019C
    1dde:	89 27       	eor	r24, r25
    1de0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1de4:	08 95       	ret

00001de6 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1de6:	8c b5       	in	r24, 0x2c	; 44
    1de8:	8f 7b       	andi	r24, 0xBF	; 191
    1dea:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    1dec:	e4 e6       	ldi	r30, 0x64	; 100
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	84 60       	ori	r24, 0x04	; 4
    1df4:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1df6:	8a e0       	ldi	r24, 0x0A	; 10
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1dfe:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    1e00:	8d e0       	ldi	r24, 0x0D	; 13
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1e08:	8b e0       	ldi	r24, 0x0B	; 11
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    1e10:	8c e0       	ldi	r24, 0x0C	; 12
    1e12:	62 e0       	ldi	r22, 0x02	; 2
    1e14:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1e18:	08 95       	ret

00001e1a <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    1e1a:	80 91 64 00 	lds	r24, 0x0064
    1e1e:	82 fd       	sbrc	r24, 2
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <powerUpSPIIfDisabled()+0xc>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1e26:	8a e0       	ldi	r24, 0x0A	; 10
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1e2e:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    1e30:	80 91 64 00 	lds	r24, 0x0064
    1e34:	8b 7f       	andi	r24, 0xFB	; 251
    1e36:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    1e3a:	80 e5       	ldi	r24, 0x50	; 80
    1e3c:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1e42:	08 95       	ret

00001e44 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up(ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1e44:	87 e0       	ldi	r24, 0x07	; 7
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  }
    1e4c:	08 95       	ret

00001e4e <minimisePowerWithoutSleep()>:
// Suitable for start-up and for belt-and-braces use before main sleep on each cycle,
// to ensure that nothing is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
void minimisePowerWithoutSleep()
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    1e52:	88 e1       	ldi	r24, 0x18	; 24
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	80 93 60 00 	sts	0x0060, r24
    1e5c:	10 92 60 00 	sts	0x0060, r1
    1e60:	0f be       	out	0x3f, r0	; 63
  
  // Turn off external peripherals.
  power_intermittent_peripherals_disable();
    1e62:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1e66:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    1e6a:	80 e8       	ldi	r24, 0x80	; 128
    1e6c:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    1e6e:	8f e3       	ldi	r24, 0x3F	; 63
    1e70:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    1e74:	83 e0       	ldi	r24, 0x03	; 3
    1e76:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    1e7a:	04 e6       	ldi	r16, 0x64	; 100
    1e7c:	10 e0       	ldi	r17, 0x00	; 0
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 81       	ld	r24, Z
    1e82:	81 60       	ori	r24, 0x01	; 1
    1e84:	80 83       	st	Z, r24

  // Power down SPI during major sleep.
  powerDownSPI();
    1e86:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>

#ifdef DONT_USE_TIMER0
  power_timer0_disable();
#endif

  power_timer1_disable();
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	80 81       	ld	r24, Z
    1e8e:	88 60       	ori	r24, 0x08	; 8
    1e90:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	08 95       	ret

00001e98 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    1e98:	80 91 64 00 	lds	r24, 0x0064
    1e9c:	87 fd       	sbrc	r24, 7
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <powerUpTWIIfDisabled()+0xc>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    1ea4:	80 91 64 00 	lds	r24, 0x0064
    1ea8:	8f 77       	andi	r24, 0x7F	; 127
    1eaa:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    1eae:	80 91 bc 00 	lds	r24, 0x00BC
    1eb2:	84 60       	ori	r24, 0x04	; 4
    1eb4:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1eb8:	85 e0       	ldi	r24, 0x05	; 5
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	0e 94 79 21 	call	0x42f2	; 0x42f2 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    1ec0:	10 92 b8 00 	sts	0x00B8, r1
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    1ec6:	08 95       	ret

00001ec8 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    1ed2:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    1ed4:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    1ed8:	81 17       	cp	r24, r17
    1eda:	e1 f1       	breq	.+120    	; 0x1f54 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    1edc:	18 17       	cp	r17, r24
    1ede:	10 f4       	brcc	.+4      	; 0x1ee4 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	39 c0       	rjmp	.+114    	; 0x1f56 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    1ee4:	21 2f       	mov	r18, r17
    1ee6:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    1ee8:	21 30       	cpi	r18, 0x01	; 1
    1eea:	19 f4       	brne	.+6      	; 0x1ef2 <sleepUntilSubCycleTime(unsigned char)+0x2a>
      {
      // Take a very short sleep, less than half a tick,
      // eg as may be some way into this tick already.
      //burnHundredsOfCyclesProductively();
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
    1eec:	83 e1       	ldi	r24, 0x13	; 19
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	2e c0       	rjmp	.+92     	; 0x1f4e <sleepUntilSubCycleTime(unsigned char)+0x86>
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    1ef2:	20 9f       	mul	r18, r16
    1ef4:	e0 01       	movw	r28, r0
    1ef6:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    if(msLeft >= 20)
    1ef8:	c4 31       	cpi	r28, 0x14	; 20
    1efa:	d1 05       	cpc	r29, r1
    1efc:	70 f0       	brcs	.+28     	; 0x1f1a <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    1efe:	c0 35       	cpi	r28, 0x50	; 80
    1f00:	d1 05       	cpc	r29, r1
    1f02:	38 f0       	brcs	.+14     	; 0x1f12 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    1f04:	cd 54       	subi	r28, 0x4D	; 77
    1f06:	d1 40       	sbci	r29, 0x01	; 1
    1f08:	10 f0       	brcs	.+4      	; 0x1f0e <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    1f0a:	84 e0       	ldi	r24, 0x04	; 4
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    1f18:	dd cf       	rjmp	.-70     	; 0x1ed4 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	02 97       	sbiw	r24, 0x02	; 2
    1f1e:	87 5e       	subi	r24, 0xE7	; 231
    1f20:	93 40       	sbci	r25, 0x03	; 3
    1f22:	10 f0       	brcs	.+4      	; 0x1f28 <sleepUntilSubCycleTime(unsigned char)+0x60>
    1f24:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    1f28:	9e 01       	movw	r18, r28
    1f2a:	21 50       	subi	r18, 0x01	; 1
    1f2c:	30 40       	sbci	r19, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	da 01       	movw	r26, r20
    1f34:	c9 01       	movw	r24, r18
    1f36:	63 e0       	ldi	r22, 0x03	; 3
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	aa 1f       	adc	r26, r26
    1f3e:	bb 1f       	adc	r27, r27
    1f40:	6a 95       	dec	r22
    1f42:	d1 f7       	brne	.-12     	; 0x1f38 <sleepUntilSubCycleTime(unsigned char)+0x70>
    1f44:	82 1b       	sub	r24, r18
    1f46:	93 0b       	sbc	r25, r19
    1f48:	a4 0b       	sbc	r26, r20
    1f4a:	b5 0b       	sbc	r27, r21
    1f4c:	02 97       	sbiw	r24, 0x02	; 2
    1f4e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    1f52:	c0 cf       	rjmp	.-128    	; 0x1ed4 <sleepUntilSubCycleTime(unsigned char)+0xc>
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    1f60:	80 91 64 00 	lds	r24, 0x0064

// Flush any pending serial output and power it down.
void powerDownSerial()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    1f64:	81 ff       	sbrs	r24, 1
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <powerDownSerial()+0xc>
    1f68:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
#endif
  // Flush serial output and shut down to minimal power state including minimising leakage to serial lines!
  Serial.flush();
    1f6c:	87 e0       	ldi	r24, 0x07	; 7
    1f6e:	93 e0       	ldi	r25, 0x03	; 3
    1f70:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <HardwareSerial::flush()>
  //flushSerialHW();
  Serial.end();
    1f74:	87 e0       	ldi	r24, 0x07	; 7
    1f76:	93 e0       	ldi	r25, 0x03	; 3
    1f78:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <HardwareSerial::end()>
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    1f8c:	80 91 64 00 	lds	r24, 0x0064
    1f90:	82 60       	ori	r24, 0x02	; 2
    1f92:	80 93 64 00 	sts	0x0064, r24
  }
    1f96:	08 95       	ret

00001f98 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This may churn PRNGs or gather entropy for example.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), 0, getSubCycleTime()); }
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
    1f9e:	88 23       	and	r24, r24
    1fa0:	39 f0       	breq	.+14     	; 0x1fb0 <burnHundredsOfCyclesProductivelyAndPoll()+0x18>
    1fa2:	86 b5       	in	r24, 0x26	; 38
    1fa4:	40 91 b2 00 	lds	r20, 0x00B2
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	0e 94 50 10 	call	0x20a0	; 0x20a0 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1fae:	08 95       	ret
  else { captureEntropy1(); }
    1fb0:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <captureEntropy1()>
    1fb4:	08 95       	ret

00001fb6 <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    1fb6:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    1fba:	81 ff       	sbrs	r24, 1
    1fbc:	05 c0       	rjmp	.+10     	; 0x1fc8 <flushSerialProductive()+0x12>
    1fbe:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    1fc4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <burnHundredsOfCyclesProductivelyAndPoll()>
    1fc8:	80 91 c0 00 	lds	r24, 0x00C0
    1fcc:	85 ff       	sbrs	r24, 5
    1fce:	fa cf       	rjmp	.-12     	; 0x1fc4 <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    1fd0:	87 e0       	ldi	r24, 0x07	; 7
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <HardwareSerial::flush()>
  }
    1fd8:	08 95       	ret

00001fda <flushSerialSCTSensitive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    1fda:	80 91 64 00 	lds	r24, 0x0064
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    1fde:	81 ff       	sbrs	r24, 1
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <flushSerialSCTSensitive()+0xc>
    1fe2:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    1fe6:	80 91 c0 00 	lds	r24, 0x00C0
    1fea:	85 fd       	sbrc	r24, 5
    1fec:	0b c0       	rjmp	.+22     	; 0x2004 <flushSerialSCTSensitive()+0x2a>
    1fee:	80 91 b2 00 	lds	r24, 0x00B2
    1ff2:	8b 3f       	cpi	r24, 0xFB	; 251
    1ff4:	38 f4       	brcc	.+14     	; 0x2004 <flushSerialSCTSensitive()+0x2a>
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline idle30AndPoll() { idleCPU(WDTO_30MS); pollIO(true); }
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <idleCPU(signed char)>
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
    2002:	f1 cf       	rjmp	.-30     	; 0x1fe6 <flushSerialSCTSensitive()+0xc>
    {
    idle30AndPoll(); // Save much power by idling CPU, though everything else runs.
    }
#endif
  flushSerialProductive();
    2004:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <flushSerialProductive()>
  }
    2008:	08 95       	ret

0000200a <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    200a:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    200e:	81 fd       	sbrc	r24, 1
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <powerUpSerialIfDisabled()+0xc>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    2016:	80 91 64 00 	lds	r24, 0x0064
    201a:	8d 7f       	andi	r24, 0xFD	; 253
    201c:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    2020:	87 e0       	ldi	r24, 0x07	; 7
    2022:	93 e0       	ldi	r25, 0x03	; 3
    2024:	40 ec       	ldi	r20, 0xC0	; 192
    2026:	52 e1       	ldi	r21, 0x12	; 18
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	0e 94 09 25 	call	0x4a12	; 0x4a12 <HardwareSerial::begin(unsigned long)>
    2030:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    2032:	08 95       	ret

00002034 <power_intermittent_peripherals_enable(bool)>:
// Enable power to intermittent peripherals.
//   * waitUntilStable  wait long enough (and maybe test) for I/O power to become stable.
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    2034:	1f 93       	push	r17
    2036:	18 2f       	mov	r17, r24
  {
  digitalWrite(IO_POWER_UP, HIGH);
    2038:	87 e0       	ldi	r24, 0x07	; 7
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 2b 24 	call	0x4856	; 0x4856 <digitalWrite>
  pinMode(IO_POWER_UP, OUTPUT);
    2040:	87 e0       	ldi	r24, 0x07	; 7
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    2048:	11 23       	and	r17, r17
    204a:	21 f0       	breq	.+8      	; 0x2054 <power_intermittent_peripherals_enable(bool)+0x20>
    204c:	86 e0       	ldi	r24, 0x06	; 6
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    2054:	1f 91       	pop	r17
    2056:	08 95       	ret

00002058 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    2058:	80 91 61 00 	lds	r24, 0x0061
    205c:	8f 70       	andi	r24, 0x0F	; 15
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	11 f0       	breq	.+4      	; 0x2066 <powerSetup()+0xe>
    2062:	0e 94 40 03 	call	0x680	; 0x680 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2066:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    206a:	80 91 64 00 	lds	r24, 0x0064
    206e:	8f 6e       	ori	r24, 0xEF	; 239
    2070:	80 93 64 00 	sts	0x0064, r24

#ifndef DONT_USE_TIMER0
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2074:	80 91 64 00 	lds	r24, 0x0064
    2078:	8f 7d       	andi	r24, 0xDF	; 223
    207a:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    207e:	80 91 64 00 	lds	r24, 0x0064
    2082:	8f 7b       	andi	r24, 0xBF	; 191
    2084:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    2088:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    208c:	86 e0       	ldi	r24, 0x06	; 6
    208e:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    2092:	80 e2       	ldi	r24, 0x20	; 32
    2094:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    209e:	08 95       	ret

000020a0 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    20a0:	20 91 a3 01 	lds	r18, 0x01A3
  b ^=s2;
    20a4:	90 91 a4 01 	lds	r25, 0x01A4
    20a8:	69 27       	eor	r22, r25
  c ^=s3;
    20aa:	90 91 a1 01 	lds	r25, 0x01A1
    20ae:	49 27       	eor	r20, r25
  x++;
    20b0:	90 91 a2 01 	lds	r25, 0x01A2
    20b4:	9f 5f       	subi	r25, 0xFF	; 255
    20b6:	90 93 a2 01 	sts	0x01A2, r25
  a = (a^c^x);
    20ba:	28 27       	eor	r18, r24
    20bc:	24 27       	eor	r18, r20
    20be:	29 27       	eor	r18, r25
    20c0:	20 93 a3 01 	sts	0x01A3, r18
  b = (b+a);
    20c4:	62 0f       	add	r22, r18
    20c6:	60 93 a4 01 	sts	0x01A4, r22
  c = ((c+(b>>1))^a);
    20ca:	66 95       	lsr	r22
    20cc:	64 0f       	add	r22, r20
    20ce:	62 27       	eor	r22, r18
    20d0:	60 93 a1 01 	sts	0x01A1, r22
  }
    20d4:	08 95       	ret

000020d6 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    20d6:	80 91 a2 01 	lds	r24, 0x01A2
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	80 93 a2 01 	sts	0x01A2, r24
  a = (a^c^x);       //note the mix of addition and XOR
    20e0:	20 91 a1 01 	lds	r18, 0x01A1
    20e4:	90 91 a3 01 	lds	r25, 0x01A3
    20e8:	92 27       	eor	r25, r18
    20ea:	98 27       	eor	r25, r24
    20ec:	90 93 a3 01 	sts	0x01A3, r25
  b = (b+a);         //And the use of very few instructions
    20f0:	80 91 a4 01 	lds	r24, 0x01A4
    20f4:	89 0f       	add	r24, r25
    20f6:	80 93 a4 01 	sts	0x01A4, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    20fa:	86 95       	lsr	r24
    20fc:	82 0f       	add	r24, r18
    20fe:	89 27       	eor	r24, r25
    2100:	80 93 a1 01 	sts	0x01A1, r24
  return(c);         //low order bits of other variables
  }
    2104:	08 95       	ret

00002106 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    2106:	86 e5       	ldi	r24, 0x56	; 86
    2108:	92 e0       	ldi	r25, 0x02	; 2
    210a:	80 93 a2 01 	sts	0x01A2, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    210e:	08 95       	ret

00002110 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	18 2f       	mov	r17, r24
    2118:	09 2f       	mov	r16, r25
    211a:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    211c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    2120:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2122:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2124:	87 e8       	ldi	r24, 0x87	; 135
    2126:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2128:	0d b4       	in	r0, 0x2d	; 45
    212a:	07 fe       	sbrs	r0, 7
    212c:	fd cf       	rjmp	.-6      	; 0x2128 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    212e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2130:	0d b4       	in	r0, 0x2d	; 45
    2132:	07 fe       	sbrs	r0, 7
    2134:	fd cf       	rjmp	.-6      	; 0x2130 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2136:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    2138:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    213a:	8f e7       	ldi	r24, 0x7F	; 127
    213c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    213e:	0d b4       	in	r0, 0x2d	; 45
    2140:	07 fe       	sbrs	r0, 7
    2142:	fd cf       	rjmp	.-6      	; 0x213e <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    2144:	8e b5       	in	r24, 0x2e	; 46
    2146:	81 2f       	mov	r24, r17
    2148:	90 2f       	mov	r25, r16
    214a:	9c 01       	movw	r18, r24
    214c:	f9 01       	movw	r30, r18
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2152:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2154:	0d b4       	in	r0, 0x2d	; 45
    2156:	07 fe       	sbrs	r0, 7
    2158:	fd cf       	rjmp	.-6      	; 0x2154 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    215a:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    215c:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    215e:	9f 5f       	subi	r25, 0xFF	; 255
    2160:	9f 15       	cp	r25, r15
    2162:	b8 f3       	brcs	.-18     	; 0x2152 <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    2164:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2166:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2168:	88 e8       	ldi	r24, 0x88	; 136
    216a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    216c:	0d b4       	in	r0, 0x2d	; 45
    216e:	07 fe       	sbrs	r0, 7
    2170:	fd cf       	rjmp	.-6      	; 0x216c <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2176:	0d b4       	in	r0, 0x2d	; 45
    2178:	07 fe       	sbrs	r0, 7
    217a:	fd cf       	rjmp	.-6      	; 0x2176 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    217c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    217e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2180:	88 e8       	ldi	r24, 0x88	; 136
    2182:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2184:	0d b4       	in	r0, 0x2d	; 45
    2186:	07 fe       	sbrs	r0, 7
    2188:	fd cf       	rjmp	.-6      	; 0x2184 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    218a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    218c:	0d b4       	in	r0, 0x2d	; 45
    218e:	07 fe       	sbrs	r0, 7
    2190:	fd cf       	rjmp	.-6      	; 0x218c <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2192:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2194:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2196:	85 e8       	ldi	r24, 0x85	; 133
    2198:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    219a:	0d b4       	in	r0, 0x2d	; 45
    219c:	07 fe       	sbrs	r0, 7
    219e:	fd cf       	rjmp	.-6      	; 0x219a <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21a0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21a2:	0d b4       	in	r0, 0x2d	; 45
    21a4:	07 fe       	sbrs	r0, 7
    21a6:	fd cf       	rjmp	.-6      	; 0x21a2 <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21a8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21aa:	0d b4       	in	r0, 0x2d	; 45
    21ac:	07 fe       	sbrs	r0, 7
    21ae:	fd cf       	rjmp	.-6      	; 0x21aa <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    21b0:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    21b2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21b4:	83 e8       	ldi	r24, 0x83	; 131
    21b6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21b8:	0d b4       	in	r0, 0x2d	; 45
    21ba:	07 fe       	sbrs	r0, 7
    21bc:	fd cf       	rjmp	.-6      	; 0x21b8 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21be:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21c0:	0d b4       	in	r0, 0x2d	; 45
    21c2:	07 fe       	sbrs	r0, 7
    21c4:	fd cf       	rjmp	.-6      	; 0x21c0 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21c6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21c8:	0d b4       	in	r0, 0x2d	; 45
    21ca:	07 fe       	sbrs	r0, 7
    21cc:	fd cf       	rjmp	.-6      	; 0x21c8 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    21ce:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    21d0:	44 23       	and	r20, r20
    21d2:	11 f0       	breq	.+4      	; 0x21d8 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    21d4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
  }
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	08 95       	ret

000021e0 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	18 2f       	mov	r17, r24
    21e8:	f6 2e       	mov	r15, r22
    21ea:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    21ec:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    21f0:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    21f2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21f4:	88 e8       	ldi	r24, 0x88	; 136
    21f6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21f8:	0d b4       	in	r0, 0x2d	; 45
    21fa:	07 fe       	sbrs	r0, 7
    21fc:	fd cf       	rjmp	.-6      	; 0x21f8 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21fe:	83 e0       	ldi	r24, 0x03	; 3
    2200:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2202:	0d b4       	in	r0, 0x2d	; 45
    2204:	07 fe       	sbrs	r0, 7
    2206:	fd cf       	rjmp	.-6      	; 0x2202 <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2208:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    220a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    220c:	88 e8       	ldi	r24, 0x88	; 136
    220e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2210:	0d b4       	in	r0, 0x2d	; 45
    2212:	07 fe       	sbrs	r0, 7
    2214:	fd cf       	rjmp	.-6      	; 0x2210 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2216:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2218:	0d b4       	in	r0, 0x2d	; 45
    221a:	07 fe       	sbrs	r0, 7
    221c:	fd cf       	rjmp	.-6      	; 0x2218 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    221e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2220:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2222:	8e ef       	ldi	r24, 0xFE	; 254
    2224:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2226:	0d b4       	in	r0, 0x2d	; 45
    2228:	07 fe       	sbrs	r0, 7
    222a:	fd cf       	rjmp	.-6      	; 0x2226 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    222c:	81 2f       	mov	r24, r17
    222e:	10 34       	cpi	r17, 0x40	; 64
    2230:	08 f0       	brcs	.+2      	; 0x2234 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    2232:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2234:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2236:	0d b4       	in	r0, 0x2d	; 45
    2238:	07 fe       	sbrs	r0, 7
    223a:	fd cf       	rjmp	.-6      	; 0x2236 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    223c:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    223e:	00 23       	and	r16, r16
    2240:	11 f4       	brne	.+4      	; 0x2246 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    2246:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2248:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    224a:	85 e8       	ldi	r24, 0x85	; 133
    224c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    224e:	0d b4       	in	r0, 0x2d	; 45
    2250:	07 fe       	sbrs	r0, 7
    2252:	fd cf       	rjmp	.-6      	; 0x224e <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2254:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2256:	0d b4       	in	r0, 0x2d	; 45
    2258:	07 fe       	sbrs	r0, 7
    225a:	fd cf       	rjmp	.-6      	; 0x2256 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    225c:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    225e:	ff 20       	and	r15, r15
    2260:	11 f4       	brne	.+4      	; 0x2266 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    2266:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2268:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    226a:	86 e8       	ldi	r24, 0x86	; 134
    226c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    226e:	0d b4       	in	r0, 0x2d	; 45
    2270:	07 fe       	sbrs	r0, 7
    2272:	fd cf       	rjmp	.-6      	; 0x226e <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2274:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2276:	0d b4       	in	r0, 0x2d	; 45
    2278:	07 fe       	sbrs	r0, 7
    227a:	fd cf       	rjmp	.-6      	; 0x2276 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    227c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    227e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2280:	83 e8       	ldi	r24, 0x83	; 131
    2282:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2284:	0d b4       	in	r0, 0x2d	; 45
    2286:	07 fe       	sbrs	r0, 7
    2288:	fd cf       	rjmp	.-6      	; 0x2284 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    228a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    228c:	0d b4       	in	r0, 0x2d	; 45
    228e:	07 fe       	sbrs	r0, 7
    2290:	fd cf       	rjmp	.-6      	; 0x228c <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2292:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2294:	0d b4       	in	r0, 0x2d	; 45
    2296:	07 fe       	sbrs	r0, 7
    2298:	fd cf       	rjmp	.-6      	; 0x2294 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    229a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    229c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    229e:	87 e8       	ldi	r24, 0x87	; 135
    22a0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22a2:	0d b4       	in	r0, 0x2d	; 45
    22a4:	07 fe       	sbrs	r0, 7
    22a6:	fd cf       	rjmp	.-6      	; 0x22a2 <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22a8:	85 e0       	ldi	r24, 0x05	; 5
    22aa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22ac:	0d b4       	in	r0, 0x2d	; 45
    22ae:	07 fe       	sbrs	r0, 7
    22b0:	fd cf       	rjmp	.-6      	; 0x22ac <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22b2:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    22b4:	22 23       	and	r18, r18
    22b6:	11 f0       	breq	.+4      	; 0x22bc <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    22b8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
  }
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	ff 90       	pop	r15
    22c2:	08 95       	ret

000022c4 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    22ca:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    22ce:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22d0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22d2:	88 e8       	ldi	r24, 0x88	; 136
    22d4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22d6:	0d b4       	in	r0, 0x2d	; 45
    22d8:	07 fe       	sbrs	r0, 7
    22da:	fd cf       	rjmp	.-6      	; 0x22d6 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22e0:	0d b4       	in	r0, 0x2d	; 45
    22e2:	07 fe       	sbrs	r0, 7
    22e4:	fd cf       	rjmp	.-6      	; 0x22e0 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22e6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22e8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22ea:	88 e8       	ldi	r24, 0x88	; 136
    22ec:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22ee:	0d b4       	in	r0, 0x2d	; 45
    22f0:	07 fe       	sbrs	r0, 7
    22f2:	fd cf       	rjmp	.-6      	; 0x22ee <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22f4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22f6:	0d b4       	in	r0, 0x2d	; 45
    22f8:	07 fe       	sbrs	r0, 7
    22fa:	fd cf       	rjmp	.-6      	; 0x22f6 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22fc:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    22fe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2304:	0d b4       	in	r0, 0x2d	; 45
    2306:	07 fe       	sbrs	r0, 7
    2308:	fd cf       	rjmp	.-6      	; 0x2304 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    230c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    230e:	0d b4       	in	r0, 0x2d	; 45
    2310:	07 fe       	sbrs	r0, 7
    2312:	fd cf       	rjmp	.-6      	; 0x230e <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    2314:	89 91       	ld	r24, Y+
    2316:	8f 3f       	cpi	r24, 0xFF	; 255
    2318:	c9 f7       	brne	.-14     	; 0x230c <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    231a:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    231c:	99 23       	and	r25, r25
    231e:	11 f0       	breq	.+4      	; 0x2324 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    2320:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
  }
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2330:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    2334:	fe 01       	movw	r30, r28
    2336:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    2338:	21 96       	adiw	r28, 0x01	; 1
    233a:	fe 01       	movw	r30, r28
    233c:	24 91       	lpm	r18, Z+
    233e:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    2340:	9f 3f       	cpi	r25, 0xFF	; 255
    2342:	69 f0       	breq	.+26     	; 0x235e <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2344:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    2346:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2348:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    234a:	0d b4       	in	r0, 0x2d	; 45
    234c:	07 fe       	sbrs	r0, 7
    234e:	fd cf       	rjmp	.-6      	; 0x234a <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2350:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2352:	0d b4       	in	r0, 0x2d	; 45
    2354:	07 fe       	sbrs	r0, 7
    2356:	fd cf       	rjmp	.-6      	; 0x2352 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2358:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    235a:	22 96       	adiw	r28, 0x02	; 2
    235c:	eb cf       	rjmp	.-42     	; 0x2334 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    235e:	88 23       	and	r24, r24
    2360:	11 f0       	breq	.+4      	; 0x2366 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    2362:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
  }
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    236c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    2370:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2372:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2374:	87 e8       	ldi	r24, 0x87	; 135
    2376:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2378:	0d b4       	in	r0, 0x2d	; 45
    237a:	07 fe       	sbrs	r0, 7
    237c:	fd cf       	rjmp	.-6      	; 0x2378 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    237e:	80 e8       	ldi	r24, 0x80	; 128
    2380:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2382:	0d b4       	in	r0, 0x2d	; 45
    2384:	07 fe       	sbrs	r0, 7
    2386:	fd cf       	rjmp	.-6      	; 0x2382 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2388:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    238a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    238c:	87 e8       	ldi	r24, 0x87	; 135
    238e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2390:	0d b4       	in	r0, 0x2d	; 45
    2392:	07 fe       	sbrs	r0, 7
    2394:	fd cf       	rjmp	.-6      	; 0x2390 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2396:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2398:	0d b4       	in	r0, 0x2d	; 45
    239a:	07 fe       	sbrs	r0, 7
    239c:	fd cf       	rjmp	.-6      	; 0x2398 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    239e:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    23a0:	99 23       	and	r25, r25
    23a2:	11 f0       	breq	.+4      	; 0x23a8 <RFM22PowerOnInit()+0x3c>
    23a4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
    23a8:	08 95       	ret

000023aa <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    23ae:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    23b2:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    23b4:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    23b6:	83 e0       	ldi	r24, 0x03	; 3
    23b8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23ba:	0d b4       	in	r0, 0x2d	; 45
    23bc:	07 fe       	sbrs	r0, 7
    23be:	fd cf       	rjmp	.-6      	; 0x23ba <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    23c0:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    23c2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23c4:	0d b4       	in	r0, 0x2d	; 45
    23c6:	07 fe       	sbrs	r0, 7
    23c8:	fd cf       	rjmp	.-6      	; 0x23c4 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    23ca:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    23cc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23ce:	0d b4       	in	r0, 0x2d	; 45
    23d0:	07 fe       	sbrs	r0, 7
    23d2:	fd cf       	rjmp	.-6      	; 0x23ce <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    23d4:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    23d6:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    23d8:	99 23       	and	r25, r25
    23da:	11 f0       	breq	.+4      	; 0x23e0 <RFM22ReadStatusBoth()+0x36>
    23dc:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
    23e0:	90 2f       	mov	r25, r16
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	21 2f       	mov	r18, r17
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	28 2b       	or	r18, r24
    23ea:	39 2b       	or	r19, r25
  return(result);
  }
    23ec:	c9 01       	movw	r24, r18
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	08 95       	ret

000023f4 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    23f4:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    23f8:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23fa:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23fc:	87 e8       	ldi	r24, 0x87	; 135
    23fe:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2400:	0d b4       	in	r0, 0x2d	; 45
    2402:	07 fe       	sbrs	r0, 7
    2404:	fd cf       	rjmp	.-6      	; 0x2400 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2406:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2408:	0d b4       	in	r0, 0x2d	; 45
    240a:	07 fe       	sbrs	r0, 7
    240c:	fd cf       	rjmp	.-6      	; 0x2408 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    240e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2410:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2412:	88 e8       	ldi	r24, 0x88	; 136
    2414:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2416:	0d b4       	in	r0, 0x2d	; 45
    2418:	07 fe       	sbrs	r0, 7
    241a:	fd cf       	rjmp	.-6      	; 0x2416 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2420:	0d b4       	in	r0, 0x2d	; 45
    2422:	07 fe       	sbrs	r0, 7
    2424:	fd cf       	rjmp	.-6      	; 0x2420 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2426:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2428:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    242a:	88 e8       	ldi	r24, 0x88	; 136
    242c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    242e:	0d b4       	in	r0, 0x2d	; 45
    2430:	07 fe       	sbrs	r0, 7
    2432:	fd cf       	rjmp	.-6      	; 0x242e <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2434:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2436:	0d b4       	in	r0, 0x2d	; 45
    2438:	07 fe       	sbrs	r0, 7
    243a:	fd cf       	rjmp	.-6      	; 0x2436 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    243c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    243e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2440:	85 e8       	ldi	r24, 0x85	; 133
    2442:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2444:	0d b4       	in	r0, 0x2d	; 45
    2446:	07 fe       	sbrs	r0, 7
    2448:	fd cf       	rjmp	.-6      	; 0x2444 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    244a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    244c:	0d b4       	in	r0, 0x2d	; 45
    244e:	07 fe       	sbrs	r0, 7
    2450:	fd cf       	rjmp	.-6      	; 0x244c <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2452:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2454:	0d b4       	in	r0, 0x2d	; 45
    2456:	07 fe       	sbrs	r0, 7
    2458:	fd cf       	rjmp	.-6      	; 0x2454 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    245a:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    245c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    245e:	83 e8       	ldi	r24, 0x83	; 131
    2460:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2462:	0d b4       	in	r0, 0x2d	; 45
    2464:	07 fe       	sbrs	r0, 7
    2466:	fd cf       	rjmp	.-6      	; 0x2462 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2468:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    246a:	0d b4       	in	r0, 0x2d	; 45
    246c:	07 fe       	sbrs	r0, 7
    246e:	fd cf       	rjmp	.-6      	; 0x246a <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2470:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2472:	0d b4       	in	r0, 0x2d	; 45
    2474:	07 fe       	sbrs	r0, 7
    2476:	fd cf       	rjmp	.-6      	; 0x2472 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2478:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    247a:	99 23       	and	r25, r25
    247c:	11 f0       	breq	.+4      	; 0x2482 <RFM22ModeStandbyAndClearState()+0x8e>
    247e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
    2482:	08 95       	ret

00002484 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    2484:	ff 92       	push	r15
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    248a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    248e:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2490:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2492:	85 e8       	ldi	r24, 0x85	; 133
    2494:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2496:	0d b4       	in	r0, 0x2d	; 45
    2498:	07 fe       	sbrs	r0, 7
    249a:	fd cf       	rjmp	.-6      	; 0x2496 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    249c:	84 e0       	ldi	r24, 0x04	; 4
    249e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24a0:	0d b4       	in	r0, 0x2d	; 45
    24a2:	07 fe       	sbrs	r0, 7
    24a4:	fd cf       	rjmp	.-6      	; 0x24a0 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24a6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    24a8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24aa:	86 e8       	ldi	r24, 0x86	; 134
    24ac:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24ae:	0d b4       	in	r0, 0x2d	; 45
    24b0:	07 fe       	sbrs	r0, 7
    24b2:	fd cf       	rjmp	.-6      	; 0x24ae <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24b4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24b6:	0d b4       	in	r0, 0x2d	; 45
    24b8:	07 fe       	sbrs	r0, 7
    24ba:	fd cf       	rjmp	.-6      	; 0x24b6 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24bc:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    24be:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24c0:	83 e8       	ldi	r24, 0x83	; 131
    24c2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24c4:	0d b4       	in	r0, 0x2d	; 45
    24c6:	07 fe       	sbrs	r0, 7
    24c8:	fd cf       	rjmp	.-6      	; 0x24c4 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24ca:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24cc:	0d b4       	in	r0, 0x2d	; 45
    24ce:	07 fe       	sbrs	r0, 7
    24d0:	fd cf       	rjmp	.-6      	; 0x24cc <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24d2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24d4:	0d b4       	in	r0, 0x2d	; 45
    24d6:	07 fe       	sbrs	r0, 7
    24d8:	fd cf       	rjmp	.-6      	; 0x24d4 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    24da:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    24dc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24de:	87 e8       	ldi	r24, 0x87	; 135
    24e0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24e2:	0d b4       	in	r0, 0x2d	; 45
    24e4:	07 fe       	sbrs	r0, 7
    24e6:	fd cf       	rjmp	.-6      	; 0x24e2 <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24e8:	89 e0       	ldi	r24, 0x09	; 9
    24ea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24ec:	0d b4       	in	r0, 0x2d	; 45
    24ee:	07 fe       	sbrs	r0, 7
    24f0:	fd cf       	rjmp	.-6      	; 0x24ec <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24f2:	2a 9a       	sbi	0x05, 2	; 5
    24f4:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24f6:	03 e0       	ldi	r16, 0x03	; 3
    24f8:	13 c0       	rjmp	.+38     	; 0x2520 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2500:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2502:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2504:	0d b4       	in	r0, 0x2d	; 45
    2506:	07 fe       	sbrs	r0, 7
    2508:	fd cf       	rjmp	.-6      	; 0x2504 <RFM22TXFIFO()+0x80>
  return(SPDR);
    250a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    250c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    250e:	0d b4       	in	r0, 0x2d	; 45
    2510:	07 fe       	sbrs	r0, 7
    2512:	fd cf       	rjmp	.-6      	; 0x250e <RFM22TXFIFO()+0x8a>
  return(SPDR);
    2514:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2516:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    2518:	82 ff       	sbrs	r24, 2
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <RFM22TXFIFO()+0x9c>
    251c:	11 e0       	ldi	r17, 0x01	; 1
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    2520:	11 50       	subi	r17, 0x01	; 1
    2522:	58 f7       	brcc	.-42     	; 0x24fa <RFM22TXFIFO()+0x76>
    2524:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    2526:	ff 20       	and	r15, r15
    2528:	11 f0       	breq	.+4      	; 0x252e <RFM22TXFIFO()+0xaa>
    252a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
  return(result);
  }
    252e:	81 2f       	mov	r24, r17
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	ff 90       	pop	r15
    2536:	08 95       	ret

00002538 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    253c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <powerUpSPIIfDisabled()>
    2540:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2542:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2544:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2546:	0d b4       	in	r0, 0x2d	; 45
    2548:	07 fe       	sbrs	r0, 7
    254a:	fd cf       	rjmp	.-6      	; 0x2546 <RFM22CheckConnected()+0xe>
  return(SPDR);
    254c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    254e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2550:	0d b4       	in	r0, 0x2d	; 45
    2552:	07 fe       	sbrs	r0, 7
    2554:	fd cf       	rjmp	.-6      	; 0x2550 <RFM22CheckConnected()+0x18>
  return(SPDR);
    2556:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2558:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    255a:	18 30       	cpi	r17, 0x08	; 8
    255c:	a1 f4       	brne	.+40     	; 0x2586 <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    255e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2564:	0d b4       	in	r0, 0x2d	; 45
    2566:	07 fe       	sbrs	r0, 7
    2568:	fd cf       	rjmp	.-6      	; 0x2564 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    256a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    256c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    256e:	0d b4       	in	r0, 0x2d	; 45
    2570:	07 fe       	sbrs	r0, 7
    2572:	fd cf       	rjmp	.-6      	; 0x256e <RFM22CheckConnected()+0x36>
  return(SPDR);
    2574:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2576:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    2578:	16 30       	cpi	r17, 0x06	; 6
    257a:	11 f4       	brne	.+4      	; 0x2580 <RFM22CheckConnected()+0x48>
    257c:	11 e0       	ldi	r17, 0x01	; 1
    257e:	10 c0       	rjmp	.+32     	; 0x25a0 <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    2580:	8a e7       	ldi	r24, 0x7A	; 122
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	02 c0       	rjmp	.+4      	; 0x258a <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    2586:	89 e6       	ldi	r24, 0x69	; 105
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    258e:	81 2f       	mov	r24, r17
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	60 e1       	ldi	r22, 0x10	; 16
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    259a:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
    259e:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    25a0:	00 23       	and	r16, r16
    25a2:	11 f0       	breq	.+4      	; 0x25a8 <RFM22CheckConnected()+0x70>
    25a4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <powerDownSPI()>
  return(isOK);
  }
    25a8:	81 2f       	mov	r24, r17
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	08 95       	ret

000025b0 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    25b0:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    25b2:	f9 99       	sbic	0x1f, 1	; 31
    25b4:	fe cf       	rjmp	.-4      	; 0x25b2 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    25b6:	32 bd       	out	0x22, r19	; 34
    25b8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    25ba:	f8 9a       	sbi	0x1f, 0	; 31
    25bc:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    25be:	08 95       	ret

000025c0 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    25c0:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    25c2:	f9 99       	sbic	0x1f, 1	; 31
    25c4:	fe cf       	rjmp	.-4      	; 0x25c2 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    25c6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25c8:	32 bd       	out	0x22, r19	; 34
    25ca:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    25cc:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	fa 9a       	sbi	0x1f, 2	; 31
    25d4:	f9 9a       	sbi	0x1f, 1	; 31
    25d6:	0f be       	out	0x3f, r0	; 63
}
    25d8:	08 95       	ret

000025da <getMinutesSinceMidnightLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    25da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25dc:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    25de:	20 91 a6 01 	lds	r18, 0x01A6
    25e2:	30 91 a7 01 	lds	r19, 0x01A7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25e6:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    25e8:	c9 01       	movw	r24, r18
    25ea:	08 95       	ret

000025ec <getMinutesLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    25ec:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25ee:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    25f0:	80 91 a6 01 	lds	r24, 0x01A6
    25f4:	90 91 a7 01 	lds	r25, 0x01A7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25f8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    25fa:	6c e3       	ldi	r22, 0x3C	; 60
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
  return(result);
  }

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    2602:	08 95       	ret

00002604 <getHoursLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2604:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2606:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    2608:	80 91 a6 01 	lds	r24, 0x01A6
    260c:	90 91 a7 01 	lds	r25, 0x01A7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2610:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2612:	6c e3       	ldi	r22, 0x3C	; 60
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    261a:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    261c:	08 95       	ret

0000261e <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    261e:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2620:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2622:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2624:	88 e0       	ldi	r24, 0x08	; 8
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	68 ed       	ldi	r22, 0xD8	; 216
    262a:	72 e1       	ldi	r23, 0x12	; 18
    262c:	0e 94 a8 03 	call	0x750	; 0x750 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    2630:	2f ef       	ldi	r18, 0xFF	; 255
    2632:	8f 3f       	cpi	r24, 0xFF	; 255
    2634:	92 07       	cpc	r25, r18
    2636:	21 f0       	breq	.+8      	; 0x2640 <restoreRTC()+0x22>
    2638:	90 93 a9 01 	sts	0x01A9, r25
    263c:	80 93 a8 01 	sts	0x01A8, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2640:	f9 99       	sbic	0x1f, 1	; 31
    2642:	fe cf       	rjmp	.-4      	; 0x2640 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2644:	8a e0       	ldi	r24, 0x0A	; 10
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	92 bd       	out	0x22, r25	; 34
    264a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    264c:	f8 9a       	sbi	0x1f, 0	; 31
    264e:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2650:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    2652:	60 3c       	cpi	r22, 0xC0	; 192
    2654:	90 f5       	brcc	.+100    	; 0x26ba <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    2656:	86 2f       	mov	r24, r22
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	23 e0       	ldi	r18, 0x03	; 3
    265c:	95 95       	asr	r25
    265e:	87 95       	ror	r24
    2660:	2a 95       	dec	r18
    2662:	e1 f7       	brne	.-8      	; 0x265c <restoreRTC()+0x3e>
    2664:	2c e3       	ldi	r18, 0x3C	; 60
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	82 9f       	mul	r24, r18
    266a:	a0 01       	movw	r20, r0
    266c:	83 9f       	mul	r24, r19
    266e:	50 0d       	add	r21, r0
    2670:	92 9f       	mul	r25, r18
    2672:	50 0d       	add	r21, r0
    2674:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    2676:	9a 01       	movw	r18, r20
    2678:	28 5f       	subi	r18, 0xF8	; 248
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    267c:	86 2f       	mov	r24, r22
    267e:	87 70       	andi	r24, 0x07	; 7
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	59 f0       	breq	.+22     	; 0x269a <restoreRTC()+0x7c>
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	28 f0       	brcs	.+10     	; 0x2692 <restoreRTC()+0x74>
    2688:	83 30       	cpi	r24, 0x03	; 3
    268a:	59 f0       	breq	.+22     	; 0x26a2 <restoreRTC()+0x84>
    268c:	87 30       	cpi	r24, 0x07	; 7
    268e:	a9 f4       	brne	.+42     	; 0x26ba <restoreRTC()+0x9c>
    2690:	0b c0       	rjmp	.+22     	; 0x26a8 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    2692:	9a 01       	movw	r18, r20
    2694:	2b 5c       	subi	r18, 0xCB	; 203
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
    2698:	07 c0       	rjmp	.+14     	; 0x26a8 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    269a:	9a 01       	movw	r18, r20
    269c:	2a 5d       	subi	r18, 0xDA	; 218
    269e:	3f 4f       	sbci	r19, 0xFF	; 255
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    26a2:	9a 01       	movw	r18, r20
    26a4:	29 5e       	subi	r18, 0xE9	; 233
    26a6:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    26a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26aa:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    26ac:	30 93 a7 01 	sts	0x01A7, r19
    26b0:	20 93 a6 01 	sts	0x01A6, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26b4:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <restoreRTC()+0x9e>

  return(true);
    26ba:	80 e0       	ldi	r24, 0x00	; 0
  }
    26bc:	1f 91       	pop	r17
    26be:	08 95       	ret

000026c0 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    26c0:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    26c2:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26c4:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    26c6:	80 91 a6 01 	lds	r24, 0x01A6
    26ca:	90 91 a7 01 	lds	r25, 0x01A7
    26ce:	6f e0       	ldi	r22, 0x0F	; 15
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    26d6:	46 2f       	mov	r20, r22
    26d8:	44 0f       	add	r20, r20
    26da:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	63 70       	andi	r22, 0x03	; 3
    26e0:	70 70       	andi	r23, 0x00	; 0
    26e2:	61 30       	cpi	r22, 0x01	; 1
    26e4:	71 05       	cpc	r23, r1
    26e6:	39 f0       	breq	.+14     	; 0x26f6 <persistRTC()+0x36>
    26e8:	62 30       	cpi	r22, 0x02	; 2
    26ea:	71 05       	cpc	r23, r1
    26ec:	31 f0       	breq	.+12     	; 0x26fa <persistRTC()+0x3a>
    26ee:	67 2b       	or	r22, r23
    26f0:	29 f4       	brne	.+10     	; 0x26fc <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    26f2:	47 60       	ori	r20, 0x07	; 7
    26f4:	03 c0       	rjmp	.+6      	; 0x26fc <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    26f6:	43 60       	ori	r20, 0x03	; 3
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    26fa:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26fc:	f9 99       	sbic	0x1f, 1	; 31
    26fe:	fe cf       	rjmp	.-4      	; 0x26fc <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2700:	8a e0       	ldi	r24, 0x0A	; 10
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	92 bd       	out	0x22, r25	; 34
    2706:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2708:	f8 9a       	sbi	0x1f, 0	; 31
    270a:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    270c:	84 17       	cp	r24, r20
    270e:	91 f1       	breq	.+100    	; 0x2774 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    2710:	24 2f       	mov	r18, r20
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	82 23       	and	r24, r18
    2718:	93 23       	and	r25, r19
    271a:	28 17       	cp	r18, r24
    271c:	39 07       	cpc	r19, r25
    271e:	71 f0       	breq	.+28     	; 0x273c <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2720:	f9 99       	sbic	0x1f, 1	; 31
    2722:	fe cf       	rjmp	.-4      	; 0x2720 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2724:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2726:	8a e0       	ldi	r24, 0x0A	; 10
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	92 bd       	out	0x22, r25	; 34
    272c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    272e:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	fa 9a       	sbi	0x1f, 2	; 31
    2736:	f9 9a       	sbi	0x1f, 1	; 31
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    273c:	8a e0       	ldi	r24, 0x0A	; 10
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	64 2f       	mov	r22, r20
    2742:	0e 94 21 07 	call	0xe42	; 0xe42 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2746:	88 e0       	ldi	r24, 0x08	; 8
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	68 ed       	ldi	r22, 0xD8	; 216
    274c:	72 e1       	ldi	r23, 0x12	; 18
    274e:	0e 94 a8 03 	call	0x750	; 0x750 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    2752:	20 91 a8 01 	lds	r18, 0x01A8
    2756:	30 91 a9 01 	lds	r19, 0x01A9
    275a:	82 17       	cp	r24, r18
    275c:	93 07       	cpc	r25, r19
    275e:	51 f0       	breq	.+20     	; 0x2774 <persistRTC()+0xb4>
    2760:	60 91 a8 01 	lds	r22, 0x01A8
    2764:	70 91 a9 01 	lds	r23, 0x01A9
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    2768:	88 e0       	ldi	r24, 0x08	; 8
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	40 ee       	ldi	r20, 0xE0	; 224
    276e:	52 e1       	ldi	r21, 0x12	; 18
    2770:	0e 94 be 03 	call	0x77c	; 0x77c <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2774:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    2776:	1f 91       	pop	r17
    2778:	08 95       	ret

0000277a <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    277a:	1f 93       	push	r17
    277c:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    277e:	88 31       	cpi	r24, 0x18	; 24
    2780:	91 05       	cpc	r25, r1
    2782:	10 f5       	brcc	.+68     	; 0x27c8 <setHoursMinutesLT(int, int)+0x4e>
    2784:	77 fd       	sbrc	r23, 7
    2786:	20 c0       	rjmp	.+64     	; 0x27c8 <setHoursMinutesLT(int, int)+0x4e>
    2788:	6c 33       	cpi	r22, 0x3C	; 60
    278a:	71 05       	cpc	r23, r1
    278c:	ec f4       	brge	.+58     	; 0x27c8 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    278e:	8c e3       	ldi	r24, 0x3C	; 60
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	48 9f       	mul	r20, r24
    2794:	90 01       	movw	r18, r0
    2796:	49 9f       	mul	r20, r25
    2798:	30 0d       	add	r19, r0
    279a:	58 9f       	mul	r21, r24
    279c:	30 0d       	add	r19, r0
    279e:	11 24       	eor	r1, r1
    27a0:	26 0f       	add	r18, r22
    27a2:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    27a4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27a6:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    27a8:	80 91 a6 01 	lds	r24, 0x01A6
    27ac:	90 91 a7 01 	lds	r25, 0x01A7
    27b0:	28 17       	cp	r18, r24
    27b2:	39 07       	cpc	r19, r25
    27b4:	31 f0       	breq	.+12     	; 0x27c2 <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    27b6:	30 93 a7 01 	sts	0x01A7, r19
    27ba:	20 93 a6 01 	sts	0x01A6, r18
      persistRTC();
    27be:	0e 94 60 13 	call	0x26c0	; 0x26c0 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27c2:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    27c8:	80 e0       	ldi	r24, 0x00	; 0
  }
    27ca:	1f 91       	pop	r17
    27cc:	08 95       	ret

000027ce <getSimpleScheduleOn()>:
// Get the simple schedule on time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// Note that unprogrammed EEPROM value will result in invalid time, ie not set.
uint_least16_t getSimpleScheduleOn()
  {
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    27ce:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27d0:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    27d2:	f9 99       	sbic	0x1f, 1	; 31
    27d4:	fe cf       	rjmp	.-4      	; 0x27d2 <getSimpleScheduleOn()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    27d6:	8c e0       	ldi	r24, 0x0C	; 12
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	92 bd       	out	0x22, r25	; 34
    27dc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    27de:	f8 9a       	sbi	0x1f, 0	; 31
    27e0:	20 b5       	in	r18, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27e2:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    27e4:	86 e0       	ldi	r24, 0x06	; 6
    27e6:	28 9f       	mul	r18, r24
    27e8:	90 01       	movw	r18, r0
    27ea:	11 24       	eor	r1, r1
    { startMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON); }
  return(SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM);
  }
    27ec:	c9 01       	movw	r24, r18
    27ee:	08 95       	ret

000027f0 <getSimpleScheduleOff()>:

// Get the simple schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
uint_least16_t getSimpleScheduleOff()
  {
  uint8_t endMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    27f0:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27f2:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    27f4:	f9 99       	sbic	0x1f, 1	; 31
    27f6:	fe cf       	rjmp	.-4      	; 0x27f4 <getSimpleScheduleOff()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    27f8:	8d e0       	ldi	r24, 0x0D	; 13
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	92 bd       	out	0x22, r25	; 34
    27fe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2800:	f8 9a       	sbi	0x1f, 0	; 31
    2802:	20 b5       	in	r18, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2804:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    2806:	86 e0       	ldi	r24, 0x06	; 6
    2808:	28 9f       	mul	r18, r24
    280a:	90 01       	movw	r18, r0
    280c:	11 24       	eor	r1, r1
    { endMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF); }
  return(SIMPLE_SCHEDULE_GRANULARITY_MINS * endMM);
  }
    280e:	c9 01       	movw	r24, r18
    2810:	08 95       	ret

00002812 <clearSimpleSchedule()>:
  }

// Clear simple schedule.
// There will be no on nor off events from the simple schedule once this is called,
// and isSimpleScheduleSet() will return false.
void clearSimpleSchedule()
    2812:	1f 93       	push	r17
  {
  // Clear the schedule back to 'unprogrammed' values.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2814:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2816:	f8 94       	cli
    {
    eeprom_smart_erase_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON);
    2818:	8c e0       	ldi	r24, 0x0C	; 12
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF);
    2820:	8d e0       	ldi	r24, 0x0D	; 13
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2828:	1f bf       	out	0x3f, r17	; 63
    }
  }
    282a:	1f 91       	pop	r17
    282c:	08 95       	ret

0000282e <setSimpleSchedule(unsigned int, unsigned int)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * durationMinutes  is duration in minutes in range [1,1439]
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear our the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint_least16_t durationMinutes)
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	9b 01       	movw	r18, r22
  {
  if((startMinutesSinceMidnightLT >= 1440) || (durationMinutes == 0) || (durationMinutes >= 1439)) { return(false); }
    2834:	45 e0       	ldi	r20, 0x05	; 5
    2836:	80 3a       	cpi	r24, 0xA0	; 160
    2838:	94 07       	cpc	r25, r20
    283a:	78 f5       	brcc	.+94     	; 0x289a <setSimpleSchedule(unsigned int, unsigned int)+0x6c>
    283c:	61 15       	cp	r22, r1
    283e:	71 05       	cpc	r23, r1
    2840:	61 f1       	breq	.+88     	; 0x289a <setSimpleSchedule(unsigned int, unsigned int)+0x6c>
    2842:	45 e0       	ldi	r20, 0x05	; 5
    2844:	6f 39       	cpi	r22, 0x9F	; 159
    2846:	74 07       	cpc	r23, r20
    2848:	40 f5       	brcc	.+80     	; 0x289a <setSimpleSchedule(unsigned int, unsigned int)+0x6c>
  
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
    284a:	66 e0       	ldi	r22, 0x06	; 6
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    2852:	46 2f       	mov	r20, r22
  const uint16_t em = startMM + (uint16_t) max((uint8_t)(durationMinutes/SIMPLE_SCHEDULE_GRANULARITY_MINS), (uint8_t)1);
    2854:	c9 01       	movw	r24, r18
    2856:	66 e0       	ldi	r22, 0x06	; 6
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    285e:	86 2f       	mov	r24, r22
    2860:	66 23       	and	r22, r22
    2862:	09 f4       	brne	.+2      	; 0x2866 <setSimpleSchedule(unsigned int, unsigned int)+0x38>
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	64 2f       	mov	r22, r20
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	68 0f       	add	r22, r24
    286c:	71 1d       	adc	r23, r1
  const uint8_t endMM = (em <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) ? em : (em - (MAX_COMPRESSED_MINS_AFTER_MIDNIGHT + 1));
    286e:	60 3f       	cpi	r22, 0xF0	; 240
    2870:	71 05       	cpc	r23, r1
    2872:	10 f4       	brcc	.+4      	; 0x2878 <setSimpleSchedule(unsigned int, unsigned int)+0x4a>
    2874:	06 2f       	mov	r16, r22
    2876:	02 c0       	rjmp	.+4      	; 0x287c <setSimpleSchedule(unsigned int, unsigned int)+0x4e>
    2878:	06 2f       	mov	r16, r22
    287a:	00 5f       	subi	r16, 0xF0	; 240

  // Set the schedule.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    287c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    287e:	f8 94       	cli
    {
    eeprom_smart_update_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON, startMM);
    2880:	8c e0       	ldi	r24, 0x0C	; 12
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	64 2f       	mov	r22, r20
    2886:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    eeprom_smart_update_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF, endMM);
    288a:	8d e0       	ldi	r24, 0x0D	; 13
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	60 2f       	mov	r22, r16
    2890:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2894:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	01 c0       	rjmp	.+2      	; 0x289c <setSimpleSchedule(unsigned int, unsigned int)+0x6e>
    }
  return(true); // Assume EEPROM programmed OK...
    289a:	80 e0       	ldi	r24, 0x00	; 0
  }
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    28a8:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    28ac:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    28ae:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    28b2:	10 91 a5 01 	lds	r17, 0x01A5
  const uint16_t m = getMinutesSinceMidnightLT();
    28b6:	0e 94 ed 12 	call	0x25da	; 0x25da <getMinutesSinceMidnightLT()>
    28ba:	bc 01       	movw	r22, r24
  Serial.print(m);
    28bc:	87 e0       	ldi	r24, 0x07	; 7
    28be:	93 e0       	ldi	r25, 0x03	; 3
    28c0:	4a e0       	ldi	r20, 0x0A	; 10
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	0e 94 14 28 	call	0x5028	; 0x5028 <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    28c8:	87 e0       	ldi	r24, 0x07	; 7
    28ca:	93 e0       	ldi	r25, 0x03	; 3
    28cc:	6a e3       	ldi	r22, 0x3A	; 58
    28ce:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    28d2:	87 e0       	ldi	r24, 0x07	; 7
    28d4:	93 e0       	ldi	r25, 0x03	; 3
    28d6:	61 2f       	mov	r22, r17
    28d8:	4a e0       	ldi	r20, 0x0A	; 10
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    28e0:	87 e0       	ldi	r24, 0x07	; 7
    28e2:	93 e0       	ldi	r25, 0x03	; 3
    28e4:	6a e3       	ldi	r22, 0x3A	; 58
    28e6:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    28ea:	87 e0       	ldi	r24, 0x07	; 7
    28ec:	93 e0       	ldi	r25, 0x03	; 3
    28ee:	60 2f       	mov	r22, r16
    28f0:	4a e0       	ldi	r20, 0x0A	; 10
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  _flush();
    28f8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    28fc:	ff 20       	and	r15, r15
    28fe:	11 f0       	breq	.+4      	; 0x2904 <_debug_serial_timestamp()+0x62>
    2900:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	08 95       	ret

0000290c <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    290c:	ff 92       	push	r15
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    2912:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2914:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    2918:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(u);
    291a:	87 e0       	ldi	r24, 0x07	; 7
    291c:	93 e0       	ldi	r25, 0x03	; 3
    291e:	b8 01       	movw	r22, r16
    2920:	4a e0       	ldi	r20, 0x0A	; 10
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	0e 94 14 28 	call	0x5028	; 0x5028 <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2928:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    292c:	ff 20       	and	r15, r15
    292e:	11 f0       	breq	.+4      	; 0x2934 <serialPrintAndFlush(unsigned int, int)+0x28>
    2930:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	ff 90       	pop	r15
    293a:	08 95       	ret

0000293c <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2942:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    2946:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    2948:	87 e0       	ldi	r24, 0x07	; 7
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	61 2f       	mov	r22, r17
    294e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2952:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2956:	00 23       	and	r16, r16
    2958:	11 f0       	breq	.+4      	; 0x295e <serialPrintAndFlush(char)+0x22>
    295a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    2964:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2966:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    296a:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    296c:	87 e0       	ldi	r24, 0x07	; 7
    296e:	93 e0       	ldi	r25, 0x03	; 3
    2970:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2974:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2978:	11 23       	and	r17, r17
    297a:	11 f0       	breq	.+4      	; 0x2980 <serialPrintlnAndFlush()+0x1c>
    297c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    2980:	1f 91       	pop	r17
    2982:	08 95       	ret

00002984 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    298c:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    2990:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(i);
    2992:	87 e0       	ldi	r24, 0x07	; 7
    2994:	93 e0       	ldi	r25, 0x03	; 3
    2996:	b8 01       	movw	r22, r16
    2998:	4a e0       	ldi	r20, 0x0A	; 10
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    29a0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    29a4:	ff 20       	and	r15, r15
    29a6:	11 f0       	breq	.+4      	; 0x29ac <serialPrintAndFlush(int, int)+0x28>
    29a8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	08 95       	ret

000029b4 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    29bc:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    29c0:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    29c2:	87 e0       	ldi	r24, 0x07	; 7
    29c4:	93 e0       	ldi	r25, 0x03	; 3
    29c6:	b8 01       	movw	r22, r16
    29c8:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    29cc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    29d0:	ff 20       	and	r15, r15
    29d2:	11 f0       	breq	.+4      	; 0x29d8 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    29d4:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	08 95       	ret

000029e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    29e8:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    29ec:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    29ee:	87 e0       	ldi	r24, 0x07	; 7
    29f0:	93 e0       	ldi	r25, 0x03	; 3
    29f2:	b8 01       	movw	r22, r16
    29f4:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    29f8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    29fc:	ff 20       	and	r15, r15
    29fe:	11 f0       	breq	.+4      	; 0x2a04 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    2a00:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	08 95       	ret

00002a0c <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    2a0c:	80 91 aa 01 	lds	r24, 0x01AA
    2a10:	90 91 ab 01 	lds	r25, 0x01AB
    2a14:	08 95       	ret

00002a16 <readTemperatureC16()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
#ifdef FAKE_TMP102
  temp16 = 17 * 16;
  return(temp16); // FAKE IT!
#endif

  const bool neededPowerUp = powerUpTWIIfDisabled();
    2a1e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <powerUpTWIIfDisabled()>
    2a22:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2a24:	85 e0       	ldi	r24, 0x05	; 5
    2a26:	92 e0       	ldi	r25, 0x02	; 2
    2a28:	68 e4       	ldi	r22, 0x48	; 72
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	0e 94 9f 20 	call	0x413e	; 0x413e <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2a30:	85 e0       	ldi	r24, 0x05	; 5
    2a32:	92 e0       	ldi	r25, 0x02	; 2
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	0e 94 21 21 	call	0x4242	; 0x4242 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    2a3a:	85 e0       	ldi	r24, 0x05	; 5
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	61 e3       	ldi	r22, 0x31	; 49
    2a40:	0e 94 21 21 	call	0x4242	; 0x4242 <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    2a44:	85 e0       	ldi	r24, 0x05	; 5
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	0e 94 64 21 	call	0x42c8	; 0x42c8 <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2a4c:	85 e0       	ldi	r24, 0x05	; 5
    2a4e:	92 e0       	ldi	r25, 0x02	; 2
    2a50:	68 e4       	ldi	r22, 0x48	; 72
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	0e 94 9f 20 	call	0x413e	; 0x413e <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2a58:	85 e0       	ldi	r24, 0x05	; 5
    2a5a:	92 e0       	ldi	r25, 0x02	; 2
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	0e 94 21 21 	call	0x4242	; 0x4242 <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2a62:	85 e0       	ldi	r24, 0x05	; 5
    2a64:	92 e0       	ldi	r25, 0x02	; 2
    2a66:	61 eb       	ldi	r22, 0xB1	; 177
    2a68:	0e 94 21 21 	call	0x4242	; 0x4242 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2a6c:	85 e0       	ldi	r24, 0x05	; 5
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	0e 94 64 21 	call	0x42c8	; 0x42c8 <TwoWire::endTransmission()>
    2a74:	88 23       	and	r24, r24
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <readTemperatureC16()+0x64>
    2a78:	4d c0       	rjmp	.+154    	; 0x2b14 <readTemperatureC16()+0xfe>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2a7a:	85 e0       	ldi	r24, 0x05	; 5
    2a7c:	92 e0       	ldi	r25, 0x02	; 2
    2a7e:	68 e4       	ldi	r22, 0x48	; 72
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	0e 94 9f 20 	call	0x413e	; 0x413e <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2a86:	85 e0       	ldi	r24, 0x05	; 5
    2a88:	92 e0       	ldi	r25, 0x02	; 2
    2a8a:	61 e0       	ldi	r22, 0x01	; 1
    2a8c:	0e 94 21 21 	call	0x4242	; 0x4242 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2a90:	85 e0       	ldi	r24, 0x05	; 5
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	0e 94 64 21 	call	0x42c8	; 0x42c8 <TwoWire::endTransmission()>
    2a98:	88 23       	and	r24, r24
    2a9a:	e1 f5       	brne	.+120    	; 0x2b14 <readTemperatureC16()+0xfe>
    2a9c:	c8 e0       	ldi	r28, 0x08	; 8
    2a9e:	d0 e0       	ldi	r29, 0x00	; 0
    2aa0:	16 c0       	rjmp	.+44     	; 0x2ace <readTemperatureC16()+0xb8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { temp16 = 0; return(0); } // Exit if error.
    2aa2:	1c 16       	cp	r1, r28
    2aa4:	1d 06       	cpc	r1, r29
    2aa6:	b4 f5       	brge	.+108    	; 0x2b14 <readTemperatureC16()+0xfe>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { temp16 = 0; return(0); } // Exit if error.
    2aa8:	85 e0       	ldi	r24, 0x05	; 5
    2aaa:	92 e0       	ldi	r25, 0x02	; 2
    2aac:	68 e4       	ldi	r22, 0x48	; 72
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	0e 94 75 21 	call	0x42ea	; 0x42ea <TwoWire::requestFrom(int, int)>
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	61 f5       	brne	.+88     	; 0x2b14 <readTemperatureC16()+0xfe>
    const byte b1 = Wire.read();
    2abc:	85 e0       	ldi	r24, 0x05	; 5
    2abe:	92 e0       	ldi	r25, 0x02	; 2
    2ac0:	0e 94 b2 20 	call	0x4164	; 0x4164 <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    2ac4:	87 fd       	sbrc	r24, 7
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <readTemperatureC16()+0xbc>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    2ace:	21 97       	sbiw	r28, 0x01	; 1
    2ad0:	41 f7       	brne	.-48     	; 0x2aa2 <readTemperatureC16()+0x8c>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2ad2:	85 e0       	ldi	r24, 0x05	; 5
    2ad4:	92 e0       	ldi	r25, 0x02	; 2
    2ad6:	68 e4       	ldi	r22, 0x48	; 72
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	0e 94 9f 20 	call	0x413e	; 0x413e <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	92 e0       	ldi	r25, 0x02	; 2
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	0e 94 21 21 	call	0x4242	; 0x4242 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2ae8:	85 e0       	ldi	r24, 0x05	; 5
    2aea:	92 e0       	ldi	r25, 0x02	; 2
    2aec:	0e 94 64 21 	call	0x42c8	; 0x42c8 <TwoWire::endTransmission()>
    2af0:	88 23       	and	r24, r24
    2af2:	81 f4       	brne	.+32     	; 0x2b14 <readTemperatureC16()+0xfe>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { temp16 = 0; return(0); }
    2af4:	85 e0       	ldi	r24, 0x05	; 5
    2af6:	92 e0       	ldi	r25, 0x02	; 2
    2af8:	68 e4       	ldi	r22, 0x48	; 72
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	42 e0       	ldi	r20, 0x02	; 2
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	0e 94 75 21 	call	0x42ea	; 0x42ea <TwoWire::requestFrom(int, int)>
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	31 f4       	brne	.+12     	; 0x2b14 <readTemperatureC16()+0xfe>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2b08:	85 e0       	ldi	r24, 0x05	; 5
    2b0a:	92 e0       	ldi	r25, 0x02	; 2
    2b0c:	0e 94 64 21 	call	0x42c8	; 0x42c8 <TwoWire::endTransmission()>
    2b10:	88 23       	and	r24, r24
    2b12:	39 f0       	breq	.+14     	; 0x2b22 <readTemperatureC16()+0x10c>
    2b14:	10 92 ab 01 	sts	0x01AB, r1
    2b18:	10 92 aa 01 	sts	0x01AA, r1
    2b1c:	c0 e0       	ldi	r28, 0x00	; 0
    2b1e:	d0 e0       	ldi	r29, 0x00	; 0
    2b20:	2a c0       	rjmp	.+84     	; 0x2b76 <readTemperatureC16()+0x160>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    2b22:	85 e0       	ldi	r24, 0x05	; 5
    2b24:	92 e0       	ldi	r25, 0x02	; 2
    2b26:	0e 94 b2 20 	call	0x4164	; 0x4164 <TwoWire::read()>
    2b2a:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    2b2c:	85 e0       	ldi	r24, 0x05	; 5
    2b2e:	92 e0       	ldi	r25, 0x02	; 2
    2b30:	0e 94 b2 20 	call	0x4164	; 0x4164 <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    2b34:	17 fd       	sbrc	r17, 7
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <readTemperatureC16()+0x128>
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <readTemperatureC16()+0x12c>
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 ef       	ldi	r19, 0xF0	; 240
    2b42:	c8 2f       	mov	r28, r24
    2b44:	d0 e0       	ldi	r29, 0x00	; 0
    2b46:	54 e0       	ldi	r21, 0x04	; 4
    2b48:	d5 95       	asr	r29
    2b4a:	c7 95       	ror	r28
    2b4c:	5a 95       	dec	r21
    2b4e:	e1 f7       	brne	.-8      	; 0x2b48 <readTemperatureC16()+0x132>
    2b50:	81 2f       	mov	r24, r17
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	44 e0       	ldi	r20, 0x04	; 4
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	4a 95       	dec	r20
    2b5c:	e1 f7       	brne	.-8      	; 0x2b56 <readTemperatureC16()+0x140>
    2b5e:	c8 2b       	or	r28, r24
    2b60:	d9 2b       	or	r29, r25
    2b62:	c2 2b       	or	r28, r18
    2b64:	d3 2b       	or	r29, r19

  // Store the result for access at any time.
  temp16 = t16;
    2b66:	d0 93 ab 01 	sts	0x01AB, r29
    2b6a:	c0 93 aa 01 	sts	0x01AA, r28
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    2b6e:	00 23       	and	r16, r16
    2b70:	11 f0       	breq	.+4      	; 0x2b76 <readTemperatureC16()+0x160>
    2b72:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <powerDownTWI()>

  return(t16);
  }
    2b76:	ce 01       	movw	r24, r28
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	08 95       	ret

00002b82 <inWarmMode()>:
#include "Temperature_Sensor.h"
#include "UI_Minimal.h"

static bool isWarmMode; // Defaults to / starts at false/'frost'.
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
    2b82:	80 91 ac 01 	lds	r24, 0x01AC
    2b86:	08 95       	ret

00002b88 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    2b88:	80 91 ac 01 	lds	r24, 0x01AC
    2b8c:	88 23       	and	r24, r24
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <inBakeMode()+0x10>
    2b90:	80 91 b8 01 	lds	r24, 0x01B8
    2b94:	81 11       	cpse	r24, r1
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	08 95       	ret

00002b9a <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    2b9a:	10 92 b8 01 	sts	0x01B8, r1
    2b9e:	08 95       	ret

00002ba0 <hasEcoBias()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ba0:	f9 99       	sbic	0x1f, 1	; 31
    2ba2:	fe cf       	rjmp	.-4      	; 0x2ba0 <hasEcoBias()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ba4:	83 e1       	ldi	r24, 0x13	; 19
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	92 bd       	out	0x22, r25	; 34
    2baa:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2bac:	f8 9a       	sbi	0x1f, 0	; 31
    2bae:	80 b5       	in	r24, 0x20	; 32
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <hasEcoBias()+0x18>
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
// If true (the default) then the system has an 'Eco' energy-saving bias, else it has a 'comfort' bias.
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
// At the transition from one bias to the other user-settable values may be adjusted to match.
// ~0 (erased/default) means eco mode; any other value means comfort.
bool hasEcoBias() { return(eeprom_read_byte((uint8_t *)EE_START_ECO_BIAS) == (uint8_t)~0); }
    2bb8:	89 2f       	mov	r24, r25
    2bba:	08 95       	ret

00002bbc <isLikelyOccupied()>:

// Returns true if the room appears to be likely occupied (with active users) now or recently.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Do not call from an ISR.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    2bbc:	80 91 b9 01 	lds	r24, 0x01B9
    2bc0:	81 11       	cpse	r24, r1
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	08 95       	ret

00002bc6 <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
#define resetCLIActiveTimer() { CLISecondsLeft = CLIActiveS; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLISecondsLeft); }
    2bc6:	80 91 04 01 	lds	r24, 0x0104
    2bca:	81 11       	cpse	r24, r1
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	08 95       	ret

00002bd0 <Serial_print_space()>:
    { isWarmMode = true; }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    2bd0:	87 e0       	ldi	r24, 0x07	; 7
    2bd2:	93 e0       	ldi	r25, 0x03	; 3
    2bd4:	60 e2       	ldi	r22, 0x20	; 32
    2bd6:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    2bda:	08 95       	ret

00002bdc <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    2bdc:	87 e0       	ldi	r24, 0x07	; 7
    2bde:	93 e0       	ldi	r25, 0x03	; 3
    2be0:	60 ed       	ldi	r22, 0xD0	; 208
    2be2:	73 e0       	ldi	r23, 0x03	; 3
    2be4:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
    2be8:	08 95       	ret

00002bea <printCLILine(char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(char syntax, __FlashStringHelper const *description)
    2bea:	1f 93       	push	r17
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	eb 01       	movw	r28, r22
  {
  Serial.print(syntax);
    2bf4:	87 e0       	ldi	r24, 0x07	; 7
    2bf6:	93 e0       	ldi	r25, 0x03	; 3
    2bf8:	62 2f       	mov	r22, r18
    2bfa:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.flush();
    2bfe:	87 e0       	ldi	r24, 0x07	; 7
    2c00:	93 e0       	ldi	r25, 0x03	; 3
    2c02:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2c06:	80 91 b2 00 	lds	r24, 0x00B2
    2c0a:	80 3e       	cpi	r24, 0xE0	; 224
    2c0c:	10 f4       	brcc	.+4      	; 0x2c12 <printCLILine(char, __FlashStringHelper const*)+0x28>
    2c0e:	1a e0       	ldi	r17, 0x0A	; 10
    2c10:	07 c0       	rjmp	.+14     	; 0x2c20 <printCLILine(char, __FlashStringHelper const*)+0x36>
    2c12:	87 e0       	ldi	r24, 0x07	; 7
    2c14:	93 e0       	ldi	r25, 0x03	; 3
    2c16:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
    2c1a:	09 c0       	rjmp	.+18     	; 0x2c2e <printCLILine(char, __FlashStringHelper const*)+0x44>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    2c1c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
    2c20:	11 50       	subi	r17, 0x01	; 1
    2c22:	e0 f7       	brcc	.-8      	; 0x2c1c <printCLILine(char, __FlashStringHelper const*)+0x32>
  Serial.println(description);
    2c24:	87 e0       	ldi	r24, 0x07	; 7
    2c26:	93 e0       	ldi	r25, 0x03	; 3
    2c28:	be 01       	movw	r22, r28
    2c2a:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
  }
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	1f 91       	pop	r17
    2c34:	08 95       	ret

00002c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>:

#define SYNTAX_COL_WIDTH 11 // Width of 'syntax' column; strictly positive.
#define STOP_PRINTING_DESCRIPTION_AT (GSCT_MAX-(GSCT_MAX/8)) // Time into minor cycle after which the description should be skipped.
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(__FlashStringHelper const *syntax, __FlashStringHelper const *description)
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	ec 01       	movw	r28, r24
    2c42:	7b 01       	movw	r14, r22
  {
  Serial.print(syntax);
    2c44:	87 e0       	ldi	r24, 0x07	; 7
    2c46:	93 e0       	ldi	r25, 0x03	; 3
    2c48:	be 01       	movw	r22, r28
    2c4a:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Print::print(__FlashStringHelper const*)>
  Serial.flush();
    2c4e:	87 e0       	ldi	r24, 0x07	; 7
    2c50:	93 e0       	ldi	r25, 0x03	; 3
    2c52:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2c56:	80 91 b2 00 	lds	r24, 0x00B2
    2c5a:	80 3e       	cpi	r24, 0xE0	; 224
    2c5c:	28 f0       	brcs	.+10     	; 0x2c68 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x32>
    2c5e:	87 e0       	ldi	r24, 0x07	; 7
    2c60:	93 e0       	ldi	r25, 0x03	; 3
    2c62:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
    2c66:	10 c0       	rjmp	.+32     	; 0x2c88 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x52>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    2c68:	ce 01       	movw	r24, r28
    2c6a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <strlen_P>
    2c6e:	1b e0       	ldi	r17, 0x0B	; 11
    2c70:	18 1b       	sub	r17, r24
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x42>
    2c74:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
    2c78:	11 50       	subi	r17, 0x01	; 1
    2c7a:	17 ff       	sbrs	r17, 7
    2c7c:	fb cf       	rjmp	.-10     	; 0x2c74 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
  Serial.println(description);
    2c7e:	87 e0       	ldi	r24, 0x07	; 7
    2c80:	93 e0       	ldi	r25, 0x03	; 3
    2c82:	b7 01       	movw	r22, r14
    2c84:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
  }
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	1f 91       	pop	r17
    2c8e:	ff 90       	pop	r15
    2c90:	ef 90       	pop	r14
    2c92:	08 95       	ret

00002c94 <dumpCLIUsage()>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage()
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
  {
  Serial.println();
    2c98:	07 e0       	ldi	r16, 0x07	; 7
    2c9a:	13 e0       	ldi	r17, 0x03	; 3
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
  Serial.println(F("CLI usage:"));
    2ca2:	c8 01       	movw	r24, r16
    2ca4:	65 ec       	ldi	r22, 0xC5	; 197
    2ca6:	73 e0       	ldi	r23, 0x03	; 3
    2ca8:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
  printCLILine('?', F("this help"));
    2cac:	8f e3       	ldi	r24, 0x3F	; 63
    2cae:	6b eb       	ldi	r22, 0xBB	; 187
    2cb0:	73 e0       	ldi	r23, 0x03	; 3
    2cb2:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('B X', F("Bias E (Eco) or C (Comfort)"));
    2cb6:	88 e5       	ldi	r24, 0x58	; 88
    2cb8:	6f e9       	ldi	r22, 0x9F	; 159
    2cba:	73 e0       	ldi	r23, 0x03	; 3
    2cbc:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(F("C M"), F("central hub: minimum M mins on, 0 disabled"));
    2cc0:	8b e9       	ldi	r24, 0x9B	; 155
    2cc2:	93 e0       	ldi	r25, 0x03	; 3
    2cc4:	60 e7       	ldi	r22, 0x70	; 112
    2cc6:	73 e0       	ldi	r23, 0x03	; 3
    2cc8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(F("D N"), F("Dump stats set N"));
    2ccc:	8c e6       	ldi	r24, 0x6C	; 108
    2cce:	93 e0       	ldi	r25, 0x03	; 3
    2cd0:	6b e5       	ldi	r22, 0x5B	; 91
    2cd2:	73 e0       	ldi	r23, 0x03	; 3
    2cd4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('E', F("Exit CLI"));
    2cd8:	85 e4       	ldi	r24, 0x45	; 69
    2cda:	62 e5       	ldi	r22, 0x52	; 82
    2cdc:	73 e0       	ldi	r23, 0x03	; 3
    2cde:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('F', F("Frost"));
    2ce2:	86 e4       	ldi	r24, 0x46	; 70
    2ce4:	6c e4       	ldi	r22, 0x4C	; 76
    2ce6:	73 e0       	ldi	r23, 0x03	; 3
    2ce8:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("F CC"), F("set Frost temp CC"));
    2cec:	87 e4       	ldi	r24, 0x47	; 71
    2cee:	93 e0       	ldi	r25, 0x03	; 3
    2cf0:	65 e3       	ldi	r22, 0x35	; 53
    2cf2:	73 e0       	ldi	r23, 0x03	; 3
    2cf4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(F("H"), F("clear wireless FHT8V House codes"));
    2cf8:	83 e3       	ldi	r24, 0x33	; 51
    2cfa:	93 e0       	ldi	r25, 0x03	; 3
    2cfc:	62 e1       	ldi	r22, 0x12	; 18
    2cfe:	73 e0       	ldi	r23, 0x03	; 3
    2d00:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(F("H H1 H2"), F("set wireless FHT8V House codes 1&2"));
    2d04:	8a e0       	ldi	r24, 0x0A	; 10
    2d06:	93 e0       	ldi	r25, 0x03	; 3
    2d08:	67 ee       	ldi	r22, 0xE7	; 231
    2d0a:	72 e0       	ldi	r23, 0x02	; 2
    2d0c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('L', F("Learn to warm every 24h from now, else cancel schedule if in frost mode"));
    2d10:	8c e4       	ldi	r24, 0x4C	; 76
    2d12:	6f e9       	ldi	r22, 0x9F	; 159
    2d14:	72 e0       	ldi	r23, 0x02	; 2
    2d16:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("P HH MM LL"), F("Program: warm daily starting at HH MM for LL hours"));
    2d1a:	84 e9       	ldi	r24, 0x94	; 148
    2d1c:	92 e0       	ldi	r25, 0x02	; 2
    2d1e:	61 e6       	ldi	r22, 0x61	; 97
    2d20:	72 e0       	ldi	r23, 0x02	; 2
    2d22:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine('Q', F("Quick Heat (BAKE)"));
    2d26:	81 e5       	ldi	r24, 0x51	; 81
    2d28:	6f e4       	ldi	r22, 0x4F	; 79
    2d2a:	72 e0       	ldi	r23, 0x02	; 2
    2d2c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
#endif
  printCLILine(F("R N"), F("dump Raw stats set N"));
    2d30:	8b e4       	ldi	r24, 0x4B	; 75
    2d32:	92 e0       	ldi	r25, 0x02	; 2
    2d34:	66 e3       	ldi	r22, 0x36	; 54
    2d36:	72 e0       	ldi	r23, 0x02	; 2
    2d38:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('S', F("show Status and smart warming for next 24h"));
    2d3c:	83 e5       	ldi	r24, 0x53	; 83
    2d3e:	6b e0       	ldi	r22, 0x0B	; 11
    2d40:	72 e0       	ldi	r23, 0x02	; 2
    2d42:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("T HH MM"), F("set 24h Time"));
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	92 e0       	ldi	r25, 0x02	; 2
    2d4a:	66 ef       	ldi	r22, 0xF6	; 246
    2d4c:	71 e0       	ldi	r23, 0x01	; 1
    2d4e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('W', F("Warm"));
    2d52:	87 e5       	ldi	r24, 0x57	; 87
    2d54:	61 ef       	ldi	r22, 0xF1	; 241
    2d56:	71 e0       	ldi	r23, 0x01	; 1
    2d58:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("W CC"), F("set Warm temp CC"));
    2d5c:	8c ee       	ldi	r24, 0xEC	; 236
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	6b ed       	ldi	r22, 0xDB	; 219
    2d62:	71 e0       	ldi	r23, 0x01	; 1
    2d64:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('Z', F("Zap stats"));
    2d68:	8a e5       	ldi	r24, 0x5A	; 90
    2d6a:	61 ed       	ldi	r22, 0xD1	; 209
    2d6c:	71 e0       	ldi	r23, 0x01	; 1
    2d6e:	0e 94 f5 15 	call	0x2bea	; 0x2bea <printCLILine(char, __FlashStringHelper const*)>
  Serial.println();
    2d72:	c8 01       	movw	r24, r16
    2d74:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
  }
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	08 95       	ret

00002d7e <handleLearnButton()>:
// Period in minutes for simple learned on-time with comfort bias; strictly positive (and less than 1440).
#define LEARNED_ON_PERIOD_COMFORT_M 120
// Handle learn button.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now for 1h.
// May be called from pushbutton or CLI UI components.
static void handleLearnButton()
    2d7e:	1f 93       	push	r17
  {
  // Set simple schedule starting every 24h from a little before now and running 1h (eco) or 2h (comfort).  
  if(isWarmMode)
    2d80:	80 91 ac 01 	lds	r24, 0x01AC
    2d84:	88 23       	and	r24, r24
    2d86:	21 f1       	breq	.+72     	; 0x2dd0 <handleLearnButton()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d88:	f9 99       	sbic	0x1f, 1	; 31
    2d8a:	fe cf       	rjmp	.-4      	; 0x2d88 <handleLearnButton()+0xa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2d8c:	83 e1       	ldi	r24, 0x13	; 19
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	92 bd       	out	0x22, r25	; 34
    2d92:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2d94:	f8 9a       	sbi	0x1f, 0	; 31
    2d96:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t lengthM = hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M;
    2d98:	8f 3f       	cpi	r24, 0xFF	; 255
    2d9a:	11 f0       	breq	.+4      	; 0x2da0 <handleLearnButton()+0x22>
    2d9c:	18 e7       	ldi	r17, 0x78	; 120
    2d9e:	01 c0       	rjmp	.+2      	; 0x2da2 <handleLearnButton()+0x24>
    2da0:	1c e3       	ldi	r17, 0x3C	; 60
    const uint8_t windBackM = lengthM >> 2; // Wind back start by about 25%.
    const uint_least16_t msm = getMinutesSinceMidnightLT();
    2da2:	0e 94 ed 12 	call	0x25da	; 0x25da <getMinutesSinceMidnightLT()>
    2da6:	ac 01       	movw	r20, r24
    const uint_least16_t start = (msm >= windBackM) ? (msm - windBackM) : (msm + 1440 - windBackM);
    2da8:	81 2f       	mov	r24, r17
    2daa:	86 95       	lsr	r24
    2dac:	86 95       	lsr	r24
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	42 17       	cp	r20, r18
    2db4:	53 07       	cpc	r21, r19
    2db6:	10 f0       	brcs	.+4      	; 0x2dbc <handleLearnButton()+0x3e>
    2db8:	ca 01       	movw	r24, r20
    2dba:	03 c0       	rjmp	.+6      	; 0x2dc2 <handleLearnButton()+0x44>
    2dbc:	ca 01       	movw	r24, r20
    2dbe:	80 56       	subi	r24, 0x60	; 96
    2dc0:	9a 4f       	sbci	r25, 0xFA	; 250
    2dc2:	82 1b       	sub	r24, r18
    2dc4:	93 0b       	sbc	r25, r19
    setSimpleSchedule(start, lengthM);
    2dc6:	61 2f       	mov	r22, r17
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	0e 94 17 14 	call	0x282e	; 0x282e <setSimpleSchedule(unsigned int, unsigned int)>
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <handleLearnButton()+0x56>
    }
  // Clear simple schedule.
  else { clearSimpleSchedule(); }
    2dd0:	0e 94 09 14 	call	0x2812	; 0x2812 <clearSimpleSchedule()>
  }
    2dd4:	1f 91       	pop	r17
    2dd6:	08 95       	ret

00002dd8 <checkUserSchedule()>:
  return(statusChange);
  }


// Check the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    2ddc:	0e 94 ed 12 	call	0x25da	; 0x25da <getMinutesSinceMidnightLT()>
    2de0:	ec 01       	movw	r28, r24

  // Get the simple schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
  // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
  if(msm == getSimpleScheduleOff())
    2de2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <getSimpleScheduleOff()>
    2de6:	c8 17       	cp	r28, r24
    2de8:	d9 07       	cpc	r29, r25
    2dea:	19 f4       	brne	.+6      	; 0x2df2 <checkUserSchedule()+0x1a>
    { isWarmMode = false; }
    2dec:	10 92 ac 01 	sts	0x01AC, r1
    2df0:	08 c0       	rjmp	.+16     	; 0x2e02 <checkUserSchedule()+0x2a>
  else if(msm == getSimpleScheduleOn())
    2df2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <getSimpleScheduleOn()>
    2df6:	c8 17       	cp	r28, r24
    2df8:	d9 07       	cpc	r29, r25
    2dfa:	19 f4       	brne	.+6      	; 0x2e02 <checkUserSchedule()+0x2a>
    { isWarmMode = true; }
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	80 93 ac 01 	sts	0x01AC, r24
  }
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	08 95       	ret

00002e08 <serialStatusReport()>:
The ";" terminates this current/Celsius section.
'HC' introduces the FHT8V house codes, if supported.
eg 'HC255 255'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2e14:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    2e18:	e8 2e       	mov	r14, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
    2e1a:	87 e0       	ldi	r24, 0x07	; 7
    2e1c:	93 e0       	ldi	r25, 0x03	; 3
    2e1e:	6d e3       	ldi	r22, 0x3D	; 61
    2e20:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(isWarmMode ? (inBakeMode() ? 'B' : 'W') : 'F');
    2e24:	80 91 ac 01 	lds	r24, 0x01AC
    2e28:	88 23       	and	r24, r24
    2e2a:	11 f4       	brne	.+4      	; 0x2e30 <serialStatusReport()+0x28>
    2e2c:	66 e4       	ldi	r22, 0x46	; 70
    2e2e:	07 c0       	rjmp	.+14     	; 0x2e3e <serialStatusReport()+0x36>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    2e30:	80 91 b8 01 	lds	r24, 0x01B8
    2e34:	88 23       	and	r24, r24
    2e36:	11 f4       	brne	.+4      	; 0x2e3c <serialStatusReport()+0x34>
    2e38:	67 e5       	ldi	r22, 0x57	; 87
    2e3a:	01 c0       	rjmp	.+2      	; 0x2e3e <serialStatusReport()+0x36>
    2e3c:	62 e4       	ldi	r22, 0x42	; 66

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
#ifdef SUPPORT_BAKE
  Serial.print(isWarmMode ? (inBakeMode() ? 'B' : 'W') : 'F');
    2e3e:	87 e0       	ldi	r24, 0x07	; 7
    2e40:	93 e0       	ldi	r25, 0x03	; 3
    2e42:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
#else
  Serial.print(isWarmMode ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target valve position.
    2e46:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    2e4a:	68 2f       	mov	r22, r24
    2e4c:	87 e0       	ldi	r24, 0x07	; 7
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	4a e0       	ldi	r20, 0x0A	; 10
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
    2e58:	87 e0       	ldi	r24, 0x07	; 7
    2e5a:	93 e0       	ldi	r25, 0x03	; 3
    2e5c:	65 e2       	ldi	r22, 0x25	; 37
    2e5e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  const int temp = getTemperatureC16();
    2e62:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <getTemperatureC16()>
    2e66:	8c 01       	movw	r16, r24
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    2e68:	87 e0       	ldi	r24, 0x07	; 7
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	60 e4       	ldi	r22, 0x40	; 64
    2e6e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    2e72:	b8 01       	movw	r22, r16
    2e74:	84 e0       	ldi	r24, 0x04	; 4
    2e76:	75 95       	asr	r23
    2e78:	67 95       	ror	r22
    2e7a:	8a 95       	dec	r24
    2e7c:	e1 f7       	brne	.-8      	; 0x2e76 <serialStatusReport()+0x6e>
    2e7e:	87 e0       	ldi	r24, 0x07	; 7
    2e80:	93 e0       	ldi	r25, 0x03	; 3
    2e82:	4a e0       	ldi	r20, 0x0A	; 10
    2e84:	50 e0       	ldi	r21, 0x00	; 0
    2e86:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
    2e8a:	87 e0       	ldi	r24, 0x07	; 7
    2e8c:	93 e0       	ldi	r25, 0x03	; 3
    2e8e:	63 e4       	ldi	r22, 0x43	; 67
    2e90:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    2e94:	0f 70       	andi	r16, 0x0F	; 15
    2e96:	10 70       	andi	r17, 0x00	; 0
    2e98:	87 e0       	ldi	r24, 0x07	; 7
    2e9a:	93 e0       	ldi	r25, 0x03	; 3
    2e9c:	b8 01       	movw	r22, r16
    2e9e:	40 e1       	ldi	r20, 0x10	; 16
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>

  Serial.print(';'); // End of initial section.
    2ea6:	87 e0       	ldi	r24, 0x07	; 7
    2ea8:	93 e0       	ldi	r25, 0x03	; 3
    2eaa:	6b e3       	ldi	r22, 0x3B	; 59
    2eac:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  const uint_least8_t hh = getHoursLT();
    2eb0:	0e 94 02 13 	call	0x2604	; 0x2604 <getHoursLT()>
    2eb4:	f8 2e       	mov	r15, r24
  const uint_least8_t mm = getMinutesLT();
    2eb6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <getMinutesLT()>
    2eba:	18 2f       	mov	r17, r24
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    2ebc:	87 e0       	ldi	r24, 0x07	; 7
    2ebe:	93 e0       	ldi	r25, 0x03	; 3
    2ec0:	64 e5       	ldi	r22, 0x54	; 84
    2ec2:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    2ec6:	87 e0       	ldi	r24, 0x07	; 7
    2ec8:	93 e0       	ldi	r25, 0x03	; 3
    2eca:	6f 2d       	mov	r22, r15
    2ecc:	4a e0       	ldi	r20, 0x0A	; 10
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
    2ed4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
    2ed8:	87 e0       	ldi	r24, 0x07	; 7
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	61 2f       	mov	r22, r17
    2ede:	4a e0       	ldi	r20, 0x0A	; 10
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  Serial_print_space();
    2ee6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
  uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn();
    2eea:	0e 94 e7 13 	call	0x27ce	; 0x27ce <getSimpleScheduleOn()>
    2eee:	fc 01       	movw	r30, r24
  const bool invalidStartTime = startMinutesSinceMidnightLT >= 1440;
  const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    2ef0:	85 e0       	ldi	r24, 0x05	; 5
    2ef2:	e0 3a       	cpi	r30, 0xA0	; 160
    2ef4:	f8 07       	cpc	r31, r24
    2ef6:	28 f0       	brcs	.+10     	; 0x2f02 <serialStatusReport()+0xfa>
    2ef8:	00 e0       	ldi	r16, 0x00	; 0
    2efa:	10 e0       	ldi	r17, 0x00	; 0
    2efc:	cf ef       	ldi	r28, 0xFF	; 255
    2efe:	d0 e0       	ldi	r29, 0x00	; 0
    2f00:	0c c0       	rjmp	.+24     	; 0x2f1a <serialStatusReport()+0x112>
    2f02:	cf 01       	movw	r24, r30
    2f04:	6c e3       	ldi	r22, 0x3C	; 60
    2f06:	70 e0       	ldi	r23, 0x00	; 0
    2f08:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    2f0c:	eb 01       	movw	r28, r22
  const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    2f0e:	cf 01       	movw	r24, r30
    2f10:	6c e3       	ldi	r22, 0x3C	; 60
    2f12:	70 e0       	ldi	r23, 0x00	; 0
    2f14:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    2f18:	8c 01       	movw	r16, r24
  Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    2f1a:	87 e0       	ldi	r24, 0x07	; 7
    2f1c:	93 e0       	ldi	r25, 0x03	; 3
    2f1e:	67 e5       	ldi	r22, 0x57	; 87
    2f20:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    2f24:	87 e0       	ldi	r24, 0x07	; 7
    2f26:	93 e0       	ldi	r25, 0x03	; 3
    2f28:	be 01       	movw	r22, r28
    2f2a:	4a e0       	ldi	r20, 0x0A	; 10
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
    2f32:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
    2f36:	87 e0       	ldi	r24, 0x07	; 7
    2f38:	93 e0       	ldi	r25, 0x03	; 3
    2f3a:	b8 01       	movw	r22, r16
    2f3c:	4a e0       	ldi	r20, 0x0A	; 10
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
  Serial_print_space();
    2f44:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
  uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff();
    2f48:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <getSimpleScheduleOff()>
    2f4c:	fc 01       	movw	r30, r24
  const bool invalidEndTime = endMinutesSinceMidnightLT >= 1440;
  const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    2f4e:	85 e0       	ldi	r24, 0x05	; 5
    2f50:	e0 3a       	cpi	r30, 0xA0	; 160
    2f52:	f8 07       	cpc	r31, r24
    2f54:	28 f0       	brcs	.+10     	; 0x2f60 <serialStatusReport()+0x158>
    2f56:	00 e0       	ldi	r16, 0x00	; 0
    2f58:	10 e0       	ldi	r17, 0x00	; 0
    2f5a:	cf ef       	ldi	r28, 0xFF	; 255
    2f5c:	d0 e0       	ldi	r29, 0x00	; 0
    2f5e:	0c c0       	rjmp	.+24     	; 0x2f78 <serialStatusReport()+0x170>
    2f60:	cf 01       	movw	r24, r30
    2f62:	6c e3       	ldi	r22, 0x3C	; 60
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    2f6a:	eb 01       	movw	r28, r22
  const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    2f6c:	cf 01       	movw	r24, r30
    2f6e:	6c e3       	ldi	r22, 0x3C	; 60
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	0e 94 cc 29 	call	0x5398	; 0x5398 <__udivmodhi4>
    2f76:	8c 01       	movw	r16, r24
  Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    2f78:	87 e0       	ldi	r24, 0x07	; 7
    2f7a:	93 e0       	ldi	r25, 0x03	; 3
    2f7c:	66 e4       	ldi	r22, 0x46	; 70
    2f7e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    2f82:	87 e0       	ldi	r24, 0x07	; 7
    2f84:	93 e0       	ldi	r25, 0x03	; 3
    2f86:	be 01       	movw	r22, r28
    2f88:	4a e0       	ldi	r20, 0x0A	; 10
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
    2f90:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
    2f94:	87 e0       	ldi	r24, 0x07	; 7
    2f96:	93 e0       	ldi	r25, 0x03	; 3
    2f98:	b8 01       	movw	r22, r16
    2f9a:	4a e0       	ldi	r20, 0x0A	; 10
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>

#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    2fa2:	87 e0       	ldi	r24, 0x07	; 7
    2fa4:	93 e0       	ldi	r25, 0x03	; 3
    2fa6:	6b e3       	ldi	r22, 0x3B	; 59
    2fa8:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.print('C'); // Current Celsius target, and FROST and WARM settings.
    2fac:	87 e0       	ldi	r24, 0x07	; 7
    2fae:	93 e0       	ldi	r25, 0x03	; 3
    2fb0:	63 e4       	ldi	r22, 0x43	; 67
    2fb2:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.print(getTargetTempC());
    2fb6:	0e 94 07 04 	call	0x80e	; 0x80e <getTargetTempC()>
    2fba:	68 2f       	mov	r22, r24
    2fbc:	87 e0       	ldi	r24, 0x07	; 7
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	4a e0       	ldi	r20, 0x0A	; 10
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  Serial_print_space();
    2fc8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    2fcc:	0e 94 0a 04 	call	0x814	; 0x814 <getFROSTTargetC()>
    2fd0:	68 2f       	mov	r22, r24
    2fd2:	87 e0       	ldi	r24, 0x07	; 7
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	4a e0       	ldi	r20, 0x0A	; 10
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  Serial_print_space();
    2fde:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    2fe2:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
    2fe6:	68 2f       	mov	r22, r24
    2fe8:	87 e0       	ldi	r24, 0x07	; 7
    2fea:	93 e0       	ldi	r25, 0x03	; 3
    2fec:	4a e0       	ldi	r20, 0x0A	; 10
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  Serial_print_space();
    2ff4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ff8:	f9 99       	sbic	0x1f, 1	; 31
    2ffa:	fe cf       	rjmp	.-4      	; 0x2ff8 <serialStatusReport()+0x1f0>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ffc:	83 e1       	ldi	r24, 0x13	; 19
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	92 bd       	out	0x22, r25	; 34
    3002:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3004:	f8 9a       	sbi	0x1f, 0	; 31
    3006:	80 b5       	in	r24, 0x20	; 32
  // Show bias.
  Serial.print(hasEcoBias() ? 'e' : 'c'); // Show eco/comfort bias.
    3008:	8f 3f       	cpi	r24, 0xFF	; 255
    300a:	11 f0       	breq	.+4      	; 0x3010 <serialStatusReport()+0x208>
    300c:	63 e6       	ldi	r22, 0x63	; 99
    300e:	01 c0       	rjmp	.+2      	; 0x3012 <serialStatusReport()+0x20a>
    3010:	65 e6       	ldi	r22, 0x65	; 101
    3012:	87 e0       	ldi	r24, 0x07	; 7
    3014:	93 e0       	ldi	r25, 0x03	; 3
    3016:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  // Show warming predictions.
  Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f');
    301a:	8f 2d       	mov	r24, r15
    301c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <shouldBeWarmedAtHour(unsigned char)>
    3020:	88 23       	and	r24, r24
    3022:	11 f4       	brne	.+4      	; 0x3028 <serialStatusReport()+0x220>
    3024:	66 e6       	ldi	r22, 0x66	; 102
    3026:	01 c0       	rjmp	.+2      	; 0x302a <serialStatusReport()+0x222>
    3028:	67 e7       	ldi	r22, 0x77	; 119
    302a:	87 e0       	ldi	r24, 0x07	; 7
    302c:	93 e0       	ldi	r25, 0x03	; 3
    302e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.print(shouldBeWarmedAtHour(hh < 23 ? (hh+1) : 0) ? 'w' : 'f');
    3032:	86 e1       	ldi	r24, 0x16	; 22
    3034:	8f 15       	cp	r24, r15
    3036:	10 f4       	brcc	.+4      	; 0x303c <serialStatusReport()+0x234>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <serialStatusReport()+0x238>
    303c:	8f 2d       	mov	r24, r15
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	0e 94 54 04 	call	0x8a8	; 0x8a8 <shouldBeWarmedAtHour(unsigned char)>
    3044:	88 23       	and	r24, r24
    3046:	11 f4       	brne	.+4      	; 0x304c <serialStatusReport()+0x244>
    3048:	66 e6       	ldi	r22, 0x66	; 102
    304a:	01 c0       	rjmp	.+2      	; 0x304e <serialStatusReport()+0x246>
    304c:	67 e7       	ldi	r22, 0x77	; 119
    304e:	87 e0       	ldi	r24, 0x07	; 7
    3050:	93 e0       	ldi	r25, 0x03	; 3
    3052:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  // Show occupancy if known.
  if(isLikelyOccupied()) { Serial.print('o'); } // Show room occupied.
    3056:	80 91 b9 01 	lds	r24, 0x01B9
    305a:	88 23       	and	r24, r24
    305c:	29 f0       	breq	.+10     	; 0x3068 <serialStatusReport()+0x260>
    305e:	87 e0       	ldi	r24, 0x07	; 7
    3060:	93 e0       	ldi	r25, 0x03	; 3
    3062:	6f e6       	ldi	r22, 0x6F	; 111
    3064:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
#endif

#ifdef ENABLE_BOILER_HUB
  Serial.print(';'); // Terminate previous section.
    3068:	87 e0       	ldi	r24, 0x07	; 7
    306a:	93 e0       	ldi	r25, 0x03	; 3
    306c:	6b e3       	ldi	r22, 0x3B	; 59
    306e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.print('C'); // Indicate central hub mode available.
    3072:	87 e0       	ldi	r24, 0x07	; 7
    3074:	93 e0       	ldi	r25, 0x03	; 3
    3076:	63 e4       	ldi	r22, 0x43	; 67
    3078:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.print(getMinBoilerOnMinutes()); // Show min 'on' time, or zero if disabled.
    307c:	0e 94 4a 04 	call	0x894	; 0x894 <getMinBoilerOnMinutes()>
    3080:	68 2f       	mov	r22, r24
    3082:	87 e0       	ldi	r24, 0x07	; 7
    3084:	93 e0       	ldi	r25, 0x03	; 3
    3086:	4a e0       	ldi	r20, 0x0A	; 10
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
#endif

#if defined(USE_MODULE_FHT8VSIMPLE)
  Serial.print(';'); // Terminate previous section.
    308e:	87 e0       	ldi	r24, 0x07	; 7
    3090:	93 e0       	ldi	r25, 0x03	; 3
    3092:	6b e3       	ldi	r22, 0x3B	; 59
    3094:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  Serial.print(F("HC"));
    3098:	87 e0       	ldi	r24, 0x07	; 7
    309a:	93 e0       	ldi	r25, 0x03	; 3
    309c:	62 ee       	ldi	r22, 0xE2	; 226
    309e:	73 e0       	ldi	r23, 0x03	; 3
    30a0:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Print::print(__FlashStringHelper const*)>
  Serial.print(FHT8VGetHC1());
    30a4:	0e 94 43 08 	call	0x1086	; 0x1086 <FHT8VGetHC1()>
    30a8:	68 2f       	mov	r22, r24
    30aa:	87 e0       	ldi	r24, 0x07	; 7
    30ac:	93 e0       	ldi	r25, 0x03	; 3
    30ae:	4a e0       	ldi	r20, 0x0A	; 10
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  Serial_print_space();
    30b6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
  Serial.print(FHT8VGetHC2());
    30ba:	0e 94 4c 08 	call	0x1098	; 0x1098 <FHT8VGetHC2()>
    30be:	68 2f       	mov	r22, r24
    30c0:	87 e0       	ldi	r24, 0x07	; 7
    30c2:	93 e0       	ldi	r25, 0x03	; 3
    30c4:	4a e0       	ldi	r20, 0x0A	; 10
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
  if(!isSyncedWithFHT8V())
    30cc:	0e 94 55 08 	call	0x10aa	; 0x10aa <isSyncedWithFHT8V()>
    30d0:	88 23       	and	r24, r24
    30d2:	39 f4       	brne	.+14     	; 0x30e2 <serialStatusReport()+0x2da>
    {
    Serial_print_space();
    30d4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
    Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    30d8:	87 e0       	ldi	r24, 0x07	; 7
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	63 e7       	ldi	r22, 0x73	; 115
    30de:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    }
#endif
  Serial.println();
    30e2:	87 e0       	ldi	r24, 0x07	; 7
    30e4:	93 e0       	ldi	r25, 0x03	; 3
    30e6:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    30ea:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    30ee:	ee 20       	and	r14, r14
    30f0:	11 f0       	breq	.+4      	; 0x30f6 <serialStatusReport()+0x2ee>
    30f2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
  }
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	08 95       	ret

00003104 <pollCLI(unsigned char)>:
#endif
// Used to poll user side for CLI input until specified sub-cycle time.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    3104:	9f 92       	push	r9
    3106:	af 92       	push	r10
    3108:	bf 92       	push	r11
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	00 d0       	rcall	.+0      	; 0x311c <pollCLI(unsigned char)+0x18>
    311c:	00 d0       	rcall	.+0      	; 0x311e <pollCLI(unsigned char)+0x1a>
    311e:	00 d0       	rcall	.+0      	; 0x3120 <pollCLI(unsigned char)+0x1c>
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? 0 : (maxSCT - 1 - MIN_POLL_SCT);
    3124:	83 30       	cpi	r24, 0x03	; 3
    3126:	10 f4       	brcc	.+4      	; 0x312c <pollCLI(unsigned char)+0x28>
    3128:	00 e0       	ldi	r16, 0x00	; 0
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <pollCLI(unsigned char)+0x2c>
    312c:	08 2f       	mov	r16, r24
    312e:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    3130:	80 91 b2 00 	lds	r24, 0x00B2
    3134:	80 17       	cp	r24, r16
    3136:	08 f0       	brcs	.+2      	; 0x313a <pollCLI(unsigned char)+0x36>
    3138:	e2 c2       	rjmp	.+1476   	; 0x36fe <pollCLI(unsigned char)+0x5fa>

  const bool neededWaking = powerUpSerialIfDisabled();
    313a:	0e 94 05 10 	call	0x200a	; 0x200a <powerUpSerialIfDisabled()>
    313e:	98 2e       	mov	r9, r24
    3140:	04 c0       	rjmp	.+8      	; 0x314a <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    3142:	87 e0       	ldi	r24, 0x07	; 7
    3144:	93 e0       	ldi	r25, 0x03	; 3
    3146:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <HardwareSerial::read()>
    314a:	87 e0       	ldi	r24, 0x07	; 7
    314c:	93 e0       	ldi	r25, 0x03	; 3
    314e:	0e 94 ed 25 	call	0x4bda	; 0x4bda <HardwareSerial::available()>
    3152:	18 16       	cp	r1, r24
    3154:	19 06       	cpc	r1, r25
    3156:	ac f3       	brlt	.-22     	; 0x3142 <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  Serial.println();
    3158:	87 e0       	ldi	r24, 0x07	; 7
    315a:	93 e0       	ldi	r25, 0x03	; 3
    315c:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
  Serial.print(CLIPromptChar);
    3160:	87 e0       	ldi	r24, 0x07	; 7
    3162:	93 e0       	ldi	r25, 0x03	; 3
    3164:	6e e3       	ldi	r22, 0x3E	; 62
    3166:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    316a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
    316e:	10 e0       	ldi	r17, 0x00	; 0
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    3170:	87 e0       	ldi	r24, 0x07	; 7
    3172:	93 e0       	ldi	r25, 0x03	; 3
    3174:	0e 94 ed 25 	call	0x4bda	; 0x4bda <HardwareSerial::available()>
    3178:	18 16       	cp	r1, r24
    317a:	19 06       	cpc	r1, r25
    317c:	8c f4       	brge	.+34     	; 0x31a0 <pollCLI(unsigned char)+0x9c>
      {
      const int ic = Serial.read();
    317e:	87 e0       	ldi	r24, 0x07	; 7
    3180:	93 e0       	ldi	r25, 0x03	; 3
    3182:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <HardwareSerial::read()>
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    3186:	8d 30       	cpi	r24, 0x0D	; 13
    3188:	91 05       	cpc	r25, r1
    318a:	c1 f0       	breq	.+48     	; 0x31bc <pollCLI(unsigned char)+0xb8>
    318c:	8a 30       	cpi	r24, 0x0A	; 10
    318e:	91 05       	cpc	r25, r1
    3190:	a9 f0       	breq	.+42     	; 0x31bc <pollCLI(unsigned char)+0xb8>
      buf[n++] = (char) ic;
    3192:	e1 2f       	mov	r30, r17
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	e3 55       	subi	r30, 0x53	; 83
    3198:	fe 4f       	sbci	r31, 0xFE	; 254
    319a:	80 83       	st	Z, r24
    319c:	1f 5f       	subi	r17, 0xFF	; 255
    319e:	0b c0       	rjmp	.+22     	; 0x31b6 <pollCLI(unsigned char)+0xb2>
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    31a0:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    31a4:	80 17       	cp	r24, r16
    31a6:	08 f0       	brcs	.+2      	; 0x31aa <pollCLI(unsigned char)+0xa6>
    31a8:	91 c2       	rjmp	.+1314   	; 0x36cc <pollCLI(unsigned char)+0x5c8>
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <idleCPU(signed char)>
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    31b6:	1a 30       	cpi	r17, 0x0A	; 10
    31b8:	d8 f2       	brcs	.-74     	; 0x3170 <pollCLI(unsigned char)+0x6c>
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <pollCLI(unsigned char)+0xbe>
#else
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
#endif
    }

  if(n > 0)
    31bc:	11 23       	and	r17, r17
    31be:	09 f4       	brne	.+2      	; 0x31c2 <pollCLI(unsigned char)+0xbe>
    31c0:	85 c2       	rjmp	.+1290   	; 0x36cc <pollCLI(unsigned char)+0x5c8>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    31c2:	80 91 ad 01 	lds	r24, 0x01AD
    31c6:	8f 53       	subi	r24, 0x3F	; 63
    31c8:	8c 33       	cpi	r24, 0x3C	; 60
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <pollCLI(unsigned char)+0xca>
    31cc:	43 c0       	rjmp	.+134    	; 0x3254 <pollCLI(unsigned char)+0x150>
    31ce:	8c e3       	ldi	r24, 0x3C	; 60
    31d0:	80 93 04 01 	sts	0x0104, r24
    else { Serial.println(F("? for CLI help")); flushSerialSCTSensitive(); return; }

    // Null-terminate the command line.
    buf[n] = '\0';
    31d4:	e1 2f       	mov	r30, r17
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	e3 55       	subi	r30, 0x53	; 83
    31da:	fe 4f       	sbci	r31, 0xFE	; 254
    31dc:	10 82       	st	Z, r1

    // Force to upper-case and echo the line received.
    strupr(buf);
    31de:	8d ea       	ldi	r24, 0xAD	; 173
    31e0:	91 e0       	ldi	r25, 0x01	; 1
    31e2:	0e 94 9e 03 	call	0x73c	; 0x73c <strupr>
    Serial.println(buf);
    31e6:	87 e0       	ldi	r24, 0x07	; 7
    31e8:	93 e0       	ldi	r25, 0x03	; 3
    31ea:	6d ea       	ldi	r22, 0xAD	; 173
    31ec:	71 e0       	ldi	r23, 0x01	; 1
    31ee:	0e 94 8a 28 	call	0x5114	; 0x5114 <Print::println(char const*)>

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    31f2:	80 91 ad 01 	lds	r24, 0x01AD
    31f6:	8c 34       	cpi	r24, 0x4C	; 76
    31f8:	09 f4       	brne	.+2      	; 0x31fc <pollCLI(unsigned char)+0xf8>
    31fa:	65 c1       	rjmp	.+714    	; 0x34c6 <pollCLI(unsigned char)+0x3c2>
    31fc:	8d 34       	cpi	r24, 0x4D	; 77
    31fe:	9c f4       	brge	.+38     	; 0x3226 <pollCLI(unsigned char)+0x122>
    3200:	84 34       	cpi	r24, 0x44	; 68
    3202:	09 f4       	brne	.+2      	; 0x3206 <pollCLI(unsigned char)+0x102>
    3204:	ab c0       	rjmp	.+342    	; 0x335c <pollCLI(unsigned char)+0x258>
    3206:	85 34       	cpi	r24, 0x45	; 69
    3208:	2c f4       	brge	.+10     	; 0x3214 <pollCLI(unsigned char)+0x110>
    320a:	82 34       	cpi	r24, 0x42	; 66
    320c:	79 f1       	breq	.+94     	; 0x326c <pollCLI(unsigned char)+0x168>
    320e:	83 34       	cpi	r24, 0x43	; 67
    3210:	51 f5       	brne	.+84     	; 0x3266 <pollCLI(unsigned char)+0x162>
    3212:	69 c0       	rjmp	.+210    	; 0x32e6 <pollCLI(unsigned char)+0x1e2>
    3214:	86 34       	cpi	r24, 0x46	; 70
    3216:	09 f4       	brne	.+2      	; 0x321a <pollCLI(unsigned char)+0x116>
    3218:	06 c1       	rjmp	.+524    	; 0x3426 <pollCLI(unsigned char)+0x322>
    321a:	86 34       	cpi	r24, 0x46	; 70
    321c:	0c f4       	brge	.+2      	; 0x3220 <pollCLI(unsigned char)+0x11c>
    321e:	77 c0       	rjmp	.+238    	; 0x330e <pollCLI(unsigned char)+0x20a>
    3220:	88 34       	cpi	r24, 0x48	; 72
    3222:	09 f5       	brne	.+66     	; 0x3266 <pollCLI(unsigned char)+0x162>
    3224:	14 c1       	rjmp	.+552    	; 0x344e <pollCLI(unsigned char)+0x34a>
    3226:	83 35       	cpi	r24, 0x53	; 83
    3228:	09 f4       	brne	.+2      	; 0x322c <pollCLI(unsigned char)+0x128>
    322a:	a2 c1       	rjmp	.+836    	; 0x3570 <pollCLI(unsigned char)+0x46c>
    322c:	84 35       	cpi	r24, 0x54	; 84
    322e:	4c f4       	brge	.+18     	; 0x3242 <pollCLI(unsigned char)+0x13e>
    3230:	81 35       	cpi	r24, 0x51	; 81
    3232:	09 f4       	brne	.+2      	; 0x3236 <pollCLI(unsigned char)+0x132>
    3234:	96 c1       	rjmp	.+812    	; 0x3562 <pollCLI(unsigned char)+0x45e>
    3236:	82 35       	cpi	r24, 0x52	; 82
    3238:	0c f0       	brlt	.+2      	; 0x323c <pollCLI(unsigned char)+0x138>
    323a:	6c c0       	rjmp	.+216    	; 0x3314 <pollCLI(unsigned char)+0x210>
    323c:	80 35       	cpi	r24, 0x50	; 80
    323e:	99 f4       	brne	.+38     	; 0x3266 <pollCLI(unsigned char)+0x162>
    3240:	45 c1       	rjmp	.+650    	; 0x34cc <pollCLI(unsigned char)+0x3c8>
    3242:	87 35       	cpi	r24, 0x57	; 87
    3244:	09 f4       	brne	.+2      	; 0x3248 <pollCLI(unsigned char)+0x144>
    3246:	fd c1       	rjmp	.+1018   	; 0x3642 <pollCLI(unsigned char)+0x53e>
    3248:	8a 35       	cpi	r24, 0x5A	; 90
    324a:	09 f4       	brne	.+2      	; 0x324e <pollCLI(unsigned char)+0x14a>
    324c:	13 c2       	rjmp	.+1062   	; 0x3674 <pollCLI(unsigned char)+0x570>
    324e:	84 35       	cpi	r24, 0x54	; 84
    3250:	51 f4       	brne	.+20     	; 0x3266 <pollCLI(unsigned char)+0x162>
    3252:	ce c1       	rjmp	.+924    	; 0x35f0 <pollCLI(unsigned char)+0x4ec>
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else { Serial.println(F("? for CLI help")); flushSerialSCTSensitive(); return; }
    3254:	87 e0       	ldi	r24, 0x07	; 7
    3256:	93 e0       	ldi	r25, 0x03	; 3
    3258:	62 ec       	ldi	r22, 0xC2	; 194
    325a:	71 e0       	ldi	r23, 0x01	; 1
    325c:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
    3260:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>
    3264:	4c c2       	rjmp	.+1176   	; 0x36fe <pollCLI(unsigned char)+0x5fa>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(); showStatus = false; break; }
    3266:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <dumpCLIUsage()>
    326a:	34 c2       	rjmp	.+1128   	; 0x36d4 <pollCLI(unsigned char)+0x5d0>
      case 'B':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "B E".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    326c:	13 30       	cpi	r17, 0x03	; 3
    326e:	08 f4       	brcc	.+2      	; 0x3272 <pollCLI(unsigned char)+0x16e>
    3270:	43 c2       	rjmp	.+1158   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    3272:	8f ea       	ldi	r24, 0xAF	; 175
    3274:	91 e0       	ldi	r25, 0x01	; 1
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	71 e0       	ldi	r23, 0x01	; 1
    327a:	ae 01       	movw	r20, r28
    327c:	4f 5f       	subi	r20, 0xFF	; 255
    327e:	5f 4f       	sbci	r21, 0xFF	; 255
    3280:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3284:	fc 01       	movw	r30, r24
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	09 f4       	brne	.+2      	; 0x328c <pollCLI(unsigned char)+0x188>
    328a:	36 c2       	rjmp	.+1132   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
//   * force target warm temperatures no higher than eco value.
// On setting confort mode:
//   * force target warm temperatures no lower than comfort value.
static bool setEcoBias(const bool eco)
  {
  if(eco)
    328c:	80 81       	ld	r24, Z
    328e:	83 34       	cpi	r24, 0x43	; 67
    3290:	91 f0       	breq	.+36     	; 0x32b6 <pollCLI(unsigned char)+0x1b2>
    {
    eeprom_smart_erase_byte((uint8_t *)EE_START_ECO_BIAS);
    3292:	83 e1       	ldi	r24, 0x13	; 19
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
    if(getWARMTargetC() > BIASECO_WARM) { setWARMTargetC(BIASECO_WARM); } // Allow no higher than eco default.
    329a:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
    329e:	82 31       	cpi	r24, 0x12	; 18
    32a0:	18 f0       	brcs	.+6      	; 0x32a8 <pollCLI(unsigned char)+0x1a4>
    32a2:	81 e1       	ldi	r24, 0x11	; 17
    32a4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <setWARMTargetC(unsigned char)>
    if(getFROSTTargetC() > BIASECO_FROST) { setFROSTTargetC(BIASECO_FROST); } // Allow no higher than eco default.
    32a8:	0e 94 0a 04 	call	0x814	; 0x814 <getFROSTTargetC()>
    32ac:	86 30       	cpi	r24, 0x06	; 6
    32ae:	08 f4       	brcc	.+2      	; 0x32b2 <pollCLI(unsigned char)+0x1ae>
    32b0:	23 c2       	rjmp	.+1094   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    32b2:	85 e0       	ldi	r24, 0x05	; 5
    32b4:	15 c0       	rjmp	.+42     	; 0x32e0 <pollCLI(unsigned char)+0x1dc>
    }
  else
    {
    eeprom_smart_clear_bits((uint8_t *)EE_START_ECO_BIAS, randRNG8() & ~1); // Gratuitously capture some slight entropy in EEPROM.
    32b6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <randRNG8()>
    32ba:	68 2f       	mov	r22, r24
    32bc:	6e 7f       	andi	r22, 0xFE	; 254
    32be:	83 e1       	ldi	r24, 0x13	; 19
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 21 07 	call	0xe42	; 0xe42 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    if(getWARMTargetC() < BIASCOM_WARM) { setWARMTargetC(BIASCOM_WARM); } // Allow no lower than comfort default.
    32c6:	0e 94 19 04 	call	0x832	; 0x832 <getWARMTargetC()>
    32ca:	84 31       	cpi	r24, 0x14	; 20
    32cc:	18 f4       	brcc	.+6      	; 0x32d4 <pollCLI(unsigned char)+0x1d0>
    32ce:	84 e1       	ldi	r24, 0x14	; 20
    32d0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <setWARMTargetC(unsigned char)>
    if(getFROSTTargetC() < BIASCOM_FROST) { setFROSTTargetC(BIASCOM_FROST); } // Allow no lower than comfort default.
    32d4:	0e 94 0a 04 	call	0x814	; 0x814 <getFROSTTargetC()>
    32d8:	8a 30       	cpi	r24, 0x0A	; 10
    32da:	08 f0       	brcs	.+2      	; 0x32de <pollCLI(unsigned char)+0x1da>
    32dc:	0d c2       	rjmp	.+1050   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    32de:	8a e0       	ldi	r24, 0x0A	; 10
    32e0:	0e 94 6b 05 	call	0xad6	; 0xad6 <setFROSTTargetC(unsigned char)>
    32e4:	09 c2       	rjmp	.+1042   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    32e6:	13 30       	cpi	r17, 0x03	; 3
    32e8:	08 f4       	brcc	.+2      	; 0x32ec <pollCLI(unsigned char)+0x1e8>
    32ea:	06 c2       	rjmp	.+1036   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    32ec:	8f ea       	ldi	r24, 0xAF	; 175
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	71 e0       	ldi	r23, 0x01	; 1
    32f4:	ae 01       	movw	r20, r28
    32f6:	4f 5f       	subi	r20, 0xFF	; 255
    32f8:	5f 4f       	sbci	r21, 0xFF	; 255
    32fa:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	09 f4       	brne	.+2      	; 0x3304 <pollCLI(unsigned char)+0x200>
    3302:	fa c1       	rjmp	.+1012   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    3304:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
          setMinBoilerOnMinutes(m);
    3308:	0e 94 49 05 	call	0xa92	; 0xa92 <setMinBoilerOnMinutes(unsigned char)>
    330c:	f5 c1       	rjmp	.+1002   	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
        break;
        }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLISecondsLeft = 0; break; }
    330e:	10 92 04 01 	sts	0x0104, r1
    3312:	f2 c1       	rjmp	.+996    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3314:	13 30       	cpi	r17, 0x03	; 3
    3316:	08 f4       	brcc	.+2      	; 0x331a <pollCLI(unsigned char)+0x216>
    3318:	ef c1       	rjmp	.+990    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    331a:	8f ea       	ldi	r24, 0xAF	; 175
    331c:	91 e0       	ldi	r25, 0x01	; 1
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	71 e0       	ldi	r23, 0x01	; 1
    3322:	ae 01       	movw	r20, r28
    3324:	4f 5f       	subi	r20, 0xFF	; 255
    3326:	5f 4f       	sbci	r21, 0xFF	; 255
    3328:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	09 f4       	brne	.+2      	; 0x3332 <pollCLI(unsigned char)+0x22e>
    3330:	e3 c1       	rjmp	.+966    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    3332:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    3336:	08 2f       	mov	r16, r24
    3338:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    333a:	81 2f       	mov	r24, r17
    333c:	60 2f       	mov	r22, r16
    333e:	0e 94 cb 04 	call	0x996	; 0x996 <getByHourStat(unsigned char, unsigned char)>
    3342:	68 2f       	mov	r22, r24
    3344:	87 e0       	ldi	r24, 0x07	; 7
    3346:	93 e0       	ldi	r25, 0x03	; 3
    3348:	4a e0       	ldi	r20, 0x0A	; 10
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
    3350:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    3354:	1f 5f       	subi	r17, 0xFF	; 255
    3356:	18 31       	cpi	r17, 0x18	; 24
    3358:	81 f7       	brne	.-32     	; 0x333a <pollCLI(unsigned char)+0x236>
    335a:	45 c1       	rjmp	.+650    	; 0x35e6 <pollCLI(unsigned char)+0x4e2>
      case 'D':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    335c:	13 30       	cpi	r17, 0x03	; 3
    335e:	08 f4       	brcc	.+2      	; 0x3362 <pollCLI(unsigned char)+0x25e>
    3360:	b9 c1       	rjmp	.+882    	; 0x36d4 <pollCLI(unsigned char)+0x5d0>
    3362:	8f ea       	ldi	r24, 0xAF	; 175
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	71 e0       	ldi	r23, 0x01	; 1
    336a:	ae 01       	movw	r20, r28
    336c:	4f 5f       	subi	r20, 0xFF	; 255
    336e:	5f 4f       	sbci	r21, 0xFF	; 255
    3370:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	09 f4       	brne	.+2      	; 0x337a <pollCLI(unsigned char)+0x276>
    3378:	ad c1       	rjmp	.+858    	; 0x36d4 <pollCLI(unsigned char)+0x5d0>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    337a:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    337e:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    3380:	0e 94 02 13 	call	0x2604	; 0x2604 <getHoursLT()>
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
    3384:	88 23       	and	r24, r24
    3386:	19 f4       	brne	.+6      	; 0x338e <pollCLI(unsigned char)+0x28a>
    3388:	f7 e1       	ldi	r31, 0x17	; 23
    338a:	ff 2e       	mov	r15, r31
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <pollCLI(unsigned char)+0x28e>
    338e:	f8 2e       	mov	r15, r24
    3390:	fa 94       	dec	r15
    3392:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    3394:	81 2f       	mov	r24, r17
    3396:	60 2f       	mov	r22, r16
    3398:	0e 94 cb 04 	call	0x996	; 0x996 <getByHourStat(unsigned char, unsigned char)>
    339c:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    339e:	8f 3f       	cpi	r24, 0xFF	; 255
    33a0:	21 f4       	brne	.+8      	; 0x33aa <pollCLI(unsigned char)+0x2a6>
    33a2:	87 e0       	ldi	r24, 0x07	; 7
    33a4:	93 e0       	ldi	r25, 0x03	; 3
    33a6:	6d e2       	ldi	r22, 0x2D	; 45
    33a8:	1b c0       	rjmp	.+54     	; 0x33e0 <pollCLI(unsigned char)+0x2dc>
            // ...else print more human-friendly version of stat.
            else switch(setN) // Relationship between stats set and type should probably be centralised to avoid getting out of sync with usage.
    33aa:	04 30       	cpi	r16, 0x04	; 4
    33ac:	18 f4       	brcc	.+6      	; 0x33b4 <pollCLI(unsigned char)+0x2b0>
    33ae:	02 30       	cpi	r16, 0x02	; 2
    33b0:	d0 f4       	brcc	.+52     	; 0x33e6 <pollCLI(unsigned char)+0x2e2>
    33b2:	03 c0       	rjmp	.+6      	; 0x33ba <pollCLI(unsigned char)+0x2b6>
    33b4:	04 30       	cpi	r16, 0x04	; 4
    33b6:	49 f5       	brne	.+82     	; 0x340a <pollCLI(unsigned char)+0x306>
    33b8:	22 c0       	rjmp	.+68     	; 0x33fe <pollCLI(unsigned char)+0x2fa>
              {
              case 0: case 1: { Serial.print((expandTempC16(statRaw)+8) >> 4); Serial.print('C'); break; } // Uncompanded temperature, rounded.
    33ba:	0e 94 0a 05 	call	0xa14	; 0xa14 <expandTempC16(unsigned char)>
    33be:	bc 01       	movw	r22, r24
    33c0:	68 5f       	subi	r22, 0xF8	; 248
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	e4 e0       	ldi	r30, 0x04	; 4
    33c6:	75 95       	asr	r23
    33c8:	67 95       	ror	r22
    33ca:	ea 95       	dec	r30
    33cc:	e1 f7       	brne	.-8      	; 0x33c6 <pollCLI(unsigned char)+0x2c2>
    33ce:	87 e0       	ldi	r24, 0x07	; 7
    33d0:	93 e0       	ldi	r25, 0x03	; 3
    33d2:	4a e0       	ldi	r20, 0x0A	; 10
    33d4:	50 e0       	ldi	r21, 0x00	; 0
    33d6:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
    33da:	87 e0       	ldi	r24, 0x07	; 7
    33dc:	93 e0       	ldi	r25, 0x03	; 3
    33de:	63 e4       	ldi	r22, 0x43	; 67
    33e0:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
    33e4:	12 c0       	rjmp	.+36     	; 0x340a <pollCLI(unsigned char)+0x306>
              case 2: case 3: { Serial.print(((int)statRaw) << 2); break; } // Uncompressed ambient light level.
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	66 0f       	add	r22, r22
    33ea:	77 1f       	adc	r23, r23
    33ec:	66 0f       	add	r22, r22
    33ee:	77 1f       	adc	r23, r23
    33f0:	87 e0       	ldi	r24, 0x07	; 7
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	4a e0       	ldi	r20, 0x0A	; 10
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	0e 94 77 28 	call	0x50ee	; 0x50ee <Print::print(int, int)>
    33fc:	06 c0       	rjmp	.+12     	; 0x340a <pollCLI(unsigned char)+0x306>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
    33fe:	87 e0       	ldi	r24, 0x07	; 7
    3400:	93 e0       	ldi	r25, 0x03	; 3
    3402:	40 e1       	ldi	r20, 0x10	; 16
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
    340a:	1f 15       	cp	r17, r15
    340c:	29 f4       	brne	.+10     	; 0x3418 <pollCLI(unsigned char)+0x314>
    340e:	87 e0       	ldi	r24, 0x07	; 7
    3410:	93 e0       	ldi	r25, 0x03	; 3
    3412:	6c e3       	ldi	r22, 0x3C	; 60
    3414:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
            Serial_print_space();
    3418:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Serial_print_space()>
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          const uint8_t thisHH = getHoursLT();
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          for(uint8_t hh = 0; hh < 24; ++hh)
    341c:	1f 5f       	subi	r17, 0xFF	; 255
    341e:	18 31       	cpi	r17, 0x18	; 24
    3420:	09 f0       	breq	.+2      	; 0x3424 <pollCLI(unsigned char)+0x320>
    3422:	b8 cf       	rjmp	.-144    	; 0x3394 <pollCLI(unsigned char)+0x290>
    3424:	53 c1       	rjmp	.+678    	; 0x36cc <pollCLI(unsigned char)+0x5c8>
      case 'F':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3426:	13 30       	cpi	r17, 0x03	; 3
    3428:	08 f4       	brcc	.+2      	; 0x342c <pollCLI(unsigned char)+0x328>
    342a:	5b c1       	rjmp	.+694    	; 0x36e2 <pollCLI(unsigned char)+0x5de>
    342c:	8f ea       	ldi	r24, 0xAF	; 175
    342e:	91 e0       	ldi	r25, 0x01	; 1
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	71 e0       	ldi	r23, 0x01	; 1
    3434:	ae 01       	movw	r20, r28
    3436:	4f 5f       	subi	r20, 0xFF	; 255
    3438:	5f 4f       	sbci	r21, 0xFF	; 255
    343a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	09 f4       	brne	.+2      	; 0x3444 <pollCLI(unsigned char)+0x340>
    3442:	4f c1       	rjmp	.+670    	; 0x36e2 <pollCLI(unsigned char)+0x5de>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    3444:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    3448:	0e 94 6b 05 	call	0xad6	; 0xad6 <setFROSTTargetC(unsigned char)>
    344c:	0d c1       	rjmp	.+538    	; 0x3668 <pollCLI(unsigned char)+0x564>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    344e:	15 30       	cpi	r17, 0x05	; 5
    3450:	08 f4       	brcc	.+2      	; 0x3454 <pollCLI(unsigned char)+0x350>
    3452:	4a c1       	rjmp	.+660    	; 0x36e8 <pollCLI(unsigned char)+0x5e4>
    3454:	8f ea       	ldi	r24, 0xAF	; 175
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	71 e0       	ldi	r23, 0x01	; 1
    345c:	ae 01       	movw	r20, r28
    345e:	4f 5f       	subi	r20, 0xFF	; 255
    3460:	5f 4f       	sbci	r21, 0xFF	; 255
    3462:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3466:	7c 01       	movw	r14, r24
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	09 f4       	brne	.+2      	; 0x346e <pollCLI(unsigned char)+0x36a>
    346c:	3d c1       	rjmp	.+634    	; 0x36e8 <pollCLI(unsigned char)+0x5e4>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	71 e0       	ldi	r23, 0x01	; 1
    3476:	ae 01       	movw	r20, r28
    3478:	4f 5f       	subi	r20, 0xFF	; 255
    347a:	5f 4f       	sbci	r21, 0xFF	; 255
    347c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3480:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	09 f4       	brne	.+2      	; 0x3488 <pollCLI(unsigned char)+0x384>
    3486:	38 c1       	rjmp	.+624    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
            {
            const int hc1 = atoi(tok1);
    3488:	c7 01       	movw	r24, r14
    348a:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    348e:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    3490:	c8 01       	movw	r24, r16
    3492:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    3496:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    3498:	84 e6       	ldi	r24, 0x64	; 100
    349a:	e8 16       	cp	r14, r24
    349c:	f1 04       	cpc	r15, r1
    349e:	08 f0       	brcs	.+2      	; 0x34a2 <pollCLI(unsigned char)+0x39e>
    34a0:	e6 c0       	rjmp	.+460    	; 0x366e <pollCLI(unsigned char)+0x56a>
    34a2:	17 fd       	sbrc	r17, 7
    34a4:	e4 c0       	rjmp	.+456    	; 0x366e <pollCLI(unsigned char)+0x56a>
    34a6:	04 36       	cpi	r16, 0x64	; 100
    34a8:	11 05       	cpc	r17, r1
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <pollCLI(unsigned char)+0x3aa>
    34ac:	e0 c0       	rjmp	.+448    	; 0x366e <pollCLI(unsigned char)+0x56a>
            else
              {
              FHT8VSetHC1(hc1);
    34ae:	8e 2d       	mov	r24, r14
    34b0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    34b4:	80 2f       	mov	r24, r16
    34b6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <FHT8VSetHC2(unsigned char)>
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <pollCLI(unsigned char)+0x3bc>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    34bc:	0e 94 6f 0c 	call	0x18de	; 0x18de <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    34c0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <FHT8VSyncAndTXReset()>
    34c4:	19 c1       	rjmp	.+562    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
        break;
        }
#endif

      // Learn current settings, just as if LEARN button had been pressed.
      case 'L': { handleLearnButton(); break; }
    34c6:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <handleLearnButton()>
    34ca:	16 c1       	rjmp	.+556    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 7 character sequence makes sense and is safe to tokenise, eg "P 1 2 3".
        if((n >= 7) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    34cc:	17 30       	cpi	r17, 0x07	; 7
    34ce:	08 f4       	brcc	.+2      	; 0x34d2 <pollCLI(unsigned char)+0x3ce>
    34d0:	13 c1       	rjmp	.+550    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    34d2:	8f ea       	ldi	r24, 0xAF	; 175
    34d4:	91 e0       	ldi	r25, 0x01	; 1
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	71 e0       	ldi	r23, 0x01	; 1
    34da:	ae 01       	movw	r20, r28
    34dc:	4f 5f       	subi	r20, 0xFF	; 255
    34de:	5f 4f       	sbci	r21, 0xFF	; 255
    34e0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    34e4:	5c 01       	movw	r10, r24
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	09 f4       	brne	.+2      	; 0x34ec <pollCLI(unsigned char)+0x3e8>
    34ea:	06 c1       	rjmp	.+524    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	71 e0       	ldi	r23, 0x01	; 1
    34f4:	7e 01       	movw	r14, r28
    34f6:	08 94       	sec
    34f8:	e1 1c       	adc	r14, r1
    34fa:	f1 1c       	adc	r15, r1
    34fc:	a7 01       	movw	r20, r14
    34fe:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3502:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	09 f4       	brne	.+2      	; 0x350a <pollCLI(unsigned char)+0x406>
    3508:	f7 c0       	rjmp	.+494    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
            {
            char *tok3 = strtok_r(NULL, " ", &last);
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	71 e0       	ldi	r23, 0x01	; 1
    3512:	a7 01       	movw	r20, r14
    3514:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3518:	6c 01       	movw	r12, r24
            if(NULL != tok3)
    351a:	00 97       	sbiw	r24, 0x00	; 0
    351c:	09 f4       	brne	.+2      	; 0x3520 <pollCLI(unsigned char)+0x41c>
    351e:	ec c0       	rjmp	.+472    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
              {
                const int hh = atoi(tok1);
    3520:	c5 01       	movw	r24, r10
    3522:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    3526:	7c 01       	movw	r14, r24
                const int mm = atoi(tok2);
    3528:	c8 01       	movw	r24, r16
    352a:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    352e:	8c 01       	movw	r16, r24
                const int dd = atoi(tok3);
    3530:	c6 01       	movw	r24, r12
    3532:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
                // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
                if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint_least16_t) (dd * 60))) { InvalidIgnored(); }
    3536:	2c e3       	ldi	r18, 0x3C	; 60
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	e2 9e       	mul	r14, r18
    353c:	a0 01       	movw	r20, r0
    353e:	e3 9e       	mul	r14, r19
    3540:	50 0d       	add	r21, r0
    3542:	f2 9e       	mul	r15, r18
    3544:	50 0d       	add	r21, r0
    3546:	11 24       	eor	r1, r1
    3548:	82 9f       	mul	r24, r18
    354a:	b0 01       	movw	r22, r0
    354c:	83 9f       	mul	r24, r19
    354e:	70 0d       	add	r23, r0
    3550:	92 9f       	mul	r25, r18
    3552:	70 0d       	add	r23, r0
    3554:	11 24       	eor	r1, r1
    3556:	ca 01       	movw	r24, r20
    3558:	80 0f       	add	r24, r16
    355a:	91 1f       	adc	r25, r17
    355c:	0e 94 17 14 	call	0x282e	; 0x282e <setSimpleSchedule(unsigned int, unsigned int)>
    3560:	83 c0       	rjmp	.+262    	; 0x3668 <pollCLI(unsigned char)+0x564>
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	80 93 ac 01 	sts	0x01AC, r24
    3568:	8e e1       	ldi	r24, 0x1E	; 30
    356a:	80 93 b8 01 	sts	0x01B8, r24
    356e:	c4 c0       	rjmp	.+392    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
#endif

      // Status line and smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Reset count: "));
    3570:	87 e0       	ldi	r24, 0x07	; 7
    3572:	93 e0       	ldi	r25, 0x03	; 3
    3574:	64 eb       	ldi	r22, 0xB4	; 180
    3576:	71 e0       	ldi	r23, 0x01	; 1
    3578:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    357c:	f9 99       	sbic	0x1f, 1	; 31
    357e:	fe cf       	rjmp	.-4      	; 0x357c <pollCLI(unsigned char)+0x478>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3580:	86 e0       	ldi	r24, 0x06	; 6
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	92 bd       	out	0x22, r25	; 34
    3586:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3588:	f8 9a       	sbi	0x1f, 0	; 31
    358a:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    358c:	87 e0       	ldi	r24, 0x07	; 7
    358e:	93 e0       	ldi	r25, 0x03	; 3
    3590:	4a e0       	ldi	r20, 0x0A	; 10
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	0e 94 25 28 	call	0x504a	; 0x504a <Print::print(unsigned char, int)>
        Serial.println();
    3598:	87 e0       	ldi	r24, 0x07	; 7
    359a:	93 e0       	ldi	r25, 0x03	; 3
    359c:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
        uint_least8_t hh = getHoursLT();
    35a0:	0e 94 02 13 	call	0x2604	; 0x2604 <getHoursLT()>
    35a4:	f8 2e       	mov	r15, r24
        Serial.print(F("Smart warming: "));
    35a6:	87 e0       	ldi	r24, 0x07	; 7
    35a8:	93 e0       	ldi	r25, 0x03	; 3
    35aa:	64 ea       	ldi	r22, 0xA4	; 164
    35ac:	71 e0       	ldi	r23, 0x01	; 1
    35ae:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Print::print(__FlashStringHelper const*)>
    35b2:	08 e1       	ldi	r16, 0x18	; 24
    35b4:	10 e0       	ldi	r17, 0x00	; 0
    35b6:	11 c0       	rjmp	.+34     	; 0x35da <pollCLI(unsigned char)+0x4d6>
        for(int i = 24; --i >= 0; )
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
    35b8:	8f 2d       	mov	r24, r15
    35ba:	0e 94 54 04 	call	0x8a8	; 0x8a8 <shouldBeWarmedAtHour(unsigned char)>
    35be:	88 23       	and	r24, r24
    35c0:	11 f4       	brne	.+4      	; 0x35c6 <pollCLI(unsigned char)+0x4c2>
    35c2:	66 e6       	ldi	r22, 0x66	; 102
    35c4:	01 c0       	rjmp	.+2      	; 0x35c8 <pollCLI(unsigned char)+0x4c4>
    35c6:	67 e7       	ldi	r22, 0x77	; 119
    35c8:	87 e0       	ldi	r24, 0x07	; 7
    35ca:	93 e0       	ldi	r25, 0x03	; 3
    35cc:	0e 94 49 27 	call	0x4e92	; 0x4e92 <Print::print(char)>
          if(++hh > 23) { hh = 0; }
    35d0:	f3 94       	inc	r15
    35d2:	87 e1       	ldi	r24, 0x17	; 23
    35d4:	8f 15       	cp	r24, r15
    35d6:	08 f4       	brcc	.+2      	; 0x35da <pollCLI(unsigned char)+0x4d6>
    35d8:	ff 24       	eor	r15, r15
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
        Serial.println();
        uint_least8_t hh = getHoursLT();
        Serial.print(F("Smart warming: "));
        for(int i = 24; --i >= 0; )
    35da:	01 50       	subi	r16, 0x01	; 1
    35dc:	10 40       	sbci	r17, 0x00	; 0
    35de:	8f ef       	ldi	r24, 0xFF	; 255
    35e0:	0f 3f       	cpi	r16, 0xFF	; 255
    35e2:	18 07       	cpc	r17, r24
    35e4:	49 f7       	brne	.-46     	; 0x35b8 <pollCLI(unsigned char)+0x4b4>
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
          if(++hh > 23) { hh = 0; }
          }
        Serial.println();
    35e6:	87 e0       	ldi	r24, 0x07	; 7
    35e8:	93 e0       	ldi	r25, 0x03	; 3
    35ea:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
    35ee:	84 c0       	rjmp	.+264    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    35f0:	15 30       	cpi	r17, 0x05	; 5
    35f2:	08 f4       	brcc	.+2      	; 0x35f6 <pollCLI(unsigned char)+0x4f2>
    35f4:	81 c0       	rjmp	.+258    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    35f6:	8f ea       	ldi	r24, 0xAF	; 175
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	71 e0       	ldi	r23, 0x01	; 1
    35fe:	ae 01       	movw	r20, r28
    3600:	4f 5f       	subi	r20, 0xFF	; 255
    3602:	5f 4f       	sbci	r21, 0xFF	; 255
    3604:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3608:	8c 01       	movw	r16, r24
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	09 f4       	brne	.+2      	; 0x3610 <pollCLI(unsigned char)+0x50c>
    360e:	74 c0       	rjmp	.+232    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	71 e0       	ldi	r23, 0x01	; 1
    3618:	ae 01       	movw	r20, r28
    361a:	4f 5f       	subi	r20, 0xFF	; 255
    361c:	5f 4f       	sbci	r21, 0xFF	; 255
    361e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3622:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	09 f4       	brne	.+2      	; 0x362a <pollCLI(unsigned char)+0x526>
    3628:	67 c0       	rjmp	.+206    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
            {
            const int hh = atoi(tok1);
    362a:	c8 01       	movw	r24, r16
    362c:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    3630:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    3632:	c7 01       	movw	r24, r14
    3634:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    3638:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    363a:	c8 01       	movw	r24, r16
    363c:	0e 94 bd 13 	call	0x277a	; 0x277a <setHoursMinutesLT(int, int)>
    3640:	13 c0       	rjmp	.+38     	; 0x3668 <pollCLI(unsigned char)+0x564>
      case 'W':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3642:	13 30       	cpi	r17, 0x03	; 3
    3644:	08 f4       	brcc	.+2      	; 0x3648 <pollCLI(unsigned char)+0x544>
    3646:	53 c0       	rjmp	.+166    	; 0x36ee <pollCLI(unsigned char)+0x5ea>
    3648:	8f ea       	ldi	r24, 0xAF	; 175
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	71 e0       	ldi	r23, 0x01	; 1
    3650:	ae 01       	movw	r20, r28
    3652:	4f 5f       	subi	r20, 0xFF	; 255
    3654:	5f 4f       	sbci	r21, 0xFF	; 255
    3656:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	09 f4       	brne	.+2      	; 0x3660 <pollCLI(unsigned char)+0x55c>
    365e:	47 c0       	rjmp	.+142    	; 0x36ee <pollCLI(unsigned char)+0x5ea>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    3660:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
    3664:	0e 94 50 05 	call	0xaa0	; 0xaa0 <setWARMTargetC(unsigned char)>
    3668:	88 23       	and	r24, r24
    366a:	09 f0       	breq	.+2      	; 0x366e <pollCLI(unsigned char)+0x56a>
    366c:	45 c0       	rjmp	.+138    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    366e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <InvalidIgnored()>
    3672:	42 c0       	rjmp	.+132    	; 0x36f8 <pollCLI(unsigned char)+0x5f4>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
    367c:	80 91 b2 00 	lds	r24, 0x00B2
    3680:	2f ef       	ldi	r18, 0xFF	; 255
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	28 1b       	sub	r18, r24
    3686:	31 09       	sbc	r19, r1
    3688:	c9 01       	movw	r24, r18
    368a:	43 e0       	ldi	r20, 0x03	; 3
    368c:	88 0f       	add	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	4a 95       	dec	r20
    3692:	e1 f7       	brne	.-8      	; 0x368c <pollCLI(unsigned char)+0x588>
    3694:	82 1b       	sub	r24, r18
    3696:	93 0b       	sbc	r25, r19
    3698:	95 95       	asr	r25
    369a:	87 95       	ror	r24
    369c:	44 97       	sbiw	r24, 0x14	; 20
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	81 30       	cpi	r24, 0x01	; 1
    36a4:	91 05       	cpc	r25, r1
    36a6:	14 f4       	brge	.+4      	; 0x36ac <pollCLI(unsigned char)+0x5a8>
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	0e 94 2d 05 	call	0xa5a	; 0xa5a <zapStats(unsigned int)>
    36b0:	88 23       	and	r24, r24
    36b2:	29 f0       	breq	.+10     	; 0x36be <pollCLI(unsigned char)+0x5ba>
          { Serial.println(F("Zapped.")); }
    36b4:	87 e0       	ldi	r24, 0x07	; 7
    36b6:	93 e0       	ldi	r25, 0x03	; 3
    36b8:	6c e9       	ldi	r22, 0x9C	; 156
    36ba:	71 e0       	ldi	r23, 0x01	; 1
    36bc:	04 c0       	rjmp	.+8      	; 0x36c6 <pollCLI(unsigned char)+0x5c2>
        else
          { Serial.println(F("Not finished.")); }
    36be:	87 e0       	ldi	r24, 0x07	; 7
    36c0:	93 e0       	ldi	r25, 0x03	; 3
    36c2:	6e e8       	ldi	r22, 0x8E	; 142
    36c4:	71 e0       	ldi	r23, 0x01	; 1
    36c6:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Print::println(__FlashStringHelper const*)>
    36ca:	04 c0       	rjmp	.+8      	; 0x36d4 <pollCLI(unsigned char)+0x5d0>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    }
  else { Serial.println(); } // Terminate empty CLI input line after timeout.
    36cc:	87 e0       	ldi	r24, 0x07	; 7
    36ce:	93 e0       	ldi	r25, 0x03	; 3
    36d0:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    36d4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    36d8:	99 20       	and	r9, r9
    36da:	89 f0       	breq	.+34     	; 0x36fe <pollCLI(unsigned char)+0x5fa>
    36dc:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <powerDownSerial()>
    36e0:	0e c0       	rjmp	.+28     	; 0x36fe <pollCLI(unsigned char)+0x5fa>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { isWarmMode = false; } // No parameter supplied; switch to FROST mode.
    36e2:	10 92 ac 01 	sts	0x01AC, r1
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    36e8:	12 30       	cpi	r17, 0x02	; 2
    36ea:	30 f4       	brcc	.+12     	; 0x36f8 <pollCLI(unsigned char)+0x5f4>
    36ec:	e7 ce       	rjmp	.-562    	; 0x34bc <pollCLI(unsigned char)+0x3b8>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          {
          isWarmMode = true; // No parameter supplied; switch to WARM mode.
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	80 93 ac 01 	sts	0x01AC, r24
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    36f4:	10 92 b8 01 	sts	0x01B8, r1
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    36f8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <serialStatusReport()>
    36fc:	eb cf       	rjmp	.-42     	; 0x36d4 <pollCLI(unsigned char)+0x5d0>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    36fe:	26 96       	adiw	r28, 0x06	; 6
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	ff 90       	pop	r15
    3714:	ef 90       	pop	r14
    3716:	df 90       	pop	r13
    3718:	cf 90       	pop	r12
    371a:	bf 90       	pop	r11
    371c:	af 90       	pop	r10
    371e:	9f 90       	pop	r9
    3720:	08 95       	ret

00003722 <offPause()>:
  }

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  nap(WDTO_120MS); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
    3722:	83 e0       	ldi	r24, 0x03	; 3
    3724:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
  pollIO(); // Slip in an I/O poll.
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
  }
    372e:	08 95       	ret

00003730 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(uint_fast8_t sec)
    3730:	1f 93       	push	r17
    3732:	98 2f       	mov	r25, r24

  const bool sec0 = (0 == sec);

#ifdef SUPPORT_BAKE
  // Run down BAKE mode timer if need be, one tick per minute.
  if(sec0 && (bakeCountdownM > 0)) { --bakeCountdownM; }
    3734:	88 23       	and	r24, r24
    3736:	71 f4       	brne	.+28     	; 0x3754 <tickUI(unsigned char)+0x24>
    3738:	80 91 b8 01 	lds	r24, 0x01B8
    373c:	88 23       	and	r24, r24
    373e:	19 f0       	breq	.+6      	; 0x3746 <tickUI(unsigned char)+0x16>
    3740:	81 50       	subi	r24, 0x01	; 1
    3742:	80 93 b8 01 	sts	0x01B8, r24
#endif

  // Run down occupation timer if need be.
  if(sec0 && (occupationCountdownM > 0)) { --occupationCountdownM; }
    3746:	80 91 b9 01 	lds	r24, 0x01B9
    374a:	88 23       	and	r24, r24
    374c:	19 f0       	breq	.+6      	; 0x3754 <tickUI(unsigned char)+0x24>
    374e:	81 50       	subi	r24, 0x01	; 1
    3750:	80 93 b9 01 	sts	0x01B9, r24

  // Time out CLI activation if need be, one tick per second.
  if(CLISecondsLeft != 0)
    3754:	80 91 04 01 	lds	r24, 0x0104
    3758:	88 23       	and	r24, r24
    375a:	39 f0       	breq	.+14     	; 0x376a <tickUI(unsigned char)+0x3a>
    {
    // Decrements two at a time (because routine called every two seconds) but avoids underflow.
    if((CLISecondsLeft -= 2) < 0) { CLISecondsLeft = 0; }
    375c:	82 50       	subi	r24, 0x02	; 2
    375e:	80 93 04 01 	sts	0x0104, r24
    3762:	87 ff       	sbrs	r24, 7
    3764:	02 c0       	rjmp	.+4      	; 0x376a <tickUI(unsigned char)+0x3a>
    3766:	10 92 04 01 	sts	0x0104, r1
    }

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    376a:	4d 99       	sbic	0x09, 5	; 9
    376c:	19 c0       	rjmp	.+50     	; 0x37a0 <tickUI(unsigned char)+0x70>
    {
    // User has pressed button: cycle through frost | warm [ | bake ] states.
    statusChange = true;
    // Also keep CLI active for a while longer.
    resetCLIActiveTimer();
    376e:	8c e3       	ldi	r24, 0x3C	; 60
    3770:	80 93 04 01 	sts	0x0104, r24
    // LED on...
    fastDigitalWrite(LED_HEATCALL, HIGH);
    3774:	2d 9a       	sbi	0x05, 5	; 5
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    3776:	80 91 ac 01 	lds	r24, 0x01AC
    377a:	88 23       	and	r24, r24
    377c:	49 f4       	brne	.+18     	; 0x3790 <tickUI(unsigned char)+0x60>
      {
      isWarmMode = true;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	80 93 ac 01 	sts	0x01AC, r24

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
    3784:	8d e2       	ldi	r24, 0x2D	; 45
    3786:	80 93 b9 01 	sts	0x01B9, r24
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    378a:	10 92 b8 01 	sts	0x01B8, r1
    378e:	68 c0       	rjmp	.+208    	; 0x3860 <tickUI(unsigned char)+0x130>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    3790:	80 91 b8 01 	lds	r24, 0x01B8
    3794:	88 23       	and	r24, r24
    3796:	09 f4       	brne	.+2      	; 0x379a <tickUI(unsigned char)+0x6a>
    3798:	53 c0       	rjmp	.+166    	; 0x3840 <tickUI(unsigned char)+0x110>
      tinyPause();
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmMode = false;
    379a:	10 92 ac 01 	sts	0x01AC, r1
    379e:	67 c0       	rjmp	.+206    	; 0x386e <tickUI(unsigned char)+0x13e>
      tinyPause(); // 1 x tiny flash 'heat call' to indicate now in FROST mode.
      }
    }
  else
    {
    const bool forthTick = !(sec & 6); // True on every 4th tick.
    37a0:	10 e0       	ldi	r17, 0x00	; 0
    37a2:	96 70       	andi	r25, 0x06	; 6
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <tickUI(unsigned char)+0x78>
    37a6:	11 e0       	ldi	r17, 0x01	; 1

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    if(isWarmMode) // Generate flash(es) if in WARM mode.
    37a8:	80 91 ac 01 	lds	r24, 0x01AC
    37ac:	88 23       	and	r24, r24
    37ae:	31 f1       	breq	.+76     	; 0x37fc <tickUI(unsigned char)+0xcc>
      {
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      if(!isRoomDark() || (forthTick && (0 != readAmbientLight()) && !isRoomDark()))
    37b0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
    37b4:	88 23       	and	r24, r24
    37b6:	51 f4       	brne	.+20     	; 0x37cc <tickUI(unsigned char)+0x9c>
    37b8:	11 23       	and	r17, r17
    37ba:	a9 f1       	breq	.+106    	; 0x3826 <tickUI(unsigned char)+0xf6>
    37bc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <readAmbientLight()>
    37c0:	89 2b       	or	r24, r25
    37c2:	89 f1       	breq	.+98     	; 0x3826 <tickUI(unsigned char)+0xf6>
    37c4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
    37c8:	88 23       	and	r24, r24
    37ca:	69 f1       	breq	.+90     	; 0x3826 <tickUI(unsigned char)+0xf6>
//#ifdef LEARN_BUTTON_AVAILABLE
//        if((!forthTick) || isSimpleScheduleSet()) // Omit every 4th set of flashes unless a schedule is set.
//#endif
          {
          // First flash to indicate WARM mode.
          fastDigitalWrite(LED_HEATCALL, HIGH);
    37cc:	2d 9a       	sbi	0x05, 5	; 5
void burnHundredsOfCyclesProductivelyAndPoll();


// Use WDT-based timer for xxxPause() routines.
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
          tinyPause();
  
          // Second flash to indicate calling for heat.
          if(getTRVPercentOpen() != 0)
    37d4:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    37d8:	88 23       	and	r24, r24
    37da:	29 f1       	breq	.+74     	; 0x3826 <tickUI(unsigned char)+0xf6>
            {
            fastDigitalWrite(LED_HEATCALL, LOW);
    37dc:	2d 98       	cbi	0x05, 5	; 5
            offPause(); // V0.09 was mediumPause().
    37de:	0e 94 91 1b 	call	0x3722	; 0x3722 <offPause()>
            fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    37e2:	2d 9a       	sbi	0x05, 5	; 5
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    37ea:	80 91 ac 01 	lds	r24, 0x01AC
    37ee:	88 23       	and	r24, r24
    37f0:	d1 f0       	breq	.+52     	; 0x3826 <tickUI(unsigned char)+0xf6>
    37f2:	80 91 b8 01 	lds	r24, 0x01B8
    37f6:	88 23       	and	r24, r24
    37f8:	b1 f0       	breq	.+44     	; 0x3826 <tickUI(unsigned char)+0xf6>
    37fa:	0e c0       	rjmp	.+28     	; 0x3818 <tickUI(unsigned char)+0xe8>
 
    // Even in FROST mode, if calling for heat (eg opening the rad valve) emit tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick && !isRoomDark() && (0 != getTRVPercentOpen()))
    37fc:	11 23       	and	r17, r17
    37fe:	99 f0       	breq	.+38     	; 0x3826 <tickUI(unsigned char)+0xf6>
    3800:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
    3804:	88 23       	and	r24, r24
    3806:	79 f0       	breq	.+30     	; 0x3826 <tickUI(unsigned char)+0xf6>
    3808:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    380c:	88 23       	and	r24, r24
    380e:	59 f0       	breq	.+22     	; 0x3826 <tickUI(unsigned char)+0xf6>
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    3810:	2d 9a       	sbi	0x05, 5	; 5
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
      tinyPause();
      fastDigitalWrite(LED_HEATCALL, LOW);
    3818:	2d 98       	cbi	0x05, 5	; 5
      offPause(); // V0.09 was mediumPause().
    381a:	0e 94 91 1b 	call	0x3722	; 0x3722 <offPause()>
      fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    381e:	2d 9a       	sbi	0x05, 5	; 5
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    3826:	80 e0       	ldi	r24, 0x00	; 0
      tinyPause();
      }
    }

  // Ensure LED forced off/LOW at least once each cycle.
  fastDigitalWrite(LED_HEATCALL, LOW);
    3828:	2d 98       	cbi	0x05, 5	; 5

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    382a:	18 99       	sbic	0x03, 0	; 3
    382c:	07 c0       	rjmp	.+14     	; 0x383c <tickUI(unsigned char)+0x10c>
    {
    statusChange = true;
    handleLearnButton();
    382e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <handleLearnButton()>

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
    3832:	8d e2       	ldi	r24, 0x2D	; 45
    3834:	80 93 b9 01 	sts	0x01B9, r24
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    {
    statusChange = true;
    handleLearnButton();
    markAsOccupied(); // Mark room as currently occupied also.
    fastDigitalWrite(LED_HEATCALL, HIGH); // Leave heatcall LED on while learn button held down.
    3838:	2d 9a       	sbi	0x05, 5	; 5
    383a:	81 e0       	ldi	r24, 0x01	; 1
    }
#endif

  return(statusChange);
  }
    383c:	1f 91       	pop	r17
    383e:	08 95       	ret
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	80 93 ac 01 	sts	0x01AC, r24
    3846:	8e e1       	ldi	r24, 0x1E	; 30
    3848:	80 93 b8 01 	sts	0x01B8, r24

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
    384c:	8d e2       	ldi	r24, 0x2D	; 45
    384e:	80 93 b9 01 	sts	0x01B9, r24
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      markAsOccupied(); // Mark room as currently occupied also.
      tinyPause(); // 3 x tiny flash 'heat call' to indicate now in BAKE mode.
      fastDigitalWrite(LED_HEATCALL, LOW);
    3858:	2d 98       	cbi	0x05, 5	; 5
      offPause();
    385a:	0e 94 91 1b 	call	0x3722	; 0x3722 <offPause()>
      fastDigitalWrite(LED_HEATCALL, HIGH);
    385e:	2d 9a       	sbi	0x05, 5	; 5
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
      tinyPause();
      fastDigitalWrite(LED_HEATCALL, LOW);
    3866:	2d 98       	cbi	0x05, 5	; 5
      offPause();
    3868:	0e 94 91 1b 	call	0x3722	; 0x3722 <offPause()>
      fastDigitalWrite(LED_HEATCALL, HIGH);
    386c:	2d 9a       	sbi	0x05, 5	; 5
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	d8 cf       	rjmp	.-80     	; 0x3828 <tickUI(unsigned char)+0xf8>

00003878 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
    3878:	1f 93       	push	r17
    387a:	18 2f       	mov	r17, r24
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
    387c:	0e 94 4a 04 	call	0x894	; 0x894 <getMinBoilerOnMinutes()>
    3880:	88 23       	and	r24, r24
    3882:	99 f0       	breq	.+38     	; 0x38aa <pollIO(bool)+0x32>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    uint8_t sct;
    if(force || ((0 == ((sct = getSubCycleTime()) & 3)) && (sct != _pO_lastPoll)))
    3884:	11 23       	and	r17, r17
    3886:	61 f4       	brne	.+24     	; 0x38a0 <pollIO(bool)+0x28>
    3888:	20 91 b2 00 	lds	r18, 0x00B2
    388c:	82 2f       	mov	r24, r18
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	83 70       	andi	r24, 0x03	; 3
    3892:	90 70       	andi	r25, 0x00	; 0
    3894:	89 2b       	or	r24, r25
    3896:	49 f4       	brne	.+18     	; 0x38aa <pollIO(bool)+0x32>
    3898:	80 91 be 01 	lds	r24, 0x01BE
    389c:	28 17       	cp	r18, r24
    389e:	29 f0       	breq	.+10     	; 0x38aa <pollIO(bool)+0x32>
      {
      _pO_lastPoll = sct;
    38a0:	20 93 be 01 	sts	0x01BE, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
    38a4:	0e 94 be 09 	call	0x137c	; 0x137c <FHT8VCallForHeatPoll()>
    38a8:	01 c0       	rjmp	.+2      	; 0x38ac <pollIO(bool)+0x34>
    38aa:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
    38ac:	1f 91       	pop	r17
    38ae:	08 95       	ret

000038b0 <loop>:
static uint8_t boilerNoCallM;
#endif

// The main control loop routine runs forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    38b0:	7f 92       	push	r7
    38b2:	8f 92       	push	r8
    38b4:	9f 92       	push	r9
    38b6:	af 92       	push	r10
    38b8:	bf 92       	push	r11
    38ba:	cf 92       	push	r12
    38bc:	df 92       	push	r13
    38be:	ef 92       	push	r14
    38c0:	ff 92       	push	r15
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <loop+0x1c>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <loop+0x1e>
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
  DEBUG_SERIAL_PRINT(TIME_LSD);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Use the zeroth second in each minute to force extra deep resets, etc.
  const bool second0 = (0 == TIME_LSD);
    38d2:	ee 24       	eor	r14, r14
    38d4:	80 91 ba 01 	lds	r24, 0x01BA
    38d8:	88 23       	and	r24, r24
    38da:	11 f4       	brne	.+4      	; 0x38e0 <loop+0x30>
    38dc:	ee 24       	eor	r14, r14
    38de:	e3 94       	inc	r14
//  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and if possible noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == (minuteCount & 3));
    38e0:	bb 24       	eor	r11, r11
    38e2:	80 91 bb 01 	lds	r24, 0x01BB
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	83 70       	andi	r24, 0x03	; 3
    38ea:	90 70       	andi	r25, 0x00	; 0
    38ec:	89 2b       	or	r24, r25
    38ee:	11 f4       	brne	.+4      	; 0x38f4 <loop+0x44>
    38f0:	bb 24       	eor	r11, r11
    38f2:	b3 94       	inc	r11

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Note last-measured battery status.
  const bool batteryLow = isBatteryLow();
    38f4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <isBatteryLow()>
    38f8:	88 2e       	mov	r8, r24
  const bool conserveBattery =
    (batteryLow || !inWarmMode()) && // Don't spare the batteries unless in FROST mode (which should be most of the time) or the batteries are low.
#if defined(USE_MODULE_FHT8VSIMPLE)
    (!getFHT8V_isValveOpen()) &&  // Run at full speed until the FHT8V valve should actually have shut and the boiler gone off.
#endif
    (0 == getTRVPercentOpen()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    38fa:	88 23       	and	r24, r24
    38fc:	21 f4       	brne	.+8      	; 0x3906 <loop+0x56>
    38fe:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <inWarmMode()>
    3902:	88 23       	and	r24, r24
    3904:	59 f4       	brne	.+22     	; 0x391c <loop+0x6c>
    3906:	0e 94 58 08 	call	0x10b0	; 0x10b0 <getFHT8V_isValveOpen()>
    390a:	88 23       	and	r24, r24
    390c:	39 f4       	brne	.+14     	; 0x391c <loop+0x6c>
    390e:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    3912:	88 23       	and	r24, r24
    3914:	19 f4       	brne	.+6      	; 0x391c <loop+0x6c>
    3916:	aa 24       	eor	r10, r10
    3918:	a3 94       	inc	r10
    391a:	01 c0       	rjmp	.+2      	; 0x391e <loop+0x6e>
    391c:	aa 24       	eor	r10, r10


  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    391e:	0e 94 4a 04 	call	0x894	; 0x894 <getMinBoilerOnMinutes()>
    3922:	c8 2e       	mov	r12, r24
    3924:	88 23       	and	r24, r24
    3926:	09 f4       	brne	.+2      	; 0x392a <loop+0x7a>
    3928:	44 c0       	rjmp	.+136    	; 0x39b2 <loop+0x102>
    392a:	cc 24       	eor	r12, r12
    392c:	c3 94       	inc	r12
  if(hubMode)
    {
#if defined(USE_MODULE_FHT8VSIMPLE)

    // Final poll to to cover up to end of previous minor loop.
    FHT8VCallForHeatPoll();
    392e:	0e 94 be 09 	call	0x137c	; 0x137c <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    3932:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <FHT8VCallForHeatHeardGetAndClear()>
    3936:	8c 01       	movw	r16, r24
    const bool heardIt = hcRequest != (uint16_t)~0;
    3938:	ff 24       	eor	r15, r15
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	0f 3f       	cpi	r16, 0xFF	; 255
    393e:	18 07       	cpc	r17, r24
    3940:	c1 f0       	breq	.+48     	; 0x3972 <loop+0xc2>
    3942:	ff 24       	eor	r15, r15
    3944:	f3 94       	inc	r15
    if(heardIt)
      {
      serialPrintAndFlush(F("Call for heat from "));
    3946:	8c e1       	ldi	r24, 0x1C	; 28
    3948:	94 e0       	ldi	r25, 0x04	; 4
    394a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush((hcRequest >> 8) & 0xff);
    394e:	81 2f       	mov	r24, r17
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	6a e0       	ldi	r22, 0x0A	; 10
    3954:	70 e0       	ldi	r23, 0x00	; 0
    3956:	0e 94 86 14 	call	0x290c	; 0x290c <serialPrintAndFlush(unsigned int, int)>
      serialPrintAndFlush(' ');
    395a:	80 e2       	ldi	r24, 0x20	; 32
    395c:	0e 94 9e 14 	call	0x293c	; 0x293c <serialPrintAndFlush(char)>
      serialPrintAndFlush(hcRequest & 0xff);
    3960:	c8 01       	movw	r24, r16
    3962:	90 70       	andi	r25, 0x00	; 0
    3964:	6a e0       	ldi	r22, 0x0A	; 10
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	0e 94 86 14 	call	0x290c	; 0x290c <serialPrintAndFlush(unsigned int, int)>
      serialPrintlnAndFlush();
    396c:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
    3970:	04 c0       	rjmp	.+8      	; 0x397a <loop+0xca>
      }   

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: can stop listening if boiler on to satisfy local demand (so as to measure local temp better: less self-heating).
    if(heardIt ||
    3972:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    3976:	88 23       	and	r24, r24
    3978:	41 f0       	breq	.+16     	; 0x398a <loop+0xda>
       (0 != getTRVPercentOpen()))
      {
      boilerCountdownM = getMinBoilerOnMinutes(); // Expect to turn boiler on.
    397a:	0e 94 4a 04 	call	0x894	; 0x894 <getMinBoilerOnMinutes()>
    397e:	80 93 bc 01 	sts	0x01BC, r24
      boilerNoCallM = 0; // Ensure set to eager full duty-cycle listen at boiler off.
    3982:	10 92 bd 01 	sts	0x01BD, r1

    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (> one FHT8V TX cycle, ~2 minutes), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    if(!heardIt &&
    3986:	ff 20       	and	r15, r15
    3988:	a1 f4       	brne	.+40     	; 0x39b2 <loop+0x102>
    398a:	80 91 bc 01 	lds	r24, 0x01BC
    398e:	83 30       	cpi	r24, 0x03	; 3
    3990:	80 f4       	brcc	.+32     	; 0x39b2 <loop+0x102>
       (boilerCountdownM <= 2)) // Listen eagerly for fresh calls for heat for last 2--3 minutes before turning boiler off.
      {
      // Optimisation: if last call for heat a long time ago then listen for ~3m (>> TX cycle) from each 4m to reduce self-heating and energy consumption.
      const bool longSilence = (boilerNoCallM > RX_REDUCE_MIN_M);
    3992:	80 91 bd 01 	lds	r24, 0x01BD
      if(longSilence)
    3996:	80 31       	cpi	r24, 0x10	; 16
    3998:	08 f4       	brcc	.+2      	; 0x399c <loop+0xec>
    399a:	73 c1       	rjmp	.+742    	; 0x3c82 <loop+0x3d2>
        {
        // Avoid listening (with warm radio) in measurement/quiet minute.
        // Skip the preceeding minute also in very quiet mode.  (Should still catch at least one TX per 4 minutes at worst.)
        needsToEavesdrop = (!minute0From4ForSensors) &&
            ((boilerNoCallM <= RX_REDUCE_MAX_M) || (3 != (minuteCount & 3)));
    399c:	bb 20       	and	r11, r11
    399e:	49 f4       	brne	.+18     	; 0x39b2 <loop+0x102>
    39a0:	8d 33       	cpi	r24, 0x3D	; 61
    39a2:	08 f4       	brcc	.+2      	; 0x39a6 <loop+0xf6>
    39a4:	6e c1       	rjmp	.+732    	; 0x3c82 <loop+0x3d2>
    39a6:	80 91 bb 01 	lds	r24, 0x01BB
    39aa:	83 70       	andi	r24, 0x03	; 3
    39ac:	83 30       	cpi	r24, 0x03	; 3
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <loop+0x102>
    39b0:	68 c1       	rjmp	.+720    	; 0x3c82 <loop+0x3d2>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    39b2:	8e 2d       	mov	r24, r14
    39b4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    39b8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <FHT8VCallForHeatHeardGetAndClear()>
    39bc:	10 e0       	ldi	r17, 0x00	; 0
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  minimisePowerWithoutSleep(); // Must not turn off radio RX nor RX interrupts if in hub mode.
    39be:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <minimisePowerWithoutSleep()>
    39c2:	11 c0       	rjmp	.+34     	; 0x39e6 <loop+0x136>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    39c4:	11 23       	and	r17, r17
    39c6:	39 f0       	breq	.+14     	; 0x39d6 <loop+0x126>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <pollIO(bool)>
    39d4:	08 c0       	rjmp	.+16     	; 0x39e6 <loop+0x136>
#endif
#ifdef USE_MODULE_RFM22RADIOSIMPLE // Deal with radio if should be in standby state.
    // Force radio to known-low-power state from time to time (not all time to avoid unnecessary work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    39d6:	88 20       	and	r8, r8
    39d8:	11 f4       	brne	.+4      	; 0x39de <loop+0x12e>
    39da:	ee 20       	and	r14, r14
    39dc:	11 f0       	breq	.+4      	; 0x39e2 <loop+0x132>
    39de:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep intil wake-up interrupt.
    39e2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <sleepPwrSaveWithBODDisabled()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  minimisePowerWithoutSleep(); // Must not turn off radio RX nor RX interrupts if in hub mode.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    39e6:	90 91 a5 01 	lds	r25, 0x01A5
    39ea:	80 91 ba 01 	lds	r24, 0x01BA
    39ee:	89 17       	cp	r24, r25
    39f0:	49 f3       	breq	.-46     	; 0x39c4 <loop+0x114>
    // Force radio to known-low-power state from time to time (not all time to avoid unnecessary work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep intil wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    39f2:	90 93 ba 01 	sts	0x01BA, r25


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(!conserveBattery); // Time for extra TX before UI.
    39f6:	0e 94 43 08 	call	0x1086	; 0x1086 <FHT8VGetHC1()>
    39fa:	84 36       	cpi	r24, 0x64	; 100
    39fc:	68 f4       	brcc	.+26     	; 0x3a18 <loop+0x168>
    39fe:	0e 94 4c 08 	call	0x1098	; 0x1098 <FHT8VGetHC2()>
    3a02:	84 36       	cpi	r24, 0x64	; 100
    3a04:	48 f4       	brcc	.+18     	; 0x3a18 <loop+0x168>
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	8a 25       	eor	r24, r10
    3a0a:	0e 94 df 0b 	call	0x17be	; 0x17be <FHT8VPollSyncAndTX_First(bool)>
    3a0e:	88 23       	and	r24, r24
    3a10:	19 f0       	breq	.+6      	; 0x3a18 <loop+0x168>
    3a12:	dd 24       	eor	r13, r13
    3a14:	d3 94       	inc	r13
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <loop+0x16a>
    3a18:	dd 24       	eor	r13, r13
  // Show status if the user changed something significant.
  // Must take ~300ms or less so as not to run over into next half second if two TXs are done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    { if(tickUI(TIME_LSD)) { showStatus = true; } }
    3a1a:	80 91 ba 01 	lds	r24, 0x01BA
    3a1e:	0e 94 98 1b 	call	0x3730	; 0x3730 <tickUI(unsigned char)>
    3a22:	78 2e       	mov	r7, r24


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    3a24:	dd 20       	and	r13, r13
    3a26:	79 f0       	breq	.+30     	; 0x3a46 <loop+0x196>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3a28:	0e 94 43 08 	call	0x1086	; 0x1086 <FHT8VGetHC1()>
    3a2c:	84 36       	cpi	r24, 0x64	; 100
    3a2e:	50 f4       	brcc	.+20     	; 0x3a44 <loop+0x194>
    3a30:	0e 94 4c 08 	call	0x1098	; 0x1098 <FHT8VGetHC2()>
    3a34:	84 36       	cpi	r24, 0x64	; 100
    3a36:	30 f4       	brcc	.+12     	; 0x3a44 <loop+0x194>
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	8a 25       	eor	r24, r10
    3a3c:	0e 94 1d 0c 	call	0x183a	; 0x183a <FHT8VPollSyncAndTX_Next(bool)>
    3a40:	88 23       	and	r24, r24
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <loop+0x196>
    3a44:	dd 24       	eor	r13, r13
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors; // DHD20130522: Arduino IDE 1.0.3 / gcc generates poor code here...
    3a46:	99 24       	eor	r9, r9
    3a48:	93 94       	inc	r9
    3a4a:	9a 24       	eor	r9, r10
    3a4c:	11 f0       	breq	.+4      	; 0x3a52 <loop+0x1a2>
    3a4e:	11 e0       	ldi	r17, 0x01	; 1
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <loop+0x1a4>
    3a52:	1b 2d       	mov	r17, r11

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    3a54:	80 91 ba 01 	lds	r24, 0x01BA
    3a58:	88 30       	cpi	r24, 0x08	; 8
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <loop+0x1ae>
    3a5c:	42 c0       	rjmp	.+132    	; 0x3ae2 <loop+0x232>
    3a5e:	89 30       	cpi	r24, 0x09	; 9
    3a60:	38 f4       	brcc	.+14     	; 0x3a70 <loop+0x1c0>
    3a62:	82 30       	cpi	r24, 0x02	; 2
    3a64:	f9 f0       	breq	.+62     	; 0x3aa4 <loop+0x1f4>
    3a66:	84 30       	cpi	r24, 0x04	; 4
    3a68:	b1 f1       	breq	.+108    	; 0x3ad6 <loop+0x226>
    3a6a:	88 23       	and	r24, r24
    3a6c:	89 f0       	breq	.+34     	; 0x3a90 <loop+0x1e0>
    3a6e:	ba c0       	rjmp	.+372    	; 0x3be4 <loop+0x334>
    3a70:	86 33       	cpi	r24, 0x36	; 54
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <loop+0x1c6>
    3a74:	56 c0       	rjmp	.+172    	; 0x3b22 <loop+0x272>
    3a76:	87 33       	cpi	r24, 0x37	; 55
    3a78:	20 f4       	brcc	.+8      	; 0x3a82 <loop+0x1d2>
    3a7a:	84 33       	cpi	r24, 0x34	; 52
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <loop+0x1d0>
    3a7e:	b2 c0       	rjmp	.+356    	; 0x3be4 <loop+0x334>
    3a80:	4a c0       	rjmp	.+148    	; 0x3b16 <loop+0x266>
    3a82:	88 33       	cpi	r24, 0x38	; 56
    3a84:	09 f4       	brne	.+2      	; 0x3a88 <loop+0x1d8>
    3a86:	56 c0       	rjmp	.+172    	; 0x3b34 <loop+0x284>
    3a88:	8a 33       	cpi	r24, 0x3A	; 58
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <loop+0x1de>
    3a8c:	ab c0       	rjmp	.+342    	; 0x3be4 <loop+0x334>
    3a8e:	93 c0       	rjmp	.+294    	; 0x3bb6 <loop+0x306>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    3a90:	80 91 bb 01 	lds	r24, 0x01BB
    3a94:	8f 5f       	subi	r24, 0xFF	; 255
    3a96:	80 93 bb 01 	sts	0x01BB, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    3a9a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <checkUserSchedule()>
      // Ensure that RTC is persisted promptly when needed.
      persistRTC();
    3a9e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <persistRTC()>
    3aa2:	a0 c0       	rjmp	.+320    	; 0x3be4 <loop+0x334>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)getBatterymV(), getSubCycleTime() ^ (uint8_t)getAmbientLight(), (uint8_t)getTemperatureC16()); } break; }
    3aa4:	11 23       	and	r17, r17
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <loop+0x1fa>
    3aa8:	9d c0       	rjmp	.+314    	; 0x3be4 <loop+0x334>
    3aaa:	06 b5       	in	r16, 0x26	; 38
    3aac:	80 91 bb 01 	lds	r24, 0x01BB
    3ab0:	08 27       	eor	r16, r24
    3ab2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <getBatterymV()>
    3ab6:	e8 2e       	mov	r14, r24
    3ab8:	10 91 b2 00 	lds	r17, 0x00B2
    3abc:	0e 94 de 03 	call	0x7bc	; 0x7bc <getAmbientLight()>
    3ac0:	f8 2e       	mov	r15, r24
    3ac2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <getTemperatureC16()>
    3ac6:	48 2f       	mov	r20, r24
    3ac8:	1f 25       	eor	r17, r15
    3aca:	80 2f       	mov	r24, r16
    3acc:	8e 25       	eor	r24, r14
    3ace:	61 2f       	mov	r22, r17
    3ad0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3ad4:	87 c0       	rjmp	.+270    	; 0x3be4 <loop+0x334>
    // Monitor battery voltage; measure and recompute status less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { readBatterymV(); } break; }
    3ad6:	11 23       	and	r17, r17
    3ad8:	09 f4       	brne	.+2      	; 0x3adc <loop+0x22c>
    3ada:	84 c0       	rjmp	.+264    	; 0x3be4 <loop+0x334>
    3adc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <readBatterymV()>
    3ae0:	81 c0       	rjmp	.+258    	; 0x3be4 <loop+0x334>
    // Re-transmit slot for additional comms with boiler hub, eg when valve wide open, to help ensure reliable/fast call for heat.
    // This is entirely optional, and just improves odds of an urgent  call for heat being acted on quickly.
    case 8:
      {
#if defined(USE_MODULE_FHT8VSIMPLE)
      if((!hubMode) && // Hub doesn't need to send extra TXes to itself!
    3ae2:	cc 20       	and	r12, r12
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <loop+0x238>
    3ae6:	7e c0       	rjmp	.+252    	; 0x3be4 <loop+0x334>
    3ae8:	88 20       	and	r8, r8
    3aea:	09 f0       	breq	.+2      	; 0x3aee <loop+0x23e>
    3aec:	7b c0       	rjmp	.+246    	; 0x3be4 <loop+0x334>
    3aee:	dd 20       	and	r13, r13
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <loop+0x244>
    3af2:	78 c0       	rjmp	.+240    	; 0x3be4 <loop+0x334>
    3af4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <inWarmMode()>
    3af8:	88 23       	and	r24, r24
    3afa:	09 f4       	brne	.+2      	; 0x3afe <loop+0x24e>
    3afc:	83 c0       	rjmp	.+262    	; 0x3c04 <loop+0x354>
    3afe:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    3b02:	82 33       	cpi	r24, 0x32	; 50
    3b04:	08 f4       	brcc	.+2      	; 0x3b08 <loop+0x258>
    3b06:	7e c0       	rjmp	.+252    	; 0x3c04 <loop+0x354>
         (!batteryLow) && // Don't send if battery is low.
         (!useExtraFHT8VTXSlots) && // Don't send if there's an immediately pending TX.
         inWarmMode() && // Only do extra TX if still in a warming mode, ie cancel it if mode just changed to FROST.
         ((getTRVPercentOpen() >= 50) /* || inBakeModeDebounced() */ )) // Valve is wide open, eg for BAKE or because boiler not hearing us reliably.
          {
          FHT8VDoSafeExtraTXToHub();
    3b08:	0e 94 91 0a 	call	0x1522	; 0x1522 <FHT8VDoSafeExtraTXToHub()>
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINTLN_FLASHSTRING("Extra TX");
    3b0c:	83 e1       	ldi	r24, 0x13	; 19
    3b0e:	94 e0       	ldi	r25, 0x04	; 4
    3b10:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    3b14:	77 c0       	rjmp	.+238    	; 0x3c04 <loop+0x354>
      break;
      }

    // Read all environmental inputs, late in the cycle.
    // Sample ambient light levels.
    case 52: { if(runAll) { readAmbientLight(); } break; }
    3b16:	11 23       	and	r17, r17
    3b18:	09 f4       	brne	.+2      	; 0x3b1c <loop+0x26c>
    3b1a:	64 c0       	rjmp	.+200    	; 0x3be4 <loop+0x334>
    3b1c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <readAmbientLight()>
    3b20:	61 c0       	rjmp	.+194    	; 0x3be4 <loop+0x334>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { readTemperatureC16(); } break; }
    3b22:	cc 20       	and	r12, r12
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <loop+0x278>
    3b26:	b1 2e       	mov	r11, r17
    3b28:	bb 20       	and	r11, r11
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <loop+0x27e>
    3b2c:	5b c0       	rjmp	.+182    	; 0x3be4 <loop+0x334>
    3b2e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <readTemperatureC16()>
    3b32:	58 c0       	rjmp	.+176    	; 0x3be4 <loop+0x334>
    // Compute targets and heat demand based on environmental inputs.
    // Note: ensure that valve-shut message is always conveyed quickly to valve even in slow/'conserve' mode.
    // Also drives OUT_HEATCALL to control local boiler if in central hub mode.
    case 56:
      {
      if(computeTargetAndDemand()) // Should be called each minute to work correctly.
    3b34:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <computeTargetAndDemand()>
    3b38:	88 23       	and	r24, r24
    3b3a:	51 f0       	breq	.+20     	; 0x3b50 <loop+0x2a0>
        {
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    3b3c:	0e 94 43 08 	call	0x1086	; 0x1086 <FHT8VGetHC1()>
    3b40:	84 36       	cpi	r24, 0x64	; 100
    3b42:	30 f4       	brcc	.+12     	; 0x3b50 <loop+0x2a0>
    3b44:	0e 94 4c 08 	call	0x1098	; 0x1098 <FHT8VGetHC2()>
    3b48:	84 36       	cpi	r24, 0x64	; 100
    3b4a:	10 f4       	brcc	.+4      	; 0x3b50 <loop+0x2a0>
    3b4c:	0e 94 32 0a 	call	0x1464	; 0x1464 <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode && (boilerCountdownM == 0) && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }
    3b50:	cc 20       	and	r12, r12
    3b52:	59 f0       	breq	.+22     	; 0x3b6a <loop+0x2ba>
    3b54:	80 91 bc 01 	lds	r24, 0x01BC
    3b58:	88 23       	and	r24, r24
    3b5a:	39 f4       	brne	.+14     	; 0x3b6a <loop+0x2ba>
    3b5c:	80 91 bd 01 	lds	r24, 0x01BD
    3b60:	8f 3f       	cpi	r24, 0xFF	; 255
    3b62:	19 f0       	breq	.+6      	; 0x3b6a <loop+0x2ba>
    3b64:	8f 5f       	subi	r24, 0xFF	; 255
    3b66:	80 93 bd 01 	sts	0x01BD, r24

      // If remote calls for heat from local boiler are (still) active then fire up the boiler.
      if(hubMode && (boilerCountdownM > 0))
    3b6a:	cc 20       	and	r12, r12
    3b6c:	c1 f0       	breq	.+48     	; 0x3b9e <loop+0x2ee>
    3b6e:	80 91 bc 01 	lds	r24, 0x01BC
    3b72:	88 23       	and	r24, r24
    3b74:	a1 f0       	breq	.+40     	; 0x3b9e <loop+0x2ee>
        {
        fastDigitalWrite(OUT_HEATCALL, HIGH);
    3b76:	5e 9a       	sbi	0x0b, 6	; 11
#if 1 && defined(DEBUG)
        DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, mins left: ");
    3b78:	8c ef       	ldi	r24, 0xFC	; 252
    3b7a:	93 e0       	ldi	r25, 0x03	; 3
    3b7c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
        DEBUG_SERIAL_PRINT(boilerCountdownM);
    3b80:	80 91 bc 01 	lds	r24, 0x01BC
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	6a e0       	ldi	r22, 0x0A	; 10
    3b88:	70 e0       	ldi	r23, 0x00	; 0
    3b8a:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
        DEBUG_SERIAL_PRINTLN();
    3b8e:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
#else
        serialPrintlnAndFlush(F("Boiler on"));
#endif
        --boilerCountdownM;
    3b92:	80 91 bc 01 	lds	r24, 0x01BC
    3b96:	81 50       	subi	r24, 0x01	; 1
    3b98:	80 93 bc 01 	sts	0x01BC, r24
    3b9c:	07 c0       	rjmp	.+14     	; 0x3bac <loop+0x2fc>
        }
      else
#endif
        if(0 != getTRVPercentOpen()) // Local call for heat given local TRV is at least partly open/on.  (TODO: modulating!)
    3b9e:	0e 94 04 04 	call	0x808	; 0x808 <getTRVPercentOpen()>
    3ba2:	88 23       	and	r24, r24
    3ba4:	11 f0       	breq	.+4      	; 0x3baa <loop+0x2fa>
          { fastDigitalWrite(OUT_HEATCALL, HIGH); }
    3ba6:	5e 9a       	sbi	0x0b, 6	; 11
    3ba8:	01 c0       	rjmp	.+2      	; 0x3bac <loop+0x2fc>
      else // Stop calling for heat from the boiler.
          { fastDigitalWrite(OUT_HEATCALL, LOW); }
    3baa:	5e 98       	cbi	0x0b, 6	; 11

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    3bac:	11 23       	and	r17, r17
    3bae:	d1 f0       	breq	.+52     	; 0x3be4 <loop+0x334>
    3bb0:	77 24       	eor	r7, r7
    3bb2:	73 94       	inc	r7
    3bb4:	17 c0       	rjmp	.+46     	; 0x3be4 <loop+0x334>
    // Stats samples; should never be missed.
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      if(minute0From4ForSensors) // Hope to take lowest-noise samples on the special minute out of each 4.
    3bb6:	bb 20       	and	r11, r11
    3bb8:	a9 f0       	breq	.+42     	; 0x3be4 <loop+0x334>
        {
        const uint_least8_t mm = getMinutesLT();
    3bba:	0e 94 f6 12 	call	0x25ec	; 0x25ec <getMinutesLT()>
        switch(mm)
    3bbe:	88 32       	cpi	r24, 0x28	; 40
    3bc0:	30 f4       	brcc	.+12     	; 0x3bce <loop+0x31e>
    3bc2:	84 32       	cpi	r24, 0x24	; 36
    3bc4:	40 f4       	brcc	.+16     	; 0x3bd6 <loop+0x326>
    3bc6:	80 51       	subi	r24, 0x10	; 16
    3bc8:	84 30       	cpi	r24, 0x04	; 4
    3bca:	60 f4       	brcc	.+24     	; 0x3be4 <loop+0x334>
    3bcc:	04 c0       	rjmp	.+8      	; 0x3bd6 <loop+0x326>
    3bce:	88 53       	subi	r24, 0x38	; 56
    3bd0:	84 30       	cpi	r24, 0x04	; 4
    3bd2:	40 f4       	brcc	.+16     	; 0x3be4 <loop+0x334>
    3bd4:	04 c0       	rjmp	.+8      	; 0x3bde <loop+0x32e>
          {
          case 16: case 17: case 18: case 19:
          case 36: case 37: case 38: case 39:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of juice.
    3bd6:	88 20       	and	r8, r8
    3bd8:	29 f4       	brne	.+10     	; 0x3be4 <loop+0x334>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <loop+0x330>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at end of hour.
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3be4:	dd 20       	and	r13, r13
    3be6:	71 f0       	breq	.+28     	; 0x3c04 <loop+0x354>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3be8:	0e 94 43 08 	call	0x1086	; 0x1086 <FHT8VGetHC1()>
    3bec:	84 36       	cpi	r24, 0x64	; 100
    3bee:	48 f4       	brcc	.+18     	; 0x3c02 <loop+0x352>
    3bf0:	0e 94 4c 08 	call	0x1098	; 0x1098 <FHT8VGetHC2()>
    3bf4:	84 36       	cpi	r24, 0x64	; 100
    3bf6:	28 f4       	brcc	.+10     	; 0x3c02 <loop+0x352>
    3bf8:	89 2d       	mov	r24, r9
    3bfa:	0e 94 1d 0c 	call	0x183a	; 0x183a <FHT8VPollSyncAndTX_Next(bool)>
    3bfe:	88 23       	and	r24, r24
    3c00:	09 f4       	brne	.+2      	; 0x3c04 <loop+0x354>
    3c02:	dd 24       	eor	r13, r13
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    3c04:	77 20       	and	r7, r7
    3c06:	11 f0       	breq	.+4      	; 0x3c0c <loop+0x35c>
    3c08:	0e 94 04 17 	call	0x2e08	; 0x2e08 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3c0c:	dd 20       	and	r13, r13
    3c0e:	59 f0       	breq	.+22     	; 0x3c26 <loop+0x376>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3c10:	0e 94 43 08 	call	0x1086	; 0x1086 <FHT8VGetHC1()>
    3c14:	84 36       	cpi	r24, 0x64	; 100
    3c16:	38 f4       	brcc	.+14     	; 0x3c26 <loop+0x376>
    3c18:	0e 94 4c 08 	call	0x1098	; 0x1098 <FHT8VGetHC2()>
    3c1c:	84 36       	cpi	r24, 0x64	; 100
    3c1e:	18 f4       	brcc	.+6      	; 0x3c26 <loop+0x376>
    3c20:	89 2d       	mov	r24, r9
    3c22:	0e 94 1d 0c 	call	0x183a	; 0x183a <FHT8VPollSyncAndTX_Next(bool)>
  // then poll/prompt the user for input
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
  // TODO: be clever and if getSubCycleTime() has gone backwards then assume end tick has been missed and return from loop() without sleeping.
#if defined(SUPPORT_CLI)
  if(showStatus || isCLIActive())
    3c26:	77 20       	and	r7, r7
    3c28:	21 f4       	brne	.+8      	; 0x3c32 <loop+0x382>
    3c2a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <isCLIActive()>
    3c2e:	88 23       	and	r24, r24
    3c30:	b9 f0       	breq	.+46     	; 0x3c60 <loop+0x3b0>
    {
    const uint8_t sct = getSubCycleTime();
    3c32:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct < (GSCT_MAX-(GSCT_MAX/8)))
    3c36:	80 3e       	cpi	r24, 0xE0	; 224
    3c38:	98 f4       	brcc	.+38     	; 0x3c60 <loop+0x3b0>
      // Don't listen longer than ~500ms or beyond the last 16th of the cycle,
      // as listening for UART RX uses lots of power.
      { pollCLI((uint8_t)fnmin(GSCT_MAX-(GSCT_MAX/16), sct+(int)(SUB_CYCLE_TICKS_PER_S/2))); }
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	80 5c       	subi	r24, 0xC0	; 192
    3c3e:	9f 4f       	sbci	r25, 0xFF	; 255
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic();


// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    3c40:	80 3f       	cpi	r24, 0xF0	; 240
    3c42:	91 05       	cpc	r25, r1
    3c44:	14 f4       	brge	.+4      	; 0x3c4a <loop+0x39a>
    3c46:	9c 01       	movw	r18, r24
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <loop+0x39e>
    3c4a:	20 ef       	ldi	r18, 0xF0	; 240
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	9c 83       	std	Y+4, r25	; 0x04
    3c50:	8b 83       	std	Y+3, r24	; 0x03
    3c52:	80 ef       	ldi	r24, 0xF0	; 240
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	9a 83       	std	Y+2, r25	; 0x02
    3c58:	89 83       	std	Y+1, r24	; 0x01
    3c5a:	82 2f       	mov	r24, r18
    3c5c:	0e 94 82 18 	call	0x3104	; 0x3104 <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    3c60:	90 91 a5 01 	lds	r25, 0x01A5
    3c64:	80 91 ba 01 	lds	r24, 0x01BA
    3c68:	89 17       	cp	r24, r25
    3c6a:	81 f0       	breq	.+32     	; 0x3c8c <loop+0x3dc>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("ERROR: loop() overrun!");
    3c6c:	85 ee       	ldi	r24, 0xE5	; 229
    3c6e:	93 e0       	ldi	r25, 0x03	; 3
    3c70:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    3c74:	0e 94 61 08 	call	0x10c2	; 0x10c2 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    3c78:	80 91 a5 01 	lds	r24, 0x01A5
    3c7c:	80 93 ba 01 	sts	0x01BA, r24
    3c80:	05 c0       	rjmp	.+10     	; 0x3c8c <loop+0x3dc>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    3c82:	8e 2d       	mov	r24, r14
    3c84:	0e 94 8c 08 	call	0x1118	; 0x1118 <SetupToEavesdropOnFHT8V(bool)>
    3c88:	11 e0       	ldi	r17, 0x01	; 1
    3c8a:	99 ce       	rjmp	.-718    	; 0x39be <loop+0x10e>
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    }
  }
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	1f 91       	pop	r17
    3c9a:	0f 91       	pop	r16
    3c9c:	ff 90       	pop	r15
    3c9e:	ef 90       	pop	r14
    3ca0:	df 90       	pop	r13
    3ca2:	cf 90       	pop	r12
    3ca4:	bf 90       	pop	r11
    3ca6:	af 90       	pop	r10
    3ca8:	9f 90       	pop	r9
    3caa:	8f 90       	pop	r8
    3cac:	7f 90       	pop	r7
    3cae:	08 95       	ret

00003cb0 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    3cb0:	ff 92       	push	r15
    3cb2:	0f 93       	push	r16
    3cb4:	1f 93       	push	r17
    3cb6:	cf 93       	push	r28
    3cb8:	df 93       	push	r29
    3cba:	f8 2e       	mov	r15, r24
    3cbc:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    3cbe:	83 e8       	ldi	r24, 0x83	; 131
    3cc0:	9e e1       	ldi	r25, 0x1E	; 30
    3cc2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    3cc6:	82 ec       	ldi	r24, 0xC2	; 194
    3cc8:	95 e0       	ldi	r25, 0x05	; 5
    3cca:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    3cce:	cf 2d       	mov	r28, r15
    3cd0:	d0 e0       	ldi	r29, 0x00	; 0
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	6a e0       	ldi	r22, 0x0A	; 10
    3cd6:	70 e0       	ldi	r23, 0x00	; 0
    3cd8:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    3cdc:	8f eb       	ldi	r24, 0xBF	; 191
    3cde:	95 e0       	ldi	r25, 0x05	; 5
    3ce0:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    3ce4:	c8 01       	movw	r24, r16
    3ce6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    3cea:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
  pinMode(LED_HEATCALL, OUTPUT);
    3cee:	8d e0       	ldi	r24, 0x0D	; 13
    3cf0:	61 e0       	ldi	r22, 0x01	; 1
    3cf2:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  fastDigitalWrite(LED_HEATCALL, LOW);
    3cf6:	2d 98       	cbi	0x05, 5	; 5
  sleepLowPowerMs(2*PP_OFF_MS);
    3cf8:	80 e4       	ldi	r24, 0x40	; 64
    3cfa:	9f e0       	ldi	r25, 0x0F	; 15
    3cfc:	07 c0       	rjmp	.+14     	; 0x3d0c <posPOST(unsigned char, __FlashStringHelper const*)+0x5c>
  
  int i = position;
  while(--i >= 0)
    {
    fastDigitalWrite(LED_HEATCALL, HIGH);
    3cfe:	2d 9a       	sbi	0x05, 5	; 5
void burnHundredsOfCyclesProductivelyAndPoll();


// Use WDT-based timer for xxxPause() routines.
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    tinyPause();
    fastDigitalWrite(LED_HEATCALL, LOW);
    3d06:	2d 98       	cbi	0x05, 5	; 5
    sleepLowPowerMs(PP_OFF_MS);
    3d08:	8f e9       	ldi	r24, 0x9F	; 159
    3d0a:	97 e0       	ldi	r25, 0x07	; 7
    3d0c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  pinMode(LED_HEATCALL, OUTPUT);
  fastDigitalWrite(LED_HEATCALL, LOW);
  sleepLowPowerMs(2*PP_OFF_MS);
  
  int i = position;
  while(--i >= 0)
    3d10:	21 97       	sbiw	r28, 0x01	; 1
    3d12:	8f ef       	ldi	r24, 0xFF	; 255
    3d14:	cf 3f       	cpi	r28, 0xFF	; 255
    3d16:	d8 07       	cpc	r29, r24
    3d18:	91 f7       	brne	.-28     	; 0x3cfe <posPOST(unsigned char, __FlashStringHelper const*)+0x4e>
    tinyPause();
    fastDigitalWrite(LED_HEATCALL, LOW);
    sleepLowPowerMs(PP_OFF_MS);
    }

  sleepLowPowerMs(PP_OFF_MS);
    3d1a:	8f e9       	ldi	r24, 0x9F	; 159
    3d1c:	97 e0       	ldi	r25, 0x07	; 7
    3d1e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  fastDigitalWrite(LED_HEATCALL, HIGH);
    3d22:	2d 9a       	sbi	0x05, 5	; 5
  sleepLowPowerMs(1000);
    3d24:	83 e8       	ldi	r24, 0x83	; 131
    3d26:	9e e1       	ldi	r25, 0x1E	; 30
    3d28:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	ff 90       	pop	r15
    3d36:	08 95       	ret

00003d38 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    3d38:	0e 94 b6 11 	call	0x236c	; 0x236c <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    3d3c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <minimisePowerWithoutSleep()>
  pinMode(LED_HEATCALL, OUTPUT);
    3d40:	8d e0       	ldi	r24, 0x0D	; 13
    3d42:	61 e0       	ldi	r22, 0x01	; 1
    3d44:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  for( ; ; )
    {
    fastDigitalWrite(LED_HEATCALL, HIGH);
    3d48:	2d 9a       	sbi	0x05, 5	; 5
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    tinyPause();
    fastDigitalWrite(LED_HEATCALL, LOW);
    3d50:	2d 98       	cbi	0x05, 5	; 5
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    3d52:	83 e0       	ldi	r24, 0x03	; 3
    3d54:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <nap(signed char)>
    3d58:	f7 cf       	rjmp	.-18     	; 0x3d48 <panic()+0x10>

00003d5a <setup>:
  sleepLowPowerMs(1000);
  }

// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    3d5a:	2f 92       	push	r2
    3d5c:	3f 92       	push	r3
    3d5e:	4f 92       	push	r4
    3d60:	5f 92       	push	r5
    3d62:	6f 92       	push	r6
    3d64:	7f 92       	push	r7
    3d66:	8f 92       	push	r8
    3d68:	9f 92       	push	r9
    3d6a:	af 92       	push	r10
    3d6c:	bf 92       	push	r11
    3d6e:	cf 92       	push	r12
    3d70:	df 92       	push	r13
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	0f 93       	push	r16
    3d78:	1f 93       	push	r17
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <setup+0x26>
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
//  // Attempt to capture reason for reset/(re)start.
//  const uint8_t mcusr = MCUSR;
//  MCUSR = 0;

  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    3d84:	0e 94 2c 10 	call	0x2058	; 0x2058 <powerSetup()>

  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    3d88:	e0 90 b2 00 	lds	r14, 0x00B2
    3d8c:	0e e0       	ldi	r16, 0x0E	; 14
    3d8e:	10 e0       	ldi	r17, 0x00	; 0
    3d90:	30 c0       	rjmp	.+96     	; 0x3df2 <setup+0x98>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    3d92:	08 30       	cpi	r16, 0x08	; 8
    3d94:	11 05       	cpc	r17, r1
    3d96:	29 f1       	breq	.+74     	; 0x3de2 <setup+0x88>
    3d98:	09 30       	cpi	r16, 0x09	; 9
    3d9a:	11 05       	cpc	r17, r1
    3d9c:	4c f4       	brge	.+18     	; 0x3db0 <setup+0x56>
    3d9e:	17 fd       	sbrc	r17, 7
    3da0:	10 c0       	rjmp	.+32     	; 0x3dc2 <setup+0x68>
    3da2:	02 30       	cpi	r16, 0x02	; 2
    3da4:	11 05       	cpc	r17, r1
    3da6:	ec f0       	brlt	.+58     	; 0x3de2 <setup+0x88>
    3da8:	05 30       	cpi	r16, 0x05	; 5
    3daa:	11 05       	cpc	r17, r1
    3dac:	51 f4       	brne	.+20     	; 0x3dc2 <setup+0x68>
    3dae:	19 c0       	rjmp	.+50     	; 0x3de2 <setup+0x88>
    3db0:	0c 30       	cpi	r16, 0x0C	; 12
    3db2:	11 05       	cpc	r17, r1
    3db4:	d1 f0       	breq	.+52     	; 0x3dea <setup+0x90>
    3db6:	0d 30       	cpi	r16, 0x0D	; 13
    3db8:	11 05       	cpc	r17, r1
    3dba:	51 f0       	breq	.+20     	; 0x3dd0 <setup+0x76>
    3dbc:	0a 30       	cpi	r16, 0x0A	; 10
    3dbe:	11 05       	cpc	r17, r1
    3dc0:	91 f0       	breq	.+36     	; 0x3de6 <setup+0x8c>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    3dc2:	80 2f       	mov	r24, r16
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	0e 94 2b 24 	call	0x4856	; 0x4856 <digitalWrite>
    3dca:	80 2f       	mov	r24, r16
    3dcc:	61 e0       	ldi	r22, 0x01	; 1
    3dce:	0f c0       	rjmp	.+30     	; 0x3dee <setup+0x94>
      // Weak pull-up empirically found to be lowest leakage current with TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX: { pinMode(i, INPUT_PULLUP); break; }
#endif

      // Switch main UI LED on for the rest of initialisation...
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
    3dd0:	8d e0       	ldi	r24, 0x0D	; 13
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
    3dd8:	8d e0       	ldi	r24, 0x0D	; 13
    3dda:	61 e0       	ldi	r22, 0x01	; 1
    3ddc:	0e 94 2b 24 	call	0x4856	; 0x4856 <digitalWrite>
    3de0:	08 c0       	rjmp	.+16     	; 0x3df2 <setup+0x98>

      // Make button pins inputs with internal weak pull-ups (saving an external resistor on each case).
#ifdef BUTTON_LEARN_L
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    3de2:	80 2f       	mov	r24, r16
    3de4:	03 c0       	rjmp	.+6      	; 0x3dec <setup+0x92>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    3de6:	8a e0       	ldi	r24, 0x0A	; 10
    3de8:	01 c0       	rjmp	.+2      	; 0x3dec <setup+0x92>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    3dea:	8c e0       	ldi	r24, 0x0C	; 12
    3dec:	62 e0       	ldi	r22, 0x02	; 2
    3dee:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    3df2:	01 50       	subi	r16, 0x01	; 1
    3df4:	10 40       	sbci	r17, 0x00	; 0
    3df6:	17 ff       	sbrs	r17, 7
    3df8:	cc cf       	rjmp	.-104    	; 0x3d92 <setup+0x38>

  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    3dfa:	0e 94 0f 13 	call	0x261e	; 0x261e <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintlnAndFlush(F("\r\nOpenTRV built " __DATE__ " " __TIME__ " booting..."));
    3dfe:	8f e8       	ldi	r24, 0x8F	; 143
    3e00:	95 e0       	ldi	r25, 0x05	; 5
    3e02:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#ifdef V0p2_REV
  serialPrintAndFlush(F("Board V0.2, REV"));
    3e06:	8f e7       	ldi	r24, 0x7F	; 127
    3e08:	95 e0       	ldi	r25, 0x05	; 5
    3e0a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	6a e0       	ldi	r22, 0x0A	; 10
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  serialPrintlnAndFlush();
    3e1a:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3e1e:	f9 99       	sbic	0x1f, 1	; 31
    3e20:	fe cf       	rjmp	.-4      	; 0x3e1e <setup+0xc4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3e22:	86 e0       	ldi	r24, 0x06	; 6
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	92 bd       	out	0x22, r25	; 34
    3e28:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3e2a:	f8 9a       	sbi	0x1f, 0	; 31
    3e2c:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3e2e:	f9 99       	sbic	0x1f, 1	; 31
    3e30:	fe cf       	rjmp	.-4      	; 0x3e2e <setup+0xd4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3e32:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3e34:	86 e0       	ldi	r24, 0x06	; 6
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	92 bd       	out	0x22, r25	; 34
    3e3a:	81 bd       	out	0x21, r24	; 33
#endif

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    3e3c:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    3e3e:	10 bd       	out	0x20, r17	; 32
    3e40:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	f8 94       	cli
    3e46:	fa 9a       	sbi	0x1f, 2	; 31
    3e48:	f9 9a       	sbi	0x1f, 1	; 31
    3e4a:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN();
    3e4c:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    3e50:	80 e6       	ldi	r24, 0x60	; 96
    3e52:	95 e0       	ldi	r25, 0x05	; 5
    3e54:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Reset count: ");
    3e58:	82 e5       	ldi	r24, 0x52	; 82
    3e5a:	95 e0       	ldi	r25, 0x05	; 5
    3e5c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    3e60:	81 2f       	mov	r24, r17
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	6a e0       	ldi	r22, 0x0A	; 10
    3e66:	70 e0       	ldi	r23, 0x00	; 0
    3e68:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3e6c:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
//  DEBUG_SERIAL_PRINT_FLASHSTRING("MCUSR: "); // bits: 3 WDRF, 2 BORF, 1 EXTRF, 0 PORF.
//  DEBUG_SERIAL_PRINTFMT(mcusr, HEX);
//  DEBUG_SERIAL_PRINTLN();
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    3e70:	87 e4       	ldi	r24, 0x47	; 71
    3e72:	95 e0       	ldi	r25, 0x05	; 5
    3e74:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    3e78:	80 91 32 03 	lds	r24, 0x0332
    3e7c:	90 91 33 03 	lds	r25, 0x0333
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	11 f0       	breq	.+4      	; 0x3e88 <setup+0x12e>
    3e84:	9c 01       	movw	r18, r24
    3e86:	02 c0       	rjmp	.+4      	; 0x3e8c <setup+0x132>
    3e88:	26 e3       	ldi	r18, 0x36	; 54
    3e8a:	33 e0       	ldi	r19, 0x03	; 3
    3e8c:	ce 01       	movw	r24, r28
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	82 1b       	sub	r24, r18
    3e92:	93 0b       	sbc	r25, r19
    3e94:	6a e0       	ldi	r22, 0x0A	; 10
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3e9c:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
#ifdef UNIT_TESTS
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS WILL BE RUN...");
#endif
#endif

  posPOST(1, F("about to test RFM23"));
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	63 e3       	ldi	r22, 0x33	; 51
    3ea4:	75 e0       	ldi	r23, 0x05	; 5
    3ea6:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <posPOST(unsigned char, __FlashStringHelper const*)>

#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    3eaa:	0e 94 b6 11 	call	0x236c	; 0x236c <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    3eae:	0e 94 9c 12 	call	0x2538	; 0x2538 <RFM22CheckConnected()>
    3eb2:	88 23       	and	r24, r24
    3eb4:	11 f4       	brne	.+4      	; 0x3eba <setup+0x160>
    3eb6:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    3eba:	88 e6       	ldi	r24, 0x68	; 104
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0e 94 95 11 	call	0x232a	; 0x232a <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    3ec2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <RFM22ModeStandbyAndClearState()>
#endif

  posPOST(2, F("RFM23 OK"));
    3ec6:	82 e0       	ldi	r24, 0x02	; 2
    3ec8:	6a e2       	ldi	r22, 0x2A	; 42
    3eca:	75 e0       	ldi	r23, 0x05	; 5
    3ecc:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <posPOST(unsigned char, __FlashStringHelper const*)>
  // Do additional POST.
  optionalPOST();
#endif

  // Get current power supply voltage.
  const uint16_t Vcc = readBatterymV();
    3ed0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <readBatterymV()>
    3ed4:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    3ed6:	84 e2       	ldi	r24, 0x24	; 36
    3ed8:	95 e0       	ldi	r25, 0x05	; 5
    3eda:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    3ede:	c1 01       	movw	r24, r2
    3ee0:	6a e0       	ldi	r22, 0x0A	; 10
    3ee2:	70 e0       	ldi	r23, 0x00	; 0
    3ee4:	0e 94 86 14 	call	0x290c	; 0x290c <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    3ee8:	81 e2       	ldi	r24, 0x21	; 33
    3eea:	95 e0       	ldi	r25, 0x05	; 5
    3eec:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement.
  const int intTempC16 = readInternalTemperatureC16();
    3ef0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <readInternalTemperatureC16()>
    3ef4:	2c 01       	movw	r4, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    3ef6:	86 e1       	ldi	r24, 0x16	; 22
    3ef8:	95 e0       	ldi	r25, 0x05	; 5
    3efa:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    3efe:	c2 01       	movw	r24, r4
    3f00:	08 96       	adiw	r24, 0x08	; 8
    3f02:	64 e0       	ldi	r22, 0x04	; 4
    3f04:	95 95       	asr	r25
    3f06:	87 95       	ror	r24
    3f08:	6a 95       	dec	r22
    3f0a:	e1 f7       	brne	.-8      	; 0x3f04 <setup+0x1aa>
    3f0c:	6a e0       	ldi	r22, 0x0A	; 10
    3f0e:	70 e0       	ldi	r23, 0x00	; 0
    3f10:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    3f14:	81 e1       	ldi	r24, 0x11	; 17
    3f16:	95 e0       	ldi	r25, 0x05	; 5
    3f18:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    3f1c:	c2 01       	movw	r24, r4
    3f1e:	6a e0       	ldi	r22, 0x0A	; 10
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3f26:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
#endif

  posPOST(3, F("internal sensors OK, next light/temp"));
    3f2a:	83 e0       	ldi	r24, 0x03	; 3
    3f2c:	6c ee       	ldi	r22, 0xEC	; 236
    3f2e:	74 e0       	ldi	r23, 0x04	; 4
    3f30:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <posPOST(unsigned char, __FlashStringHelper const*)>

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
    3f34:	84 eb       	ldi	r24, 0xB4	; 180
    3f36:	94 e0       	ldi	r25, 0x04	; 4
    3f38:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Collect full set of environmental values before entering loop().
  // This should also help ensure that sensors are properly initialised.
  const int light = readAmbientLight();
    3f3c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <readAmbientLight()>
    3f40:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    3f42:	8c ea       	ldi	r24, 0xAC	; 172
    3f44:	94 e0       	ldi	r25, 0x04	; 4
    3f46:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    3f4a:	c3 01       	movw	r24, r6
    3f4c:	6a e0       	ldi	r22, 0x0A	; 10
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3f54:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
#endif
  const int heat = readTemperatureC16();
    3f58:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <readTemperatureC16()>
    3f5c:	5c 01       	movw	r10, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    3f5e:	85 ea       	ldi	r24, 0xA5	; 165
    3f60:	94 e0       	ldi	r25, 0x04	; 4
    3f62:	0e 94 da 14 	call	0x29b4	; 0x29b4 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    3f66:	c5 01       	movw	r24, r10
    3f68:	6a e0       	ldi	r22, 0x0A	; 10
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	0e 94 c2 14 	call	0x2984	; 0x2984 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3f70:	0e 94 b2 14 	call	0x2964	; 0x2964 <serialPrintlnAndFlush()>
#endif

  posPOST(4, F("light/temp OK"));
    3f74:	84 e0       	ldi	r24, 0x04	; 4
    3f76:	67 e9       	ldi	r22, 0x97	; 151
    3f78:	74 e0       	ldi	r23, 0x04	; 4
    3f7a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <posPOST(unsigned char, __FlashStringHelper const*)>

#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
#endif
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeTargetAndDemand();
    3f7e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <computeTargetAndDemand()>
#if defined(USE_MODULE_FHT8VSIMPLE)
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored.
  FHT8VCreateValveSetCmdFrame();
    3f82:	0e 94 32 0a 	call	0x1464	; 0x1464 <FHT8VCreateValveSetCmdFrame()>
    3f86:	e0 e0       	ldi	r30, 0x00	; 0
    3f88:	f1 e0       	ldi	r31, 0x01	; 1
    3f8a:	88 24       	eor	r8, r8
    3f8c:	8a 94       	dec	r8
    3f8e:	98 2c       	mov	r9, r8
    3f90:	81 91       	ld	r24, Z+
    3f92:	94 01       	movw	r18, r8
    3f94:	28 27       	eor	r18, r24
    3f96:	02 2e       	mov	r0, r18
    3f98:	22 95       	swap	r18
    3f9a:	20 7f       	andi	r18, 0xF0	; 240
    3f9c:	20 25       	eor	r18, r0
    3f9e:	03 2e       	mov	r0, r19
    3fa0:	32 2f       	mov	r19, r18
    3fa2:	22 95       	swap	r18
    3fa4:	2f 70       	andi	r18, 0x0F	; 15
    3fa6:	02 26       	eor	r0, r18
    3fa8:	26 95       	lsr	r18
    3faa:	32 27       	eor	r19, r18
    3fac:	23 27       	eor	r18, r19
    3fae:	22 0f       	add	r18, r18
    3fb0:	22 0f       	add	r18, r18
    3fb2:	22 0f       	add	r18, r18
    3fb4:	20 25       	eor	r18, r0
    3fb6:	49 01       	movw	r8, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    3fb8:	39 e0       	ldi	r19, 0x09	; 9
    3fba:	e0 30       	cpi	r30, 0x00	; 0
    3fbc:	f3 07       	cpc	r31, r19
    3fbe:	41 f7       	brne	.-48     	; 0x3f90 <setup+0x236>
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	cc 24       	eor	r12, r12
    3fc6:	ca 94       	dec	r12
    3fc8:	dc 2c       	mov	r13, r12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3fca:	f9 99       	sbic	0x1f, 1	; 31
    3fcc:	fe cf       	rjmp	.-4      	; 0x3fca <setup+0x270>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3fce:	32 bd       	out	0x22, r19	; 34
    3fd0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3fd2:	f8 9a       	sbi	0x1f, 0	; 31
    3fd4:	80 b5       	in	r24, 0x20	; 32
    3fd6:	a6 01       	movw	r20, r12
    3fd8:	48 27       	eor	r20, r24
    3fda:	04 2e       	mov	r0, r20
    3fdc:	42 95       	swap	r20
    3fde:	40 7f       	andi	r20, 0xF0	; 240
    3fe0:	40 25       	eor	r20, r0
    3fe2:	05 2e       	mov	r0, r21
    3fe4:	54 2f       	mov	r21, r20
    3fe6:	42 95       	swap	r20
    3fe8:	4f 70       	andi	r20, 0x0F	; 15
    3fea:	04 26       	eor	r0, r20
    3fec:	46 95       	lsr	r20
    3fee:	54 27       	eor	r21, r20
    3ff0:	45 27       	eor	r20, r21
    3ff2:	44 0f       	add	r20, r20
    3ff4:	44 0f       	add	r20, r20
    3ff6:	44 0f       	add	r20, r20
    3ff8:	40 25       	eor	r20, r0
    3ffa:	6a 01       	movw	r12, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    3ffc:	2f 5f       	subi	r18, 0xFF	; 255
    3ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    4000:	54 e0       	ldi	r21, 0x04	; 4
    4002:	20 30       	cpi	r18, 0x00	; 0
    4004:	35 07       	cpc	r19, r21
    4006:	09 f7       	brne	.-62     	; 0x3fca <setup+0x270>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Starting seed computation...");
#endif
  const uint16_t srseed = sramCRC();
  const uint16_t eeseed = eeCRC();
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    4008:	f0 90 b2 00 	lds	r15, 0x00B2
  if(laterSCT == earlySCT)
    400c:	fe 14       	cp	r15, r14
    400e:	f9 f4       	brne	.+62     	; 0x404e <setup+0x2f4>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    4010:	8a e6       	ldi	r24, 0x6A	; 106
    4012:	94 e0       	ldi	r25, 0x04	; 4
    4014:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4018:	04 e1       	ldi	r16, 0x14	; 20
    401a:	10 e0       	ldi	r17, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    401c:	01 50       	subi	r16, 0x01	; 1
    401e:	10 40       	sbci	r17, 0x00	; 0
    4020:	8f ef       	ldi	r24, 0xFF	; 255
    4022:	0f 3f       	cpi	r16, 0xFF	; 255
    4024:	18 07       	cpc	r17, r24
    4026:	09 f4       	brne	.+2      	; 0x402a <setup+0x2d0>
    4028:	84 c0       	rjmp	.+264    	; 0x4132 <setup+0x3d8>
    402a:	80 91 b2 00 	lds	r24, 0x00B2
    402e:	f8 16       	cp	r15, r24
    4030:	09 f0       	breq	.+2      	; 0x4034 <setup+0x2da>
    4032:	7f c0       	rjmp	.+254    	; 0x4132 <setup+0x3d8>
      {
      sleepLowPowerMs(691);
    4034:	84 e1       	ldi	r24, 0x14	; 20
    4036:	95 e1       	ldi	r25, 0x15	; 21
    4038:	0e 94 cb 0c 	call	0x1996	; 0x1996 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      captureEntropy1();
    403c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <captureEntropy1()>
    4040:	ed cf       	rjmp	.-38     	; 0x401c <setup+0x2c2>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    4042:	82 e4       	ldi	r24, 0x42	; 66
    4044:	94 e0       	ldi	r25, 0x04	; 4
    4046:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(); // Async clock not running.
    404a:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <panic()>
      }
    }
  posPOST(5, F("slow RTC clock OK"));
    404e:	85 e0       	ldi	r24, 0x05	; 5
    4050:	60 e3       	ldi	r22, 0x30	; 48
    4052:	74 e0       	ldi	r23, 0x04	; 4
    4054:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <posPOST(unsigned char, __FlashStringHelper const*)>
  // DHD20130430: maybe as much as 16 bits of entropy on each reset in seed1, concentrated in the least-significant bits.
  const uint16_t s16 = (__DATE__[5]) ^ ((getMinutesSinceMidnightLT() << 5) ^ (((int)getSubCycleTime()) << 7) ^ (heat << 2) ^ (light << 6) ^ Vcc ^ intTempC16); /* This fits in an int (16 bits). */
    4058:	0e 94 ed 12 	call	0x25da	; 0x25da <getMinutesSinceMidnightLT()>
    405c:	00 91 b2 00 	lds	r16, 0x00B2
    4060:	10 e0       	ldi	r17, 0x00	; 0
    4062:	16 95       	lsr	r17
    4064:	10 2f       	mov	r17, r16
    4066:	00 27       	eor	r16, r16
    4068:	17 95       	ror	r17
    406a:	07 95       	ror	r16
    406c:	09 63       	ori	r16, 0x39	; 57
    406e:	02 25       	eor	r16, r2
    4070:	13 25       	eor	r17, r3
    4072:	04 25       	eor	r16, r4
    4074:	15 25       	eor	r17, r5
    4076:	aa 0c       	add	r10, r10
    4078:	bb 1c       	adc	r11, r11
    407a:	aa 0c       	add	r10, r10
    407c:	bb 1c       	adc	r11, r11
    407e:	0a 25       	eor	r16, r10
    4080:	1b 25       	eor	r17, r11
    4082:	36 e0       	ldi	r19, 0x06	; 6
    4084:	66 0c       	add	r6, r6
    4086:	77 1c       	adc	r7, r7
    4088:	3a 95       	dec	r19
    408a:	e1 f7       	brne	.-8      	; 0x4084 <setup+0x32a>
    408c:	06 25       	eor	r16, r6
    408e:	17 25       	eor	r17, r7
    4090:	25 e0       	ldi	r18, 0x05	; 5
    4092:	88 0f       	add	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	2a 95       	dec	r18
    4098:	e1 f7       	brne	.-8      	; 0x4092 <setup+0x338>
    409a:	08 27       	eor	r16, r24
    409c:	19 27       	eor	r17, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  seedRNG8((uint8_t) s16, (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    409e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <clockJitterWDT()>
    40a2:	98 01       	movw	r18, r16
    40a4:	2c 0d       	add	r18, r12
    40a6:	3d 1d       	adc	r19, r13
    40a8:	48 2f       	mov	r20, r24
    40aa:	48 25       	eor	r20, r8
    40ac:	80 2f       	mov	r24, r16
    40ae:	63 2f       	mov	r22, r19
    40b0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    40b4:	8d 2d       	mov	r24, r13
    40b6:	99 27       	eor	r25, r25
    40b8:	c5 96       	adiw	r24, 0x35	; 53
    40ba:	80 27       	eor	r24, r16
    40bc:	91 27       	eor	r25, r17
    40be:	83 70       	andi	r24, 0x03	; 3
    40c0:	90 70       	andi	r25, 0x00	; 0
    40c2:	02 96       	adiw	r24, 0x02	; 2
    40c4:	18 2f       	mov	r17, r24
    40c6:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    40c8:	f9 99       	sbic	0x1f, 1	; 31
    40ca:	fe cf       	rjmp	.-4      	; 0x40c8 <setup+0x36e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    40cc:	92 bd       	out	0x22, r25	; 34
    40ce:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    40d0:	f8 9a       	sbi	0x1f, 0	; 31
    40d2:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    40d4:	88 23       	and	r24, r24
    40d6:	29 f4       	brne	.+10     	; 0x40e2 <setup+0x388>
    40d8:	81 2f       	mov	r24, r17
    40da:	90 2f       	mov	r25, r16
    40dc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <eeprom_smart_erase_byte(unsigned char*)>
    40e0:	08 c0       	rjmp	.+16     	; 0x40f2 <setup+0x398>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    40e2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <clockJitterEntropyByte()>
    40e6:	68 2f       	mov	r22, r24
    40e8:	6c 0d       	add	r22, r12
    40ea:	81 2f       	mov	r24, r17
    40ec:	90 2f       	mov	r25, r16
    40ee:	0e 94 21 07 	call	0xe42	; 0xe42 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(erv, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Initialised: turn heatcall UI LED off (and make it an output).
  pinMode(LED_HEATCALL, OUTPUT);
    40f2:	8d e0       	ldi	r24, 0x0D	; 13
    40f4:	61 e0       	ldi	r22, 0x01	; 1
    40f6:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <pinMode>
  fastDigitalWrite(LED_HEATCALL, LOW);
    40fa:	2d 98       	cbi	0x05, 5	; 5

  // Report initial status.
  serialStatusReport();
    40fc:	0e 94 04 17 	call	0x2e08	; 0x2e08 <serialStatusReport()>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    4100:	80 91 a5 01 	lds	r24, 0x01A5
    4104:	80 93 ba 01 	sts	0x01BA, r24
  }
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	1f 91       	pop	r17
    4112:	0f 91       	pop	r16
    4114:	ff 90       	pop	r15
    4116:	ef 90       	pop	r14
    4118:	df 90       	pop	r13
    411a:	cf 90       	pop	r12
    411c:	bf 90       	pop	r11
    411e:	af 90       	pop	r10
    4120:	9f 90       	pop	r9
    4122:	8f 90       	pop	r8
    4124:	7f 90       	pop	r7
    4126:	6f 90       	pop	r6
    4128:	5f 90       	pop	r5
    412a:	4f 90       	pop	r4
    412c:	3f 90       	pop	r3
    412e:	2f 90       	pop	r2
    4130:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    4132:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    4136:	8f 15       	cp	r24, r15
    4138:	09 f0       	breq	.+2      	; 0x413c <setup+0x3e2>
    413a:	89 cf       	rjmp	.-238    	; 0x404e <setup+0x2f4>
    413c:	82 cf       	rjmp	.-252    	; 0x4042 <setup+0x2e8>

0000413e <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	80 93 04 02 	sts	0x0204, r24
  // set address of targeted slave
  txAddress = address;
    4144:	60 93 e1 01 	sts	0x01E1, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4148:	10 92 02 02 	sts	0x0202, r1
  txBufferLength = 0;
    414c:	10 92 03 02 	sts	0x0203, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    4150:	08 95       	ret

00004152 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4152:	20 91 e0 01 	lds	r18, 0x01E0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	80 91 df 01 	lds	r24, 0x01DF
    415c:	28 1b       	sub	r18, r24
    415e:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    4160:	c9 01       	movw	r24, r18
    4162:	08 95       	ret

00004164 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4164:	40 91 df 01 	lds	r20, 0x01DF
    4168:	80 91 e0 01 	lds	r24, 0x01E0
    416c:	48 17       	cp	r20, r24
    416e:	18 f0       	brcs	.+6      	; 0x4176 <TwoWire::read()+0x12>
    4170:	2f ef       	ldi	r18, 0xFF	; 255
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	0a c0       	rjmp	.+20     	; 0x418a <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    4176:	e4 2f       	mov	r30, r20
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	e1 54       	subi	r30, 0x41	; 65
    417c:	fe 4f       	sbci	r31, 0xFE	; 254
    417e:	80 81       	ld	r24, Z
    4180:	28 2f       	mov	r18, r24
    4182:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4184:	4f 5f       	subi	r20, 0xFF	; 255
    4186:	40 93 df 01 	sts	0x01DF, r20
  }

  return value;
}
    418a:	c9 01       	movw	r24, r18
    418c:	08 95       	ret

0000418e <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    418e:	e0 91 df 01 	lds	r30, 0x01DF
    4192:	80 91 e0 01 	lds	r24, 0x01E0
    4196:	e8 17       	cp	r30, r24
    4198:	18 f0       	brcs	.+6      	; 0x41a0 <TwoWire::peek()+0x12>
    419a:	ef ef       	ldi	r30, 0xFF	; 255
    419c:	ff ef       	ldi	r31, 0xFF	; 255
    419e:	06 c0       	rjmp	.+12     	; 0x41ac <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	e1 54       	subi	r30, 0x41	; 65
    41a4:	fe 4f       	sbci	r31, 0xFE	; 254
    41a6:	80 81       	ld	r24, Z
    41a8:	e8 2f       	mov	r30, r24
    41aa:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    41ac:	cf 01       	movw	r24, r30
    41ae:	08 95       	ret

000041b0 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    41b0:	08 95       	ret

000041b2 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    41b2:	10 92 08 02 	sts	0x0208, r1
    41b6:	10 92 07 02 	sts	0x0207, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    41ba:	88 ee       	ldi	r24, 0xE8	; 232
    41bc:	93 e0       	ldi	r25, 0x03	; 3
    41be:	a0 e0       	ldi	r26, 0x00	; 0
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	80 93 09 02 	sts	0x0209, r24
    41c6:	90 93 0a 02 	sts	0x020A, r25
    41ca:	a0 93 0b 02 	sts	0x020B, r26
    41ce:	b0 93 0c 02 	sts	0x020C, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    41d2:	89 e0       	ldi	r24, 0x09	; 9
    41d4:	91 e0       	ldi	r25, 0x01	; 1
    41d6:	90 93 06 02 	sts	0x0206, r25
    41da:	80 93 05 02 	sts	0x0205, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    41de:	08 95       	ret

000041e0 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    41e0:	cf 92       	push	r12
    41e2:	df 92       	push	r13
    41e4:	ef 92       	push	r14
    41e6:	ff 92       	push	r15
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	7c 01       	movw	r14, r24
    41f2:	6b 01       	movw	r12, r22
    41f4:	8a 01       	movw	r16, r20
{
  if(transmitting){
    41f6:	80 91 04 02 	lds	r24, 0x0204
    41fa:	88 23       	and	r24, r24
    41fc:	a1 f0       	breq	.+40     	; 0x4226 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    41fe:	c0 e0       	ldi	r28, 0x00	; 0
    4200:	d0 e0       	ldi	r29, 0x00	; 0
    4202:	0d c0       	rjmp	.+26     	; 0x421e <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4204:	d7 01       	movw	r26, r14
    4206:	ed 91       	ld	r30, X+
    4208:	fc 91       	ld	r31, X
    420a:	d6 01       	movw	r26, r12
    420c:	ac 0f       	add	r26, r28
    420e:	bd 1f       	adc	r27, r29
    4210:	01 90       	ld	r0, Z+
    4212:	f0 81       	ld	r31, Z
    4214:	e0 2d       	mov	r30, r0
    4216:	c7 01       	movw	r24, r14
    4218:	6c 91       	ld	r22, X
    421a:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    421c:	21 96       	adiw	r28, 0x01	; 1
    421e:	c0 17       	cp	r28, r16
    4220:	d1 07       	cpc	r29, r17
    4222:	80 f3       	brcs	.-32     	; 0x4204 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    4224:	04 c0       	rjmp	.+8      	; 0x422e <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4226:	cb 01       	movw	r24, r22
    4228:	64 2f       	mov	r22, r20
    422a:	0e 94 22 22 	call	0x4444	; 0x4444 <twi_transmit>
  }
  return quantity;
}
    422e:	c8 01       	movw	r24, r16
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	ff 90       	pop	r15
    423a:	ef 90       	pop	r14
    423c:	df 90       	pop	r13
    423e:	cf 90       	pop	r12
    4240:	08 95       	ret

00004242 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	0f 92       	push	r0
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	fc 01       	movw	r30, r24
    424e:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4250:	80 91 04 02 	lds	r24, 0x0204
    4254:	88 23       	and	r24, r24
    4256:	c9 f0       	breq	.+50     	; 0x428a <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4258:	80 91 03 02 	lds	r24, 0x0203
    425c:	80 32       	cpi	r24, 0x20	; 32
    425e:	38 f0       	brcs	.+14     	; 0x426e <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	93 83       	std	Z+3, r25	; 0x03
    4266:	82 83       	std	Z+2, r24	; 0x02
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	15 c0       	rjmp	.+42     	; 0x4298 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    426e:	80 91 02 02 	lds	r24, 0x0202
    4272:	e8 2f       	mov	r30, r24
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	ee 51       	subi	r30, 0x1E	; 30
    4278:	fe 4f       	sbci	r31, 0xFE	; 254
    427a:	99 81       	ldd	r25, Y+1	; 0x01
    427c:	90 83       	st	Z, r25
    ++txBufferIndex;
    427e:	8f 5f       	subi	r24, 0xFF	; 255
    4280:	80 93 02 02 	sts	0x0202, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4284:	80 93 03 02 	sts	0x0203, r24
    4288:	05 c0       	rjmp	.+10     	; 0x4294 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    428a:	ce 01       	movw	r24, r28
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	61 e0       	ldi	r22, 0x01	; 1
    4290:	0e 94 22 22 	call	0x4444	; 0x4444 <twi_transmit>
    4294:	21 e0       	ldi	r18, 0x01	; 1
    4296:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4298:	c9 01       	movw	r24, r18
    429a:	0f 90       	pop	r0
    429c:	cf 91       	pop	r28
    429e:	df 91       	pop	r29
    42a0:	08 95       	ret

000042a2 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    42a2:	0f 93       	push	r16
    42a4:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    42a6:	80 91 e1 01 	lds	r24, 0x01E1
    42aa:	62 ee       	ldi	r22, 0xE2	; 226
    42ac:	71 e0       	ldi	r23, 0x01	; 1
    42ae:	40 91 03 02 	lds	r20, 0x0203
    42b2:	21 e0       	ldi	r18, 0x01	; 1
    42b4:	0e 94 cd 21 	call	0x439a	; 0x439a <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    42b8:	10 92 02 02 	sts	0x0202, r1
  txBufferLength = 0;
    42bc:	10 92 03 02 	sts	0x0203, r1
  // indicate that we are done transmitting
  transmitting = 0;
    42c0:	10 92 04 02 	sts	0x0204, r1
  return ret;
}
    42c4:	0f 91       	pop	r16
    42c6:	08 95       	ret

000042c8 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    42c8:	61 e0       	ldi	r22, 0x01	; 1
    42ca:	0e 94 51 21 	call	0x42a2	; 0x42a2 <TwoWire::endTransmission(unsigned char)>
}
    42ce:	08 95       	ret

000042d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    42d0:	41 32       	cpi	r20, 0x21	; 33
    42d2:	08 f0       	brcs	.+2      	; 0x42d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    42d4:	40 e2       	ldi	r20, 0x20	; 32
    42d6:	86 2f       	mov	r24, r22
    42d8:	6f eb       	ldi	r22, 0xBF	; 191
    42da:	71 e0       	ldi	r23, 0x01	; 1
    42dc:	0e 94 84 21 	call	0x4308	; 0x4308 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    42e0:	10 92 df 01 	sts	0x01DF, r1
  rxBufferLength = read;
    42e4:	80 93 e0 01 	sts	0x01E0, r24

  return read;
}
    42e8:	08 95       	ret

000042ea <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    42ea:	21 e0       	ldi	r18, 0x01	; 1
    42ec:	0e 94 68 21 	call	0x42d0	; 0x42d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    42f0:	08 95       	ret

000042f2 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    42f2:	10 92 df 01 	sts	0x01DF, r1
  rxBufferLength = 0;
    42f6:	10 92 e0 01 	sts	0x01E0, r1

  txBufferIndex = 0;
    42fa:	10 92 02 02 	sts	0x0202, r1
  txBufferLength = 0;
    42fe:	10 92 03 02 	sts	0x0203, r1

  twi_init();
    4302:	0e 94 ce 23 	call	0x479c	; 0x479c <twi_init>
}
    4306:	08 95       	ret

00004308 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4308:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    430a:	41 32       	cpi	r20, 0x21	; 33
    430c:	10 f0       	brcs	.+4      	; 0x4312 <twi_readFrom+0xa>
    430e:	40 e0       	ldi	r20, 0x00	; 0
    4310:	42 c0       	rjmp	.+132    	; 0x4396 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4312:	80 91 11 02 	lds	r24, 0x0211
    4316:	88 23       	and	r24, r24
    4318:	e1 f7       	brne	.-8      	; 0x4312 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    431a:	91 e0       	ldi	r25, 0x01	; 1
    431c:	90 93 11 02 	sts	0x0211, r25
  twi_sendStop = sendStop;
    4320:	20 93 13 02 	sts	0x0213, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4324:	8f ef       	ldi	r24, 0xFF	; 255
    4326:	80 93 7e 02 	sts	0x027E, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    432a:	10 92 39 02 	sts	0x0239, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    432e:	41 50       	subi	r20, 0x01	; 1
    4330:	40 93 3a 02 	sts	0x023A, r20
    4334:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4336:	90 93 12 02 	sts	0x0212, r25
  twi_slarw |= address << 1;
    433a:	80 91 12 02 	lds	r24, 0x0212
    433e:	33 0f       	add	r19, r19
    4340:	83 2b       	or	r24, r19
    4342:	80 93 12 02 	sts	0x0212, r24

  if (true == twi_inRepStart) {
    4346:	80 91 14 02 	lds	r24, 0x0214
    434a:	81 30       	cpi	r24, 0x01	; 1
    434c:	41 f4       	brne	.+16     	; 0x435e <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    434e:	10 92 14 02 	sts	0x0214, r1
    TWDR = twi_slarw;
    4352:	80 91 12 02 	lds	r24, 0x0212
    4356:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    435a:	85 ec       	ldi	r24, 0xC5	; 197
    435c:	01 c0       	rjmp	.+2      	; 0x4360 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    435e:	85 ee       	ldi	r24, 0xE5	; 229
    4360:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4364:	80 91 11 02 	lds	r24, 0x0211
    4368:	81 30       	cpi	r24, 0x01	; 1
    436a:	e1 f3       	breq	.-8      	; 0x4364 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    436c:	80 91 39 02 	lds	r24, 0x0239
    4370:	84 17       	cp	r24, r20
    4372:	10 f4       	brcc	.+4      	; 0x4378 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4374:	40 91 39 02 	lds	r20, 0x0239
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	0a c0       	rjmp	.+20     	; 0x4392 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    437e:	fb 01       	movw	r30, r22
    4380:	e2 0f       	add	r30, r18
    4382:	f3 1f       	adc	r31, r19
    4384:	d9 01       	movw	r26, r18
    4386:	a7 5e       	subi	r26, 0xE7	; 231
    4388:	bd 4f       	sbci	r27, 0xFD	; 253
    438a:	8c 91       	ld	r24, X
    438c:	80 83       	st	Z, r24
    438e:	2f 5f       	subi	r18, 0xFF	; 255
    4390:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    4392:	24 17       	cp	r18, r20
    4394:	a0 f3       	brcs	.-24     	; 0x437e <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4396:	84 2f       	mov	r24, r20
    4398:	08 95       	ret

0000439a <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    439a:	0f 93       	push	r16
    439c:	1f 93       	push	r17
    439e:	58 2f       	mov	r21, r24
    43a0:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    43a2:	41 32       	cpi	r20, 0x21	; 33
    43a4:	10 f0       	brcs	.+4      	; 0x43aa <twi_writeTo+0x10>
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	4a c0       	rjmp	.+148    	; 0x443e <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    43aa:	80 91 11 02 	lds	r24, 0x0211
    43ae:	88 23       	and	r24, r24
    43b0:	e1 f7       	brne	.-8      	; 0x43aa <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    43b2:	82 e0       	ldi	r24, 0x02	; 2
    43b4:	80 93 11 02 	sts	0x0211, r24
  twi_sendStop = sendStop;
    43b8:	00 93 13 02 	sts	0x0213, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    43bc:	8f ef       	ldi	r24, 0xFF	; 255
    43be:	80 93 7e 02 	sts	0x027E, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    43c2:	10 92 39 02 	sts	0x0239, r1
  twi_masterBufferLength = length;
    43c6:	40 93 3a 02 	sts	0x023A, r20
    43ca:	a9 e1       	ldi	r26, 0x19	; 25
    43cc:	b2 e0       	ldi	r27, 0x02	; 2
    43ce:	fb 01       	movw	r30, r22
    43d0:	02 c0       	rjmp	.+4      	; 0x43d6 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    43d2:	81 91       	ld	r24, Z+
    43d4:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    43d6:	8e 2f       	mov	r24, r30
    43d8:	86 1b       	sub	r24, r22
    43da:	84 17       	cp	r24, r20
    43dc:	d0 f3       	brcs	.-12     	; 0x43d2 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    43de:	10 92 12 02 	sts	0x0212, r1
  twi_slarw |= address << 1;
    43e2:	80 91 12 02 	lds	r24, 0x0212
    43e6:	55 0f       	add	r21, r21
    43e8:	85 2b       	or	r24, r21
    43ea:	80 93 12 02 	sts	0x0212, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    43ee:	80 91 14 02 	lds	r24, 0x0214
    43f2:	81 30       	cpi	r24, 0x01	; 1
    43f4:	41 f4       	brne	.+16     	; 0x4406 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    43f6:	10 92 14 02 	sts	0x0214, r1
    TWDR = twi_slarw;				
    43fa:	80 91 12 02 	lds	r24, 0x0212
    43fe:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4402:	85 ec       	ldi	r24, 0xC5	; 197
    4404:	01 c0       	rjmp	.+2      	; 0x4408 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4406:	85 ee       	ldi	r24, 0xE5	; 229
    4408:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    440c:	11 23       	and	r17, r17
    440e:	21 f0       	breq	.+8      	; 0x4418 <twi_writeTo+0x7e>
    4410:	80 91 11 02 	lds	r24, 0x0211
    4414:	82 30       	cpi	r24, 0x02	; 2
    4416:	e1 f3       	breq	.-8      	; 0x4410 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4418:	80 91 7e 02 	lds	r24, 0x027E
    441c:	8f 3f       	cpi	r24, 0xFF	; 255
    441e:	11 f4       	brne	.+4      	; 0x4424 <twi_writeTo+0x8a>
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	0d c0       	rjmp	.+26     	; 0x443e <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4424:	80 91 7e 02 	lds	r24, 0x027E
    4428:	80 32       	cpi	r24, 0x20	; 32
    442a:	11 f4       	brne	.+4      	; 0x4430 <twi_writeTo+0x96>
    442c:	82 e0       	ldi	r24, 0x02	; 2
    442e:	07 c0       	rjmp	.+14     	; 0x443e <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4430:	80 91 7e 02 	lds	r24, 0x027E
    4434:	80 33       	cpi	r24, 0x30	; 48
    4436:	11 f0       	breq	.+4      	; 0x443c <twi_writeTo+0xa2>
    4438:	84 e0       	ldi	r24, 0x04	; 4
    443a:	01 c0       	rjmp	.+2      	; 0x443e <twi_writeTo+0xa4>
    443c:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    443e:	1f 91       	pop	r17
    4440:	0f 91       	pop	r16
    4442:	08 95       	ret

00004444 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4444:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4446:	61 32       	cpi	r22, 0x21	; 33
    4448:	10 f0       	brcs	.+4      	; 0x444e <twi_transmit+0xa>
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    444e:	80 91 11 02 	lds	r24, 0x0211
    4452:	84 30       	cpi	r24, 0x04	; 4
    4454:	11 f0       	breq	.+4      	; 0x445a <twi_transmit+0x16>
    4456:	82 e0       	ldi	r24, 0x02	; 2
    4458:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    445a:	60 93 5c 02 	sts	0x025C, r22
    445e:	ab e3       	ldi	r26, 0x3B	; 59
    4460:	b2 e0       	ldi	r27, 0x02	; 2
    4462:	84 2f       	mov	r24, r20
    4464:	9c 01       	movw	r18, r24
    4466:	f9 01       	movw	r30, r18
    4468:	02 c0       	rjmp	.+4      	; 0x446e <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    446a:	81 91       	ld	r24, Z+
    446c:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    446e:	8e 2f       	mov	r24, r30
    4470:	84 1b       	sub	r24, r20
    4472:	86 17       	cp	r24, r22
    4474:	d0 f3       	brcs	.-12     	; 0x446a <twi_transmit+0x26>
    4476:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4478:	08 95       	ret

0000447a <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    447a:	1f 92       	push	r1
    447c:	0f 92       	push	r0
    447e:	0f b6       	in	r0, 0x3f	; 63
    4480:	0f 92       	push	r0
    4482:	11 24       	eor	r1, r1
    4484:	2f 93       	push	r18
    4486:	3f 93       	push	r19
    4488:	4f 93       	push	r20
    448a:	5f 93       	push	r21
    448c:	6f 93       	push	r22
    448e:	7f 93       	push	r23
    4490:	8f 93       	push	r24
    4492:	9f 93       	push	r25
    4494:	af 93       	push	r26
    4496:	bf 93       	push	r27
    4498:	ef 93       	push	r30
    449a:	ff 93       	push	r31
  switch(TW_STATUS){
    449c:	80 91 b9 00 	lds	r24, 0x00B9
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	88 7f       	andi	r24, 0xF8	; 248
    44a4:	90 70       	andi	r25, 0x00	; 0
    44a6:	80 36       	cpi	r24, 0x60	; 96
    44a8:	91 05       	cpc	r25, r1
    44aa:	09 f4       	brne	.+2      	; 0x44ae <__vector_24+0x34>
    44ac:	f2 c0       	rjmp	.+484    	; 0x4692 <__vector_24+0x218>
    44ae:	81 36       	cpi	r24, 0x61	; 97
    44b0:	91 05       	cpc	r25, r1
    44b2:	cc f5       	brge	.+114    	; 0x4526 <__vector_24+0xac>
    44b4:	88 32       	cpi	r24, 0x28	; 40
    44b6:	91 05       	cpc	r25, r1
    44b8:	09 f4       	brne	.+2      	; 0x44bc <__vector_24+0x42>
    44ba:	7b c0       	rjmp	.+246    	; 0x45b2 <__vector_24+0x138>
    44bc:	89 32       	cpi	r24, 0x29	; 41
    44be:	91 05       	cpc	r25, r1
    44c0:	b4 f4       	brge	.+44     	; 0x44ee <__vector_24+0x74>
    44c2:	80 31       	cpi	r24, 0x10	; 16
    44c4:	91 05       	cpc	r25, r1
    44c6:	09 f4       	brne	.+2      	; 0x44ca <__vector_24+0x50>
    44c8:	6f c0       	rjmp	.+222    	; 0x45a8 <__vector_24+0x12e>
    44ca:	81 31       	cpi	r24, 0x11	; 17
    44cc:	91 05       	cpc	r25, r1
    44ce:	3c f4       	brge	.+14     	; 0x44de <__vector_24+0x64>
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <__vector_24+0x5c>
    44d4:	47 c1       	rjmp	.+654    	; 0x4764 <__vector_24+0x2ea>
    44d6:	08 97       	sbiw	r24, 0x08	; 8
    44d8:	09 f0       	breq	.+2      	; 0x44dc <__vector_24+0x62>
    44da:	4f c1       	rjmp	.+670    	; 0x477a <__vector_24+0x300>
    44dc:	65 c0       	rjmp	.+202    	; 0x45a8 <__vector_24+0x12e>
    44de:	88 31       	cpi	r24, 0x18	; 24
    44e0:	91 05       	cpc	r25, r1
    44e2:	09 f4       	brne	.+2      	; 0x44e6 <__vector_24+0x6c>
    44e4:	66 c0       	rjmp	.+204    	; 0x45b2 <__vector_24+0x138>
    44e6:	80 97       	sbiw	r24, 0x20	; 32
    44e8:	09 f0       	breq	.+2      	; 0x44ec <__vector_24+0x72>
    44ea:	47 c1       	rjmp	.+654    	; 0x477a <__vector_24+0x300>
    44ec:	82 c0       	rjmp	.+260    	; 0x45f2 <__vector_24+0x178>
    44ee:	80 34       	cpi	r24, 0x40	; 64
    44f0:	91 05       	cpc	r25, r1
    44f2:	09 f4       	brne	.+2      	; 0x44f6 <__vector_24+0x7c>
    44f4:	a4 c0       	rjmp	.+328    	; 0x463e <__vector_24+0x1c4>
    44f6:	81 34       	cpi	r24, 0x41	; 65
    44f8:	91 05       	cpc	r25, r1
    44fa:	44 f4       	brge	.+16     	; 0x450c <__vector_24+0x92>
    44fc:	80 33       	cpi	r24, 0x30	; 48
    44fe:	91 05       	cpc	r25, r1
    4500:	09 f4       	brne	.+2      	; 0x4504 <__vector_24+0x8a>
    4502:	82 c0       	rjmp	.+260    	; 0x4608 <__vector_24+0x18e>
    4504:	c8 97       	sbiw	r24, 0x38	; 56
    4506:	09 f0       	breq	.+2      	; 0x450a <__vector_24+0x90>
    4508:	38 c1       	rjmp	.+624    	; 0x477a <__vector_24+0x300>
    450a:	89 c0       	rjmp	.+274    	; 0x461e <__vector_24+0x1a4>
    450c:	80 35       	cpi	r24, 0x50	; 80
    450e:	91 05       	cpc	r25, r1
    4510:	09 f4       	brne	.+2      	; 0x4514 <__vector_24+0x9a>
    4512:	89 c0       	rjmp	.+274    	; 0x4626 <__vector_24+0x1ac>
    4514:	88 35       	cpi	r24, 0x58	; 88
    4516:	91 05       	cpc	r25, r1
    4518:	09 f4       	brne	.+2      	; 0x451c <__vector_24+0xa2>
    451a:	96 c0       	rjmp	.+300    	; 0x4648 <__vector_24+0x1ce>
    451c:	88 34       	cpi	r24, 0x48	; 72
    451e:	91 05       	cpc	r25, r1
    4520:	09 f0       	breq	.+2      	; 0x4524 <__vector_24+0xaa>
    4522:	2b c1       	rjmp	.+598    	; 0x477a <__vector_24+0x300>
    4524:	ae c0       	rjmp	.+348    	; 0x4682 <__vector_24+0x208>
    4526:	88 39       	cpi	r24, 0x98	; 152
    4528:	91 05       	cpc	r25, r1
    452a:	09 f4       	brne	.+2      	; 0x452e <__vector_24+0xb4>
    452c:	13 c1       	rjmp	.+550    	; 0x4754 <__vector_24+0x2da>
    452e:	89 39       	cpi	r24, 0x99	; 153
    4530:	91 05       	cpc	r25, r1
    4532:	ec f4       	brge	.+58     	; 0x456e <__vector_24+0xf4>
    4534:	88 37       	cpi	r24, 0x78	; 120
    4536:	91 05       	cpc	r25, r1
    4538:	09 f4       	brne	.+2      	; 0x453c <__vector_24+0xc2>
    453a:	ab c0       	rjmp	.+342    	; 0x4692 <__vector_24+0x218>
    453c:	89 37       	cpi	r24, 0x79	; 121
    453e:	91 05       	cpc	r25, r1
    4540:	4c f4       	brge	.+18     	; 0x4554 <__vector_24+0xda>
    4542:	88 36       	cpi	r24, 0x68	; 104
    4544:	91 05       	cpc	r25, r1
    4546:	09 f4       	brne	.+2      	; 0x454a <__vector_24+0xd0>
    4548:	a4 c0       	rjmp	.+328    	; 0x4692 <__vector_24+0x218>
    454a:	80 37       	cpi	r24, 0x70	; 112
    454c:	91 05       	cpc	r25, r1
    454e:	09 f0       	breq	.+2      	; 0x4552 <__vector_24+0xd8>
    4550:	14 c1       	rjmp	.+552    	; 0x477a <__vector_24+0x300>
    4552:	9f c0       	rjmp	.+318    	; 0x4692 <__vector_24+0x218>
    4554:	88 38       	cpi	r24, 0x88	; 136
    4556:	91 05       	cpc	r25, r1
    4558:	09 f4       	brne	.+2      	; 0x455c <__vector_24+0xe2>
    455a:	fc c0       	rjmp	.+504    	; 0x4754 <__vector_24+0x2da>
    455c:	80 39       	cpi	r24, 0x90	; 144
    455e:	91 05       	cpc	r25, r1
    4560:	09 f4       	brne	.+2      	; 0x4564 <__vector_24+0xea>
    4562:	9d c0       	rjmp	.+314    	; 0x469e <__vector_24+0x224>
    4564:	80 38       	cpi	r24, 0x80	; 128
    4566:	91 05       	cpc	r25, r1
    4568:	09 f0       	breq	.+2      	; 0x456c <__vector_24+0xf2>
    456a:	07 c1       	rjmp	.+526    	; 0x477a <__vector_24+0x300>
    456c:	98 c0       	rjmp	.+304    	; 0x469e <__vector_24+0x224>
    456e:	80 3b       	cpi	r24, 0xB0	; 176
    4570:	91 05       	cpc	r25, r1
    4572:	09 f4       	brne	.+2      	; 0x4576 <__vector_24+0xfc>
    4574:	c6 c0       	rjmp	.+396    	; 0x4702 <__vector_24+0x288>
    4576:	81 3b       	cpi	r24, 0xB1	; 177
    4578:	91 05       	cpc	r25, r1
    457a:	4c f4       	brge	.+18     	; 0x458e <__vector_24+0x114>
    457c:	80 3a       	cpi	r24, 0xA0	; 160
    457e:	91 05       	cpc	r25, r1
    4580:	09 f4       	brne	.+2      	; 0x4584 <__vector_24+0x10a>
    4582:	9f c0       	rjmp	.+318    	; 0x46c2 <__vector_24+0x248>
    4584:	88 3a       	cpi	r24, 0xA8	; 168
    4586:	91 05       	cpc	r25, r1
    4588:	09 f0       	breq	.+2      	; 0x458c <__vector_24+0x112>
    458a:	f7 c0       	rjmp	.+494    	; 0x477a <__vector_24+0x300>
    458c:	ba c0       	rjmp	.+372    	; 0x4702 <__vector_24+0x288>
    458e:	80 3c       	cpi	r24, 0xC0	; 192
    4590:	91 05       	cpc	r25, r1
    4592:	09 f4       	brne	.+2      	; 0x4596 <__vector_24+0x11c>
    4594:	e3 c0       	rjmp	.+454    	; 0x475c <__vector_24+0x2e2>
    4596:	88 3c       	cpi	r24, 0xC8	; 200
    4598:	91 05       	cpc	r25, r1
    459a:	09 f4       	brne	.+2      	; 0x459e <__vector_24+0x124>
    459c:	df c0       	rjmp	.+446    	; 0x475c <__vector_24+0x2e2>
    459e:	88 3b       	cpi	r24, 0xB8	; 184
    45a0:	91 05       	cpc	r25, r1
    45a2:	09 f0       	breq	.+2      	; 0x45a6 <__vector_24+0x12c>
    45a4:	ea c0       	rjmp	.+468    	; 0x477a <__vector_24+0x300>
    45a6:	c2 c0       	rjmp	.+388    	; 0x472c <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    45a8:	80 91 12 02 	lds	r24, 0x0212
    45ac:	80 93 bb 00 	sts	0x00BB, r24
    45b0:	cf c0       	rjmp	.+414    	; 0x4750 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    45b2:	90 91 39 02 	lds	r25, 0x0239
    45b6:	80 91 3a 02 	lds	r24, 0x023A
    45ba:	98 17       	cp	r25, r24
    45bc:	68 f4       	brcc	.+26     	; 0x45d8 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    45be:	90 91 39 02 	lds	r25, 0x0239
    45c2:	e9 2f       	mov	r30, r25
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	e7 5e       	subi	r30, 0xE7	; 231
    45c8:	fd 4f       	sbci	r31, 0xFD	; 253
    45ca:	80 81       	ld	r24, Z
    45cc:	80 93 bb 00 	sts	0x00BB, r24
    45d0:	9f 5f       	subi	r25, 0xFF	; 255
    45d2:	90 93 39 02 	sts	0x0239, r25
    45d6:	bc c0       	rjmp	.+376    	; 0x4750 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    45d8:	80 91 13 02 	lds	r24, 0x0213
    45dc:	88 23       	and	r24, r24
    45de:	09 f4       	brne	.+2      	; 0x45e2 <__vector_24+0x168>
    45e0:	4b c0       	rjmp	.+150    	; 0x4678 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    45e2:	85 ed       	ldi	r24, 0xD5	; 213
    45e4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    45e8:	80 91 bc 00 	lds	r24, 0x00BC
    45ec:	84 fd       	sbrc	r24, 4
    45ee:	fc cf       	rjmp	.-8      	; 0x45e8 <__vector_24+0x16e>
    45f0:	c2 c0       	rjmp	.+388    	; 0x4776 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    45f2:	80 e2       	ldi	r24, 0x20	; 32
    45f4:	80 93 7e 02 	sts	0x027E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    45f8:	85 ed       	ldi	r24, 0xD5	; 213
    45fa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    45fe:	80 91 bc 00 	lds	r24, 0x00BC
    4602:	84 fd       	sbrc	r24, 4
    4604:	fc cf       	rjmp	.-8      	; 0x45fe <__vector_24+0x184>
    4606:	b7 c0       	rjmp	.+366    	; 0x4776 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4608:	80 e3       	ldi	r24, 0x30	; 48
    460a:	80 93 7e 02 	sts	0x027E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    460e:	85 ed       	ldi	r24, 0xD5	; 213
    4610:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4614:	80 91 bc 00 	lds	r24, 0x00BC
    4618:	84 fd       	sbrc	r24, 4
    461a:	fc cf       	rjmp	.-8      	; 0x4614 <__vector_24+0x19a>
    461c:	ac c0       	rjmp	.+344    	; 0x4776 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    461e:	88 e3       	ldi	r24, 0x38	; 56
    4620:	80 93 7e 02 	sts	0x027E, r24
    4624:	9b c0       	rjmp	.+310    	; 0x475c <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4626:	80 91 39 02 	lds	r24, 0x0239
    462a:	90 91 bb 00 	lds	r25, 0x00BB
    462e:	e8 2f       	mov	r30, r24
    4630:	f0 e0       	ldi	r31, 0x00	; 0
    4632:	e7 5e       	subi	r30, 0xE7	; 231
    4634:	fd 4f       	sbci	r31, 0xFD	; 253
    4636:	90 83       	st	Z, r25
    4638:	8f 5f       	subi	r24, 0xFF	; 255
    463a:	80 93 39 02 	sts	0x0239, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    463e:	90 91 39 02 	lds	r25, 0x0239
    4642:	80 91 3a 02 	lds	r24, 0x023A
    4646:	82 c0       	rjmp	.+260    	; 0x474c <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4648:	80 91 39 02 	lds	r24, 0x0239
    464c:	90 91 bb 00 	lds	r25, 0x00BB
    4650:	e8 2f       	mov	r30, r24
    4652:	f0 e0       	ldi	r31, 0x00	; 0
    4654:	e7 5e       	subi	r30, 0xE7	; 231
    4656:	fd 4f       	sbci	r31, 0xFD	; 253
    4658:	90 83       	st	Z, r25
    465a:	8f 5f       	subi	r24, 0xFF	; 255
    465c:	80 93 39 02 	sts	0x0239, r24
	if (twi_sendStop)
    4660:	80 91 13 02 	lds	r24, 0x0213
    4664:	88 23       	and	r24, r24
    4666:	41 f0       	breq	.+16     	; 0x4678 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4668:	85 ed       	ldi	r24, 0xD5	; 213
    466a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    466e:	80 91 bc 00 	lds	r24, 0x00BC
    4672:	84 fd       	sbrc	r24, 4
    4674:	fc cf       	rjmp	.-8      	; 0x466e <__vector_24+0x1f4>
    4676:	7f c0       	rjmp	.+254    	; 0x4776 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	80 93 14 02 	sts	0x0214, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    467e:	84 ea       	ldi	r24, 0xA4	; 164
    4680:	6e c0       	rjmp	.+220    	; 0x475e <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4682:	85 ed       	ldi	r24, 0xD5	; 213
    4684:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4688:	80 91 bc 00 	lds	r24, 0x00BC
    468c:	84 fd       	sbrc	r24, 4
    468e:	fc cf       	rjmp	.-8      	; 0x4688 <__vector_24+0x20e>
    4690:	72 c0       	rjmp	.+228    	; 0x4776 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4692:	83 e0       	ldi	r24, 0x03	; 3
    4694:	80 93 11 02 	sts	0x0211, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4698:	10 92 7d 02 	sts	0x027D, r1
    469c:	59 c0       	rjmp	.+178    	; 0x4750 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    469e:	80 91 7d 02 	lds	r24, 0x027D
    46a2:	80 32       	cpi	r24, 0x20	; 32
    46a4:	08 f0       	brcs	.+2      	; 0x46a8 <__vector_24+0x22e>
    46a6:	56 c0       	rjmp	.+172    	; 0x4754 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    46a8:	80 91 7d 02 	lds	r24, 0x027D
    46ac:	90 91 bb 00 	lds	r25, 0x00BB
    46b0:	e8 2f       	mov	r30, r24
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	e3 5a       	subi	r30, 0xA3	; 163
    46b6:	fd 4f       	sbci	r31, 0xFD	; 253
    46b8:	90 83       	st	Z, r25
    46ba:	8f 5f       	subi	r24, 0xFF	; 255
    46bc:	80 93 7d 02 	sts	0x027D, r24
    46c0:	47 c0       	rjmp	.+142    	; 0x4750 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    46c2:	80 91 7d 02 	lds	r24, 0x027D
    46c6:	80 32       	cpi	r24, 0x20	; 32
    46c8:	30 f4       	brcc	.+12     	; 0x46d6 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    46ca:	e0 91 7d 02 	lds	r30, 0x027D
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	e3 5a       	subi	r30, 0xA3	; 163
    46d2:	fd 4f       	sbci	r31, 0xFD	; 253
    46d4:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    46d6:	85 ed       	ldi	r24, 0xD5	; 213
    46d8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    46dc:	80 91 bc 00 	lds	r24, 0x00BC
    46e0:	84 fd       	sbrc	r24, 4
    46e2:	fc cf       	rjmp	.-8      	; 0x46dc <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    46e4:	10 92 11 02 	sts	0x0211, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    46e8:	60 91 7d 02 	lds	r22, 0x027D
    46ec:	e0 91 17 02 	lds	r30, 0x0217
    46f0:	f0 91 18 02 	lds	r31, 0x0218
    46f4:	8d e5       	ldi	r24, 0x5D	; 93
    46f6:	92 e0       	ldi	r25, 0x02	; 2
    46f8:	70 e0       	ldi	r23, 0x00	; 0
    46fa:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    46fc:	10 92 7d 02 	sts	0x027D, r1
    4700:	2d c0       	rjmp	.+90     	; 0x475c <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4702:	84 e0       	ldi	r24, 0x04	; 4
    4704:	80 93 11 02 	sts	0x0211, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4708:	10 92 5b 02 	sts	0x025B, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    470c:	10 92 5c 02 	sts	0x025C, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4710:	e0 91 15 02 	lds	r30, 0x0215
    4714:	f0 91 16 02 	lds	r31, 0x0216
    4718:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    471a:	80 91 5c 02 	lds	r24, 0x025C
    471e:	88 23       	and	r24, r24
    4720:	29 f4       	brne	.+10     	; 0x472c <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	80 93 5c 02 	sts	0x025C, r24
        twi_txBuffer[0] = 0x00;
    4728:	10 92 3b 02 	sts	0x023B, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    472c:	90 91 5b 02 	lds	r25, 0x025B
    4730:	e9 2f       	mov	r30, r25
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	e5 5c       	subi	r30, 0xC5	; 197
    4736:	fd 4f       	sbci	r31, 0xFD	; 253
    4738:	80 81       	ld	r24, Z
    473a:	80 93 bb 00 	sts	0x00BB, r24
    473e:	9f 5f       	subi	r25, 0xFF	; 255
    4740:	90 93 5b 02 	sts	0x025B, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4744:	90 91 5b 02 	lds	r25, 0x025B
    4748:	80 91 5c 02 	lds	r24, 0x025C
    474c:	98 17       	cp	r25, r24
    474e:	10 f4       	brcc	.+4      	; 0x4754 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4750:	85 ec       	ldi	r24, 0xC5	; 197
    4752:	01 c0       	rjmp	.+2      	; 0x4756 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4754:	85 e8       	ldi	r24, 0x85	; 133
    4756:	80 93 bc 00 	sts	0x00BC, r24
    475a:	0f c0       	rjmp	.+30     	; 0x477a <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    475c:	85 ec       	ldi	r24, 0xC5	; 197
    475e:	80 93 bc 00 	sts	0x00BC, r24
    4762:	09 c0       	rjmp	.+18     	; 0x4776 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4764:	10 92 7e 02 	sts	0x027E, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4768:	85 ed       	ldi	r24, 0xD5	; 213
    476a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    476e:	80 91 bc 00 	lds	r24, 0x00BC
    4772:	84 fd       	sbrc	r24, 4
    4774:	fc cf       	rjmp	.-8      	; 0x476e <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4776:	10 92 11 02 	sts	0x0211, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    477a:	ff 91       	pop	r31
    477c:	ef 91       	pop	r30
    477e:	bf 91       	pop	r27
    4780:	af 91       	pop	r26
    4782:	9f 91       	pop	r25
    4784:	8f 91       	pop	r24
    4786:	7f 91       	pop	r23
    4788:	6f 91       	pop	r22
    478a:	5f 91       	pop	r21
    478c:	4f 91       	pop	r20
    478e:	3f 91       	pop	r19
    4790:	2f 91       	pop	r18
    4792:	0f 90       	pop	r0
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	0f 90       	pop	r0
    4798:	1f 90       	pop	r1
    479a:	18 95       	reti

0000479c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    479c:	10 92 11 02 	sts	0x0211, r1
  twi_sendStop = true;		// default value
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	80 93 13 02 	sts	0x0213, r24
  twi_inRepStart = false;
    47a6:	10 92 14 02 	sts	0x0214, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    47aa:	82 e1       	ldi	r24, 0x12	; 18
    47ac:	61 e0       	ldi	r22, 0x01	; 1
    47ae:	0e 94 2b 24 	call	0x4856	; 0x4856 <digitalWrite>
  digitalWrite(SCL, 1);
    47b2:	83 e1       	ldi	r24, 0x13	; 19
    47b4:	61 e0       	ldi	r22, 0x01	; 1
    47b6:	0e 94 2b 24 	call	0x4856	; 0x4856 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    47ba:	e9 eb       	ldi	r30, 0xB9	; 185
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	80 81       	ld	r24, Z
    47c0:	8e 7f       	andi	r24, 0xFE	; 254
    47c2:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    47c4:	80 81       	ld	r24, Z
    47c6:	8d 7f       	andi	r24, 0xFD	; 253
    47c8:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    47ca:	8d ef       	ldi	r24, 0xFD	; 253
    47cc:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    47d0:	85 e4       	ldi	r24, 0x45	; 69
    47d2:	80 93 bc 00 	sts	0x00BC, r24
}
    47d6:	08 95       	ret

000047d8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    47dc:	48 2f       	mov	r20, r24
    47de:	50 e0       	ldi	r21, 0x00	; 0
    47e0:	ca 01       	movw	r24, r20
    47e2:	82 50       	subi	r24, 0x02	; 2
    47e4:	9a 4f       	sbci	r25, 0xFA	; 250
    47e6:	fc 01       	movw	r30, r24
    47e8:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    47ea:	46 51       	subi	r20, 0x16	; 22
    47ec:	5a 4f       	sbci	r21, 0xFA	; 250
    47ee:	fa 01       	movw	r30, r20
    47f0:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    47f2:	88 23       	and	r24, r24
    47f4:	69 f1       	breq	.+90     	; 0x4850 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	fc 01       	movw	r30, r24
    47fe:	e4 53       	subi	r30, 0x34	; 52
    4800:	fa 4f       	sbci	r31, 0xFA	; 250
    4802:	a5 91       	lpm	r26, Z+
    4804:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    4806:	fc 01       	movw	r30, r24
    4808:	ea 52       	subi	r30, 0x2A	; 42
    480a:	fa 4f       	sbci	r31, 0xFA	; 250
    480c:	c5 91       	lpm	r28, Z+
    480e:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    4810:	66 23       	and	r22, r22
    4812:	51 f4       	brne	.+20     	; 0x4828 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    4814:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4816:	f8 94       	cli
		*reg &= ~bit;
    4818:	8c 91       	ld	r24, X
    481a:	93 2f       	mov	r25, r19
    481c:	90 95       	com	r25
    481e:	89 23       	and	r24, r25
    4820:	8c 93       	st	X, r24
		*out &= ~bit;
    4822:	88 81       	ld	r24, Y
    4824:	89 23       	and	r24, r25
    4826:	0b c0       	rjmp	.+22     	; 0x483e <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4828:	62 30       	cpi	r22, 0x02	; 2
    482a:	61 f4       	brne	.+24     	; 0x4844 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    482c:	2f b7       	in	r18, 0x3f	; 63
                cli();
    482e:	f8 94       	cli
		*reg &= ~bit;
    4830:	8c 91       	ld	r24, X
    4832:	93 2f       	mov	r25, r19
    4834:	90 95       	com	r25
    4836:	89 23       	and	r24, r25
    4838:	8c 93       	st	X, r24
		*out |= bit;
    483a:	88 81       	ld	r24, Y
    483c:	83 2b       	or	r24, r19
    483e:	88 83       	st	Y, r24
		SREG = oldSREG;
    4840:	2f bf       	out	0x3f, r18	; 63
    4842:	06 c0       	rjmp	.+12     	; 0x4850 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    4844:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4846:	f8 94       	cli
		*reg |= bit;
    4848:	8c 91       	ld	r24, X
    484a:	83 2b       	or	r24, r19
    484c:	8c 93       	st	X, r24
		SREG = oldSREG;
    484e:	9f bf       	out	0x3f, r25	; 63
	}
}
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	08 95       	ret

00004856 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    4856:	48 2f       	mov	r20, r24
    4858:	50 e0       	ldi	r21, 0x00	; 0
    485a:	ca 01       	movw	r24, r20
    485c:	8e 5e       	subi	r24, 0xEE	; 238
    485e:	99 4f       	sbci	r25, 0xF9	; 249
    4860:	fc 01       	movw	r30, r24
    4862:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    4864:	ca 01       	movw	r24, r20
    4866:	82 50       	subi	r24, 0x02	; 2
    4868:	9a 4f       	sbci	r25, 0xFA	; 250
    486a:	fc 01       	movw	r30, r24
    486c:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    486e:	46 51       	subi	r20, 0x16	; 22
    4870:	5a 4f       	sbci	r21, 0xFA	; 250
    4872:	fa 01       	movw	r30, r20
    4874:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4876:	33 23       	and	r19, r19
    4878:	09 f4       	brne	.+2      	; 0x487c <digitalWrite+0x26>
    487a:	40 c0       	rjmp	.+128    	; 0x48fc <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    487c:	22 23       	and	r18, r18
    487e:	51 f1       	breq	.+84     	; 0x48d4 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4880:	23 30       	cpi	r18, 0x03	; 3
    4882:	71 f0       	breq	.+28     	; 0x48a0 <digitalWrite+0x4a>
    4884:	24 30       	cpi	r18, 0x04	; 4
    4886:	28 f4       	brcc	.+10     	; 0x4892 <digitalWrite+0x3c>
    4888:	21 30       	cpi	r18, 0x01	; 1
    488a:	a1 f0       	breq	.+40     	; 0x48b4 <digitalWrite+0x5e>
    488c:	22 30       	cpi	r18, 0x02	; 2
    488e:	11 f5       	brne	.+68     	; 0x48d4 <digitalWrite+0x7e>
    4890:	14 c0       	rjmp	.+40     	; 0x48ba <digitalWrite+0x64>
    4892:	26 30       	cpi	r18, 0x06	; 6
    4894:	b1 f0       	breq	.+44     	; 0x48c2 <digitalWrite+0x6c>
    4896:	27 30       	cpi	r18, 0x07	; 7
    4898:	c1 f0       	breq	.+48     	; 0x48ca <digitalWrite+0x74>
    489a:	24 30       	cpi	r18, 0x04	; 4
    489c:	d9 f4       	brne	.+54     	; 0x48d4 <digitalWrite+0x7e>
    489e:	04 c0       	rjmp	.+8      	; 0x48a8 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    48a0:	80 91 80 00 	lds	r24, 0x0080
    48a4:	8f 77       	andi	r24, 0x7F	; 127
    48a6:	03 c0       	rjmp	.+6      	; 0x48ae <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    48a8:	80 91 80 00 	lds	r24, 0x0080
    48ac:	8f 7d       	andi	r24, 0xDF	; 223
    48ae:	80 93 80 00 	sts	0x0080, r24
    48b2:	10 c0       	rjmp	.+32     	; 0x48d4 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    48b4:	84 b5       	in	r24, 0x24	; 36
    48b6:	8f 77       	andi	r24, 0x7F	; 127
    48b8:	02 c0       	rjmp	.+4      	; 0x48be <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    48ba:	84 b5       	in	r24, 0x24	; 36
    48bc:	8f 7d       	andi	r24, 0xDF	; 223
    48be:	84 bd       	out	0x24, r24	; 36
    48c0:	09 c0       	rjmp	.+18     	; 0x48d4 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    48c2:	80 91 b0 00 	lds	r24, 0x00B0
    48c6:	8f 77       	andi	r24, 0x7F	; 127
    48c8:	03 c0       	rjmp	.+6      	; 0x48d0 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    48ca:	80 91 b0 00 	lds	r24, 0x00B0
    48ce:	8f 7d       	andi	r24, 0xDF	; 223
    48d0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    48d4:	e3 2f       	mov	r30, r19
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	ee 0f       	add	r30, r30
    48da:	ff 1f       	adc	r31, r31
    48dc:	ea 52       	subi	r30, 0x2A	; 42
    48de:	fa 4f       	sbci	r31, 0xFA	; 250
    48e0:	a5 91       	lpm	r26, Z+
    48e2:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    48e4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    48e6:	f8 94       	cli

	if (val == LOW) {
    48e8:	66 23       	and	r22, r22
    48ea:	21 f4       	brne	.+8      	; 0x48f4 <digitalWrite+0x9e>
		*out &= ~bit;
    48ec:	8c 91       	ld	r24, X
    48ee:	90 95       	com	r25
    48f0:	89 23       	and	r24, r25
    48f2:	02 c0       	rjmp	.+4      	; 0x48f8 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    48f4:	8c 91       	ld	r24, X
    48f6:	89 2b       	or	r24, r25
    48f8:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    48fa:	2f bf       	out	0x3f, r18	; 63
    48fc:	08 95       	ret

000048fe <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    48fe:	08 95       	ret

00004900 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    4900:	1f 92       	push	r1
    4902:	0f 92       	push	r0
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	0f 92       	push	r0
    4908:	11 24       	eor	r1, r1
    490a:	2f 93       	push	r18
    490c:	3f 93       	push	r19
    490e:	4f 93       	push	r20
    4910:	8f 93       	push	r24
    4912:	9f 93       	push	r25
    4914:	ef 93       	push	r30
    4916:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    4918:	80 91 c0 00 	lds	r24, 0x00C0
    491c:	82 fd       	sbrc	r24, 2
    491e:	1d c0       	rjmp	.+58     	; 0x495a <__vector_18+0x5a>
      unsigned char c = UDR0;
    4920:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4924:	20 91 bf 02 	lds	r18, 0x02BF
    4928:	30 91 c0 02 	lds	r19, 0x02C0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    492c:	2f 5f       	subi	r18, 0xFF	; 255
    492e:	3f 4f       	sbci	r19, 0xFF	; 255
    4930:	2f 73       	andi	r18, 0x3F	; 63
    4932:	30 70       	andi	r19, 0x00	; 0
    4934:	80 91 c1 02 	lds	r24, 0x02C1
    4938:	90 91 c2 02 	lds	r25, 0x02C2
    493c:	28 17       	cp	r18, r24
    493e:	39 07       	cpc	r19, r25
    4940:	71 f0       	breq	.+28     	; 0x495e <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    4942:	e0 91 bf 02 	lds	r30, 0x02BF
    4946:	f0 91 c0 02 	lds	r31, 0x02C0
    494a:	e1 58       	subi	r30, 0x81	; 129
    494c:	fd 4f       	sbci	r31, 0xFD	; 253
    494e:	40 83       	st	Z, r20
    buffer->head = i;
    4950:	30 93 c0 02 	sts	0x02C0, r19
    4954:	20 93 bf 02 	sts	0x02BF, r18
    4958:	02 c0       	rjmp	.+4      	; 0x495e <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    495a:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    495e:	ff 91       	pop	r31
    4960:	ef 91       	pop	r30
    4962:	9f 91       	pop	r25
    4964:	8f 91       	pop	r24
    4966:	4f 91       	pop	r20
    4968:	3f 91       	pop	r19
    496a:	2f 91       	pop	r18
    496c:	0f 90       	pop	r0
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	0f 90       	pop	r0
    4972:	1f 90       	pop	r1
    4974:	18 95       	reti

00004976 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4976:	e0 91 13 03 	lds	r30, 0x0313
    497a:	f0 91 14 03 	lds	r31, 0x0314
    497e:	e0 5c       	subi	r30, 0xC0	; 192
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	81 91       	ld	r24, Z+
    4984:	91 91       	ld	r25, Z+
    4986:	20 81       	ld	r18, Z
    4988:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    498a:	82 1b       	sub	r24, r18
    498c:	93 0b       	sbc	r25, r19
    498e:	8f 73       	andi	r24, 0x3F	; 63
    4990:	90 70       	andi	r25, 0x00	; 0
    4992:	89 2b       	or	r24, r25
    4994:	11 f0       	breq	.+4      	; 0x499a <serialEventRun()+0x24>
    4996:	0e 94 7f 24 	call	0x48fe	; 0x48fe <serialEvent()>
    499a:	08 95       	ret

0000499c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    499c:	1f 92       	push	r1
    499e:	0f 92       	push	r0
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	0f 92       	push	r0
    49a4:	11 24       	eor	r1, r1
    49a6:	2f 93       	push	r18
    49a8:	3f 93       	push	r19
    49aa:	8f 93       	push	r24
    49ac:	9f 93       	push	r25
    49ae:	ef 93       	push	r30
    49b0:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    49b2:	20 91 03 03 	lds	r18, 0x0303
    49b6:	30 91 04 03 	lds	r19, 0x0304
    49ba:	80 91 05 03 	lds	r24, 0x0305
    49be:	90 91 06 03 	lds	r25, 0x0306
    49c2:	28 17       	cp	r18, r24
    49c4:	39 07       	cpc	r19, r25
    49c6:	31 f4       	brne	.+12     	; 0x49d4 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    49c8:	80 91 c1 00 	lds	r24, 0x00C1
    49cc:	8f 7d       	andi	r24, 0xDF	; 223
    49ce:	80 93 c1 00 	sts	0x00C1, r24
    49d2:	14 c0       	rjmp	.+40     	; 0x49fc <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    49d4:	e0 91 05 03 	lds	r30, 0x0305
    49d8:	f0 91 06 03 	lds	r31, 0x0306
    49dc:	ed 53       	subi	r30, 0x3D	; 61
    49de:	fd 4f       	sbci	r31, 0xFD	; 253
    49e0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    49e2:	80 91 05 03 	lds	r24, 0x0305
    49e6:	90 91 06 03 	lds	r25, 0x0306
    49ea:	01 96       	adiw	r24, 0x01	; 1
    49ec:	8f 73       	andi	r24, 0x3F	; 63
    49ee:	90 70       	andi	r25, 0x00	; 0
    49f0:	90 93 06 03 	sts	0x0306, r25
    49f4:	80 93 05 03 	sts	0x0305, r24
	
  #if defined(UDR0)
    UDR0 = c;
    49f8:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    49fc:	ff 91       	pop	r31
    49fe:	ef 91       	pop	r30
    4a00:	9f 91       	pop	r25
    4a02:	8f 91       	pop	r24
    4a04:	3f 91       	pop	r19
    4a06:	2f 91       	pop	r18
    4a08:	0f 90       	pop	r0
    4a0a:	0f be       	out	0x3f, r0	; 63
    4a0c:	0f 90       	pop	r0
    4a0e:	1f 90       	pop	r1
    4a10:	18 95       	reti

00004a12 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4a12:	af 92       	push	r10
    4a14:	bf 92       	push	r11
    4a16:	df 92       	push	r13
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	ec 01       	movw	r28, r24
    4a26:	7a 01       	movw	r14, r20
    4a28:	8b 01       	movw	r16, r22
    4a2a:	dd 24       	eor	r13, r13
    4a2c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4a2e:	91 e0       	ldi	r25, 0x01	; 1
    4a30:	a9 2e       	mov	r10, r25
    4a32:	b1 2c       	mov	r11, r1
    4a34:	ec 89       	ldd	r30, Y+20	; 0x14
    4a36:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    4a38:	dd 20       	and	r13, r13
    4a3a:	69 f0       	breq	.+26     	; 0x4a56 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    4a3c:	c5 01       	movw	r24, r10
    4a3e:	08 a0       	ldd	r0, Y+32	; 0x20
    4a40:	02 c0       	rjmp	.+4      	; 0x4a46 <HardwareSerial::begin(unsigned long)+0x34>
    4a42:	88 0f       	add	r24, r24
    4a44:	99 1f       	adc	r25, r25
    4a46:	0a 94       	dec	r0
    4a48:	e2 f7       	brpl	.-8      	; 0x4a42 <HardwareSerial::begin(unsigned long)+0x30>
    4a4a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4a4c:	60 e9       	ldi	r22, 0x90	; 144
    4a4e:	70 ed       	ldi	r23, 0xD0	; 208
    4a50:	83 e0       	ldi	r24, 0x03	; 3
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	05 c0       	rjmp	.+10     	; 0x4a60 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    4a56:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4a58:	68 e4       	ldi	r22, 0x48	; 72
    4a5a:	78 ee       	ldi	r23, 0xE8	; 232
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	a8 01       	movw	r20, r16
    4a62:	97 01       	movw	r18, r14
    4a64:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__udivmodsi4>
    4a68:	21 50       	subi	r18, 0x01	; 1
    4a6a:	30 40       	sbci	r19, 0x00	; 0
    4a6c:	40 40       	sbci	r20, 0x00	; 0
    4a6e:	50 40       	sbci	r21, 0x00	; 0
    4a70:	56 95       	lsr	r21
    4a72:	47 95       	ror	r20
    4a74:	37 95       	ror	r19
    4a76:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4a78:	80 e1       	ldi	r24, 0x10	; 16
    4a7a:	20 30       	cpi	r18, 0x00	; 0
    4a7c:	38 07       	cpc	r19, r24
    4a7e:	20 f0       	brcs	.+8      	; 0x4a88 <HardwareSerial::begin(unsigned long)+0x76>
    4a80:	dd 20       	and	r13, r13
    4a82:	11 f0       	breq	.+4      	; 0x4a88 <HardwareSerial::begin(unsigned long)+0x76>
    4a84:	dd 24       	eor	r13, r13
    4a86:	d6 cf       	rjmp	.-84     	; 0x4a34 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4a88:	e8 89       	ldd	r30, Y+16	; 0x10
    4a8a:	f9 89       	ldd	r31, Y+17	; 0x11
    4a8c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4a8e:	ea 89       	ldd	r30, Y+18	; 0x12
    4a90:	fb 89       	ldd	r31, Y+19	; 0x13
    4a92:	20 83       	st	Z, r18

  transmitting = false;
    4a94:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    4a96:	ee 89       	ldd	r30, Y+22	; 0x16
    4a98:	ff 89       	ldd	r31, Y+23	; 0x17
    4a9a:	40 81       	ld	r20, Z
    4a9c:	21 e0       	ldi	r18, 0x01	; 1
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	c9 01       	movw	r24, r18
    4aa2:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4aa4:	02 c0       	rjmp	.+4      	; 0x4aaa <HardwareSerial::begin(unsigned long)+0x98>
    4aa6:	88 0f       	add	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	0a 94       	dec	r0
    4aac:	e2 f7       	brpl	.-8      	; 0x4aa6 <HardwareSerial::begin(unsigned long)+0x94>
    4aae:	48 2b       	or	r20, r24
    4ab0:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4ab2:	ee 89       	ldd	r30, Y+22	; 0x16
    4ab4:	ff 89       	ldd	r31, Y+23	; 0x17
    4ab6:	40 81       	ld	r20, Z
    4ab8:	c9 01       	movw	r24, r18
    4aba:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4abc:	02 c0       	rjmp	.+4      	; 0x4ac2 <HardwareSerial::begin(unsigned long)+0xb0>
    4abe:	88 0f       	add	r24, r24
    4ac0:	99 1f       	adc	r25, r25
    4ac2:	0a 94       	dec	r0
    4ac4:	e2 f7       	brpl	.-8      	; 0x4abe <HardwareSerial::begin(unsigned long)+0xac>
    4ac6:	48 2b       	or	r20, r24
    4ac8:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4aca:	ee 89       	ldd	r30, Y+22	; 0x16
    4acc:	ff 89       	ldd	r31, Y+23	; 0x17
    4ace:	40 81       	ld	r20, Z
    4ad0:	c9 01       	movw	r24, r18
    4ad2:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <HardwareSerial::begin(unsigned long)+0xc8>
    4ad6:	88 0f       	add	r24, r24
    4ad8:	99 1f       	adc	r25, r25
    4ada:	0a 94       	dec	r0
    4adc:	e2 f7       	brpl	.-8      	; 0x4ad6 <HardwareSerial::begin(unsigned long)+0xc4>
    4ade:	48 2b       	or	r20, r24
    4ae0:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4ae2:	ee 89       	ldd	r30, Y+22	; 0x16
    4ae4:	ff 89       	ldd	r31, Y+23	; 0x17
    4ae6:	80 81       	ld	r24, Z
    4ae8:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4aea:	02 c0       	rjmp	.+4      	; 0x4af0 <HardwareSerial::begin(unsigned long)+0xde>
    4aec:	22 0f       	add	r18, r18
    4aee:	33 1f       	adc	r19, r19
    4af0:	0a 94       	dec	r0
    4af2:	e2 f7       	brpl	.-8      	; 0x4aec <HardwareSerial::begin(unsigned long)+0xda>
    4af4:	20 95       	com	r18
    4af6:	28 23       	and	r18, r24
    4af8:	20 83       	st	Z, r18
}
    4afa:	df 91       	pop	r29
    4afc:	cf 91       	pop	r28
    4afe:	1f 91       	pop	r17
    4b00:	0f 91       	pop	r16
    4b02:	ff 90       	pop	r15
    4b04:	ef 90       	pop	r14
    4b06:	df 90       	pop	r13
    4b08:	bf 90       	pop	r11
    4b0a:	af 90       	pop	r10
    4b0c:	08 95       	ret

00004b0e <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
    4b12:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4b14:	1e 96       	adiw	r26, 0x0e	; 14
    4b16:	8d 91       	ld	r24, X+
    4b18:	9c 91       	ld	r25, X
    4b1a:	1f 97       	sbiw	r26, 0x0f	; 15
    4b1c:	ec 01       	movw	r28, r24
    4b1e:	c0 5c       	subi	r28, 0xC0	; 192
    4b20:	df 4f       	sbci	r29, 0xFF	; 255
    4b22:	fc 01       	movw	r30, r24
    4b24:	ee 5b       	subi	r30, 0xBE	; 190
    4b26:	ff 4f       	sbci	r31, 0xFF	; 255
    4b28:	28 81       	ld	r18, Y
    4b2a:	39 81       	ldd	r19, Y+1	; 0x01
    4b2c:	80 81       	ld	r24, Z
    4b2e:	91 81       	ldd	r25, Z+1	; 0x01
    4b30:	28 17       	cp	r18, r24
    4b32:	39 07       	cpc	r19, r25
    4b34:	c9 f7       	brne	.-14     	; 0x4b28 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    4b36:	56 96       	adiw	r26, 0x16	; 22
    4b38:	ed 91       	ld	r30, X+
    4b3a:	fc 91       	ld	r31, X
    4b3c:	57 97       	sbiw	r26, 0x17	; 23
    4b3e:	40 81       	ld	r20, Z
    4b40:	21 e0       	ldi	r18, 0x01	; 1
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	c9 01       	movw	r24, r18
    4b46:	5c 96       	adiw	r26, 0x1c	; 28
    4b48:	0c 90       	ld	r0, X
    4b4a:	5c 97       	sbiw	r26, 0x1c	; 28
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <HardwareSerial::end()+0x44>
    4b4e:	88 0f       	add	r24, r24
    4b50:	99 1f       	adc	r25, r25
    4b52:	0a 94       	dec	r0
    4b54:	e2 f7       	brpl	.-8      	; 0x4b4e <HardwareSerial::end()+0x40>
    4b56:	80 95       	com	r24
    4b58:	84 23       	and	r24, r20
    4b5a:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    4b5c:	56 96       	adiw	r26, 0x16	; 22
    4b5e:	ed 91       	ld	r30, X+
    4b60:	fc 91       	ld	r31, X
    4b62:	57 97       	sbiw	r26, 0x17	; 23
    4b64:	40 81       	ld	r20, Z
    4b66:	c9 01       	movw	r24, r18
    4b68:	5d 96       	adiw	r26, 0x1d	; 29
    4b6a:	0c 90       	ld	r0, X
    4b6c:	5d 97       	sbiw	r26, 0x1d	; 29
    4b6e:	02 c0       	rjmp	.+4      	; 0x4b74 <HardwareSerial::end()+0x66>
    4b70:	88 0f       	add	r24, r24
    4b72:	99 1f       	adc	r25, r25
    4b74:	0a 94       	dec	r0
    4b76:	e2 f7       	brpl	.-8      	; 0x4b70 <HardwareSerial::end()+0x62>
    4b78:	80 95       	com	r24
    4b7a:	84 23       	and	r24, r20
    4b7c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    4b7e:	56 96       	adiw	r26, 0x16	; 22
    4b80:	ed 91       	ld	r30, X+
    4b82:	fc 91       	ld	r31, X
    4b84:	57 97       	sbiw	r26, 0x17	; 23
    4b86:	40 81       	ld	r20, Z
    4b88:	c9 01       	movw	r24, r18
    4b8a:	5e 96       	adiw	r26, 0x1e	; 30
    4b8c:	0c 90       	ld	r0, X
    4b8e:	5e 97       	sbiw	r26, 0x1e	; 30
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <HardwareSerial::end()+0x88>
    4b92:	88 0f       	add	r24, r24
    4b94:	99 1f       	adc	r25, r25
    4b96:	0a 94       	dec	r0
    4b98:	e2 f7       	brpl	.-8      	; 0x4b92 <HardwareSerial::end()+0x84>
    4b9a:	80 95       	com	r24
    4b9c:	84 23       	and	r24, r20
    4b9e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    4ba0:	56 96       	adiw	r26, 0x16	; 22
    4ba2:	ed 91       	ld	r30, X+
    4ba4:	fc 91       	ld	r31, X
    4ba6:	57 97       	sbiw	r26, 0x17	; 23
    4ba8:	80 81       	ld	r24, Z
    4baa:	5f 96       	adiw	r26, 0x1f	; 31
    4bac:	0c 90       	ld	r0, X
    4bae:	5f 97       	sbiw	r26, 0x1f	; 31
    4bb0:	02 c0       	rjmp	.+4      	; 0x4bb6 <HardwareSerial::end()+0xa8>
    4bb2:	22 0f       	add	r18, r18
    4bb4:	33 1f       	adc	r19, r19
    4bb6:	0a 94       	dec	r0
    4bb8:	e2 f7       	brpl	.-8      	; 0x4bb2 <HardwareSerial::end()+0xa4>
    4bba:	20 95       	com	r18
    4bbc:	28 23       	and	r18, r24
    4bbe:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4bc0:	1c 96       	adiw	r26, 0x0c	; 12
    4bc2:	ed 91       	ld	r30, X+
    4bc4:	fc 91       	ld	r31, X
    4bc6:	1d 97       	sbiw	r26, 0x0d	; 13
    4bc8:	ee 5b       	subi	r30, 0xBE	; 190
    4bca:	ff 4f       	sbci	r31, 0xFF	; 255
    4bcc:	80 81       	ld	r24, Z
    4bce:	91 81       	ldd	r25, Z+1	; 0x01
    4bd0:	92 93       	st	-Z, r25
    4bd2:	82 93       	st	-Z, r24
}
    4bd4:	df 91       	pop	r29
    4bd6:	cf 91       	pop	r28
    4bd8:	08 95       	ret

00004bda <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4bda:	dc 01       	movw	r26, r24
    4bdc:	1c 96       	adiw	r26, 0x0c	; 12
    4bde:	ed 91       	ld	r30, X+
    4be0:	fc 91       	ld	r31, X
    4be2:	1d 97       	sbiw	r26, 0x0d	; 13
    4be4:	e0 5c       	subi	r30, 0xC0	; 192
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	21 91       	ld	r18, Z+
    4bea:	31 91       	ld	r19, Z+
    4bec:	80 81       	ld	r24, Z
    4bee:	91 81       	ldd	r25, Z+1	; 0x01
    4bf0:	28 1b       	sub	r18, r24
    4bf2:	39 0b       	sbc	r19, r25
    4bf4:	2f 73       	andi	r18, 0x3F	; 63
    4bf6:	30 70       	andi	r19, 0x00	; 0
}
    4bf8:	c9 01       	movw	r24, r18
    4bfa:	08 95       	ret

00004bfc <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	1c 96       	adiw	r26, 0x0c	; 12
    4c00:	ed 91       	ld	r30, X+
    4c02:	fc 91       	ld	r31, X
    4c04:	1d 97       	sbiw	r26, 0x0d	; 13
    4c06:	e0 5c       	subi	r30, 0xC0	; 192
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	20 81       	ld	r18, Z
    4c0c:	31 81       	ldd	r19, Z+1	; 0x01
    4c0e:	e0 54       	subi	r30, 0x40	; 64
    4c10:	f0 40       	sbci	r31, 0x00	; 0
    4c12:	df 01       	movw	r26, r30
    4c14:	ae 5b       	subi	r26, 0xBE	; 190
    4c16:	bf 4f       	sbci	r27, 0xFF	; 255
    4c18:	8d 91       	ld	r24, X+
    4c1a:	9c 91       	ld	r25, X
    4c1c:	11 97       	sbiw	r26, 0x01	; 1
    4c1e:	28 17       	cp	r18, r24
    4c20:	39 07       	cpc	r19, r25
    4c22:	19 f4       	brne	.+6      	; 0x4c2a <HardwareSerial::peek()+0x2e>
    4c24:	2f ef       	ldi	r18, 0xFF	; 255
    4c26:	3f ef       	ldi	r19, 0xFF	; 255
    4c28:	07 c0       	rjmp	.+14     	; 0x4c38 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4c2a:	8d 91       	ld	r24, X+
    4c2c:	9c 91       	ld	r25, X
    4c2e:	e8 0f       	add	r30, r24
    4c30:	f9 1f       	adc	r31, r25
    4c32:	80 81       	ld	r24, Z
    4c34:	28 2f       	mov	r18, r24
    4c36:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4c38:	c9 01       	movw	r24, r18
    4c3a:	08 95       	ret

00004c3c <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	1c 96       	adiw	r26, 0x0c	; 12
    4c40:	ed 91       	ld	r30, X+
    4c42:	fc 91       	ld	r31, X
    4c44:	1d 97       	sbiw	r26, 0x0d	; 13
    4c46:	e0 5c       	subi	r30, 0xC0	; 192
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	20 81       	ld	r18, Z
    4c4c:	31 81       	ldd	r19, Z+1	; 0x01
    4c4e:	e0 54       	subi	r30, 0x40	; 64
    4c50:	f0 40       	sbci	r31, 0x00	; 0
    4c52:	df 01       	movw	r26, r30
    4c54:	ae 5b       	subi	r26, 0xBE	; 190
    4c56:	bf 4f       	sbci	r27, 0xFF	; 255
    4c58:	8d 91       	ld	r24, X+
    4c5a:	9c 91       	ld	r25, X
    4c5c:	11 97       	sbiw	r26, 0x01	; 1
    4c5e:	28 17       	cp	r18, r24
    4c60:	39 07       	cpc	r19, r25
    4c62:	19 f4       	brne	.+6      	; 0x4c6a <HardwareSerial::read()+0x2e>
    4c64:	2f ef       	ldi	r18, 0xFF	; 255
    4c66:	3f ef       	ldi	r19, 0xFF	; 255
    4c68:	10 c0       	rjmp	.+32     	; 0x4c8a <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4c6a:	8d 91       	ld	r24, X+
    4c6c:	9c 91       	ld	r25, X
    4c6e:	11 97       	sbiw	r26, 0x01	; 1
    4c70:	e8 0f       	add	r30, r24
    4c72:	f9 1f       	adc	r31, r25
    4c74:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4c76:	8d 91       	ld	r24, X+
    4c78:	9c 91       	ld	r25, X
    4c7a:	11 97       	sbiw	r26, 0x01	; 1
    4c7c:	01 96       	adiw	r24, 0x01	; 1
    4c7e:	8f 73       	andi	r24, 0x3F	; 63
    4c80:	90 70       	andi	r25, 0x00	; 0
    4c82:	11 96       	adiw	r26, 0x01	; 1
    4c84:	9c 93       	st	X, r25
    4c86:	8e 93       	st	-X, r24
    return c;
    4c88:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4c8a:	c9 01       	movw	r24, r18
    4c8c:	08 95       	ret

00004c8e <HardwareSerial::flush()>:

void HardwareSerial::flush()
    4c8e:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    4c90:	91 96       	adiw	r26, 0x21	; 33
    4c92:	8c 91       	ld	r24, X
    4c94:	91 97       	sbiw	r26, 0x21	; 33
    4c96:	88 23       	and	r24, r24
    4c98:	39 f0       	breq	.+14     	; 0x4ca8 <HardwareSerial::flush()+0x1a>
    4c9a:	54 96       	adiw	r26, 0x14	; 20
    4c9c:	ed 91       	ld	r30, X+
    4c9e:	fc 91       	ld	r31, X
    4ca0:	55 97       	sbiw	r26, 0x15	; 21
    4ca2:	80 81       	ld	r24, Z
    4ca4:	86 ff       	sbrs	r24, 6
    4ca6:	f9 cf       	rjmp	.-14     	; 0x4c9a <HardwareSerial::flush()+0xc>
  transmitting = false;
    4ca8:	91 96       	adiw	r26, 0x21	; 33
    4caa:	1c 92       	st	X, r1
}
    4cac:	08 95       	ret

00004cae <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4cb4:	ee 85       	ldd	r30, Y+14	; 0x0e
    4cb6:	ff 85       	ldd	r31, Y+15	; 0x0f
    4cb8:	e0 5c       	subi	r30, 0xC0	; 192
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	20 81       	ld	r18, Z
    4cbe:	31 81       	ldd	r19, Z+1	; 0x01
    4cc0:	e0 54       	subi	r30, 0x40	; 64
    4cc2:	f0 40       	sbci	r31, 0x00	; 0
    4cc4:	2f 5f       	subi	r18, 0xFF	; 255
    4cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc8:	2f 73       	andi	r18, 0x3F	; 63
    4cca:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    4ccc:	df 01       	movw	r26, r30
    4cce:	ae 5b       	subi	r26, 0xBE	; 190
    4cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    4cd2:	8d 91       	ld	r24, X+
    4cd4:	9c 91       	ld	r25, X
    4cd6:	11 97       	sbiw	r26, 0x01	; 1
    4cd8:	28 17       	cp	r18, r24
    4cda:	39 07       	cpc	r19, r25
    4cdc:	d1 f3       	breq	.-12     	; 0x4cd2 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    4cde:	e0 5c       	subi	r30, 0xC0	; 192
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	80 81       	ld	r24, Z
    4ce4:	91 81       	ldd	r25, Z+1	; 0x01
    4ce6:	e0 54       	subi	r30, 0x40	; 64
    4ce8:	f0 40       	sbci	r31, 0x00	; 0
    4cea:	e8 0f       	add	r30, r24
    4cec:	f9 1f       	adc	r31, r25
    4cee:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    4cf0:	ee 85       	ldd	r30, Y+14	; 0x0e
    4cf2:	ff 85       	ldd	r31, Y+15	; 0x0f
    4cf4:	e0 5c       	subi	r30, 0xC0	; 192
    4cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf8:	31 83       	std	Z+1, r19	; 0x01
    4cfa:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    4cfc:	ee 89       	ldd	r30, Y+22	; 0x16
    4cfe:	ff 89       	ldd	r31, Y+23	; 0x17
    4d00:	20 81       	ld	r18, Z
    4d02:	81 e0       	ldi	r24, 0x01	; 1
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4d08:	02 c0       	rjmp	.+4      	; 0x4d0e <HardwareSerial::write(unsigned char)+0x60>
    4d0a:	88 0f       	add	r24, r24
    4d0c:	99 1f       	adc	r25, r25
    4d0e:	0a 94       	dec	r0
    4d10:	e2 f7       	brpl	.-8      	; 0x4d0a <HardwareSerial::write(unsigned char)+0x5c>
    4d12:	28 2b       	or	r18, r24
    4d14:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    4d1a:	ec 89       	ldd	r30, Y+20	; 0x14
    4d1c:	fd 89       	ldd	r31, Y+21	; 0x15
    4d1e:	80 81       	ld	r24, Z
    4d20:	80 64       	ori	r24, 0x40	; 64
    4d22:	80 83       	st	Z, r24
  
  return 1;
}
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	08 95       	ret

00004d2e <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    4d2e:	10 92 0a 03 	sts	0x030A, r1
    4d32:	10 92 09 03 	sts	0x0309, r1
    4d36:	88 ee       	ldi	r24, 0xE8	; 232
    4d38:	93 e0       	ldi	r25, 0x03	; 3
    4d3a:	a0 e0       	ldi	r26, 0x00	; 0
    4d3c:	b0 e0       	ldi	r27, 0x00	; 0
    4d3e:	80 93 0b 03 	sts	0x030B, r24
    4d42:	90 93 0c 03 	sts	0x030C, r25
    4d46:	a0 93 0d 03 	sts	0x030D, r26
    4d4a:	b0 93 0e 03 	sts	0x030E, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4d4e:	89 e1       	ldi	r24, 0x19	; 25
    4d50:	91 e0       	ldi	r25, 0x01	; 1
    4d52:	90 93 08 03 	sts	0x0308, r25
    4d56:	80 93 07 03 	sts	0x0307, r24
{
  _rx_buffer = rx_buffer;
    4d5a:	8f e7       	ldi	r24, 0x7F	; 127
    4d5c:	92 e0       	ldi	r25, 0x02	; 2
    4d5e:	90 93 14 03 	sts	0x0314, r25
    4d62:	80 93 13 03 	sts	0x0313, r24
  _tx_buffer = tx_buffer;
    4d66:	83 ec       	ldi	r24, 0xC3	; 195
    4d68:	92 e0       	ldi	r25, 0x02	; 2
    4d6a:	90 93 16 03 	sts	0x0316, r25
    4d6e:	80 93 15 03 	sts	0x0315, r24
  _ubrrh = ubrrh;
    4d72:	85 ec       	ldi	r24, 0xC5	; 197
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	90 93 18 03 	sts	0x0318, r25
    4d7a:	80 93 17 03 	sts	0x0317, r24
  _ubrrl = ubrrl;
    4d7e:	84 ec       	ldi	r24, 0xC4	; 196
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	90 93 1a 03 	sts	0x031A, r25
    4d86:	80 93 19 03 	sts	0x0319, r24
  _ucsra = ucsra;
    4d8a:	80 ec       	ldi	r24, 0xC0	; 192
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	90 93 1c 03 	sts	0x031C, r25
    4d92:	80 93 1b 03 	sts	0x031B, r24
  _ucsrb = ucsrb;
    4d96:	81 ec       	ldi	r24, 0xC1	; 193
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	90 93 1e 03 	sts	0x031E, r25
    4d9e:	80 93 1d 03 	sts	0x031D, r24
  _ucsrc = ucsrc;
    4da2:	82 ec       	ldi	r24, 0xC2	; 194
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	90 93 20 03 	sts	0x0320, r25
    4daa:	80 93 1f 03 	sts	0x031F, r24
  _udr = udr;
    4dae:	86 ec       	ldi	r24, 0xC6	; 198
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	90 93 22 03 	sts	0x0322, r25
    4db6:	80 93 21 03 	sts	0x0321, r24
  _rxen = rxen;
    4dba:	84 e0       	ldi	r24, 0x04	; 4
    4dbc:	80 93 23 03 	sts	0x0323, r24
  _txen = txen;
    4dc0:	83 e0       	ldi	r24, 0x03	; 3
    4dc2:	80 93 24 03 	sts	0x0324, r24
  _rxcie = rxcie;
    4dc6:	87 e0       	ldi	r24, 0x07	; 7
    4dc8:	80 93 25 03 	sts	0x0325, r24
  _udrie = udrie;
    4dcc:	85 e0       	ldi	r24, 0x05	; 5
    4dce:	80 93 26 03 	sts	0x0326, r24
  _u2x = u2x;
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	80 93 27 03 	sts	0x0327, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4dd8:	08 95       	ret

00004dda <main>:
#include <Arduino.h>

int main(void)
    4dda:	cf 93       	push	r28
    4ddc:	df 93       	push	r29
{
	init();
    4dde:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4de2:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4de6:	cb eb       	ldi	r28, 0xBB	; 187
    4de8:	d4 e2       	ldi	r29, 0x24	; 36
#endif
	
	setup();
    
	for (;;) {
		loop();
    4dea:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <loop>
		if (serialEventRun) serialEventRun();
    4dee:	20 97       	sbiw	r28, 0x00	; 0
    4df0:	e1 f3       	breq	.-8      	; 0x4dea <main+0x10>
    4df2:	0e 94 bb 24 	call	0x4976	; 0x4976 <serialEventRun()>
    4df6:	f9 cf       	rjmp	.-14     	; 0x4dea <main+0x10>

00004df8 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    4df8:	cf 92       	push	r12
    4dfa:	df 92       	push	r13
    4dfc:	ef 92       	push	r14
    4dfe:	ff 92       	push	r15
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	7c 01       	movw	r14, r24
    4e0a:	6b 01       	movw	r12, r22
    4e0c:	8a 01       	movw	r16, r20
    4e0e:	c0 e0       	ldi	r28, 0x00	; 0
    4e10:	d0 e0       	ldi	r29, 0x00	; 0
    4e12:	0f c0       	rjmp	.+30     	; 0x4e32 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    4e14:	d6 01       	movw	r26, r12
    4e16:	6d 91       	ld	r22, X+
    4e18:	6d 01       	movw	r12, r26
    4e1a:	d7 01       	movw	r26, r14
    4e1c:	ed 91       	ld	r30, X+
    4e1e:	fc 91       	ld	r31, X
    4e20:	01 90       	ld	r0, Z+
    4e22:	f0 81       	ld	r31, Z
    4e24:	e0 2d       	mov	r30, r0
    4e26:	c7 01       	movw	r24, r14
    4e28:	09 95       	icall
    4e2a:	c8 0f       	add	r28, r24
    4e2c:	d9 1f       	adc	r29, r25
    4e2e:	01 50       	subi	r16, 0x01	; 1
    4e30:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4e32:	01 15       	cp	r16, r1
    4e34:	11 05       	cpc	r17, r1
    4e36:	71 f7       	brne	.-36     	; 0x4e14 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    4e38:	ce 01       	movw	r24, r28
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	1f 91       	pop	r17
    4e40:	0f 91       	pop	r16
    4e42:	ff 90       	pop	r15
    4e44:	ef 90       	pop	r14
    4e46:	df 90       	pop	r13
    4e48:	cf 90       	pop	r12
    4e4a:	08 95       	ret

00004e4c <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    4e4c:	ef 92       	push	r14
    4e4e:	ff 92       	push	r15
    4e50:	0f 93       	push	r16
    4e52:	1f 93       	push	r17
    4e54:	cf 93       	push	r28
    4e56:	df 93       	push	r29
    4e58:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    4e5a:	8b 01       	movw	r16, r22
    4e5c:	c0 e0       	ldi	r28, 0x00	; 0
    4e5e:	d0 e0       	ldi	r29, 0x00	; 0
    4e60:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    4e62:	0f 5f       	subi	r16, 0xFF	; 255
    4e64:	1f 4f       	sbci	r17, 0xFF	; 255
    4e66:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    4e68:	66 23       	and	r22, r22
    4e6a:	59 f0       	breq	.+22     	; 0x4e82 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    4e6c:	d7 01       	movw	r26, r14
    4e6e:	ed 91       	ld	r30, X+
    4e70:	fc 91       	ld	r31, X
    4e72:	01 90       	ld	r0, Z+
    4e74:	f0 81       	ld	r31, Z
    4e76:	e0 2d       	mov	r30, r0
    4e78:	c7 01       	movw	r24, r14
    4e7a:	09 95       	icall
    4e7c:	c8 0f       	add	r28, r24
    4e7e:	d9 1f       	adc	r29, r25
    4e80:	ef cf       	rjmp	.-34     	; 0x4e60 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    4e82:	ce 01       	movw	r24, r28
    4e84:	df 91       	pop	r29
    4e86:	cf 91       	pop	r28
    4e88:	1f 91       	pop	r17
    4e8a:	0f 91       	pop	r16
    4e8c:	ff 90       	pop	r15
    4e8e:	ef 90       	pop	r14
    4e90:	08 95       	ret

00004e92 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    4e92:	dc 01       	movw	r26, r24
{
  return write(c);
    4e94:	ed 91       	ld	r30, X+
    4e96:	fc 91       	ld	r31, X
    4e98:	01 90       	ld	r0, Z+
    4e9a:	f0 81       	ld	r31, Z
    4e9c:	e0 2d       	mov	r30, r0
    4e9e:	09 95       	icall
}
    4ea0:	08 95       	ret

00004ea2 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    4ea2:	ef 92       	push	r14
    4ea4:	ff 92       	push	r15
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4eac:	dc 01       	movw	r26, r24
    4eae:	ed 91       	ld	r30, X+
    4eb0:	fc 91       	ld	r31, X
    4eb2:	01 90       	ld	r0, Z+
    4eb4:	f0 81       	ld	r31, Z
    4eb6:	e0 2d       	mov	r30, r0
    4eb8:	6d e0       	ldi	r22, 0x0D	; 13
    4eba:	09 95       	icall
    4ebc:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    4ebe:	d8 01       	movw	r26, r16
    4ec0:	ed 91       	ld	r30, X+
    4ec2:	fc 91       	ld	r31, X
    4ec4:	01 90       	ld	r0, Z+
    4ec6:	f0 81       	ld	r31, Z
    4ec8:	e0 2d       	mov	r30, r0
    4eca:	c8 01       	movw	r24, r16
    4ecc:	6a e0       	ldi	r22, 0x0A	; 10
    4ece:	09 95       	icall
    4ed0:	9c 01       	movw	r18, r24
    4ed2:	2e 0d       	add	r18, r14
    4ed4:	3f 1d       	adc	r19, r15
    4ed6:	c9 01       	movw	r24, r18
    4ed8:	1f 91       	pop	r17
    4eda:	0f 91       	pop	r16
    4edc:	ff 90       	pop	r15
    4ede:	ef 90       	pop	r14
    4ee0:	08 95       	ret

00004ee2 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    4ee2:	ef 92       	push	r14
    4ee4:	ff 92       	push	r15
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    4eec:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <Print::print(__FlashStringHelper const*)>
    4ef0:	8c 01       	movw	r16, r24
  n += println();
    4ef2:	c7 01       	movw	r24, r14
    4ef4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
    4ef8:	9c 01       	movw	r18, r24
    4efa:	20 0f       	add	r18, r16
    4efc:	31 1f       	adc	r19, r17
  return n;
}
    4efe:	c9 01       	movw	r24, r18
    4f00:	1f 91       	pop	r17
    4f02:	0f 91       	pop	r16
    4f04:	ff 90       	pop	r15
    4f06:	ef 90       	pop	r14
    4f08:	08 95       	ret

00004f0a <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    4f10:	61 15       	cp	r22, r1
    4f12:	71 05       	cpc	r23, r1
    4f14:	19 f4       	brne	.+6      	; 0x4f1c <Print::write(char const*)+0x12>
    4f16:	20 e0       	ldi	r18, 0x00	; 0
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	0f c0       	rjmp	.+30     	; 0x4f3a <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    4f1c:	db 01       	movw	r26, r22
    4f1e:	0d 90       	ld	r0, X+
    4f20:	00 20       	and	r0, r0
    4f22:	e9 f7       	brne	.-6      	; 0x4f1e <Print::write(char const*)+0x14>
    4f24:	11 97       	sbiw	r26, 0x01	; 1
    4f26:	a6 1b       	sub	r26, r22
    4f28:	b7 0b       	sbc	r27, r23
    4f2a:	e8 81       	ld	r30, Y
    4f2c:	f9 81       	ldd	r31, Y+1	; 0x01
    4f2e:	02 80       	ldd	r0, Z+2	; 0x02
    4f30:	f3 81       	ldd	r31, Z+3	; 0x03
    4f32:	e0 2d       	mov	r30, r0
    4f34:	ad 01       	movw	r20, r26
    4f36:	09 95       	icall
    4f38:	9c 01       	movw	r18, r24
    }
    4f3a:	c9 01       	movw	r24, r18
    4f3c:	df 91       	pop	r29
    4f3e:	cf 91       	pop	r28
    4f40:	08 95       	ret

00004f42 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    4f42:	4f 92       	push	r4
    4f44:	5f 92       	push	r5
    4f46:	7f 92       	push	r7
    4f48:	8f 92       	push	r8
    4f4a:	9f 92       	push	r9
    4f4c:	af 92       	push	r10
    4f4e:	bf 92       	push	r11
    4f50:	cf 92       	push	r12
    4f52:	df 92       	push	r13
    4f54:	ef 92       	push	r14
    4f56:	ff 92       	push	r15
    4f58:	0f 93       	push	r16
    4f5a:	1f 93       	push	r17
    4f5c:	df 93       	push	r29
    4f5e:	cf 93       	push	r28
    4f60:	cd b7       	in	r28, 0x3d	; 61
    4f62:	de b7       	in	r29, 0x3e	; 62
    4f64:	a1 97       	sbiw	r28, 0x21	; 33
    4f66:	0f b6       	in	r0, 0x3f	; 63
    4f68:	f8 94       	cli
    4f6a:	de bf       	out	0x3e, r29	; 62
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	cd bf       	out	0x3d, r28	; 61
    4f70:	2c 01       	movw	r4, r24
    4f72:	74 2e       	mov	r7, r20
    4f74:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4f76:	22 30       	cpi	r18, 0x02	; 2
    4f78:	08 f4       	brcc	.+2      	; 0x4f7c <Print::printNumber(unsigned long, unsigned char)+0x3a>
    4f7a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4f7c:	19 a2       	std	Y+33, r1	; 0x21
    4f7e:	31 e2       	ldi	r19, 0x21	; 33
    4f80:	c3 2e       	mov	r12, r19
    4f82:	d1 2c       	mov	r13, r1
    4f84:	cc 0e       	add	r12, r28
    4f86:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    4f88:	82 2e       	mov	r8, r18
    4f8a:	99 24       	eor	r9, r9
    4f8c:	aa 24       	eor	r10, r10
    4f8e:	bb 24       	eor	r11, r11
    4f90:	67 2d       	mov	r22, r7
    4f92:	75 2f       	mov	r23, r21
    4f94:	a5 01       	movw	r20, r10
    4f96:	94 01       	movw	r18, r8
    4f98:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__udivmodsi4>
    4f9c:	79 01       	movw	r14, r18
    4f9e:	8a 01       	movw	r16, r20
    char c = m - base * n;
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	b7 01       	movw	r22, r14
    4fa4:	a5 01       	movw	r20, r10
    4fa6:	94 01       	movw	r18, r8
    4fa8:	0e 94 ad 29 	call	0x535a	; 0x535a <__mulsi3>
    4fac:	47 2d       	mov	r20, r7
    4fae:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4fb0:	08 94       	sec
    4fb2:	c1 08       	sbc	r12, r1
    4fb4:	d1 08       	sbc	r13, r1
    4fb6:	4a 30       	cpi	r20, 0x0A	; 10
    4fb8:	14 f4       	brge	.+4      	; 0x4fbe <Print::printNumber(unsigned long, unsigned char)+0x7c>
    4fba:	40 5d       	subi	r20, 0xD0	; 208
    4fbc:	01 c0       	rjmp	.+2      	; 0x4fc0 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    4fbe:	49 5c       	subi	r20, 0xC9	; 201
    4fc0:	f6 01       	movw	r30, r12
    4fc2:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4fc4:	e1 14       	cp	r14, r1
    4fc6:	f1 04       	cpc	r15, r1
    4fc8:	01 05       	cpc	r16, r1
    4fca:	11 05       	cpc	r17, r1
    4fcc:	21 f0       	breq	.+8      	; 0x4fd6 <Print::printNumber(unsigned long, unsigned char)+0x94>
    4fce:	7e 2c       	mov	r7, r14
    4fd0:	5f 2d       	mov	r21, r15
    4fd2:	c8 01       	movw	r24, r16
    4fd4:	dd cf       	rjmp	.-70     	; 0x4f90 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    4fd6:	c2 01       	movw	r24, r4
    4fd8:	b6 01       	movw	r22, r12
    4fda:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <Print::write(char const*)>
}
    4fde:	a1 96       	adiw	r28, 0x21	; 33
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	f8 94       	cli
    4fe4:	de bf       	out	0x3e, r29	; 62
    4fe6:	0f be       	out	0x3f, r0	; 63
    4fe8:	cd bf       	out	0x3d, r28	; 61
    4fea:	cf 91       	pop	r28
    4fec:	df 91       	pop	r29
    4fee:	1f 91       	pop	r17
    4ff0:	0f 91       	pop	r16
    4ff2:	ff 90       	pop	r15
    4ff4:	ef 90       	pop	r14
    4ff6:	df 90       	pop	r13
    4ff8:	cf 90       	pop	r12
    4ffa:	bf 90       	pop	r11
    4ffc:	af 90       	pop	r10
    4ffe:	9f 90       	pop	r9
    5000:	8f 90       	pop	r8
    5002:	7f 90       	pop	r7
    5004:	5f 90       	pop	r5
    5006:	4f 90       	pop	r4
    5008:	08 95       	ret

0000500a <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    500a:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    500c:	21 15       	cp	r18, r1
    500e:	31 05       	cpc	r19, r1
    5010:	41 f4       	brne	.+16     	; 0x5022 <Print::print(unsigned long, int)+0x18>
    5012:	ed 91       	ld	r30, X+
    5014:	fc 91       	ld	r31, X
    5016:	01 90       	ld	r0, Z+
    5018:	f0 81       	ld	r31, Z
    501a:	e0 2d       	mov	r30, r0
    501c:	64 2f       	mov	r22, r20
    501e:	09 95       	icall
    5020:	08 95       	ret
  else return printNumber(n, base);
    5022:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Print::printNumber(unsigned long, unsigned char)>
}
    5026:	08 95       	ret

00005028 <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    5028:	ef 92       	push	r14
    502a:	ff 92       	push	r15
    502c:	0f 93       	push	r16
    502e:	1f 93       	push	r17
    5030:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    5032:	7b 01       	movw	r14, r22
    5034:	00 e0       	ldi	r16, 0x00	; 0
    5036:	10 e0       	ldi	r17, 0x00	; 0
    5038:	b8 01       	movw	r22, r16
    503a:	a7 01       	movw	r20, r14
    503c:	0e 94 05 28 	call	0x500a	; 0x500a <Print::print(unsigned long, int)>
}
    5040:	1f 91       	pop	r17
    5042:	0f 91       	pop	r16
    5044:	ff 90       	pop	r15
    5046:	ef 90       	pop	r14
    5048:	08 95       	ret

0000504a <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    504a:	ef 92       	push	r14
    504c:	ff 92       	push	r15
    504e:	0f 93       	push	r16
    5050:	1f 93       	push	r17
    5052:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    5054:	e6 2e       	mov	r14, r22
    5056:	ff 24       	eor	r15, r15
    5058:	00 e0       	ldi	r16, 0x00	; 0
    505a:	10 e0       	ldi	r17, 0x00	; 0
    505c:	b8 01       	movw	r22, r16
    505e:	a7 01       	movw	r20, r14
    5060:	0e 94 05 28 	call	0x500a	; 0x500a <Print::print(unsigned long, int)>
}
    5064:	1f 91       	pop	r17
    5066:	0f 91       	pop	r16
    5068:	ff 90       	pop	r15
    506a:	ef 90       	pop	r14
    506c:	08 95       	ret

0000506e <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    506e:	cf 92       	push	r12
    5070:	df 92       	push	r13
    5072:	ef 92       	push	r14
    5074:	ff 92       	push	r15
    5076:	0f 93       	push	r16
    5078:	1f 93       	push	r17
    507a:	cf 93       	push	r28
    507c:	df 93       	push	r29
    507e:	ec 01       	movw	r28, r24
    5080:	6a 01       	movw	r12, r20
    5082:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    5084:	21 15       	cp	r18, r1
    5086:	31 05       	cpc	r19, r1
    5088:	41 f4       	brne	.+16     	; 0x509a <Print::print(long, int)+0x2c>
    return write(n);
    508a:	e8 81       	ld	r30, Y
    508c:	f9 81       	ldd	r31, Y+1	; 0x01
    508e:	01 90       	ld	r0, Z+
    5090:	f0 81       	ld	r31, Z
    5092:	e0 2d       	mov	r30, r0
    5094:	64 2f       	mov	r22, r20
    5096:	09 95       	icall
    5098:	1f c0       	rjmp	.+62     	; 0x50d8 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    509a:	2a 30       	cpi	r18, 0x0A	; 10
    509c:	31 05       	cpc	r19, r1
    509e:	d1 f4       	brne	.+52     	; 0x50d4 <Print::print(long, int)+0x66>
    if (n < 0) {
    50a0:	77 ff       	sbrs	r23, 7
    50a2:	17 c0       	rjmp	.+46     	; 0x50d2 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    50a4:	e8 81       	ld	r30, Y
    50a6:	f9 81       	ldd	r31, Y+1	; 0x01
    50a8:	01 90       	ld	r0, Z+
    50aa:	f0 81       	ld	r31, Z
    50ac:	e0 2d       	mov	r30, r0
    50ae:	6d e2       	ldi	r22, 0x2D	; 45
    50b0:	09 95       	icall
    50b2:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    50b4:	44 27       	eor	r20, r20
    50b6:	55 27       	eor	r21, r21
    50b8:	ba 01       	movw	r22, r20
    50ba:	4c 19       	sub	r20, r12
    50bc:	5d 09       	sbc	r21, r13
    50be:	6e 09       	sbc	r22, r14
    50c0:	7f 09       	sbc	r23, r15
    50c2:	ce 01       	movw	r24, r28
    50c4:	2a e0       	ldi	r18, 0x0A	; 10
    50c6:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Print::printNumber(unsigned long, unsigned char)>
    50ca:	98 01       	movw	r18, r16
    50cc:	28 0f       	add	r18, r24
    50ce:	39 1f       	adc	r19, r25
    50d0:	04 c0       	rjmp	.+8      	; 0x50da <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    50d2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    50d4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <Print::printNumber(unsigned long, unsigned char)>
    50d8:	9c 01       	movw	r18, r24
  }
}
    50da:	c9 01       	movw	r24, r18
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	1f 91       	pop	r17
    50e2:	0f 91       	pop	r16
    50e4:	ff 90       	pop	r15
    50e6:	ef 90       	pop	r14
    50e8:	df 90       	pop	r13
    50ea:	cf 90       	pop	r12
    50ec:	08 95       	ret

000050ee <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    50ee:	ef 92       	push	r14
    50f0:	ff 92       	push	r15
    50f2:	0f 93       	push	r16
    50f4:	1f 93       	push	r17
    50f6:	7b 01       	movw	r14, r22
    50f8:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    50fa:	00 27       	eor	r16, r16
    50fc:	f7 fc       	sbrc	r15, 7
    50fe:	00 95       	com	r16
    5100:	10 2f       	mov	r17, r16
    5102:	b8 01       	movw	r22, r16
    5104:	a7 01       	movw	r20, r14
    5106:	0e 94 37 28 	call	0x506e	; 0x506e <Print::print(long, int)>
}
    510a:	1f 91       	pop	r17
    510c:	0f 91       	pop	r16
    510e:	ff 90       	pop	r15
    5110:	ef 90       	pop	r14
    5112:	08 95       	ret

00005114 <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    5114:	ef 92       	push	r14
    5116:	ff 92       	push	r15
    5118:	0f 93       	push	r16
    511a:	1f 93       	push	r17
    511c:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    511e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <Print::write(char const*)>
    5122:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5124:	c7 01       	movw	r24, r14
    5126:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <Print::println()>
    512a:	08 0f       	add	r16, r24
    512c:	19 1f       	adc	r17, r25
  return n;
}
    512e:	c8 01       	movw	r24, r16
    5130:	1f 91       	pop	r17
    5132:	0f 91       	pop	r16
    5134:	ff 90       	pop	r15
    5136:	ef 90       	pop	r14
    5138:	08 95       	ret

0000513a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    513a:	1f 92       	push	r1
    513c:	0f 92       	push	r0
    513e:	0f b6       	in	r0, 0x3f	; 63
    5140:	0f 92       	push	r0
    5142:	11 24       	eor	r1, r1
    5144:	2f 93       	push	r18
    5146:	3f 93       	push	r19
    5148:	4f 93       	push	r20
    514a:	5f 93       	push	r21
    514c:	6f 93       	push	r22
    514e:	7f 93       	push	r23
    5150:	8f 93       	push	r24
    5152:	9f 93       	push	r25
    5154:	af 93       	push	r26
    5156:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5158:	20 91 2d 03 	lds	r18, 0x032D
    515c:	30 91 2e 03 	lds	r19, 0x032E
    5160:	40 91 2f 03 	lds	r20, 0x032F
    5164:	50 91 30 03 	lds	r21, 0x0330
	unsigned char f = timer0_fract;
    5168:	70 91 31 03 	lds	r23, 0x0331

	m += MILLIS_INC;
    516c:	da 01       	movw	r26, r20
    516e:	c9 01       	movw	r24, r18
    5170:	40 96       	adiw	r24, 0x10	; 16
    5172:	a1 1d       	adc	r26, r1
    5174:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    5176:	67 2f       	mov	r22, r23
    5178:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    517a:	6d 37       	cpi	r22, 0x7D	; 125
    517c:	30 f0       	brcs	.+12     	; 0x518a <__vector_16+0x50>
		f -= FRACT_MAX;
    517e:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    5180:	da 01       	movw	r26, r20
    5182:	c9 01       	movw	r24, r18
    5184:	41 96       	adiw	r24, 0x11	; 17
    5186:	a1 1d       	adc	r26, r1
    5188:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    518a:	60 93 31 03 	sts	0x0331, r22
	timer0_millis = m;
    518e:	80 93 2d 03 	sts	0x032D, r24
    5192:	90 93 2e 03 	sts	0x032E, r25
    5196:	a0 93 2f 03 	sts	0x032F, r26
    519a:	b0 93 30 03 	sts	0x0330, r27
	timer0_overflow_count++;
    519e:	80 91 29 03 	lds	r24, 0x0329
    51a2:	90 91 2a 03 	lds	r25, 0x032A
    51a6:	a0 91 2b 03 	lds	r26, 0x032B
    51aa:	b0 91 2c 03 	lds	r27, 0x032C
    51ae:	01 96       	adiw	r24, 0x01	; 1
    51b0:	a1 1d       	adc	r26, r1
    51b2:	b1 1d       	adc	r27, r1
    51b4:	80 93 29 03 	sts	0x0329, r24
    51b8:	90 93 2a 03 	sts	0x032A, r25
    51bc:	a0 93 2b 03 	sts	0x032B, r26
    51c0:	b0 93 2c 03 	sts	0x032C, r27
}
    51c4:	bf 91       	pop	r27
    51c6:	af 91       	pop	r26
    51c8:	9f 91       	pop	r25
    51ca:	8f 91       	pop	r24
    51cc:	7f 91       	pop	r23
    51ce:	6f 91       	pop	r22
    51d0:	5f 91       	pop	r21
    51d2:	4f 91       	pop	r20
    51d4:	3f 91       	pop	r19
    51d6:	2f 91       	pop	r18
    51d8:	0f 90       	pop	r0
    51da:	0f be       	out	0x3f, r0	; 63
    51dc:	0f 90       	pop	r0
    51de:	1f 90       	pop	r1
    51e0:	18 95       	reti

000051e2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    51e2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    51e4:	84 b5       	in	r24, 0x24	; 36
    51e6:	82 60       	ori	r24, 0x02	; 2
    51e8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    51ea:	84 b5       	in	r24, 0x24	; 36
    51ec:	81 60       	ori	r24, 0x01	; 1
    51ee:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    51f0:	85 b5       	in	r24, 0x25	; 37
    51f2:	82 60       	ori	r24, 0x02	; 2
    51f4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    51f6:	85 b5       	in	r24, 0x25	; 37
    51f8:	81 60       	ori	r24, 0x01	; 1
    51fa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    51fc:	ee e6       	ldi	r30, 0x6E	; 110
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	80 81       	ld	r24, Z
    5202:	81 60       	ori	r24, 0x01	; 1
    5204:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5206:	e1 e8       	ldi	r30, 0x81	; 129
    5208:	f0 e0       	ldi	r31, 0x00	; 0
    520a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    520c:	80 81       	ld	r24, Z
    520e:	82 60       	ori	r24, 0x02	; 2
    5210:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5212:	e0 e8       	ldi	r30, 0x80	; 128
    5214:	f0 e0       	ldi	r31, 0x00	; 0
    5216:	80 81       	ld	r24, Z
    5218:	81 60       	ori	r24, 0x01	; 1
    521a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    521c:	e1 eb       	ldi	r30, 0xB1	; 177
    521e:	f0 e0       	ldi	r31, 0x00	; 0
    5220:	80 81       	ld	r24, Z
    5222:	84 60       	ori	r24, 0x04	; 4
    5224:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5226:	e0 eb       	ldi	r30, 0xB0	; 176
    5228:	f0 e0       	ldi	r31, 0x00	; 0
    522a:	80 81       	ld	r24, Z
    522c:	81 60       	ori	r24, 0x01	; 1
    522e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    5230:	ea e7       	ldi	r30, 0x7A	; 122
    5232:	f0 e0       	ldi	r31, 0x00	; 0
    5234:	80 81       	ld	r24, Z
    5236:	84 60       	ori	r24, 0x04	; 4
    5238:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    523a:	80 81       	ld	r24, Z
    523c:	82 60       	ori	r24, 0x02	; 2
    523e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    5240:	80 81       	ld	r24, Z
    5242:	81 60       	ori	r24, 0x01	; 1
    5244:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5246:	80 81       	ld	r24, Z
    5248:	80 68       	ori	r24, 0x80	; 128
    524a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    524c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    5250:	08 95       	ret

00005252 <__floatunsisf>:
    5252:	e8 94       	clt
    5254:	09 c0       	rjmp	.+18     	; 0x5268 <__floatsisf+0x12>

00005256 <__floatsisf>:
    5256:	97 fb       	bst	r25, 7
    5258:	3e f4       	brtc	.+14     	; 0x5268 <__floatsisf+0x12>
    525a:	90 95       	com	r25
    525c:	80 95       	com	r24
    525e:	70 95       	com	r23
    5260:	61 95       	neg	r22
    5262:	7f 4f       	sbci	r23, 0xFF	; 255
    5264:	8f 4f       	sbci	r24, 0xFF	; 255
    5266:	9f 4f       	sbci	r25, 0xFF	; 255
    5268:	99 23       	and	r25, r25
    526a:	a9 f0       	breq	.+42     	; 0x5296 <__floatsisf+0x40>
    526c:	f9 2f       	mov	r31, r25
    526e:	96 e9       	ldi	r25, 0x96	; 150
    5270:	bb 27       	eor	r27, r27
    5272:	93 95       	inc	r25
    5274:	f6 95       	lsr	r31
    5276:	87 95       	ror	r24
    5278:	77 95       	ror	r23
    527a:	67 95       	ror	r22
    527c:	b7 95       	ror	r27
    527e:	f1 11       	cpse	r31, r1
    5280:	f8 cf       	rjmp	.-16     	; 0x5272 <__floatsisf+0x1c>
    5282:	fa f4       	brpl	.+62     	; 0x52c2 <__floatsisf+0x6c>
    5284:	bb 0f       	add	r27, r27
    5286:	11 f4       	brne	.+4      	; 0x528c <__floatsisf+0x36>
    5288:	60 ff       	sbrs	r22, 0
    528a:	1b c0       	rjmp	.+54     	; 0x52c2 <__floatsisf+0x6c>
    528c:	6f 5f       	subi	r22, 0xFF	; 255
    528e:	7f 4f       	sbci	r23, 0xFF	; 255
    5290:	8f 4f       	sbci	r24, 0xFF	; 255
    5292:	9f 4f       	sbci	r25, 0xFF	; 255
    5294:	16 c0       	rjmp	.+44     	; 0x52c2 <__floatsisf+0x6c>
    5296:	88 23       	and	r24, r24
    5298:	11 f0       	breq	.+4      	; 0x529e <__floatsisf+0x48>
    529a:	96 e9       	ldi	r25, 0x96	; 150
    529c:	11 c0       	rjmp	.+34     	; 0x52c0 <__floatsisf+0x6a>
    529e:	77 23       	and	r23, r23
    52a0:	21 f0       	breq	.+8      	; 0x52aa <__floatsisf+0x54>
    52a2:	9e e8       	ldi	r25, 0x8E	; 142
    52a4:	87 2f       	mov	r24, r23
    52a6:	76 2f       	mov	r23, r22
    52a8:	05 c0       	rjmp	.+10     	; 0x52b4 <__floatsisf+0x5e>
    52aa:	66 23       	and	r22, r22
    52ac:	71 f0       	breq	.+28     	; 0x52ca <__floatsisf+0x74>
    52ae:	96 e8       	ldi	r25, 0x86	; 134
    52b0:	86 2f       	mov	r24, r22
    52b2:	70 e0       	ldi	r23, 0x00	; 0
    52b4:	60 e0       	ldi	r22, 0x00	; 0
    52b6:	2a f0       	brmi	.+10     	; 0x52c2 <__floatsisf+0x6c>
    52b8:	9a 95       	dec	r25
    52ba:	66 0f       	add	r22, r22
    52bc:	77 1f       	adc	r23, r23
    52be:	88 1f       	adc	r24, r24
    52c0:	da f7       	brpl	.-10     	; 0x52b8 <__floatsisf+0x62>
    52c2:	88 0f       	add	r24, r24
    52c4:	96 95       	lsr	r25
    52c6:	87 95       	ror	r24
    52c8:	97 f9       	bld	r25, 7
    52ca:	08 95       	ret

000052cc <fmax>:
    52cc:	99 0f       	add	r25, r25
    52ce:	bb 0b       	sbc	r27, r27
    52d0:	55 0f       	add	r21, r21
    52d2:	aa 0b       	sbc	r26, r26
    52d4:	e0 e8       	ldi	r30, 0x80	; 128
    52d6:	fe ef       	ldi	r31, 0xFE	; 254
    52d8:	16 16       	cp	r1, r22
    52da:	17 06       	cpc	r1, r23
    52dc:	e8 07       	cpc	r30, r24
    52de:	f9 07       	cpc	r31, r25
    52e0:	70 f0       	brcs	.+28     	; 0x52fe <fmax+0x32>
    52e2:	12 16       	cp	r1, r18
    52e4:	13 06       	cpc	r1, r19
    52e6:	e4 07       	cpc	r30, r20
    52e8:	f5 07       	cpc	r31, r21
    52ea:	60 f0       	brcs	.+24     	; 0x5304 <fmax+0x38>
    52ec:	ba 17       	cp	r27, r26
    52ee:	3c f0       	brlt	.+14     	; 0x52fe <fmax+0x32>
    52f0:	49 f4       	brne	.+18     	; 0x5304 <fmax+0x38>
    52f2:	62 17       	cp	r22, r18
    52f4:	73 07       	cpc	r23, r19
    52f6:	84 07       	cpc	r24, r20
    52f8:	95 07       	cpc	r25, r21
    52fa:	a7 95       	ror	r26
    52fc:	1b f4       	brvc	.+6      	; 0x5304 <fmax+0x38>
    52fe:	b9 01       	movw	r22, r18
    5300:	ca 01       	movw	r24, r20
    5302:	ba 2f       	mov	r27, r26
    5304:	b6 95       	lsr	r27
    5306:	97 95       	ror	r25
    5308:	08 95       	ret

0000530a <__fp_cmp>:
    530a:	99 0f       	add	r25, r25
    530c:	00 08       	sbc	r0, r0
    530e:	55 0f       	add	r21, r21
    5310:	aa 0b       	sbc	r26, r26
    5312:	e0 e8       	ldi	r30, 0x80	; 128
    5314:	fe ef       	ldi	r31, 0xFE	; 254
    5316:	16 16       	cp	r1, r22
    5318:	17 06       	cpc	r1, r23
    531a:	e8 07       	cpc	r30, r24
    531c:	f9 07       	cpc	r31, r25
    531e:	c0 f0       	brcs	.+48     	; 0x5350 <__fp_cmp+0x46>
    5320:	12 16       	cp	r1, r18
    5322:	13 06       	cpc	r1, r19
    5324:	e4 07       	cpc	r30, r20
    5326:	f5 07       	cpc	r31, r21
    5328:	98 f0       	brcs	.+38     	; 0x5350 <__fp_cmp+0x46>
    532a:	62 1b       	sub	r22, r18
    532c:	73 0b       	sbc	r23, r19
    532e:	84 0b       	sbc	r24, r20
    5330:	95 0b       	sbc	r25, r21
    5332:	39 f4       	brne	.+14     	; 0x5342 <__fp_cmp+0x38>
    5334:	0a 26       	eor	r0, r26
    5336:	61 f0       	breq	.+24     	; 0x5350 <__fp_cmp+0x46>
    5338:	23 2b       	or	r18, r19
    533a:	24 2b       	or	r18, r20
    533c:	25 2b       	or	r18, r21
    533e:	21 f4       	brne	.+8      	; 0x5348 <__fp_cmp+0x3e>
    5340:	08 95       	ret
    5342:	0a 26       	eor	r0, r26
    5344:	09 f4       	brne	.+2      	; 0x5348 <__fp_cmp+0x3e>
    5346:	a1 40       	sbci	r26, 0x01	; 1
    5348:	a6 95       	lsr	r26
    534a:	8f ef       	ldi	r24, 0xFF	; 255
    534c:	81 1d       	adc	r24, r1
    534e:	81 1d       	adc	r24, r1
    5350:	08 95       	ret

00005352 <__gesf2>:
    5352:	db df       	rcall	.-74     	; 0x530a <__fp_cmp>
    5354:	08 f4       	brcc	.+2      	; 0x5358 <__gesf2+0x6>
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	08 95       	ret

0000535a <__mulsi3>:
    535a:	62 9f       	mul	r22, r18
    535c:	d0 01       	movw	r26, r0
    535e:	73 9f       	mul	r23, r19
    5360:	f0 01       	movw	r30, r0
    5362:	82 9f       	mul	r24, r18
    5364:	e0 0d       	add	r30, r0
    5366:	f1 1d       	adc	r31, r1
    5368:	64 9f       	mul	r22, r20
    536a:	e0 0d       	add	r30, r0
    536c:	f1 1d       	adc	r31, r1
    536e:	92 9f       	mul	r25, r18
    5370:	f0 0d       	add	r31, r0
    5372:	83 9f       	mul	r24, r19
    5374:	f0 0d       	add	r31, r0
    5376:	74 9f       	mul	r23, r20
    5378:	f0 0d       	add	r31, r0
    537a:	65 9f       	mul	r22, r21
    537c:	f0 0d       	add	r31, r0
    537e:	99 27       	eor	r25, r25
    5380:	72 9f       	mul	r23, r18
    5382:	b0 0d       	add	r27, r0
    5384:	e1 1d       	adc	r30, r1
    5386:	f9 1f       	adc	r31, r25
    5388:	63 9f       	mul	r22, r19
    538a:	b0 0d       	add	r27, r0
    538c:	e1 1d       	adc	r30, r1
    538e:	f9 1f       	adc	r31, r25
    5390:	bd 01       	movw	r22, r26
    5392:	cf 01       	movw	r24, r30
    5394:	11 24       	eor	r1, r1
    5396:	08 95       	ret

00005398 <__udivmodhi4>:
    5398:	aa 1b       	sub	r26, r26
    539a:	bb 1b       	sub	r27, r27
    539c:	51 e1       	ldi	r21, 0x11	; 17
    539e:	07 c0       	rjmp	.+14     	; 0x53ae <__udivmodhi4_ep>

000053a0 <__udivmodhi4_loop>:
    53a0:	aa 1f       	adc	r26, r26
    53a2:	bb 1f       	adc	r27, r27
    53a4:	a6 17       	cp	r26, r22
    53a6:	b7 07       	cpc	r27, r23
    53a8:	10 f0       	brcs	.+4      	; 0x53ae <__udivmodhi4_ep>
    53aa:	a6 1b       	sub	r26, r22
    53ac:	b7 0b       	sbc	r27, r23

000053ae <__udivmodhi4_ep>:
    53ae:	88 1f       	adc	r24, r24
    53b0:	99 1f       	adc	r25, r25
    53b2:	5a 95       	dec	r21
    53b4:	a9 f7       	brne	.-22     	; 0x53a0 <__udivmodhi4_loop>
    53b6:	80 95       	com	r24
    53b8:	90 95       	com	r25
    53ba:	bc 01       	movw	r22, r24
    53bc:	cd 01       	movw	r24, r26
    53be:	08 95       	ret

000053c0 <__divmodhi4>:
    53c0:	97 fb       	bst	r25, 7
    53c2:	09 2e       	mov	r0, r25
    53c4:	07 26       	eor	r0, r23
    53c6:	0a d0       	rcall	.+20     	; 0x53dc <__divmodhi4_neg1>
    53c8:	77 fd       	sbrc	r23, 7
    53ca:	04 d0       	rcall	.+8      	; 0x53d4 <__divmodhi4_neg2>
    53cc:	e5 df       	rcall	.-54     	; 0x5398 <__udivmodhi4>
    53ce:	06 d0       	rcall	.+12     	; 0x53dc <__divmodhi4_neg1>
    53d0:	00 20       	and	r0, r0
    53d2:	1a f4       	brpl	.+6      	; 0x53da <__divmodhi4_exit>

000053d4 <__divmodhi4_neg2>:
    53d4:	70 95       	com	r23
    53d6:	61 95       	neg	r22
    53d8:	7f 4f       	sbci	r23, 0xFF	; 255

000053da <__divmodhi4_exit>:
    53da:	08 95       	ret

000053dc <__divmodhi4_neg1>:
    53dc:	f6 f7       	brtc	.-4      	; 0x53da <__divmodhi4_exit>
    53de:	90 95       	com	r25
    53e0:	81 95       	neg	r24
    53e2:	9f 4f       	sbci	r25, 0xFF	; 255
    53e4:	08 95       	ret

000053e6 <__udivmodsi4>:
    53e6:	a1 e2       	ldi	r26, 0x21	; 33
    53e8:	1a 2e       	mov	r1, r26
    53ea:	aa 1b       	sub	r26, r26
    53ec:	bb 1b       	sub	r27, r27
    53ee:	fd 01       	movw	r30, r26
    53f0:	0d c0       	rjmp	.+26     	; 0x540c <__udivmodsi4_ep>

000053f2 <__udivmodsi4_loop>:
    53f2:	aa 1f       	adc	r26, r26
    53f4:	bb 1f       	adc	r27, r27
    53f6:	ee 1f       	adc	r30, r30
    53f8:	ff 1f       	adc	r31, r31
    53fa:	a2 17       	cp	r26, r18
    53fc:	b3 07       	cpc	r27, r19
    53fe:	e4 07       	cpc	r30, r20
    5400:	f5 07       	cpc	r31, r21
    5402:	20 f0       	brcs	.+8      	; 0x540c <__udivmodsi4_ep>
    5404:	a2 1b       	sub	r26, r18
    5406:	b3 0b       	sbc	r27, r19
    5408:	e4 0b       	sbc	r30, r20
    540a:	f5 0b       	sbc	r31, r21

0000540c <__udivmodsi4_ep>:
    540c:	66 1f       	adc	r22, r22
    540e:	77 1f       	adc	r23, r23
    5410:	88 1f       	adc	r24, r24
    5412:	99 1f       	adc	r25, r25
    5414:	1a 94       	dec	r1
    5416:	69 f7       	brne	.-38     	; 0x53f2 <__udivmodsi4_loop>
    5418:	60 95       	com	r22
    541a:	70 95       	com	r23
    541c:	80 95       	com	r24
    541e:	90 95       	com	r25
    5420:	9b 01       	movw	r18, r22
    5422:	ac 01       	movw	r20, r24
    5424:	bd 01       	movw	r22, r26
    5426:	cf 01       	movw	r24, r30
    5428:	08 95       	ret

0000542a <__tablejump2__>:
    542a:	ee 0f       	add	r30, r30
    542c:	ff 1f       	adc	r31, r31

0000542e <__tablejump__>:
    542e:	05 90       	lpm	r0, Z+
    5430:	f4 91       	lpm	r31, Z+
    5432:	e0 2d       	mov	r30, r0
    5434:	09 94       	ijmp

00005436 <_exit>:
    5436:	f8 94       	cli

00005438 <__stop_program>:
    5438:	ff cf       	rjmp	.-2      	; 0x5438 <__stop_program>
