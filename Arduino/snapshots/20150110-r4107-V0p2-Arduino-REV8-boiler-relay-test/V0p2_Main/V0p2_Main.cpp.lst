
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build6763744114461649109.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  0000748a  0000751e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000748a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e9  0080023c  0080023c  0000765a  2**0
                  ALLOC
  3 .debug_aranges 00001178  00000000  00000000  0000765a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002dd8  00000000  00000000  000087d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001a511  00000000  00000000  0000b5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000053e3  00000000  00000000  00025abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001289c  00000000  00000000  0002ae9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001f50  00000000  00000000  0003d73c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007294  00000000  00000000  0003f68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a99d  00000000  00000000  00046920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000aff13  00000000  00000000  000512bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000014a8  00000000  00000000  001011d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
#if !defined(enableTrailingStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
       8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
                         [not_bodse] "i" (~_BV(BODSE))); \
} while (0)
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
       c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
#endif
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }
      10:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
#endif

// Get local time minutes from RTC [0,59].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
      14:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_5>
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
      18:	0c 94 06 12 	jmp	0x240c	; 0x240c <__vector_6>
  // Send the character.
  Serial.print(c);
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
  if(neededWaking) { powerDownSerial(); }
  }
      1c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
      20:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
  DEBUG_SERIAL_PRINT_FLASHSTRING("Sleep ticks: ");
  DEBUG_SERIAL_PRINT(sleepTicks);
  DEBUG_SERIAL_PRINTLN();
#endif
#endif
  }
      24:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      28:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      2c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      30:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      34:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      38:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      3c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      40:	0c 94 22 39 	jmp	0x7244	; 0x7244 <__vector_16>
      44:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
      48:	0c 94 26 35 	jmp	0x6a4c	; 0x6a4c <__vector_18>
      4c:	0c 94 74 35 	jmp	0x6ae8	; 0x6ae8 <__vector_19>
      50:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
      54:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_21>
      58:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
      5c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>
      60:	0c 94 e3 32 	jmp	0x65c6	; 0x65c6 <__vector_24>
      64:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 ff ff     s.t.usvdw.y#z...

00000098 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      98:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000a1 <doSync(bool)::__c>:
      a1:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000b2 <doSync(bool)::__c>:
      b2:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

000000c0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      c0:	22 2b 22 3a 00                                      "+":.

000000c5 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      c5:	22 40 22 3a 22 00                                   "@":".

000000cb <SimpleStatsRotationBase::put(char const*, int)::__c>:
      cb:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

000000db <ensureIDCreated(bool)::__c>:
      db:	20 2e 2e 2e 20 00                                    ... .

000000e1 <ensureIDCreated(bool)::__c>:
      e1:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

000000f2 <ensureIDCreated(bool)::__c>:
      f2:	20 2e 2e 2e 20 00                                    ... .

000000f8 <ensureIDCreated(bool)::__c>:
      f8:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

00000109 <RFM22CheckConnected()::__c>:
     109:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

00000113 <loopUnitTest()::__c>:
     113:	25 25 25 20 41 6c 6c 20 74 65 73 74 73 20 63 6f     %%% All tests co
     123:	6d 70 6c 65 74 65 64 20 4f 4b 2c 20 72 6f 75 6e     mpleted OK, roun
     133:	64 20 00                                            d .

00000136 <loopUnitTest()::__c>:
     136:	54 65 73 74 73 20 73 74 61 72 74 69 6e 67 2e 2e     Tests starting..
     146:	2e 20 00                                            . .

00000149 <testComputeRequiredTRVPercentOpen()::__c>:
     149:	74 65 73 74 43 6f 6d 70 75 74 65 52 65 71 75 69     testComputeRequi
     159:	72 65 64 54 52 56 50 65 72 63 65 6e 74 4f 70 65     redTRVPercentOpe
     169:	6e 28 29 00                                         n().

0000016d <error(int, int)::__c>:
     16d:	20 61 74 20 6c 69 6e 65 20 00                        at line .

00000177 <error(int, int)::__c>:
     177:	20 3d 30 78 00                                       =0x.

0000017c <error(int, int)::__c>:
     17c:	2a 2a 2a 54 65 73 74 20 46 41 49 4c 45 44 2a 2a     ***Test FAILED**
     18c:	2a 20 76 61 6c 3d 00                                * val=.

00000193 <testTargetComputation()::__c>:
     193:	74 65 73 74 54 61 72 67 65 74 43 6f 6d 70 75 74     testTargetComput
     1a3:	61 74 69 6f 6e 00                                   ation.

000001a9 <testSensorMocking()::__c>:
     1a9:	74 65 73 74 53 65 6e 73 6f 72 4d 6f 63 6b 69 6e     testSensorMockin
     1b9:	67 00                                               g.

000001bb <testModeControls()::__c>:
     1bb:	74 65 73 74 4d 6f 64 65 43 6f 6e 74 72 6f 6c 73     testModeControls
	...

000001cc <testJSONStats()::__c>:
     1cc:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 66 31 22     {"@":"1234","f1"
     1dc:	3a 2d 31 31 31 7d 00                                :-111}.

000001e3 <testJSONStats()::__c>:
     1e3:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 2b 22 3a     {"@":"1234","+":
     1f3:	32 7d 00                                            2}.

000001f6 <testJSONStats()::__c>:
     1f6:	7b 22 40 22 3a 22 31 32 33 34 22 7d 00              {"@":"1234"}.

00000203 <testJSONStats()::__c>:
     203:	74 65 73 74 4a 53 4f 4e 53 74 61 74 73 00           testJSONStats.

00000211 <testJSONForTX()::__c>:
     211:	7b 22 40 22 3a 22 63 64 66 62 22 2c 22 54 7c 43     {"@":"cdfb","T|C
     221:	31 36 22 3a 32 39 39 2c 22 48 7c 25 22 3a 38 33     16":299,"H|%":83
     231:	2c 22 4c 22 3a 32 35 35 2c 22 42 7c 63 56 22 3a     ,"L":255,"B|cV":
     241:	32 35 36 7d 00                                      256}.

00000246 <testJSONForTX()::__c>:
     246:	7b 20 20 7d 00                                      {  }.

0000024b <testJSONForTX()::__c>:
     24b:	74 65 73 74 4a 53 4f 4e 46 6f 72 54 58 00           testJSONForTX.

00000259 <testFullStatsMessageCoreEncDec()::__c>:
     259:	74 65 73 74 46 75 6c 6c 53 74 61 74 73 4d 65 73     testFullStatsMes
     269:	73 61 67 65 43 6f 72 65 45 6e 63 44 65 63 00        sageCoreEncDec.

00000278 <testCRC()::__c>:
     278:	74 65 73 74 43 52 43 00                             testCRC.

00000280 <testTempCompand()::__c>:
     280:	74 65 73 74 54 65 6d 70 43 6f 6d 70 61 6e 64 00     testTempCompand.

00000290 <testRNG8()::__c>:
     290:	74 65 73 74 52 4e 47 38 00                          testRNG8.

00000299 <testRTCPersist()::__c>:
     299:	74 65 73 74 52 54 43 50 65 72 73 69 73 74 00        testRTCPersist.

000002a8 <testEEPROM()::__c>:
     2a8:	74 65 73 74 45 45 50 52 4f 4d 00                    testEEPROM.

000002b3 <testQuartiles()::__c>:
     2b3:	74 65 73 74 51 75 61 72 74 69 6c 65 73 00           testQuartiles.

000002c1 <testSmoothStatsValue()::__c>:
     2c1:	74 65 73 74 53 6d 6f 6f 74 68 53 74 61 74 73 56     testSmoothStatsV
     2d1:	61 6c 75 65 00                                      alue.

000002d6 <testFHTEncoding()::__c>:
     2d6:	74 65 73 74 46 48 54 45 6e 63 6f 64 69 6e 67 00     testFHTEncoding.

000002e6 <testFHTEncodingHeadAndTail()::__c>:
     2e6:	74 65 73 74 46 48 54 45 6e 63 6f 64 69 6e 67 48     testFHTEncodingH
     2f6:	65 61 64 41 6e 64 54 61 69 6c 00                    eadAndTail.

00000301 <testTempSensor()::__c>:
     301:	74 65 73 74 54 65 6d 70 53 65 6e 73 6f 72 00        testTempSensor.

00000310 <testInternalTempSensor()::__c>:
     310:	74 65 73 74 49 6e 74 65 72 6e 61 6c 54 65 6d 70     testInternalTemp
     320:	53 65 6e 73 6f 72 00                                Sensor.

00000327 <testSupplyVoltageMonitor()::__c>:
     327:	74 65 73 74 53 75 70 70 6c 79 56 6f 6c 74 61 67     testSupplyVoltag
     337:	65 4d 6f 6e 69 74 6f 72 00                          eMonitor.

00000340 <testEntropyGathering()::__c>:
     340:	74 65 73 74 45 6e 74 72 6f 70 79 47 61 74 68 65     testEntropyGathe
     350:	72 69 6e 67 00                                      ring.

00000355 <setup::__c>:
     355:	42 61 64 20 49 44 20 61 6e 64 20 63 61 6e 6e 6f     Bad ID and canno
     365:	74 20 72 65 73 65 74 2e 00                          t reset..

0000036e <setup::__c>:
     36e:	55 4e 49 54 20 54 45 53 54 53 2e 2e 2e 00           UNIT TESTS....

0000037c <setup::__c>:
     37c:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000387 <setup::__c>:
     387:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000390 <setup::__c>:
     390:	44 45 42 55 47 20 62 75 69 6c 64 00                 DEBUG build.

0000039c <setup::__c>:
     39c:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     3ac:	67 3a 20 00                                         g: .

000003b0 <optionalPOST()::__c>:
     3b0:	52 61 64 69 6f 2c 20 62 75 74 74 6f 6e 73 20 4f     Radio, buttons O
     3c0:	4b 00                                               K.

000003c2 <optionalPOST()::__c>:
     3c2:	62 75 74 74 6f 6e 20 73 74 75 63 6b 00              button stuck.

000003cf <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     3cf:	3a 20 00                                            : .

000003d2 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     3d2:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000003dc <serialPrintlnBuildVersion()::__c>:
     3dc:	20 32 32 3a 33 33 3a 33 37 00                        22:33:37.

000003e6 <serialPrintlnBuildVersion()::__c>:
     3e6:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     3f6:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 38 36 34 20 32     _Main.ino 3864 2
     406:	30 31 34 2d 31 32 2d 31 30 20 32 31 3a 30 31 3a     014-12-10 21:01:
     416:	35 34 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        54Z damonhd $ .

00000425 <serialPrintlnBuildVersion()::__c>:
     425:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

00000434 <port_to_mode_PGM>:
     434:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000043e <port_to_output_PGM>:
     43e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000448 <port_to_input_PGM>:
     448:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000452 <digital_pin_to_port_PGM>:
     452:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     462:	03 03 03 03                                         ....

00000466 <digital_pin_to_bit_mask_PGM>:
     466:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     476:	04 08 10 20                                         ... 

0000047a <digital_pin_to_timer_PGM>:
     47a:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     48a:	00 00 00 00                                         ....

0000048e <__ctors_start>:
     48e:	55 06       	cpc	r5, r21
     490:	b5 13       	cpse	r27, r21
     492:	ab 15       	cp	r26, r11
     494:	da 2c       	mov	r13, r10
     496:	90 2e       	mov	r9, r16
     498:	7f 31       	cpi	r23, 0x1F	; 31
     49a:	3d 37       	cpi	r19, 0x7D	; 125

0000049c <__ctors_end>:
     49c:	11 24       	eor	r1, r1
     49e:	1f be       	out	0x3f, r1	; 63
     4a0:	cf ef       	ldi	r28, 0xFF	; 255
     4a2:	d8 e0       	ldi	r29, 0x08	; 8
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	cd bf       	out	0x3d, r28	; 61

000004a8 <__do_copy_data>:
     4a8:	12 e0       	ldi	r17, 0x02	; 2
     4aa:	a0 e0       	ldi	r26, 0x00	; 0
     4ac:	b1 e0       	ldi	r27, 0x01	; 1
     4ae:	ea e8       	ldi	r30, 0x8A	; 138
     4b0:	f4 e7       	ldi	r31, 0x74	; 116
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <.do_copy_data_start>

000004b4 <.do_copy_data_loop>:
     4b4:	05 90       	lpm	r0, Z+
     4b6:	0d 92       	st	X+, r0

000004b8 <.do_copy_data_start>:
     4b8:	ac 33       	cpi	r26, 0x3C	; 60
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <.do_copy_data_loop>

000004be <__do_clear_bss>:
     4be:	14 e0       	ldi	r17, 0x04	; 4
     4c0:	ac e3       	ldi	r26, 0x3C	; 60
     4c2:	b2 e0       	ldi	r27, 0x02	; 2
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a5 32       	cpi	r26, 0x25	; 37
     4ca:	b1 07       	cpc	r27, r17
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>

000004ce <__do_global_ctors>:
     4ce:	14 e0       	ldi	r17, 0x04	; 4
     4d0:	cc e9       	ldi	r28, 0x9C	; 156
     4d2:	d4 e0       	ldi	r29, 0x04	; 4
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <.do_global_ctors_start>

000004d6 <.do_global_ctors_loop>:
     4d6:	22 97       	sbiw	r28, 0x02	; 2
     4d8:	fe 01       	movw	r30, r28
     4da:	0e 94 3f 3a 	call	0x747e	; 0x747e <__tablejump__>

000004de <.do_global_ctors_start>:
     4de:	ce 38       	cpi	r28, 0x8E	; 142
     4e0:	d1 07       	cpc	r29, r17
     4e2:	c9 f7       	brne	.-14     	; 0x4d6 <.do_global_ctors_loop>
     4e4:	0e 94 93 37 	call	0x6f26	; 0x6f26 <main>
     4e8:	0c 94 43 3a 	jmp	0x7486	; 0x7486 <_exit>

000004ec <__bad_interrupt>:
     4ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004f0 <abort>:
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	f8 94       	cli
     4f6:	0c 94 43 3a 	jmp	0x7486	; 0x7486 <_exit>

000004fa <strcmp_P>:
     4fa:	fb 01       	movw	r30, r22
     4fc:	dc 01       	movw	r26, r24
     4fe:	8d 91       	ld	r24, X+
     500:	05 90       	lpm	r0, Z+
     502:	80 19       	sub	r24, r0
     504:	01 10       	cpse	r0, r1
     506:	d9 f3       	breq	.-10     	; 0x4fe <strcmp_P+0x4>
     508:	99 0b       	sbc	r25, r25
     50a:	08 95       	ret

0000050c <strcpy_P>:
     50c:	fb 01       	movw	r30, r22
     50e:	dc 01       	movw	r26, r24
     510:	05 90       	lpm	r0, Z+
     512:	0d 92       	st	X+, r0
     514:	00 20       	and	r0, r0
     516:	e1 f7       	brne	.-8      	; 0x510 <strcpy_P+0x4>
     518:	08 95       	ret

0000051a <memset>:
     51a:	dc 01       	movw	r26, r24
     51c:	01 c0       	rjmp	.+2      	; 0x520 <memset+0x6>
     51e:	6d 93       	st	X+, r22
     520:	41 50       	subi	r20, 0x01	; 1
     522:	50 40       	sbci	r21, 0x00	; 0
     524:	e0 f7       	brcc	.-8      	; 0x51e <memset+0x4>
     526:	08 95       	ret

00000528 <strcmp>:
     528:	fb 01       	movw	r30, r22
     52a:	dc 01       	movw	r26, r24
     52c:	8d 91       	ld	r24, X+
     52e:	01 90       	ld	r0, Z+
     530:	80 19       	sub	r24, r0
     532:	01 10       	cpse	r0, r1
     534:	d9 f3       	breq	.-10     	; 0x52c <strcmp+0x4>
     536:	99 0b       	sbc	r25, r25
     538:	08 95       	ret

0000053a <__eerd_word>:
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	7b 01       	movw	r14, r22
     546:	8c 01       	movw	r16, r24
     548:	fb 01       	movw	r30, r22
     54a:	09 95       	icall
     54c:	d8 2e       	mov	r13, r24
     54e:	c8 01       	movw	r24, r16
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	f7 01       	movw	r30, r14
     554:	09 95       	icall
     556:	98 2f       	mov	r25, r24
     558:	8d 2d       	mov	r24, r13
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	08 95       	ret

00000566 <__eewr_word>:
     566:	df 92       	push	r13
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	d7 2e       	mov	r13, r23
     572:	7a 01       	movw	r14, r20
     574:	8c 01       	movw	r16, r24
     576:	fa 01       	movw	r30, r20
     578:	09 95       	icall
     57a:	c8 01       	movw	r24, r16
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	6d 2d       	mov	r22, r13
     580:	f7 01       	movw	r30, r14
     582:	09 95       	icall
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	08 95       	ret

00000590 <SimpleTSUint8Sensor::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     590:	fc 01       	movw	r30, r24
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	08 95       	ret

00000596 <SimpleTSUint8Sensor::_TEST_set_(unsigned char)>:
#ifdef UNIT_TESTS
    // Set new value for unit test only.
    // May be just enough to allow get() to see the value for unit tests,
    // but will not deal with other aspects of sensor state.
    // Any call to read() or other mutators may overwrite/clear state that this sets.
    virtual void _TEST_set_(const uint8_t newValue)
     596:	fc 01       	movw	r30, r24
      { value = newValue; }
     598:	62 83       	std	Z+2, r22	; 0x02
     59a:	08 95       	ret

0000059c <SimpleTSUint8Actuator::get() const>:
     59c:	fc 01       	movw	r30, r24
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	08 95       	ret

000005a2 <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	65 36       	cpi	r22, 0x65	; 101
     5a6:	08 f4       	brcc	.+2      	; 0x5aa <AbstractRadValve::isValid(unsigned char) const+0x8>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	08 95       	ret

000005ac <AbstractRadValve::recalibrate()>:
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }

    // If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
    // Default does nothing.
    virtual void recalibrate() { }
     5ac:	08 95       	ret

000005ae <AbstractRadValve::isControlledValveReallyOpen() const>:
    // If multiple valves are controlled then is this true only if all are at least partially open.
    // Used to help avoid running boiler pump against closed valves.
    // Must not be true while recalibrating.
    // The default is to use the check the current computed position
    // against the minimum open percentage.
    virtual bool isControlledValveReallyOpen() const { return((!isRecalibrating()) && (value >= getMinPercentOpen())); }
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
     5b6:	e8 81       	ld	r30, Y
     5b8:	f9 81       	ldd	r31, Y+1	; 0x01
     5ba:	02 88       	ldd	r0, Z+18	; 0x12
     5bc:	f3 89       	ldd	r31, Z+19	; 0x13
     5be:	e0 2d       	mov	r30, r0
     5c0:	09 95       	icall
     5c2:	88 23       	and	r24, r24
     5c4:	11 f0       	breq	.+4      	; 0x5ca <AbstractRadValve::isControlledValveReallyOpen() const+0x1c>
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0c c0       	rjmp	.+24     	; 0x5e2 <AbstractRadValve::isControlledValveReallyOpen() const+0x34>
     5ca:	1a 81       	ldd	r17, Y+2	; 0x02
     5cc:	e8 81       	ld	r30, Y
     5ce:	f9 81       	ldd	r31, Y+1	; 0x01
     5d0:	00 8c       	ldd	r0, Z+24	; 0x18
     5d2:	f1 8d       	ldd	r31, Z+25	; 0x19
     5d4:	e0 2d       	mov	r30, r0
     5d6:	ce 01       	movw	r24, r28
     5d8:	09 95       	icall
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	18 17       	cp	r17, r24
     5de:	08 f0       	brcs	.+2      	; 0x5e2 <AbstractRadValve::isControlledValveReallyOpen() const+0x34>
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	89 2f       	mov	r24, r25
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	08 95       	ret

000005ec <AbstractRadValve::getMinPercentOpen() const>:

    // Get estimated minimum percentage open for significant flow for this device; strictly positive in range [1,99].
    // Defaults to 1 which is minimum possible legitimate value.
    virtual uint8_t getMinPercentOpen() const { return(1); }
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret

000005f0 <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     5f0:	8c e3       	ldi	r24, 0x3C	; 60
     5f2:	08 95       	ret

000005f4 <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	08 95       	ret

000005fa <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     5fa:	90 91 68 02 	lds	r25, 0x0268
     5fe:	99 23       	and	r25, r25
     600:	79 f4       	brne	.+30     	; 0x620 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     602:	f9 99       	sbic	0x1f, 1	; 31
     604:	fe cf       	rjmp	.-4      	; 0x602 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     606:	83 e1       	ldi	r24, 0x13	; 19
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	92 bd       	out	0x22, r25	; 34
     60c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     60e:	f8 9a       	sbi	0x1f, 0	; 31
     610:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     612:	89 2f       	mov	r24, r25
     614:	81 50       	subi	r24, 0x01	; 1
     616:	84 36       	cpi	r24, 0x64	; 100
     618:	08 f0       	brcs	.+2      	; 0x61c <ModelledRadValve::getMinPercentOpen() const+0x22>
     61a:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     61c:	90 93 68 02 	sts	0x0268, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     620:	89 2f       	mov	r24, r25
     622:	08 95       	ret

00000624 <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	65 36       	cpi	r22, 0x65	; 101
     628:	08 f4       	brcc	.+2      	; 0x62c <OccupancyTracker::isValid(unsigned char) const+0x8>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret

0000062e <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     62e:	8c e3       	ldi	r24, 0x3C	; 60
     630:	08 95       	ret

00000632 <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	08 95       	ret

00000638 <OccupancyTracker::_TEST_set_(bool)>:
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as (just) unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
     638:	fc 01       	movw	r30, r24
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
     63a:	66 23       	and	r22, r22
     63c:	39 f0       	breq	.+14     	; 0x64c <OccupancyTracker::_TEST_set_(bool)+0x14>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
     63e:	84 e6       	ldi	r24, 0x64	; 100
     640:	82 83       	std	Z+2, r24	; 0x02
     642:	82 e3       	ldi	r24, 0x32	; 50
     644:	83 83       	std	Z+3, r24	; 0x03
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	84 83       	std	Z+4, r24	; 0x04
     64a:	08 95       	ret

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as (just) unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
     64c:	14 82       	std	Z+4, r1	; 0x04
     64e:	12 82       	std	Z+2, r1	; 0x02
     650:	13 82       	std	Z+3, r1	; 0x03
     652:	08 95       	ret

00000654 <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     654:	80 91 6f 02 	lds	r24, 0x026F
     658:	08 95       	ret

0000065a <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     65a:	80 93 6f 02 	sts	0x026F, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     65e:	88 23       	and	r24, r24
     660:	11 f4       	brne	.+4      	; 0x666 <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     662:	10 92 6a 02 	sts	0x026A, r1
     666:	08 95       	ret

00000668 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     668:	80 91 6f 02 	lds	r24, 0x026F
     66c:	88 23       	and	r24, r24
     66e:	21 f0       	breq	.+8      	; 0x678 <inBakeMode()+0x10>
     670:	80 91 6a 02 	lds	r24, 0x026A
     674:	81 11       	cpse	r24, r1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	08 95       	ret

0000067a <cancelBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     67a:	10 92 6a 02 	sts	0x026A, r1
     67e:	08 95       	ret

00000680 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 6f 02 	sts	0x026F, r24
     686:	8e e1       	ldi	r24, 0x1E	; 30
     688:	80 93 6a 02 	sts	0x026A, r24
     68c:	08 95       	ret

0000068e <_TEST_set_basetemp_override(_TEST_basetemp_override)>:
//  };
// Current override state; 0 (default) means no override.
static _TEST_basetemp_override _btoUT_override;
// Set the override value (or remove the override).
void _TEST_set_basetemp_override(const _TEST_basetemp_override override)
  { _btoUT_override = override; }
     68e:	90 93 6c 02 	sts	0x026C, r25
     692:	80 93 6b 02 	sts	0x026B, r24
     696:	08 95       	ret

00000698 <getWARMTargetC()>:
// NOT safe in face of interrupts.
uint8_t getWARMTargetC()
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_btoUT_override)
     698:	80 91 6b 02 	lds	r24, 0x026B
     69c:	90 91 6c 02 	lds	r25, 0x026C
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	91 05       	cpc	r25, r1
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <getWARMTargetC()+0x1a>
     6a6:	83 30       	cpi	r24, 0x03	; 3
     6a8:	91 05       	cpc	r25, r1
     6aa:	39 f0       	breq	.+14     	; 0x6ba <getWARMTargetC()+0x22>
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	39 f4       	brne	.+14     	; 0x6be <getWARMTargetC()+0x26>
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <getWARMTargetC()+0x1e>
     6b2:	83 e1       	ldi	r24, 0x13	; 19
     6b4:	08 95       	ret
     6b6:	80 e1       	ldi	r24, 0x10	; 16
     6b8:	08 95       	ret
     6ba:	86 e1       	ldi	r24, 0x16	; 22
     6bc:	08 95       	ret
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     6be:	20 91 9e 02 	lds	r18, 0x029E
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recomputation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     6c2:	80 91 6e 02 	lds	r24, 0x026E
     6c6:	82 17       	cp	r24, r18
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <getWARMTargetC()+0x3a>
     6ca:	80 91 6d 02 	lds	r24, 0x026D
     6ce:	88 23       	and	r24, r24
     6d0:	99 f4       	brne	.+38     	; 0x6f8 <getWARMTargetC()+0x60>
  const uint8_t range = TEMP_SCALE_MAX - TEMP_SCALE_MIN + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If there are is relatively small number of distinct temperature values
  // then compute result iteratively...
  if(pot >= 256 - band) { return(TEMP_SCALE_MAX); } // At top... (optimisation / robustness)
     6d2:	2c 3d       	cpi	r18, 0xDC	; 220
     6d4:	10 f0       	brcs	.+4      	; 0x6da <getWARMTargetC()+0x42>
     6d6:	86 e1       	ldi	r24, 0x16	; 22
     6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <getWARMTargetC()+0x58>
  if(pot < band) { return(TEMP_SCALE_MIN); } // At bottom... (optimisation / robustness)
     6da:	24 32       	cpi	r18, 0x24	; 36
     6dc:	10 f4       	brcc	.+4      	; 0x6e2 <getWARMTargetC()+0x4a>
     6de:	80 e1       	ldi	r24, 0x10	; 16
     6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <getWARMTargetC()+0x58>
     6e2:	98 e4       	ldi	r25, 0x48	; 72
     6e4:	81 e1       	ldi	r24, 0x11	; 17
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <getWARMTargetC()+0x54>
  if(range < 10)
    {
    uint8_t result = TEMP_SCALE_MIN+1;
    for(uint8_t ppot = band<<1; ppot < pot; ++result) { ppot += band; }
     6e8:	9c 5d       	subi	r25, 0xDC	; 220
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	92 17       	cp	r25, r18
     6ee:	e0 f3       	brcs	.-8      	; 0x6e8 <getWARMTargetC()+0x50>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     6f0:	80 93 6d 02 	sts	0x026D, r24
    potLast = pot;
     6f4:	20 93 6e 02 	sts	0x026E, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     6f8:	08 95       	ret

000006fa <hasEcoBias()>:
//// Optimisiation/simplication: true if temp pot less than about half way.
//bool hasEcoBias() { return(TempPot.get() <= 128); }
//#else
// True if WARM temperature at/below halfway mark between eco and comfort levels.
// Midpoint should be just eco to provide a system bias toward eco.
bool hasEcoBias() { return(getWARMTargetC() <= TEMP_SCALE_MID); }
     6fa:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	84 31       	cpi	r24, 0x14	; 20
     702:	08 f4       	brcc	.+2      	; 0x706 <hasEcoBias()+0xc>
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	89 2f       	mov	r24, r25
     708:	08 95       	ret

0000070a <getFROSTTargetC()>:
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     70a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
     70e:	88 23       	and	r24, r24
     710:	31 f0       	breq	.+12     	; 0x71e <getFROSTTargetC()+0x14>
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHigh() { return(get() > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)); }

    // True if RH% high with a hysteresis band of 2 * HUMIDITY_EPSILON_RHPC.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHighWithHyst() { return(highWithHyst); }
     712:	80 91 97 02 	lds	r24, 0x0297
     716:	88 23       	and	r24, r24
     718:	11 f4       	brne	.+4      	; 0x71e <getFROSTTargetC()+0x14>
     71a:	27 e0       	ldi	r18, 0x07	; 7
     71c:	01 c0       	rjmp	.+2      	; 0x720 <getFROSTTargetC()+0x16>
     71e:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     720:	f9 99       	sbic	0x1f, 1	; 31
     722:	fe cf       	rjmp	.-4      	; 0x720 <getFROSTTargetC()+0x16>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     724:	8e e0       	ldi	r24, 0x0E	; 14
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	92 bd       	out	0x22, r25	; 34
     72a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     72c:	f8 9a       	sbi	0x1f, 0	; 31
     72e:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     730:	89 2f       	mov	r24, r25
     732:	85 50       	subi	r24, 0x05	; 5
     734:	8b 35       	cpi	r24, 0x5B	; 91
     736:	10 f0       	brcs	.+4      	; 0x73c <getFROSTTargetC()+0x32>
     738:	82 2f       	mov	r24, r18
     73a:	08 95       	ret
     73c:	89 2f       	mov	r24, r25
     73e:	92 17       	cp	r25, r18
     740:	08 f4       	brcc	.+2      	; 0x744 <getFROSTTargetC()+0x3a>
     742:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     744:	08 95       	ret

00000746 <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	00 d0       	rcall	.+0      	; 0x74c <OccupancyTracker::read()+0x6>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     752:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     754:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     756:	83 81       	ldd	r24, Z+3	; 0x03
     758:	88 23       	and	r24, r24
     75a:	11 f4       	brne	.+4      	; 0x760 <OccupancyTracker::read()+0x1a>
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0d c0       	rjmp	.+26     	; 0x77a <OccupancyTracker::read()+0x34>
     760:	83 81       	ldd	r24, Z+3	; 0x03
     762:	92 e3       	ldi	r25, 0x32	; 50
     764:	98 1b       	sub	r25, r24
     766:	99 0f       	add	r25, r25
     768:	84 e6       	ldi	r24, 0x64	; 100
     76a:	38 2f       	mov	r19, r24
     76c:	39 1b       	sub	r19, r25
     76e:	93 2f       	mov	r25, r19
     770:	39 83       	std	Y+1, r19	; 0x01
     772:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     774:	35 36       	cpi	r19, 0x65	; 101
     776:	08 f0       	brcs	.+2      	; 0x77a <OccupancyTracker::read()+0x34>
     778:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     77a:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     77c:	83 81       	ldd	r24, Z+3	; 0x03
     77e:	88 23       	and	r24, r24
     780:	31 f0       	breq	.+12     	; 0x78e <OccupancyTracker::read()+0x48>
     782:	83 81       	ldd	r24, Z+3	; 0x03
     784:	81 50       	subi	r24, 0x01	; 1
     786:	83 83       	std	Z+3, r24	; 0x03
     788:	16 82       	std	Z+6, r1	; 0x06
     78a:	15 82       	std	Z+5, r1	; 0x05
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     78e:	95 81       	ldd	r25, Z+5	; 0x05
     790:	9f 3f       	cpi	r25, 0xFF	; 255
     792:	41 f0       	breq	.+16     	; 0x7a4 <OccupancyTracker::read()+0x5e>
     794:	86 81       	ldd	r24, Z+6	; 0x06
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	86 83       	std	Z+6, r24	; 0x06
     79a:	8c 33       	cpi	r24, 0x3C	; 60
     79c:	18 f0       	brcs	.+6      	; 0x7a4 <OccupancyTracker::read()+0x5e>
     79e:	16 82       	std	Z+6, r1	; 0x06
     7a0:	9f 5f       	subi	r25, 0xFF	; 255
     7a2:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     7a4:	84 81       	ldd	r24, Z+4	; 0x04
     7a6:	88 23       	and	r24, r24
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <OccupancyTracker::read()+0x6a>
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     7b0:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7b2:	2f bf       	out	0x3f, r18	; 63
    }
  }
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <OccupancyTracker::markAsPossiblyOccupied()>:

// Call when some/weak evidence of room occupation, such as a light being turned on.
// Do not call based on internal/synthetic events.
// Doesn't force the room to appear recently occupied.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     7ca:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7cc:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     7d0:	91 32       	cpi	r25, 0x21	; 33
     7d2:	10 f4       	brcc	.+4      	; 0x7d8 <OccupancyTracker::markAsPossiblyOccupied()+0x1a>
     7d4:	81 e2       	ldi	r24, 0x21	; 33
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     7d8:	89 2f       	mov	r24, r25
     7da:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7dc:	2f bf       	out	0x3f, r18	; 63
     7de:	81 e2       	ldi	r24, 0x21	; 33
     7e0:	8a 83       	std	Y+2, r24	; 0x02
     7e2:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	84 83       	std	Z+4, r24	; 0x04
  }
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <ModelledRadValveInputState::setReferenceTemperatures(int)>:
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     7f2:	68 5f       	subi	r22, 0xF8	; 248
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	fc 01       	movw	r30, r24
     7f8:	70 87       	std	Z+8, r23	; 0x08
     7fa:	67 83       	std	Z+7, r22	; 0x07
  }
     7fc:	08 95       	ret

000007fe <ModelledRadValveState::getSmoothedRecent()>:
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
  }

// Get smoothed raw/unadjusted temperature from the most recent samples.
int ModelledRadValveState::getSmoothedRecent()
     7fe:	fc 01       	movw	r30, r24
template<size_t N> int smallIntMean(const int data[N])
  {
  // Extract mean.
  // Assume values and sum will be nowhere near the limits.
  int sum = 0;
  for(int8_t i = N; --i >= 0; ) { sum += data[i]; }
     800:	83 85       	ldd	r24, Z+11	; 0x0b
     802:	94 85       	ldd	r25, Z+12	; 0x0c
     804:	25 85       	ldd	r18, Z+13	; 0x0d
     806:	36 85       	ldd	r19, Z+14	; 0x0e
     808:	82 0f       	add	r24, r18
     80a:	93 1f       	adc	r25, r19
     80c:	21 85       	ldd	r18, Z+9	; 0x09
     80e:	32 85       	ldd	r19, Z+10	; 0x0a
     810:	82 0f       	add	r24, r18
     812:	93 1f       	adc	r25, r19
     814:	27 81       	ldd	r18, Z+7	; 0x07
     816:	30 85       	ldd	r19, Z+8	; 0x08
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	02 96       	adiw	r24, 0x02	; 2
     81e:	64 e0       	ldi	r22, 0x04	; 4
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	0e 94 ed 39 	call	0x73da	; 0x73da <__divmodhi4>
     826:	cb 01       	movw	r24, r22
  { return(smallIntMean<filterLength/2>(prevRawTempC16)); }
     828:	08 95       	ret

0000082a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>:
// Is always willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and tries to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Nominally called at a regular rate, once per minute.
// All inputState values should be set to sensible values before starting.
// Usually called by tick() which does required state updates afterwards.
uint8_t ModelledRadValve::computeRequiredTRVPercentOpen(const uint8_t valvePCOpen, const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	f8 2e       	mov	r15, r24
     836:	eb 01       	movw	r28, r22
     838:	8a 01       	movw	r16, r20
DEBUG_SERIAL_PRINT(inputState.refTempC);
DEBUG_SERIAL_PRINTLN();
#endif

  // Possibly-adjusted and.or smoothed temperature to use for targetting.
  const int adjustedTempC16 = retainedState.isFiltering ? (retainedState.getSmoothedRecent() + refTempOffsetC16) : inputState.refTempC16;
     83a:	da 01       	movw	r26, r20
     83c:	11 96       	adiw	r26, 0x01	; 1
     83e:	8c 91       	ld	r24, X
     840:	88 23       	and	r24, r24
     842:	39 f0       	breq	.+14     	; 0x852 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x28>
     844:	ca 01       	movw	r24, r20
     846:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ModelledRadValveState::getSmoothedRecent()>
     84a:	9c 01       	movw	r18, r24
     84c:	28 5f       	subi	r18, 0xF8	; 248
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	02 c0       	rjmp	.+4      	; 0x856 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c>
     852:	2f 81       	ldd	r18, Y+7	; 0x07
     854:	38 85       	ldd	r19, Y+8	; 0x08
  const int8_t adjustedTempC = (adjustedTempC16 >> 4);

  // (Well) under temp target: open valve up.
  if(adjustedTempC < inputState.targetTempC)
     856:	c9 01       	movw	r24, r18
     858:	34 e0       	ldi	r19, 0x04	; 4
     85a:	95 95       	asr	r25
     85c:	87 95       	ror	r24
     85e:	3a 95       	dec	r19
     860:	e1 f7       	brne	.-8      	; 0x85a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x30>
     862:	e8 2f       	mov	r30, r24
     864:	ff 27       	eor	r31, r31
     866:	e7 fd       	sbrc	r30, 7
     868:	f0 95       	com	r31
     86a:	88 81       	ld	r24, Y
     86c:	68 2f       	mov	r22, r24
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	e6 17       	cp	r30, r22
     872:	f7 07       	cpc	r31, r23
     874:	0c f0       	brlt	.+2      	; 0x878 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x4e>
     876:	42 c0       	rjmp	.+132    	; 0x8fc <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xd2>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("under temp");
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first ~33% will allow near-maximum heat output in practice.
    if(valvePCOpen < inputState.maxPCOpen)
     878:	5a 81       	ldd	r21, Y+2	; 0x02
     87a:	f5 16       	cp	r15, r21
     87c:	08 f0       	brcs	.+2      	; 0x880 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x56>
     87e:	f1 c0       	rjmp	.+482    	; 0xa62 <__stack+0x163>
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum.
      // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
      if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     880:	8e 81       	ldd	r24, Y+6	; 0x06
     882:	88 23       	and	r24, r24
     884:	09 f0       	breq	.+2      	; 0x888 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x5e>
     886:	ed c0       	rjmp	.+474    	; 0xa62 <__stack+0x163>
#endif

      // Reduce valve hunting: defer re-opening if recently closed.
      if(retainedState.dontTurnup()) { return(valvePCOpen); }
     888:	d8 01       	movw	r26, r16
     88a:	15 96       	adiw	r26, 0x05	; 5
     88c:	8c 91       	ld	r24, X
     88e:	15 97       	sbiw	r26, 0x05	; 5
     890:	88 23       	and	r24, r24
     892:	09 f0       	breq	.+2      	; 0x896 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x6c>
     894:	e3 c0       	rjmp	.+454    	; 0xa5c <__stack+0x15d>
      // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
      // If already at least the minimum % open for flow, filtering is on indicating rapid recent changes or jitter,
      // and the last raw change was upwards, then force glacial to try to damp oscillations and avoid overshoot.
      // Note that pseudo overshoots may be seen as the target temperature steps down.
      const bool beGlacial = inputState.glacial ||
          (retainedState.isFiltering && (valvePCOpen >= inputState.minPCOpen) && (retainedState.getRawDelta() > 0));
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	88 23       	and	r24, r24
     89a:	09 f0       	breq	.+2      	; 0x89e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x74>
     89c:	d6 c0       	rjmp	.+428    	; 0xa4a <__stack+0x14b>
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	8c 91       	ld	r24, X
     8a2:	11 97       	sbiw	r26, 0x01	; 1
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x80>
     8a8:	e3 c0       	rjmp	.+454    	; 0xa70 <__stack+0x171>
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	f8 16       	cp	r15, r24
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x88>
     8b0:	df c0       	rjmp	.+446    	; 0xa70 <__stack+0x171>
     8b2:	17 96       	adiw	r26, 0x07	; 7
     8b4:	8d 91       	ld	r24, X+
     8b6:	9c 91       	ld	r25, X
     8b8:	18 97       	sbiw	r26, 0x08	; 8
     8ba:	19 96       	adiw	r26, 0x09	; 9
     8bc:	2d 91       	ld	r18, X+
     8be:	3c 91       	ld	r19, X
     8c0:	1a 97       	sbiw	r26, 0x0a	; 10
     8c2:	82 1b       	sub	r24, r18
     8c4:	93 0b       	sbc	r25, r19
     8c6:	18 16       	cp	r1, r24
     8c8:	19 06       	cpc	r1, r25
     8ca:	0c f4       	brge	.+2      	; 0x8ce <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xa4>
     8cc:	be c0       	rjmp	.+380    	; 0xa4a <__stack+0x14b>
     8ce:	d0 c0       	rjmp	.+416    	; 0xa70 <__stack+0x171>

      // Ensure that the valve opens quickly from cold for acceptable response.
      // Less fast if already moderately open or in the degree below target.
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
     8d0:	61 50       	subi	r22, 0x01	; 1
     8d2:	70 40       	sbci	r23, 0x00	; 0
     8d4:	e6 17       	cp	r30, r22
     8d6:	f7 07       	cpc	r31, r23
     8d8:	11 f0       	breq	.+4      	; 0x8de <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb4>
     8da:	2a e0       	ldi	r18, 0x0A	; 10
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb6>
     8de:	25 e0       	ldi	r18, 0x05	; 5
     8e0:	69 81       	ldd	r22, Y+1	; 0x01
     8e2:	42 2f       	mov	r20, r18
     8e4:	26 17       	cp	r18, r22
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xc0>
     8e8:	46 2f       	mov	r20, r22
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(valvePCOpen < minOpenFromCold) { return(minOpenFromCold); }
     8ea:	f4 16       	cp	r15, r20
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xc6>
     8ee:	b8 c0       	rjmp	.+368    	; 0xa60 <__stack+0x161>
      // Slew open relatively gently...
      return(fnmin((uint8_t)(valvePCOpen + slewRate), inputState.maxPCOpen)); // Capped at maximum.
     8f0:	2f 0d       	add	r18, r15
     8f2:	25 17       	cp	r18, r21
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xce>
     8f6:	b5 c0       	rjmp	.+362    	; 0xa62 <__stack+0x163>
     8f8:	52 2f       	mov	r21, r18
     8fa:	b3 c0       	rjmp	.+358    	; 0xa62 <__stack+0x163>
    // Keep open at maximum allowed.
    return(inputState.maxPCOpen);
    }

  // (Well) over temp target: close valve down.
  if(adjustedTempC > inputState.targetTempC)
     8fc:	6e 17       	cp	r22, r30
     8fe:	7f 07       	cpc	r23, r31
     900:	ec f5       	brge	.+122    	; 0x97c <__stack+0x7d>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("over temp");

    if(0 != valvePCOpen)
     902:	ff 20       	and	r15, r15
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	aa c0       	rjmp	.+340    	; 0xa5c <__stack+0x15d>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     908:	d8 01       	movw	r26, r16
     90a:	16 96       	adiw	r26, 0x06	; 6
     90c:	8c 91       	ld	r24, X
     90e:	88 23       	and	r24, r24
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	a4 c0       	rjmp	.+328    	; 0xa5c <__stack+0x15d>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below "min % really open" floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
     914:	89 81       	ldd	r24, Y+1	; 0x01
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     916:	88 23       	and	r24, r24
     918:	99 f0       	breq	.+38     	; 0x940 <__stack+0x41>
      if(valvePCOpen < minReallyOpen)
     91a:	f8 16       	cp	r15, r24
     91c:	18 f0       	brcs	.+6      	; 0x924 <__stack+0x25>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below "min % really open" floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     91e:	48 2f       	mov	r20, r24
     920:	41 50       	subi	r20, 0x01	; 1
     922:	0f c0       	rjmp	.+30     	; 0x942 <__stack+0x43>
      if(valvePCOpen < minReallyOpen)
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (valvePCOpen < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     924:	86 30       	cpi	r24, 0x06	; 6
     926:	48 f0       	brcs	.+18     	; 0x93a <__stack+0x3b>
     928:	2f 2d       	mov	r18, r15
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	05 97       	sbiw	r24, 0x05	; 5
     930:	28 17       	cp	r18, r24
     932:	39 07       	cpc	r19, r25
     934:	14 f4       	brge	.+4      	; 0x93a <__stack+0x3b>
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	94 c0       	rjmp	.+296    	; 0xa62 <__stack+0x163>
          { return(0); } // Shut right off.
        return(valvePCOpen - 1); // Turn down as slowly as reasonably possible to help boiler cool.
     93a:	5f 2d       	mov	r21, r15
     93c:	51 50       	subi	r21, 0x01	; 1
     93e:	91 c0       	rjmp	.+290    	; 0xa62 <__stack+0x163>
     940:	40 e0       	ldi	r20, 0x00	; 0

      // FIXME: TODO-453: consider avoiding closing valve at all when temperature is falling and temperature error is small and w/ widened deadband.

      // TODO-109: with comfort bias close relatively slowly to reduce wasted effort from minor overshoots.
      // TODO-453: close relatively slowly when temperature error is small (<1C) to reduce wasted effort from minor overshoots.
      if(((!inputState.hasEcoBias) || (adjustedTempC == inputState.targetTempC+1)) &&
     942:	8d 81       	ldd	r24, Y+5	; 0x05
     944:	88 23       	and	r24, r24
     946:	31 f0       	breq	.+12     	; 0x954 <__stack+0x55>
     948:	6f 5f       	subi	r22, 0xFF	; 255
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	e6 17       	cp	r30, r22
     94e:	f7 07       	cpc	r31, r23
     950:	09 f0       	breq	.+2      	; 0x954 <__stack+0x55>
     952:	86 c0       	rjmp	.+268    	; 0xa60 <__stack+0x161>
     954:	24 2f       	mov	r18, r20
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	68 2f       	mov	r22, r24
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	c9 01       	movw	r24, r18
     960:	09 96       	adiw	r24, 0x09	; 9
     962:	86 17       	cp	r24, r22
     964:	97 07       	cpc	r25, r23
     966:	1c f4       	brge	.+6      	; 0x96e <__stack+0x6f>
     968:	b9 01       	movw	r22, r18
     96a:	66 5f       	subi	r22, 0xF6	; 246
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	8f 2d       	mov	r24, r15
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	68 17       	cp	r22, r24
     974:	79 07       	cpc	r23, r25
     976:	0c f0       	brlt	.+2      	; 0x97a <__stack+0x7b>
     978:	73 c0       	rjmp	.+230    	; 0xa60 <__stack+0x161>
     97a:	32 c0       	rjmp	.+100    	; 0x9e0 <__stack+0xe1>

  // Close to (or at) temp target: set valve partly open to try to tightly regulate.
  //
  // Use currentTempC16 lsbits to set valve percentage for proportional feedback
  // to provide more efficient and quieter TRV drive and probably more stable room temperature.
  const uint8_t lsbits = (uint8_t) (adjustedTempC16 & 0xf); // LSbits of temperature above base of proportional adjustment range.
     97c:	52 2f       	mov	r21, r18
     97e:	5f 70       	andi	r21, 0x0F	; 15
//    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
  const uint8_t tmp = 16 - lsbits; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
  const uint8_t ulpStep = 6;
  // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
  const uint8_t targetPORaw = tmp * ulpStep;
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	85 1b       	sub	r24, r21
     984:	96 e0       	ldi	r25, 0x06	; 6
     986:	89 9f       	mul	r24, r25
     988:	c0 01       	movw	r24, r0
     98a:	11 24       	eor	r1, r1
  // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
  // Constrain from above by maximum percentage open allowed, eg for pay-by-volume systems.
  const uint8_t targetPO = constrain(targetPORaw, inputState.minPCOpen, inputState.maxPCOpen);
     98c:	49 81       	ldd	r20, Y+1	; 0x01
     98e:	84 17       	cp	r24, r20
     990:	28 f0       	brcs	.+10     	; 0x99c <__stack+0x9d>
     992:	2a 81       	ldd	r18, Y+2	; 0x02
     994:	48 2f       	mov	r20, r24
     996:	28 17       	cp	r18, r24
     998:	08 f4       	brcc	.+2      	; 0x99c <__stack+0x9d>
     99a:	42 2f       	mov	r20, r18

  // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current temperature error is significant.
  if(targetPO != valvePCOpen)
     99c:	4f 15       	cp	r20, r15
     99e:	09 f4       	brne	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	5d c0       	rjmp	.+186    	; 0xa5c <__stack+0x15d>
    const bool tooOpen = (targetPO < valvePCOpen);
    // Compute the minimum/epsilon slew adjustment allowed (the deadband).
    // Also increase effective deadband if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
// FIXME //    const uint8_t realMinUlp = 1 + (inputState.isLowPrecision ? 2*ulpStep : ulpStep); // Assume precision no coarser than 1/8C.
    const uint8_t realMinUlp = 1 + ulpStep;
    const uint8_t minAbsSlew = fnmax(realMinUlp, (uint8_t)(inputState.widenDeadband ? max(min(DEFAULT_VALVE_PC_MODERATELY_OPEN/2,max(TRV_MAX_SLEW_PC_PER_MIN,2*TRV_MIN_SLEW_PC)), 2+TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC));
     9a2:	6b 81       	ldd	r22, Y+3	; 0x03
     9a4:	66 23       	and	r22, r22
     9a6:	11 f0       	breq	.+4      	; 0x9ac <__stack+0xad>
     9a8:	9e e0       	ldi	r25, 0x0E	; 14
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <__stack+0xaf>
     9ac:	97 e0       	ldi	r25, 0x07	; 7
    if(tooOpen) // Currently open more than required.  Still below target at top of proportional range.
     9ae:	4f 15       	cp	r20, r15
     9b0:	d0 f4       	brcc	.+52     	; 0x9e6 <__stack+0xe7>
      {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly too open");
      const uint8_t slew = valvePCOpen - targetPO;
     9b2:	5f 2d       	mov	r21, r15
     9b4:	54 1b       	sub	r21, r20
      // Ensure no hunting for ~1ulp temperature wobble.
      if(slew < minAbsSlew) { return(valvePCOpen); }
     9b6:	59 17       	cp	r21, r25
     9b8:	08 f4       	brcc	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	50 c0       	rjmp	.+160    	; 0xa5c <__stack+0x15d>

      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     9bc:	f8 01       	movw	r30, r16
     9be:	86 81       	ldd	r24, Z+6	; 0x06
     9c0:	88 23       	and	r24, r24
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	4b c0       	rjmp	.+150    	; 0xa5c <__stack+0x15d>

      // TODO-453: avoid closing the valve at all when the (raw) temperature is not rising, so as to minimise valve movement.
      // Since the target is the top of the proportional range than nothing within it requires the temperature to be *forced* down.
      // Possibly don't apply this rule at the very top of the range in case filtering in on and the filtered value moves differently to raw.
      if(retainedState.getRawDelta() <= 0) { return(valvePCOpen); }
     9c6:	87 81       	ldd	r24, Z+7	; 0x07
     9c8:	90 85       	ldd	r25, Z+8	; 0x08
     9ca:	21 85       	ldd	r18, Z+9	; 0x09
     9cc:	32 85       	ldd	r19, Z+10	; 0x0a
     9ce:	82 1b       	sub	r24, r18
     9d0:	93 0b       	sbc	r25, r19
     9d2:	18 16       	cp	r1, r24
     9d4:	19 06       	cpc	r1, r25
     9d6:	0c f0       	brlt	.+2      	; 0x9da <__stack+0xdb>
     9d8:	41 c0       	rjmp	.+130    	; 0xa5c <__stack+0x15d>
      
      if(slew > TRV_SLEW_PC_PER_MIN_FAST)
     9da:	5b 30       	cpi	r21, 0x0B	; 11
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <__stack+0xe1>
     9de:	40 c0       	rjmp	.+128    	; 0xa60 <__stack+0x161>
          { return(valvePCOpen - TRV_SLEW_PC_PER_MIN_FAST); } // Cap slew rate.
     9e0:	5f 2d       	mov	r21, r15
     9e2:	5a 50       	subi	r21, 0x0A	; 10
     9e4:	3e c0       	rjmp	.+124    	; 0xa62 <__stack+0x163>
    // if(targetPO > TRVPercentOpen) // Currently open less than required.  Still below target at top of proportional range.
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly too closed");
#if defined(SUPPORT_BAKE)
    // If room is well below target and in BAKE mode then immediately open to maximum.
    // Needs debounced bake mode value to avoid spuriously slamming open the valve as the user cycles through modes.
    if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	11 f0       	breq	.+4      	; 0x9f0 <__stack+0xf1>
     9ec:	5a 81       	ldd	r21, Y+2	; 0x02
     9ee:	39 c0       	rjmp	.+114    	; 0xa62 <__stack+0x163>
#endif

    const uint8_t slew = targetPO - valvePCOpen;
     9f0:	74 2f       	mov	r23, r20
     9f2:	7f 19       	sub	r23, r15
    // To to avoid hunting around boundaries of a ~1ulp temperature step.
    if(slew < minAbsSlew) { return(valvePCOpen); }
     9f4:	79 17       	cp	r23, r25
     9f6:	90 f1       	brcs	.+100    	; 0xa5c <__stack+0x15d>

    // Reduce valve hunting: defer re-opening if recently closed.
    if(retainedState.dontTurnup()) { return(valvePCOpen); }
     9f8:	d8 01       	movw	r26, r16
     9fa:	15 96       	adiw	r26, 0x05	; 5
     9fc:	8c 91       	ld	r24, X
     9fe:	15 97       	sbiw	r26, 0x05	; 5
     a00:	88 23       	and	r24, r24
     a02:	61 f5       	brne	.+88     	; 0xa5c <__stack+0x15d>
    // Keeping the temperature steady anywhere in the target proportional range
    // while minimising valve moment/noise/etc is a good goal,
    // so if raw temperatures are rising at the moment then leave the valve as-is.
    // If fairly near the final target then also leave the valve as-is (TODO-453 & TODO-451).
    const int rise = retainedState.getRawDelta();
    if(rise > 0) { return(valvePCOpen); }
     a04:	17 96       	adiw	r26, 0x07	; 7
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	18 97       	sbiw	r26, 0x08	; 8
     a0c:	19 96       	adiw	r26, 0x09	; 9
     a0e:	2d 91       	ld	r18, X+
     a10:	3c 91       	ld	r19, X
     a12:	1a 97       	sbiw	r26, 0x0a	; 10
     a14:	82 1b       	sub	r24, r18
     a16:	93 0b       	sbc	r25, r19
     a18:	18 16       	cp	r1, r24
     a1a:	19 06       	cpc	r1, r25
     a1c:	fc f0       	brlt	.+62     	; 0xa5c <__stack+0x15d>
    if( /* (0 == rise) && */ (lsbits >= (inputState.widenDeadband ? 8 : 12))) { return(valvePCOpen); }
     a1e:	66 23       	and	r22, r22
     a20:	19 f4       	brne	.+6      	; 0xa28 <__stack+0x129>
     a22:	2c e0       	ldi	r18, 0x0C	; 12
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <__stack+0x12d>
     a28:	28 e0       	ldi	r18, 0x08	; 8
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	85 2f       	mov	r24, r21
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	9c f4       	brge	.+38     	; 0xa5c <__stack+0x15d>
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = inputState.glacial ||
#if defined(ALLOW_SOFT_SETBACK)
        inputState.softSetback ||
#endif
        (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN));
     a36:	8c 81       	ldd	r24, Y+4	; 0x04
     a38:	88 23       	and	r24, r24
     a3a:	39 f4       	brne	.+14     	; 0xa4a <__stack+0x14b>
     a3c:	58 30       	cpi	r21, 0x08	; 8
     a3e:	28 f4       	brcc	.+10     	; 0xa4a <__stack+0x14b>
     a40:	54 30       	cpi	r21, 0x04	; 4
     a42:	d8 f0       	brcs	.+54     	; 0xa7a <__stack+0x17b>
     a44:	b0 e2       	ldi	r27, 0x20	; 32
     a46:	bf 15       	cp	r27, r15
     a48:	c0 f4       	brcc	.+48     	; 0xa7a <__stack+0x17b>
    if(beGlacial) { return(valvePCOpen + 1); }
     a4a:	5f 2d       	mov	r21, r15
     a4c:	5f 5f       	subi	r21, 0xFF	; 255
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__stack+0x163>

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
     a50:	7b 30       	cpi	r23, 0x0B	; 11
     a52:	30 f0       	brcs	.+12     	; 0xa60 <__stack+0x161>
     a54:	8a e0       	ldi	r24, 0x0A	; 10
        { return(valvePCOpen + maxSlew); } // Cap slew rate open.
     a56:	58 2f       	mov	r21, r24
     a58:	5f 0d       	add	r21, r15
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__stack+0x163>
     a5c:	5f 2d       	mov	r21, r15
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <__stack+0x163>
     a60:	54 2f       	mov	r21, r20
    return(targetPO);
    }

  // Leave value position as was...
  return(valvePCOpen);
  }
     a62:	85 2f       	mov	r24, r21
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	08 95       	ret

      // Ensure that the valve opens quickly from cold for acceptable response.
      // Less fast if already moderately open or in the degree below target.
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
     a70:	80 e2       	ldi	r24, 0x20	; 32
     a72:	8f 15       	cp	r24, r15
     a74:	08 f4       	brcc	.+2      	; 0xa78 <__stack+0x179>
     a76:	33 cf       	rjmp	.-410    	; 0x8de <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb4>
     a78:	2b cf       	rjmp	.-426    	; 0x8d0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xa6>
#endif
        (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN));
    if(beGlacial) { return(valvePCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	88 23       	and	r24, r24
     a7e:	41 f3       	breq	.-48     	; 0xa50 <__stack+0x151>
     a80:	85 e0       	ldi	r24, 0x05	; 5
     a82:	e9 cf       	rjmp	.-46     	; 0xa56 <__stack+0x157>

00000a84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>:

// Perform per-minute tasks such as counter and filter updates then recompute valve position.
// The input state must be complete including target and reference temperatures
// before calling this including the first time whereupon some further lazy initialisation is done.
//   * valvePCOpenRef  current valve position UPDATED BY THIS ROUTINE, in range [0,100]
void ModelledRadValveState::tick(volatile uint8_t &valvePCOpenRef, const ModelledRadValveInputState &inputState)
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	6b 01       	movw	r12, r22
     a9c:	5a 01       	movw	r10, r20
  {
  const int rawTempC16 = inputState.refTempC16 - refTempOffsetC16; // Remove adjustment for target centre.
     a9e:	fa 01       	movw	r30, r20
     aa0:	07 81       	ldd	r16, Z+7	; 0x07
     aa2:	10 85       	ldd	r17, Z+8	; 0x08
     aa4:	08 50       	subi	r16, 0x08	; 8
     aa6:	10 40       	sbci	r17, 0x00	; 0
  if(!initialised)
     aa8:	88 81       	ld	r24, Y
     aaa:	88 23       	and	r24, r24
     aac:	71 f4       	brne	.+28     	; 0xaca <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x46>
     aae:	fe 01       	movw	r30, r28
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x36>
    {
    // Fill the filter memory with the current room temperature.
    for(int i = filterLength; --i >= 0; ) { prevRawTempC16[i] = rawTempC16; }
     ab6:	10 8f       	std	Z+24, r17	; 0x18
     ab8:	07 8b       	std	Z+23, r16	; 0x17
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	32 97       	sbiw	r30, 0x02	; 2
     abe:	2f ef       	ldi	r18, 0xFF	; 255
     ac0:	8f 3f       	cpi	r24, 0xFF	; 255
     ac2:	92 07       	cpc	r25, r18
     ac4:	c1 f7       	brne	.-16     	; 0xab6 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x32>
    initialised = true;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	88 83       	st	Y, r24
     aca:	7e 01       	movw	r14, r28
     acc:	fe 01       	movw	r30, r28
     ace:	28 e0       	ldi	r18, 0x08	; 8
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x58>
    }

  // Shift in the latest (raw) temperature.
  for(int i = filterLength; --i > 0; ) { prevRawTempC16[i] = prevRawTempC16[i-1]; }
     ad4:	85 89       	ldd	r24, Z+21	; 0x15
     ad6:	96 89       	ldd	r25, Z+22	; 0x16
     ad8:	90 8f       	std	Z+24, r25	; 0x18
     ada:	87 8b       	std	Z+23, r24	; 0x17
     adc:	21 50       	subi	r18, 0x01	; 1
     ade:	30 40       	sbci	r19, 0x00	; 0
     ae0:	32 97       	sbiw	r30, 0x02	; 2
     ae2:	21 15       	cp	r18, r1
     ae4:	31 05       	cpc	r19, r1
     ae6:	b1 f7       	brne	.-20     	; 0xad4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x50>
  prevRawTempC16[0] = rawTempC16;
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	0f 83       	std	Y+7, r16	; 0x07

  // Disable/enable filtering.
  // Allow possible exit from filtering for next time
  // if the raw value is close enough to the current filtered value
  // so that reverting to unfiltered will not of itself cause a big jump.
  if(isFiltering)
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	88 23       	and	r24, r24
     af0:	c9 f0       	breq	.+50     	; 0xb24 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
    {
    if(abs(getSmoothedRecent() - rawTempC16) <= MAX_TEMP_JUMP_C16) { isFiltering = false; }  
     af2:	ce 01       	movw	r24, r28
     af4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ModelledRadValveState::getSmoothedRecent()>
     af8:	80 1b       	sub	r24, r16
     afa:	91 0b       	sbc	r25, r17
     afc:	18 16       	cp	r1, r24
     afe:	19 06       	cpc	r1, r25
     b00:	44 f4       	brge	.+16     	; 0xb12 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x8e>
     b02:	ce 01       	movw	r24, r28
     b04:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ModelledRadValveState::getSmoothedRecent()>
     b08:	80 1b       	sub	r24, r16
     b0a:	91 0b       	sbc	r25, r17
     b0c:	04 97       	sbiw	r24, 0x04	; 4
     b0e:	54 f4       	brge	.+20     	; 0xb24 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9e>
     b12:	ce 01       	movw	r24, r28
     b14:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ModelledRadValveState::getSmoothedRecent()>
     b18:	08 1b       	sub	r16, r24
     b1a:	19 0b       	sbc	r17, r25
     b1c:	04 30       	cpi	r16, 0x04	; 4
     b1e:	11 05       	cpc	r17, r1
     b20:	0c f4       	brge	.+2      	; 0xb24 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     b22:	19 82       	std	Y+1, r1	; 0x01
    }
  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!isFiltering)
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	88 23       	and	r24, r24
     b28:	e9 f4       	brne	.+58     	; 0xb64 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < filterLength; ++i) { if(abs(prevRawTempC16[i] - prevRawTempC16[i-1]) > MAX_TEMP_JUMP_C16) { isFiltering = true; break; } }
     b2e:	f7 01       	movw	r30, r14
     b30:	21 85       	ldd	r18, Z+9	; 0x09
     b32:	32 85       	ldd	r19, Z+10	; 0x0a
     b34:	87 81       	ldd	r24, Z+7	; 0x07
     b36:	90 85       	ldd	r25, Z+8	; 0x08
     b38:	28 1b       	sub	r18, r24
     b3a:	39 0b       	sbc	r19, r25
     b3c:	37 ff       	sbrs	r19, 7
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xc2>
     b40:	30 95       	com	r19
     b42:	21 95       	neg	r18
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	e8 0e       	add	r14, r24
     b4c:	f9 1e       	adc	r15, r25
     b4e:	24 30       	cpi	r18, 0x04	; 4
     b50:	31 05       	cpc	r19, r1
     b52:	1c f0       	brlt	.+6      	; 0xb5a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xd6>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     b5a:	4f 5f       	subi	r20, 0xFF	; 255
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
     b5e:	48 30       	cpi	r20, 0x08	; 8
     b60:	51 05       	cpc	r21, r1
     b62:	29 f7       	brne	.-54     	; 0xb2e <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xaa>
    }

  // Tick count down timers.
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	88 23       	and	r24, r24
     b68:	11 f0       	breq	.+4      	; 0xb6e <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xea>
     b6a:	81 50       	subi	r24, 0x01	; 1
     b6c:	8d 83       	std	Y+5, r24	; 0x05
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     b6e:	8e 81       	ldd	r24, Y+6	; 0x06
     b70:	88 23       	and	r24, r24
     b72:	11 f0       	breq	.+4      	; 0xb78 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xf4>
     b74:	81 50       	subi	r24, 0x01	; 1
     b76:	8e 83       	std	Y+6, r24	; 0x06

  // Update the modelled state including the valve position passed by reference.
  const uint8_t newValvePC = ModelledRadValve::computeRequiredTRVPercentOpen(valvePCOpenRef, inputState, *this);
     b78:	f6 01       	movw	r30, r12
     b7a:	80 81       	ld	r24, Z
     b7c:	b5 01       	movw	r22, r10
     b7e:	ae 01       	movw	r20, r28
     b80:	0e 94 15 04 	call	0x82a	; 0x82a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>
     b84:	68 2f       	mov	r22, r24
  const bool changed = (newValvePC != valvePCOpenRef);
     b86:	f6 01       	movw	r30, r12
     b88:	80 81       	ld	r24, Z
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	68 17       	cp	r22, r24
     b8e:	29 f1       	breq	.+74     	; 0xbda <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x156>
     b90:	71 e0       	ldi	r23, 0x01	; 1
  if(changed)
    {
    if(newValvePC > valvePCOpenRef)
     b92:	80 81       	ld	r24, Z
     b94:	3c 81       	ldd	r19, Y+4	; 0x04
     b96:	46 2f       	mov	r20, r22
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	86 17       	cp	r24, r22
     b9c:	58 f4       	brcc	.+22     	; 0xbb4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x130>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurnupCountdownM;
  // Mark flow as having been increased.
  void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	8e 83       	std	Y+6, r24	; 0x06
      {
      // Defer reclosing valve to avoid excessive hunting.
      valveTurnup();
      cumulativeMovementPC += (newValvePC - valvePCOpenRef);
     ba2:	20 81       	ld	r18, Z
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	93 2f       	mov	r25, r19
     ba8:	9f 70       	andi	r25, 0x0F	; 15
     baa:	82 1b       	sub	r24, r18
     bac:	91 09       	sbc	r25, r1
     bae:	84 0f       	add	r24, r20
     bb0:	95 1f       	adc	r25, r21
     bb2:	0b c0       	rjmp	.+22     	; 0xbca <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x146>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurndownCountdownM;
  // Mark flow as having been reduced.
  void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     bb4:	89 e0       	ldi	r24, 0x09	; 9
     bb6:	8d 83       	std	Y+5, r24	; 0x05
      }
    else
      {
      // Defer opening valve to avoid excessive hunting.
      valveTurndown();
      cumulativeMovementPC += (valvePCOpenRef - newValvePC);
     bb8:	f6 01       	movw	r30, r12
     bba:	20 81       	ld	r18, Z
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	93 2f       	mov	r25, r19
     bc0:	9f 70       	andi	r25, 0x0F	; 15
     bc2:	82 0f       	add	r24, r18
     bc4:	91 1d       	adc	r25, r1
     bc6:	84 1b       	sub	r24, r20
     bc8:	95 0b       	sbc	r25, r21
     bca:	8b 83       	std	Y+3, r24	; 0x03
     bcc:	89 2f       	mov	r24, r25
     bce:	8f 70       	andi	r24, 0x0F	; 15
     bd0:	30 7f       	andi	r19, 0xF0	; 240
     bd2:	38 2b       	or	r19, r24
     bd4:	3c 83       	std	Y+4, r19	; 0x04
      }
    valvePCOpenRef = newValvePC;
     bd6:	f6 01       	movw	r30, r12
     bd8:	60 83       	st	Z, r22
    }
  valveMoved = changed;
     bda:	7a 83       	std	Y+2, r23	; 0x02
  }
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	08 95       	ret

00000bf2 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     bf2:	18 16       	cp	r1, r24
     bf4:	19 06       	cpc	r1, r25
     bf6:	14 f0       	brlt	.+4      	; 0xbfc <compressTempC16(int)+0xa>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f0       	breq	.+2      	; 0xc04 <compressTempC16(int)+0x12>
     c02:	34 f4       	brge	.+12     	; 0xc10 <compressTempC16(int)+0x1e>
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	6a 95       	dec	r22
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <compressTempC16(int)+0x14>
     c0e:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	80 38       	cpi	r24, 0x80	; 128
     c14:	92 07       	cpc	r25, r18
     c16:	34 f4       	brge	.+12     	; 0xc24 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     c18:	80 50       	subi	r24, 0x00	; 0
     c1a:	91 40       	sbci	r25, 0x01	; 1
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	80 5e       	subi	r24, 0xE0	; 224
     c22:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     c24:	26 e0       	ldi	r18, 0x06	; 6
     c26:	80 34       	cpi	r24, 0x40	; 64
     c28:	92 07       	cpc	r25, r18
     c2a:	14 f0       	brlt	.+4      	; 0xc30 <compressTempC16(int)+0x3e>
     c2c:	88 ef       	ldi	r24, 0xF8	; 248
     c2e:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     c30:	80 58       	subi	r24, 0x80	; 128
     c32:	91 40       	sbci	r25, 0x01	; 1
     c34:	43 e0       	ldi	r20, 0x03	; 3
     c36:	95 95       	asr	r25
     c38:	87 95       	ror	r24
     c3a:	4a 95       	dec	r20
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <compressTempC16(int)+0x44>
     c3e:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     c40:	08 95       	ret

00000c42 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     c42:	80 32       	cpi	r24, 0x20	; 32
     c44:	40 f4       	brcc	.+16     	; 0xc56 <expandTempC16(unsigned char)+0x14>
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f3 e0       	ldi	r31, 0x03	; 3
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	fa 95       	dec	r31
     c52:	e1 f7       	brne	.-8      	; 0xc4c <expandTempC16(unsigned char)+0xa>
     c54:	17 c0       	rjmp	.+46     	; 0xc84 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     c56:	80 36       	cpi	r24, 0x60	; 96
     c58:	38 f4       	brcc	.+14     	; 0xc68 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	20 54       	subi	r18, 0x40	; 64
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	0e c0       	rjmp	.+28     	; 0xc84 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     c68:	89 3f       	cpi	r24, 0xF9	; 249
     c6a:	18 f0       	brcs	.+6      	; 0xc72 <expandTempC16(unsigned char)+0x30>
     c6c:	2f ef       	ldi	r18, 0xFF	; 255
     c6e:	3f e7       	ldi	r19, 0x7F	; 127
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	7a 95       	dec	r23
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <expandTempC16(unsigned char)+0x36>
     c80:	20 58       	subi	r18, 0x80	; 128
     c82:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     c84:	c9 01       	movw	r24, r18
     c86:	08 95       	ret

00000c88 <pollIO(bool)>:
        { return(true); }
      }
    }
#endif
  return(false);
  }
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	08 95       	ret

00000c8c <Sensor<unsigned char>::isAvailable() const>:
    virtual bool begin() { return(false); }

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	08 95       	ret

00000c90 <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	08 95       	ret

00000c96 <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	08 95       	ret

00000c9a <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret

00000c9e <Sensor<unsigned char>::end()>:
    virtual bool isAvailable() const { return(true); }

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	08 95       	ret

00000ca2 <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret

00000caa <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     caa:	10 92 3e 02 	sts	0x023E, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     cae:	8f e6       	ldi	r24, 0x6F	; 111
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	90 93 3d 02 	sts	0x023D, r25
     cb6:	80 93 3c 02 	sts	0x023C, r24
     cba:	10 92 3f 02 	sts	0x023F, r1
     cbe:	10 92 40 02 	sts	0x0240, r1
     cc2:	10 92 41 02 	sts	0x0241, r1
     cc6:	10 92 42 02 	sts	0x0242, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     cca:	10 92 45 02 	sts	0x0245, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     cce:	81 e5       	ldi	r24, 0x51	; 81
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	90 93 44 02 	sts	0x0244, r25
     cd6:	80 93 43 02 	sts	0x0243, r24
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	80 93 46 02 	sts	0x0246, r24
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	80 93 47 02 	sts	0x0247, r24
     ce6:	84 e6       	ldi	r24, 0x64	; 100
     ce8:	80 93 48 02 	sts	0x0248, r24
     cec:	10 92 49 02 	sts	0x0249, r1
     cf0:	10 92 4a 02 	sts	0x024A, r1
     cf4:	10 92 4b 02 	sts	0x024B, r1
     cf8:	10 92 4c 02 	sts	0x024C, r1
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	90 93 4e 02 	sts	0x024E, r25
     d04:	80 93 4d 02 	sts	0x024D, r24
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
     d08:	10 92 4f 02 	sts	0x024F, r1
     d0c:	10 92 50 02 	sts	0x0250, r1
     d10:	10 92 51 02 	sts	0x0251, r1
     d14:	10 92 52 02 	sts	0x0252, r1
     d18:	80 91 53 02 	lds	r24, 0x0253
     d1c:	80 7f       	andi	r24, 0xF0	; 240
     d1e:	80 93 53 02 	sts	0x0253, r24
     d22:	10 92 54 02 	sts	0x0254, r1
     d26:	10 92 55 02 	sts	0x0255, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     d2a:	10 92 66 02 	sts	0x0266, r1
     d2e:	10 92 67 02 	sts	0x0267, r1
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     d32:	08 95       	ret

00000d34 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	18 2f       	mov	r17, r24
     d3a:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     d3c:	86 17       	cp	r24, r22
     d3e:	b9 f0       	breq	.+46     	; 0xd6e <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     d40:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     d44:	21 2f       	mov	r18, r17
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	a9 01       	movw	r20, r18
     d4a:	b3 e0       	ldi	r27, 0x03	; 3
     d4c:	44 0f       	add	r20, r20
     d4e:	55 1f       	adc	r21, r21
     d50:	ba 95       	dec	r27
     d52:	e1 f7       	brne	.-8      	; 0xd4c <smoothStatsValue(unsigned char, unsigned char)+0x18>
     d54:	42 1b       	sub	r20, r18
     d56:	53 0b       	sbc	r21, r19
     d58:	87 70       	andi	r24, 0x07	; 7
     d5a:	48 0f       	add	r20, r24
     d5c:	51 1d       	adc	r21, r1
     d5e:	40 0f       	add	r20, r16
     d60:	51 1d       	adc	r21, r1
     d62:	a3 e0       	ldi	r26, 0x03	; 3
     d64:	56 95       	lsr	r21
     d66:	47 95       	ror	r20
     d68:	aa 95       	dec	r26
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     d6c:	14 2f       	mov	r17, r20
  }
     d6e:	81 2f       	mov	r24, r17
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     d76:	0e 94 db 09 	call	0x13b6	; 0x13b6 <FHT8VSyncAndTXReset()>
#endif
  }
     d7a:	08 95       	ret

00000d7c <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
     d9e:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
     da0:	90 91 69 02 	lds	r25, 0x0269
  prevStatePD = pins;
     da4:	80 93 69 02 	sts	0x0269, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
     da8:	0e 94 46 19 	call	0x328c	; 0x328c <resetCLIActiveTimer()>
  }
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	08 2f       	mov	r16, r24
     dd4:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
     dd6:	6a 30       	cpi	r22, 0x0A	; 10
     dd8:	08 f0       	brcs	.+2      	; 0xddc <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
     dda:	40 c0       	rjmp	.+128    	; 0xe5c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
     ddc:	48 31       	cpi	r20, 0x18	; 24
     dde:	18 f0       	brcs	.+6      	; 0xde6 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
     de0:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <getHoursLT()>
     de4:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
     de6:	88 e1       	ldi	r24, 0x18	; 24
     de8:	18 9f       	mul	r17, r24
     dea:	b0 01       	movw	r22, r0
     dec:	11 24       	eor	r1, r1
     dee:	9b 01       	movw	r18, r22
     df0:	20 50       	subi	r18, 0x00	; 0
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     df4:	f9 99       	sbic	0x1f, 1	; 31
     df6:	fe cf       	rjmp	.-4      	; 0xdf4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     df8:	c9 01       	movw	r24, r18
     dfa:	84 0f       	add	r24, r20
     dfc:	91 1d       	adc	r25, r1
     dfe:	92 bd       	out	0x22, r25	; 34
     e00:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e02:	f8 9a       	sbi	0x1f, 0	; 31
     e04:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     e06:	00 23       	and	r16, r16
     e08:	21 f4       	brne	.+8      	; 0xe12 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
     e0a:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e0c:	68 5e       	subi	r22, 0xE8	; 232
     e0e:	7e 4f       	sbci	r23, 0xFE	; 254
     e10:	22 c0       	rjmp	.+68     	; 0xe56 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     e12:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e14:	68 5e       	subi	r22, 0xE8	; 232
     e16:	7e 4f       	sbci	r23, 0xFE	; 254
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e1a:	f9 99       	sbic	0x1f, 1	; 31
     e1c:	fe cf       	rjmp	.-4      	; 0xe1a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e1e:	32 bd       	out	0x22, r19	; 34
     e20:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e22:	f8 9a       	sbi	0x1f, 0	; 31
     e24:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
     e26:	84 17       	cp	r24, r20
     e28:	18 f4       	brcc	.+6      	; 0xe30 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
     e2a:	9f 5f       	subi	r25, 0xFF	; 255
     e2c:	92 31       	cpi	r25, 0x12	; 18
     e2e:	c0 f4       	brcc	.+48     	; 0xe60 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e30:	2f 5f       	subi	r18, 0xFF	; 255
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	26 17       	cp	r18, r22
     e36:	37 07       	cpc	r19, r23
     e38:	81 f7       	brne	.-32     	; 0xe1a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
     e3a:	10 c0       	rjmp	.+32     	; 0xe5c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e3c:	f9 99       	sbic	0x1f, 1	; 31
     e3e:	fe cf       	rjmp	.-4      	; 0xe3c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e40:	32 bd       	out	0x22, r19	; 34
     e42:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e44:	f8 9a       	sbi	0x1f, 0	; 31
     e46:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     e48:	48 17       	cp	r20, r24
     e4a:	18 f4       	brcc	.+6      	; 0xe52 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
     e4e:	92 31       	cpi	r25, 0x12	; 18
     e50:	38 f4       	brcc	.+14     	; 0xe60 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	26 17       	cp	r18, r22
     e58:	37 07       	cpc	r19, r23
     e5a:	81 f7       	brne	.-32     	; 0xe3c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
     e60:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <ModelledRadValve::computeTargetTemp()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
uint8_t ModelledRadValve::computeTargetTemp()
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
  {
  // In FROST mode.
  if(!inWarmMode())
     e70:	80 91 6f 02 	lds	r24, 0x026F
     e74:	88 23       	and	r24, r24
     e76:	81 f5       	brne	.+96     	; 0xed8 <ModelledRadValve::computeTargetTemp()+0x70>
    {
    const uint8_t frostC = getFROSTTargetC();
     e78:	0e 94 85 03 	call	0x70a	; 0x70a <getFROSTTargetC()>
     e7c:	08 2f       	mov	r16, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     e7e:	80 91 3e 02 	lds	r24, 0x023E
     e82:	88 23       	and	r24, r24
     e84:	29 f4       	brne	.+10     	; 0xe90 <ModelledRadValve::computeTargetTemp()+0x28>
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // Don't do this if the room has been vacant for a long time (eg so as to avoid pre-warm being higher than WARM ever).
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    if(!Occupancy.longVacant() && isAnyScheduleOnWARMSoon())
     e86:	80 91 41 02 	lds	r24, 0x0241
     e8a:	89 31       	cpi	r24, 0x19	; 25
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <ModelledRadValve::computeTargetTemp()+0x28>
     e8e:	8e c0       	rjmp	.+284    	; 0xfac <ModelledRadValve::computeTargetTemp()+0x144>
     e90:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <isAnyScheduleOnWARMSoon()>
     e94:	88 23       	and	r24, r24
     e96:	09 f4       	brne	.+2      	; 0xe9a <ModelledRadValve::computeTargetTemp()+0x32>
     e98:	89 c0       	rjmp	.+274    	; 0xfac <ModelledRadValve::computeTargetTemp()+0x144>
      {
      const uint8_t warmTarget = getWARMTargetC();
     e9a:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
     e9e:	f8 2e       	mov	r15, r24
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
     ea0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
     ea4:	88 23       	and	r24, r24
     ea6:	11 f4       	brne	.+4      	; 0xeac <ModelledRadValve::computeTargetTemp()+0x44>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <ModelledRadValve::computeTargetTemp()+0x46>
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	1f 2d       	mov	r17, r15
     eb0:	18 1b       	sub	r17, r24
     eb2:	10 17       	cp	r17, r16
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <ModelledRadValve::computeTargetTemp()+0x50>
     eb6:	7a c0       	rjmp	.+244    	; 0xfac <ModelledRadValve::computeTargetTemp()+0x144>
      if((frostC < preWarmTempC) &&
     eb8:	01 17       	cp	r16, r17
     eba:	08 f0       	brcs	.+2      	; 0xebe <ModelledRadValve::computeTargetTemp()+0x56>
     ebc:	77 c0       	rjmp	.+238    	; 0xfac <ModelledRadValve::computeTargetTemp()+0x144>
     ebe:	81 e1       	ldi	r24, 0x11	; 17
     ec0:	8f 15       	cp	r24, r15
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <ModelledRadValve::computeTargetTemp()+0x5e>
     ec4:	76 c0       	rjmp	.+236    	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	65 e0       	ldi	r22, 0x05	; 5
     eca:	4f ef       	ldi	r20, 0xFF	; 255
     ecc:	0e 94 e7 06 	call	0xdce	; 0xdce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     ed0:	88 23       	and	r24, r24
     ed2:	09 f0       	breq	.+2      	; 0xed6 <ModelledRadValve::computeTargetTemp()+0x6e>
     ed4:	6e c0       	rjmp	.+220    	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     ed6:	6a c0       	rjmp	.+212    	; 0xfac <ModelledRadValve::computeTargetTemp()+0x144>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     ed8:	80 91 6a 02 	lds	r24, 0x026A
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <ModelledRadValve::computeTargetTemp()+0x7a>
     ee0:	6e c0       	rjmp	.+220    	; 0xfbe <ModelledRadValve::computeTargetTemp()+0x156>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    return(fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C)); // No setbacks apply in BAKE mode.
     ee2:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
     ee6:	18 2f       	mov	r17, r24
     ee8:	1b 5f       	subi	r17, 0xFB	; 251
     eea:	10 36       	cpi	r17, 0x60	; 96
     eec:	08 f4       	brcc	.+2      	; 0xef0 <ModelledRadValve::computeTargetTemp()+0x88>
     eee:	61 c0       	rjmp	.+194    	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     ef0:	1f e5       	ldi	r17, 0x5F	; 95
     ef2:	5f c0       	rjmp	.+190    	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     ef4:	80 91 41 02 	lds	r24, 0x0241
     ef8:	90 e0       	ldi	r25, 0x00	; 0
    bool longVacant() { return(getVacancyH() > longVacantHThrH); }

    // Returns true if room appears to have been vacant for much longer than longVacant().
    // For a home or an office no sign of activity for this long suggests a long weekend or a holiday for example.
    // Longer than longVacant() but much less than 3 days to try to capture some weekend-absence savings.
    bool longLongVacant() { return(getVacancyH() > longLongVacantHThrH); }
     efa:	ff 24       	eor	r15, r15
     efc:	88 97       	sbiw	r24, 0x28	; 40
     efe:	28 f0       	brcs	.+10     	; 0xf0a <ModelledRadValve::computeTargetTemp()+0xa2>
     f00:	ff 24       	eor	r15, r15
     f02:	f3 94       	inc	r15
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day may be a fairly strong indication that the heat can be turned down!
    // TODO-451: TODO-453: ignore a short dip in light level, eg from briefly leaving room or a transient shadow.
    // TODO: consider bottom quartile of amblient light as alternative setback trigger for near-continuously-lit spaces (aiming to spot daylight signature).
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
     f04:	01 e0       	ldi	r16, 0x01	; 1
     f06:	11 e0       	ldi	r17, 0x01	; 1
     f08:	25 c0       	rjmp	.+74     	; 0xf54 <ModelledRadValve::computeTargetTemp()+0xec>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     f0a:	80 91 3e 02 	lds	r24, 0x023E
     f0e:	88 23       	and	r24, r24
     f10:	11 f0       	breq	.+4      	; 0xf16 <ModelledRadValve::computeTargetTemp()+0xae>
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <ModelledRadValve::computeTargetTemp()+0xba>
     f16:	10 e0       	ldi	r17, 0x00	; 0
     f18:	80 91 41 02 	lds	r24, 0x0241
     f1c:	89 31       	cpi	r24, 0x19	; 25
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <ModelledRadValve::computeTargetTemp()+0xba>
     f20:	11 e0       	ldi	r17, 0x01	; 1

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     f22:	80 91 3f 02 	lds	r24, 0x023F
    const bool notLikelyOccupiedSoon = longLongVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
     f26:	88 23       	and	r24, r24
     f28:	41 f4       	brne	.+16     	; 0xf3a <ModelledRadValve::computeTargetTemp()+0xd2>
     f2a:	65 e0       	ldi	r22, 0x05	; 5
     f2c:	4f ef       	ldi	r20, 0xFF	; 255
     f2e:	0e 94 e7 06 	call	0xdce	; 0xdce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     f32:	88 23       	and	r24, r24
     f34:	11 f0       	breq	.+4      	; 0xf3a <ModelledRadValve::computeTargetTemp()+0xd2>
     f36:	01 e0       	ldi	r16, 0x01	; 1
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <ModelledRadValve::computeTargetTemp()+0xd4>
     f3a:	00 e0       	ldi	r16, 0x00	; 0
    if(longVacant ||
     f3c:	11 23       	and	r17, r17
     f3e:	51 f4       	brne	.+20     	; 0xf54 <ModelledRadValve::computeTargetTemp()+0xec>
     f40:	00 23       	and	r16, r16
     f42:	21 f4       	brne	.+8      	; 0xf4c <ModelledRadValve::computeTargetTemp()+0xe4>
     f44:	80 91 93 02 	lds	r24, 0x0293
     f48:	8b 30       	cpi	r24, 0x0B	; 11
     f4a:	90 f1       	brcs	.+100    	; 0xfb0 <ModelledRadValve::computeTargetTemp()+0x148>
     f4c:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <isAnyScheduleOnWARMNow()>
     f50:	88 23       	and	r24, r24
     f52:	71 f5       	brne	.+92     	; 0xfb0 <ModelledRadValve::computeTargetTemp()+0x148>
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longLongVacant && inOutlierQuartile(true, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED)) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || notLikelyOccupiedSoon) ?
              SETBACK_FULL : SETBACK_ECO);
     f54:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
     f58:	88 23       	and	r24, r24
     f5a:	e9 f0       	breq	.+58     	; 0xf96 <ModelledRadValve::computeTargetTemp()+0x12e>
     f5c:	80 91 3f 02 	lds	r24, 0x023F
     f60:	88 23       	and	r24, r24
     f62:	c9 f4       	brne	.+50     	; 0xf96 <ModelledRadValve::computeTargetTemp()+0x12e>
     f64:	ff 20       	and	r15, r15
     f66:	59 f4       	brne	.+22     	; 0xf7e <ModelledRadValve::computeTargetTemp()+0x116>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
     f68:	80 91 92 02 	lds	r24, 0x0292
     f6c:	88 23       	and	r24, r24
     f6e:	99 f4       	brne	.+38     	; 0xf96 <ModelledRadValve::computeTargetTemp()+0x12e>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	65 e0       	ldi	r22, 0x05	; 5
     f74:	4f ef       	ldi	r20, 0xFF	; 255
     f76:	0e 94 e7 06 	call	0xdce	; 0xdce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     f7a:	88 23       	and	r24, r24
     f7c:	61 f4       	brne	.+24     	; 0xf96 <ModelledRadValve::computeTargetTemp()+0x12e>
     f7e:	11 23       	and	r17, r17
     f80:	21 f4       	brne	.+8      	; 0xf8a <ModelledRadValve::computeTargetTemp()+0x122>
     f82:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <isAnyScheduleOnWARMSoon()>
     f86:	88 23       	and	r24, r24
     f88:	31 f4       	brne	.+12     	; 0xf96 <ModelledRadValve::computeTargetTemp()+0x12e>
     f8a:	ff 20       	and	r15, r15
     f8c:	31 f4       	brne	.+12     	; 0xf9a <ModelledRadValve::computeTargetTemp()+0x132>
     f8e:	00 23       	and	r16, r16
     f90:	21 f4       	brne	.+8      	; 0xf9a <ModelledRadValve::computeTargetTemp()+0x132>
     f92:	12 e0       	ldi	r17, 0x02	; 2
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <ModelledRadValve::computeTargetTemp()+0x134>
     f96:	11 e0       	ldi	r17, 0x01	; 1
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <ModelledRadValve::computeTargetTemp()+0x134>
     f9a:	13 e0       	ldi	r17, 0x03	; 3

      return(fnmax((uint8_t)(wt - setback), getFROSTTargetC())); // Target must never be set low enough to create a frost/freeze hazard.
     f9c:	0e 94 85 03 	call	0x70a	; 0x70a <getFROSTTargetC()>
     fa0:	e1 1a       	sub	r14, r17
     fa2:	1e 2d       	mov	r17, r14
     fa4:	e8 16       	cp	r14, r24
     fa6:	28 f4       	brcc	.+10     	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     fa8:	18 2f       	mov	r17, r24
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     fac:	10 2f       	mov	r17, r16
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <ModelledRadValve::computeTargetTemp()+0x14a>
     fb0:	1e 2d       	mov	r17, r14
      }
    // Else use WARM target as-is.
    return(wt);
    }
  }
     fb2:	81 2f       	mov	r24, r17
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
     fbe:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
     fc2:	e8 2e       	mov	r14, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     fc4:	80 91 3e 02 	lds	r24, 0x023E
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <ModelledRadValve::computeTargetTemp()+0x166>
     fcc:	93 cf       	rjmp	.-218    	; 0xef4 <ModelledRadValve::computeTargetTemp()+0x8c>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	93 cf       	rjmp	.-218    	; 0xefa <ModelledRadValve::computeTargetTemp()+0x92>

00000fd4 <ModelledRadValve::computeTargetTemperature()>:
  // Leave value position as was...
  return(valvePCOpen);
  }

// Compute/update target temperature and set up state for tick()/computeRequiredTRVPercentOpen().
void ModelledRadValve::computeTargetTemperature()
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
  {
  // Compute basic target temperature.
  const uint8_t newTarget = computeTargetTemp();
     fde:	0e 94 34 07 	call	0xe68	; 0xe68 <ModelledRadValve::computeTargetTemp()>
     fe2:	08 2f       	mov	r16, r24

  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
     fe4:	8b 83       	std	Y+3, r24	; 0x03
  inputState.minPCOpen = getMinPercentOpen();
     fe6:	e8 81       	ld	r30, Y
     fe8:	f9 81       	ldd	r31, Y+1	; 0x01
     fea:	00 8c       	ldd	r0, Z+24	; 0x18
     fec:	f1 8d       	ldd	r31, Z+25	; 0x19
     fee:	e0 2d       	mov	r30, r0
     ff0:	ce 01       	movw	r24, r28
     ff2:	09 95       	icall
     ff4:	8c 83       	std	Y+4, r24	; 0x04
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
     ff6:	84 e6       	ldi	r24, 0x64	; 100
     ff8:	8d 83       	std	Y+5, r24	; 0x05
  inputState.glacial = glacial;
     ffa:	8c a1       	ldd	r24, Y+36	; 0x24
     ffc:	8f 83       	std	Y+7, r24	; 0x07

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     ffe:	10 91 6f 02 	lds	r17, 0x026F
    1002:	11 23       	and	r17, r17
    1004:	11 f4       	brne	.+4      	; 0x100a <ModelledRadValve::computeTargetTemperature()+0x36>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <ModelledRadValve::computeTargetTemperature()+0x3e>
    100a:	80 91 6a 02 	lds	r24, 0x026A
    100e:	81 11       	cpse	r24, r1
    1010:	81 e0       	ldi	r24, 0x01	; 1
  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
  inputState.minPCOpen = getMinPercentOpen();
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
  inputState.glacial = glacial;
  inputState.inBakeMode = inBakeMode();
    1012:	89 87       	std	Y+9, r24	; 0x09
  inputState.hasEcoBias = hasEcoBias();
    1014:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
    1018:	88 87       	std	Y+8, r24	; 0x08

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    101a:	80 91 92 02 	lds	r24, 0x0292
  // Widen the allowed deadband significantly in a dark/quiet/vacant room
  // (or in FROST mode, or if temperature is jittery eg changing fast and filtering has been engaged)
  // to attempt to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
  // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
    101e:	88 23       	and	r24, r24
    1020:	61 f0       	breq	.+24     	; 0x103a <ModelledRadValve::computeTargetTemperature()+0x66>
    1022:	80 91 3e 02 	lds	r24, 0x023E
    1026:	88 23       	and	r24, r24
    1028:	21 f4       	brne	.+8      	; 0x1032 <ModelledRadValve::computeTargetTemperature()+0x5e>
    102a:	80 91 41 02 	lds	r24, 0x0241
    102e:	89 31       	cpi	r24, 0x19	; 25
    1030:	20 f4       	brcc	.+8      	; 0x103a <ModelledRadValve::computeTargetTemperature()+0x66>
    1032:	11 23       	and	r17, r17
    1034:	11 f0       	breq	.+4      	; 0x103a <ModelledRadValve::computeTargetTemperature()+0x66>
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	01 c0       	rjmp	.+2      	; 0x103c <ModelledRadValve::computeTargetTemperature()+0x68>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	8e 83       	std	Y+6, r24	; 0x06
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
    103e:	80 91 9a 02 	lds	r24, 0x029A
    1042:	90 91 9b 02 	lds	r25, 0x029B
    1046:	08 96       	adiw	r24, 0x08	; 8
  refTempC16 = referenceTempC16;
    1048:	9b 87       	std	Y+11, r25	; 0x0b
    104a:	8a 87       	std	Y+10, r24	; 0x0a
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
  // Capture adjusted reference/room temperatures
  // and set callingForHeat flag also using same outline logic as computeRequiredTRVPercentOpen() will use.
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	20 2f       	mov	r18, r16
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	95 95       	asr	r25
    1056:	87 95       	ror	r24
    1058:	6a 95       	dec	r22
    105a:	e1 f7       	brne	.-8      	; 0x1054 <ModelledRadValve::computeTargetTemperature()+0x80>
    105c:	28 17       	cp	r18, r24
    105e:	39 07       	cpc	r19, r25
    1060:	0c f0       	brlt	.+2      	; 0x1064 <ModelledRadValve::computeTargetTemperature()+0x90>
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	4b a3       	std	Y+35, r20	; 0x23
  }
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
void ModelledRadValve::computeCallForHeat()
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1076:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1078:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Cancel any BAKE mode once temperature target has been hit.
    if(!callingForHeat) { bakeCountdownM = 0; }
    107a:	8b a1       	ldd	r24, Y+35	; 0x23
    107c:	88 23       	and	r24, r24
    107e:	19 f4       	brne	.+6      	; 0x1086 <ModelledRadValve::computeCallForHeat()+0x16>
    1080:	10 92 6a 02 	sts	0x026A, r1
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <ModelledRadValve::computeCallForHeat()+0x24>
    // Run down BAKE mode timer if need be, one tick per minute.
    else if(bakeCountdownM > 0) { --bakeCountdownM; }
    1086:	80 91 6a 02 	lds	r24, 0x026A
    108a:	88 23       	and	r24, r24
    108c:	19 f0       	breq	.+6      	; 0x1094 <ModelledRadValve::computeCallForHeat()+0x24>
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	80 93 6a 02 	sts	0x026A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1094:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  // Compute target and ensure that required input state is set for computeRequiredTRVPercentOpen().
  computeTargetTemperature();
    1096:	ce 01       	movw	r24, r28
    1098:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
  retainedState.tick(value, inputState);
    109c:	ae 01       	movw	r20, r28
    109e:	4d 5f       	subi	r20, 0xFD	; 253
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	ce 01       	movw	r24, r28
    10a4:	0c 96       	adiw	r24, 0x0c	; 12
    10a6:	22 96       	adiw	r28, 0x02	; 2
    10a8:	be 01       	movw	r22, r28
    10aa:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
  }
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <ModelledRadValve::read()>:

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	8c 01       	movw	r16, r24
    10ba:	0e 94 38 08 	call	0x1070	; 0x1070 <ModelledRadValve::computeCallForHeat()>
    10be:	f8 01       	movw	r30, r16
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    10c8:	0e 94 cf 09 	call	0x139e	; 0x139e <isSyncedWithFHT8V()>
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <ModelledRadValve::isRecalibrating() const+0xc>
    10d2:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    10d4:	89 2f       	mov	r24, r25
    10d6:	08 95       	ret

000010d8 <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    10e0:	e8 81       	ld	r30, Y
    10e2:	f9 81       	ldd	r31, Y+1	; 0x01
    10e4:	02 88       	ldd	r0, Z+18	; 0x12
    10e6:	f3 89       	ldd	r31, Z+19	; 0x13
    10e8:	e0 2d       	mov	r30, r0
    10ea:	09 95       	icall
    10ec:	88 23       	and	r24, r24
    10ee:	89 f4       	brne	.+34     	; 0x1112 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    10f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <FHT8VisControlledValveOpen()>
    10f4:	88 23       	and	r24, r24
    10f6:	69 f0       	breq	.+26     	; 0x1112 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    10f8:	1a 81       	ldd	r17, Y+2	; 0x02
    10fa:	e8 81       	ld	r30, Y
    10fc:	f9 81       	ldd	r31, Y+1	; 0x01
    10fe:	00 8c       	ldd	r0, Z+24	; 0x18
    1100:	f1 8d       	ldd	r31, Z+25	; 0x19
    1102:	e0 2d       	mov	r30, r0
    1104:	ce 01       	movw	r24, r28
    1106:	09 95       	icall
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	18 17       	cp	r17, r24
    110c:	18 f0       	brcs	.+6      	; 0x1114 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1112:	90 e0       	ldi	r25, 0x00	; 0
  }
    1114:	89 2f       	mov	r24, r25
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	08 95       	ret

0000111e <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    111e:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1120:	f9 99       	sbic	0x1f, 1	; 31
    1122:	fe cf       	rjmp	.-4      	; 0x1120 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1124:	32 bd       	out	0x22, r19	; 34
    1126:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    112c:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    112e:	8f 3f       	cpi	r24, 0xFF	; 255
    1130:	11 f4       	brne	.+4      	; 0x1136 <eeprom_smart_erase_byte(unsigned char*)+0x18>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1136:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1138:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    113a:	84 e1       	ldi	r24, 0x14	; 20
    113c:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    113e:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1140:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1142:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    1144:	08 95       	ret

00001146 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    1146:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1148:	f9 99       	sbic	0x1f, 1	; 31
    114a:	fe cf       	rjmp	.-4      	; 0x1148 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    114c:	32 bd       	out	0x22, r19	; 34
    114e:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1154:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    1156:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    1158:	86 17       	cp	r24, r22
    115a:	11 f4       	brne	.+4      	; 0x1160 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    1160:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1162:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1164:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    1166:	84 e2       	ldi	r24, 0x24	; 36
    1168:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    116a:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    116c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    116e:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    1170:	08 95       	ret

00001172 <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    1172:	78 2f       	mov	r23, r24
    1174:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    1176:	6f 3f       	cpi	r22, 0xFF	; 255
    1178:	19 f4       	brne	.+6      	; 0x1180 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    117a:	0e 94 8f 08 	call	0x111e	; 0x111e <eeprom_smart_erase_byte(unsigned char*)>
    117e:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1180:	f9 99       	sbic	0x1f, 1	; 31
    1182:	fe cf       	rjmp	.-4      	; 0x1180 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1184:	47 2f       	mov	r20, r23
    1186:	5e 2f       	mov	r21, r30
    1188:	52 bd       	out	0x22, r21	; 34
    118a:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    118c:	f8 9a       	sbi	0x1f, 0	; 31
    118e:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    1190:	68 17       	cp	r22, r24
    1192:	11 f4       	brne	.+4      	; 0x1198 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    1198:	26 2f       	mov	r18, r22
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	82 23       	and	r24, r18
    11a0:	93 23       	and	r25, r19
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    11a8:	87 2f       	mov	r24, r23
    11aa:	9e 2f       	mov	r25, r30
    11ac:	0e 94 a3 08 	call	0x1146	; 0x1146 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    11b0:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    11b2:	f9 99       	sbic	0x1f, 1	; 31
    11b4:	fe cf       	rjmp	.-4      	; 0x11b2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    11b6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11b8:	52 bd       	out	0x22, r21	; 34
    11ba:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    11bc:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	fa 9a       	sbi	0x1f, 2	; 31
    11c4:	f9 9a       	sbi	0x1f, 1	; 31
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    11ca:	08 95       	ret

000011cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    11cc:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    11ce:	80 81       	ld	r24, Z
    11d0:	98 2f       	mov	r25, r24
    11d2:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    11d4:	66 23       	and	r22, r22
    11d6:	b1 f4       	brne	.+44     	; 0x1204 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    11d8:	92 30       	cpi	r25, 0x02	; 2
    11da:	51 f0       	breq	.+20     	; 0x11f0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    11dc:	93 30       	cpi	r25, 0x03	; 3
    11de:	31 f0       	breq	.+12     	; 0x11ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    11e0:	9f 01       	movw	r18, r30
    11e2:	2f 5f       	subi	r18, 0xFF	; 255
    11e4:	3f 4f       	sbci	r19, 0xFF	; 255
    11e6:	91 30       	cpi	r25, 0x01	; 1
    11e8:	59 f4       	brne	.+22     	; 0x1200 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    11ec:	8d ec       	ldi	r24, 0xCD	; 205
    11ee:	25 c0       	rjmp	.+74     	; 0x123a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    11f0:	80 7c       	andi	r24, 0xC0	; 192
    11f2:	80 63       	ori	r24, 0x30	; 48
    11f4:	22 c0       	rjmp	.+68     	; 0x123a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    11f6:	80 7f       	andi	r24, 0xF0	; 240
    11f8:	8c 60       	ori	r24, 0x0C	; 12
    11fa:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    11fc:	f9 01       	movw	r30, r18
    11fe:	11 c0       	rjmp	.+34     	; 0x1222 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1200:	83 60       	ori	r24, 0x03	; 3
    1202:	13 c0       	rjmp	.+38     	; 0x122a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    1204:	92 30       	cpi	r25, 0x02	; 2
    1206:	51 f0       	breq	.+20     	; 0x121c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    1208:	93 30       	cpi	r25, 0x03	; 3
    120a:	31 f0       	breq	.+12     	; 0x1218 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    120c:	9f 01       	movw	r18, r30
    120e:	2f 5f       	subi	r18, 0xFF	; 255
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	91 30       	cpi	r25, 0x01	; 1
    1214:	71 f4       	brne	.+28     	; 0x1232 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    1218:	80 ee       	ldi	r24, 0xE0	; 224
    121a:	0f c0       	rjmp	.+30     	; 0x123a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    121c:	80 7c       	andi	r24, 0xC0	; 192
    121e:	88 63       	ori	r24, 0x38	; 56
    1220:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	0a c0       	rjmp	.+20     	; 0x123a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    1226:	80 7f       	andi	r24, 0xF0	; 240
    1228:	8e 60       	ori	r24, 0x0E	; 14
    122a:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    122c:	f9 01       	movw	r30, r18
    122e:	8e e3       	ldi	r24, 0x3E	; 62
    1230:	04 c0       	rjmp	.+8      	; 0x123a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1232:	83 60       	ori	r24, 0x03	; 3
    1234:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    1236:	f9 01       	movw	r30, r18
    1238:	8d e8       	ldi	r24, 0x8D	; 141
    123a:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    123c:	cf 01       	movw	r24, r30
    123e:	08 95       	ret

00001240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	9c 01       	movw	r18, r24
    124e:	16 2f       	mov	r17, r22
    1250:	00 e8       	ldi	r16, 0x80	; 128
    1252:	c0 e0       	ldi	r28, 0x00	; 0
    1254:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    1256:	e6 2e       	mov	r14, r22
    1258:	ff 24       	eor	r15, r15
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	80 2f       	mov	r24, r16
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	8e 21       	and	r24, r14
    1262:	9f 21       	and	r25, r15
    1264:	89 2b       	or	r24, r25
    1266:	09 f0       	breq	.+2      	; 0x126a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	c9 01       	movw	r24, r18
    126c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1270:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    1272:	06 95       	lsr	r16
    1274:	21 96       	adiw	r28, 0x01	; 1
    1276:	c8 30       	cpi	r28, 0x08	; 8
    1278:	d1 05       	cpc	r29, r1
    127a:	79 f7       	brne	.-34     	; 0x125a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    127c:	01 2e       	mov	r0, r17
    127e:	12 95       	swap	r17
    1280:	10 25       	eor	r17, r0
    1282:	01 2e       	mov	r0, r17
    1284:	16 95       	lsr	r17
    1286:	16 95       	lsr	r17
    1288:	10 25       	eor	r17, r0
    128a:	61 2f       	mov	r22, r17
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	6f 5f       	subi	r22, 0xFF	; 255
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	76 95       	lsr	r23
    1294:	67 95       	ror	r22
    1296:	61 70       	andi	r22, 0x01	; 1
    1298:	c9 01       	movw	r24, r18
    129a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	08 95       	ret

000012ac <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	dc 01       	movw	r26, r24
    12b4:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    12b6:	8c ec       	ldi	r24, 0xCC	; 204
    12b8:	fd 01       	movw	r30, r26
    12ba:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	8c 93       	st	X, r24
    12c0:	df 01       	movw	r26, r30
    12c2:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    12c4:	81 83       	std	Z+1, r24	; 0x01
    12c6:	fd 01       	movw	r30, r26
    12c8:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    12ca:	11 96       	adiw	r26, 0x01	; 1
    12cc:	8c 93       	st	X, r24
    12ce:	df 01       	movw	r26, r30
    12d0:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    12d2:	81 83       	std	Z+1, r24	; 0x01
    12d4:	fd 01       	movw	r30, r26
    12d6:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    12dc:	ff 24       	eor	r15, r15
    12de:	fa 94       	dec	r15
    12e0:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    12e2:	cf 01       	movw	r24, r30
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    12ec:	f8 01       	movw	r30, r16
    12ee:	60 81       	ld	r22, Z
    12f0:	0e 94 20 09 	call	0x1240	; 0x1240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    12f4:	f8 01       	movw	r30, r16
    12f6:	61 81       	ldd	r22, Z+1	; 0x01
    12f8:	0e 94 20 09 	call	0x1240	; 0x1240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 20 09 	call	0x1240	; 0x1240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    1302:	f8 01       	movw	r30, r16
    1304:	62 81       	ldd	r22, Z+2	; 0x02
    1306:	0e 94 20 09 	call	0x1240	; 0x1240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    130a:	f8 01       	movw	r30, r16
    130c:	63 81       	ldd	r22, Z+3	; 0x03
    130e:	0e 94 20 09 	call	0x1240	; 0x1240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    1312:	f8 01       	movw	r30, r16
    1314:	60 81       	ld	r22, Z
    1316:	21 81       	ldd	r18, Z+1	; 0x01
    1318:	62 0f       	add	r22, r18
    131a:	64 5f       	subi	r22, 0xF4	; 244
    131c:	22 81       	ldd	r18, Z+2	; 0x02
    131e:	62 0f       	add	r22, r18
    1320:	23 81       	ldd	r18, Z+3	; 0x03
    1322:	62 0f       	add	r22, r18
    1324:	0e 94 20 09 	call	0x1240	; 0x1240 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    133a:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    133c:	f0 82       	st	Z, r15
  return(bptr);
  }
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	08 95       	ret

00001346 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1346:	f9 99       	sbic	0x1f, 1	; 31
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    134a:	80 e1       	ldi	r24, 0x10	; 16
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	92 bd       	out	0x22, r25	; 34
    1350:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1352:	f8 9a       	sbi	0x1f, 0	; 31
    1354:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    1356:	08 95       	ret

00001358 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1358:	f9 99       	sbic	0x1f, 1	; 31
    135a:	fe cf       	rjmp	.-4      	; 0x1358 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    135c:	81 e1       	ldi	r24, 0x11	; 17
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	92 bd       	out	0x22, r25	; 34
    1362:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1364:	f8 9a       	sbi	0x1f, 0	; 31
    1366:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    1368:	08 95       	ret

0000136a <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    136a:	f9 99       	sbic	0x1f, 1	; 31
    136c:	fe cf       	rjmp	.-4      	; 0x136a <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    136e:	80 e1       	ldi	r24, 0x10	; 16
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	92 bd       	out	0x22, r25	; 34
    1374:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1376:	f8 9a       	sbi	0x1f, 0	; 31
    1378:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    137a:	84 36       	cpi	r24, 0x64	; 100
    137c:	10 f0       	brcs	.+4      	; 0x1382 <localFHT8VTRVEnabled()+0x18>
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0c c0       	rjmp	.+24     	; 0x139a <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1382:	f9 99       	sbic	0x1f, 1	; 31
    1384:	fe cf       	rjmp	.-4      	; 0x1382 <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1386:	81 e1       	ldi	r24, 0x11	; 17
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	92 bd       	out	0x22, r25	; 34
    138c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    138e:	f8 9a       	sbi	0x1f, 0	; 31
    1390:	80 b5       	in	r24, 0x20	; 32
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	84 36       	cpi	r24, 0x64	; 100
    1396:	08 f4       	brcc	.+2      	; 0x139a <localFHT8VTRVEnabled()+0x30>
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	89 2f       	mov	r24, r25
    139c:	08 95       	ret

0000139e <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    139e:	80 91 70 02 	lds	r24, 0x0270
    13a2:	08 95       	ret

000013a4 <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    13a4:	80 91 70 02 	lds	r24, 0x0270
    13a8:	88 23       	and	r24, r24
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <FHT8VisControlledValveOpen()+0x10>
    13ac:	80 91 73 02 	lds	r24, 0x0273
    13b0:	81 11       	cpse	r24, r1
    13b2:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    13b4:	08 95       	ret

000013b6 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    13b6:	10 92 70 02 	sts	0x0270, r1
  syncStateFHT8V = 0;
    13ba:	10 92 72 02 	sts	0x0272, r1
  halfSecondsToNextFHT8VTX = 0;
    13be:	10 92 71 02 	sts	0x0271, r1
  FHT8V_isValveOpen = false;
    13c2:	10 92 73 02 	sts	0x0273, r1
  }
    13c6:	08 95       	ret

000013c8 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    13ce:	28 81       	ld	r18, Y
    13d0:	39 81       	ldd	r19, Y+1	; 0x01
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	82 17       	cp	r24, r18
    13d8:	93 07       	cpc	r25, r19
    13da:	10 f4       	brcc	.+4      	; 0x13e0 <readOneBit(decode_state_t*)+0x18>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	88 23       	and	r24, r24
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <readOneBit(decode_state_t*)+0x20>
    13e6:	7e c0       	rjmp	.+252    	; 0x14e4 <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	88 23       	and	r24, r24
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <readOneBit(decode_state_t*)+0x2a>
    13ee:	80 ec       	ldi	r24, 0xC0	; 192
    13f0:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	80 3c       	cpi	r24, 0xC0	; 192
    13f6:	41 f0       	breq	.+16     	; 0x1408 <readOneBit(decode_state_t*)+0x40>
    13f8:	80 33       	cpi	r24, 0x30	; 48
    13fa:	31 f0       	breq	.+12     	; 0x1408 <readOneBit(decode_state_t*)+0x40>
    13fc:	8c 30       	cpi	r24, 0x0C	; 12
    13fe:	21 f0       	breq	.+8      	; 0x1408 <readOneBit(decode_state_t*)+0x40>
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	11 f0       	breq	.+4      	; 0x1408 <readOneBit(decode_state_t*)+0x40>
    1404:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	e8 81       	ld	r30, Y
    1410:	f9 81       	ldd	r31, Y+1	; 0x01
    1412:	80 81       	ld	r24, Z
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	82 23       	and	r24, r18
    1418:	93 23       	and	r25, r19
    141a:	28 17       	cp	r18, r24
    141c:	39 07       	cpc	r19, r25
    141e:	09 f0       	breq	.+2      	; 0x1422 <readOneBit(decode_state_t*)+0x5a>
    1420:	51 c0       	rjmp	.+162    	; 0x14c4 <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1422:	c9 01       	movw	r24, r18
    1424:	95 95       	asr	r25
    1426:	87 95       	ror	r24
    1428:	95 95       	asr	r25
    142a:	87 95       	ror	r24
    142c:	8c 83       	std	Y+4, r24	; 0x04
    142e:	88 23       	and	r24, r24
    1430:	61 f4       	brne	.+24     	; 0x144a <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    1432:	80 ec       	ldi	r24, 0xC0	; 192
    1434:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1436:	9f 01       	movw	r18, r30
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	39 83       	std	Y+1, r19	; 0x01
    143e:	28 83       	st	Y, r18
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	82 17       	cp	r24, r18
    1446:	93 07       	cpc	r25, r19
    1448:	e8 f1       	brcs	.+122    	; 0x14c4 <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    144c:	e8 81       	ld	r30, Y
    144e:	f9 81       	ldd	r31, Y+1	; 0x01
    1450:	20 81       	ld	r18, Z
    1452:	28 23       	and	r18, r24
    1454:	28 30       	cpi	r18, 0x08	; 8
    1456:	c1 f0       	breq	.+48     	; 0x1488 <readOneBit(decode_state_t*)+0xc0>
    1458:	29 30       	cpi	r18, 0x09	; 9
    145a:	28 f4       	brcc	.+10     	; 0x1466 <readOneBit(decode_state_t*)+0x9e>
    145c:	22 23       	and	r18, r18
    145e:	41 f0       	breq	.+16     	; 0x1470 <readOneBit(decode_state_t*)+0xa8>
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	81 f5       	brne	.+96     	; 0x14c4 <readOneBit(decode_state_t*)+0xfc>
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <readOneBit(decode_state_t*)+0xc0>
    1466:	20 32       	cpi	r18, 0x20	; 32
    1468:	79 f0       	breq	.+30     	; 0x1488 <readOneBit(decode_state_t*)+0xc0>
    146a:	20 38       	cpi	r18, 0x80	; 128
    146c:	59 f5       	brne	.+86     	; 0x14c4 <readOneBit(decode_state_t*)+0xfc>
    146e:	0c c0       	rjmp	.+24     	; 0x1488 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	95 95       	asr	r25
    1474:	87 95       	ror	r24
    1476:	95 95       	asr	r25
    1478:	87 95       	ror	r24
    147a:	8c 83       	std	Y+4, r24	; 0x04
    147c:	88 23       	and	r24, r24
    147e:	91 f5       	brne	.+100    	; 0x14e4 <readOneBit(decode_state_t*)+0x11c>
    1480:	31 96       	adiw	r30, 0x01	; 1
    1482:	f9 83       	std	Y+1, r31	; 0x01
    1484:	e8 83       	st	Y, r30
    1486:	2f c0       	rjmp	.+94     	; 0x14e6 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	95 95       	asr	r25
    148c:	87 95       	ror	r24
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	8c 83       	std	Y+4, r24	; 0x04
    1494:	88 23       	and	r24, r24
    1496:	61 f4       	brne	.+24     	; 0x14b0 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    1498:	80 ec       	ldi	r24, 0xC0	; 192
    149a:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    149c:	88 81       	ld	r24, Y
    149e:	99 81       	ldd	r25, Y+1	; 0x01
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	99 83       	std	Y+1, r25	; 0x01
    14a4:	88 83       	st	Y, r24
    14a6:	2a 81       	ldd	r18, Y+2	; 0x02
    14a8:	3b 81       	ldd	r19, Y+3	; 0x03
    14aa:	28 17       	cp	r18, r24
    14ac:	39 07       	cpc	r19, r25
    14ae:	50 f0       	brcs	.+20     	; 0x14c4 <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	e8 81       	ld	r30, Y
    14b4:	f9 81       	ldd	r31, Y+1	; 0x01
    14b6:	80 81       	ld	r24, Z
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	82 23       	and	r24, r18
    14be:	93 23       	and	r25, r19
    14c0:	89 2b       	or	r24, r25
    14c2:	19 f0       	breq	.+6      	; 0x14ca <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    14ca:	c9 01       	movw	r24, r18
    14cc:	95 95       	asr	r25
    14ce:	87 95       	ror	r24
    14d0:	95 95       	asr	r25
    14d2:	87 95       	ror	r24
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	88 23       	and	r24, r24
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <readOneBit(decode_state_t*)+0x118>
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	f9 83       	std	Y+1, r31	; 0x01
    14de:	e8 83       	st	Y, r30
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <readOneBit(decode_state_t*)+0x11e>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    14fa:	fc 01       	movw	r30, r24
    14fc:	85 81       	ldd	r24, Z+5	; 0x05
    14fe:	88 23       	and	r24, r24
    1500:	11 f0       	breq	.+4      	; 0x1506 <readOneByteWithParity(decode_state_t*)+0x1a>
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	1b c0       	rjmp	.+54     	; 0x153c <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    1506:	c7 01       	movw	r24, r14
    1508:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <readOneBit(decode_state_t*)>
    150c:	18 2f       	mov	r17, r24
    150e:	08 2f       	mov	r16, r24
    1510:	c7 e0       	ldi	r28, 0x07	; 7
    1512:	d0 e0       	ldi	r29, 0x00	; 0
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    1516:	c7 01       	movw	r24, r14
    1518:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <readOneBit(decode_state_t*)>
    parity ^= bit;
    151c:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    151e:	11 0f       	add	r17, r17
    1520:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    1522:	21 97       	sbiw	r28, 0x01	; 1
    1524:	ff ef       	ldi	r31, 0xFF	; 255
    1526:	cf 3f       	cpi	r28, 0xFF	; 255
    1528:	df 07       	cpc	r29, r31
    152a:	a9 f7       	brne	.-22     	; 0x1516 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    152c:	c7 01       	movw	r24, r14
    152e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <readOneBit(decode_state_t*)>
    1532:	08 17       	cp	r16, r24
    1534:	19 f0       	breq	.+6      	; 0x153c <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	f7 01       	movw	r30, r14
    153a:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    153c:	81 2f       	mov	r24, r17
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	08 95       	ret

0000154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    155c:	00 d0       	rcall	.+0      	; 0x155e <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    156a:	7c 83       	std	Y+4, r23	; 0x04
    156c:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    156e:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    1570:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    1572:	7e 01       	movw	r14, r28
    1574:	08 94       	sec
    1576:	e1 1c       	adc	r14, r1
    1578:	f1 1c       	adc	r15, r1
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    157c:	8e 81       	ldd	r24, Y+6	; 0x06
    157e:	88 23       	and	r24, r24
    1580:	e9 f5       	brne	.+122    	; 0x15fc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    1582:	c7 01       	movw	r24, r14
    1584:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <readOneBit(decode_state_t*)>
    1588:	88 23       	and	r24, r24
    158a:	c1 f3       	breq	.-16     	; 0x157c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    158c:	c7 01       	movw	r24, r14
    158e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <readOneByteWithParity(decode_state_t*)>
    1592:	f8 01       	movw	r30, r16
    1594:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    1596:	c7 01       	movw	r24, r14
    1598:	0e 94 76 0a 	call	0x14ec	; 0x14ec <readOneByteWithParity(decode_state_t*)>
    159c:	f8 01       	movw	r30, r16
    159e:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    15a0:	c7 01       	movw	r24, r14
    15a2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <readOneByteWithParity(decode_state_t*)>
    15a6:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    15a8:	c7 01       	movw	r24, r14
    15aa:	0e 94 76 0a 	call	0x14ec	; 0x14ec <readOneByteWithParity(decode_state_t*)>
    15ae:	f8 01       	movw	r30, r16
    15b0:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    15b2:	c7 01       	movw	r24, r14
    15b4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <readOneByteWithParity(decode_state_t*)>
    15b8:	f8 01       	movw	r30, r16
    15ba:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    15bc:	c7 01       	movw	r24, r14
    15be:	0e 94 76 0a 	call	0x14ec	; 0x14ec <readOneByteWithParity(decode_state_t*)>
    15c2:	28 2f       	mov	r18, r24
  if(state.failed)
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	88 23       	and	r24, r24
    15c8:	c9 f4       	brne	.+50     	; 0x15fc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    15ca:	f8 01       	movw	r30, r16
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	89 0f       	add	r24, r25
    15d2:	84 5f       	subi	r24, 0xF4	; 244
    15d4:	92 81       	ldd	r25, Z+2	; 0x02
    15d6:	89 0f       	add	r24, r25
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	89 0f       	add	r24, r25
    15dc:	8d 0d       	add	r24, r13
    15de:	82 17       	cp	r24, r18
    15e0:	69 f4       	brne	.+26     	; 0x15fc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    15e2:	c7 01       	movw	r24, r14
    15e4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <readOneBit(decode_state_t*)>
    15e8:	88 23       	and	r24, r24
    15ea:	41 f4       	brne	.+16     	; 0x15fc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    15ec:	8e 81       	ldd	r24, Y+6	; 0x06
    15ee:	88 23       	and	r24, r24
    15f0:	29 f4       	brne	.+10     	; 0x15fc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    15f2:	29 81       	ldd	r18, Y+1	; 0x01
    15f4:	3a 81       	ldd	r19, Y+2	; 0x02
    15f6:	2f 5f       	subi	r18, 0xFF	; 255
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
  }
    1600:	c9 01       	movw	r24, r18
    1602:	26 96       	adiw	r28, 0x06	; 6
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	08 95       	ret

0000161e <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	7c 01       	movw	r14, r24
    1630:	36 2f       	mov	r19, r22
    1632:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    1634:	86 e2       	ldi	r24, 0x26	; 38
    1636:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	28 9f       	mul	r18, r24
    163c:	c0 01       	movw	r24, r0
    163e:	11 24       	eor	r1, r1
    1640:	64 e6       	ldi	r22, 0x64	; 100
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	0e 94 ed 39 	call	0x73da	; 0x73da <__divmodhi4>
    1648:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    164a:	33 23       	and	r19, r19
    164c:	11 f4       	brne	.+4      	; 0x1652 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x34>
    164e:	c7 01       	movw	r24, r14
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x46>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    1652:	c7 01       	movw	r24, r14
    1654:	6a ea       	ldi	r22, 0xAA	; 170
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	45 e0       	ldi	r20, 0x05	; 5
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    1660:	c7 01       	movw	r24, r14
    1662:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    1664:	be 01       	movw	r22, r28
    1666:	0e 94 56 09 	call	0x12ac	; 0x12ac <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    166a:	d8 2e       	mov	r13, r24
    166c:	c9 2e       	mov	r12, r25

#if defined(ALLOW_STATS_TX)
  if(NULL != trailer)
    166e:	01 15       	cp	r16, r1
    1670:	11 05       	cpc	r17, r1
    1672:	79 f0       	breq	.+30     	; 0x1692 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
      }
    else
#endif
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    1674:	0e 94 40 18 	call	0x3080	; 0x3080 <getStatsTXLevel()>
    1678:	ac 01       	movw	r20, r24
    167a:	6e 2d       	mov	r22, r14
    167c:	64 5c       	subi	r22, 0xC4	; 196
    167e:	6d 19       	sub	r22, r13
    1680:	8d 2d       	mov	r24, r13
    1682:	9c 2d       	mov	r25, r12
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	11 f0       	breq	.+4      	; 0x1692 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    168e:	d8 2e       	mov	r13, r24
    1690:	c9 2e       	mov	r12, r25
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    1692:	8d 2d       	mov	r24, r13
    1694:	9c 2d       	mov	r25, r12
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	08 95       	ret

000016a8 <crc7_5B_update(unsigned char, unsigned char)>:
 * For 2 or 3 byte payloads this should have a Hamming distance of 4 and be within a factor of 2 of optimal error detection.
 * <p>
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    16a8:	38 2f       	mov	r19, r24
    16aa:	70 e8       	ldi	r23, 0x80	; 128
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    16b0:	e6 2f       	mov	r30, r22
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	a1 e0       	ldi	r26, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    16b6:	67 e3       	ldi	r22, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    16b8:	83 2f       	mov	r24, r19
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	26 e0       	ldi	r18, 0x06	; 6
    16be:	96 95       	lsr	r25
    16c0:	87 95       	ror	r24
    16c2:	2a 95       	dec	r18
    16c4:	e1 f7       	brne	.-8      	; 0x16be <crc7_5B_update(unsigned char, unsigned char)+0x16>
    16c6:	28 2f       	mov	r18, r24
    16c8:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    16ca:	87 2f       	mov	r24, r23
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	8e 23       	and	r24, r30
    16d0:	9f 23       	and	r25, r31
    16d2:	89 2b       	or	r24, r25
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <crc7_5B_update(unsigned char, unsigned char)+0x30>
    16d6:	2a 27       	eor	r18, r26
        crc <<= 1;
    16d8:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    16da:	21 11       	cpse	r18, r1
    16dc:	36 27       	eor	r19, r22
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    16de:	76 95       	lsr	r23
    16e0:	4f 5f       	subi	r20, 0xFF	; 255
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	48 30       	cpi	r20, 0x08	; 8
    16e6:	51 05       	cpc	r21, r1
    16e8:	39 f7       	brne	.-50     	; 0x16b8 <crc7_5B_update(unsigned char, unsigned char)+0x10>
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    }
    16ea:	83 2f       	mov	r24, r19
    16ec:	8f 77       	andi	r24, 0x7F	; 127
    16ee:	08 95       	ret

000016f0 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>:




// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
    16f0:	fc 01       	movw	r30, r24
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    16f2:	30 81       	ld	r19, Z
    16f4:	83 2f       	mov	r24, r19
    16f6:	80 7e       	andi	r24, 0xE0	; 224
    16f8:	80 34       	cpi	r24, 0x40	; 64
    16fa:	51 f5       	brne	.+84     	; 0x1750 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    16fc:	81 81       	ldd	r24, Z+1	; 0x01
    16fe:	87 fd       	sbrc	r24, 7
    1700:	27 c0       	rjmp	.+78     	; 0x1750 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    1702:	72 81       	ldd	r23, Z+2	; 0x02
    1704:	60 e8       	ldi	r22, 0x80	; 128
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    170a:	e8 2f       	mov	r30, r24
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	b1 e0       	ldi	r27, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1710:	a7 e3       	ldi	r26, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1712:	83 2f       	mov	r24, r19
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	26 e0       	ldi	r18, 0x06	; 6
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	2a 95       	dec	r18
    171e:	e1 f7       	brne	.-8      	; 0x1718 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x28>
    1720:	28 2f       	mov	r18, r24
    1722:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1724:	86 2f       	mov	r24, r22
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	8e 23       	and	r24, r30
    172a:	9f 23       	and	r25, r31
    172c:	89 2b       	or	r24, r25
    172e:	09 f0       	breq	.+2      	; 0x1732 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x42>
    1730:	2b 27       	eor	r18, r27
        crc <<= 1;
    1732:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1734:	21 11       	cpse	r18, r1
    1736:	3a 27       	eor	r19, r26
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1738:	66 95       	lsr	r22
    173a:	4f 5f       	subi	r20, 0xFF	; 255
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	48 30       	cpi	r20, 0x08	; 8
    1740:	51 05       	cpc	r21, r1
    1742:	39 f7       	brne	.-50     	; 0x1712 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x22>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	3f 77       	andi	r19, 0x7F	; 127
    1748:	73 17       	cp	r23, r19
    174a:	19 f4       	brne	.+6      	; 0x1752 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x62>
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	08 95       	ret
// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    1750:	80 e0       	ldi	r24, 0x00	; 0
  }
    1752:	08 95       	ret

00001754 <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    1754:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    1756:	80 81       	ld	r24, Z
    1758:	8b 37       	cpi	r24, 0x7B	; 123
    175a:	a9 f4       	brne	.+42     	; 0x1786 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    175c:	9f 01       	movw	r18, r30
    175e:	2a 5c       	subi	r18, 0xCA	; 202
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    1764:	9d 37       	cpi	r25, 0x7D	; 125
    1766:	29 f4       	brne	.+10     	; 0x1772 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	88 23       	and	r24, r24
    176c:	11 f4       	brne	.+4      	; 0x1772 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    1772:	89 2f       	mov	r24, r25
    1774:	80 52       	subi	r24, 0x20	; 32
    1776:	8f 35       	cpi	r24, 0x5F	; 95
    1778:	30 f4       	brcc	.+12     	; 0x1786 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    177a:	99 23       	and	r25, r25
    177c:	21 f0       	breq	.+8      	; 0x1786 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    177e:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    1780:	e2 17       	cp	r30, r18
    1782:	f3 07       	cpc	r31, r19
    1784:	71 f7       	brne	.-36     	; 0x1762 <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    1788:	08 95       	ret

0000178a <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	18 2f       	mov	r17, r24
    1790:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    1792:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    1796:	88 23       	and	r24, r24
    1798:	09 f4       	brne	.+2      	; 0x179c <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    179a:	51 c0       	rjmp	.+162    	; 0x183e <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    179c:	81 2f       	mov	r24, r17
    179e:	90 2f       	mov	r25, r16
    17a0:	9c 01       	movw	r18, r24
    17a2:	f9 01       	movw	r30, r18
    17a4:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    17a6:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    17a8:	77 e3       	ldi	r23, 0x37	; 55
    17aa:	44 c0       	rjmp	.+136    	; 0x1834 <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    17ac:	9d 37       	cpi	r25, 0x7D	; 125
    17ae:	19 f5       	brne	.+70     	; 0x17f6 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    17b0:	81 81       	ldd	r24, Z+1	; 0x01
    17b2:	88 23       	and	r24, r24
    17b4:	01 f5       	brne	.+64     	; 0x17f6 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    17b6:	8d ef       	ldi	r24, 0xFD	; 253
    17b8:	80 83       	st	Z, r24
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    17c0:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    17c2:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    17c4:	86 2f       	mov	r24, r22
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	e6 e0       	ldi	r30, 0x06	; 6
    17ca:	96 95       	lsr	r25
    17cc:	87 95       	ror	r24
    17ce:	ea 95       	dec	r30
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    17d2:	98 2f       	mov	r25, r24
    17d4:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    17d6:	84 2f       	mov	r24, r20
    17d8:	8d 7f       	andi	r24, 0xFD	; 253
    17da:	09 f0       	breq	.+2      	; 0x17de <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    17dc:	97 27       	eor	r25, r23
        crc <<= 1;
    17de:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    17e0:	91 11       	cpse	r25, r1
    17e2:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    17e4:	46 95       	lsr	r20
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	28 30       	cpi	r18, 0x08	; 8
    17ec:	31 05       	cpc	r19, r1
    17ee:	51 f7       	brne	.-44     	; 0x17c4 <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    17f0:	86 2f       	mov	r24, r22
    17f2:	8f 77       	andi	r24, 0x7F	; 127
    17f4:	25 c0       	rjmp	.+74     	; 0x1840 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    17f6:	30 e8       	ldi	r19, 0x80	; 128
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    17fc:	a9 2f       	mov	r26, r25
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1800:	86 2f       	mov	r24, r22
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	06 e0       	ldi	r16, 0x06	; 6
    1806:	96 95       	lsr	r25
    1808:	87 95       	ror	r24
    180a:	0a 95       	dec	r16
    180c:	e1 f7       	brne	.-8      	; 0x1806 <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    180e:	28 2f       	mov	r18, r24
    1810:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1812:	83 2f       	mov	r24, r19
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	8a 23       	and	r24, r26
    1818:	9b 23       	and	r25, r27
    181a:	89 2b       	or	r24, r25
    181c:	09 f0       	breq	.+2      	; 0x1820 <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    181e:	21 27       	eor	r18, r17
        crc <<= 1;
    1820:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    1822:	21 11       	cpse	r18, r1
    1824:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1826:	36 95       	lsr	r19
    1828:	4f 5f       	subi	r20, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	48 30       	cpi	r20, 0x08	; 8
    182e:	51 05       	cpc	r21, r1
    1830:	39 f7       	brne	.-50     	; 0x1800 <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1832:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    1834:	31 96       	adiw	r30, 0x01	; 1
    1836:	90 81       	ld	r25, Z
    1838:	99 23       	and	r25, r25
    183a:	09 f0       	breq	.+2      	; 0x183e <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    183c:	b7 cf       	rjmp	.-146    	; 0x17ac <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    183e:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	08 95       	ret

00001846 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    1858:	80 81       	ld	r24, Z
    185a:	8b 37       	cpi	r24, 0x7B	; 123
    185c:	09 f0       	breq	.+2      	; 0x1860 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    1860:	68 33       	cpi	r22, 0x38	; 56
    1862:	08 f0       	brcs	.+2      	; 0x1866 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    1864:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    1866:	ef 01       	movw	r28, r30
    1868:	21 96       	adiw	r28, 0x01	; 1
    186a:	3b e7       	ldi	r19, 0x7B	; 123
    186c:	a1 e0       	ldi	r26, 0x01	; 1
    186e:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    1870:	e6 2e       	mov	r14, r22
    1872:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1874:	cc 24       	eor	r12, r12
    1876:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1878:	47 e3       	ldi	r20, 0x37	; 55
    187a:	d4 2e       	mov	r13, r20
    187c:	31 c0       	rjmp	.+98     	; 0x18e0 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    187e:	fe 01       	movw	r30, r28
    1880:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    1882:	60 e8       	ldi	r22, 0x80	; 128
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1888:	07 2f       	mov	r16, r23
    188a:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    188c:	83 2f       	mov	r24, r19
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	26 e0       	ldi	r18, 0x06	; 6
    1892:	96 95       	lsr	r25
    1894:	87 95       	ror	r24
    1896:	2a 95       	dec	r18
    1898:	e1 f7       	brne	.-8      	; 0x1892 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    189a:	28 2f       	mov	r18, r24
    189c:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    189e:	86 2f       	mov	r24, r22
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	80 23       	and	r24, r16
    18a4:	91 23       	and	r25, r17
    18a6:	89 2b       	or	r24, r25
    18a8:	09 f0       	breq	.+2      	; 0x18ac <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    18aa:	2c 25       	eor	r18, r12
        crc <<= 1;
    18ac:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    18ae:	21 11       	cpse	r18, r1
    18b0:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    18b2:	66 95       	lsr	r22
    18b4:	4f 5f       	subi	r20, 0xFF	; 255
    18b6:	5f 4f       	sbci	r21, 0xFF	; 255
    18b8:	48 30       	cpi	r20, 0x08	; 8
    18ba:	51 05       	cpc	r21, r1
    18bc:	39 f7       	brne	.-50     	; 0x188c <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    18be:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    18c0:	7d 3f       	cpi	r23, 0xFD	; 253
    18c2:	49 f4       	brne	.+18     	; 0x18d6 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    18c4:	80 81       	ld	r24, Z
    18c6:	38 17       	cp	r19, r24
    18c8:	31 f4       	brne	.+12     	; 0x18d6 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    18ca:	8d e7       	ldi	r24, 0x7D	; 125
    18cc:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    18ce:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    18d0:	8a 2f       	mov	r24, r26
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    18d6:	70 52       	subi	r23, 0x20	; 32
    18d8:	7f 35       	cpi	r23, 0x5F	; 95
    18da:	28 f4       	brcc	.+10     	; 0x18e6 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	ef 01       	movw	r28, r30
    18e0:	ae 15       	cp	r26, r14
    18e2:	bf 05       	cpc	r27, r15
    18e4:	64 f2       	brlt	.-104    	; 0x187e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	ff 90       	pop	r15
    18f2:	ef 90       	pop	r14
    18f4:	df 90       	pop	r13
    18f6:	cf 90       	pop	r12
    18f8:	08 95       	ret

000018fa <BufPrint::write(unsigned char)>:


// Print a single char to a bounded buffer; returns 1 if successful, else 0 if full.
size_t BufPrint::write(const uint8_t c)
    18fa:	dc 01       	movw	r26, r24
  {
  if(size < capacity) { b[size++] = c; b[size] = '\0'; return(1); }
    18fc:	17 96       	adiw	r26, 0x07	; 7
    18fe:	9c 91       	ld	r25, X
    1900:	17 97       	sbiw	r26, 0x07	; 7
    1902:	16 96       	adiw	r26, 0x06	; 6
    1904:	8c 91       	ld	r24, X
    1906:	16 97       	sbiw	r26, 0x06	; 6
    1908:	98 17       	cp	r25, r24
    190a:	18 f0       	brcs	.+6      	; 0x1912 <BufPrint::write(unsigned char)+0x18>
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	15 c0       	rjmp	.+42     	; 0x193c <BufPrint::write(unsigned char)+0x42>
    1912:	14 96       	adiw	r26, 0x04	; 4
    1914:	ed 91       	ld	r30, X+
    1916:	fc 91       	ld	r31, X
    1918:	15 97       	sbiw	r26, 0x05	; 5
    191a:	e9 0f       	add	r30, r25
    191c:	f1 1d       	adc	r31, r1
    191e:	60 83       	st	Z, r22
    1920:	89 2f       	mov	r24, r25
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	17 96       	adiw	r26, 0x07	; 7
    1926:	8c 93       	st	X, r24
    1928:	17 97       	sbiw	r26, 0x07	; 7
    192a:	14 96       	adiw	r26, 0x04	; 4
    192c:	ed 91       	ld	r30, X+
    192e:	fc 91       	ld	r31, X
    1930:	15 97       	sbiw	r26, 0x05	; 5
    1932:	e8 0f       	add	r30, r24
    1934:	f1 1d       	adc	r31, r1
    1936:	10 82       	st	Z, r1
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	30 e0       	ldi	r19, 0x00	; 0
  return(0);
  }
    193c:	c9 01       	movw	r24, r18
    193e:	08 95       	ret

00001940 <isValidKey(char const*)>:
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	81 f0       	breq	.+32     	; 0x1964 <isValidKey(char const*)+0x24>
    1944:	fc 01       	movw	r30, r24
    1946:	09 c0       	rjmp	.+18     	; 0x195a <isValidKey(char const*)+0x1a>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    1948:	89 2f       	mov	r24, r25
    194a:	80 52       	subi	r24, 0x20	; 32
    194c:	8f 35       	cpi	r24, 0x5F	; 95
    194e:	50 f4       	brcc	.+20     	; 0x1964 <isValidKey(char const*)+0x24>
    1950:	92 32       	cpi	r25, 0x22	; 34
    1952:	41 f0       	breq	.+16     	; 0x1964 <isValidKey(char const*)+0x24>
    1954:	9c 35       	cpi	r25, 0x5C	; 92
    1956:	31 f0       	breq	.+12     	; 0x1964 <isValidKey(char const*)+0x24>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    1958:	31 96       	adiw	r30, 0x01	; 1
    195a:	90 81       	ld	r25, Z
    195c:	99 23       	and	r25, r25
    195e:	a1 f7       	brne	.-24     	; 0x1948 <isValidKey(char const*)+0x8>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	08 95       	ret
    1964:	80 e0       	ldi	r24, 0x00	; 0
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    }
  return(true);
  }
    1966:	08 95       	ret

00001968 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>:
  return(false); // FAILED: full.
  }

#if defined(ALLOW_JSON_OUTPUT)
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
    1968:	4f 92       	push	r4
    196a:	5f 92       	push	r5
    196c:	6f 92       	push	r6
    196e:	7f 92       	push	r7
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	96 2e       	mov	r9, r22
    198a:	87 2e       	mov	r8, r23
    198c:	3a 01       	movw	r6, r20
    198e:	29 01       	movw	r4, r18
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
    1990:	f9 01       	movw	r30, r18
    1992:	80 81       	ld	r24, Z
    1994:	88 23       	and	r24, r24
    1996:	19 f4       	brne	.+6      	; 0x199e <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x36>
    1998:	c0 e0       	ldi	r28, 0x00	; 0
    199a:	d0 e0       	ldi	r29, 0x00	; 0
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x42>
    199e:	86 2f       	mov	r24, r22
    19a0:	97 2f       	mov	r25, r23
    19a2:	6c e2       	ldi	r22, 0x2C	; 44
    19a4:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    19a8:	ec 01       	movw	r28, r24
  w += bp.print('"');
    19aa:	89 2d       	mov	r24, r9
    19ac:	98 2d       	mov	r25, r8
    19ae:	62 e2       	ldi	r22, 0x22	; 34
    19b0:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    19b4:	8c 01       	movw	r16, r24
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    19b6:	f3 01       	movw	r30, r6
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	89 2d       	mov	r24, r9
    19be:	98 2d       	mov	r25, r8
    19c0:	0e 94 1f 39 	call	0x723e	; 0x723e <Print::print(char const*)>
    19c4:	5c 01       	movw	r10, r24
  w += bp.print('"');
    19c6:	89 2d       	mov	r24, r9
    19c8:	98 2d       	mov	r25, r8
    19ca:	62 e2       	ldi	r22, 0x22	; 34
    19cc:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    19d0:	6c 01       	movw	r12, r24
  w += bp.print(':');
    19d2:	89 2d       	mov	r24, r9
    19d4:	98 2d       	mov	r25, r8
    19d6:	6a e3       	ldi	r22, 0x3A	; 58
    19d8:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    19dc:	7c 01       	movw	r14, r24
  w += bp.print(s.value);
    19de:	f3 01       	movw	r30, r6
    19e0:	64 81       	ldd	r22, Z+4	; 0x04
    19e2:	75 81       	ldd	r23, Z+5	; 0x05
    19e4:	89 2d       	mov	r24, r9
    19e6:	98 2d       	mov	r25, r8
    19e8:	4a e0       	ldi	r20, 0x0A	; 10
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	0e 94 0c 39 	call	0x7218	; 0x7218 <Print::print(int, int)>
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
  w += bp.print('"');
    19f0:	0c 0f       	add	r16, r28
    19f2:	1d 1f       	adc	r17, r29
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    19f4:	0a 0d       	add	r16, r10
    19f6:	1b 1d       	adc	r17, r11
  w += bp.print('"');
    19f8:	0c 0d       	add	r16, r12
    19fa:	1d 1d       	adc	r17, r13
  w += bp.print(':');
    19fc:	0e 0d       	add	r16, r14
    19fe:	1f 1d       	adc	r17, r15
  w += bp.print(s.value);
  commaPending = true;
    1a00:	21 e0       	ldi	r18, 0x01	; 1
    1a02:	f2 01       	movw	r30, r4
    1a04:	20 83       	st	Z, r18
    1a06:	08 0f       	add	r16, r24
    1a08:	19 1f       	adc	r17, r25
  return(w);
  }
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	9f 90       	pop	r9
    1a22:	8f 90       	pop	r8
    1a24:	7f 90       	pop	r7
    1a26:	6f 90       	pop	r6
    1a28:	5f 90       	pop	r5
    1a2a:	4f 90       	pop	r4
    1a2c:	08 95       	ret

00001a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>:
//   * maximise  if true attempt to maximise the number of stats squeezed into each frame,
//       potentially at the cost of signficant CPU time
//   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
//       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::writeJSON(uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                           const bool maximise, const bool suppressClearChanged)
    1a2e:	2f 92       	push	r2
    1a30:	3f 92       	push	r3
    1a32:	4f 92       	push	r4
    1a34:	5f 92       	push	r5
    1a36:	6f 92       	push	r6
    1a38:	7f 92       	push	r7
    1a3a:	8f 92       	push	r8
    1a3c:	9f 92       	push	r9
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	2d 97       	sbiw	r28, 0x0d	; 13
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	6c 01       	movw	r12, r24
    1a64:	1b 01       	movw	r2, r22
    1a66:	f4 2e       	mov	r15, r20
    1a68:	2b 87       	std	Y+11, r18	; 0x0b
    1a6a:	0c 87       	std	Y+12, r16	; 0x0c
    1a6c:	ed 86       	std	Y+13, r14	; 0x0d
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    1a6e:	61 15       	cp	r22, r1
    1a70:	71 05       	cpc	r23, r1
    1a72:	21 f4       	brne	.+8      	; 0x1a7c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x4e>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    1a7c:	39 e0       	ldi	r19, 0x09	; 9
    1a7e:	3f 15       	cp	r19, r15
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x56>
    1a82:	80 c1       	rjmp	.+768    	; 0x1d84 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x356>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1a84:	1d 82       	std	Y+5, r1	; 0x05
    1a86:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t mark;
  public:
    // Wrap around a buffer of size bufSize-1 chars and a trailing '\0'.
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    1a88:	89 e8       	ldi	r24, 0x89	; 137
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	9b 83       	std	Y+3, r25	; 0x03
    1a8e:	8a 83       	std	Y+2, r24	; 0x02
    1a90:	3f 82       	std	Y+7, r3	; 0x07
    1a92:	2e 82       	std	Y+6, r2	; 0x06
    1a94:	fa 94       	dec	r15
    1a96:	f8 86       	std	Y+8, r15	; 0x08
    1a98:	f3 94       	inc	r15
    1a9a:	19 86       	std	Y+9, r1	; 0x09
    1a9c:	1a 86       	std	Y+10, r1	; 0x0a
    1a9e:	d1 01       	movw	r26, r2
    1aa0:	1c 92       	st	X, r1

  // Write/print to buffer passed in.
  BufPrint bp((char *)buf, bufSize);
  // True if field has been written and will need a ',' if another field is written.
  bool commaPending = false;
    1aa2:	19 82       	std	Y+1, r1	; 0x01

  // Start object.
  bp.print('{');
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	0e 5f       	subi	r16, 0xFE	; 254
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	c8 01       	movw	r24, r16
    1aac:	6b e7       	ldi	r22, 0x7B	; 123
    1aae:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  bp.print(F("\"@\":\""));
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	65 ec       	ldi	r22, 0xC5	; 197
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <Print::print(__FlashStringHelper const*)>

#ifdef USE_MODULE_FHT8VSIMPLE
  if(NULL != id) { bp.print(id); } // Value has to be 'safe' (eg no " nor \ in it).
    1abc:	f6 01       	movw	r30, r12
    1abe:	67 81       	ldd	r22, Z+7	; 0x07
    1ac0:	70 85       	ldd	r23, Z+8	; 0x08
    1ac2:	61 15       	cp	r22, r1
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	21 f0       	breq	.+8      	; 0x1ad0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xa2>
    1ac8:	c8 01       	movw	r24, r16
    1aca:	0e 94 1f 39 	call	0x723e	; 0x723e <Print::print(char const*)>
    1ace:	55 c0       	rjmp	.+170    	; 0x1b7a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x14c>
  else
    {
    if(localFHT8VTRVEnabled())
    1ad0:	0e 94 b5 09 	call	0x136a	; 0x136a <localFHT8VTRVEnabled()>
    1ad4:	88 23       	and	r24, r24
    1ad6:	39 f0       	breq	.+14     	; 0x1ae6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
      {
      const uint8_t hc1 = FHT8VGetHC1();
    1ad8:	0e 94 a3 09 	call	0x1346	; 0x1346 <FHT8VGetHC1()>
    1adc:	18 2f       	mov	r17, r24
      const uint8_t hc2 = FHT8VGetHC2();
    1ade:	0e 94 ac 09 	call	0x1358	; 0x1358 <FHT8VGetHC2()>
    1ae2:	08 2f       	mov	r16, r24
    1ae4:	10 c0       	rjmp	.+32     	; 0x1b06 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1ae6:	f9 99       	sbic	0x1f, 1	; 31
    1ae8:	fe cf       	rjmp	.-4      	; 0x1ae6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1aea:	84 e1       	ldi	r24, 0x14	; 20
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	92 bd       	out	0x22, r25	; 34
    1af0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1af2:	f8 9a       	sbi	0x1f, 0	; 31
    1af4:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1af6:	f9 99       	sbic	0x1f, 1	; 31
    1af8:	fe cf       	rjmp	.-4      	; 0x1af6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xc8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1afa:	85 e1       	ldi	r24, 0x15	; 21
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	92 bd       	out	0x22, r25	; 34
    1b00:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1b02:	f8 9a       	sbi	0x1f, 0	; 31
    1b04:	00 b5       	in	r16, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    1b06:	81 2f       	mov	r24, r17
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	74 e0       	ldi	r23, 0x04	; 4
    1b0c:	95 95       	asr	r25
    1b0e:	87 95       	ror	r24
    1b10:	7a 95       	dec	r23
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xde>
    1b14:	68 2f       	mov	r22, r24
    1b16:	6f 70       	andi	r22, 0x0F	; 15
    1b18:	6a 30       	cpi	r22, 0x0A	; 10
    1b1a:	10 f4       	brcc	.+4      	; 0x1b20 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
    1b1c:	60 5d       	subi	r22, 0xD0	; 208
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf4>
    1b20:	69 5a       	subi	r22, 0xA9	; 169
    else
#endif
      {
      const uint8_t id1 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
      const uint8_t id2 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
      bp.print(hexDigit(id1 >> 4));
    1b22:	ce 01       	movw	r24, r28
    1b24:	02 96       	adiw	r24, 0x02	; 2
    1b26:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    1b2a:	61 2f       	mov	r22, r17
    1b2c:	6f 70       	andi	r22, 0x0F	; 15
    1b2e:	6a 30       	cpi	r22, 0x0A	; 10
    1b30:	10 f4       	brcc	.+4      	; 0x1b36 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x108>
    1b32:	60 5d       	subi	r22, 0xD0	; 208
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x10a>
    1b36:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id1));
    1b38:	ce 01       	movw	r24, r28
    1b3a:	02 96       	adiw	r24, 0x02	; 2
    1b3c:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    1b40:	80 2f       	mov	r24, r16
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	95 95       	asr	r25
    1b48:	87 95       	ror	r24
    1b4a:	6a 95       	dec	r22
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x118>
    1b4e:	68 2f       	mov	r22, r24
    1b50:	6f 70       	andi	r22, 0x0F	; 15
    1b52:	6a 30       	cpi	r22, 0x0A	; 10
    1b54:	10 f4       	brcc	.+4      	; 0x1b5a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12c>
    1b56:	60 5d       	subi	r22, 0xD0	; 208
    1b58:	01 c0       	rjmp	.+2      	; 0x1b5c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12e>
    1b5a:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2 >> 4));
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	02 96       	adiw	r24, 0x02	; 2
    1b60:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    1b64:	60 2f       	mov	r22, r16
    1b66:	6f 70       	andi	r22, 0x0F	; 15
    1b68:	6a 30       	cpi	r22, 0x0A	; 10
    1b6a:	10 f4       	brcc	.+4      	; 0x1b70 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x142>
    1b6c:	60 5d       	subi	r22, 0xD0	; 208
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x144>
    1b70:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2));
    1b72:	ce 01       	movw	r24, r28
    1b74:	02 96       	adiw	r24, 0x02	; 2
    1b76:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
      }
    }

  bp.print('"');
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	0e 5f       	subi	r16, 0xFE	; 254
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	c8 01       	movw	r24, r16
    1b82:	62 e2       	ldi	r22, 0x22	; 34
    1b84:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
  commaPending = true;
    1b88:	bb 24       	eor	r11, r11
    1b8a:	b3 94       	inc	r11
    1b8c:	b9 82       	std	Y+1, r11	; 0x01

  // Write count next iff enabled.
  if(c.enabled)
    1b8e:	d6 01       	movw	r26, r12
    1b90:	19 96       	adiw	r26, 0x09	; 9
    1b92:	8c 91       	ld	r24, X
    1b94:	80 ff       	sbrs	r24, 0
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x192>
    {
    if(commaPending) { bp.print(','); commaPending = false; }
    1b98:	c8 01       	movw	r24, r16
    1b9a:	6c e2       	ldi	r22, 0x2C	; 44
    1b9c:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    1ba0:	19 82       	std	Y+1, r1	; 0x01
    bp.print(F("\"+\":"));
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	60 ec       	ldi	r22, 0xC0	; 192
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <Print::print(__FlashStringHelper const*)>
    bp.print(c.count);
    1bac:	f6 01       	movw	r30, r12
    1bae:	61 85       	ldd	r22, Z+9	; 0x09
    1bb0:	66 95       	lsr	r22
    1bb2:	67 70       	andi	r22, 0x07	; 7
    1bb4:	c8 01       	movw	r24, r16
    1bb6:	4a e0       	ldi	r20, 0x0A	; 10
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	0e 94 ba 38 	call	0x7174	; 0x7174 <Print::print(unsigned char, int)>
    commaPending = true;
    1bbe:	b9 82       	std	Y+1, r11	; 0x01
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    1bc0:	89 85       	ldd	r24, Y+9	; 0x09
    1bc2:	8a 87       	std	Y+10, r24	; 0x0a

  bool gotHiPri = false;
  uint8_t hiPriIndex = 0;
  bool gotLoPri = false;
  uint8_t loPriIndex = 0;
  if(nStats != 0)
    1bc4:	d6 01       	movw	r26, r12
    1bc6:	13 96       	adiw	r26, 0x03	; 3
    1bc8:	6c 91       	ld	r22, X
    1bca:	13 97       	sbiw	r26, 0x03	; 3
    1bcc:	66 23       	and	r22, r22
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1a4>
    1bd0:	ce c0       	rjmp	.+412    	; 0x1d6e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    {
    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
    1bd2:	19 96       	adiw	r26, 0x09	; 9
    1bd4:	8c 91       	ld	r24, X
    1bd6:	19 97       	sbiw	r26, 0x09	; 9
    1bd8:	86 95       	lsr	r24
    1bda:	87 70       	andi	r24, 0x07	; 7
    1bdc:	80 fd       	sbrc	r24, 0
    1bde:	5a c0       	rjmp	.+180    	; 0x1c94 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
      {
      uint8_t next = lastTXedHiPri;
    1be0:	16 96       	adiw	r26, 0x06	; 6
    1be2:	1c 91       	ld	r17, X
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    1be8:	26 2f       	mov	r18, r22
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	21 50       	subi	r18, 0x01	; 1
    1bee:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1bf0:	77 e0       	ldi	r23, 0x07	; 7
    1bf2:	49 c0       	rjmp	.+146    	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x258>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    1bf4:	1f 5f       	subi	r17, 0xFF	; 255
    1bf6:	16 17       	cp	r17, r22
    1bf8:	08 f0       	brcs	.+2      	; 0x1bfc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1ce>
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1bfc:	17 9f       	mul	r17, r23
    1bfe:	50 01       	movw	r10, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	d6 01       	movw	r26, r12
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	12 97       	sbiw	r26, 0x02	; 2
    1c0c:	ea 0d       	add	r30, r10
    1c0e:	fb 1d       	adc	r31, r11
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c14:	8b 17       	cp	r24, r27
    1c16:	a8 f1       	brcs	.+106    	; 0x1c82 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Skip stat if neither changed nor high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    1c18:	83 81       	ldd	r24, Z+3	; 0x03
    1c1a:	88 23       	and	r24, r24
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1f6>
    1c1e:	86 81       	ldd	r24, Z+6	; 0x06
    1c20:	80 ff       	sbrs	r24, 0
    1c22:	2f c0       	rjmp	.+94     	; 0x1c82 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Found suitable stat to include in output.
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    1c24:	c6 01       	movw	r24, r12
    1c26:	be 01       	movw	r22, r28
    1c28:	6e 5f       	subi	r22, 0xFE	; 254
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	af 01       	movw	r20, r30
    1c2e:	9e 01       	movw	r18, r28
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    1c38:	49 85       	ldd	r20, Y+9	; 0x09
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    1c3a:	8f 2d       	mov	r24, r15
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 97       	sbiw	r24, 0x02	; 2
    1c40:	24 2f       	mov	r18, r20
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	28 17       	cp	r18, r24
    1c46:	39 07       	cpc	r19, r25
    1c48:	44 f0       	brlt	.+16     	; 0x1c5a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x22c>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    1c4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c4c:	89 87       	std	Y+9, r24	; 0x09
    1c4e:	ee 81       	ldd	r30, Y+6	; 0x06
    1c50:	ff 81       	ldd	r31, Y+7	; 0x07
    1c52:	e8 0f       	add	r30, r24
    1c54:	f1 1d       	adc	r31, r1
    1c56:	10 82       	st	Z, r1
    1c58:	11 c0       	rjmp	.+34     	; 0x1c7c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    1c5a:	4a 87       	std	Y+10, r20	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedHiPri = hiPriIndex;
    1c5c:	f6 01       	movw	r30, r12
    1c5e:	16 83       	std	Z+6, r17	; 0x06
    1c60:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    1c62:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c64:	ff 23       	and	r31, r31
    1c66:	51 f4       	brne	.+20     	; 0x1c7c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    1c68:	d6 01       	movw	r26, r12
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	ed 91       	ld	r30, X+
    1c6e:	fc 91       	ld	r31, X
    1c70:	12 97       	sbiw	r26, 0x02	; 2
    1c72:	ea 0d       	add	r30, r10
    1c74:	fb 1d       	adc	r31, r11
    1c76:	86 81       	ldd	r24, Z+6	; 0x06
    1c78:	8e 7f       	andi	r24, 0xFE	; 254
    1c7a:	86 83       	std	Z+6, r24	; 0x06
    1c7c:	51 2e       	mov	r5, r17
    1c7e:	01 e0       	ldi	r16, 0x01	; 1
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x26a>
    1c82:	4f 5f       	subi	r20, 0xFF	; 255
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    1c86:	c9 01       	movw	r24, r18
    1c88:	84 1b       	sub	r24, r20
    1c8a:	95 0b       	sbc	r25, r21
    1c8c:	8f 5f       	subi	r24, 0xFF	; 255
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
    1c92:	b0 cf       	rjmp	.-160    	; 0x1bf4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1c6>
    1c94:	00 e0       	ldi	r16, 0x00	; 0
    1c96:	55 24       	eor	r5, r5
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
    1c98:	f6 01       	movw	r30, r12
    1c9a:	25 81       	ldd	r18, Z+5	; 0x05
      for(int i = nStats; --i >= 0; )
    1c9c:	83 81       	ldd	r24, Z+3	; 0x03
    1c9e:	88 24       	eor	r8, r8
    1ca0:	99 24       	eor	r9, r9
    1ca2:	a8 2e       	mov	r10, r24
    1ca4:	bb 24       	eor	r11, r11
    1ca6:	08 94       	sec
    1ca8:	a1 08       	sbc	r10, r1
    1caa:	b1 08       	sbc	r11, r1
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1cac:	57 e0       	ldi	r21, 0x07	; 7
    1cae:	45 2e       	mov	r4, r21
        // Add to JSON output.
        print(bp, s, commaPending);
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    1cb0:	ef 2c       	mov	r14, r15
    1cb2:	ff 24       	eor	r15, r15
    1cb4:	8e ef       	ldi	r24, 0xFE	; 254
    1cb6:	9f ef       	ldi	r25, 0xFF	; 255
    1cb8:	e8 0e       	add	r14, r24
    1cba:	f9 1e       	adc	r15, r25
    1cbc:	51 c0       	rjmp	.+162    	; 0x1d60 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x332>
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    1cbe:	12 2f       	mov	r17, r18
    1cc0:	1f 5f       	subi	r17, 0xFF	; 255
    1cc2:	d6 01       	movw	r26, r12
    1cc4:	13 96       	adiw	r26, 0x03	; 3
    1cc6:	8c 91       	ld	r24, X
    1cc8:	18 17       	cp	r17, r24
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2a0>
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
    1cce:	f6 01       	movw	r30, r12
    1cd0:	24 81       	ldd	r18, Z+4	; 0x04
    1cd2:	21 17       	cp	r18, r17
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	08 f0       	brcs	.+2      	; 0x1cdc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32c>
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
    1cdc:	00 23       	and	r16, r16
    1cde:	11 f0       	breq	.+4      	; 0x1ce4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b6>
    1ce0:	51 16       	cp	r5, r17
    1ce2:	d1 f1       	breq	.+116    	; 0x1d58 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1ce4:	14 9d       	mul	r17, r4
    1ce6:	30 01       	movw	r6, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	d6 01       	movw	r26, r12
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	ed 91       	ld	r30, X+
    1cf0:	fc 91       	ld	r31, X
    1cf2:	12 97       	sbiw	r26, 0x02	; 2
    1cf4:	e6 0d       	add	r30, r6
    1cf6:	f7 1d       	adc	r31, r7
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	bb 85       	ldd	r27, Y+11	; 0x0b
    1cfc:	8b 17       	cp	r24, r27
    1cfe:	60 f1       	brcs	.+88     	; 0x1d58 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Found suitable stat to include in output.
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    1d00:	c6 01       	movw	r24, r12
    1d02:	be 01       	movw	r22, r28
    1d04:	6e 5f       	subi	r22, 0xFE	; 254
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255
    1d08:	af 01       	movw	r20, r30
    1d0a:	9e 01       	movw	r18, r28
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	0e 94 b4 0c 	call	0x1968	; 0x1968 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    1d14:	29 85       	ldd	r18, Y+9	; 0x09
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    1d16:	82 2f       	mov	r24, r18
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	8e 15       	cp	r24, r14
    1d1c:	9f 05       	cpc	r25, r15
    1d1e:	44 f0       	brlt	.+16     	; 0x1d30 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x302>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    1d20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d22:	89 87       	std	Y+9, r24	; 0x09
    1d24:	ee 81       	ldd	r30, Y+6	; 0x06
    1d26:	ff 81       	ldd	r31, Y+7	; 0x07
    1d28:	e8 0f       	add	r30, r24
    1d2a:	f1 1d       	adc	r31, r1
    1d2c:	10 82       	st	Z, r1
    1d2e:	1f c0       	rjmp	.+62     	; 0x1d6e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    1d30:	2a 87       	std	Y+10, r18	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedLoPri = loPriIndex;
    1d32:	f6 01       	movw	r30, r12
    1d34:	15 83       	std	Z+5, r17	; 0x05
    1d36:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    1d38:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d3a:	ff 23       	and	r31, r31
    1d3c:	51 f4       	brne	.+20     	; 0x1d52 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x324>
    1d3e:	d6 01       	movw	r26, r12
    1d40:	11 96       	adiw	r26, 0x01	; 1
    1d42:	ed 91       	ld	r30, X+
    1d44:	fc 91       	ld	r31, X
    1d46:	12 97       	sbiw	r26, 0x02	; 2
    1d48:	e6 0d       	add	r30, r6
    1d4a:	f7 1d       	adc	r31, r7
    1d4c:	86 81       	ldd	r24, Z+6	; 0x06
    1d4e:	8e 7f       	andi	r24, 0xFE	; 254
    1d50:	86 83       	std	Z+6, r24	; 0x06
          }
        if(!maximise) { break; }
    1d52:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d54:	bb 23       	and	r27, r27
    1d56:	59 f0       	breq	.+22     	; 0x1d6e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    1d58:	21 2f       	mov	r18, r17
    1d5a:	08 94       	sec
    1d5c:	81 1c       	adc	r8, r1
    1d5e:	91 1c       	adc	r9, r1
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
    1d60:	c5 01       	movw	r24, r10
    1d62:	88 19       	sub	r24, r8
    1d64:	99 09       	sbc	r25, r9
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    1d6c:	a8 cf       	rjmp	.-176    	; 0x1cbe <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x290>
    }

  // TODO: maximise.

  // Terminate object.
  bp.print('}');
    1d6e:	ce 01       	movw	r24, r28
    1d70:	02 96       	adiw	r24, 0x02	; 2
    1d72:	6d e7       	ldi	r22, 0x7D	; 125
    1d74:	0e 94 ef 37 	call	0x6fde	; 0x6fde <Print::print(char)>
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    1d78:	29 85       	ldd	r18, Y+9	; 0x09
  DEBUG_SERIAL_PRINT_FLASHSTRING("JSON: ");
  DEBUG_SERIAL_PRINT((char *)buf);
  DEBUG_SERIAL_PRINTLN();
#endif
//  if(w >= (size_t)(bufSize-1))
  if(bp.isFull())
    1d7a:	88 85       	ldd	r24, Y+8	; 0x08
    1d7c:	28 17       	cp	r18, r24
    1d7e:	21 f4       	brne	.+8      	; 0x1d88 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x35a>
    {
    // Overrun, so failed/aborted.
    // Shouldn't really be possible unless buffer far far too small.
    *buf = '\0';
    1d80:	d1 01       	movw	r26, r2
    1d82:	1c 92       	st	X, r1
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	0a c0       	rjmp	.+20     	; 0x1d9c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x36e>
    return(0);
    }

  // On successfully creating output, update some internal state including success count.
  ++c.count;
    1d88:	f6 01       	movw	r30, r12
    1d8a:	91 85       	ldd	r25, Z+9	; 0x09
    1d8c:	89 2f       	mov	r24, r25
    1d8e:	86 95       	lsr	r24
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	87 70       	andi	r24, 0x07	; 7
    1d94:	88 0f       	add	r24, r24
    1d96:	91 7f       	andi	r25, 0xF1	; 241
    1d98:	98 2b       	or	r25, r24
    1d9a:	91 87       	std	Z+9, r25	; 0x09

  return(bp.getSize()); // Success!
  }
    1d9c:	82 2f       	mov	r24, r18
    1d9e:	2d 96       	adiw	r28, 0x0d	; 13
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	bf 90       	pop	r11
    1dbc:	af 90       	pop	r10
    1dbe:	9f 90       	pop	r9
    1dc0:	8f 90       	pop	r8
    1dc2:	7f 90       	pop	r7
    1dc4:	6f 90       	pop	r6
    1dc6:	5f 90       	pop	r5
    1dc8:	4f 90       	pop	r4
    1dca:	3f 90       	pop	r3
    1dcc:	2f 90       	pop	r2
    1dce:	08 95       	ret

00001dd0 <SimpleStatsRotationBase::findByKey(char const*) const>:
  return(true);
  }

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    1dd0:	8f 92       	push	r8
    1dd2:	9f 92       	push	r9
    1dd4:	af 92       	push	r10
    1dd6:	bf 92       	push	r11
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	6c 01       	movw	r12, r24
    1dea:	4b 01       	movw	r8, r22
  {
  for(int i = 0; i < nStats; ++i)
    1dec:	fc 01       	movw	r30, r24
    1dee:	83 81       	ldd	r24, Z+3	; 0x03
    1df0:	a8 2e       	mov	r10, r24
    1df2:	bb 24       	eor	r11, r11
    1df4:	ee 24       	eor	r14, r14
    1df6:	ff 24       	eor	r15, r15
    1df8:	00 e0       	ldi	r16, 0x00	; 0
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	11 c0       	rjmp	.+34     	; 0x1e20 <SimpleStatsRotationBase::findByKey(char const*) const+0x50>
    {
    DescValueTuple * const p = stats + i;
    1dfe:	f6 01       	movw	r30, r12
    1e00:	c1 81       	ldd	r28, Z+1	; 0x01
    1e02:	d2 81       	ldd	r29, Z+2	; 0x02
    1e04:	c0 0f       	add	r28, r16
    1e06:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    1e08:	88 81       	ld	r24, Y
    1e0a:	99 81       	ldd	r25, Y+1	; 0x01
    1e0c:	b4 01       	movw	r22, r8
    1e0e:	0e 94 94 02 	call	0x528	; 0x528 <strcmp>
    1e12:	09 5f       	subi	r16, 0xF9	; 249
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
  for(int i = 0; i < nStats; ++i)
    1e1a:	08 94       	sec
    1e1c:	e1 1c       	adc	r14, r1
    1e1e:	f1 1c       	adc	r15, r1
    1e20:	ea 14       	cp	r14, r10
    1e22:	fb 04       	cpc	r15, r11
    1e24:	64 f3       	brlt	.-40     	; 0x1dfe <SimpleStatsRotationBase::findByKey(char const*) const+0x2e>
    1e26:	c0 e0       	ldi	r28, 0x00	; 0
    1e28:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	af 90       	pop	r10
    1e40:	9f 90       	pop	r9
    1e42:	8f 90       	pop	r8
    1e44:	08 95       	ret

00001e46 <SimpleStatsRotationBase::put(char const*, int)>:
    
// Create/update value for given stat/key.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	ec 01       	movw	r28, r24
    1e54:	8b 01       	movw	r16, r22
    1e56:	7a 01       	movw	r14, r20
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    1e58:	61 15       	cp	r22, r1
    1e5a:	71 05       	cpc	r23, r1
    1e5c:	e9 f1       	breq	.+122    	; 0x1ed8 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    1e5e:	fb 01       	movw	r30, r22
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <SimpleStatsRotationBase::put(char const*, int)+0x2e>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    1e62:	89 2f       	mov	r24, r25
    1e64:	80 52       	subi	r24, 0x20	; 32
    1e66:	8f 35       	cpi	r24, 0x5F	; 95
    1e68:	b8 f5       	brcc	.+110    	; 0x1ed8 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    1e6a:	92 32       	cpi	r25, 0x22	; 34
    1e6c:	a9 f1       	breq	.+106    	; 0x1ed8 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    1e6e:	9c 35       	cpi	r25, 0x5C	; 92
    1e70:	99 f1       	breq	.+102    	; 0x1ed8 <SimpleStatsRotationBase::put(char const*, int)+0x92>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    1e72:	31 96       	adiw	r30, 0x01	; 1
    1e74:	90 81       	ld	r25, Z
    1e76:	99 23       	and	r25, r25
    1e78:	a1 f7       	brne	.-24     	; 0x1e62 <SimpleStatsRotationBase::put(char const*, int)+0x1c>
    1e7a:	36 c0       	rjmp	.+108    	; 0x1ee8 <SimpleStatsRotationBase::put(char const*, int)+0xa2>
  DescValueTuple *p = findByKey(key);
  // If item already exists, update it.
  if(NULL != p)
    {
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    1e7c:	84 81       	ldd	r24, Z+4	; 0x04
    1e7e:	95 81       	ldd	r25, Z+5	; 0x05
    1e80:	8e 15       	cp	r24, r14
    1e82:	9f 05       	cpc	r25, r15
    1e84:	29 f0       	breq	.+10     	; 0x1e90 <SimpleStatsRotationBase::put(char const*, int)+0x4a>
      {
      p->value = newValue;
    1e86:	f5 82       	std	Z+5, r15	; 0x05
    1e88:	e4 82       	std	Z+4, r14	; 0x04
      p->flags.changed = true;
    1e8a:	86 81       	ldd	r24, Z+6	; 0x06
    1e8c:	81 60       	ori	r24, 0x01	; 1
    1e8e:	86 83       	std	Z+6, r24	; 0x06
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	23 c0       	rjmp	.+70     	; 0x1eda <SimpleStatsRotationBase::put(char const*, int)+0x94>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    1e94:	2b 81       	ldd	r18, Y+3	; 0x03
    1e96:	88 81       	ld	r24, Y
    1e98:	28 17       	cp	r18, r24
    1e9a:	a8 f4       	brcc	.+42     	; 0x1ec6 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    {
    p = stats + (nStats++);
    1e9c:	87 e0       	ldi	r24, 0x07	; 7
    1e9e:	28 9f       	mul	r18, r24
    1ea0:	c0 01       	movw	r24, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	e8 0f       	add	r30, r24
    1eaa:	f9 1f       	adc	r31, r25
    1eac:	2f 5f       	subi	r18, 0xFF	; 255
    1eae:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    1eb0:	f5 82       	std	Z+5, r15	; 0x05
    1eb2:	e4 82       	std	Z+4, r14	; 0x04
    p->flags.changed = true;
    1eb4:	86 81       	ldd	r24, Z+6	; 0x06
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor .
    p->descriptor = GenericStatsDescriptor(key);
    1eba:	13 82       	std	Z+3, r1	; 0x03
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	82 83       	std	Z+2, r24	; 0x02
    1ec0:	11 83       	std	Z+1, r17	; 0x01
    1ec2:	00 83       	st	Z, r16
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <SimpleStatsRotationBase::put(char const*, int)+0x94>
    // Addition of new field done!
    return(true);
    }

#if 1 && defined(DEBUG)
DEBUG_SERIAL_PRINT_FLASHSTRING("Too many keys: ");
    1ec6:	8b ec       	ldi	r24, 0xCB	; 203
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
DEBUG_SERIAL_PRINT(key);
    1ece:	c8 01       	movw	r24, r16
    1ed0:	0e 94 04 19 	call	0x3208	; 0x3208 <serialPrintAndFlush(char const*)>
DEBUG_SERIAL_PRINTLN();
    1ed4:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
#endif
  return(false); // FAILED: full.
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
  }
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	08 95       	ret
DEBUG_SERIAL_PRINTLN();
#endif
    return(false);
    }

  DescValueTuple *p = findByKey(key);
    1ee8:	ce 01       	movw	r24, r28
    1eea:	b8 01       	movw	r22, r16
    1eec:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <SimpleStatsRotationBase::findByKey(char const*) const>
    1ef0:	fc 01       	movw	r30, r24
  // If item already exists, update it.
  if(NULL != p)
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	19 f6       	brne	.-122    	; 0x1e7c <SimpleStatsRotationBase::put(char const*, int)+0x36>
    1ef6:	ce cf       	rjmp	.-100    	; 0x1e94 <SimpleStatsRotationBase::put(char const*, int)+0x4e>

00001ef8 <SimpleStatsRotationBase::remove(char const*)>:
  return(NULL); // Not found.
  }

// Remove given stat and properties.
// True iff the item existed and was removed.
bool SimpleStatsRotationBase::remove(const SimpleStatsKey key)
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
  {
  DescValueTuple *p = findByKey(key);
    1efe:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <SimpleStatsRotationBase::findByKey(char const*) const>
    1f02:	bc 01       	movw	r22, r24
  if(NULL == p) { return(false); }
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	11 f4       	brne	.+4      	; 0x1f0c <SimpleStatsRotationBase::remove(char const*)+0x14>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	2b c0       	rjmp	.+86     	; 0x1f62 <SimpleStatsRotationBase::remove(char const*)+0x6a>
  // If it needs to be removed and is not the last item
  // then move the last item down into its slot.
  const bool lastItem = ((p - stats) == (nStats - 1));
    1f0c:	a9 81       	ldd	r26, Y+1	; 0x01
    1f0e:	ba 81       	ldd	r27, Y+2	; 0x02
    1f10:	4b 81       	ldd	r20, Y+3	; 0x03
  if(!lastItem) { *p = stats[nStats-1]; }
    1f12:	9c 01       	movw	r18, r24
    1f14:	2a 1b       	sub	r18, r26
    1f16:	3b 0b       	sbc	r19, r27
    1f18:	87 eb       	ldi	r24, 0xB7	; 183
    1f1a:	9d e6       	ldi	r25, 0x6D	; 109
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	e8 9f       	mul	r30, r24
    1f20:	90 01       	movw	r18, r0
    1f22:	e9 9f       	mul	r30, r25
    1f24:	30 0d       	add	r19, r0
    1f26:	f8 9f       	mul	r31, r24
    1f28:	30 0d       	add	r19, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	ca 01       	movw	r24, r20
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	28 17       	cp	r18, r24
    1f34:	39 07       	cpc	r19, r25
    1f36:	89 f0       	breq	.+34     	; 0x1f5a <SimpleStatsRotationBase::remove(char const*)+0x62>
    1f38:	fa 01       	movw	r30, r20
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	8a 95       	dec	r24
    1f42:	e1 f7       	brne	.-8      	; 0x1f3c <SimpleStatsRotationBase::remove(char const*)+0x44>
    1f44:	e4 1b       	sub	r30, r20
    1f46:	f5 0b       	sbc	r31, r21
    1f48:	ea 0f       	add	r30, r26
    1f4a:	fb 1f       	adc	r31, r27
    1f4c:	db 01       	movw	r26, r22
    1f4e:	37 97       	sbiw	r30, 0x07	; 7
    1f50:	87 e0       	ldi	r24, 0x07	; 7
    1f52:	01 90       	ld	r0, Z+
    1f54:	0d 92       	st	X+, r0
    1f56:	81 50       	subi	r24, 0x01	; 1
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <SimpleStatsRotationBase::remove(char const*)+0x5a>
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	81 50       	subi	r24, 0x01	; 1
    1f5e:	8b 83       	std	Y+3, r24	; 0x03
    1f60:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

00001f68 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	a8 2e       	mov	r10, r24
    1f7e:	bb 24       	eor	r11, r11
    1f80:	b3 94       	inc	r11
    1f82:	ee 24       	eor	r14, r14
    1f84:	ff 24       	eor	r15, r15
    1f86:	c4 e1       	ldi	r28, 0x14	; 20
    1f88:	d0 e0       	ldi	r29, 0x00	; 0
    1f8a:	dc 2e       	mov	r13, r28
    1f8c:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    1f8e:	aa 20       	and	r10, r10
    1f90:	41 f4       	brne	.+16     	; 0x1fa2 <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f92:	f9 99       	sbic	0x1f, 1	; 31
    1f94:	fe cf       	rjmp	.-4      	; 0x1f92 <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f96:	d2 bd       	out	0x22, r29	; 34
    1f98:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1f9a:	f8 9a       	sbi	0x1f, 0	; 31
    1f9c:	80 b5       	in	r24, 0x20	; 32
    1f9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1fa0:	49 f5       	brne	.+82     	; 0x1ff4 <ensureIDCreated(bool)+0x8c>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    1fa2:	88 ef       	ldi	r24, 0xF8	; 248
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    1faa:	c7 01       	movw	r24, r14
    1fac:	6a e0       	ldi	r22, 0x0A	; 10
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    1fb4:	82 ef       	ldi	r24, 0xF2	; 242
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    1fbc:	e0 fe       	sbrs	r14, 0
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <ensureIDCreated(bool)+0x5e>
    1fc0:	00 91 9a 02 	lds	r16, 0x029A
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <ensureIDCreated(bool)+0x62>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1fc6:	00 91 8f 02 	lds	r16, 0x028F
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	0e 94 50 18 	call	0x30a0	; 0x30a0 <getSecureRandomByte(bool)>
    1fd0:	18 2f       	mov	r17, r24
    1fd2:	10 27       	eor	r17, r16
    1fd4:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    1fd6:	1f 3f       	cpi	r17, 0xFF	; 255
    1fd8:	c1 f3       	breq	.-16     	; 0x1fca <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
    1fda:	8d 2d       	mov	r24, r13
    1fdc:	9c 2d       	mov	r25, r12
    1fde:	61 2f       	mov	r22, r17
    1fe0:	0e 94 b9 08 	call	0x1172	; 0x1172 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    1fe4:	81 2f       	mov	r24, r17
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	60 e1       	ldi	r22, 0x10	; 16
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    1ff0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1ff4:	f9 99       	sbic	0x1f, 1	; 31
    1ff6:	fe cf       	rjmp	.-4      	; 0x1ff4 <ensureIDCreated(bool)+0x8c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1ff8:	d2 bd       	out	0x22, r29	; 34
    1ffa:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1ffc:	f8 9a       	sbi	0x1f, 0	; 31
    1ffe:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    2000:	81 2f       	mov	r24, r17
    2002:	80 58       	subi	r24, 0x80	; 128
    2004:	8f 37       	cpi	r24, 0x7F	; 127
    2006:	b0 f0       	brcs	.+44     	; 0x2034 <ensureIDCreated(bool)+0xcc>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    2008:	81 ee       	ldi	r24, 0xE1	; 225
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2010:	c7 01       	movw	r24, r14
    2012:	6a e0       	ldi	r22, 0x0A	; 10
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    201a:	8b ed       	ldi	r24, 0xDB	; 219
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    2022:	81 2f       	mov	r24, r17
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	60 e1       	ldi	r22, 0x10	; 16
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    202e:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
    2032:	bb 24       	eor	r11, r11
    2034:	08 94       	sec
    2036:	e1 1c       	adc	r14, r1
    2038:	f1 1c       	adc	r15, r1
    203a:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    203c:	88 e0       	ldi	r24, 0x08	; 8
    203e:	e8 16       	cp	r14, r24
    2040:	f1 04       	cpc	r15, r1
    2042:	09 f0       	breq	.+2      	; 0x2046 <ensureIDCreated(bool)+0xde>
    2044:	a2 cf       	rjmp	.-188    	; 0x1f8a <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    2046:	8b 2d       	mov	r24, r11
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	bf 90       	pop	r11
    205a:	af 90       	pop	r10
    205c:	08 95       	ret

0000205e <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	ec 01       	movw	r28, r24
    2068:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    206a:	61 15       	cp	r22, r1
    206c:	71 05       	cpc	r23, r1
    206e:	11 f4       	brne	.+4      	; 0x2074 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    2070:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    2074:	88 81       	ld	r24, Y
    2076:	88 0f       	add	r24, r24
    2078:	88 0f       	add	r24, r24
    207a:	88 0f       	add	r24, r24
    207c:	80 78       	andi	r24, 0x80	; 128
    207e:	f8 01       	movw	r30, r16
    2080:	41 81       	ldd	r20, Z+1	; 0x01
    2082:	4f 77       	andi	r20, 0x7F	; 127
    2084:	48 2b       	or	r20, r24
    2086:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    2088:	29 81       	ldd	r18, Y+1	; 0x01
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	94 e0       	ldi	r25, 0x04	; 4
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	9a 95       	dec	r25
    2094:	e1 f7       	brne	.-8      	; 0x208e <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    2096:	88 81       	ld	r24, Y
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	8f 70       	andi	r24, 0x0F	; 15
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	28 2b       	or	r18, r24
    20a0:	39 2b       	or	r19, r25
    20a2:	20 54       	subi	r18, 0x40	; 64
    20a4:	31 40       	sbci	r19, 0x01	; 1
    20a6:	20 83       	st	Z, r18
    20a8:	83 2f       	mov	r24, r19
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	40 78       	andi	r20, 0x80	; 128
    20ae:	48 2b       	or	r20, r24
    20b0:	41 83       	std	Z+1, r20	; 0x01
  }
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

000020bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// If successful returns pointer to next byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
// This will avoid copying into the result data (possibly tainted) that has arrived at an inappropriate security level.
//   * content will contain data decoded from the message; must be non-null
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    20ce:	8f c0       	rjmp	.+286    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    20d0:	01 15       	cp	r16, r1
    20d2:	11 05       	cpc	r17, r1
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    20d6:	8b c0       	rjmp	.+278    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE)
    20d8:	63 30       	cpi	r22, 0x03	; 3
    20da:	08 f4       	brcc	.+2      	; 0x20de <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    20dc:	88 c0       	rjmp	.+272    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    20de:	87 e0       	ldi	r24, 0x07	; 7
    20e0:	f8 01       	movw	r30, r16
    20e2:	11 92       	st	Z+, r1
    20e4:	8a 95       	dec	r24
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    20e8:	f7 01       	movw	r30, r14
    20ea:	80 81       	ld	r24, Z
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	c9 01       	movw	r24, r18
    20f2:	80 7f       	andi	r24, 0xF0	; 240
    20f4:	90 70       	andi	r25, 0x00	; 0
    20f6:	80 37       	cpi	r24, 0x70	; 112
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    20fc:	78 c0       	rjmp	.+240    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    20fe:	20 fd       	sbrc	r18, 0
    2100:	76 c0       	rjmp	.+236    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    2102:	e7 01       	movw	r28, r14
    2104:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    2106:	22 ff       	sbrs	r18, 2
    2108:	12 c0       	rjmp	.+36     	; 0x212e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    210a:	f8 01       	movw	r30, r16
    210c:	80 81       	ld	r24, Z
    210e:	81 60       	ori	r24, 0x01	; 1
    2110:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    2112:	21 fd       	sbrc	r18, 1
    2114:	02 c0       	rjmp	.+4      	; 0x211a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	01 c0       	rjmp	.+2      	; 0x211c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    211a:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    211c:	f7 01       	movw	r30, r14
    211e:	81 81       	ldd	r24, Z+1	; 0x01
    2120:	89 2b       	or	r24, r25
    2122:	f8 01       	movw	r30, r16
    2124:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	98 2b       	or	r25, r24
    212a:	92 83       	std	Z+2, r25	; 0x02
    212c:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    212e:	88 81       	ld	r24, Y
    2130:	80 7e       	andi	r24, 0xE0	; 224
    2132:	80 34       	cpi	r24, 0x40	; 64
    2134:	71 f4       	brne	.+28     	; 0x2152 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	87 fd       	sbrc	r24, 7
    213a:	59 c0       	rjmp	.+178    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    213c:	b8 01       	movw	r22, r16
    213e:	6d 5f       	subi	r22, 0xFD	; 253
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	ce 01       	movw	r24, r28
    2144:	0e 94 2f 10 	call	0x205e	; 0x205e <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    2148:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    214a:	f8 01       	movw	r30, r16
    214c:	80 81       	ld	r24, Z
    214e:	82 60       	ori	r24, 0x02	; 2
    2150:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    2152:	28 81       	ld	r18, Y
    2154:	42 2f       	mov	r20, r18
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	ca 01       	movw	r24, r20
    215a:	80 7e       	andi	r24, 0xE0	; 224
    215c:	90 70       	andi	r25, 0x00	; 0
    215e:	80 36       	cpi	r24, 0x60	; 96
    2160:	91 05       	cpc	r25, r1
    2162:	09 f0       	breq	.+2      	; 0x2166 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    2164:	44 c0       	rjmp	.+136    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    2166:	de 01       	movw	r26, r28
    2168:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    216a:	23 70       	andi	r18, 0x03	; 3
    216c:	f8 01       	movw	r30, r16
    216e:	86 81       	ldd	r24, Z+6	; 0x06
    2170:	8c 7f       	andi	r24, 0xFC	; 252
    2172:	82 2b       	or	r24, r18
    2174:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    2176:	43 ff       	sbrs	r20, 3
    2178:	0a c0       	rjmp	.+20     	; 0x218e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    217a:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    217c:	89 2f       	mov	r24, r25
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	8e 3f       	cpi	r24, 0xFE	; 254
    2182:	a8 f5       	brcc	.+106    	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    2184:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    2186:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    2188:	80 81       	ld	r24, Z
    218a:	84 60       	ori	r24, 0x04	; 4
    218c:	80 83       	st	Z, r24
    218e:	f7 01       	movw	r30, r14
    2190:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2192:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2194:	77 e3       	ldi	r23, 0x37	; 55
    2196:	21 c0       	rjmp	.+66     	; 0x21da <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2198:	80 81       	ld	r24, Z
    219a:	60 e8       	ldi	r22, 0x80	; 128
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    21a0:	c8 2f       	mov	r28, r24
    21a2:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    21a4:	83 2f       	mov	r24, r19
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	26 e0       	ldi	r18, 0x06	; 6
    21aa:	96 95       	lsr	r25
    21ac:	87 95       	ror	r24
    21ae:	2a 95       	dec	r18
    21b0:	e1 f7       	brne	.-8      	; 0x21aa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    21b2:	28 2f       	mov	r18, r24
    21b4:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    21b6:	86 2f       	mov	r24, r22
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	8c 23       	and	r24, r28
    21bc:	9d 23       	and	r25, r29
    21be:	89 2b       	or	r24, r25
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    21c2:	21 27       	eor	r18, r17
        crc <<= 1;
    21c4:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    21c6:	21 11       	cpse	r18, r1
    21c8:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    21ca:	66 95       	lsr	r22
    21cc:	4f 5f       	subi	r20, 0xFF	; 255
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	48 30       	cpi	r20, 0x08	; 8
    21d2:	51 05       	cpc	r21, r1
    21d4:	39 f7       	brne	.-50     	; 0x21a4 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    21d6:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    21d8:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    21da:	ea 17       	cp	r30, r26
    21dc:	fb 07       	cpc	r31, r27
    21de:	e0 f2       	brcs	.-72     	; 0x2198 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    21e0:	8c 91       	ld	r24, X
    21e2:	38 17       	cp	r19, r24
    21e4:	21 f4       	brne	.+8      	; 0x21ee <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    21e6:	9d 01       	movw	r18, r26
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
  }
    21f2:	c9 01       	movw	r24, r18
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	08 95       	ret

00002202 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	8c 01       	movw	r16, r24
    220c:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    220e:	61 15       	cp	r22, r1
    2210:	71 05       	cpc	r23, r1
    2212:	11 f4       	brne	.+4      	; 0x2218 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    2214:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    2218:	88 81       	ld	r24, Y
    221a:	29 81       	ldd	r18, Y+1	; 0x01
    221c:	92 2f       	mov	r25, r18
    221e:	9f 77       	andi	r25, 0x7F	; 127
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	95 95       	asr	r25
    2226:	87 95       	ror	r24
    2228:	26 e0       	ldi	r18, 0x06	; 6
    222a:	80 3c       	cpi	r24, 0xC0	; 192
    222c:	92 07       	cpc	r25, r18
    222e:	14 f0       	brlt	.+4      	; 0x2234 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    2230:	8f eb       	ldi	r24, 0xBF	; 191
    2232:	96 e0       	ldi	r25, 0x06	; 6
    2234:	ee ef       	ldi	r30, 0xFE	; 254
    2236:	80 3c       	cpi	r24, 0xC0	; 192
    2238:	9e 07       	cpc	r25, r30
    223a:	14 f4       	brge	.+4      	; 0x2240 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    223c:	80 ec       	ldi	r24, 0xC0	; 192
    223e:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    2240:	9c 01       	movw	r18, r24
    2242:	20 5c       	subi	r18, 0xC0	; 192
    2244:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	87 fd       	sbrc	r24, 7
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    224c:	90 e4       	ldi	r25, 0x40	; 64
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    2250:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    2252:	82 2f       	mov	r24, r18
    2254:	8f 70       	andi	r24, 0x0F	; 15
    2256:	98 2b       	or	r25, r24
    2258:	f8 01       	movw	r30, r16
    225a:	90 83       	st	Z, r25
  buf[1] = byte1;
    225c:	44 e0       	ldi	r20, 0x04	; 4
    225e:	35 95       	asr	r19
    2260:	27 95       	ror	r18
    2262:	4a 95       	dec	r20
    2264:	e1 f7       	brne	.-8      	; 0x225e <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    2266:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	08 95       	ret

00002272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	7c 01       	movw	r14, r24
    2284:	6a 01       	movw	r12, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	09 f4       	brne	.+2      	; 0x228c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1a>
    228a:	ad c0       	rjmp	.+346    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    228c:	01 15       	cp	r16, r1
    228e:	11 05       	cpc	r17, r1
    2290:	09 f4       	brne	.+2      	; 0x2294 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x22>
    2292:	a9 c0       	rjmp	.+338    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    2294:	22 23       	and	r18, r18
    2296:	09 f0       	breq	.+2      	; 0x229a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x28>
    2298:	a6 c0       	rjmp	.+332    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    229a:	f8 01       	movw	r30, r16
    229c:	80 81       	ld	r24, Z
    229e:	58 2f       	mov	r21, r24
    22a0:	51 70       	andi	r21, 0x01	; 1
    22a2:	80 fd       	sbrc	r24, 0
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x38>
    22a6:	21 e0       	ldi	r18, 0x01	; 1
    22a8:	01 c0       	rjmp	.+2      	; 0x22ac <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3a>
    22aa:	23 e0       	ldi	r18, 0x03	; 3
    22ac:	f8 01       	movw	r30, r16
    22ae:	80 81       	ld	r24, Z
    22b0:	81 fd       	sbrc	r24, 1
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x46>
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	01 c0       	rjmp	.+2      	; 0x22ba <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x48>
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	f8 01       	movw	r30, r16
    22bc:	40 81       	ld	r20, Z
    22be:	46 95       	lsr	r20
    22c0:	46 95       	lsr	r20
    22c2:	41 70       	andi	r20, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    22c4:	84 2f       	mov	r24, r20
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	82 0f       	add	r24, r18
    22ca:	89 0f       	add	r24, r25
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	26 2f       	mov	r18, r22
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	82 17       	cp	r24, r18
    22d6:	93 07       	cpc	r25, r19
    22d8:	0c f0       	brlt	.+2      	; 0x22dc <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x6a>
    22da:	85 c0       	rjmp	.+266    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>

  // Validate some more detail.
  // ID
  if(content->containsID)
    22dc:	55 23       	and	r21, r21
    22de:	59 f0       	breq	.+22     	; 0x22f6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	9f 3f       	cpi	r25, 0xFF	; 255
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x76>
    22e6:	7f c0       	rjmp	.+254    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	8f 3f       	cpi	r24, 0xFF	; 255
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x7e>
    22ee:	7b c0       	rjmp	.+246    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    22f0:	89 27       	eor	r24, r25
    22f2:	87 fd       	sbrc	r24, 7
    22f4:	78 c0       	rjmp	.+240    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    }
  // Ambient light.
  if(content->containsAmbL)
    22f6:	44 23       	and	r20, r20
    22f8:	31 f0       	breq	.+12     	; 0x2306 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    22fa:	f8 01       	movw	r30, r16
    22fc:	85 81       	ldd	r24, Z+5	; 0x05
    22fe:	81 50       	subi	r24, 0x01	; 1
    2300:	8e 3f       	cpi	r24, 0xFE	; 254
    2302:	08 f0       	brcs	.+2      	; 0x2306 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    2304:	70 c0       	rjmp	.+224    	; 0x23e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    2306:	55 23       	and	r21, r21
    2308:	11 f4       	brne	.+4      	; 0x230e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x9c>
    230a:	80 e7       	ldi	r24, 0x70	; 112
    230c:	08 c0       	rjmp	.+16     	; 0x231e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    230e:	f8 01       	movw	r30, r16
    2310:	81 81       	ldd	r24, Z+1	; 0x01
    2312:	87 ff       	sbrs	r24, 7
    2314:	03 c0       	rjmp	.+6      	; 0x231c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xaa>
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	84 e7       	ldi	r24, 0x74	; 116
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xae>
    231c:	84 e7       	ldi	r24, 0x74	; 116
    231e:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    2320:	89 2b       	or	r24, r25
    2322:	e7 01       	movw	r28, r14
    2324:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    2326:	f8 01       	movw	r30, r16
    2328:	80 81       	ld	r24, Z
    232a:	80 ff       	sbrs	r24, 0
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xce>
    {
    *b++ = content->id0 & 0x7f;
    232e:	81 81       	ldd	r24, Z+1	; 0x01
    2330:	8f 77       	andi	r24, 0x7F	; 127
    2332:	f7 01       	movw	r30, r14
    2334:	81 83       	std	Z+1, r24	; 0x01
    *b++ = content->id1 & 0x7f;
    2336:	f8 01       	movw	r30, r16
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	8f 77       	andi	r24, 0x7F	; 127
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    2340:	f8 01       	movw	r30, r16
    2342:	80 81       	ld	r24, Z
    2344:	81 ff       	sbrs	r24, 1
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe4>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    2348:	b8 01       	movw	r22, r16
    234a:	6d 5f       	subi	r22, 0xFD	; 253
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	ce 01       	movw	r24, r28
    2350:	0e 94 01 11 	call	0x2202	; 0x2202 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    2354:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    2356:	f8 01       	movw	r30, r16
    2358:	80 81       	ld	r24, Z
    235a:	82 fd       	sbrc	r24, 2
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf0>
    235e:	90 e6       	ldi	r25, 0x60	; 96
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf2>
    2362:	98 e6       	ldi	r25, 0x68	; 104
    2364:	1c 14       	cp	r1, r12
    2366:	1d 04       	cpc	r1, r13
    2368:	14 f4       	brge	.+4      	; 0x236e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xfc>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    236e:	f8 01       	movw	r30, r16
    2370:	86 81       	ldd	r24, Z+6	; 0x06
    2372:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    2374:	89 2b       	or	r24, r25
    2376:	de 01       	movw	r26, r28
    2378:	8d 93       	st	X+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    237a:	f8 01       	movw	r30, r16
    237c:	80 81       	ld	r24, Z
    237e:	82 ff       	sbrs	r24, 2
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x116>
    { *b++ = content->ambL; }
    2382:	85 81       	ldd	r24, Z+5	; 0x05
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	11 96       	adiw	r26, 0x01	; 1
    2388:	f7 01       	movw	r30, r14
    238a:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    238c:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    238e:	77 e3       	ldi	r23, 0x37	; 55
    2390:	21 c0       	rjmp	.+66     	; 0x23d4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x162>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2392:	80 81       	ld	r24, Z
    2394:	60 e8       	ldi	r22, 0x80	; 128
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    239a:	c8 2f       	mov	r28, r24
    239c:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    239e:	83 2f       	mov	r24, r19
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	06 e0       	ldi	r16, 0x06	; 6
    23a4:	96 95       	lsr	r25
    23a6:	87 95       	ror	r24
    23a8:	0a 95       	dec	r16
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x132>
    23ac:	28 2f       	mov	r18, r24
    23ae:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    23b0:	86 2f       	mov	r24, r22
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	8c 23       	and	r24, r28
    23b6:	9d 23       	and	r25, r29
    23b8:	89 2b       	or	r24, r25
    23ba:	09 f0       	breq	.+2      	; 0x23be <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x14c>
    23bc:	21 27       	eor	r18, r17
        crc <<= 1;
    23be:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    23c0:	21 11       	cpse	r18, r1
    23c2:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    23c4:	66 95       	lsr	r22
    23c6:	4f 5f       	subi	r20, 0xFF	; 255
    23c8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ca:	48 30       	cpi	r20, 0x08	; 8
    23cc:	51 05       	cpc	r21, r1
    23ce:	39 f7       	brne	.-50     	; 0x239e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12c>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    23d0:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    23d2:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    23d4:	ea 17       	cp	r30, r26
    23d6:	fb 07       	cpc	r31, r27
    23d8:	e0 f2       	brcs	.-72     	; 0x2392 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x120>
  *b++ = crc;
    23da:	fd 01       	movw	r30, r26
    23dc:	31 93       	st	Z+, r19
  *b = 0xff;
    23de:	8f ef       	ldi	r24, 0xFF	; 255
    23e0:	11 96       	adiw	r26, 0x01	; 1
    23e2:	8c 93       	st	X, r24
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x178>
#if 0 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
#endif
  return(b);
    23e6:	e0 e0       	ldi	r30, 0x00	; 0
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
  }
    23ea:	cf 01       	movw	r24, r30
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	ff 90       	pop	r15
    23f6:	ef 90       	pop	r14
    23f8:	df 90       	pop	r13
    23fa:	cf 90       	pop	r12
    23fc:	08 95       	ret

000023fe <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    23fe:	fc 01       	movw	r30, r24
    2400:	84 81       	ldd	r24, Z+4	; 0x04
    2402:	95 81       	ldd	r25, Z+5	; 0x05
    2404:	08 95       	ret

00002406 <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    2406:	81 e2       	ldi	r24, 0x21	; 33
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	08 95       	ret

0000240c <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    240c:	1f 92       	push	r1
    240e:	0f 92       	push	r0
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	0f 92       	push	r0
    2414:	11 24       	eor	r1, r1
    2416:	8f 93       	push	r24
    2418:	9f 93       	push	r25
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    2424:	88 e1       	ldi	r24, 0x18	; 24
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	80 93 60 00 	sts	0x0060, r24
    242e:	10 92 60 00 	sts	0x0060, r1
    2432:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	80 68       	ori	r24, 0x80	; 128
    243a:	80 93 7b 02 	sts	0x027B, r24
  }
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	9f 91       	pop	r25
    2446:	8f 91       	pop	r24
    2448:	0f 90       	pop	r0
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	0f 90       	pop	r0
    244e:	1f 90       	pop	r1
    2450:	18 95       	reti

00002452 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    2452:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    2454:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    2458:	28 e0       	ldi	r18, 0x08	; 8
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	40 93 61 00 	sts	0x0061, r20
    2466:	20 93 61 00 	sts	0x0061, r18
    246a:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    246c:	31 97       	sbiw	r30, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	8f 70       	andi	r24, 0x0F	; 15
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	20 e8       	ldi	r18, 0x80	; 128
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	20 93 61 00 	sts	0x0061, r18
    2480:	80 93 61 00 	sts	0x0061, r24
    2484:	0f be       	out	0x3f, r0	; 63
  }
    2486:	08 95       	ret

00002488 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2488:	10 92 7b 02 	sts	0x027B, r1

  wdt_enable(watchdogSleep);
    248c:	83 fd       	sbrc	r24, 3
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <nap(signed char)+0xc>
    2490:	28 e0       	ldi	r18, 0x08	; 8
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <nap(signed char)+0xe>
    2494:	28 e2       	ldi	r18, 0x28	; 40
    2496:	87 70       	andi	r24, 0x07	; 7
    2498:	28 2b       	or	r18, r24
    249a:	88 e1       	ldi	r24, 0x18	; 24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	a8 95       	wdr
    24a4:	80 93 60 00 	sts	0x0060, r24
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    24ae:	80 91 60 00 	lds	r24, 0x0060
    24b2:	80 64       	ori	r24, 0x40	; 64
    24b4:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    24b8:	83 b7       	in	r24, 0x33	; 51
    24ba:	81 7f       	andi	r24, 0xF1	; 241
    24bc:	86 60       	ori	r24, 0x06	; 6
    24be:	83 bf       	out	0x33, r24	; 51
  cli();
    24c0:	f8 94       	cli
  sleep_enable();
    24c2:	83 b7       	in	r24, 0x33	; 51
    24c4:	81 60       	ori	r24, 0x01	; 1
    24c6:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    24c8:	85 b7       	in	r24, 0x35	; 53
    24ca:	80 66       	ori	r24, 0x60	; 96
    24cc:	85 bf       	out	0x35, r24	; 53
    24ce:	8f 7d       	andi	r24, 0xDF	; 223
    24d0:	85 bf       	out	0x35, r24	; 53
  sei();
    24d2:	78 94       	sei
  sleep_cpu();
    24d4:	88 95       	sleep
  sleep_disable();
    24d6:	83 b7       	in	r24, 0x33	; 51
    24d8:	8e 7f       	andi	r24, 0xFE	; 254
    24da:	83 bf       	out	0x33, r24	; 51
  sei();
    24dc:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    24de:	80 91 7b 02 	lds	r24, 0x027B
    24e2:	88 23       	and	r24, r24
    24e4:	49 f3       	breq	.-46     	; 0x24b8 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    24e6:	88 e1       	ldi	r24, 0x18	; 24
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	80 93 60 00 	sts	0x0060, r24
    24f0:	10 92 60 00 	sts	0x0060, r1
    24f4:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    24f6:	08 95       	ret

000024f8 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    24f8:	10 92 7b 02 	sts	0x027B, r1
  wdt_enable(watchdogSleep);
    24fc:	83 fd       	sbrc	r24, 3
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <idleCPU(signed char)+0xc>
    2500:	28 e0       	ldi	r18, 0x08	; 8
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <idleCPU(signed char)+0xe>
    2504:	28 e2       	ldi	r18, 0x28	; 40
    2506:	87 70       	andi	r24, 0x07	; 7
    2508:	28 2b       	or	r18, r24
    250a:	88 e1       	ldi	r24, 0x18	; 24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	a8 95       	wdr
    2514:	80 93 60 00 	sts	0x0060, r24
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    251e:	80 91 60 00 	lds	r24, 0x0060
    2522:	80 64       	ori	r24, 0x40	; 64
    2524:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    2528:	83 b7       	in	r24, 0x33	; 51
    252a:	81 7f       	andi	r24, 0xF1	; 241
    252c:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    252e:	83 b7       	in	r24, 0x33	; 51
    2530:	81 60       	ori	r24, 0x01	; 1
    2532:	83 bf       	out	0x33, r24	; 51
    2534:	88 95       	sleep
    2536:	83 b7       	in	r24, 0x33	; 51
    2538:	8e 7f       	andi	r24, 0xFE	; 254
    253a:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    253c:	88 e1       	ldi	r24, 0x18	; 24
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	80 93 60 00 	sts	0x0060, r24
    2546:	10 92 60 00 	sts	0x0060, r1
    254a:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    254c:	80 91 7b 02 	lds	r24, 0x027B
    2550:	81 11       	cpse	r24, r1
    2552:	81 e0       	ldi	r24, 0x01	; 1
  }
    2554:	08 95       	ret

00002556 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	8f 93       	push	r24
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 7d 02 	sts	0x027D, r24
    2568:	8f 91       	pop	r24
    256a:	0f 90       	pop	r0
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	0f 90       	pop	r0
    2570:	1f 90       	pop	r1
    2572:	18 95       	reti

00002574 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	98 2f       	mov	r25, r24
    257a:	16 2f       	mov	r17, r22
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    257c:	80 91 64 00 	lds	r24, 0x0064
    2580:	80 fd       	sbrc	r24, 0
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    2584:	00 e0       	ldi	r16, 0x00	; 0
    2586:	0b c0       	rjmp	.+22     	; 0x259e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2588:	80 91 64 00 	lds	r24, 0x0064
    258c:	8e 7f       	andi	r24, 0xFE	; 254
    258e:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2592:	80 91 7a 00 	lds	r24, 0x007A
    2596:	80 68       	ori	r24, 0x80	; 128
    2598:	80 93 7a 00 	sts	0x007A, r24
    259c:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ACSR |= _BV(ACD); // Disable the analogue comparator.
    259e:	80 b7       	in	r24, 0x30	; 48
    25a0:	80 68       	ori	r24, 0x80	; 128
    25a2:	80 bf       	out	0x30, r24	; 48
  ADMUX = admux;
    25a4:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    25a8:	12 30       	cpi	r17, 0x02	; 2
    25aa:	1c f4       	brge	.+6      	; 0x25b2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x3e>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    25b2:	83 b7       	in	r24, 0x33	; 51
    25b4:	81 7f       	andi	r24, 0xF1	; 241
    25b6:	82 60       	ori	r24, 0x02	; 2
    25b8:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    25ba:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    25be:	12 30       	cpi	r17, 0x02	; 2
    25c0:	24 f0       	brlt	.+8      	; 0x25ca <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    25c2:	80 91 7a 00 	lds	r24, 0x007A
    25c6:	80 62       	ori	r24, 0x20	; 32
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x5c>
    25ca:	80 91 7a 00 	lds	r24, 0x007A
    25ce:	8f 7d       	andi	r24, 0xDF	; 223
    25d0:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    25d4:	80 91 7a 00 	lds	r24, 0x007A
    25d8:	88 60       	ori	r24, 0x08	; 8
    25da:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    25de:	80 91 7a 00 	lds	r24, 0x007A
    25e2:	80 64       	ori	r24, 0x40	; 64
    25e4:	80 93 7a 00 	sts	0x007A, r24
    25e8:	4f ef       	ldi	r20, 0xFF	; 255
    25ea:	9f ef       	ldi	r25, 0xFF	; 255
    25ec:	21 c0       	rjmp	.+66     	; 0x2630 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    25ee:	10 92 7d 02 	sts	0x027D, r1
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8e>
      while(!ADC_complete) { sleep_mode(); }
    25f4:	83 b7       	in	r24, 0x33	; 51
    25f6:	81 60       	ori	r24, 0x01	; 1
    25f8:	83 bf       	out	0x33, r24	; 51
    25fa:	88 95       	sleep
    25fc:	83 b7       	in	r24, 0x33	; 51
    25fe:	8e 7f       	andi	r24, 0xFE	; 254
    2600:	83 bf       	out	0x33, r24	; 51
    2602:	80 91 7d 02 	lds	r24, 0x027D
    2606:	88 23       	and	r24, r24
    2608:	a9 f3       	breq	.-22     	; 0x25f4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x80>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    260a:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    260e:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    2612:	29 17       	cp	r18, r25
    2614:	11 f4       	brne	.+4      	; 0x261a <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa6>
    2616:	34 17       	cp	r19, r20
    2618:	71 f0       	breq	.+28     	; 0x2636 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xc2>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    261a:	90 91 7c 02 	lds	r25, 0x027C
    261e:	82 2f       	mov	r24, r18
    2620:	83 27       	eor	r24, r19
    2622:	8a 5f       	subi	r24, 0xFA	; 250
    2624:	96 95       	lsr	r25
    2626:	98 0f       	add	r25, r24
    2628:	90 93 7c 02 	sts	0x027C, r25
    262c:	92 2f       	mov	r25, r18
    262e:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    2630:	11 50       	subi	r17, 0x01	; 1
    2632:	17 ff       	sbrs	r17, 7
    2634:	dc cf       	rjmp	.-72     	; 0x25ee <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2636:	80 91 7a 00 	lds	r24, 0x007A
    263a:	87 7f       	andi	r24, 0xF7	; 247
    263c:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    2640:	80 91 7a 00 	lds	r24, 0x007A
    2644:	8f 7d       	andi	r24, 0xDF	; 223
    2646:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    264a:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    264e:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    2652:	00 23       	and	r16, r16
    2654:	51 f0       	breq	.+20     	; 0x266a <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf6>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2656:	80 91 7a 00 	lds	r24, 0x007A
    265a:	8f 77       	andi	r24, 0x7F	; 127
    265c:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    2660:	80 91 64 00 	lds	r24, 0x0064
    2664:	81 60       	ori	r24, 0x01	; 1
    2666:	80 93 64 00 	sts	0x0064, r24
    266a:	94 2f       	mov	r25, r20
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	28 2b       	or	r18, r24
    2672:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    2674:	c9 01       	movw	r24, r18
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <analogueNoiseReducedRead(int, unsigned char)>:
//   * aiNumber is the analogue input number [0,7] for ATMega328P
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int aiNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (aiNumber & 7))); }
    267c:	62 95       	swap	r22
    267e:	66 0f       	add	r22, r22
    2680:	66 0f       	add	r22, r22
    2682:	60 7c       	andi	r22, 0xC0	; 192
    2684:	87 70       	andi	r24, 0x07	; 7
    2686:	86 2b       	or	r24, r22
    2688:	63 e0       	ldi	r22, 0x03	; 3
    268a:	0e 94 ba 12 	call	0x2574	; 0x2574 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    268e:	08 95       	ret

00002690 <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	ec 01       	movw	r28, r24
  return(result);
  }


// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    2696:	8e e4       	ldi	r24, 0x4E	; 78
    2698:	63 e0       	ldi	r22, 0x03	; 3
    269a:	0e 94 ba 12 	call	0x2574	; 0x2574 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    269e:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    26a0:	80 ec       	ldi	r24, 0xC0	; 192
    26a2:	9f ef       	ldi	r25, 0xFF	; 255
    26a4:	b9 01       	movw	r22, r18
    26a6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    26aa:	ab 01       	movw	r20, r22
    26ac:	e4 e0       	ldi	r30, 0x04	; 4
    26ae:	44 0f       	add	r20, r20
    26b0:	55 1f       	adc	r21, r21
    26b2:	ea 95       	dec	r30
    26b4:	e1 f7       	brne	.-8      	; 0x26ae <SupplyVoltageMilliVolts::read()+0x1e>
    26b6:	46 0f       	add	r20, r22
    26b8:	57 1f       	adc	r21, r23
  rawInv = raw;
    26ba:	3b 83       	std	Y+3, r19	; 0x03
    26bc:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    26be:	5d 83       	std	Y+5, r21	; 0x05
    26c0:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    26c2:	1e 82       	std	Y+6, r1	; 0x06
    26c4:	88 e0       	ldi	r24, 0x08	; 8
    26c6:	47 39       	cpi	r20, 0x97	; 151
    26c8:	58 07       	cpc	r21, r24
    26ca:	10 f4       	brcc	.+4      	; 0x26d0 <SupplyVoltageMilliVolts::read()+0x40>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    26d0:	ca 01       	movw	r24, r20
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    26d8:	88 ec       	ldi	r24, 0xC8	; 200
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	0e 94 ba 12 	call	0x2574	; 0x2574 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    26e0:	84 54       	subi	r24, 0x44	; 68
    26e2:	91 40       	sbci	r25, 0x01	; 1
    26e4:	22 ed       	ldi	r18, 0xD2	; 210
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	a9 01       	movw	r20, r18
    26ea:	84 9f       	mul	r24, r20
    26ec:	90 01       	movw	r18, r0
    26ee:	85 9f       	mul	r24, r21
    26f0:	30 0d       	add	r19, r0
    26f2:	94 9f       	mul	r25, r20
    26f4:	30 0d       	add	r19, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	f4 e0       	ldi	r31, 0x04	; 4
    26fa:	35 95       	asr	r19
    26fc:	27 95       	ror	r18
    26fe:	fa 95       	dec	r31
    2700:	e1 f7       	brne	.-8      	; 0x26fa <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    2702:	c9 01       	movw	r24, r18
    2704:	08 95       	ret

00002706 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2706:	ec eb       	ldi	r30, 0xBC	; 188
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8b 7f       	andi	r24, 0xFB	; 251
    270e:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    2710:	e4 e6       	ldi	r30, 0x64	; 100
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	80 68       	ori	r24, 0x80	; 128
    2718:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    271a:	08 95       	ret

0000271c <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    271c:	10 92 7b 02 	sts	0x027B, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    2720:	88 e0       	ldi	r24, 0x08	; 8
    2722:	28 e1       	ldi	r18, 0x18	; 24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	a8 95       	wdr
    272c:	20 93 60 00 	sts	0x0060, r18
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2736:	80 91 60 00 	lds	r24, 0x0060
    273a:	80 64       	ori	r24, 0x40	; 64
    273c:	80 93 60 00 	sts	0x0060, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    2744:	9f 5f       	subi	r25, 0xFF	; 255
    2746:	80 91 7b 02 	lds	r24, 0x027B
    274a:	88 23       	and	r24, r24
    274c:	d9 f3       	breq	.-10     	; 0x2744 <clockJitterWDT()+0x28>
  return(count);
  }
    274e:	89 2f       	mov	r24, r25
    2750:	08 95       	ret

00002752 <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	08 95       	ret

00002756 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	08 95       	ret

0000275a <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	08 95       	ret

0000275e <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	08 95       	ret

00002762 <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	08 95       	ret

00002766 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	08 95       	ret

0000276a <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    276a:	81 e9       	ldi	r24, 0x91	; 145
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	90 93 75 02 	sts	0x0275, r25
    2772:	80 93 74 02 	sts	0x0274, r24
    2776:	10 92 79 02 	sts	0x0279, r1
    277a:	10 92 78 02 	sts	0x0278, r1
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 7a 02 	sts	0x027A, r24
    2784:	08 95       	ret

00002786 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    2786:	20 91 b2 00 	lds	r18, 0x00B2
    278a:	80 91 7c 02 	lds	r24, 0x027C
    278e:	66 b5       	in	r22, 0x26	; 38
    2790:	40 91 7b 02 	lds	r20, 0x027B
    2794:	90 91 78 02 	lds	r25, 0x0278
    2798:	69 27       	eor	r22, r25
    279a:	82 27       	eor	r24, r18
    279c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <seedRNG8(unsigned char, unsigned char, unsigned char)>
    27a0:	08 95       	ret

000027a2 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    27a2:	8c b5       	in	r24, 0x2c	; 44
    27a4:	8f 7b       	andi	r24, 0xBF	; 191
    27a6:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    27a8:	e4 e6       	ldi	r30, 0x64	; 100
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	84 60       	ori	r24, 0x04	; 4
    27b0:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    27b2:	8a e0       	ldi	r24, 0x0A	; 10
    27b4:	61 e0       	ldi	r22, 0x01	; 1
    27b6:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    27ba:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    27bc:	8d e0       	ldi	r24, 0x0D	; 13
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    27c4:	8b e0       	ldi	r24, 0x0B	; 11
    27c6:	61 e0       	ldi	r22, 0x01	; 1
    27c8:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    27cc:	8c e0       	ldi	r24, 0x0C	; 12
    27ce:	62 e0       	ldi	r22, 0x02	; 2
    27d0:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    27d4:	08 95       	ret

000027d6 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    27d6:	80 91 64 00 	lds	r24, 0x0064
    27da:	82 fd       	sbrc	r24, 2
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <powerUpSPIIfDisabled()+0xc>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    27e2:	8a e0       	ldi	r24, 0x0A	; 10
    27e4:	61 e0       	ldi	r22, 0x01	; 1
    27e6:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    27ea:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    27ec:	80 91 64 00 	lds	r24, 0x0064
    27f0:	8b 7f       	andi	r24, 0xFB	; 251
    27f2:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    27f6:	80 e5       	ldi	r24, 0x50	; 80
    27f8:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    27fe:	08 95       	ret

00002800 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    2800:	87 e0       	ldi	r24, 0x07	; 7
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  }
    2808:	08 95       	ret

0000280a <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    280a:	0f 93       	push	r16
    280c:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    280e:	88 e1       	ldi	r24, 0x18	; 24
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	80 93 60 00 	sts	0x0060, r24
    2818:	10 92 60 00 	sts	0x0060, r1
    281c:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    281e:	0e 94 00 14 	call	0x2800	; 0x2800 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2822:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    2826:	80 e8       	ldi	r24, 0x80	; 128
    2828:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    282a:	8f e3       	ldi	r24, 0x3F	; 63
    282c:	80 93 7e 00 	sts	0x007E, r24
    //#endif
    //#if defined(LDR_SENSOR_AIN)
    //    | (1 << LDR_SENSOR_AIN)
    //#endif
    //    ;
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    2836:	04 e6       	ldi	r16, 0x64	; 100
    2838:	10 e0       	ldi	r17, 0x00	; 0
    283a:	f8 01       	movw	r30, r16
    283c:	80 81       	ld	r24, Z
    283e:	81 60       	ori	r24, 0x01	; 1
    2840:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    2842:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2846:	ec eb       	ldi	r30, 0xBC	; 188
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	8b 7f       	andi	r24, 0xFB	; 251
    284e:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    2850:	f8 01       	movw	r30, r16
    2852:	80 81       	ld	r24, Z
    2854:	80 68       	ori	r24, 0x80	; 128
    2856:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    2858:	80 81       	ld	r24, Z
    285a:	88 60       	ori	r24, 0x08	; 8
    285c:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
    285e:	80 81       	ld	r24, Z
    2860:	80 64       	ori	r24, 0x40	; 64
    2862:	80 83       	st	Z, r24
#endif
  }
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	08 95       	ret

0000286a <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    286a:	1f 93       	push	r17
    286c:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    286e:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    2870:	87 e0       	ldi	r24, 0x07	; 7
    2872:	61 e0       	ldi	r22, 0x01	; 1
    2874:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    2878:	11 23       	and	r17, r17
    287a:	21 f0       	breq	.+8      	; 0x2884 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    287c:	86 e0       	ldi	r24, 0x06	; 6
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 29 12 	call	0x2452	; 0x2452 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    2884:	1f 91       	pop	r17
    2886:	08 95       	ret

00002888 <noisyADCRead(bool)>:
// If requested (and needed) powers up extra I/O during the reads.
//   powerUpIO if true then power up I/O (and power down after if so)
//
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead(const bool powerUpIO)
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	f8 2e       	mov	r15, r24
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2892:	80 91 64 00 	lds	r24, 0x0064
    2896:	80 fd       	sbrc	r24, 0
    2898:	02 c0       	rjmp	.+4      	; 0x289e <noisyADCRead(bool)+0x16>
    289a:	00 e0       	ldi	r16, 0x00	; 0
    289c:	0b c0       	rjmp	.+22     	; 0x28b4 <noisyADCRead(bool)+0x2c>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    289e:	80 91 64 00 	lds	r24, 0x0064
    28a2:	8e 7f       	andi	r24, 0xFE	; 254
    28a4:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    28a8:	80 91 7a 00 	lds	r24, 0x007A
    28ac:	80 68       	ori	r24, 0x80	; 128
    28ae:	80 93 7a 00 	sts	0x007A, r24
    28b2:	01 e0       	ldi	r16, 0x01	; 1
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead(const bool powerUpIO)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  const bool poweredUpIO = powerUpIO;
  if(powerUpIO) { power_intermittent_peripherals_enable(false); }
    28b4:	ff 20       	and	r15, r15
    28b6:	19 f0       	breq	.+6      	; 0x28be <noisyADCRead(bool)+0x36>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	0e 94 35 14 	call	0x286a	; 0x286a <power_intermittent_peripherals_enable(bool)>
  // Sample supply voltage.
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    28be:	8e e4       	ldi	r24, 0x4E	; 78
    28c0:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    28c4:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 0); // Multiple samples NOT required.
    28c8:	80 91 7a 00 	lds	r24, 0x007A
    28cc:	8f 7d       	andi	r24, 0xDF	; 223
    28ce:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    28d2:	10 92 7d 02 	sts	0x027D, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    28d6:	80 91 7a 00 	lds	r24, 0x007A
    28da:	88 60       	ori	r24, 0x08	; 8
    28dc:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    28e0:	80 91 7a 00 	lds	r24, 0x007A
    28e4:	80 64       	ori	r24, 0x40	; 64
    28e6:	80 93 7a 00 	sts	0x007A, r24
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <noisyADCRead(bool)+0x68>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	80 91 7d 02 	lds	r24, 0x027D
    28f4:	88 23       	and	r24, r24
    28f6:	d9 f3       	breq	.-10     	; 0x28ee <noisyADCRead(bool)+0x66>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    28f8:	e0 90 78 00 	lds	r14, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    28fc:	90 91 79 00 	lds	r25, 0x0079
  DEBUG_SERIAL_PRINT(' ');
  DEBUG_SERIAL_PRINTFMT(l1, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Sample internal temperature.
  ADMUX = _BV(REFS1) | _BV(REFS0) | _BV(MUX3); // Temp vs bandgap.
    2900:	88 ec       	ldi	r24, 0xC8	; 200
    2902:	80 93 7c 00 	sts	0x007C, r24
  ADC_complete = false;
    2906:	10 92 7d 02 	sts	0x027D, r1
  bitSet(ADCSRA, ADSC); // Start conversion.
    290a:	80 91 7a 00 	lds	r24, 0x007A
    290e:	80 64       	ori	r24, 0x40	; 64
    2910:	80 93 7a 00 	sts	0x007A, r24
    2914:	01 c0       	rjmp	.+2      	; 0x2918 <noisyADCRead(bool)+0x90>
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    2916:	2f 5f       	subi	r18, 0xFF	; 255
    2918:	80 91 7d 02 	lds	r24, 0x027D
    291c:	88 23       	and	r24, r24
    291e:	d9 f3       	breq	.-10     	; 0x2916 <noisyADCRead(bool)+0x8e>
  const uint8_t l2 = ADCL; // Capture the low byte and latch the high byte.
    2920:	80 91 78 00 	lds	r24, 0x0078
  const uint8_t h2 = ADCH; // Capture the high byte.
    2924:	10 91 79 00 	lds	r17, 0x0079
  DEBUG_SERIAL_PRINTFMT(h2, HEX);
  DEBUG_SERIAL_PRINT(' ');
  DEBUG_SERIAL_PRINTFMT(l2, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  uint8_t result = (h1 << 5) ^ (l2) ^ (h2 << 3) ^ count;
    2928:	92 95       	swap	r25
    292a:	99 0f       	add	r25, r25
    292c:	90 7e       	andi	r25, 0xE0	; 224
    292e:	11 0f       	add	r17, r17
    2930:	11 0f       	add	r17, r17
    2932:	11 0f       	add	r17, r17
    2934:	19 27       	eor	r17, r25
    2936:	18 27       	eor	r17, r24
    2938:	12 27       	eor	r17, r18
    293a:	30 e0       	ldi	r19, 0x00	; 0
#endif
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage nor to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started may add further noise.
    293c:	83 2f       	mov	r24, r19
    293e:	87 70       	andi	r24, 0x07	; 7
    2940:	80 64       	ori	r24, 0x40	; 64
    2942:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    2946:	10 92 7d 02 	sts	0x027D, r1
    bitSet(ADCSRA, ADSC); // Start conversion.
    294a:	80 91 7a 00 	lds	r24, 0x007A
    294e:	80 64       	ori	r24, 0x40	; 64
    2950:	80 93 7a 00 	sts	0x007A, r24
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <noisyADCRead(bool)+0xd0>
    while(!ADC_complete) { ++count; }
    2956:	2f 5f       	subi	r18, 0xFF	; 255
    2958:	80 91 7d 02 	lds	r24, 0x027D
    295c:	88 23       	and	r24, r24
    295e:	d9 f3       	breq	.-10     	; 0x2956 <noisyADCRead(bool)+0xce>
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2960:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    2964:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    2968:	89 27       	eor	r24, r25
    296a:	82 27       	eor	r24, r18
    296c:	18 27       	eor	r17, r24
    296e:	88 e0       	ldi	r24, 0x08	; 8
    2970:	9c e8       	ldi	r25, 0x8C	; 140
    2972:	10 fb       	bst	r17, 0
    2974:	16 95       	lsr	r17
    2976:	0e f4       	brtc	.+2      	; 0x297a <noisyADCRead(bool)+0xf2>
    2978:	19 27       	eor	r17, r25
    297a:	8a 95       	dec	r24
    297c:	d1 f7       	brne	.-12     	; 0x2972 <noisyADCRead(bool)+0xea>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  result = _crc_ibutton_update(_adcNoise++, result);
#endif
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage nor to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    297e:	3f 5f       	subi	r19, 0xFF	; 255
    2980:	38 30       	cpi	r19, 0x08	; 8
    2982:	e1 f6       	brne	.-72     	; 0x293c <noisyADCRead(bool)+0xb4>
    DEBUG_SERIAL_PRINT_FLASHSTRING("NAR R: ");
    DEBUG_SERIAL_PRINTFMT(result, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2984:	80 91 7a 00 	lds	r24, 0x007A
    2988:	87 7f       	andi	r24, 0xF7	; 247
    298a:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    298e:	80 91 7a 00 	lds	r24, 0x007A
    2992:	8f 7d       	andi	r24, 0xDF	; 223
    2994:	80 93 7a 00 	sts	0x007A, r24
  if(poweredUpIO) { power_intermittent_peripherals_disable(); }
    2998:	ff 20       	and	r15, r15
    299a:	11 f0       	breq	.+4      	; 0x29a0 <noisyADCRead(bool)+0x118>
    299c:	0e 94 00 14 	call	0x2800	; 0x2800 <power_intermittent_peripherals_disable()>
  if(neededEnable) { powerDownADC(); }
    29a0:	00 23       	and	r16, r16
    29a2:	51 f0       	breq	.+20     	; 0x29b8 <noisyADCRead(bool)+0x130>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    29a4:	80 91 7a 00 	lds	r24, 0x007A
    29a8:	8f 77       	andi	r24, 0x7F	; 127
    29aa:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    29ae:	80 91 64 00 	lds	r24, 0x0064
    29b2:	81 60       	ori	r24, 0x01	; 1
    29b4:	80 93 64 00 	sts	0x0064, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING("NAR: ");
  DEBUG_SERIAL_PRINTFMT(result, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result); // Use all the bits collected.
  }
    29b8:	81 2f       	mov	r24, r17
    29ba:	8e 25       	eor	r24, r14
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	08 95       	ret

000029c6 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    29c6:	80 91 64 00 	lds	r24, 0x0064
    29ca:	87 fd       	sbrc	r24, 7
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <powerUpTWIIfDisabled()+0xc>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    29d2:	80 91 64 00 	lds	r24, 0x0064
    29d6:	8f 77       	andi	r24, 0x7F	; 127
    29d8:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    29dc:	80 91 bc 00 	lds	r24, 0x00BC
    29e0:	84 60       	ori	r24, 0x04	; 4
    29e2:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    29e6:	84 ef       	ldi	r24, 0xF4	; 244
    29e8:	92 e0       	ldi	r25, 0x02	; 2
    29ea:	0e 94 1f 32 	call	0x643e	; 0x643e <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    29ee:	10 92 b8 00 	sts	0x00B8, r1
    29f2:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    29f4:	08 95       	ret

000029f6 <powerDownSerial()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    29f6:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    29fa:	81 fd       	sbrc	r24, 1
    29fc:	08 c0       	rjmp	.+16     	; 0x2a0e <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    29fe:	86 ef       	ldi	r24, 0xF6	; 246
    2a00:	93 e0       	ldi	r25, 0x03	; 3
    2a02:	0e 94 ed 36 	call	0x6dda	; 0x6dda <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    2a06:	86 ef       	ldi	r24, 0xF6	; 246
    2a08:	93 e0       	ldi	r25, 0x03	; 3
    2a0a:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	62 e0       	ldi	r22, 0x02	; 2
    2a12:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	62 e0       	ldi	r22, 0x02	; 2
    2a1a:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    2a1e:	80 91 64 00 	lds	r24, 0x0064
    2a22:	82 60       	ori	r24, 0x02	; 2
    2a24:	80 93 64 00 	sts	0x0064, r24
  }
    2a28:	08 95       	ret

00002a2a <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, _getSubCycleTime()); }
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	0e 94 44 06 	call	0xc88	; 0xc88 <pollIO(bool)>
    2a30:	88 23       	and	r24, r24
    2a32:	41 f0       	breq	.+16     	; 0x2a44 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    2a34:	86 b5       	in	r24, 0x26	; 38
    2a36:	60 91 7b 02 	lds	r22, 0x027B
    2a3a:	40 91 b2 00 	lds	r20, 0x00B2
    2a3e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <seedRNG8(unsigned char, unsigned char, unsigned char)>
    2a42:	08 95       	ret
  else { captureEntropy1(); }
    2a44:	0e 94 c3 13 	call	0x2786	; 0x2786 <captureEntropy1()>
    2a48:	08 95       	ret

00002a4a <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    2a4c:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <burnHundredsOfCyclesProductivelyAndPoll()>
    2a50:	80 91 c0 00 	lds	r24, 0x00C0
    2a54:	85 ff       	sbrs	r24, 5
    2a56:	fa cf       	rjmp	.-12     	; 0x2a4c <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    2a58:	86 ef       	ldi	r24, 0xF6	; 246
    2a5a:	93 e0       	ldi	r25, 0x03	; 3
    2a5c:	0e 94 ed 36 	call	0x6dda	; 0x6dda <HardwareSerial::flush()>
  }
    2a60:	08 95       	ret

00002a62 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    2a62:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    2a64:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    2a66:	80 91 c0 00 	lds	r24, 0x00C0
    2a6a:	85 fd       	sbrc	r24, 5
    2a6c:	0b c0       	rjmp	.+22     	; 0x2a84 <flushSerialSCTSensitive()+0x22>
    2a6e:	80 91 b2 00 	lds	r24, 0x00B2
    2a72:	8b 3f       	cpi	r24, 0xFB	; 251
    2a74:	38 f4       	brcc	.+14     	; 0x2a84 <flushSerialSCTSensitive()+0x22>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <idleCPU(signed char)>
    2a7c:	81 27       	eor	r24, r17
    2a7e:	0e 94 44 06 	call	0xc88	; 0xc88 <pollIO(bool)>
    2a82:	f1 cf       	rjmp	.-30     	; 0x2a66 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    2a84:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <flushSerialProductive()>
  }
    2a88:	1f 91       	pop	r17
    2a8a:	08 95       	ret

00002a8c <powerUpSerialIfDisabled()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2a8c:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    2a90:	81 fd       	sbrc	r24, 1
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <powerUpSerialIfDisabled()+0xc>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    2a98:	80 91 64 00 	lds	r24, 0x0064
    2a9c:	8d 7f       	andi	r24, 0xFD	; 253
    2a9e:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    2aa2:	86 ef       	ldi	r24, 0xF6	; 246
    2aa4:	93 e0       	ldi	r25, 0x03	; 3
    2aa6:	40 ec       	ldi	r20, 0xC0	; 192
    2aa8:	52 e1       	ldi	r21, 0x12	; 18
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <HardwareSerial::begin(unsigned long)>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    2ab4:	08 95       	ret

00002ab6 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    2ab6:	80 91 61 00 	lds	r24, 0x0061
    2aba:	8f 70       	andi	r24, 0x0F	; 15
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	11 f0       	breq	.+4      	; 0x2ac4 <powerSetup()+0xe>
    2ac0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2ac4:	0e 94 05 14 	call	0x280a	; 0x280a <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    2ac8:	80 91 64 00 	lds	r24, 0x0064
    2acc:	8f 6e       	ori	r24, 0xEF	; 239
    2ace:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2ad2:	80 91 64 00 	lds	r24, 0x0064
    2ad6:	8f 7d       	andi	r24, 0xDF	; 223
    2ad8:	80 93 64 00 	sts	0x0064, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    2adc:	08 95       	ret

00002ade <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    2ade:	20 91 80 02 	lds	r18, 0x0280
  b ^=s2;
    2ae2:	90 91 81 02 	lds	r25, 0x0281
    2ae6:	69 27       	eor	r22, r25
  c ^=s3;
    2ae8:	90 91 7e 02 	lds	r25, 0x027E
    2aec:	49 27       	eor	r20, r25
  x++;
    2aee:	90 91 7f 02 	lds	r25, 0x027F
    2af2:	9f 5f       	subi	r25, 0xFF	; 255
    2af4:	90 93 7f 02 	sts	0x027F, r25
  a = (a^c^x);
    2af8:	28 27       	eor	r18, r24
    2afa:	24 27       	eor	r18, r20
    2afc:	29 27       	eor	r18, r25
    2afe:	20 93 80 02 	sts	0x0280, r18
  b = (b+a);
    2b02:	62 0f       	add	r22, r18
    2b04:	60 93 81 02 	sts	0x0281, r22
  c = ((c+(b>>1))^a);
    2b08:	66 95       	lsr	r22
    2b0a:	64 0f       	add	r22, r20
    2b0c:	62 27       	eor	r22, r18
    2b0e:	60 93 7e 02 	sts	0x027E, r22
  }
    2b12:	08 95       	ret

00002b14 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    2b14:	80 91 7f 02 	lds	r24, 0x027F
    2b18:	8f 5f       	subi	r24, 0xFF	; 255
    2b1a:	80 93 7f 02 	sts	0x027F, r24
  a = (a^c^x);       //note the mix of addition and XOR
    2b1e:	20 91 7e 02 	lds	r18, 0x027E
    2b22:	90 91 80 02 	lds	r25, 0x0280
    2b26:	92 27       	eor	r25, r18
    2b28:	98 27       	eor	r25, r24
    2b2a:	90 93 80 02 	sts	0x0280, r25
  b = (b+a);         //And the use of very few instructions
    2b2e:	80 91 81 02 	lds	r24, 0x0281
    2b32:	89 0f       	add	r24, r25
    2b34:	80 93 81 02 	sts	0x0281, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    2b38:	86 95       	lsr	r24
    2b3a:	82 0f       	add	r24, r18
    2b3c:	89 27       	eor	r24, r25
    2b3e:	80 93 7e 02 	sts	0x027E, r24
  return(c);         //low order bits of other variables
  }
    2b42:	08 95       	ret

00002b44 <resetRNG8()>:
//
#ifdef UNIT_TESTS
// Reset to known state; only allow in unit testing as this destroys any residual entropy.
void resetRNG8()
  {
  x = 0;
    2b44:	10 92 7f 02 	sts	0x027F, r1
  a = 0;
    2b48:	10 92 80 02 	sts	0x0280, r1
  b = 0;
    2b4c:	10 92 81 02 	sts	0x0281, r1
  c = 0;
    2b50:	10 92 7e 02 	sts	0x027E, r1
  };
    2b54:	08 95       	ret

00002b56 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    2b56:	83 e2       	ldi	r24, 0x23	; 35
    2b58:	93 e0       	ldi	r25, 0x03	; 3
    2b5a:	80 93 7f 02 	sts	0x027F, r24
  {
  x = 0;
  a = 0;
  b = 0;
  c = 0;
  };
    2b5e:	08 95       	ret

00002b60 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2b66:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    2b6e:	21 96       	adiw	r28, 0x01	; 1
    2b70:	fe 01       	movw	r30, r28
    2b72:	24 91       	lpm	r18, Z+
    2b74:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    2b76:	9f 3f       	cpi	r25, 0xFF	; 255
    2b78:	69 f0       	breq	.+26     	; 0x2b94 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2b7a:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    2b7c:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2b7e:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2b80:	0d b4       	in	r0, 0x2d	; 45
    2b82:	07 fe       	sbrs	r0, 7
    2b84:	fd cf       	rjmp	.-6      	; 0x2b80 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2b86:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2b88:	0d b4       	in	r0, 0x2d	; 45
    2b8a:	07 fe       	sbrs	r0, 7
    2b8c:	fd cf       	rjmp	.-6      	; 0x2b88 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2b8e:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    2b90:	22 96       	adiw	r28, 0x02	; 2
    2b92:	eb cf       	rjmp	.-42     	; 0x2b6a <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    2b94:	88 23       	and	r24, r24
    2b96:	11 f0       	breq	.+4      	; 0x2b9c <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    2b98:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <powerDownSPI()>
  }
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2ba2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <powerUpSPIIfDisabled()>
    2ba6:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2ba8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2baa:	87 e8       	ldi	r24, 0x87	; 135
    2bac:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bae:	0d b4       	in	r0, 0x2d	; 45
    2bb0:	07 fe       	sbrs	r0, 7
    2bb2:	fd cf       	rjmp	.-6      	; 0x2bae <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2bb4:	80 e8       	ldi	r24, 0x80	; 128
    2bb6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bb8:	0d b4       	in	r0, 0x2d	; 45
    2bba:	07 fe       	sbrs	r0, 7
    2bbc:	fd cf       	rjmp	.-6      	; 0x2bb8 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2bbe:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2bc0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2bc2:	87 e8       	ldi	r24, 0x87	; 135
    2bc4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bc6:	0d b4       	in	r0, 0x2d	; 45
    2bc8:	07 fe       	sbrs	r0, 7
    2bca:	fd cf       	rjmp	.-6      	; 0x2bc6 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2bcc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bce:	0d b4       	in	r0, 0x2d	; 45
    2bd0:	07 fe       	sbrs	r0, 7
    2bd2:	fd cf       	rjmp	.-6      	; 0x2bce <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2bd4:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    2bd6:	99 23       	and	r25, r25
    2bd8:	11 f0       	breq	.+4      	; 0x2bde <RFM22PowerOnInit()+0x3c>
    2bda:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <powerDownSPI()>
    2bde:	08 95       	ret

00002be0 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2be0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <powerUpSPIIfDisabled()>
    2be4:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2be6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2be8:	87 e8       	ldi	r24, 0x87	; 135
    2bea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bec:	0d b4       	in	r0, 0x2d	; 45
    2bee:	07 fe       	sbrs	r0, 7
    2bf0:	fd cf       	rjmp	.-6      	; 0x2bec <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2bf2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bf4:	0d b4       	in	r0, 0x2d	; 45
    2bf6:	07 fe       	sbrs	r0, 7
    2bf8:	fd cf       	rjmp	.-6      	; 0x2bf4 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2bfa:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2bfc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2bfe:	88 e8       	ldi	r24, 0x88	; 136
    2c00:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c02:	0d b4       	in	r0, 0x2d	; 45
    2c04:	07 fe       	sbrs	r0, 7
    2c06:	fd cf       	rjmp	.-6      	; 0x2c02 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c0c:	0d b4       	in	r0, 0x2d	; 45
    2c0e:	07 fe       	sbrs	r0, 7
    2c10:	fd cf       	rjmp	.-6      	; 0x2c0c <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2c12:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2c14:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c16:	88 e8       	ldi	r24, 0x88	; 136
    2c18:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c1a:	0d b4       	in	r0, 0x2d	; 45
    2c1c:	07 fe       	sbrs	r0, 7
    2c1e:	fd cf       	rjmp	.-6      	; 0x2c1a <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c20:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c22:	0d b4       	in	r0, 0x2d	; 45
    2c24:	07 fe       	sbrs	r0, 7
    2c26:	fd cf       	rjmp	.-6      	; 0x2c22 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2c28:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2c2a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c2c:	85 e8       	ldi	r24, 0x85	; 133
    2c2e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c30:	0d b4       	in	r0, 0x2d	; 45
    2c32:	07 fe       	sbrs	r0, 7
    2c34:	fd cf       	rjmp	.-6      	; 0x2c30 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c36:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c38:	0d b4       	in	r0, 0x2d	; 45
    2c3a:	07 fe       	sbrs	r0, 7
    2c3c:	fd cf       	rjmp	.-6      	; 0x2c38 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c3e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c40:	0d b4       	in	r0, 0x2d	; 45
    2c42:	07 fe       	sbrs	r0, 7
    2c44:	fd cf       	rjmp	.-6      	; 0x2c40 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2c46:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2c48:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c4a:	83 e8       	ldi	r24, 0x83	; 131
    2c4c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c4e:	0d b4       	in	r0, 0x2d	; 45
    2c50:	07 fe       	sbrs	r0, 7
    2c52:	fd cf       	rjmp	.-6      	; 0x2c4e <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c54:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c56:	0d b4       	in	r0, 0x2d	; 45
    2c58:	07 fe       	sbrs	r0, 7
    2c5a:	fd cf       	rjmp	.-6      	; 0x2c56 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c5c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c5e:	0d b4       	in	r0, 0x2d	; 45
    2c60:	07 fe       	sbrs	r0, 7
    2c62:	fd cf       	rjmp	.-6      	; 0x2c5e <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2c64:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    2c66:	99 23       	and	r25, r25
    2c68:	11 f0       	breq	.+4      	; 0x2c6e <RFM22ModeStandbyAndClearState()+0x8e>
    2c6a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <powerDownSPI()>
    2c6e:	08 95       	ret

00002c70 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2c74:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <powerUpSPIIfDisabled()>
    2c78:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2c7a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2c7c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c7e:	0d b4       	in	r0, 0x2d	; 45
    2c80:	07 fe       	sbrs	r0, 7
    2c82:	fd cf       	rjmp	.-6      	; 0x2c7e <RFM22CheckConnected()+0xe>
  return(SPDR);
    2c84:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2c86:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c88:	0d b4       	in	r0, 0x2d	; 45
    2c8a:	07 fe       	sbrs	r0, 7
    2c8c:	fd cf       	rjmp	.-6      	; 0x2c88 <RFM22CheckConnected()+0x18>
  return(SPDR);
    2c8e:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2c90:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    2c92:	88 30       	cpi	r24, 0x08	; 8
    2c94:	89 f4       	brne	.+34     	; 0x2cb8 <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2c96:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c9c:	0d b4       	in	r0, 0x2d	; 45
    2c9e:	07 fe       	sbrs	r0, 7
    2ca0:	fd cf       	rjmp	.-6      	; 0x2c9c <RFM22CheckConnected()+0x2c>
  return(SPDR);
    2ca2:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2ca4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2ca6:	0d b4       	in	r0, 0x2d	; 45
    2ca8:	07 fe       	sbrs	r0, 7
    2caa:	fd cf       	rjmp	.-6      	; 0x2ca6 <RFM22CheckConnected()+0x36>
  return(SPDR);
    2cac:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2cae:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    2cb0:	86 30       	cpi	r24, 0x06	; 6
    2cb2:	11 f4       	brne	.+4      	; 0x2cb8 <RFM22CheckConnected()+0x48>
    2cb4:	11 e0       	ldi	r17, 0x01	; 1
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    2cb8:	89 e0       	ldi	r24, 0x09	; 9
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    2cc0:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    2cc2:	00 23       	and	r16, r16
    2cc4:	11 f0       	breq	.+4      	; 0x2cca <RFM22CheckConnected()+0x5a>
    2cc6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <powerDownSPI()>
  return(isOK);
  }
    2cca:	81 2f       	mov	r24, r17
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	08 95       	ret

00002cd2 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    2cd2:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    2cd4:	f9 99       	sbic	0x1f, 1	; 31
    2cd6:	fe cf       	rjmp	.-4      	; 0x2cd4 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2cd8:	32 bd       	out	0x22, r19	; 34
    2cda:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2cdc:	f8 9a       	sbi	0x1f, 0	; 31
    2cde:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    2ce0:	08 95       	ret

00002ce2 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    2ce2:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    2ce4:	f9 99       	sbic	0x1f, 1	; 31
    2ce6:	fe cf       	rjmp	.-4      	; 0x2ce4 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2ce8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cea:	32 bd       	out	0x22, r19	; 34
    2cec:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2cee:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	fa 9a       	sbi	0x1f, 2	; 31
    2cf6:	f9 9a       	sbi	0x1f, 1	; 31
    2cf8:	0f be       	out	0x3f, r0	; 63
}
    2cfa:	08 95       	ret

00002cfc <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2cfc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cfe:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    2d00:	20 91 82 02 	lds	r18, 0x0282
    2d04:	30 91 83 02 	lds	r19, 0x0283
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d08:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    2d0a:	c9 01       	movw	r24, r18
    2d0c:	08 95       	ret

00002d0e <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2d0e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d10:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    2d12:	80 91 82 02 	lds	r24, 0x0282
    2d16:	90 91 83 02 	lds	r25, 0x0283
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d1a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2d1c:	6c e3       	ldi	r22, 0x3C	; 60
    2d1e:	70 e0       	ldi	r23, 0x00	; 0
    2d20:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    2d24:	86 2f       	mov	r24, r22
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    2d26:	08 95       	ret

00002d28 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    2d28:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2d2a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d2c:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	69 e6       	ldi	r22, 0x69	; 105
    2d34:	76 e1       	ldi	r23, 0x16	; 22
    2d36:	0e 94 9d 02 	call	0x53a	; 0x53a <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    2d3a:	2f ef       	ldi	r18, 0xFF	; 255
    2d3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3e:	92 07       	cpc	r25, r18
    2d40:	21 f0       	breq	.+8      	; 0x2d4a <restoreRTC()+0x22>
    2d42:	90 93 85 02 	sts	0x0285, r25
    2d46:	80 93 84 02 	sts	0x0284, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d4a:	f9 99       	sbic	0x1f, 1	; 31
    2d4c:	fe cf       	rjmp	.-4      	; 0x2d4a <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2d4e:	8a e0       	ldi	r24, 0x0A	; 10
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	92 bd       	out	0x22, r25	; 34
    2d54:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2d56:	f8 9a       	sbi	0x1f, 0	; 31
    2d58:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d5a:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    2d5c:	60 3c       	cpi	r22, 0xC0	; 192
    2d5e:	90 f5       	brcc	.+100    	; 0x2dc4 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    2d60:	86 2f       	mov	r24, r22
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	23 e0       	ldi	r18, 0x03	; 3
    2d66:	95 95       	asr	r25
    2d68:	87 95       	ror	r24
    2d6a:	2a 95       	dec	r18
    2d6c:	e1 f7       	brne	.-8      	; 0x2d66 <restoreRTC()+0x3e>
    2d6e:	2c e3       	ldi	r18, 0x3C	; 60
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	82 9f       	mul	r24, r18
    2d74:	a0 01       	movw	r20, r0
    2d76:	83 9f       	mul	r24, r19
    2d78:	50 0d       	add	r21, r0
    2d7a:	92 9f       	mul	r25, r18
    2d7c:	50 0d       	add	r21, r0
    2d7e:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    2d80:	9a 01       	movw	r18, r20
    2d82:	28 5f       	subi	r18, 0xF8	; 248
    2d84:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    2d86:	86 2f       	mov	r24, r22
    2d88:	87 70       	andi	r24, 0x07	; 7
    2d8a:	81 30       	cpi	r24, 0x01	; 1
    2d8c:	59 f0       	breq	.+22     	; 0x2da4 <restoreRTC()+0x7c>
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	28 f0       	brcs	.+10     	; 0x2d9c <restoreRTC()+0x74>
    2d92:	83 30       	cpi	r24, 0x03	; 3
    2d94:	59 f0       	breq	.+22     	; 0x2dac <restoreRTC()+0x84>
    2d96:	87 30       	cpi	r24, 0x07	; 7
    2d98:	a9 f4       	brne	.+42     	; 0x2dc4 <restoreRTC()+0x9c>
    2d9a:	0b c0       	rjmp	.+22     	; 0x2db2 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    2d9c:	9a 01       	movw	r18, r20
    2d9e:	2b 5c       	subi	r18, 0xCB	; 203
    2da0:	3f 4f       	sbci	r19, 0xFF	; 255
    2da2:	07 c0       	rjmp	.+14     	; 0x2db2 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    2da4:	9a 01       	movw	r18, r20
    2da6:	2a 5d       	subi	r18, 0xDA	; 218
    2da8:	3f 4f       	sbci	r19, 0xFF	; 255
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    2dac:	9a 01       	movw	r18, r20
    2dae:	29 5e       	subi	r18, 0xE9	; 233
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2db2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2db4:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    2db6:	30 93 83 02 	sts	0x0283, r19
    2dba:	20 93 82 02 	sts	0x0282, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dbe:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <restoreRTC()+0x9e>

  return(true);
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
  }
    2dc6:	1f 91       	pop	r17
    2dc8:	08 95       	ret

00002dca <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    2dca:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2dcc:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dce:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    2dd0:	80 91 82 02 	lds	r24, 0x0282
    2dd4:	90 91 83 02 	lds	r25, 0x0283
    2dd8:	6f e0       	ldi	r22, 0x0F	; 15
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    2de0:	46 2f       	mov	r20, r22
    2de2:	44 0f       	add	r20, r20
    2de4:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	63 70       	andi	r22, 0x03	; 3
    2dea:	70 70       	andi	r23, 0x00	; 0
    2dec:	61 30       	cpi	r22, 0x01	; 1
    2dee:	71 05       	cpc	r23, r1
    2df0:	39 f0       	breq	.+14     	; 0x2e00 <persistRTC()+0x36>
    2df2:	62 30       	cpi	r22, 0x02	; 2
    2df4:	71 05       	cpc	r23, r1
    2df6:	31 f0       	breq	.+12     	; 0x2e04 <persistRTC()+0x3a>
    2df8:	67 2b       	or	r22, r23
    2dfa:	29 f4       	brne	.+10     	; 0x2e06 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    2dfc:	47 60       	ori	r20, 0x07	; 7
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    2e00:	43 60       	ori	r20, 0x03	; 3
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    2e04:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e06:	f9 99       	sbic	0x1f, 1	; 31
    2e08:	fe cf       	rjmp	.-4      	; 0x2e06 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2e0a:	8a e0       	ldi	r24, 0x0A	; 10
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	92 bd       	out	0x22, r25	; 34
    2e10:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2e12:	f8 9a       	sbi	0x1f, 0	; 31
    2e14:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    2e16:	84 17       	cp	r24, r20
    2e18:	91 f1       	breq	.+100    	; 0x2e7e <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    2e1a:	24 2f       	mov	r18, r20
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	82 23       	and	r24, r18
    2e22:	93 23       	and	r25, r19
    2e24:	28 17       	cp	r18, r24
    2e26:	39 07       	cpc	r19, r25
    2e28:	71 f0       	breq	.+28     	; 0x2e46 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2e2a:	f9 99       	sbic	0x1f, 1	; 31
    2e2c:	fe cf       	rjmp	.-4      	; 0x2e2a <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2e2e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e30:	8a e0       	ldi	r24, 0x0A	; 10
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	92 bd       	out	0x22, r25	; 34
    2e36:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2e38:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	fa 9a       	sbi	0x1f, 2	; 31
    2e40:	f9 9a       	sbi	0x1f, 1	; 31
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    2e46:	8a e0       	ldi	r24, 0x0A	; 10
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	64 2f       	mov	r22, r20
    2e4c:	0e 94 a3 08 	call	0x1146	; 0x1146 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2e50:	88 e0       	ldi	r24, 0x08	; 8
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	69 e6       	ldi	r22, 0x69	; 105
    2e56:	76 e1       	ldi	r23, 0x16	; 22
    2e58:	0e 94 9d 02 	call	0x53a	; 0x53a <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    2e5c:	20 91 84 02 	lds	r18, 0x0284
    2e60:	30 91 85 02 	lds	r19, 0x0285
    2e64:	82 17       	cp	r24, r18
    2e66:	93 07       	cpc	r25, r19
    2e68:	51 f0       	breq	.+20     	; 0x2e7e <persistRTC()+0xb4>
    2e6a:	60 91 84 02 	lds	r22, 0x0284
    2e6e:	70 91 85 02 	lds	r23, 0x0285
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    2e72:	88 e0       	ldi	r24, 0x08	; 8
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	41 e7       	ldi	r20, 0x71	; 113
    2e78:	56 e1       	ldi	r21, 0x16	; 22
    2e7a:	0e 94 b3 02 	call	0x566	; 0x566 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e7e:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    2e80:	1f 91       	pop	r17
    2e82:	08 95       	ret

00002e84 <_TEST_set_schedule_override(_TEST_schedule_override)>:
// Support for unit tests to force particular apparent schedule state.
// Current override state; 0 (default) means no override.
static _TEST_schedule_override _soUT_override;
// Set the override value (or remove the override).
void _TEST_set_schedule_override(const _TEST_schedule_override override)
  { _soUT_override = override; }
    2e84:	90 93 87 02 	sts	0x0287, r25
    2e88:	80 93 86 02 	sts	0x0286, r24
    2e8c:	08 95       	ret

00002e8e <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	d0 f4       	brcc	.+52     	; 0x2ec6 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2e92:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e94:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e96:	f9 99       	sbic	0x1f, 1	; 31
    2e98:	fe cf       	rjmp	.-4      	; 0x2e96 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	0c 96       	adiw	r24, 0x0c	; 12
    2e9e:	92 bd       	out	0x22, r25	; 34
    2ea0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2ea2:	f8 9a       	sbi	0x1f, 0	; 31
    2ea4:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ea6:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    2ea8:	90 3f       	cpi	r25, 0xF0	; 240
    2eaa:	68 f4       	brcc	.+26     	; 0x2ec6 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    2eac:	86 e0       	ldi	r24, 0x06	; 6
    2eae:	98 9f       	mul	r25, r24
    2eb0:	c0 01       	movw	r24, r0
    2eb2:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    2eb4:	8f 30       	cpi	r24, 0x0F	; 15
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	10 f4       	brcc	.+4      	; 0x2ebe <getSimpleScheduleOn(unsigned char)+0x30>
    2eba:	80 56       	subi	r24, 0x60	; 96
    2ebc:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	2f 50       	subi	r18, 0x0F	; 15
    2ec2:	30 40       	sbci	r19, 0x00	; 0
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    2ec6:	2f ef       	ldi	r18, 0xFF	; 255
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
  }
    2eca:	c9 01       	movw	r24, r18
    2ecc:	08 95       	ret

00002ece <isAnySimpleScheduleSet()>:
// In unit-test override mode is true for soon/now, false for off.
bool isAnySimpleScheduleSet()
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_soUT_override)
    2ece:	80 91 86 02 	lds	r24, 0x0286
    2ed2:	90 91 87 02 	lds	r25, 0x0287
    2ed6:	81 30       	cpi	r24, 0x01	; 1
    2ed8:	91 05       	cpc	r25, r1
    2eda:	31 f0       	breq	.+12     	; 0x2ee8 <isAnySimpleScheduleSet()+0x1a>
    2edc:	81 30       	cpi	r24, 0x01	; 1
    2ede:	91 05       	cpc	r25, r1
    2ee0:	2c f0       	brlt	.+10     	; 0x2eec <isAnySimpleScheduleSet()+0x1e>
    2ee2:	04 97       	sbiw	r24, 0x04	; 4
    2ee4:	1c f4       	brge	.+6      	; 0x2eec <isAnySimpleScheduleSet()+0x1e>
    2ee6:	0f c0       	rjmp	.+30     	; 0x2f06 <isAnySimpleScheduleSet()+0x38>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	08 95       	ret
    case _soUT_soon: return(true);
    case _soUT_now: return(true);
    }
#endif

  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2eec:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2eee:	f8 94       	cli
    2ef0:	2c e0       	ldi	r18, 0x0C	; 12
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ef4:	f9 99       	sbic	0x1f, 1	; 31
    2ef6:	fe cf       	rjmp	.-4      	; 0x2ef4 <isAnySimpleScheduleSet()+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ef8:	32 bd       	out	0x22, r19	; 34
    2efa:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2efc:	f8 9a       	sbi	0x1f, 0	; 31
    2efe:	80 b5       	in	r24, 0x20	; 32
    {
    for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
      {
      if(eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)) <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT)
    2f00:	80 3f       	cpi	r24, 0xF0	; 240
    2f02:	18 f4       	brcc	.+6      	; 0x2f0a <isAnySimpleScheduleSet()+0x3c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f04:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	08 95       	ret
    2f0a:	2f 5f       	subi	r18, 0xFF	; 255
    2f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    }
#endif

  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    {
    for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    2f0e:	2e 30       	cpi	r18, 0x0E	; 14
    2f10:	31 05       	cpc	r19, r1
    2f12:	81 f7       	brne	.-32     	; 0x2ef4 <isAnySimpleScheduleSet()+0x26>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f14:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2f16:	80 e0       	ldi	r24, 0x00	; 0
      if(eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)) <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT)
        { return(true); }
      }
    }
  return(false);
  }
    2f18:	08 95       	ret

00002f1a <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    2f1e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <getSimpleScheduleOn(unsigned char)>
    2f22:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    2f24:	8f ef       	ldi	r24, 0xFF	; 255
    2f26:	cf 3f       	cpi	r28, 0xFF	; 255
    2f28:	d8 07       	cpc	r29, r24
    2f2a:	19 f4       	brne	.+6      	; 0x2f32 <getSimpleScheduleOff(unsigned char)+0x18>
    2f2c:	2f ef       	ldi	r18, 0xFF	; 255
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	16 c0       	rjmp	.+44     	; 0x2f5e <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    2f32:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    2f36:	82 31       	cpi	r24, 0x12	; 18
    2f38:	10 f4       	brcc	.+4      	; 0x2f3e <getSimpleScheduleOff(unsigned char)+0x24>
    2f3a:	8c e3       	ldi	r24, 0x3C	; 60
    2f3c:	05 c0       	rjmp	.+10     	; 0x2f48 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    2f3e:	85 31       	cpi	r24, 0x15	; 21
    2f40:	10 f4       	brcc	.+4      	; 0x2f46 <getSimpleScheduleOff(unsigned char)+0x2c>
    2f42:	8a e5       	ldi	r24, 0x5A	; 90
    2f44:	01 c0       	rjmp	.+2      	; 0x2f48 <getSimpleScheduleOff(unsigned char)+0x2e>
    2f46:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    2f48:	9e 01       	movw	r18, r28
    2f4a:	21 5f       	subi	r18, 0xF1	; 241
    2f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4e:	28 0f       	add	r18, r24
    2f50:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    2f52:	85 e0       	ldi	r24, 0x05	; 5
    2f54:	20 3a       	cpi	r18, 0xA0	; 160
    2f56:	38 07       	cpc	r19, r24
    2f58:	10 f0       	brcs	.+4      	; 0x2f5e <getSimpleScheduleOff(unsigned char)+0x44>
    2f5a:	20 5a       	subi	r18, 0xA0	; 160
    2f5c:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    2f5e:	c9 01       	movw	r24, r18
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	08 95       	ret

00002f66 <isAnyScheduleOnWARMSoon()>:
// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
// In unit-test override mode is true for soon, false for now/off.
bool isAnyScheduleOnWARMSoon()
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_soUT_override)
    2f6e:	80 91 86 02 	lds	r24, 0x0286
    2f72:	90 91 87 02 	lds	r25, 0x0287
    2f76:	82 30       	cpi	r24, 0x02	; 2
    2f78:	91 05       	cpc	r25, r1
    2f7a:	d9 f1       	breq	.+118    	; 0x2ff2 <isAnyScheduleOnWARMSoon()+0x8c>
    2f7c:	83 30       	cpi	r24, 0x03	; 3
    2f7e:	91 05       	cpc	r25, r1
    2f80:	b1 f1       	breq	.+108    	; 0x2fee <isAnyScheduleOnWARMSoon()+0x88>
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	a1 f1       	breq	.+104    	; 0x2fee <isAnyScheduleOnWARMSoon()+0x88>
    case _soUT_soon: return(true);
    case _soUT_now: return(false);
    }
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    2f86:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <getMinutesSinceMidnightLT()>
    2f8a:	9c 01       	movw	r18, r24
    2f8c:	23 5d       	subi	r18, 0xD3	; 211
    2f8e:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    2f90:	45 e0       	ldi	r20, 0x05	; 5
    2f92:	20 3a       	cpi	r18, 0xA0	; 160
    2f94:	34 07       	cpc	r19, r20
    2f96:	10 f4       	brcc	.+4      	; 0x2f9c <isAnyScheduleOnWARMSoon()+0x36>
    2f98:	89 01       	movw	r16, r18
    2f9a:	03 c0       	rjmp	.+6      	; 0x2fa2 <isAnyScheduleOnWARMSoon()+0x3c>
    2f9c:	8c 01       	movw	r16, r24
    2f9e:	03 57       	subi	r16, 0x73	; 115
    2fa0:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <getSimpleScheduleOn(unsigned char)>
    2fa8:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    2faa:	08 17       	cp	r16, r24
    2fac:	19 07       	cpc	r17, r25
    2fae:	68 f0       	brcs	.+26     	; 0x2fca <isAnyScheduleOnWARMSoon()+0x64>
    uint_least16_t e = getSimpleScheduleOff(which);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    2fb6:	8c 17       	cp	r24, r28
    2fb8:	9d 07       	cpc	r25, r29
    2fba:	20 f0       	brcs	.+8      	; 0x2fc4 <isAnyScheduleOnWARMSoon()+0x5e>
    if(mm < e) { return(true); }
    2fbc:	08 17       	cp	r16, r24
    2fbe:	19 07       	cpc	r17, r25
    2fc0:	20 f4       	brcc	.+8      	; 0x2fca <isAnyScheduleOnWARMSoon()+0x64>
    2fc2:	17 c0       	rjmp	.+46     	; 0x2ff2 <isAnyScheduleOnWARMSoon()+0x8c>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    2fc4:	80 56       	subi	r24, 0x60	; 96
    2fc6:	9a 4f       	sbci	r25, 0xFA	; 250
    2fc8:	f9 cf       	rjmp	.-14     	; 0x2fbc <isAnyScheduleOnWARMSoon()+0x56>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <getSimpleScheduleOn(unsigned char)>
    2fd0:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    2fd2:	08 17       	cp	r16, r24
    2fd4:	19 07       	cpc	r17, r25
    2fd6:	58 f0       	brcs	.+22     	; 0x2fee <isAnyScheduleOnWARMSoon()+0x88>
    uint_least16_t e = getSimpleScheduleOff(which);
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    2fde:	8c 17       	cp	r24, r28
    2fe0:	9d 07       	cpc	r25, r29
    2fe2:	10 f4       	brcc	.+4      	; 0x2fe8 <isAnyScheduleOnWARMSoon()+0x82>
    2fe4:	80 56       	subi	r24, 0x60	; 96
    2fe6:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    2fe8:	08 17       	cp	r16, r24
    2fea:	19 07       	cpc	r17, r25
    2fec:	10 f0       	brcs	.+4      	; 0x2ff2 <isAnyScheduleOnWARMSoon()+0x8c>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <isAnyScheduleOnWARMSoon()+0x8e>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	1f 91       	pop	r17
    2ffa:	0f 91       	pop	r16
    2ffc:	08 95       	ret

00002ffe <isAnyScheduleOnWARMNow()>:
// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
// In unit-test override mode is true for now, false for soon/off.
bool isAnyScheduleOnWARMNow()
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_soUT_override)
    3006:	80 91 86 02 	lds	r24, 0x0286
    300a:	90 91 87 02 	lds	r25, 0x0287
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	91 05       	cpc	r25, r1
    3012:	2c f0       	brlt	.+10     	; 0x301e <isAnyScheduleOnWARMNow()+0x20>
    3014:	83 30       	cpi	r24, 0x03	; 3
    3016:	91 05       	cpc	r25, r1
    3018:	5c f1       	brlt	.+86     	; 0x3070 <isAnyScheduleOnWARMNow()+0x72>
    301a:	03 97       	sbiw	r24, 0x03	; 3
    301c:	59 f1       	breq	.+86     	; 0x3074 <isAnyScheduleOnWARMNow()+0x76>
    case _soUT_soon: return(false);
    case _soUT_now: return(true);
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();
    301e:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <getMinutesSinceMidnightLT()>
    3022:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <getSimpleScheduleOn(unsigned char)>
    302a:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    302c:	08 17       	cp	r16, r24
    302e:	19 07       	cpc	r17, r25
    3030:	68 f0       	brcs	.+26     	; 0x304c <isAnyScheduleOnWARMNow()+0x4e>
    uint_least16_t e = getSimpleScheduleOff(which);
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3038:	8c 17       	cp	r24, r28
    303a:	9d 07       	cpc	r25, r29
    303c:	20 f0       	brcs	.+8      	; 0x3046 <isAnyScheduleOnWARMNow()+0x48>
    if(mm < e) { return(true); }
    303e:	08 17       	cp	r16, r24
    3040:	19 07       	cpc	r17, r25
    3042:	20 f4       	brcc	.+8      	; 0x304c <isAnyScheduleOnWARMNow()+0x4e>
    3044:	17 c0       	rjmp	.+46     	; 0x3074 <isAnyScheduleOnWARMNow()+0x76>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3046:	80 56       	subi	r24, 0x60	; 96
    3048:	9a 4f       	sbci	r25, 0xFA	; 250
    304a:	f9 cf       	rjmp	.-14     	; 0x303e <isAnyScheduleOnWARMNow()+0x40>

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <getSimpleScheduleOn(unsigned char)>
    3052:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3054:	08 17       	cp	r16, r24
    3056:	19 07       	cpc	r17, r25
    3058:	58 f0       	brcs	.+22     	; 0x3070 <isAnyScheduleOnWARMNow()+0x72>
    uint_least16_t e = getSimpleScheduleOff(which);
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3060:	8c 17       	cp	r24, r28
    3062:	9d 07       	cpc	r25, r29
    3064:	10 f4       	brcc	.+4      	; 0x306a <isAnyScheduleOnWARMNow()+0x6c>
    3066:	80 56       	subi	r24, 0x60	; 96
    3068:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    306a:	08 17       	cp	r16, r24
    306c:	19 07       	cpc	r17, r25
    306e:	10 f0       	brcs	.+4      	; 0x3074 <isAnyScheduleOnWARMNow()+0x76>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	01 c0       	rjmp	.+2      	; 0x3076 <isAnyScheduleOnWARMNow()+0x78>
    3074:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	1f 91       	pop	r17
    307c:	0f 91       	pop	r16
    307e:	08 95       	ret

00003080 <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3080:	f9 99       	sbic	0x1f, 1	; 31
    3082:	fe cf       	rjmp	.-4      	; 0x3080 <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3084:	8c e1       	ldi	r24, 0x1C	; 28
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	92 bd       	out	0x22, r25	; 34
    308a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    308c:	f8 9a       	sbi	0x1f, 0	; 31
    308e:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	08 95       	ret

00003094 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    3094:	66 b5       	in	r22, 0x26	; 38
    3096:	40 91 b2 00 	lds	r20, 0x00B2
    309a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    309e:	08 95       	ret

000030a0 <getSecureRandomByte(bool)>:
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
//  * whiten  if true whiten the output a little more, but little or no extra entropy is added;
//      if false then it is easier to test if the underlying source provides new entropy reliably
uint8_t getSecureRandomByte(const bool whiten)
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <getSecureRandomByte(bool)+0xe>
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	e8 2e       	mov	r14, r24
#ifdef WAKEUP_32768HZ_XTAL
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
#else // WARNING: poor substitute if 32768Hz xtal not available.
  uint8_t w1 = clockJitterWDT() + (clockJitterWDT() << 5);
    30b4:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    30b8:	18 2f       	mov	r17, r24
    30ba:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    30be:	82 95       	swap	r24
    30c0:	88 0f       	add	r24, r24
    30c2:	80 7e       	andi	r24, 0xE0	; 224
    30c4:	81 0f       	add	r24, r17
  w1 ^= (w1 << 1); // Mix.
    30c6:	18 2f       	mov	r17, r24
    30c8:	11 0f       	add	r17, r17
    30ca:	18 27       	eor	r17, r24
  w1 ^= clockJitterWDT();
    30cc:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    30d0:	18 27       	eor	r17, r24
  w1 ^= (w1 >> 2); // Mix.
    30d2:	01 2f       	mov	r16, r17
    30d4:	06 95       	lsr	r16
    30d6:	06 95       	lsr	r16
    30d8:	01 27       	eor	r16, r17
  w1 ^= clockJitterWDT();
    30da:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    30de:	08 27       	eor	r16, r24
  w1 ^= (w1 << 2); // Mix.
    30e0:	10 2f       	mov	r17, r16
    30e2:	11 0f       	add	r17, r17
    30e4:	11 0f       	add	r17, r17
    30e6:	10 27       	eor	r17, r16
  w1 ^= clockJitterWDT();
    30e8:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    30ec:	18 27       	eor	r17, r24
  w1 ^= (w1 >> 3); // Mix.
    30ee:	01 2f       	mov	r16, r17
    30f0:	06 95       	lsr	r16
    30f2:	06 95       	lsr	r16
    30f4:	06 95       	lsr	r16
    30f6:	01 27       	eor	r16, r17
  w1 ^= clockJitterWDT();
    30f8:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    30fc:	08 27       	eor	r16, r24
  w1 ^= (w1 << 4); // Mix.
    30fe:	f0 2e       	mov	r15, r16
    3100:	f2 94       	swap	r15
    3102:	80 ef       	ldi	r24, 0xF0	; 240
    3104:	f8 22       	and	r15, r24
    3106:	f0 26       	eor	r15, r16
  w1 ^= clockJitterWDT();
    3108:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    310c:	f8 26       	eor	r15, r24
  w1 ^= (w1 >> 1); // Mix.
    310e:	1f 2d       	mov	r17, r15
    3110:	16 95       	lsr	r17
    3112:	1f 25       	eor	r17, r15
  w1 ^= clockJitterWDT();
    3114:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    3118:	18 27       	eor	r17, r24
#endif
  const uint8_t v1 = w1;
    311a:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= (w1 << 3); // Mix.
    311c:	01 2f       	mov	r16, r17
    311e:	00 0f       	add	r16, r16
    3120:	00 0f       	add	r16, r16
    3122:	00 0f       	add	r16, r16
    3124:	01 27       	eor	r16, r17
  w1 ^= noisyADCRead(true); // Some more real noise, possibly ~1 bit.
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 44 14 	call	0x2888	; 0x2888 <noisyADCRead(bool)>
    312c:	08 27       	eor	r16, r24
  w1 ^= (w1 << 4); // Mix.
    312e:	10 2f       	mov	r17, r16
    3130:	12 95       	swap	r17
    3132:	10 7f       	andi	r17, 0xF0	; 240
    3134:	10 27       	eor	r17, r16
  const uint8_t v2 = w1;
    3136:	1a 83       	std	Y+2, r17	; 0x02
  w1 ^= clockJitterWDT(); // Possibly ~1 bit more of entropy.
    3138:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    313c:	18 27       	eor	r17, r24
  w1 ^= (w1 >> 4); // Mix.
    313e:	01 2f       	mov	r16, r17
    3140:	02 95       	swap	r16
    3142:	0f 70       	andi	r16, 0x0F	; 15
    3144:	01 27       	eor	r16, r17
  if(whiten)
    3146:	ee 20       	and	r14, r14
    3148:	f1 f0       	breq	.+60     	; 0x3186 <getSecureRandomByte(bool)+0xe6>
    {
    w1 ^= randRNG8(); // Whiten.
    314a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    314e:	80 27       	eor	r24, r16
    w1 ^= (w1 << 3); // Mix.
    3150:	08 2f       	mov	r16, r24
    3152:	00 0f       	add	r16, r16
    3154:	00 0f       	add	r16, r16
    3156:	00 0f       	add	r16, r16
    3158:	08 27       	eor	r16, r24
    w1 ^= _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v1, ++count8 - (uint8_t)(intptr_t)&v2); // Whiten.
    315a:	26 b5       	in	r18, 0x26	; 38
    315c:	30 91 88 02 	lds	r19, 0x0288
    3160:	3f 5f       	subi	r19, 0xFF	; 255
    3162:	30 93 88 02 	sts	0x0288, r19
    3166:	ce 01       	movw	r24, r28
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	28 27       	eor	r18, r24
    316c:	ce 01       	movw	r24, r28
    316e:	02 96       	adiw	r24, 0x02	; 2
    3170:	38 1b       	sub	r19, r24
    3172:	23 27       	eor	r18, r19
    3174:	88 e0       	ldi	r24, 0x08	; 8
    3176:	9c e8       	ldi	r25, 0x8C	; 140
    3178:	20 fb       	bst	r18, 0
    317a:	26 95       	lsr	r18
    317c:	0e f4       	brtc	.+2      	; 0x3180 <getSecureRandomByte(bool)+0xe0>
    317e:	29 27       	eor	r18, r25
    3180:	8a 95       	dec	r24
    3182:	d1 f7       	brne	.-12     	; 0x3178 <getSecureRandomByte(bool)+0xd8>
    3184:	02 27       	eor	r16, r18
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	89 27       	eor	r24, r25
    318c:	98 e0       	ldi	r25, 0x08	; 8
    318e:	2c e8       	ldi	r18, 0x8C	; 140
    3190:	80 fb       	bst	r24, 0
    3192:	86 95       	lsr	r24
    3194:	0e f4       	brtc	.+2      	; 0x3198 <getSecureRandomByte(bool)+0xf8>
    3196:	82 27       	eor	r24, r18
    3198:	9a 95       	dec	r25
    319a:	d1 f7       	brne	.-12     	; 0x3190 <getSecureRandomByte(bool)+0xf0>
    }
  w1 ^= _crc_ibutton_update(v1, v2); // Complex hash.
  return(w1);
  }
    319c:	80 27       	eor	r24, r16
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	ff 90       	pop	r15
    31ac:	ef 90       	pop	r14
    31ae:	08 95       	ret

000031b0 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    31b0:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    31b2:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <powerUpSerialIfDisabled()>
    31b6:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    31b8:	86 ef       	ldi	r24, 0xF6	; 246
    31ba:	93 e0       	ldi	r25, 0x03	; 3
    31bc:	0e 94 f7 37 	call	0x6fee	; 0x6fee <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    31c0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    31c4:	11 23       	and	r17, r17
    31c6:	11 f0       	breq	.+4      	; 0x31cc <serialPrintlnAndFlush()+0x1c>
    31c8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <powerDownSerial()>
  }
    31cc:	1f 91       	pop	r17
    31ce:	08 95       	ret

000031d0 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    31d0:	df 92       	push	r13
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	8c 01       	movw	r16, r24
    31dc:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    31de:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <powerUpSerialIfDisabled()>
    31e2:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    31e4:	86 ef       	ldi	r24, 0xF6	; 246
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	b8 01       	movw	r22, r16
    31ea:	a7 01       	movw	r20, r14
    31ec:	0e 94 0c 39 	call	0x7218	; 0x7218 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    31f0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    31f4:	dd 20       	and	r13, r13
    31f6:	11 f0       	breq	.+4      	; 0x31fc <serialPrintAndFlush(int, int)+0x2c>
    31f8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <powerDownSerial()>
  }
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	df 90       	pop	r13
    3206:	08 95       	ret

00003208 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3210:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <powerUpSerialIfDisabled()>
    3214:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3216:	86 ef       	ldi	r24, 0xF6	; 246
    3218:	93 e0       	ldi	r25, 0x03	; 3
    321a:	b8 01       	movw	r22, r16
    321c:	0e 94 1f 39 	call	0x723e	; 0x723e <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3220:	0e 94 31 15 	call	0x2a62	; 0x2a62 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3224:	ff 20       	and	r15, r15
    3226:	11 f0       	breq	.+4      	; 0x322c <serialPrintAndFlush(char const*)+0x24>
    3228:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <powerDownSerial()>
  }
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	08 95       	ret

00003234 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    3234:	ff 92       	push	r15
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    323c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <powerUpSerialIfDisabled()>
    3240:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3242:	86 ef       	ldi	r24, 0xF6	; 246
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	b8 01       	movw	r22, r16
    3248:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    324c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3250:	ff 20       	and	r15, r15
    3252:	11 f0       	breq	.+4      	; 0x3258 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    3254:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <powerDownSerial()>
  }
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	08 95       	ret

00003260 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3268:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <powerUpSerialIfDisabled()>
    326c:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    326e:	86 ef       	ldi	r24, 0xF6	; 246
    3270:	93 e0       	ldi	r25, 0x03	; 3
    3272:	b8 01       	movw	r22, r16
    3274:	0e 94 17 38 	call	0x702e	; 0x702e <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3278:	0e 94 31 15 	call	0x2a62	; 0x2a62 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    327c:	ff 20       	and	r15, r15
    327e:	11 f0       	breq	.+4      	; 0x3284 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    3280:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <powerDownSerial()>
  }
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	08 95       	ret

0000328c <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	80 93 40 01 	sts	0x0140, r24
    3292:	08 95       	ret

00003294 <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	80 93 8a 02 	sts	0x028A, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    329a:	92 e0       	ldi	r25, 0x02	; 2
    329c:	90 93 89 02 	sts	0x0289, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    32a0:	90 93 40 01 	sts	0x0140, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    32a4:	84 e6       	ldi	r24, 0x64	; 100
    32a6:	80 93 3e 02 	sts	0x023E, r24
    32aa:	82 e3       	ldi	r24, 0x32	; 50
    32ac:	80 93 3f 02 	sts	0x023F, r24
    32b0:	90 93 40 02 	sts	0x0240, r25
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  Occupancy.markAsOccupied(); // Thread-safe.
  }
    32b4:	08 95       	ret

000032b6 <randRNG8NextBoolean()>:
void resetRNG8();
#endif

// Get a boolean from RNG8.
// Avoids suspect low-order bit(s).
static inline bool randRNG8NextBoolean() { return(0 != (0x8 & randRNG8())); }
    32b6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	23 e0       	ldi	r18, 0x03	; 3
    32be:	96 95       	lsr	r25
    32c0:	87 95       	ror	r24
    32c2:	2a 95       	dec	r18
    32c4:	e1 f7       	brne	.-8      	; 0x32be <randRNG8NextBoolean()+0x8>
    32c6:	81 70       	andi	r24, 0x01	; 1
    32c8:	08 95       	ret

000032ca <testEEPROM()>:
// Self-test of EEPROM functioning (and smart/split erase/write).
// Will not usually perform any wear-inducing activity (is idempotent).
// Aborts with panic() upon failure.
static void testEEPROM()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEEPROM");
    32ca:	88 ea       	ldi	r24, 0xA8	; 168
    32cc:	92 e0       	ldi	r25, 0x02	; 2
    32ce:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    32d2:	f9 99       	sbic	0x1f, 1	; 31
    32d4:	fe cf       	rjmp	.-4      	; 0x32d2 <testEEPROM()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    32d6:	12 bc       	out	0x22, r1	; 34
    32d8:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    32da:	f8 9a       	sbi	0x1f, 0	; 31
    32dc:	80 b5       	in	r24, 0x20	; 32

  if((uint8_t) 0xff != eeprom_read_byte((uint8_t*)EE_START_TEST_LOC))
    32de:	8f 3f       	cpi	r24, 0xFF	; 255
    32e0:	91 f0       	breq	.+36     	; 0x3306 <testEEPROM()+0x3c>
    {
    if(!eeprom_smart_erase_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should have attempted erase.
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 8f 08 	call	0x111e	; 0x111e <eeprom_smart_erase_byte(unsigned char*)>
    32ea:	88 23       	and	r24, r24
    32ec:	11 f4       	brne	.+4      	; 0x32f2 <testEEPROM()+0x28>
    32ee:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    32f2:	f9 99       	sbic	0x1f, 1	; 31
    32f4:	fe cf       	rjmp	.-4      	; 0x32f2 <testEEPROM()+0x28>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    32f6:	12 bc       	out	0x22, r1	; 34
    32f8:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    32fa:	f8 9a       	sbi	0x1f, 0	; 31
    32fc:	80 b5       	in	r24, 0x20	; 32
    if((uint8_t) 0xff != eeprom_read_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should have erased.
    32fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3300:	11 f0       	breq	.+4      	; 0x3306 <testEEPROM()+0x3c>
    3302:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
    }
  if(eeprom_smart_erase_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should not need erase nor attempt one.
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0e 94 8f 08 	call	0x111e	; 0x111e <eeprom_smart_erase_byte(unsigned char*)>
    330e:	88 23       	and	r24, r24
    3310:	11 f0       	breq	.+4      	; 0x3316 <testEEPROM()+0x4c>
    3312:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3316:	f9 99       	sbic	0x1f, 1	; 31
    3318:	fe cf       	rjmp	.-4      	; 0x3316 <testEEPROM()+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	92 bd       	out	0x22, r25	; 34
    3320:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3322:	f8 9a       	sbi	0x1f, 0	; 31
    3324:	80 b5       	in	r24, 0x20	; 32

  const uint8_t eaTestPattern = 0xa5; // Test pattern for masking (selective bit clearing).
  if(0 != ((~eaTestPattern) & eeprom_read_byte((uint8_t*)EE_START_TEST_LOC2))) // Will need to clear some bits.
    3326:	8a 75       	andi	r24, 0x5A	; 90
    3328:	a9 f0       	breq	.+42     	; 0x3354 <testEEPROM()+0x8a>
    {
      if(!eeprom_smart_clear_bits((uint8_t*)EE_START_TEST_LOC2, eaTestPattern)) { panic(); } // Should have attempted write.
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	65 ea       	ldi	r22, 0xA5	; 165
    3330:	0e 94 a3 08 	call	0x1146	; 0x1146 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    3334:	88 23       	and	r24, r24
    3336:	11 f4       	brne	.+4      	; 0x333c <testEEPROM()+0x72>
    3338:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    333c:	f9 99       	sbic	0x1f, 1	; 31
    333e:	fe cf       	rjmp	.-4      	; 0x333c <testEEPROM()+0x72>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	92 bd       	out	0x22, r25	; 34
    3346:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3348:	f8 9a       	sbi	0x1f, 0	; 31
    334a:	80 b5       	in	r24, 0x20	; 32
      if(0 != ((~eaTestPattern) & eeprom_read_byte((uint8_t*)EE_START_TEST_LOC2))) { panic(); } // Should have written.
    334c:	8a 75       	andi	r24, 0x5A	; 90
    334e:	11 f0       	breq	.+4      	; 0x3354 <testEEPROM()+0x8a>
    3350:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
    }
  if(eeprom_smart_clear_bits((uint8_t*)EE_START_TEST_LOC2, eaTestPattern)) { panic(); } // Should not need write nor attempt one.
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	65 ea       	ldi	r22, 0xA5	; 165
    335a:	0e 94 a3 08 	call	0x1146	; 0x1146 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    335e:	88 23       	and	r24, r24
    3360:	11 f0       	breq	.+4      	; 0x3366 <testEEPROM()+0x9c>
    3362:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
    3366:	08 95       	ret

00003368 <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3368:	a0 e0       	ldi	r26, 0x00	; 0
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	22 e1       	ldi	r18, 0x12	; 18
    3372:	3a e7       	ldi	r19, 0x7A	; 122
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	0e 94 ae 39 	call	0x735c	; 0x735c <__mulsi3>
    337c:	60 53       	subi	r22, 0x30	; 48
    337e:	78 4f       	sbci	r23, 0xF8	; 248
    3380:	8f 4f       	sbci	r24, 0xFF	; 255
    3382:	9f 4f       	sbci	r25, 0xFF	; 255
    3384:	20 ea       	ldi	r18, 0xA0	; 160
    3386:	3f e0       	ldi	r19, 0x0F	; 15
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	0e 94 22 3a 	call	0x7444	; 0x7444 <__divmodsi4>
    3390:	da 01       	movw	r26, r20
    3392:	c9 01       	movw	r24, r18
    3394:	02 97       	sbiw	r24, 0x02	; 2
    3396:	0e 94 29 12 	call	0x2452	; 0x2452 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    339a:	08 95       	ret

0000339c <error(int, int)>:
#include "Serial_IO.h"


// Error exit from failed unit test, one int parameter and the failing line number to print...
// Expects to terminate like panic() with flashing light can be detected by eye or in hardware if required.
static void error(int err, int line)
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	8c 01       	movw	r16, r24
    33a6:	eb 01       	movw	r28, r22
  {
  for( ; ; )
    {
    serialPrintAndFlush(F("***Test FAILED*** val="));
    33a8:	8c e7       	ldi	r24, 0x7C	; 124
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(err, DEC);
    33b0:	c8 01       	movw	r24, r16
    33b2:	6a e0       	ldi	r22, 0x0A	; 10
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
    serialPrintAndFlush(F(" =0x"));
    33ba:	87 e7       	ldi	r24, 0x77	; 119
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(err, HEX);
    33c2:	c8 01       	movw	r24, r16
    33c4:	60 e1       	ldi	r22, 0x10	; 16
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
    if(0 != line)
    33cc:	20 97       	sbiw	r28, 0x00	; 0
    33ce:	49 f0       	breq	.+18     	; 0x33e2 <error(int, int)+0x46>
      {
      serialPrintAndFlush(F(" at line "));
    33d0:	8d e6       	ldi	r24, 0x6D	; 109
    33d2:	91 e0       	ldi	r25, 0x01	; 1
    33d4:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush(line);
    33d8:	ce 01       	movw	r24, r28
    33da:	6a e0       	ldi	r22, 0x0A	; 10
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
      }
    serialPrintlnAndFlush();
    33e2:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
    LED_HEATCALL_ON();
    33e6:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    33ee:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(1000);
    33f0:	88 ee       	ldi	r24, 0xE8	; 232
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	0e 94 b4 19 	call	0x3368	; 0x3368 <sleepLowPowerMs(unsigned int)>
    33f8:	d7 cf       	rjmp	.-82     	; 0x33a8 <error(int, int)+0xc>

000033fa <errorIfNotEqual(int, int, int)>:
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    33fa:	86 17       	cp	r24, r22
    33fc:	97 07       	cpc	r25, r23
    33fe:	21 f0       	breq	.+8      	; 0x3408 <errorIfNotEqual(int, int, int)+0xe>
    3400:	cb 01       	movw	r24, r22
    3402:	ba 01       	movw	r22, r20
    3404:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    3408:	08 95       	ret

0000340a <testComputeRequiredTRVPercentOpen()>:




// Test for general sanity of computation of desired valve position.
static void testComputeRequiredTRVPercentOpen()
    340a:	4f 92       	push	r4
    340c:	5f 92       	push	r5
    340e:	6f 92       	push	r6
    3410:	7f 92       	push	r7
    3412:	8f 92       	push	r8
    3414:	9f 92       	push	r9
    3416:	af 92       	push	r10
    3418:	bf 92       	push	r11
    341a:	cf 92       	push	r12
    341c:	df 92       	push	r13
    341e:	ef 92       	push	r14
    3420:	ff 92       	push	r15
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	c8 57       	subi	r28, 0x78	; 120
    3430:	d0 40       	sbci	r29, 0x00	; 0
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testComputeRequiredTRVPercentOpen()");
    343c:	89 e4       	ldi	r24, 0x49	; 73
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
    3444:	87 e0       	ldi	r24, 0x07	; 7
    3446:	8a 83       	std	Y+2, r24	; 0x02
    3448:	8a e0       	ldi	r24, 0x0A	; 10
    344a:	8b 83       	std	Y+3, r24	; 0x03
    344c:	84 e6       	ldi	r24, 0x64	; 100
    344e:	8c 83       	std	Y+4, r24	; 0x04
    3450:	1d 82       	std	Y+5, r1	; 0x05
    3452:	1e 82       	std	Y+6, r1	; 0x06
    3454:	1f 82       	std	Y+7, r1	; 0x07
    3456:	18 86       	std	Y+8, r1	; 0x08
    { setReferenceTemperatures(realTempC16); }
    3458:	ce 01       	movw	r24, r28
    345a:	02 96       	adiw	r24, 0x02	; 2
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ModelledRadValveInputState::setReferenceTemperatures(int)>
  // ie that when below any possible legal target FROST/WARM/BAKE temperature the valve will open monotonically,
  // and also test that the fully-open state is reached in a bounded number of ticks ie bounded time.
  static const int maxFullTravelMins = 25;
//  DEBUG_SERIAL_PRINTLN_FLASHSTRING("open...");
  ModelledRadValveInputState is0(0);
  is0.targetTempC = randRNG8NextBoolean() ? FROST : WARM;
    3464:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    3468:	88 23       	and	r24, r24
    346a:	11 f4       	brne	.+4      	; 0x3470 <testComputeRequiredTRVPercentOpen()+0x66>
    346c:	82 e1       	ldi	r24, 0x12	; 18
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <testComputeRequiredTRVPercentOpen()+0x68>
    3470:	87 e0       	ldi	r24, 0x07	; 7
    3472:	8a 83       	std	Y+2, r24	; 0x02
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
    3474:	1d 8e       	std	Y+29, r1	; 0x1d
    3476:	1e 8e       	std	Y+30, r1	; 0x1e
    3478:	1f 8e       	std	Y+31, r1	; 0x1f
    347a:	18 a2       	std	Y+32, r1	; 0x20
    347c:	89 a1       	ldd	r24, Y+33	; 0x21
    347e:	80 7f       	andi	r24, 0xF0	; 240
    3480:	89 a3       	std	Y+33, r24	; 0x21
    3482:	1a a2       	std	Y+34, r1	; 0x22
    3484:	1b a2       	std	Y+35, r1	; 0x23
  ModelledRadValveState rs0;
  const uint8_t valvePCOpenInitial0 = randRNG8() % 100;
    3486:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    348a:	64 e6       	ldi	r22, 0x64	; 100
    348c:	0e 94 cd 39 	call	0x739a	; 0x739a <__udivmodqi4>
    3490:	d9 2e       	mov	r13, r25
  volatile uint8_t valvePCOpen = valvePCOpenInitial0;
    3492:	99 83       	std	Y+1, r25	; 0x01
    3494:	29 e1       	ldi	r18, 0x19	; 25
    3496:	e2 2e       	mov	r14, r18
    3498:	f1 2c       	mov	r15, r1
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is0.widenDeadband = randRNG8NextBoolean();
    is0.hasEcoBias = randRNG8NextBoolean();
    const uint8_t oldValvePos = valvePCOpen;
    rs0.tick(valvePCOpen, is0);
    349a:	9d e1       	ldi	r25, 0x1D	; 29
    349c:	69 2e       	mov	r6, r25
    349e:	71 2c       	mov	r7, r1
    34a0:	6c 0e       	add	r6, r28
    34a2:	7d 1e       	adc	r7, r29
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	88 2e       	mov	r8, r24
    34a8:	91 2c       	mov	r9, r1
    34aa:	8c 0e       	add	r8, r28
    34ac:	9d 1e       	adc	r9, r29
    34ae:	5e 01       	movw	r10, r28
    34b0:	08 94       	sec
    34b2:	a1 1c       	adc	r10, r1
    34b4:	b1 1c       	adc	r11, r1
    34b6:	44 c0       	rjmp	.+136    	; 0x3540 <testComputeRequiredTRVPercentOpen()+0x136>
  volatile uint8_t valvePCOpen = valvePCOpenInitial0;
  for(int i = maxFullTravelMins; --i >= 0; ) // Must fully open in reasonable time.
    {
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is0.widenDeadband = randRNG8NextBoolean();
    34b8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    is0.hasEcoBias = randRNG8NextBoolean();
    34be:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    34c2:	8f 83       	std	Y+7, r24	; 0x07
    const uint8_t oldValvePos = valvePCOpen;
    34c4:	09 81       	ldd	r16, Y+1	; 0x01
    rs0.tick(valvePCOpen, is0);
    34c6:	c3 01       	movw	r24, r6
    34c8:	b5 01       	movw	r22, r10
    34ca:	a4 01       	movw	r20, r8
    34cc:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
    const uint8_t newValvePos = valvePCOpen;
    34d0:	19 81       	ldd	r17, Y+1	; 0x01
    AssertIsTrue(newValvePos > 0);
    34d2:	11 23       	and	r17, r17
    34d4:	39 f4       	brne	.+14     	; 0x34e4 <testComputeRequiredTRVPercentOpen()+0xda>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	68 e7       	ldi	r22, 0x78	; 120
    34dc:	70 e0       	ldi	r23, 0x00	; 0
    34de:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    34e2:	0a c0       	rjmp	.+20     	; 0x34f8 <testComputeRequiredTRVPercentOpen()+0xee>
    AssertIsTrue(newValvePos <= 100);
    34e4:	15 36       	cpi	r17, 0x65	; 101
    34e6:	30 f0       	brcs	.+12     	; 0x34f4 <testComputeRequiredTRVPercentOpen()+0xea>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	69 e7       	ldi	r22, 0x79	; 121
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    AssertIsTrue(newValvePos > oldValvePos);
    34f4:	01 17       	cp	r16, r17
    34f6:	30 f0       	brcs	.+12     	; 0x3504 <testComputeRequiredTRVPercentOpen()+0xfa>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	6a e7       	ldi	r22, 0x7A	; 122
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    if(oldValvePos < is0.minPCOpen) { AssertIsTrue(is0.minPCOpen <= newValvePos); } // Should open to at least minimum-really-open-% on first step.
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	08 17       	cp	r16, r24
    3508:	40 f4       	brcc	.+16     	; 0x351a <testComputeRequiredTRVPercentOpen()+0x110>
    350a:	18 17       	cp	r17, r24
    350c:	30 f4       	brcc	.+12     	; 0x351a <testComputeRequiredTRVPercentOpen()+0x110>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	6b e7       	ldi	r22, 0x7B	; 123
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    AssertIsTrue(rs0.valveMoved == (oldValvePos != newValvePos));
    351a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	01 17       	cp	r16, r17
    3524:	11 f0       	breq	.+4      	; 0x352a <testComputeRequiredTRVPercentOpen()+0x120>
    3526:	21 e0       	ldi	r18, 0x01	; 1
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	82 17       	cp	r24, r18
    352c:	93 07       	cpc	r25, r19
    352e:	31 f0       	breq	.+12     	; 0x353c <testComputeRequiredTRVPercentOpen()+0x132>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	6c e7       	ldi	r22, 0x7C	; 124
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    if(100 == newValvePos) { break; }
    353c:	14 36       	cpi	r17, 0x64	; 100
    353e:	49 f0       	breq	.+18     	; 0x3552 <testComputeRequiredTRVPercentOpen()+0x148>
  ModelledRadValveInputState is0(0);
  is0.targetTempC = randRNG8NextBoolean() ? FROST : WARM;
  ModelledRadValveState rs0;
  const uint8_t valvePCOpenInitial0 = randRNG8() % 100;
  volatile uint8_t valvePCOpen = valvePCOpenInitial0;
  for(int i = maxFullTravelMins; --i >= 0; ) // Must fully open in reasonable time.
    3540:	08 94       	sec
    3542:	e1 08       	sbc	r14, r1
    3544:	f1 08       	sbc	r15, r1
    3546:	2f ef       	ldi	r18, 0xFF	; 255
    3548:	e2 16       	cp	r14, r18
    354a:	2f ef       	ldi	r18, 0xFF	; 255
    354c:	f2 06       	cpc	r15, r18
    354e:	09 f0       	breq	.+2      	; 0x3552 <testComputeRequiredTRVPercentOpen()+0x148>
    3550:	b3 cf       	rjmp	.-154    	; 0x34b8 <testComputeRequiredTRVPercentOpen()+0xae>
    AssertIsTrue(newValvePos > oldValvePos);
    if(oldValvePos < is0.minPCOpen) { AssertIsTrue(is0.minPCOpen <= newValvePos); } // Should open to at least minimum-really-open-% on first step.
    AssertIsTrue(rs0.valveMoved == (oldValvePos != newValvePos));
    if(100 == newValvePos) { break; }
    }
  AssertIsEqual(100, valvePCOpen);
    3552:	69 81       	ldd	r22, Y+1	; 0x01
    3554:	84 e6       	ldi	r24, 0x64	; 100
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	4f e7       	ldi	r20, 0x7F	; 127
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(100 - valvePCOpenInitial0, rs0.cumulativeMovementPC);
    3562:	68 a1       	ldd	r22, Y+32	; 0x20
    3564:	79 a1       	ldd	r23, Y+33	; 0x21
    3566:	7f 70       	andi	r23, 0x0F	; 15
    3568:	84 e6       	ldi	r24, 0x64	; 100
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	8d 19       	sub	r24, r13
    356e:	91 09       	sbc	r25, r1
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	50 e0       	ldi	r21, 0x00	; 0
    3574:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
    3578:	87 e0       	ldi	r24, 0x07	; 7
    357a:	8b 87       	std	Y+11, r24	; 0x0b
    357c:	8a e0       	ldi	r24, 0x0A	; 10
    357e:	8c 87       	std	Y+12, r24	; 0x0c
    3580:	84 e6       	ldi	r24, 0x64	; 100
    3582:	8d 87       	std	Y+13, r24	; 0x0d
    3584:	1e 86       	std	Y+14, r1	; 0x0e
    3586:	1f 86       	std	Y+15, r1	; 0x0f
    3588:	18 8a       	std	Y+16, r1	; 0x10
    358a:	19 8a       	std	Y+17, r1	; 0x11
    { setReferenceTemperatures(realTempC16); }
    358c:	ce 01       	movw	r24, r28
    358e:	0b 96       	adiw	r24, 0x0b	; 11
    3590:	60 e4       	ldi	r22, 0x40	; 64
    3592:	76 e0       	ldi	r23, 0x06	; 6
    3594:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ModelledRadValveInputState::setReferenceTemperatures(int)>
  //   * Once in linger all reductions should be by 1% until possible final jump to 0.
  //   * Check that linger was long enough (if linger threshold is higher enough to allow it).
  // Also check for some correct initialisation and 'velocity'/smoothing behaviour.
//  DEBUG_SERIAL_PRINTLN_FLASHSTRING("close...");
  ModelledRadValveInputState is1(100<<4);
  is1.targetTempC = randRNG8NextBoolean() ? FROST : WARM;
    3598:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    359c:	88 23       	and	r24, r24
    359e:	11 f4       	brne	.+4      	; 0x35a4 <testComputeRequiredTRVPercentOpen()+0x19a>
    35a0:	82 e1       	ldi	r24, 0x12	; 18
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <testComputeRequiredTRVPercentOpen()+0x19c>
    35a4:	87 e0       	ldi	r24, 0x07	; 7
    35a6:	8b 87       	std	Y+11, r24	; 0x0b
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
    35a8:	1c aa       	std	Y+52, r1	; 0x34
    35aa:	1d aa       	std	Y+53, r1	; 0x35
    35ac:	1e aa       	std	Y+54, r1	; 0x36
    35ae:	1f aa       	std	Y+55, r1	; 0x37
    35b0:	88 ad       	ldd	r24, Y+56	; 0x38
    35b2:	80 7f       	andi	r24, 0xF0	; 240
    35b4:	88 af       	std	Y+56, r24	; 0x38
    35b6:	19 ae       	std	Y+57, r1	; 0x39
    35b8:	1a ae       	std	Y+58, r1	; 0x3a
  ModelledRadValveState rs1;
  AssertIsTrue(!rs1.initialised); // Initialisation not yet complete.
  const uint8_t valvePCOpenInitial1 = 1 + (randRNG8() % 100);
    35ba:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    35be:	64 e6       	ldi	r22, 0x64	; 100
    35c0:	0e 94 cd 39 	call	0x739a	; 0x739a <__udivmodqi4>
    35c4:	c9 2e       	mov	r12, r25
    35c6:	c3 94       	inc	r12
  valvePCOpen = valvePCOpenInitial1;
    35c8:	c9 82       	std	Y+1, r12	; 0x01
  const bool lookForLinger = (valvePCOpenInitial1 >= is1.minPCOpen);
    35ca:	bb 24       	eor	r11, r11
    35cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ce:	c8 16       	cp	r12, r24
    35d0:	10 f0       	brcs	.+4      	; 0x35d6 <testComputeRequiredTRVPercentOpen()+0x1cc>
    35d2:	bb 24       	eor	r11, r11
    35d4:	b3 94       	inc	r11
    35d6:	dd 24       	eor	r13, r13
    35d8:	aa 24       	eor	r10, r10
    35da:	09 e1       	ldi	r16, 0x19	; 25
    35dc:	e0 2e       	mov	r14, r16
    35de:	f1 2c       	mov	r15, r1
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is1.widenDeadband = randRNG8NextBoolean();
    is1.hasEcoBias = randRNG8NextBoolean();
    const uint8_t oldValvePos = valvePCOpen;
    rs1.tick(valvePCOpen, is1);
    35e0:	14 e3       	ldi	r17, 0x34	; 52
    35e2:	41 2e       	mov	r4, r17
    35e4:	51 2c       	mov	r5, r1
    35e6:	4c 0e       	add	r4, r28
    35e8:	5d 1e       	adc	r5, r29
    35ea:	bb e0       	ldi	r27, 0x0B	; 11
    35ec:	6b 2e       	mov	r6, r27
    35ee:	71 2c       	mov	r7, r1
    35f0:	6c 0e       	add	r6, r28
    35f2:	7d 1e       	adc	r7, r29
    35f4:	4e 01       	movw	r8, r28
    35f6:	08 94       	sec
    35f8:	81 1c       	adc	r8, r1
    35fa:	91 1c       	adc	r9, r1
    35fc:	51 c0       	rjmp	.+162    	; 0x36a0 <testComputeRequiredTRVPercentOpen()+0x296>
  uint8_t lingerMins = 0; // Approx mins spent in linger.
  for(int i = maxFullTravelMins; --i >= 0; ) // Must fully close in reasonable time.
    {
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is1.widenDeadband = randRNG8NextBoolean();
    35fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    3602:	8e 87       	std	Y+14, r24	; 0x0e
    is1.hasEcoBias = randRNG8NextBoolean();
    3604:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    3608:	88 8b       	std	Y+16, r24	; 0x10
    const uint8_t oldValvePos = valvePCOpen;
    360a:	09 81       	ldd	r16, Y+1	; 0x01
    rs1.tick(valvePCOpen, is1);
    360c:	c2 01       	movw	r24, r4
    360e:	b4 01       	movw	r22, r8
    3610:	a3 01       	movw	r20, r6
    3612:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
    const uint8_t newValvePos = valvePCOpen;
    3616:	19 81       	ldd	r17, Y+1	; 0x01
    AssertIsTrue(rs1.initialised); // Initialisation must have completed.
    3618:	8c a9       	ldd	r24, Y+52	; 0x34
    361a:	88 23       	and	r24, r24
    361c:	31 f4       	brne	.+12     	; 0x362a <testComputeRequiredTRVPercentOpen()+0x220>
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	6b e9       	ldi	r22, 0x9B	; 155
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    AssertIsTrue(newValvePos < 100);
    362a:	14 36       	cpi	r17, 0x64	; 100
    362c:	30 f0       	brcs	.+12     	; 0x363a <testComputeRequiredTRVPercentOpen()+0x230>
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	6c e9       	ldi	r22, 0x9C	; 156
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
//    AssertIsTrue(newValvePos >= 0);
    AssertIsTrue(newValvePos < oldValvePos);
    363a:	10 17       	cp	r17, r16
    363c:	30 f0       	brcs	.+12     	; 0x364a <testComputeRequiredTRVPercentOpen()+0x240>
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	6e e9       	ldi	r22, 0x9E	; 158
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    if(hitLinger) { ++lingerMins; }
    364a:	dd 20       	and	r13, r13
    364c:	61 f0       	breq	.+24     	; 0x3666 <testComputeRequiredTRVPercentOpen()+0x25c>
    364e:	a3 94       	inc	r10
    if(hitLinger && (0 != newValvePos)) { AssertIsEqual(oldValvePos - 1, newValvePos); }
    3650:	11 23       	and	r17, r17
    3652:	49 f0       	breq	.+18     	; 0x3666 <testComputeRequiredTRVPercentOpen()+0x25c>
    3654:	80 2f       	mov	r24, r16
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	61 2f       	mov	r22, r17
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	40 ea       	ldi	r20, 0xA0	; 160
    3660:	50 e0       	ldi	r21, 0x00	; 0
    3662:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
    if(newValvePos == is1.minPCOpen-1) { hitLinger = true; }
    3666:	21 2f       	mov	r18, r17
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	8c 85       	ldd	r24, Y+12	; 0x0c
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	28 17       	cp	r18, r24
    3672:	39 07       	cpc	r19, r25
    3674:	11 f4       	brne	.+4      	; 0x367a <testComputeRequiredTRVPercentOpen()+0x270>
    3676:	dd 24       	eor	r13, r13
    3678:	d3 94       	inc	r13
    AssertIsTrue(rs1.valveMoved == (oldValvePos != newValvePos));
    367a:	8e a9       	ldd	r24, Y+54	; 0x36
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	01 17       	cp	r16, r17
    3684:	11 f0       	breq	.+4      	; 0x368a <testComputeRequiredTRVPercentOpen()+0x280>
    3686:	21 e0       	ldi	r18, 0x01	; 1
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	82 17       	cp	r24, r18
    368c:	93 07       	cpc	r25, r19
    368e:	31 f0       	breq	.+12     	; 0x369c <testComputeRequiredTRVPercentOpen()+0x292>
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	62 ea       	ldi	r22, 0xA2	; 162
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    if(0 == newValvePos) { break; }
    369c:	11 23       	and	r17, r17
    369e:	49 f0       	breq	.+18     	; 0x36b2 <testComputeRequiredTRVPercentOpen()+0x2a8>
  const uint8_t valvePCOpenInitial1 = 1 + (randRNG8() % 100);
  valvePCOpen = valvePCOpenInitial1;
  const bool lookForLinger = (valvePCOpenInitial1 >= is1.minPCOpen);
  bool hitLinger = false; // True if the linger value was hit.
  uint8_t lingerMins = 0; // Approx mins spent in linger.
  for(int i = maxFullTravelMins; --i >= 0; ) // Must fully close in reasonable time.
    36a0:	08 94       	sec
    36a2:	e1 08       	sbc	r14, r1
    36a4:	f1 08       	sbc	r15, r1
    36a6:	3f ef       	ldi	r19, 0xFF	; 255
    36a8:	e3 16       	cp	r14, r19
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	f3 06       	cpc	r15, r19
    36ae:	09 f0       	breq	.+2      	; 0x36b2 <testComputeRequiredTRVPercentOpen()+0x2a8>
    36b0:	a6 cf       	rjmp	.-180    	; 0x35fe <testComputeRequiredTRVPercentOpen()+0x1f4>
    if(hitLinger && (0 != newValvePos)) { AssertIsEqual(oldValvePos - 1, newValvePos); }
    if(newValvePos == is1.minPCOpen-1) { hitLinger = true; }
    AssertIsTrue(rs1.valveMoved == (oldValvePos != newValvePos));
    if(0 == newValvePos) { break; }
    }
  AssertIsEqual(0, valvePCOpen);
    36b2:	69 81       	ldd	r22, Y+1	; 0x01
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	70 e0       	ldi	r23, 0x00	; 0
    36ba:	45 ea       	ldi	r20, 0xA5	; 165
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(valvePCOpenInitial1, rs1.cumulativeMovementPC);
    36c2:	6f a9       	ldd	r22, Y+55	; 0x37
    36c4:	78 ad       	ldd	r23, Y+56	; 0x38
    36c6:	7f 70       	andi	r23, 0x0F	; 15
    36c8:	8c 2d       	mov	r24, r12
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	46 ea       	ldi	r20, 0xA6	; 166
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsTrue(hitLinger == lookForLinger);
    36d4:	db 14       	cp	r13, r11
    36d6:	31 f0       	breq	.+12     	; 0x36e4 <testComputeRequiredTRVPercentOpen()+0x2da>
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	67 ea       	ldi	r22, 0xA7	; 167
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  if(lookForLinger) { AssertIsTrue(lingerMins >= min(is1.minPCOpen, DEFAULT_MAX_RUN_ON_TIME_M)); }
    36e4:	bb 20       	and	r11, r11
    36e6:	99 f0       	breq	.+38     	; 0x370e <testComputeRequiredTRVPercentOpen()+0x304>
    36e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    36ea:	85 30       	cpi	r24, 0x05	; 5
    36ec:	18 f0       	brcs	.+6      	; 0x36f4 <testComputeRequiredTRVPercentOpen()+0x2ea>
    36ee:	25 e0       	ldi	r18, 0x05	; 5
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <testComputeRequiredTRVPercentOpen()+0x2ee>
    36f4:	28 2f       	mov	r18, r24
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	8a 2d       	mov	r24, r10
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	82 17       	cp	r24, r18
    36fe:	93 07       	cpc	r25, r19
    3700:	34 f4       	brge	.+12     	; 0x370e <testComputeRequiredTRVPercentOpen()+0x304>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	68 ea       	ldi	r22, 0xA8	; 168
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    370e:	ce 01       	movw	r24, r28
    3710:	c4 96       	adiw	r24, 0x34	; 52
    3712:	8c 01       	movw	r16, r24
    3714:	0b 5e       	subi	r16, 0xEB	; 235
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
  // Filtering should not have been engaged and velocity should be zero (temperature is flat).
  for(int i = ModelledRadValveState::filterLength; --i >= 0; ) { AssertIsEqual(100<<4, rs1.prevRawTempC16[i]); }
    3718:	d8 2e       	mov	r13, r24
    371a:	c9 2e       	mov	r12, r25
    371c:	a9 e3       	ldi	r26, 0x39	; 57
    371e:	ea 2e       	mov	r14, r26
    3720:	f1 2c       	mov	r15, r1
    3722:	ec 0e       	add	r14, r28
    3724:	fd 1e       	adc	r15, r29
    3726:	0b c0       	rjmp	.+22     	; 0x373e <testComputeRequiredTRVPercentOpen()+0x334>
    3728:	f8 01       	movw	r30, r16
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	80 e4       	ldi	r24, 0x40	; 64
    3730:	96 e0       	ldi	r25, 0x06	; 6
    3732:	4a ea       	ldi	r20, 0xAA	; 170
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
    373a:	02 50       	subi	r16, 0x02	; 2
    373c:	10 40       	sbci	r17, 0x00	; 0
    373e:	0e 15       	cp	r16, r14
    3740:	1f 05       	cpc	r17, r15
    3742:	91 f7       	brne	.-28     	; 0x3728 <testComputeRequiredTRVPercentOpen()+0x31e>
  AssertIsEqual(100<<4, rs1.getSmoothedRecent());
    3744:	8d 2d       	mov	r24, r13
    3746:	9c 2d       	mov	r25, r12
    3748:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ModelledRadValveState::getSmoothedRecent()>
    374c:	bc 01       	movw	r22, r24
    374e:	80 e4       	ldi	r24, 0x40	; 64
    3750:	96 e0       	ldi	r25, 0x06	; 6
    3752:	4b ea       	ldi	r20, 0xAB	; 171
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
//  AssertIsEqual(0, rs1.getVelocityC16PerTick());
  AssertIsTrue(!rs1.isFiltering);
    375a:	8d a9       	ldd	r24, Y+53	; 0x35
    375c:	88 23       	and	r24, r24
    375e:	31 f0       	breq	.+12     	; 0x376c <testComputeRequiredTRVPercentOpen()+0x362>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	6d ea       	ldi	r22, 0xAD	; 173
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
    376c:	87 e0       	ldi	r24, 0x07	; 7
    376e:	8c 8b       	std	Y+20, r24	; 0x14
    3770:	8a e0       	ldi	r24, 0x0A	; 10
    3772:	8d 8b       	std	Y+21, r24	; 0x15
    3774:	84 e6       	ldi	r24, 0x64	; 100
    3776:	8e 8b       	std	Y+22, r24	; 0x16
    3778:	1f 8a       	std	Y+23, r1	; 0x17
    377a:	18 8e       	std	Y+24, r1	; 0x18
    377c:	19 8e       	std	Y+25, r1	; 0x19
    377e:	1a 8e       	std	Y+26, r1	; 0x1a
    { setReferenceTemperatures(realTempC16); }
    3780:	f4 e1       	ldi	r31, 0x14	; 20
    3782:	8f 2e       	mov	r8, r31
    3784:	91 2c       	mov	r9, r1
    3786:	8c 0e       	add	r8, r28
    3788:	9d 1e       	adc	r9, r29
    378a:	c4 01       	movw	r24, r8
    378c:	60 e4       	ldi	r22, 0x40	; 64
    378e:	76 e0       	ldi	r23, 0x06	; 6
    3790:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ModelledRadValveInputState::setReferenceTemperatures(int)>
  // ENERGY SAVING RULE TEST (TODO-442 2a: "Setback in WARM mode must happen in dark (quick response) or long vacant room.")
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
      //AmbLight._TEST_set_multi_((j != 0) ? 1023 : 0, j != 0);
    // ENERGY SAVING RULE TEST (TODO-442 2a: "Setback in WARM mode must happen in dark (quick response) or long vacant room.")
    ModelledRadValveInputState is3(100<<4);
    is3.targetTempC = WARM;
    3794:	82 e1       	ldi	r24, 0x12	; 18
    3796:	8c 8b       	std	Y+20, r24	; 0x14
    3798:	ee ef       	ldi	r30, 0xFE	; 254
    379a:	ce 2e       	mov	r12, r30
    379c:	ef ef       	ldi	r30, 0xFF	; 255
    379e:	de 2e       	mov	r13, r30
    37a0:	3e 01       	movw	r6, r28
    37a2:	08 94       	sec
    37a4:	61 1c       	adc	r6, r1
    37a6:	71 1c       	adc	r7, r1
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
    37a8:	7b e4       	ldi	r23, 0x4B	; 75
    37aa:	e7 2e       	mov	r14, r23
    37ac:	f1 2c       	mov	r15, r1
    37ae:	ec 0e       	add	r14, r28
    37b0:	fd 1e       	adc	r15, r29
//DEBUG_SERIAL_PRINT(valvePCOpen);
//DEBUG_SERIAL_PRINTLN();
          AssertIsTrue((offset < 0) ? (valvePCOpen > 0) : (0 == valvePCOpen));
          // Where adjusted reference temperature is (well) above target, valve should be driven off.
          ModelledRadValveState rs3b;
          valvePCOpen = 100;
    37b2:	8e 01       	movw	r16, r28
    37b4:	0e 59       	subi	r16, 0x9E	; 158
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	64 e6       	ldi	r22, 0x64	; 100
    37ba:	56 2e       	mov	r5, r22
    37bc:	a4 c0       	rjmp	.+328    	; 0x3906 <testComputeRequiredTRVPercentOpen()+0x4fc>
    37be:	8c 89       	ldd	r24, Y+20	; 0x14
        {
#if defined(ALLOW_SOFT_SETBACK)
        is3.softSetback = (0 != s);
#endif
        // Other than in the proportional range, valve should unconditionally be driven off/on by gross temperature error.
        if(0 != offset)
    37c0:	c1 14       	cp	r12, r1
    37c2:	d1 04       	cpc	r13, r1
    37c4:	09 f4       	brne	.+2      	; 0x37c8 <testComputeRequiredTRVPercentOpen()+0x3be>
    37c6:	4b c0       	rjmp	.+150    	; 0x385e <testComputeRequiredTRVPercentOpen()+0x454>
          {
          is3.refTempC16 = (is3.targetTempC + offset) << 4;
    37c8:	96 01       	movw	r18, r12
    37ca:	28 0f       	add	r18, r24
    37cc:	31 1d       	adc	r19, r1
    37ce:	c9 01       	movw	r24, r18
    37d0:	54 e0       	ldi	r21, 0x04	; 4
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	5a 95       	dec	r21
    37d8:	e1 f7       	brne	.-8      	; 0x37d2 <testComputeRequiredTRVPercentOpen()+0x3c8>
    37da:	9c 8f       	std	Y+28, r25	; 0x1c
    37dc:	8b 8f       	std	Y+27, r24	; 0x1b
    37de:	f8 01       	movw	r30, r16
    37e0:	10 82       	st	Z, r1
    37e2:	11 82       	std	Z+1, r1	; 0x01
    37e4:	12 82       	std	Z+2, r1	; 0x02
    37e6:	13 82       	std	Z+3, r1	; 0x03
    37e8:	84 81       	ldd	r24, Z+4	; 0x04
    37ea:	80 7f       	andi	r24, 0xF0	; 240
    37ec:	84 83       	std	Z+4, r24	; 0x04
    37ee:	15 82       	std	Z+5, r1	; 0x05
    37f0:	16 82       	std	Z+6, r1	; 0x06
          // Where adjusted reference temperature is (well) below target, valve should be driven on.
          ModelledRadValveState rs3a;
          valvePCOpen = 0;
    37f2:	19 82       	std	Y+1, r1	; 0x01
          rs3a.tick(valvePCOpen, is3);
    37f4:	c8 01       	movw	r24, r16
    37f6:	b3 01       	movw	r22, r6
    37f8:	a4 01       	movw	r20, r8
    37fa:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
//DEBUG_SERIAL_PRINT('@');
//DEBUG_SERIAL_PRINT(offset);
//DEBUG_SERIAL_PRINT(' ');
//DEBUG_SERIAL_PRINT(valvePCOpen);
//DEBUG_SERIAL_PRINTLN();
          AssertIsTrue((offset < 0) ? (valvePCOpen > 0) : (0 == valvePCOpen));
    37fe:	d7 fe       	sbrs	r13, 7
    3800:	04 c0       	rjmp	.+8      	; 0x380a <testComputeRequiredTRVPercentOpen()+0x400>
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	88 23       	and	r24, r24
    3806:	61 f4       	brne	.+24     	; 0x3820 <testComputeRequiredTRVPercentOpen()+0x416>
    3808:	05 c0       	rjmp	.+10     	; 0x3814 <testComputeRequiredTRVPercentOpen()+0x40a>
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	81 11       	cpse	r24, r1
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	88 23       	and	r24, r24
    3812:	31 f0       	breq	.+12     	; 0x3820 <testComputeRequiredTRVPercentOpen()+0x416>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	68 ed       	ldi	r22, 0xD8	; 216
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    3820:	f7 01       	movw	r30, r14
    3822:	10 82       	st	Z, r1
    3824:	11 82       	std	Z+1, r1	; 0x01
    3826:	12 82       	std	Z+2, r1	; 0x02
    3828:	13 82       	std	Z+3, r1	; 0x03
    382a:	84 81       	ldd	r24, Z+4	; 0x04
    382c:	80 7f       	andi	r24, 0xF0	; 240
    382e:	84 83       	std	Z+4, r24	; 0x04
    3830:	15 82       	std	Z+5, r1	; 0x05
    3832:	16 82       	std	Z+6, r1	; 0x06
          // Where adjusted reference temperature is (well) above target, valve should be driven off.
          ModelledRadValveState rs3b;
          valvePCOpen = 100;
    3834:	59 82       	std	Y+1, r5	; 0x01
          rs3b.tick(valvePCOpen, is3);
    3836:	c7 01       	movw	r24, r14
    3838:	b3 01       	movw	r22, r6
    383a:	a4 01       	movw	r20, r8
    383c:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
          AssertIsTrue((offset < 0) ? (100 == valvePCOpen) : (valvePCOpen < 100));
    3840:	d7 fe       	sbrs	r13, 7
    3842:	04 c0       	rjmp	.+8      	; 0x384c <testComputeRequiredTRVPercentOpen()+0x442>
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	84 36       	cpi	r24, 0x64	; 100
    3848:	29 f4       	brne	.+10     	; 0x3854 <testComputeRequiredTRVPercentOpen()+0x44a>
    384a:	4e c0       	rjmp	.+156    	; 0x38e8 <testComputeRequiredTRVPercentOpen()+0x4de>
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	84 36       	cpi	r24, 0x64	; 100
    3850:	08 f4       	brcc	.+2      	; 0x3854 <testComputeRequiredTRVPercentOpen()+0x44a>
    3852:	4a c0       	rjmp	.+148    	; 0x38e8 <testComputeRequiredTRVPercentOpen()+0x4de>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	6d ed       	ldi	r22, 0xDD	; 221
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	43 c0       	rjmp	.+134    	; 0x38e4 <testComputeRequiredTRVPercentOpen()+0x4da>
          }
        else
          {
          // Below the half way mark the valve should always be opened (from off), soft setback or not.
          is3.refTempC16 = (is3.targetTempC << 4) + 0x4;
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	44 e0       	ldi	r20, 0x04	; 4
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	4a 95       	dec	r20
    3868:	e1 f7       	brne	.-8      	; 0x3862 <testComputeRequiredTRVPercentOpen()+0x458>
    386a:	04 96       	adiw	r24, 0x04	; 4
    386c:	9c 8f       	std	Y+28, r25	; 0x1c
    386e:	8b 8f       	std	Y+27, r24	; 0x1b
    3870:	f7 01       	movw	r30, r14
    3872:	10 82       	st	Z, r1
    3874:	11 82       	std	Z+1, r1	; 0x01
    3876:	12 82       	std	Z+2, r1	; 0x02
    3878:	13 82       	std	Z+3, r1	; 0x03
    387a:	84 81       	ldd	r24, Z+4	; 0x04
    387c:	80 7f       	andi	r24, 0xF0	; 240
    387e:	84 83       	std	Z+4, r24	; 0x04
    3880:	15 82       	std	Z+5, r1	; 0x05
    3882:	16 82       	std	Z+6, r1	; 0x06
          ModelledRadValveState rs3c;
          valvePCOpen = 0;
    3884:	19 82       	std	Y+1, r1	; 0x01
          rs3c.tick(valvePCOpen, is3);
    3886:	c7 01       	movw	r24, r14
    3888:	b3 01       	movw	r22, r6
    388a:	a4 01       	movw	r20, r8
    388c:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
          AssertIsTrue(valvePCOpen > 0);
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	88 23       	and	r24, r24
    3894:	31 f4       	brne	.+12     	; 0x38a2 <testComputeRequiredTRVPercentOpen()+0x498>
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	66 ee       	ldi	r22, 0xE6	; 230
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
          // Above the half way mark the valve should only be opened without soft setback.
          is3.refTempC16 = (is3.targetTempC << 4) + 0xc;
    38a2:	8c 89       	ldd	r24, Y+20	; 0x14
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	34 e0       	ldi	r19, 0x04	; 4
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	3a 95       	dec	r19
    38ae:	e1 f7       	brne	.-8      	; 0x38a8 <testComputeRequiredTRVPercentOpen()+0x49e>
    38b0:	0c 96       	adiw	r24, 0x0c	; 12
    38b2:	9c 8f       	std	Y+28, r25	; 0x1c
    38b4:	8b 8f       	std	Y+27, r24	; 0x1b
    38b6:	f8 01       	movw	r30, r16
    38b8:	10 82       	st	Z, r1
    38ba:	11 82       	std	Z+1, r1	; 0x01
    38bc:	12 82       	std	Z+2, r1	; 0x02
    38be:	13 82       	std	Z+3, r1	; 0x03
    38c0:	84 81       	ldd	r24, Z+4	; 0x04
    38c2:	80 7f       	andi	r24, 0xF0	; 240
    38c4:	84 83       	std	Z+4, r24	; 0x04
    38c6:	15 82       	std	Z+5, r1	; 0x05
    38c8:	16 82       	std	Z+6, r1	; 0x06
          ModelledRadValveState rs3d;
          valvePCOpen = 0;
    38ca:	19 82       	std	Y+1, r1	; 0x01
          rs3d.tick(valvePCOpen, is3);
    38cc:	c8 01       	movw	r24, r16
    38ce:	b3 01       	movw	r22, r6
    38d0:	a4 01       	movw	r20, r8
    38d2:	0e 94 42 05 	call	0xa84	; 0xa84 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
#if 1 /* TODO-453: drift down soft by default */
          AssertIsTrue(0 == valvePCOpen);
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	88 23       	and	r24, r24
    38da:	31 f0       	breq	.+12     	; 0x38e8 <testComputeRequiredTRVPercentOpen()+0x4de>
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	6d ee       	ldi	r22, 0xED	; 237
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    is3.targetTempC = WARM;
    // Try a range of (whole-degree) offsets...
    for(int offset = -2; offset <= +2; ++offset)
      {
      // Try soft setback off and on.
      for(int s = 0; s < 2; ++s) 
    38e8:	08 94       	sec
    38ea:	a1 1c       	adc	r10, r1
    38ec:	b1 1c       	adc	r11, r1
    38ee:	f2 e0       	ldi	r31, 0x02	; 2
    38f0:	af 16       	cp	r10, r31
    38f2:	b1 04       	cpc	r11, r1
    38f4:	09 f0       	breq	.+2      	; 0x38f8 <testComputeRequiredTRVPercentOpen()+0x4ee>
    38f6:	63 cf       	rjmp	.-314    	; 0x37be <testComputeRequiredTRVPercentOpen()+0x3b4>
      //AmbLight._TEST_set_multi_((j != 0) ? 1023 : 0, j != 0);
    // ENERGY SAVING RULE TEST (TODO-442 2a: "Setback in WARM mode must happen in dark (quick response) or long vacant room.")
    ModelledRadValveInputState is3(100<<4);
    is3.targetTempC = WARM;
    // Try a range of (whole-degree) offsets...
    for(int offset = -2; offset <= +2; ++offset)
    38f8:	08 94       	sec
    38fa:	c1 1c       	adc	r12, r1
    38fc:	d1 1c       	adc	r13, r1
    38fe:	23 e0       	ldi	r18, 0x03	; 3
    3900:	c2 16       	cp	r12, r18
    3902:	d1 04       	cpc	r13, r1
    3904:	19 f0       	breq	.+6      	; 0x390c <testComputeRequiredTRVPercentOpen()+0x502>
    3906:	aa 24       	eor	r10, r10
    3908:	bb 24       	eor	r11, r11
    390a:	59 cf       	rjmp	.-334    	; 0x37be <testComputeRequiredTRVPercentOpen()+0x3b4>
#if defined(QUICK_DARK_SETBACK_IS_SOFT)

    // TODO
#endif
#endif
  }
    390c:	c8 58       	subi	r28, 0x88	; 136
    390e:	df 4f       	sbci	r29, 0xFF	; 255
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	df 90       	pop	r13
    3928:	cf 90       	pop	r12
    392a:	bf 90       	pop	r11
    392c:	af 90       	pop	r10
    392e:	9f 90       	pop	r9
    3930:	8f 90       	pop	r8
    3932:	7f 90       	pop	r7
    3934:	6f 90       	pop	r6
    3936:	5f 90       	pop	r5
    3938:	4f 90       	pop	r4
    393a:	08 95       	ret

0000393c <testTargetComputation()>:
2e) Setbacks should be targeted at times of expected low occupancy.
2f) Some setbacks should be possible in office environments with lights mainly or always on.

Starred items are tested.
*/
static void testTargetComputation()
    393c:	7f 92       	push	r7
    393e:	8f 92       	push	r8
    3940:	9f 92       	push	r9
    3942:	af 92       	push	r10
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTargetComputation");
    3956:	83 e9       	ldi	r24, 0x93	; 147
    3958:	91 e0       	ldi	r25, 0x01	; 1
    395a:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    395e:	bb 24       	eor	r11, r11
    3960:	00 e0       	ldi	r16, 0x00	; 0
    3962:	e4 e0       	ldi	r30, 0x04	; 4
    3964:	ce 2e       	mov	r12, r30
    3966:	d1 2c       	mov	r13, r1

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3968:	77 24       	eor	r7, r7
    396a:	7a 94       	dec	r7
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    396c:	74 e6       	ldi	r23, 0x64	; 100
    396e:	87 2e       	mov	r8, r23
    3970:	62 e3       	ldi	r22, 0x32	; 50
    3972:	96 2e       	mov	r9, r22
    3974:	52 e0       	ldi	r21, 0x02	; 2
    3976:	a5 2e       	mov	r10, r21
    3978:	40 c1       	rjmp	.+640    	; 0x3bfa <testTargetComputation()+0x2be>
  uint8_t maxEcoSetback = 0;
  uint8_t maxComSetback = 0;
  // Systematically work through multiple base temperatures, ending at no override.
  for(int i = _TEST_basetemp_override_MAX+1; --i >= 0; )
    {
    _TEST_set_basetemp_override((_TEST_basetemp_override)i);
    397a:	c6 01       	movw	r24, r12
    397c:	0e 94 47 03 	call	0x68e	; 0x68e <_TEST_set_basetemp_override(_TEST_basetemp_override)>
    3980:	42 e0       	ldi	r20, 0x02	; 2
    3982:	e4 2e       	mov	r14, r20
    3984:	f1 2c       	mov	r15, r1
    3986:	30 c1       	rjmp	.+608    	; 0x3be8 <testTargetComputation()+0x2ac>
     // Test at high and low light levels; j==0 implies dark (for a little while), j==1 implies light (for a little while).
     for(int j = 2; --j >= 0; )
#endif
      {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
      AmbLight._TEST_set_multi_((j != 0) ? 1023 : 0, j != 0, 15 + (randRNG8() & 0x7f));
    3988:	e1 14       	cp	r14, r1
    398a:	f1 04       	cpc	r15, r1
    398c:	19 f4       	brne	.+6      	; 0x3994 <testTargetComputation()+0x58>
    398e:	c0 e0       	ldi	r28, 0x00	; 0
    3990:	d0 e0       	ldi	r29, 0x00	; 0
    3992:	02 c0       	rjmp	.+4      	; 0x3998 <testTargetComputation()+0x5c>
    3994:	cf ef       	ldi	r28, 0xFF	; 255
    3996:	d3 e0       	ldi	r29, 0x03	; 3
    3998:	10 e0       	ldi	r17, 0x00	; 0
    399a:	e1 14       	cp	r14, r1
    399c:	f1 04       	cpc	r15, r1
    399e:	09 f0       	breq	.+2      	; 0x39a2 <testTargetComputation()+0x66>
    39a0:	11 e0       	ldi	r17, 0x01	; 1
    39a2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>

#ifdef UNIT_TESTS
    // Set new value(s) for unit test only.
    // Makes this more usable as a mock for testing other components.
    virtual void _TEST_set_multi_(uint16_t newRawValue, bool newRoomLitFlag, uint8_t newDarkTicks)
      { rawValue = newRawValue; value = newRawValue >> 2; isRoomLitFlag = newRoomLitFlag; darkTicks = newDarkTicks; }
    39a6:	d0 93 91 02 	sts	0x0291, r29
    39aa:	c0 93 90 02 	sts	0x0290, r28
    39ae:	d6 95       	lsr	r29
    39b0:	c7 95       	ror	r28
    39b2:	d6 95       	lsr	r29
    39b4:	c7 95       	ror	r28
    39b6:	c0 93 8f 02 	sts	0x028F, r28
    39ba:	10 93 92 02 	sts	0x0292, r17
    39be:	8f 77       	andi	r24, 0x7F	; 127
    39c0:	81 5f       	subi	r24, 0xF1	; 241
    39c2:	80 93 93 02 	sts	0x0293, r24
    39c6:	c4 e0       	ldi	r28, 0x04	; 4
    39c8:	d0 e0       	ldi	r29, 0x00	; 0
    39ca:	dc c0       	rjmp	.+440    	; 0x3b84 <testTargetComputation()+0x248>
#endif
      // Systematically work through all schedule states, ending at 0 (no override).
      for(int k = _TEST_schedule_override_MAX+1; --k >= 0; )
        {
        _TEST_set_schedule_override((_TEST_schedule_override)k);
    39cc:	ce 01       	movw	r24, r28
    39ce:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
        // Some basic invariants should always be met:
        //   * Both FROST and WARM target values legal.
        //   * WARM target never lower than FROST target.
        AssertIsTrue((getFROSTTargetC() >= MIN_TARGET_C) && (getFROSTTargetC() <= MAX_TARGET_C));
    39d2:	0e 94 85 03 	call	0x70a	; 0x70a <getFROSTTargetC()>
    39d6:	85 30       	cpi	r24, 0x05	; 5
    39d8:	20 f0       	brcs	.+8      	; 0x39e2 <testTargetComputation()+0xa6>
    39da:	0e 94 85 03 	call	0x70a	; 0x70a <getFROSTTargetC()>
    39de:	80 36       	cpi	r24, 0x60	; 96
    39e0:	30 f0       	brcs	.+12     	; 0x39ee <testTargetComputation()+0xb2>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	65 ee       	ldi	r22, 0xE5	; 229
    39e8:	71 e0       	ldi	r23, 0x01	; 1
    39ea:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
        AssertIsTrue((getWARMTargetC() >= MIN_TARGET_C) && (getWARMTargetC() <= MAX_TARGET_C));
    39ee:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    39f2:	85 30       	cpi	r24, 0x05	; 5
    39f4:	20 f0       	brcs	.+8      	; 0x39fe <testTargetComputation()+0xc2>
    39f6:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    39fa:	80 36       	cpi	r24, 0x60	; 96
    39fc:	30 f0       	brcs	.+12     	; 0x3a0a <testTargetComputation()+0xce>
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	66 ee       	ldi	r22, 0xE6	; 230
    3a04:	71 e0       	ldi	r23, 0x01	; 1
    3a06:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
        AssertIsTrue(getFROSTTargetC() <= getWARMTargetC());
    3a0a:	0e 94 85 03 	call	0x70a	; 0x70a <getFROSTTargetC()>
    3a0e:	18 2f       	mov	r17, r24
    3a10:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3a14:	81 17       	cp	r24, r17
    3a16:	30 f4       	brcc	.+12     	; 0x3a24 <testTargetComputation()+0xe8>
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	67 ee       	ldi	r22, 0xE7	; 231
    3a1e:	71 e0       	ldi	r23, 0x01	; 1
    3a20:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3a24:	10 92 40 02 	sts	0x0240, r1
    3a28:	10 92 3e 02 	sts	0x023E, r1
    3a2c:	10 92 3f 02 	sts	0x023F, r1
    3a30:	70 92 41 02 	sts	0x0241, r7
        // In FROST mode target temperature must stay at frost level once the room has been vacant for a while.
        // IE: pre-warming is disabled in long-vacant rooms as an energy-saving strategy.
        // Set to long long vacant and FROST mode.
//        Occupancy._TEST_set_vacH_(OccupancyTracker::longLongVacantHThrH+1);
        Occupancy.setHolidayMode();
        setWarmModeDebounced(false);
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
        NominalRadValve.computeTargetTemperature();
    3a3a:	83 e4       	ldi	r24, 0x43	; 67
    3a3c:	92 e0       	ldi	r25, 0x02	; 2
    3a3e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
        AssertIsEqual(getFROSTTargetC(), NominalRadValve.getTargetTempC());
    3a42:	0e 94 85 03 	call	0x70a	; 0x70a <getFROSTTargetC()>
    3a46:	60 91 46 02 	lds	r22, 0x0246
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	41 ef       	ldi	r20, 0xF1	; 241
    3a50:	51 e0       	ldi	r21, 0x01	; 1
    3a52:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
#endif
        // ENERGY SAVING RULE TEST (TODO-442 1b: "Never a higher pre-warm than WARM target.")
        // Check that in the the target temperature is never higher in FROST than WARM.
        // Perturb the other implicit parameters.
        Occupancy._TEST_set_(randRNG8NextBoolean());
    3a56:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as (just) unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
    3a5a:	88 23       	and	r24, r24
    3a5c:	39 f0       	breq	.+14     	; 0x3a6c <testTargetComputation()+0x130>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    3a5e:	80 92 3e 02 	sts	0x023E, r8
    3a62:	90 92 3f 02 	sts	0x023F, r9
    3a66:	a0 92 40 02 	sts	0x0240, r10
    3a6a:	06 c0       	rjmp	.+12     	; 0x3a78 <testTargetComputation()+0x13c>

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as (just) unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
    3a6c:	10 92 40 02 	sts	0x0240, r1
    3a70:	10 92 3e 02 	sts	0x023E, r1
    3a74:	10 92 3f 02 	sts	0x023F, r1
        setWarmModeDebounced(false);
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
        NominalRadValve.computeTargetTemperature();
    3a7e:	83 e4       	ldi	r24, 0x43	; 67
    3a80:	92 e0       	ldi	r25, 0x02	; 2
    3a82:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3a86:	10 91 46 02 	lds	r17, 0x0246
        const uint8_t tTF = NominalRadValve.getTargetTempC();
        setWarmModeDebounced(true);
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
        NominalRadValve.computeTargetTemperature();
    3a90:	83 e4       	ldi	r24, 0x43	; 67
    3a92:	92 e0       	ldi	r25, 0x02	; 2
    3a94:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
        const uint8_t tTW = NominalRadValve.getTargetTempC();
        AssertIsTrue(tTF <= tTW);
    3a98:	80 91 46 02 	lds	r24, 0x0246
    3a9c:	81 17       	cp	r24, r17
    3a9e:	30 f4       	brcc	.+12     	; 0x3aac <testTargetComputation()+0x170>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	6d ef       	ldi	r22, 0xFD	; 253
    3aa6:	71 e0       	ldi	r23, 0x01	; 1
    3aa8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
        // ENERGY SAVING RULE TEST (TODO-442 2a: "Setback in WARM mode must happen in dark (quick response) or long vacant room.")
        if(_soUT_off == k)
    3aac:	c1 30       	cpi	r28, 0x01	; 1
    3aae:	d1 05       	cpc	r29, r1
    3ab0:	c9 f5       	brne	.+114    	; 0x3b24 <testTargetComputation()+0x1e8>
          {
          setWarmModeDebounced(true);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    3ab8:	80 91 92 02 	lds	r24, 0x0292
          if(AmbLight.isRoomDark())
    3abc:	88 23       	and	r24, r24
    3abe:	b1 f4       	brne	.+44     	; 0x3aec <testTargetComputation()+0x1b0>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    3ac0:	80 92 3e 02 	sts	0x023E, r8
    3ac4:	90 92 3f 02 	sts	0x023F, r9
    3ac8:	a0 92 40 02 	sts	0x0240, r10
            {
            Occupancy.markAsOccupied();
            NominalRadValve.computeTargetTemperature();
    3acc:	83 e4       	ldi	r24, 0x43	; 67
    3ace:	92 e0       	ldi	r25, 0x02	; 2
    3ad0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3ad4:	10 91 46 02 	lds	r17, 0x0246
            AssertIsTrue(NominalRadValve.getTargetTempC() < getWARMTargetC()); // Temp must be set back (assumes FROST < WARM).
    3ad8:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3adc:	18 17       	cp	r17, r24
    3ade:	30 f0       	brcs	.+12     	; 0x3aec <testTargetComputation()+0x1b0>
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	66 e0       	ldi	r22, 0x06	; 6
    3ae6:	72 e0       	ldi	r23, 0x02	; 2
    3ae8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    3aec:	80 91 92 02 	lds	r24, 0x0292
            }
#if defined(OCCUPANCY_SUPPORT)
          if(!AmbLight.isRoomDark())
    3af0:	88 23       	and	r24, r24
    3af2:	c1 f0       	breq	.+48     	; 0x3b24 <testTargetComputation()+0x1e8>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3af4:	10 92 40 02 	sts	0x0240, r1
    3af8:	10 92 3e 02 	sts	0x023E, r1
    3afc:	10 92 3f 02 	sts	0x023F, r1
    3b00:	70 92 41 02 	sts	0x0241, r7
            {
            Occupancy.setHolidayMode();
            NominalRadValve.computeTargetTemperature();
    3b04:	83 e4       	ldi	r24, 0x43	; 67
    3b06:	92 e0       	ldi	r25, 0x02	; 2
    3b08:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3b0c:	10 91 46 02 	lds	r17, 0x0246
            AssertIsTrue(NominalRadValve.getTargetTempC() < getWARMTargetC()); // Temp must be set back (assumes FROST < WARM).
    3b10:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3b14:	18 17       	cp	r17, r24
    3b16:	30 f0       	brcs	.+12     	; 0x3b24 <testTargetComputation()+0x1e8>
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	6d e0       	ldi	r22, 0x0D	; 13
    3b1e:	72 e0       	ldi	r23, 0x02	; 2
    3b20:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
            }
#endif
          }

        // Try to discover/force maximum WARM-mode setback with dark and long vacancy.
        setWarmModeDebounced(true);
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3b2a:	10 92 40 02 	sts	0x0240, r1
    3b2e:	10 92 3e 02 	sts	0x023E, r1
    3b32:	10 92 3f 02 	sts	0x023F, r1
    3b36:	70 92 41 02 	sts	0x0241, r7
#ifdef OCCUPANCY_SUPPORT
//        Occupancy._TEST_set_vacH_(OccupancyTracker::longLongVacantHThrH+1);
        Occupancy.setHolidayMode();
#endif
        NominalRadValve.computeTargetTemperature();
    3b3a:	83 e4       	ldi	r24, 0x43	; 67
    3b3c:	92 e0       	ldi	r25, 0x02	; 2
    3b3e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
        int8_t setback = getWARMTargetC() - NominalRadValve.getTargetTempC();
    3b42:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3b46:	90 91 46 02 	lds	r25, 0x0246
    3b4a:	18 2f       	mov	r17, r24
    3b4c:	19 1b       	sub	r17, r25
        if(setback > 0)
    3b4e:	11 16       	cp	r1, r17
    3b50:	cc f4       	brge	.+50     	; 0x3b84 <testTargetComputation()+0x248>
DEBUG_SERIAL_PRINT(setback);
DEBUG_SERIAL_PRINT(hasEcoBias() ? F(" eco") : F(" com"));
if(AmbLight.isRoomDark()) { DEBUG_SERIAL_PRINT(F(" isDark")); }
DEBUG_SERIAL_PRINTLN();
#endif
          if(hasEcoBias()) { maxEcoSetback = max(maxEcoSetback, setback); }
    3b52:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
    3b56:	21 2f       	mov	r18, r17
    3b58:	33 27       	eor	r19, r19
    3b5a:	27 fd       	sbrc	r18, 7
    3b5c:	30 95       	com	r19
    3b5e:	88 23       	and	r24, r24
    3b60:	49 f0       	breq	.+18     	; 0x3b74 <testTargetComputation()+0x238>
    3b62:	c9 01       	movw	r24, r18
    3b64:	2b 2d       	mov	r18, r11
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	82 17       	cp	r24, r18
    3b6a:	93 07       	cpc	r25, r19
    3b6c:	0c f4       	brge	.+2      	; 0x3b70 <testTargetComputation()+0x234>
    3b6e:	c9 01       	movw	r24, r18
    3b70:	b8 2e       	mov	r11, r24
    3b72:	08 c0       	rjmp	.+16     	; 0x3b84 <testTargetComputation()+0x248>
          else { maxComSetback = max(maxComSetback, setback); }
    3b74:	c9 01       	movw	r24, r18
    3b76:	20 2f       	mov	r18, r16
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	82 17       	cp	r24, r18
    3b7c:	93 07       	cpc	r25, r19
    3b7e:	0c f4       	brge	.+2      	; 0x3b82 <testTargetComputation()+0x246>
    3b80:	c9 01       	movw	r24, r18
    3b82:	08 2f       	mov	r16, r24
      {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
      AmbLight._TEST_set_multi_((j != 0) ? 1023 : 0, j != 0, 15 + (randRNG8() & 0x7f));
#endif
      // Systematically work through all schedule states, ending at 0 (no override).
      for(int k = _TEST_schedule_override_MAX+1; --k >= 0; )
    3b84:	21 97       	sbiw	r28, 0x01	; 1
    3b86:	8f ef       	ldi	r24, 0xFF	; 255
    3b88:	cf 3f       	cpi	r28, 0xFF	; 255
    3b8a:	d8 07       	cpc	r29, r24
    3b8c:	09 f0       	breq	.+2      	; 0x3b90 <testTargetComputation()+0x254>
    3b8e:	1e cf       	rjmp	.-452    	; 0x39cc <testTargetComputation()+0x90>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    3b90:	80 92 3e 02 	sts	0x023E, r8
    3b94:	90 92 3f 02 	sts	0x023F, r9
    3b98:	a0 92 40 02 	sts	0x0240, r10
      // ENERGY SAVING RULE TEST (TODO-442 1c: "Prewarm temperature must be set back from normal WARM target.")
#ifdef OCCUPANCY_SUPPORT
//      Occupancy._TEST_set_vacH_(randRNG8() % OccupancyTracker::longVacantHThrH); // Mark occupied or at least not long vacant.
      Occupancy.markAsOccupied(); // Mark occupied or at least not long vacant.
#endif
      setWarmModeDebounced(false);
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
      _TEST_set_schedule_override(_soUT_soon);
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
      NominalRadValve.computeTargetTemperature();
    3baa:	83 e4       	ldi	r24, 0x43	; 67
    3bac:	92 e0       	ldi	r25, 0x02	; 2
    3bae:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3bb2:	10 91 46 02 	lds	r17, 0x0246
      const uint8_t tTpw = NominalRadValve.getTargetTempC();
      _TEST_set_schedule_override(_soUT_now);
    3bb6:	83 e0       	ldi	r24, 0x03	; 3
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
      setWarmModeDebounced(true);
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
      NominalRadValve.computeTargetTemperature();
    3bc4:	83 e4       	ldi	r24, 0x43	; 67
    3bc6:	92 e0       	ldi	r25, 0x02	; 2
    3bc8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ModelledRadValve::computeTargetTemperature()>
      const uint8_t tTw = NominalRadValve.getTargetTempC();
      AssertIsTrue(tTpw < tTw);
    3bcc:	80 91 46 02 	lds	r24, 0x0246
    3bd0:	18 17       	cp	r17, r24
    3bd2:	30 f0       	brcs	.+12     	; 0x3be0 <testTargetComputation()+0x2a4>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	65 e3       	ldi	r22, 0x35	; 53
    3bda:	72 e0       	ldi	r23, 0x02	; 2
    3bdc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
      _TEST_set_schedule_override(_soUT_normal); // Override off...
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
  for(int i = _TEST_basetemp_override_MAX+1; --i >= 0; )
    {
    _TEST_set_basetemp_override((_TEST_basetemp_override)i);
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
     // Test at high and low light levels; j==0 implies dark (for a little while), j==1 implies light (for a little while).
     for(int j = 2; --j >= 0; )
    3be8:	08 94       	sec
    3bea:	e1 08       	sbc	r14, r1
    3bec:	f1 08       	sbc	r15, r1
    3bee:	8f ef       	ldi	r24, 0xFF	; 255
    3bf0:	e8 16       	cp	r14, r24
    3bf2:	8f ef       	ldi	r24, 0xFF	; 255
    3bf4:	f8 06       	cpc	r15, r24
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <testTargetComputation()+0x2be>
    3bf8:	c7 ce       	rjmp	.-626    	; 0x3988 <testTargetComputation()+0x4c>
  //   * light
  //   * schedule activation
  uint8_t maxEcoSetback = 0;
  uint8_t maxComSetback = 0;
  // Systematically work through multiple base temperatures, ending at no override.
  for(int i = _TEST_basetemp_override_MAX+1; --i >= 0; )
    3bfa:	08 94       	sec
    3bfc:	c1 08       	sbc	r12, r1
    3bfe:	d1 08       	sbc	r13, r1
    3c00:	8f ef       	ldi	r24, 0xFF	; 255
    3c02:	c8 16       	cp	r12, r24
    3c04:	8f ef       	ldi	r24, 0xFF	; 255
    3c06:	d8 06       	cpc	r13, r24
    3c08:	09 f0       	breq	.+2      	; 0x3c0c <testTargetComputation()+0x2d0>
    3c0a:	b7 ce       	rjmp	.-658    	; 0x397a <testTargetComputation()+0x3e>
      _TEST_set_schedule_override(_soUT_normal); // Override off...
      }
    }

  // ENERGY SAVING RULE TEST (TODO-442 2b: "Setbacks of up to FULL (3C) must be possible in full eco mode.")
  AssertIsTrue(maxEcoSetback >= SETBACK_FULL);
    3c0c:	82 e0       	ldi	r24, 0x02	; 2
    3c0e:	8b 15       	cp	r24, r11
    3c10:	30 f0       	brcs	.+12     	; 0x3c1e <testTargetComputation()+0x2e2>
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	6b e3       	ldi	r22, 0x3B	; 59
    3c18:	72 e0       	ldi	r23, 0x02	; 2
    3c1a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // ENERGY SAVING RULE TEST (TODO-442 2c: "Setbacks are at most 2C in comfort mode (but there is a setback).")
  AssertIsTrue(maxComSetback > 0);
    3c1e:	00 23       	and	r16, r16
    3c20:	29 f4       	brne	.+10     	; 0x3c2c <testTargetComputation()+0x2f0>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	6d e3       	ldi	r22, 0x3D	; 61
    3c28:	72 e0       	ldi	r23, 0x02	; 2
    3c2a:	06 c0       	rjmp	.+12     	; 0x3c38 <testTargetComputation()+0x2fc>
  AssertIsTrue(maxComSetback <= 2);
    3c2c:	03 30       	cpi	r16, 0x03	; 3
    3c2e:	30 f0       	brcs	.+12     	; 0x3c3c <testTargetComputation()+0x300>
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	6e e3       	ldi	r22, 0x3E	; 62
    3c36:	72 e0       	ldi	r23, 0x02	; 2
    3c38:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  }
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	ff 90       	pop	r15
    3c46:	ef 90       	pop	r14
    3c48:	df 90       	pop	r13
    3c4a:	cf 90       	pop	r12
    3c4c:	bf 90       	pop	r11
    3c4e:	af 90       	pop	r10
    3c50:	9f 90       	pop	r9
    3c52:	8f 90       	pop	r8
    3c54:	7f 90       	pop	r7
    3c56:	08 95       	ret

00003c58 <testSensorMocking()>:


// Test self-mocking of sensor modules (and others) to facilitate other unit tests. 
static void testSensorMocking()
    3c58:	df 92       	push	r13
    3c5a:	ef 92       	push	r14
    3c5c:	ff 92       	push	r15
    3c5e:	0f 93       	push	r16
    3c60:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSensorMocking");
    3c62:	89 ea       	ldi	r24, 0xA9	; 169
    3c64:	91 e0       	ldi	r25, 0x01	; 1
    3c66:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    3c6a:	dd 24       	eor	r13, r13
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Ambient light
  for(uint8_t i = 0; i < 2; ++i)
    {
    const uint8_t nal = randRNG8();
    3c6c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    3c70:	f8 2e       	mov	r15, r24
    const bool nil = randRNG8NextBoolean();
    3c72:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    3c76:	e8 2e       	mov	r14, r24
    AmbLight._TEST_set_multi_(((uint16_t)nal)<<2, nil, randRNG8());
    3c78:	0f 2d       	mov	r16, r15
    3c7a:	10 e0       	ldi	r17, 0x00	; 0
    3c7c:	00 0f       	add	r16, r16
    3c7e:	11 1f       	adc	r17, r17
    3c80:	00 0f       	add	r16, r16
    3c82:	11 1f       	adc	r17, r17
    3c84:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>

#ifdef UNIT_TESTS
    // Set new value(s) for unit test only.
    // Makes this more usable as a mock for testing other components.
    virtual void _TEST_set_multi_(uint16_t newRawValue, bool newRoomLitFlag, uint8_t newDarkTicks)
      { rawValue = newRawValue; value = newRawValue >> 2; isRoomLitFlag = newRoomLitFlag; darkTicks = newDarkTicks; }
    3c88:	10 93 91 02 	sts	0x0291, r17
    3c8c:	00 93 90 02 	sts	0x0290, r16
    3c90:	16 95       	lsr	r17
    3c92:	07 95       	ror	r16
    3c94:	16 95       	lsr	r17
    3c96:	07 95       	ror	r16
    3c98:	00 93 8f 02 	sts	0x028F, r16
    3c9c:	e0 92 92 02 	sts	0x0292, r14
    3ca0:	80 93 93 02 	sts	0x0293, r24
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    3ca4:	60 91 8f 02 	lds	r22, 0x028F
    AssertIsEqual(nal, AmbLight.get());
    3ca8:	8f 2d       	mov	r24, r15
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	70 e0       	ldi	r23, 0x00	; 0
    3cae:	4d e4       	ldi	r20, 0x4D	; 77
    3cb0:	52 e0       	ldi	r21, 0x02	; 2
    3cb2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    3cb6:	80 91 92 02 	lds	r24, 0x0292
    AssertIsTrue(nil == AmbLight.isRoomLit());
    3cba:	e8 16       	cp	r14, r24
    3cbc:	31 f0       	breq	.+12     	; 0x3cca <testSensorMocking()+0x72>
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	6e e4       	ldi	r22, 0x4E	; 78
    3cc4:	72 e0       	ldi	r23, 0x02	; 2
    3cc6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    const uint8_t nal2 = randRNG8();
    3cca:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    // Set new value for unit test only.
    // May be just enough to allow get() to see the value for unit tests,
    // but will not deal with other aspects of sensor state.
    // Any call to read() or other mutators may overwrite/clear state that this sets.
    virtual void _TEST_set_(const uint8_t newValue)
      { value = newValue; }
    3cce:	80 93 8f 02 	sts	0x028F, r24
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    3cd2:	60 91 8f 02 	lds	r22, 0x028F
    AmbLight._TEST_set_(nal2);
    AssertIsEqual(nal2, AmbLight.get());
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	41 e5       	ldi	r20, 0x51	; 81
    3cdc:	52 e0       	ldi	r21, 0x02	; 2
    3cde:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
static void testSensorMocking()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSensorMocking");
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Ambient light
  for(uint8_t i = 0; i < 2; ++i)
    3ce2:	d3 94       	inc	r13
    3ce4:	82 e0       	ldi	r24, 0x02	; 2
    3ce6:	d8 16       	cp	r13, r24
    3ce8:	09 f6       	brne	.-126    	; 0x3c6c <testSensorMocking()+0x14>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3cea:	10 92 40 02 	sts	0x0240, r1
    3cee:	10 92 3e 02 	sts	0x023E, r1
    3cf2:	10 92 3f 02 	sts	0x023F, r1
    3cf6:	8f ef       	ldi	r24, 0xFF	; 255
    3cf8:	80 93 41 02 	sts	0x0241, r24
    3cfc:	60 91 3e 02 	lds	r22, 0x023E
#ifdef OCCUPANCY_SUPPORT
  // Occupancy
//  const uint8_t vacH = randRNG8() | 1; // Ensure non-zero.
//  Occupancy._TEST_set_vacH_(vacH);
  Occupancy.setHolidayMode();
  AssertIsEqual(0, Occupancy.get());
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	70 e0       	ldi	r23, 0x00	; 0
    3d06:	49 e5       	ldi	r20, 0x59	; 89
    3d08:	52 e0       	ldi	r21, 0x02	; 2
    3d0a:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    3d0e:	80 91 3e 02 	lds	r24, 0x023E
    3d12:	88 23       	and	r24, r24
    3d14:	19 f0       	breq	.+6      	; 0x3d1c <testSensorMocking()+0xc4>
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	04 c0       	rjmp	.+8      	; 0x3d24 <testSensorMocking()+0xcc>
    3d1c:	80 91 41 02 	lds	r24, 0x0241
    3d20:	68 2f       	mov	r22, r24
    3d22:	70 e0       	ldi	r23, 0x00	; 0
  AssertIsEqual(255, Occupancy.getVacancyH());
    3d24:	8f ef       	ldi	r24, 0xFF	; 255
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	4a e5       	ldi	r20, 0x5A	; 90
    3d2a:	52 e0       	ldi	r21, 0x02	; 2
    3d2c:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    3d30:	80 91 3f 02 	lds	r24, 0x023F
  AssertIsTrue(Occupancy.isLikelyUnoccupied());
    3d34:	88 23       	and	r24, r24
    3d36:	31 f0       	breq	.+12     	; 0x3d44 <testSensorMocking()+0xec>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	6b e5       	ldi	r22, 0x5B	; 91
    3d3e:	72 e0       	ldi	r23, 0x02	; 2
    3d40:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    3d44:	84 e6       	ldi	r24, 0x64	; 100
    3d46:	80 93 3e 02 	sts	0x023E, r24
    3d4a:	82 e3       	ldi	r24, 0x32	; 50
    3d4c:	80 93 3f 02 	sts	0x023F, r24
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	80 93 40 02 	sts	0x0240, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    3d56:	80 91 3e 02 	lds	r24, 0x023E
    3d5a:	88 23       	and	r24, r24
    3d5c:	19 f0       	breq	.+6      	; 0x3d64 <testSensorMocking()+0x10c>
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	04 c0       	rjmp	.+8      	; 0x3d6c <testSensorMocking()+0x114>
    3d64:	80 91 41 02 	lds	r24, 0x0241
    3d68:	68 2f       	mov	r22, r24
    3d6a:	70 e0       	ldi	r23, 0x00	; 0
//    Occupancy._TEST_set_vacH_(0);
  Occupancy._TEST_set_(true);
  AssertIsEqual(0, Occupancy.getVacancyH());
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	4e e5       	ldi	r20, 0x5E	; 94
    3d72:	52 e0       	ldi	r21, 0x02	; 2
    3d74:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
    3d78:	80 91 3e 02 	lds	r24, 0x023E
  AssertIsTrue(0 != Occupancy.get());
    3d7c:	88 23       	and	r24, r24
    3d7e:	31 f4       	brne	.+12     	; 0x3d8c <testSensorMocking()+0x134>
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	6f e5       	ldi	r22, 0x5F	; 95
    3d86:	72 e0       	ldi	r23, 0x02	; 2
    3d88:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    3d8c:	80 91 3f 02 	lds	r24, 0x023F
  AssertIsTrue(Occupancy.isLikelyOccupied());
    3d90:	88 23       	and	r24, r24
    3d92:	31 f4       	brne	.+12     	; 0x3da0 <testSensorMocking()+0x148>
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	60 e6       	ldi	r22, 0x60	; 96
    3d9a:	72 e0       	ldi	r23, 0x02	; 2
    3d9c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#endif
  // Schedule
  _TEST_set_schedule_override(_soUT_now);
    3da0:	83 e0       	ldi	r24, 0x03	; 3
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
  AssertIsTrue(isAnySimpleScheduleSet());
    3da8:	0e 94 67 17 	call	0x2ece	; 0x2ece <isAnySimpleScheduleSet()>
    3dac:	88 23       	and	r24, r24
    3dae:	31 f4       	brne	.+12     	; 0x3dbc <testSensorMocking()+0x164>
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	64 e6       	ldi	r22, 0x64	; 100
    3db6:	72 e0       	ldi	r23, 0x02	; 2
    3db8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(isAnyScheduleOnWARMNow());
    3dbc:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <isAnyScheduleOnWARMNow()>
    3dc0:	88 23       	and	r24, r24
    3dc2:	31 f4       	brne	.+12     	; 0x3dd0 <testSensorMocking()+0x178>
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	65 e6       	ldi	r22, 0x65	; 101
    3dca:	72 e0       	ldi	r23, 0x02	; 2
    3dcc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMSoon());
    3dd0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <isAnyScheduleOnWARMSoon()>
    3dd4:	88 23       	and	r24, r24
    3dd6:	31 f0       	breq	.+12     	; 0x3de4 <testSensorMocking()+0x18c>
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	66 e6       	ldi	r22, 0x66	; 102
    3dde:	72 e0       	ldi	r23, 0x02	; 2
    3de0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  _TEST_set_schedule_override(_soUT_soon);
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
  AssertIsTrue(isAnySimpleScheduleSet());
    3dec:	0e 94 67 17 	call	0x2ece	; 0x2ece <isAnySimpleScheduleSet()>
    3df0:	88 23       	and	r24, r24
    3df2:	31 f4       	brne	.+12     	; 0x3e00 <testSensorMocking()+0x1a8>
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	68 e6       	ldi	r22, 0x68	; 104
    3dfa:	72 e0       	ldi	r23, 0x02	; 2
    3dfc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMNow());
    3e00:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <isAnyScheduleOnWARMNow()>
    3e04:	88 23       	and	r24, r24
    3e06:	31 f0       	breq	.+12     	; 0x3e14 <testSensorMocking()+0x1bc>
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	69 e6       	ldi	r22, 0x69	; 105
    3e0e:	72 e0       	ldi	r23, 0x02	; 2
    3e10:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(isAnyScheduleOnWARMSoon());
    3e14:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <isAnyScheduleOnWARMSoon()>
    3e18:	88 23       	and	r24, r24
    3e1a:	31 f4       	brne	.+12     	; 0x3e28 <testSensorMocking()+0x1d0>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	6a e6       	ldi	r22, 0x6A	; 106
    3e22:	72 e0       	ldi	r23, 0x02	; 2
    3e24:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  _TEST_set_schedule_override(_soUT_off);
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
  AssertIsTrue(!isAnySimpleScheduleSet());
    3e30:	0e 94 67 17 	call	0x2ece	; 0x2ece <isAnySimpleScheduleSet()>
    3e34:	88 23       	and	r24, r24
    3e36:	31 f0       	breq	.+12     	; 0x3e44 <testSensorMocking()+0x1ec>
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	6c e6       	ldi	r22, 0x6C	; 108
    3e3e:	72 e0       	ldi	r23, 0x02	; 2
    3e40:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMNow());
    3e44:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <isAnyScheduleOnWARMNow()>
    3e48:	88 23       	and	r24, r24
    3e4a:	31 f0       	breq	.+12     	; 0x3e58 <testSensorMocking()+0x200>
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	6d e6       	ldi	r22, 0x6D	; 109
    3e52:	72 e0       	ldi	r23, 0x02	; 2
    3e54:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMSoon());
    3e58:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <isAnyScheduleOnWARMSoon()>
    3e5c:	88 23       	and	r24, r24
    3e5e:	31 f0       	breq	.+12     	; 0x3e6c <testSensorMocking()+0x214>
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	6e e6       	ldi	r22, 0x6E	; 110
    3e66:	72 e0       	ldi	r23, 0x02	; 2
    3e68:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  _TEST_set_schedule_override(_soUT_normal); // Override off.
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_TEST_set_schedule_override(_TEST_schedule_override)>
  // Base temperature
  _TEST_set_basetemp_override(_btoUT_min);
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 47 03 	call	0x68e	; 0x68e <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  AssertIsTrue(hasEcoBias());
    3e7c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
    3e80:	88 23       	and	r24, r24
    3e82:	31 f4       	brne	.+12     	; 0x3e90 <testSensorMocking()+0x238>
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	62 e7       	ldi	r22, 0x72	; 114
    3e8a:	72 e0       	ldi	r23, 0x02	; 2
    3e8c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(getWARMTargetC() <= BIASECO_WARM);
    3e90:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3e94:	82 31       	cpi	r24, 0x12	; 18
    3e96:	30 f0       	brcs	.+12     	; 0x3ea4 <testSensorMocking()+0x24c>
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	63 e7       	ldi	r22, 0x73	; 115
    3e9e:	72 e0       	ldi	r23, 0x02	; 2
    3ea0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  _TEST_set_basetemp_override(_btoUT_mid);
    3ea4:	82 e0       	ldi	r24, 0x02	; 2
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	0e 94 47 03 	call	0x68e	; 0x68e <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  AssertIsTrue(hasEcoBias());
    3eac:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
    3eb0:	88 23       	and	r24, r24
    3eb2:	31 f4       	brne	.+12     	; 0x3ec0 <testSensorMocking()+0x268>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	65 e7       	ldi	r22, 0x75	; 117
    3eba:	72 e0       	ldi	r23, 0x02	; 2
    3ebc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(getWARMTargetC() > BIASECO_WARM);
    3ec0:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3ec4:	82 31       	cpi	r24, 0x12	; 18
    3ec6:	30 f4       	brcc	.+12     	; 0x3ed4 <testSensorMocking()+0x27c>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	66 e7       	ldi	r22, 0x76	; 118
    3ece:	72 e0       	ldi	r23, 0x02	; 2
    3ed0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(getWARMTargetC() < BIASCOM_WARM);
    3ed4:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3ed8:	85 31       	cpi	r24, 0x15	; 21
    3eda:	30 f0       	brcs	.+12     	; 0x3ee8 <testSensorMocking()+0x290>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	67 e7       	ldi	r22, 0x77	; 119
    3ee2:	72 e0       	ldi	r23, 0x02	; 2
    3ee4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  _TEST_set_basetemp_override(_btoUT_max);
    3ee8:	83 e0       	ldi	r24, 0x03	; 3
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 47 03 	call	0x68e	; 0x68e <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  AssertIsTrue(!hasEcoBias());
    3ef0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <hasEcoBias()>
    3ef4:	88 23       	and	r24, r24
    3ef6:	31 f0       	breq	.+12     	; 0x3f04 <testSensorMocking()+0x2ac>
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	69 e7       	ldi	r22, 0x79	; 121
    3efe:	72 e0       	ldi	r23, 0x02	; 2
    3f00:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(getWARMTargetC() >= BIASCOM_WARM);
    3f04:	0e 94 4c 03 	call	0x698	; 0x698 <getWARMTargetC()>
    3f08:	85 31       	cpi	r24, 0x15	; 21
    3f0a:	30 f4       	brcc	.+12     	; 0x3f18 <testSensorMocking()+0x2c0>
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	6a e7       	ldi	r22, 0x7A	; 122
    3f12:	72 e0       	ldi	r23, 0x02	; 2
    3f14:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  _TEST_set_basetemp_override(_btoUT_normal); // Override off.
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 47 03 	call	0x68e	; 0x68e <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  }
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	ff 90       	pop	r15
    3f26:	ef 90       	pop	r14
    3f28:	df 90       	pop	r13
    3f2a:	08 95       	ret

00003f2c <testModeControls()>:
  
// Test basic behaviour of system mode setting and some basic parameters.
static void testModeControls()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testModeControls");
    3f2c:	8b eb       	ldi	r24, 0xBB	; 187
    3f2e:	91 e0       	ldi	r25, 0x01	; 1
    3f30:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  AssertIsTrue(!(inBakeMode() && !inWarmMode())); // Check not in initial illegal combination.
    3f34:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    3f38:	88 23       	and	r24, r24
    3f3a:	51 f0       	breq	.+20     	; 0x3f50 <testModeControls()+0x24>
    3f3c:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    3f40:	88 23       	and	r24, r24
    3f42:	31 f4       	brne	.+12     	; 0x3f50 <testModeControls()+0x24>
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	62 e8       	ldi	r22, 0x82	; 130
    3f4a:	72 e0       	ldi	r23, 0x02	; 2
    3f4c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  setWarmModeDebounced(false);
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
  AssertIsTrue(!inWarmMode());
    3f56:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    3f5a:	88 23       	and	r24, r24
    3f5c:	31 f0       	breq	.+12     	; 0x3f6a <testModeControls()+0x3e>
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	64 e8       	ldi	r22, 0x84	; 132
    3f64:	72 e0       	ldi	r23, 0x02	; 2
    3f66:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!inBakeMode());
    3f6a:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    3f6e:	88 23       	and	r24, r24
    3f70:	31 f0       	breq	.+12     	; 0x3f7e <testModeControls()+0x52>
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	65 e8       	ldi	r22, 0x85	; 133
    3f78:	72 e0       	ldi	r23, 0x02	; 2
    3f7a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  setWarmModeDebounced(true);
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
  AssertIsTrue(inWarmMode());
    3f84:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    3f88:	88 23       	and	r24, r24
    3f8a:	31 f4       	brne	.+12     	; 0x3f98 <testModeControls()+0x6c>
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	67 e8       	ldi	r22, 0x87	; 135
    3f92:	72 e0       	ldi	r23, 0x02	; 2
    3f94:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!inBakeMode());
    3f98:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    3f9c:	88 23       	and	r24, r24
    3f9e:	31 f0       	breq	.+12     	; 0x3fac <testModeControls()+0x80>
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	68 e8       	ldi	r22, 0x88	; 136
    3fa6:	72 e0       	ldi	r23, 0x02	; 2
    3fa8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  setWarmModeDebounced(false);
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
  AssertIsTrue(!inWarmMode());
    3fb2:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    3fb6:	88 23       	and	r24, r24
    3fb8:	31 f0       	breq	.+12     	; 0x3fc6 <testModeControls()+0x9a>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	6a e8       	ldi	r22, 0x8A	; 138
    3fc0:	72 e0       	ldi	r23, 0x02	; 2
    3fc2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!inBakeMode());
    3fc6:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    3fca:	88 23       	and	r24, r24
    3fcc:	31 f0       	breq	.+12     	; 0x3fda <testModeControls()+0xae>
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	6b e8       	ldi	r22, 0x8B	; 139
    3fd4:	72 e0       	ldi	r23, 0x02	; 2
    3fd6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  startBakeDebounced();
    3fda:	0e 94 40 03 	call	0x680	; 0x680 <startBakeDebounced()>
  AssertIsTrue(inWarmMode());
    3fde:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    3fe2:	88 23       	and	r24, r24
    3fe4:	31 f4       	brne	.+12     	; 0x3ff2 <testModeControls()+0xc6>
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	6d e8       	ldi	r22, 0x8D	; 141
    3fec:	72 e0       	ldi	r23, 0x02	; 2
    3fee:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(inBakeMode());
    3ff2:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    3ff6:	88 23       	and	r24, r24
    3ff8:	31 f4       	brne	.+12     	; 0x4006 <testModeControls()+0xda>
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	6e e8       	ldi	r22, 0x8E	; 142
    4000:	72 e0       	ldi	r23, 0x02	; 2
    4002:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  cancelBakeDebounced();
    4006:	0e 94 3d 03 	call	0x67a	; 0x67a <cancelBakeDebounced()>
  AssertIsTrue(inWarmMode());
    400a:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    400e:	88 23       	and	r24, r24
    4010:	31 f4       	brne	.+12     	; 0x401e <testModeControls()+0xf2>
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	60 e9       	ldi	r22, 0x90	; 144
    4018:	72 e0       	ldi	r23, 0x02	; 2
    401a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!inBakeMode());
    401e:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    4022:	88 23       	and	r24, r24
    4024:	31 f0       	breq	.+12     	; 0x4032 <testModeControls()+0x106>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	61 e9       	ldi	r22, 0x91	; 145
    402c:	72 e0       	ldi	r23, 0x02	; 2
    402e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  setWarmModeDebounced(false);
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>
  AssertIsTrue(!inWarmMode());
    4038:	0e 94 2a 03 	call	0x654	; 0x654 <inWarmMode()>
    403c:	88 23       	and	r24, r24
    403e:	31 f0       	breq	.+12     	; 0x404c <testModeControls()+0x120>
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	63 e9       	ldi	r22, 0x93	; 147
    4046:	72 e0       	ldi	r23, 0x02	; 2
    4048:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!inBakeMode());
    404c:	0e 94 34 03 	call	0x668	; 0x668 <inBakeMode()>
    4050:	88 23       	and	r24, r24
    4052:	31 f0       	breq	.+12     	; 0x4060 <testModeControls()+0x134>
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	64 e9       	ldi	r22, 0x94	; 148
    405a:	72 e0       	ldi	r23, 0x02	; 2
    405c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    4060:	08 95       	ret

00004062 <testJSONStats()>:
    AssertIsTrue(tQ <= 6);
    }
  }

// Test handling of JSON stats.
static void testJSONStats()
    4062:	af 92       	push	r10
    4064:	bf 92       	push	r11
    4066:	cf 92       	push	r12
    4068:	df 92       	push	r13
    406a:	ef 92       	push	r14
    406c:	0f 93       	push	r16
    406e:	1f 93       	push	r17
    4070:	df 93       	push	r29
    4072:	cf 93       	push	r28
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	c1 55       	subi	r28, 0x51	; 81
    407a:	d0 40       	sbci	r29, 0x00	; 0
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	f8 94       	cli
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	cd bf       	out	0x3d, r28	; 61
  {
#if defined(ALLOW_JSON_OUTPUT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testJSONStats");
    4086:	83 e0       	ldi	r24, 0x03	; 3
    4088:	92 e0       	ldi	r25, 0x02	; 2
    408a:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	89 83       	std	Y+1, r24	; 0x01
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    4092:	1c 86       	std	Y+12, r1	; 0x0c
    4094:	1b 86       	std	Y+11, r1	; 0x0b
    4096:	91 e0       	ldi	r25, 0x01	; 1
    4098:	9d 87       	std	Y+13, r25	; 0x0d
    409a:	1e 86       	std	Y+14, r1	; 0x0e
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    409c:	18 8a       	std	Y+16, r1	; 0x10
    409e:	1f 86       	std	Y+15, r1	; 0x0f
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    40a0:	89 89       	ldd	r24, Y+17	; 0x11
    40a2:	8e 7f       	andi	r24, 0xFE	; 254
    40a4:	89 8b       	std	Y+17, r24	; 0x11
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    40a6:	1b 8a       	std	Y+19, r1	; 0x13
    40a8:	1a 8a       	std	Y+18, r1	; 0x12
    40aa:	9c 8b       	std	Y+20, r25	; 0x14
    40ac:	1d 8a       	std	Y+21, r1	; 0x15
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    40ae:	1f 8a       	std	Y+23, r1	; 0x17
    40b0:	1e 8a       	std	Y+22, r1	; 0x16
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    40b2:	88 8d       	ldd	r24, Y+24	; 0x18
    40b4:	8e 7f       	andi	r24, 0xFE	; 254
    40b6:	88 8f       	std	Y+24, r24	; 0x18
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    40b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ba:	80 7f       	andi	r24, 0xF0	; 240
    40bc:	8a 87       	std	Y+10, r24	; 0x0a

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    40be:	19 86       	std	Y+9, r1	; 0x09
    40c0:	18 86       	std	Y+8, r1	; 0x08
    40c2:	8f ef       	ldi	r24, 0xFF	; 255
    40c4:	8f 83       	std	Y+7, r24	; 0x07
    40c6:	8e 83       	std	Y+6, r24	; 0x06
    40c8:	8d 83       	std	Y+5, r24	; 0x05
    40ca:	1c 82       	std	Y+4, r1	; 0x04
    40cc:	ce 01       	movw	r24, r28
    40ce:	0b 96       	adiw	r24, 0x0b	; 11
    40d0:	9b 83       	std	Y+3, r25	; 0x03
    40d2:	8a 83       	std	Y+2, r24	; 0x02
    // If null (the default) then dynamically generate the system ID,
    // eg house code as two bytes of hex if set, else first two bytes of binary ID as hex.
    // The lifetime of the pointed to string must exceed that of this instance.
    bool setID(const char * const _id)
      {
      if(isValidKey(_id)) { id = _id; return(true); }
    40d4:	06 e2       	ldi	r16, 0x26	; 38
    40d6:	11 e0       	ldi	r17, 0x01	; 1
    40d8:	c8 01       	movw	r24, r16
    40da:	0e 94 a0 0c 	call	0x1940	; 0x1940 <isValidKey(char const*)>
    40de:	88 23       	and	r24, r24
    40e0:	11 f0       	breq	.+4      	; 0x40e6 <testJSONStats()+0x84>
    40e2:	19 87       	std	Y+9, r17	; 0x09
    40e4:	08 87       	std	Y+8, r16	; 0x08
  SimpleStatsRotation<2> ss1;
  ss1.setID("1234");
  AssertIsEqual(0, ss1.size());
    40e6:	6c 81       	ldd	r22, Y+4	; 0x04
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	70 e0       	ldi	r23, 0x00	; 0
    40ee:	46 eb       	ldi	r20, 0xB6	; 182
    40f0:	52 e0       	ldi	r21, 0x02	; 2
    40f2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  //AssertIsTrue(0 == ss1.writeJSON(NULL, randRNG8(), randRNG8(), randRNG8NextBoolean()));
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' and spare byte.
  // Create minimal JSON message with no data content. just the (supplied) ID.
  const uint8_t l1 = ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean());
    40f6:	b9 e1       	ldi	r27, 0x19	; 25
    40f8:	ab 2e       	mov	r10, r27
    40fa:	b1 2c       	mov	r11, r1
    40fc:	ac 0e       	add	r10, r28
    40fe:	bd 1e       	adc	r11, r29
    4100:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4104:	18 2f       	mov	r17, r24
    4106:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    410a:	08 2f       	mov	r16, r24
    410c:	ce 01       	movw	r24, r28
    410e:	01 96       	adiw	r24, 0x01	; 1
    4110:	b5 01       	movw	r22, r10
    4112:	49 e3       	ldi	r20, 0x39	; 57
    4114:	21 2f       	mov	r18, r17
    4116:	ee 24       	eor	r14, r14
    4118:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    411c:	68 2f       	mov	r22, r24
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
    411e:	8c e0       	ldi	r24, 0x0C	; 12
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	70 e0       	ldi	r23, 0x00	; 0
    4124:	4c eb       	ldi	r20, 0xBC	; 188
    4126:	52 e0       	ldi	r21, 0x02	; 2
    4128:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  const char PROGMEM *t1 = (const char PROGMEM *)F("{\"@\":\"1234\"}");
    412c:	c5 01       	movw	r24, r10
    412e:	66 ef       	ldi	r22, 0xF6	; 246
    4130:	71 e0       	ldi	r23, 0x01	; 1
    4132:	0e 94 7d 02 	call	0x4fa	; 0x4fa <strcmp_P>
  AssertIsTrue(0 == strcmp_P(buf, t1));
    4136:	89 2b       	or	r24, r25
    4138:	31 f0       	breq	.+12     	; 0x4146 <testJSONStats()+0xe4>
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	6e eb       	ldi	r22, 0xBE	; 190
    4140:	72 e0       	ldi	r23, 0x02	; 2
    4142:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    4146:	8a 85       	ldd	r24, Y+10	; 0x0a
    4148:	8e 7f       	andi	r24, 0xFE	; 254
    414a:	8a 87       	std	Y+10, r24	; 0x0a
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    414c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4150:	18 2f       	mov	r17, r24
    4152:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    4156:	08 2f       	mov	r16, r24
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	b5 01       	movw	r22, r10
    415e:	49 e3       	ldi	r20, 0x39	; 57
    4160:	21 2f       	mov	r18, r17
    4162:	ee 24       	eor	r14, r14
    4164:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    4168:	68 2f       	mov	r22, r24
    416a:	8c e0       	ldi	r24, 0x0C	; 12
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	70 e0       	ldi	r23, 0x00	; 0
    4170:	40 ec       	ldi	r20, 0xC0	; 192
    4172:	52 e0       	ldi	r21, 0x02	; 2
    4174:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' and spare byte.
  // Create minimal JSON message with no data content. just the (supplied) ID.
  const uint8_t l1 = ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean());
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
  const char PROGMEM *t1 = (const char PROGMEM *)F("{\"@\":\"1234\"}");
    4178:	ce 01       	movw	r24, r28
    417a:	49 96       	adiw	r24, 0x19	; 25
    417c:	66 ef       	ldi	r22, 0xF6	; 246
    417e:	71 e0       	ldi	r23, 0x01	; 1
    4180:	0e 94 7d 02 	call	0x4fa	; 0x4fa <strcmp_P>
  AssertIsTrue(0 == strcmp_P(buf, t1));
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
  AssertIsTrue(0 == strcmp_P(buf, t1));
    4184:	89 2b       	or	r24, r25
    4186:	31 f0       	breq	.+12     	; 0x4194 <testJSONStats()+0x132>
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	61 ec       	ldi	r22, 0xC1	; 193
    418e:	72 e0       	ldi	r23, 0x02	; 2
    4190:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    4194:	8a 85       	ldd	r24, Y+10	; 0x0a
    4196:	81 60       	ori	r24, 0x01	; 1
    4198:	8a 87       	std	Y+10, r24	; 0x0a
  // Check that count works.
  ss1.enableCount(true);
  AssertIsEqual(0, ss1.size());
    419a:	6c 81       	ldd	r22, Y+4	; 0x04
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	44 ec       	ldi	r20, 0xC4	; 196
    41a4:	52 e0       	ldi	r21, 0x02	; 2
    41a6:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(18, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    41aa:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    41ae:	18 2f       	mov	r17, r24
    41b0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    41b4:	08 2f       	mov	r16, r24
    41b6:	ce 01       	movw	r24, r28
    41b8:	01 96       	adiw	r24, 0x01	; 1
    41ba:	b5 01       	movw	r22, r10
    41bc:	49 e3       	ldi	r20, 0x39	; 57
    41be:	21 2f       	mov	r18, r17
    41c0:	ee 24       	eor	r14, r14
    41c2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    41c6:	68 2f       	mov	r22, r24
    41c8:	82 e1       	ldi	r24, 0x12	; 18
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	45 ec       	ldi	r20, 0xC5	; 197
    41d0:	52 e0       	ldi	r21, 0x02	; 2
    41d2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"+\":2}")));
    41d6:	ce 01       	movw	r24, r28
    41d8:	49 96       	adiw	r24, 0x19	; 25
    41da:	63 ee       	ldi	r22, 0xE3	; 227
    41dc:	71 e0       	ldi	r23, 0x01	; 1
    41de:	0e 94 7d 02 	call	0x4fa	; 0x4fa <strcmp_P>
    41e2:	89 2b       	or	r24, r25
    41e4:	31 f0       	breq	.+12     	; 0x41f2 <testJSONStats()+0x190>
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	67 ec       	ldi	r22, 0xC7	; 199
    41ec:	72 e0       	ldi	r23, 0x02	; 2
    41ee:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    41f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    41f4:	8e 7f       	andi	r24, 0xFE	; 254
    41f6:	8a 87       	std	Y+10, r24	; 0x0a
  // Turn count off for rest of tests.
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    41f8:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    41fc:	18 2f       	mov	r17, r24
    41fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    4202:	08 2f       	mov	r16, r24
    4204:	6e 01       	movw	r12, r28
    4206:	08 94       	sec
    4208:	c1 1c       	adc	r12, r1
    420a:	d1 1c       	adc	r13, r1
    420c:	c6 01       	movw	r24, r12
    420e:	b5 01       	movw	r22, r10
    4210:	49 e3       	ldi	r20, 0x39	; 57
    4212:	21 2f       	mov	r18, r17
    4214:	ee 24       	eor	r14, r14
    4216:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    421a:	68 2f       	mov	r22, r24
    421c:	8c e0       	ldi	r24, 0x0C	; 12
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	70 e0       	ldi	r23, 0x00	; 0
    4222:	4a ec       	ldi	r20, 0xCA	; 202
    4224:	52 e0       	ldi	r21, 0x02	; 2
    4226:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  // Check that removal of absent entry does nothing.
  AssertIsTrue(!ss1.remove("bogus"));
    422a:	c6 01       	movw	r24, r12
    422c:	6b e2       	ldi	r22, 0x2B	; 43
    422e:	71 e0       	ldi	r23, 0x01	; 1
    4230:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <SimpleStatsRotationBase::remove(char const*)>
    4234:	88 23       	and	r24, r24
    4236:	31 f0       	breq	.+12     	; 0x4244 <testJSONStats()+0x1e2>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	6c ec       	ldi	r22, 0xCC	; 204
    423e:	72 e0       	ldi	r23, 0x02	; 2
    4240:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsEqual(0, ss1.size());
    4244:	6c 81       	ldd	r22, Y+4	; 0x04
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	70 e0       	ldi	r23, 0x00	; 0
    424c:	4d ec       	ldi	r20, 0xCD	; 205
    424e:	52 e0       	ldi	r21, 0x02	; 2
    4250:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  // Check that new item can be added/put (with no/default properties).
  ss1.put("f1", 42);
    4254:	6e 01       	movw	r12, r28
    4256:	08 94       	sec
    4258:	c1 1c       	adc	r12, r1
    425a:	d1 1c       	adc	r13, r1
    425c:	c6 01       	movw	r24, r12
    425e:	61 e3       	ldi	r22, 0x31	; 49
    4260:	71 e0       	ldi	r23, 0x01	; 1
    4262:	4a e2       	ldi	r20, 0x2A	; 42
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <SimpleStatsRotationBase::put(char const*, int)>
  AssertIsEqual(1, ss1.size());
    426a:	6c 81       	ldd	r22, Y+4	; 0x04
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	40 ed       	ldi	r20, 0xD0	; 208
    4274:	52 e0       	ldi	r21, 0x02	; 2
    4276:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(20, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
    427a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    427e:	08 2f       	mov	r16, r24
    4280:	c6 01       	movw	r24, r12
    4282:	b5 01       	movw	r22, r10
    4284:	49 e3       	ldi	r20, 0x39	; 57
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	ee 24       	eor	r14, r14
    428a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    428e:	68 2f       	mov	r22, r24
    4290:	84 e1       	ldi	r24, 0x14	; 20
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	70 e0       	ldi	r23, 0x00	; 0
    4296:	41 ed       	ldi	r20, 0xD1	; 209
    4298:	52 e0       	ldi	r21, 0x02	; 2
    429a:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
#if 0 // Short of Flash space!
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":42}")));
#endif
  ss1.put("f1", -111);
    429e:	c6 01       	movw	r24, r12
    42a0:	61 e3       	ldi	r22, 0x31	; 49
    42a2:	71 e0       	ldi	r23, 0x01	; 1
    42a4:	41 e9       	ldi	r20, 0x91	; 145
    42a6:	5f ef       	ldi	r21, 0xFF	; 255
    42a8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <SimpleStatsRotationBase::put(char const*, int)>
  AssertIsEqual(1, ss1.size());
    42ac:	6c 81       	ldd	r22, Y+4	; 0x04
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	47 ed       	ldi	r20, 0xD7	; 215
    42b6:	52 e0       	ldi	r21, 0x02	; 2
    42b8:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(22, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
    42bc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    42c0:	08 2f       	mov	r16, r24
    42c2:	c6 01       	movw	r24, r12
    42c4:	b5 01       	movw	r22, r10
    42c6:	49 e3       	ldi	r20, 0x39	; 57
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    42ce:	68 2f       	mov	r22, r24
    42d0:	86 e1       	ldi	r24, 0x16	; 22
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	70 e0       	ldi	r23, 0x00	; 0
    42d6:	48 ed       	ldi	r20, 0xD8	; 216
    42d8:	52 e0       	ldi	r21, 0x02	; 2
    42da:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":-111}")));
    42de:	ce 01       	movw	r24, r28
    42e0:	49 96       	adiw	r24, 0x19	; 25
    42e2:	6c ec       	ldi	r22, 0xCC	; 204
    42e4:	71 e0       	ldi	r23, 0x01	; 1
    42e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <strcmp_P>
    42ea:	89 2b       	or	r24, r25
    42ec:	31 f0       	breq	.+12     	; 0x42fa <testJSONStats()+0x298>
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	69 ed       	ldi	r22, 0xD9	; 217
    42f4:	72 e0       	ldi	r23, 0x02	; 2
    42f6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#endif
  }
    42fa:	cf 5a       	subi	r28, 0xAF	; 175
    42fc:	df 4f       	sbci	r29, 0xFF	; 255
    42fe:	0f b6       	in	r0, 0x3f	; 63
    4300:	f8 94       	cli
    4302:	de bf       	out	0x3e, r29	; 62
    4304:	0f be       	out	0x3f, r0	; 63
    4306:	cd bf       	out	0x3d, r28	; 61
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	bf 90       	pop	r11
    4318:	af 90       	pop	r10
    431a:	08 95       	ret

0000431c <testJSONForTX()>:

// Test handling of JSON messages for transmission and reception.
// Includes bit-twiddling, CRC computation, and other error checking.
static void testJSONForTX()
    431c:	ff 92       	push	r15
    431e:	0f 93       	push	r16
    4320:	1f 93       	push	r17
    4322:	df 93       	push	r29
    4324:	cf 93       	push	r28
    4326:	cd b7       	in	r28, 0x3d	; 61
    4328:	de b7       	in	r29, 0x3e	; 62
    432a:	e9 97       	sbiw	r28, 0x39	; 57
    432c:	0f b6       	in	r0, 0x3f	; 63
    432e:	f8 94       	cli
    4330:	de bf       	out	0x3e, r29	; 62
    4332:	0f be       	out	0x3f, r0	; 63
    4334:	cd bf       	out	0x3d, r28	; 61
  {
#if defined(ALLOW_JSON_OUTPUT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testJSONForTX");
    4336:	8b e4       	ldi	r24, 0x4B	; 75
    4338:	92 e0       	ldi	r25, 0x02	; 2
    433a:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' or CRC + 0xff terminator.
  // Clear the buffer.
  memset(buf, 0, sizeof(buf));
    433e:	fe 01       	movw	r30, r28
    4340:	31 96       	adiw	r30, 0x01	; 1
    4342:	89 e3       	ldi	r24, 0x39	; 57
    4344:	df 01       	movw	r26, r30
    4346:	1d 92       	st	X+, r1
    4348:	8a 95       	dec	r24
    434a:	e9 f7       	brne	.-6      	; 0x4346 <testJSONForTX()+0x2a>
  // Fail sanity check on a completely empty buffer (zero-length string).
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    434c:	cf 01       	movw	r24, r30
    434e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    4352:	88 23       	and	r24, r24
    4354:	31 f0       	breq	.+12     	; 0x4362 <testJSONForTX()+0x46>
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	67 ee       	ldi	r22, 0xE7	; 231
    435c:	72 e0       	ldi	r23, 0x02	; 2
    435e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Fail sanity check on a few initially-plausible length-1 values.
  buf[0] = '{';
    4362:	8b e7       	ldi	r24, 0x7B	; 123
    4364:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    4366:	ce 01       	movw	r24, r28
    4368:	01 96       	adiw	r24, 0x01	; 1
    436a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    436e:	88 23       	and	r24, r24
    4370:	31 f0       	breq	.+12     	; 0x437e <testJSONForTX()+0x62>
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	6a ee       	ldi	r22, 0xEA	; 234
    4378:	72 e0       	ldi	r23, 0x02	; 2
    437a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  buf[0] = '}';
    437e:	8d e7       	ldi	r24, 0x7D	; 125
    4380:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    4382:	ce 01       	movw	r24, r28
    4384:	01 96       	adiw	r24, 0x01	; 1
    4386:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    438a:	88 23       	and	r24, r24
    438c:	31 f0       	breq	.+12     	; 0x439a <testJSONForTX()+0x7e>
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	6c ee       	ldi	r22, 0xEC	; 236
    4394:	72 e0       	ldi	r23, 0x02	; 2
    4396:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  buf[0] = '[';
    439a:	8b e5       	ldi	r24, 0x5B	; 91
    439c:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    439e:	ce 01       	movw	r24, r28
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    43a6:	88 23       	and	r24, r24
    43a8:	31 f0       	breq	.+12     	; 0x43b6 <testJSONForTX()+0x9a>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	6e ee       	ldi	r22, 0xEE	; 238
    43b0:	72 e0       	ldi	r23, 0x02	; 2
    43b2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  buf[0] = ']';
    43b6:	8d e5       	ldi	r24, 0x5D	; 93
    43b8:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    43ba:	ce 01       	movw	r24, r28
    43bc:	01 96       	adiw	r24, 0x01	; 1
    43be:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    43c2:	88 23       	and	r24, r24
    43c4:	31 f0       	breq	.+12     	; 0x43d2 <testJSONForTX()+0xb6>
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	60 ef       	ldi	r22, 0xF0	; 240
    43cc:	72 e0       	ldi	r23, 0x02	; 2
    43ce:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  buf[0] = ' ';
    43d2:	80 e2       	ldi	r24, 0x20	; 32
    43d4:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    43d6:	ce 01       	movw	r24, r28
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    43de:	88 23       	and	r24, r24
    43e0:	31 f0       	breq	.+12     	; 0x43ee <testJSONForTX()+0xd2>
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	62 ef       	ldi	r22, 0xF2	; 242
    43e8:	72 e0       	ldi	r23, 0x02	; 2
    43ea:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Fail sanity check with already-adjusted (minimal) nessage.
  buf[0] = '{';
    43ee:	8b e7       	ldi	r24, 0x7B	; 123
    43f0:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = ('}' | 0x80);
    43f2:	8d ef       	ldi	r24, 0xFD	; 253
    43f4:	8a 83       	std	Y+2, r24	; 0x02
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    43f6:	ce 01       	movw	r24, r28
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    43fe:	88 23       	and	r24, r24
    4400:	31 f0       	breq	.+12     	; 0x440e <testJSONForTX()+0xf2>
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	66 ef       	ldi	r22, 0xF6	; 246
    4408:	72 e0       	ldi	r23, 0x02	; 2
    440a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Minimal correct messaage should pass.
  buf[0] = '{';
    440e:	8b e7       	ldi	r24, 0x7B	; 123
    4410:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = '}';
    4412:	8d e7       	ldi	r24, 0x7D	; 125
    4414:	8a 83       	std	Y+2, r24	; 0x02
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    4416:	ce 01       	movw	r24, r28
    4418:	01 96       	adiw	r24, 0x01	; 1
    441a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    441e:	88 23       	and	r24, r24
    4420:	31 f4       	brne	.+12     	; 0x442e <testJSONForTX()+0x112>
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	6a ef       	ldi	r22, 0xFA	; 250
    4428:	72 e0       	ldi	r23, 0x02	; 2
    442a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Try a longer valid trivial message.
  strcpy_P(buf, (const char PROGMEM *)F("{  }"));
    442e:	8e 01       	movw	r16, r28
    4430:	0f 5f       	subi	r16, 0xFF	; 255
    4432:	1f 4f       	sbci	r17, 0xFF	; 255
    4434:	c8 01       	movw	r24, r16
    4436:	66 e4       	ldi	r22, 0x46	; 70
    4438:	72 e0       	ldi	r23, 0x02	; 2
    443a:	0e 94 86 02 	call	0x50c	; 0x50c <strcpy_P>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    443e:	c8 01       	movw	r24, r16
    4440:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    4444:	88 23       	and	r24, r24
    4446:	31 f4       	brne	.+12     	; 0x4454 <testJSONForTX()+0x138>
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	6d ef       	ldi	r22, 0xFD	; 253
    444e:	72 e0       	ldi	r23, 0x02	; 2
    4450:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	8b 83       	std	Y+3, r24	; 0x03
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    4458:	ce 01       	movw	r24, r28
    445a:	01 96       	adiw	r24, 0x01	; 1
    445c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    4460:	88 23       	and	r24, r24
    4462:	31 f0       	breq	.+12     	; 0x4470 <testJSONForTX()+0x154>
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	60 e0       	ldi	r22, 0x00	; 0
    446a:	73 e0       	ldi	r23, 0x03	; 3
    446c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
  memset(buf, 0, sizeof(buf));
    4470:	8e 01       	movw	r16, r28
    4472:	0f 5f       	subi	r16, 0xFF	; 255
    4474:	1f 4f       	sbci	r17, 0xFF	; 255
    4476:	89 e3       	ldi	r24, 0x39	; 57
    4478:	f8 01       	movw	r30, r16
    447a:	11 92       	st	Z+, r1
    447c:	8a 95       	dec	r24
    447e:	e9 f7       	brne	.-6      	; 0x447a <testJSONForTX()+0x15e>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
    4480:	c8 01       	movw	r24, r16
    4482:	61 e1       	ldi	r22, 0x11	; 17
    4484:	72 e0       	ldi	r23, 0x02	; 2
    4486:	0e 94 86 02 	call	0x50c	; 0x50c <strcpy_P>
  memset(buf, 0, sizeof(buf));
  strcpy_P(buf, (const char PROGMEM *)longJSONMsg1);
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    448a:	c8 01       	movw	r24, r16
    448c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    4490:	88 23       	and	r24, r24
    4492:	31 f4       	brne	.+12     	; 0x44a0 <testJSONForTX()+0x184>
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	65 e0       	ldi	r22, 0x05	; 5
    449a:	73 e0       	ldi	r23, 0x03	; 3
    449c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Invalidate it with a high-bit set and check that it is rejected.
  buf[5] |= 0x80;
    44a0:	8e 81       	ldd	r24, Y+6	; 0x06
    44a2:	80 68       	ori	r24, 0x80	; 128
    44a4:	8e 83       	std	Y+6, r24	; 0x06
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    44a6:	ce 01       	movw	r24, r28
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    44ae:	88 23       	and	r24, r24
    44b0:	31 f0       	breq	.+12     	; 0x44be <testJSONForTX()+0x1a2>
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	68 e0       	ldi	r22, 0x08	; 8
    44b8:	73 e0       	ldi	r23, 0x03	; 3
    44ba:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // CRC fun!  
  memset(buf, 0, sizeof(buf));
    44be:	fe 01       	movw	r30, r28
    44c0:	31 96       	adiw	r30, 0x01	; 1
    44c2:	89 e3       	ldi	r24, 0x39	; 57
    44c4:	df 01       	movw	r26, r30
    44c6:	1d 92       	st	X+, r1
    44c8:	8a 95       	dec	r24
    44ca:	e9 f7       	brne	.-6      	; 0x44c6 <testJSONForTX()+0x1aa>
  buf[0] = '{';
    44cc:	8b e7       	ldi	r24, 0x7B	; 123
    44ce:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = '}';
    44d0:	8d e7       	ldi	r24, 0x7D	; 125
    44d2:	8a 83       	std	Y+2, r24	; 0x02
  const uint8_t crc1 = adjustJSONMsgForTXAndComputeCRC(buf);
    44d4:	cf 01       	movw	r24, r30
    44d6:	0e 94 c5 0b 	call	0x178a	; 0x178a <adjustJSONMsgForTXAndComputeCRC(char*)>
    44da:	08 2f       	mov	r16, r24
  // Check that top bit is not set (ie CRC was computed OK).
  AssertIsTrueWithErr(!(crc1 & 0x80), crc1);
    44dc:	87 ff       	sbrs	r24, 7
    44de:	05 c0       	rjmp	.+10     	; 0x44ea <testJSONForTX()+0x1ce>
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	6f e0       	ldi	r22, 0x0F	; 15
    44e4:	73 e0       	ldi	r23, 0x03	; 3
    44e6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check for expected CRC value.
  AssertIsTrueWithErr((0x38 == crc1), crc1);
    44ea:	08 33       	cpi	r16, 0x38	; 56
    44ec:	31 f0       	breq	.+12     	; 0x44fa <testJSONForTX()+0x1de>
    44ee:	80 2f       	mov	r24, r16
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	61 e1       	ldi	r22, 0x11	; 17
    44f4:	73 e0       	ldi	r23, 0x03	; 3
    44f6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check that initial part unaltered.
  AssertIsTrueWithErr(('{' == buf[0]), buf[0]);
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	8b 37       	cpi	r24, 0x7B	; 123
    44fe:	39 f0       	breq	.+14     	; 0x450e <testJSONForTX()+0x1f2>
    4500:	99 27       	eor	r25, r25
    4502:	87 fd       	sbrc	r24, 7
    4504:	90 95       	com	r25
    4506:	63 e1       	ldi	r22, 0x13	; 19
    4508:	73 e0       	ldi	r23, 0x03	; 3
    450a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check that top bit has been set in trailing brace.
  AssertIsTrueWithErr(((char)('}' | 0x80) == buf[1]), buf[1]);
    450e:	8a 81       	ldd	r24, Y+2	; 0x02
    4510:	8d 3f       	cpi	r24, 0xFD	; 253
    4512:	39 f0       	breq	.+14     	; 0x4522 <testJSONForTX()+0x206>
    4514:	99 27       	eor	r25, r25
    4516:	87 fd       	sbrc	r24, 7
    4518:	90 95       	com	r25
    451a:	65 e1       	ldi	r22, 0x15	; 21
    451c:	73 e0       	ldi	r23, 0x03	; 3
    451e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check that trailing '\0' still present.
  AssertIsTrueWithErr((0 == buf[2]), buf[2]);
    4522:	8b 81       	ldd	r24, Y+3	; 0x03
    4524:	88 23       	and	r24, r24
    4526:	39 f0       	breq	.+14     	; 0x4536 <testJSONForTX()+0x21a>
    4528:	99 27       	eor	r25, r25
    452a:	87 fd       	sbrc	r24, 7
    452c:	90 95       	com	r25
    452e:	67 e1       	ldi	r22, 0x17	; 23
    4530:	73 e0       	ldi	r23, 0x03	; 3
    4532:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check that TX-format can be converted for RX.
  buf[2] = crc1;
    4536:	0b 83       	std	Y+3, r16	; 0x03
  buf[3] = 0xff; // As for normal TX...
    4538:	8f ef       	ldi	r24, 0xFF	; 255
    453a:	8c 83       	std	Y+4, r24	; 0x04
  const int8_t l1 = adjustJSONMsgForRXAndCheckCRC(buf, sizeof(buf));
    453c:	ce 01       	movw	r24, r28
    453e:	01 96       	adiw	r24, 0x01	; 1
    4540:	69 e3       	ldi	r22, 0x39	; 57
    4542:	0e 94 23 0c 	call	0x1846	; 0x1846 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
  AssertIsTrueWithErr(2 == l1, l1);
    4546:	82 30       	cpi	r24, 0x02	; 2
    4548:	39 f0       	breq	.+14     	; 0x4558 <testJSONForTX()+0x23c>
    454a:	99 27       	eor	r25, r25
    454c:	87 fd       	sbrc	r24, 7
    454e:	90 95       	com	r25
    4550:	6c e1       	ldi	r22, 0x1C	; 28
    4552:	73 e0       	ldi	r23, 0x03	; 3
    4554:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(2 == strlen(buf), strlen(buf));
    4558:	fe 01       	movw	r30, r28
    455a:	31 96       	adiw	r30, 0x01	; 1
    455c:	df 01       	movw	r26, r30
    455e:	0d 90       	ld	r0, X+
    4560:	00 20       	and	r0, r0
    4562:	e9 f7       	brne	.-6      	; 0x455e <testJSONForTX()+0x242>
    4564:	11 97       	sbiw	r26, 0x01	; 1
    4566:	ae 1b       	sub	r26, r30
    4568:	bf 0b       	sbc	r27, r31
    456a:	a2 30       	cpi	r26, 0x02	; 2
    456c:	b1 05       	cpc	r27, r1
    456e:	29 f0       	breq	.+10     	; 0x457a <testJSONForTX()+0x25e>
    4570:	cd 01       	movw	r24, r26
    4572:	6d e1       	ldi	r22, 0x1D	; 29
    4574:	73 e0       	ldi	r23, 0x03	; 3
    4576:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    457a:	ce 01       	movw	r24, r28
    457c:	01 96       	adiw	r24, 0x01	; 1
    457e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    4582:	88 23       	and	r24, r24
    4584:	31 f4       	brne	.+12     	; 0x4592 <testJSONForTX()+0x276>
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	6e e1       	ldi	r22, 0x1E	; 30
    458c:	73 e0       	ldi	r23, 0x03	; 3
    458e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Now a longer message...
  memset(buf, 0, sizeof(buf));
    4592:	8e 01       	movw	r16, r28
    4594:	0f 5f       	subi	r16, 0xFF	; 255
    4596:	1f 4f       	sbci	r17, 0xFF	; 255
    4598:	89 e3       	ldi	r24, 0x39	; 57
    459a:	f8 01       	movw	r30, r16
    459c:	11 92       	st	Z+, r1
    459e:	8a 95       	dec	r24
    45a0:	e9 f7       	brne	.-6      	; 0x459c <testJSONForTX()+0x280>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
    45a2:	c8 01       	movw	r24, r16
    45a4:	61 e1       	ldi	r22, 0x11	; 17
    45a6:	72 e0       	ldi	r23, 0x02	; 2
    45a8:	0e 94 86 02 	call	0x50c	; 0x50c <strcpy_P>
  AssertIsTrueWithErr(2 == strlen(buf), strlen(buf));
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Now a longer message...
  memset(buf, 0, sizeof(buf));
  strcpy_P(buf, (const char PROGMEM *)longJSONMsg1);
  const int8_t l2o = strlen(buf);
    45ac:	f8 01       	movw	r30, r16
    45ae:	01 90       	ld	r0, Z+
    45b0:	00 20       	and	r0, r0
    45b2:	e9 f7       	brne	.-6      	; 0x45ae <testJSONForTX()+0x292>
    45b4:	31 97       	sbiw	r30, 0x01	; 1
    45b6:	fe 2e       	mov	r15, r30
    45b8:	f0 1a       	sub	r15, r16
  const uint8_t crc2 = adjustJSONMsgForTXAndComputeCRC(buf);
    45ba:	c8 01       	movw	r24, r16
    45bc:	0e 94 c5 0b 	call	0x178a	; 0x178a <adjustJSONMsgForTXAndComputeCRC(char*)>
    45c0:	08 2f       	mov	r16, r24
  // Check that top bit is not set (ie CRC was computed OK).
  AssertIsTrueWithErr(!(crc2 & 0x80), crc2);
    45c2:	87 ff       	sbrs	r24, 7
    45c4:	05 c0       	rjmp	.+10     	; 0x45d0 <testJSONForTX()+0x2b4>
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	65 e2       	ldi	r22, 0x25	; 37
    45ca:	73 e0       	ldi	r23, 0x03	; 3
    45cc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check for expected CRC value.
  AssertIsTrueWithErr((0x77 == crc2), crc2);
    45d0:	07 37       	cpi	r16, 0x77	; 119
    45d2:	31 f0       	breq	.+12     	; 0x45e0 <testJSONForTX()+0x2c4>
    45d4:	80 2f       	mov	r24, r16
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	67 e2       	ldi	r22, 0x27	; 39
    45da:	73 e0       	ldi	r23, 0x03	; 3
    45dc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Check that TX-format can be converted for RX.
  buf[l2o] = crc2;
    45e0:	af 2d       	mov	r26, r15
    45e2:	bb 27       	eor	r27, r27
    45e4:	a7 fd       	sbrc	r26, 7
    45e6:	b0 95       	com	r27
    45e8:	ce 01       	movw	r24, r28
    45ea:	01 96       	adiw	r24, 0x01	; 1
    45ec:	fc 01       	movw	r30, r24
    45ee:	ea 0f       	add	r30, r26
    45f0:	fb 1f       	adc	r31, r27
    45f2:	00 83       	st	Z, r16
  buf[l2o+1] = 0xff;
    45f4:	ac 0f       	add	r26, r28
    45f6:	bd 1f       	adc	r27, r29
    45f8:	2f ef       	ldi	r18, 0xFF	; 255
    45fa:	12 96       	adiw	r26, 0x02	; 2
    45fc:	2c 93       	st	X, r18
  const int8_t l2 = adjustJSONMsgForRXAndCheckCRC(buf, sizeof(buf));
    45fe:	69 e3       	ldi	r22, 0x39	; 57
    4600:	0e 94 23 0c 	call	0x1846	; 0x1846 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
  AssertIsTrueWithErr(l2o == l2, l2);
    4604:	f8 16       	cp	r15, r24
    4606:	39 f0       	breq	.+14     	; 0x4616 <testJSONForTX()+0x2fa>
    4608:	99 27       	eor	r25, r25
    460a:	87 fd       	sbrc	r24, 7
    460c:	90 95       	com	r25
    460e:	6c e2       	ldi	r22, 0x2C	; 44
    4610:	73 e0       	ldi	r23, 0x03	; 3
    4612:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    4616:	ce 01       	movw	r24, r28
    4618:	01 96       	adiw	r24, 0x01	; 1
    461a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <quickValidateRawSimpleJSONMessage(char const*)>
    461e:	88 23       	and	r24, r24
    4620:	31 f4       	brne	.+12     	; 0x462e <testJSONForTX()+0x312>
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	6d e2       	ldi	r22, 0x2D	; 45
    4628:	73 e0       	ldi	r23, 0x03	; 3
    462a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#endif
  }
    462e:	e9 96       	adiw	r28, 0x39	; 57
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	f8 94       	cli
    4634:	de bf       	out	0x3e, r29	; 62
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	cd bf       	out	0x3d, r28	; 61
    463a:	cf 91       	pop	r28
    463c:	df 91       	pop	r29
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
    4642:	ff 90       	pop	r15
    4644:	08 95       	ret

00004646 <testFullStatsMessageCoreEncDec()>:

// Test elements of encoding and decoding FullStatsMessageCore_t.
// These are the routines primarily under test:
//     uint8_t *encodeFullStatsMessageCore(uint8_t *buf, uint8_t buflen, stats_TX_level secLevel, bool secureChannel, const FullStatsMessageCore_t *content)
//     const uint8_t *decodeFullStatsMessageCore(const uint8_t *buf, uint8_t buflen, stats_TX_level secLevel, bool secureChannel, FullStatsMessageCore_t *content)
static void testFullStatsMessageCoreEncDec()
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	df 93       	push	r29
    4656:	cf 93       	push	r28
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	60 97       	sbiw	r28, 0x10	; 16
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	f8 94       	cli
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFullStatsMessageCoreEncDec");
    4668:	89 e5       	ldi	r24, 0x59	; 89
    466a:	92 e0       	ldi	r25, 0x02	; 2
    466c:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  // Ensure that with null buffer/content encode and decode fail regardless of other arguments.
  uint8_t buf[FullStatsMessageCore_MAX_BYTES_ON_WIRE + 1];
  FullStatsMessageCore_t content;
  AssertIsTrue(NULL == encodeFullStatsMessageCore(NULL, randRNG8(), stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4670:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4674:	18 2f       	mov	r17, r24
    4676:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    467a:	28 2f       	mov	r18, r24
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	61 2f       	mov	r22, r17
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	50 e0       	ldi	r21, 0x00	; 0
    4686:	00 e0       	ldi	r16, 0x00	; 0
    4688:	10 e0       	ldi	r17, 0x00	; 0
    468a:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    468e:	89 2b       	or	r24, r25
    4690:	31 f0       	breq	.+12     	; 0x469e <testFullStatsMessageCoreEncDec()+0x58>
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	65 e6       	ldi	r22, 0x65	; 101
    4698:	74 e0       	ldi	r23, 0x04	; 4
    469a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(NULL, randRNG8(), stTXalwaysAll, randRNG8NextBoolean(), NULL));
    469e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    46a2:	18 2f       	mov	r17, r24
    46a4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    46a8:	28 2f       	mov	r18, r24
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	61 2f       	mov	r22, r17
    46b0:	40 e0       	ldi	r20, 0x00	; 0
    46b2:	50 e0       	ldi	r21, 0x00	; 0
    46b4:	00 e0       	ldi	r16, 0x00	; 0
    46b6:	10 e0       	ldi	r17, 0x00	; 0
    46b8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    46bc:	89 2b       	or	r24, r25
    46be:	31 f0       	breq	.+12     	; 0x46cc <testFullStatsMessageCoreEncDec()+0x86>
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	66 e6       	ldi	r22, 0x66	; 102
    46c6:	74 e0       	ldi	r23, 0x04	; 4
    46c8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(NULL == encodeFullStatsMessageCore(NULL, FullStatsMessageCore_MAX_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), &content));
    46cc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    46d0:	28 2f       	mov	r18, r24
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	69 e0       	ldi	r22, 0x09	; 9
    46d8:	40 e0       	ldi	r20, 0x00	; 0
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	8e 01       	movw	r16, r28
    46de:	0f 5f       	subi	r16, 0xFF	; 255
    46e0:	1f 4f       	sbci	r17, 0xFF	; 255
    46e2:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    46e6:	89 2b       	or	r24, r25
    46e8:	31 f0       	breq	.+12     	; 0x46f6 <testFullStatsMessageCoreEncDec()+0xb0>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	67 e6       	ldi	r22, 0x67	; 103
    46f0:	74 e0       	ldi	r23, 0x04	; 4
    46f2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(NULL == encodeFullStatsMessageCore(buf, FullStatsMessageCore_MAX_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), NULL));
    46f6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    46fa:	28 2f       	mov	r18, r24
    46fc:	ce 01       	movw	r24, r28
    46fe:	08 96       	adiw	r24, 0x08	; 8
    4700:	69 e0       	ldi	r22, 0x09	; 9
    4702:	40 e0       	ldi	r20, 0x00	; 0
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	00 e0       	ldi	r16, 0x00	; 0
    4708:	10 e0       	ldi	r17, 0x00	; 0
    470a:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    470e:	89 2b       	or	r24, r25
    4710:	31 f0       	breq	.+12     	; 0x471e <testFullStatsMessageCoreEncDec()+0xd8>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	68 e6       	ldi	r22, 0x68	; 104
    4718:	74 e0       	ldi	r23, 0x04	; 4
    471a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(NULL, FullStatsMessageCore_MIN_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), &content));
    471e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    4722:	28 2f       	mov	r18, r24
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	64 e0       	ldi	r22, 0x04	; 4
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	8e 01       	movw	r16, r28
    4730:	0f 5f       	subi	r16, 0xFF	; 255
    4732:	1f 4f       	sbci	r17, 0xFF	; 255
    4734:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4738:	89 2b       	or	r24, r25
    473a:	31 f0       	breq	.+12     	; 0x4748 <testFullStatsMessageCoreEncDec()+0x102>
    473c:	80 e0       	ldi	r24, 0x00	; 0
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	69 e6       	ldi	r22, 0x69	; 105
    4742:	74 e0       	ldi	r23, 0x04	; 4
    4744:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(buf, FullStatsMessageCore_MIN_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4748:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    474c:	28 2f       	mov	r18, r24
    474e:	ce 01       	movw	r24, r28
    4750:	08 96       	adiw	r24, 0x08	; 8
    4752:	64 e0       	ldi	r22, 0x04	; 4
    4754:	40 e0       	ldi	r20, 0x00	; 0
    4756:	50 e0       	ldi	r21, 0x00	; 0
    4758:	00 e0       	ldi	r16, 0x00	; 0
    475a:	10 e0       	ldi	r17, 0x00	; 0
    475c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4760:	89 2b       	or	r24, r25
    4762:	31 f0       	breq	.+12     	; 0x4770 <testFullStatsMessageCoreEncDec()+0x12a>
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	6a e6       	ldi	r22, 0x6A	; 106
    476a:	74 e0       	ldi	r23, 0x04	; 4
    476c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

  // Prepare a minimal (empty) non-secure message.
  memset(buf, 0, sizeof(buf));
    4770:	fe 01       	movw	r30, r28
    4772:	38 96       	adiw	r30, 0x08	; 8
    4774:	89 e0       	ldi	r24, 0x09	; 9
    4776:	df 01       	movw	r26, r30
    4778:	1d 92       	st	X+, r1
    477a:	8a 95       	dec	r24
    477c:	e9 f7       	brne	.-6      	; 0x4778 <testFullStatsMessageCoreEncDec()+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    477e:	8e 01       	movw	r16, r28
    4780:	0f 5f       	subi	r16, 0xFF	; 255
    4782:	1f 4f       	sbci	r17, 0xFF	; 255
    4784:	87 e0       	ldi	r24, 0x07	; 7
    4786:	d8 01       	movw	r26, r16
    4788:	1d 92       	st	X+, r1
    478a:	8a 95       	dec	r24
    478c:	e9 f7       	brne	.-6      	; 0x4788 <testFullStatsMessageCoreEncDec()+0x142>
  clearFullStatsMessageCore(&content);
  const uint8_t *emptyMsg = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    478e:	cf 01       	movw	r24, r30
    4790:	69 e0       	ldi	r22, 0x09	; 9
    4792:	40 e0       	ldi	r20, 0x00	; 0
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    479c:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != emptyMsg); // Must succeed.
    479e:	00 97       	sbiw	r24, 0x00	; 0
    47a0:	31 f4       	brne	.+12     	; 0x47ae <testFullStatsMessageCoreEncDec()+0x168>
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	60 e7       	ldi	r22, 0x70	; 112
    47a8:	74 e0       	ldi	r23, 0x04	; 4
    47aa:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(emptyMsg - buf == FullStatsMessageCore_MIN_BYTES_ON_WIRE, emptyMsg - buf); // Must correspond to minimum size.
    47ae:	08 e0       	ldi	r16, 0x08	; 8
    47b0:	c0 2e       	mov	r12, r16
    47b2:	d1 2c       	mov	r13, r1
    47b4:	cc 0e       	add	r12, r28
    47b6:	dd 1e       	adc	r13, r29
    47b8:	c7 01       	movw	r24, r14
    47ba:	8c 19       	sub	r24, r12
    47bc:	9d 09       	sbc	r25, r13
    47be:	83 30       	cpi	r24, 0x03	; 3
    47c0:	91 05       	cpc	r25, r1
    47c2:	21 f0       	breq	.+8      	; 0x47cc <testFullStatsMessageCoreEncDec()+0x186>
    47c4:	61 e7       	ldi	r22, 0x71	; 113
    47c6:	74 e0       	ldi	r23, 0x04	; 4
    47c8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_HEADER_MSBS == buf[0], buf[0]); // Header byte.
    47cc:	88 85       	ldd	r24, Y+8	; 0x08
    47ce:	80 37       	cpi	r24, 0x70	; 112
    47d0:	29 f0       	breq	.+10     	; 0x47dc <testFullStatsMessageCoreEncDec()+0x196>
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	62 e7       	ldi	r22, 0x72	; 114
    47d6:	74 e0       	ldi	r23, 0x04	; 4
    47d8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == buf[1], buf[1]); // Flags header byte.
    47dc:	89 85       	ldd	r24, Y+9	; 0x09
    47de:	80 36       	cpi	r24, 0x60	; 96
    47e0:	29 f0       	breq	.+10     	; 0x47ec <testFullStatsMessageCoreEncDec()+0x1a6>
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	63 e7       	ldi	r22, 0x73	; 115
    47e6:	74 e0       	ldi	r23, 0x04	; 4
    47e8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x65 == buf[2], buf[2]); // CRC.
    47ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    47ee:	85 36       	cpi	r24, 0x65	; 101
    47f0:	29 f0       	breq	.+10     	; 0x47fc <testFullStatsMessageCoreEncDec()+0x1b6>
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	64 e7       	ldi	r22, 0x74	; 116
    47f6:	74 e0       	ldi	r23, 0x04	; 4
    47f8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *emptyMsg); // Must be correctly terminated.
    47fc:	f7 01       	movw	r30, r14
    47fe:	80 81       	ld	r24, Z
    4800:	8f 3f       	cpi	r24, 0xFF	; 255
    4802:	31 f0       	breq	.+12     	; 0x4810 <testFullStatsMessageCoreEncDec()+0x1ca>
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	65 e7       	ldi	r22, 0x75	; 117
    480a:	74 e0       	ldi	r23, 0x04	; 4
    480c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    4810:	fe 01       	movw	r30, r28
    4812:	31 96       	adiw	r30, 0x01	; 1
    4814:	87 e0       	ldi	r24, 0x07	; 7
    4816:	df 01       	movw	r26, r30
    4818:	1d 92       	st	X+, r1
    481a:	8a 95       	dec	r24
    481c:	e9 f7       	brne	.-6      	; 0x4818 <testFullStatsMessageCoreEncDec()+0x1d2>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *emptyMsgDE = decodeFullStatsMessageCore(buf, emptyMsg-buf, stTXalwaysAll, false, &content);
    481e:	bc 2c       	mov	r11, r12
    4820:	6e 2d       	mov	r22, r14
    4822:	6c 19       	sub	r22, r12
    4824:	ce 01       	movw	r24, r28
    4826:	08 96       	adiw	r24, 0x08	; 8
    4828:	40 e0       	ldi	r20, 0x00	; 0
    482a:	50 e0       	ldi	r21, 0x00	; 0
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	8f 01       	movw	r16, r30
    4830:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4834:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != emptyMsgDE); // Must succeed.
    4836:	00 97       	sbiw	r24, 0x00	; 0
    4838:	31 f4       	brne	.+12     	; 0x4846 <testFullStatsMessageCoreEncDec()+0x200>
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	69 e7       	ldi	r22, 0x79	; 121
    4840:	74 e0       	ldi	r23, 0x04	; 4
    4842:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(emptyMsg == emptyMsgDE); // Must return correct end of message.
    4846:	e0 16       	cp	r14, r16
    4848:	f1 06       	cpc	r15, r17
    484a:	31 f0       	breq	.+12     	; 0x4858 <testFullStatsMessageCoreEncDec()+0x212>
    484c:	80 e0       	ldi	r24, 0x00	; 0
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	6a e7       	ldi	r22, 0x7A	; 122
    4852:	74 e0       	ldi	r23, 0x04	; 4
    4854:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Verify that there is no content.
  AssertIsTrue(!content.containsID);
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	80 ff       	sbrs	r24, 0
    485c:	06 c0       	rjmp	.+12     	; 0x486a <testFullStatsMessageCoreEncDec()+0x224>
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	6c e7       	ldi	r22, 0x7C	; 124
    4864:	74 e0       	ldi	r23, 0x04	; 4
    4866:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!content.containsTempAndPower);
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	81 ff       	sbrs	r24, 1
    486e:	06 c0       	rjmp	.+12     	; 0x487c <testFullStatsMessageCoreEncDec()+0x236>
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	6d e7       	ldi	r22, 0x7D	; 125
    4876:	74 e0       	ldi	r23, 0x04	; 4
    4878:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!content.containsAmbL);
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	82 ff       	sbrs	r24, 2
    4880:	06 c0       	rjmp	.+12     	; 0x488e <testFullStatsMessageCoreEncDec()+0x248>
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	6e e7       	ldi	r22, 0x7E	; 126
    4888:	74 e0       	ldi	r23, 0x04	; 4
    488a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

  // Prepare a non-secure message with ID.
  memset(buf, 0, sizeof(buf));
    488e:	fe 01       	movw	r30, r28
    4890:	38 96       	adiw	r30, 0x08	; 8
    4892:	89 e0       	ldi	r24, 0x09	; 9
    4894:	df 01       	movw	r26, r30
    4896:	1d 92       	st	X+, r1
    4898:	8a 95       	dec	r24
    489a:	e9 f7       	brne	.-6      	; 0x4896 <testFullStatsMessageCoreEncDec()+0x250>
    489c:	8e 01       	movw	r16, r28
    489e:	0f 5f       	subi	r16, 0xFF	; 255
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	87 e0       	ldi	r24, 0x07	; 7
    48a4:	d8 01       	movw	r26, r16
    48a6:	1d 92       	st	X+, r1
    48a8:	8a 95       	dec	r24
    48aa:	e9 f7       	brne	.-6      	; 0x48a6 <testFullStatsMessageCoreEncDec()+0x260>
  clearFullStatsMessageCore(&content);
  content.id0 = 0x80;
    48ac:	80 e8       	ldi	r24, 0x80	; 128
    48ae:	8a 83       	std	Y+2, r24	; 0x02
  content.id1 = 0x00;
    48b0:	1b 82       	std	Y+3, r1	; 0x03
  content.containsID = true;
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	81 60       	ori	r24, 0x01	; 1
    48b6:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(NULL == encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content)); // Should reject ID bytes with differring msbits.
    48b8:	cf 01       	movw	r24, r30
    48ba:	69 e0       	ldi	r22, 0x09	; 9
    48bc:	40 e0       	ldi	r20, 0x00	; 0
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    48c6:	89 2b       	or	r24, r25
    48c8:	31 f0       	breq	.+12     	; 0x48d6 <testFullStatsMessageCoreEncDec()+0x290>
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	66 e8       	ldi	r22, 0x86	; 134
    48d0:	74 e0       	ldi	r23, 0x04	; 4
    48d2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  content.id1 = 0x81;
    48d6:	81 e8       	ldi	r24, 0x81	; 129
    48d8:	8b 83       	std	Y+3, r24	; 0x03
  const uint8_t *onlyIDMsg = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    48da:	ce 01       	movw	r24, r28
    48dc:	08 96       	adiw	r24, 0x08	; 8
    48de:	69 e0       	ldi	r22, 0x09	; 9
    48e0:	40 e0       	ldi	r20, 0x00	; 0
    48e2:	50 e0       	ldi	r21, 0x00	; 0
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	8e 01       	movw	r16, r28
    48e8:	0f 5f       	subi	r16, 0xFF	; 255
    48ea:	1f 4f       	sbci	r17, 0xFF	; 255
    48ec:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    48f0:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != onlyIDMsg); // Must succeed.
    48f2:	00 97       	sbiw	r24, 0x00	; 0
    48f4:	31 f4       	brne	.+12     	; 0x4902 <testFullStatsMessageCoreEncDec()+0x2bc>
    48f6:	80 e0       	ldi	r24, 0x00	; 0
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	69 e8       	ldi	r22, 0x89	; 137
    48fc:	74 e0       	ldi	r23, 0x04	; 4
    48fe:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(onlyIDMsg - buf == FullStatsMessageCore_MIN_BYTES_ON_WIRE + 2, onlyIDMsg - buf); // Must correspond to minimum size + 2 ID bytes.
    4902:	c7 01       	movw	r24, r14
    4904:	8c 19       	sub	r24, r12
    4906:	9d 09       	sbc	r25, r13
    4908:	85 30       	cpi	r24, 0x05	; 5
    490a:	91 05       	cpc	r25, r1
    490c:	21 f0       	breq	.+8      	; 0x4916 <testFullStatsMessageCoreEncDec()+0x2d0>
    490e:	6a e8       	ldi	r22, 0x8A	; 138
    4910:	74 e0       	ldi	r23, 0x04	; 4
    4912:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_HEADER_MSBS | MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT | MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH) == buf[0], buf[0]); // Header byte.
    4916:	88 85       	ldd	r24, Y+8	; 0x08
    4918:	86 37       	cpi	r24, 0x76	; 118
    491a:	29 f0       	breq	.+10     	; 0x4926 <testFullStatsMessageCoreEncDec()+0x2e0>
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	6b e8       	ldi	r22, 0x8B	; 139
    4920:	74 e0       	ldi	r23, 0x04	; 4
    4922:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x00 == buf[1], buf[1]); // ID0 without msbit.
    4926:	89 85       	ldd	r24, Y+9	; 0x09
    4928:	88 23       	and	r24, r24
    492a:	29 f0       	breq	.+10     	; 0x4936 <testFullStatsMessageCoreEncDec()+0x2f0>
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	6c e8       	ldi	r22, 0x8C	; 140
    4930:	74 e0       	ldi	r23, 0x04	; 4
    4932:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x01 == buf[2], buf[2]); // ID1 without msbit.
    4936:	8a 85       	ldd	r24, Y+10	; 0x0a
    4938:	81 30       	cpi	r24, 0x01	; 1
    493a:	29 f0       	breq	.+10     	; 0x4946 <testFullStatsMessageCoreEncDec()+0x300>
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	6d e8       	ldi	r22, 0x8D	; 141
    4940:	74 e0       	ldi	r23, 0x04	; 4
    4942:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == buf[3], buf[3]); // Flags header byte.
    4946:	8b 85       	ldd	r24, Y+11	; 0x0b
    4948:	80 36       	cpi	r24, 0x60	; 96
    494a:	29 f0       	breq	.+10     	; 0x4956 <testFullStatsMessageCoreEncDec()+0x310>
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	6e e8       	ldi	r22, 0x8E	; 142
    4950:	74 e0       	ldi	r23, 0x04	; 4
    4952:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x01 == buf[4], buf[4]); // CRC.
    4956:	8c 85       	ldd	r24, Y+12	; 0x0c
    4958:	81 30       	cpi	r24, 0x01	; 1
    495a:	29 f0       	breq	.+10     	; 0x4966 <testFullStatsMessageCoreEncDec()+0x320>
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	6f e8       	ldi	r22, 0x8F	; 143
    4960:	74 e0       	ldi	r23, 0x04	; 4
    4962:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *onlyIDMsg); // Must be correctly terminated.
    4966:	f7 01       	movw	r30, r14
    4968:	80 81       	ld	r24, Z
    496a:	8f 3f       	cpi	r24, 0xFF	; 255
    496c:	31 f0       	breq	.+12     	; 0x497a <testFullStatsMessageCoreEncDec()+0x334>
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	60 e9       	ldi	r22, 0x90	; 144
    4974:	74 e0       	ldi	r23, 0x04	; 4
    4976:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    497a:	fe 01       	movw	r30, r28
    497c:	31 96       	adiw	r30, 0x01	; 1
    497e:	87 e0       	ldi	r24, 0x07	; 7
    4980:	df 01       	movw	r26, r30
    4982:	1d 92       	st	X+, r1
    4984:	8a 95       	dec	r24
    4986:	e9 f7       	brne	.-6      	; 0x4982 <testFullStatsMessageCoreEncDec()+0x33c>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *onlyIDMsgDE = decodeFullStatsMessageCore(buf, onlyIDMsg-buf, stTXalwaysAll, false, &content);
    4988:	6e 2d       	mov	r22, r14
    498a:	6b 19       	sub	r22, r11
    498c:	ce 01       	movw	r24, r28
    498e:	08 96       	adiw	r24, 0x08	; 8
    4990:	40 e0       	ldi	r20, 0x00	; 0
    4992:	50 e0       	ldi	r21, 0x00	; 0
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	8f 01       	movw	r16, r30
    4998:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    499c:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != onlyIDMsgDE); // Must succeed.
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	31 f4       	brne	.+12     	; 0x49ae <testFullStatsMessageCoreEncDec()+0x368>
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	64 e9       	ldi	r22, 0x94	; 148
    49a8:	74 e0       	ldi	r23, 0x04	; 4
    49aa:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(onlyIDMsg == onlyIDMsgDE); // Must return correct end of message.
    49ae:	e0 16       	cp	r14, r16
    49b0:	f1 06       	cpc	r15, r17
    49b2:	31 f0       	breq	.+12     	; 0x49c0 <testFullStatsMessageCoreEncDec()+0x37a>
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	65 e9       	ldi	r22, 0x95	; 149
    49ba:	74 e0       	ldi	r23, 0x04	; 4
    49bc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Verify that there is only ID.
  AssertIsTrue(content.containsID);
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	80 fd       	sbrc	r24, 0
    49c4:	06 c0       	rjmp	.+12     	; 0x49d2 <testFullStatsMessageCoreEncDec()+0x38c>
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	67 e9       	ldi	r22, 0x97	; 151
    49cc:	74 e0       	ldi	r23, 0x04	; 4
    49ce:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(content.id0 == (uint8_t)0x80, content.id0);
    49d2:	8a 81       	ldd	r24, Y+2	; 0x02
    49d4:	80 38       	cpi	r24, 0x80	; 128
    49d6:	29 f0       	breq	.+10     	; 0x49e2 <testFullStatsMessageCoreEncDec()+0x39c>
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	68 e9       	ldi	r22, 0x98	; 152
    49dc:	74 e0       	ldi	r23, 0x04	; 4
    49de:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(content.id1 == (uint8_t)0x81, content.id1);
    49e2:	8b 81       	ldd	r24, Y+3	; 0x03
    49e4:	81 38       	cpi	r24, 0x81	; 129
    49e6:	29 f0       	breq	.+10     	; 0x49f2 <testFullStatsMessageCoreEncDec()+0x3ac>
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	69 e9       	ldi	r22, 0x99	; 153
    49ec:	74 e0       	ldi	r23, 0x04	; 4
    49ee:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!content.containsTempAndPower);
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	81 ff       	sbrs	r24, 1
    49f6:	06 c0       	rjmp	.+12     	; 0x4a04 <testFullStatsMessageCoreEncDec()+0x3be>
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	6a e9       	ldi	r22, 0x9A	; 154
    49fe:	74 e0       	ldi	r23, 0x04	; 4
    4a00:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!content.containsAmbL);
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	82 ff       	sbrs	r24, 2
    4a08:	06 c0       	rjmp	.+12     	; 0x4a16 <testFullStatsMessageCoreEncDec()+0x3d0>
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	6b e9       	ldi	r22, 0x9B	; 155
    4a10:	74 e0       	ldi	r23, 0x04	; 4
    4a12:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

  // Prepare a non-secure message with ID, temp/power, ambient light level and occupancy.
  memset(buf, 0, sizeof(buf));
    4a16:	fe 01       	movw	r30, r28
    4a18:	38 96       	adiw	r30, 0x08	; 8
    4a1a:	89 e0       	ldi	r24, 0x09	; 9
    4a1c:	df 01       	movw	r26, r30
    4a1e:	1d 92       	st	X+, r1
    4a20:	8a 95       	dec	r24
    4a22:	e9 f7       	brne	.-6      	; 0x4a1e <testFullStatsMessageCoreEncDec()+0x3d8>
    4a24:	8e 01       	movw	r16, r28
    4a26:	0f 5f       	subi	r16, 0xFF	; 255
    4a28:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2a:	87 e0       	ldi	r24, 0x07	; 7
    4a2c:	d8 01       	movw	r26, r16
    4a2e:	1d 92       	st	X+, r1
    4a30:	8a 95       	dec	r24
    4a32:	e9 f7       	brne	.-6      	; 0x4a2e <testFullStatsMessageCoreEncDec()+0x3e8>
  clearFullStatsMessageCore(&content);
  content.id0 = 0x83;
    4a34:	83 e8       	ldi	r24, 0x83	; 131
    4a36:	8a 83       	std	Y+2, r24	; 0x02
  content.id1 = 0x98;
    4a38:	88 e9       	ldi	r24, 0x98	; 152
    4a3a:	8b 83       	std	Y+3, r24	; 0x03
  content.containsID = true;
    4a3c:	99 81       	ldd	r25, Y+1	; 0x01
  content.tempAndPower.tempC16 = (19 << 4) + 1; // (19 + 1/16)C.
    4a3e:	81 e3       	ldi	r24, 0x31	; 49
    4a40:	8c 83       	std	Y+4, r24	; 0x04
  content.tempAndPower.powerLow = false; // Normal power.
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	8d 83       	std	Y+5, r24	; 0x05
  content.containsTempAndPower = true;
  content.ambL = 42; // Allowed value in range [1,254].
    4a46:	8a e2       	ldi	r24, 0x2A	; 42
    4a48:	8e 83       	std	Y+6, r24	; 0x06
  content.containsAmbL = true;
    4a4a:	97 60       	ori	r25, 0x07	; 7
    4a4c:	99 83       	std	Y+1, r25	; 0x01
  content.occ = 3; // Not occupied recently.
    4a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a50:	83 60       	ori	r24, 0x03	; 3
    4a52:	8f 83       	std	Y+7, r24	; 0x07
  const uint8_t *msg1 = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    4a54:	cf 01       	movw	r24, r30
    4a56:	69 e0       	ldi	r22, 0x09	; 9
    4a58:	40 e0       	ldi	r20, 0x00	; 0
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	0e 94 39 11 	call	0x2272	; 0x2272 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4a62:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != msg1); // Must succeed.
    4a64:	00 97       	sbiw	r24, 0x00	; 0
    4a66:	31 f4       	brne	.+12     	; 0x4a74 <testFullStatsMessageCoreEncDec()+0x42e>
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	6a ea       	ldi	r22, 0xAA	; 170
    4a6e:	74 e0       	ldi	r23, 0x04	; 4
    4a70:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(msg1 - buf == FullStatsMessageCore_MAX_BYTES_ON_WIRE, msg1 - buf); // Must correspond to minimum size + 2 ID bytes.
    4a74:	c7 01       	movw	r24, r14
    4a76:	8c 19       	sub	r24, r12
    4a78:	9d 09       	sbc	r25, r13
    4a7a:	88 30       	cpi	r24, 0x08	; 8
    4a7c:	91 05       	cpc	r25, r1
    4a7e:	21 f0       	breq	.+8      	; 0x4a88 <testFullStatsMessageCoreEncDec()+0x442>
    4a80:	6b ea       	ldi	r22, 0xAB	; 171
    4a82:	74 e0       	ldi	r23, 0x04	; 4
    4a84:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_HEADER_MSBS | MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT | MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH) == buf[0], buf[0]); // Header byte.
    4a88:	88 85       	ldd	r24, Y+8	; 0x08
    4a8a:	86 37       	cpi	r24, 0x76	; 118
    4a8c:	29 f0       	breq	.+10     	; 0x4a98 <testFullStatsMessageCoreEncDec()+0x452>
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	6c ea       	ldi	r22, 0xAC	; 172
    4a92:	74 e0       	ldi	r23, 0x04	; 4
    4a94:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x03 == buf[1], buf[1]); // ID0 without msbit.
    4a98:	89 85       	ldd	r24, Y+9	; 0x09
    4a9a:	83 30       	cpi	r24, 0x03	; 3
    4a9c:	29 f0       	breq	.+10     	; 0x4aa8 <testFullStatsMessageCoreEncDec()+0x462>
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	6d ea       	ldi	r22, 0xAD	; 173
    4aa2:	74 e0       	ldi	r23, 0x04	; 4
    4aa4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x18 == buf[2], buf[2]); // ID1 without msbit.
    4aa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aaa:	88 31       	cpi	r24, 0x18	; 24
    4aac:	29 f0       	breq	.+10     	; 0x4ab8 <testFullStatsMessageCoreEncDec()+0x472>
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	6e ea       	ldi	r22, 0xAE	; 174
    4ab2:	74 e0       	ldi	r23, 0x04	; 4
    4ab4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS + 1) == buf[3], buf[3]); // Temp/power first byte.
    4ab8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4aba:	81 34       	cpi	r24, 0x41	; 65
    4abc:	29 f0       	breq	.+10     	; 0x4ac8 <testFullStatsMessageCoreEncDec()+0x482>
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	6f ea       	ldi	r22, 0xAF	; 175
    4ac2:	74 e0       	ldi	r23, 0x04	; 4
    4ac4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((19 + 20) == buf[4], buf[4]); // Temp second byte.
    4ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4aca:	87 32       	cpi	r24, 0x27	; 39
    4acc:	29 f0       	breq	.+10     	; 0x4ad8 <testFullStatsMessageCoreEncDec()+0x492>
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	60 eb       	ldi	r22, 0xB0	; 176
    4ad2:	74 e0       	ldi	r23, 0x04	; 4
    4ad4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS | MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL | 3) == buf[5], buf[5]); // Flags header (no extension byte follows).
    4ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ada:	8b 36       	cpi	r24, 0x6B	; 107
    4adc:	29 f0       	breq	.+10     	; 0x4ae8 <testFullStatsMessageCoreEncDec()+0x4a2>
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	61 eb       	ldi	r22, 0xB1	; 177
    4ae2:	74 e0       	ldi	r23, 0x04	; 4
    4ae4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(42 == buf[6], buf[6]); // Ambient light.
    4ae8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4aea:	8a 32       	cpi	r24, 0x2A	; 42
    4aec:	29 f0       	breq	.+10     	; 0x4af8 <testFullStatsMessageCoreEncDec()+0x4b2>
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	62 eb       	ldi	r22, 0xB2	; 178
    4af2:	74 e0       	ldi	r23, 0x04	; 4
    4af4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x44 == buf[7], buf[7]); // CRC.
    4af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4afa:	84 34       	cpi	r24, 0x44	; 68
    4afc:	29 f0       	breq	.+10     	; 0x4b08 <testFullStatsMessageCoreEncDec()+0x4c2>
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	63 eb       	ldi	r22, 0xB3	; 179
    4b02:	74 e0       	ldi	r23, 0x04	; 4
    4b04:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *msg1); // Must be correctly terminated.
    4b08:	f7 01       	movw	r30, r14
    4b0a:	80 81       	ld	r24, Z
    4b0c:	8f 3f       	cpi	r24, 0xFF	; 255
    4b0e:	31 f0       	breq	.+12     	; 0x4b1c <testFullStatsMessageCoreEncDec()+0x4d6>
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	64 eb       	ldi	r22, 0xB4	; 180
    4b16:	74 e0       	ldi	r23, 0x04	; 4
    4b18:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	31 96       	adiw	r30, 0x01	; 1
    4b20:	87 e0       	ldi	r24, 0x07	; 7
    4b22:	df 01       	movw	r26, r30
    4b24:	1d 92       	st	X+, r1
    4b26:	8a 95       	dec	r24
    4b28:	e9 f7       	brne	.-6      	; 0x4b24 <testFullStatsMessageCoreEncDec()+0x4de>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *msg1DE = decodeFullStatsMessageCore(buf, msg1-buf, stTXalwaysAll, false, &content);
    4b2a:	6e 2d       	mov	r22, r14
    4b2c:	6b 19       	sub	r22, r11
    4b2e:	ce 01       	movw	r24, r28
    4b30:	08 96       	adiw	r24, 0x08	; 8
    4b32:	40 e0       	ldi	r20, 0x00	; 0
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	8f 01       	movw	r16, r30
    4b3a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4b3e:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != msg1DE); // Must succeed.
    4b40:	00 97       	sbiw	r24, 0x00	; 0
    4b42:	31 f4       	brne	.+12     	; 0x4b50 <testFullStatsMessageCoreEncDec()+0x50a>
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	68 eb       	ldi	r22, 0xB8	; 184
    4b4a:	74 e0       	ldi	r23, 0x04	; 4
    4b4c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(msg1 == msg1DE); // Must return correct end of message.
    4b50:	e0 16       	cp	r14, r16
    4b52:	f1 06       	cpc	r15, r17
    4b54:	31 f0       	breq	.+12     	; 0x4b62 <testFullStatsMessageCoreEncDec()+0x51c>
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	69 eb       	ldi	r22, 0xB9	; 185
    4b5c:	74 e0       	ldi	r23, 0x04	; 4
    4b5e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(content.containsID);
    4b62:	89 81       	ldd	r24, Y+1	; 0x01
    4b64:	80 fd       	sbrc	r24, 0
    4b66:	06 c0       	rjmp	.+12     	; 0x4b74 <testFullStatsMessageCoreEncDec()+0x52e>
    4b68:	80 e0       	ldi	r24, 0x00	; 0
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	6a eb       	ldi	r22, 0xBA	; 186
    4b6e:	74 e0       	ldi	r23, 0x04	; 4
    4b70:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(content.id0 == (uint8_t)0x83, content.id0);
    4b74:	8a 81       	ldd	r24, Y+2	; 0x02
    4b76:	83 38       	cpi	r24, 0x83	; 131
    4b78:	29 f0       	breq	.+10     	; 0x4b84 <testFullStatsMessageCoreEncDec()+0x53e>
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	6b eb       	ldi	r22, 0xBB	; 187
    4b7e:	74 e0       	ldi	r23, 0x04	; 4
    4b80:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(content.id1 == (uint8_t)0x98, content.id1);
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	88 39       	cpi	r24, 0x98	; 152
    4b88:	29 f0       	breq	.+10     	; 0x4b94 <testFullStatsMessageCoreEncDec()+0x54e>
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	6c eb       	ldi	r22, 0xBC	; 188
    4b8e:	74 e0       	ldi	r23, 0x04	; 4
    4b90:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(content.containsTempAndPower);
    4b94:	89 81       	ldd	r24, Y+1	; 0x01
    4b96:	81 fd       	sbrc	r24, 1
    4b98:	06 c0       	rjmp	.+12     	; 0x4ba6 <testFullStatsMessageCoreEncDec()+0x560>
    4b9a:	80 e0       	ldi	r24, 0x00	; 0
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	6d eb       	ldi	r22, 0xBD	; 189
    4ba0:	74 e0       	ldi	r23, 0x04	; 4
    4ba2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(!content.tempAndPower.powerLow);
    4ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba8:	87 ff       	sbrs	r24, 7
    4baa:	06 c0       	rjmp	.+12     	; 0x4bb8 <testFullStatsMessageCoreEncDec()+0x572>
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	6e eb       	ldi	r22, 0xBE	; 190
    4bb2:	74 e0       	ldi	r23, 0x04	; 4
    4bb4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue((19 << 4) + 1 == content.tempAndPower.tempC16);
    4bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    4bba:	2d 81       	ldd	r18, Y+5	; 0x05
    4bbc:	92 2f       	mov	r25, r18
    4bbe:	9f 77       	andi	r25, 0x7F	; 127
    4bc0:	88 0f       	add	r24, r24
    4bc2:	99 1f       	adc	r25, r25
    4bc4:	82 56       	subi	r24, 0x62	; 98
    4bc6:	92 40       	sbci	r25, 0x02	; 2
    4bc8:	31 f0       	breq	.+12     	; 0x4bd6 <testFullStatsMessageCoreEncDec()+0x590>
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	6f eb       	ldi	r22, 0xBF	; 191
    4bd0:	74 e0       	ldi	r23, 0x04	; 4
    4bd2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(content.containsAmbL);
    4bd6:	89 81       	ldd	r24, Y+1	; 0x01
    4bd8:	82 fd       	sbrc	r24, 2
    4bda:	06 c0       	rjmp	.+12     	; 0x4be8 <testFullStatsMessageCoreEncDec()+0x5a2>
    4bdc:	80 e0       	ldi	r24, 0x00	; 0
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	60 ec       	ldi	r22, 0xC0	; 192
    4be2:	74 e0       	ldi	r23, 0x04	; 4
    4be4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(42 == content.ambL);
    4be8:	8e 81       	ldd	r24, Y+6	; 0x06
    4bea:	8a 32       	cpi	r24, 0x2A	; 42
    4bec:	31 f0       	breq	.+12     	; 0x4bfa <testFullStatsMessageCoreEncDec()+0x5b4>
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	61 ec       	ldi	r22, 0xC1	; 193
    4bf4:	74 e0       	ldi	r23, 0x04	; 4
    4bf6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  }
    4bfa:	60 96       	adiw	r28, 0x10	; 16
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	f8 94       	cli
    4c00:	de bf       	out	0x3e, r29	; 62
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	cf 91       	pop	r28
    4c08:	df 91       	pop	r29
    4c0a:	1f 91       	pop	r17
    4c0c:	0f 91       	pop	r16
    4c0e:	ff 90       	pop	r15
    4c10:	ef 90       	pop	r14
    4c12:	df 90       	pop	r13
    4c14:	cf 90       	pop	r12
    4c16:	bf 90       	pop	r11
    4c18:	08 95       	ret

00004c1a <testCRC()>:
  }

// Do some basic testing of CRC routines.
static void testCRC()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testCRC");
    4c1a:	88 e7       	ldi	r24, 0x78	; 120
    4c1c:	92 e0       	ldi	r25, 0x02	; 2
    4c1e:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Test the 7-bit CRC (0x5b) routine at a few points.
  const uint8_t crc0 = crc7_5B_update(0, 0); // Minimal stats payload with normal power and minimum temperature.
    4c22:	80 e0       	ldi	r24, 0x00	; 0
    4c24:	60 e0       	ldi	r22, 0x00	; 0
    4c26:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0 == crc0), crc0); 
    4c2a:	88 23       	and	r24, r24
    4c2c:	29 f0       	breq	.+10     	; 0x4c38 <testCRC()+0x1e>
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	6f e4       	ldi	r22, 0x4F	; 79
    4c32:	73 e0       	ldi	r23, 0x03	; 3
    4c34:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  const uint8_t crc1 = crc7_5B_update(0x40, 0); // Minimal stats payload with normal power and minimum temperature.
    4c38:	80 e4       	ldi	r24, 0x40	; 64
    4c3a:	60 e0       	ldi	r22, 0x00	; 0
    4c3c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x1a == crc1), crc1); 
    4c40:	8a 31       	cpi	r24, 0x1A	; 26
    4c42:	29 f0       	breq	.+10     	; 0x4c4e <testCRC()+0x34>
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	61 e5       	ldi	r22, 0x51	; 81
    4c48:	73 e0       	ldi	r23, 0x03	; 3
    4c4a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  const uint8_t crc2 = crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
    4c4e:	80 e5       	ldi	r24, 0x50	; 80
    4c50:	68 e2       	ldi	r22, 0x28	; 40
    4c52:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
    4c56:	8b 37       	cpi	r24, 0x7B	; 123
    4c58:	29 f0       	breq	.+10     	; 0x4c64 <testCRC()+0x4a>
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	63 e5       	ldi	r22, 0x53	; 83
    4c5e:	73 e0       	ldi	r23, 0x03	; 3
    4c60:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    4c64:	08 95       	ret

00004c66 <testTempCompand()>:
  AssertIsTrue(14 == v4);
  }


// Test temperature companding.
static void testTempCompand()
    4c66:	0f 93       	push	r16
    4c68:	1f 93       	push	r17
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempCompand");
    4c6e:	80 e8       	ldi	r24, 0x80	; 128
    4c70:	92 e0       	ldi	r25, 0x02	; 2
    4c72:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4c76:	c0 e0       	ldi	r28, 0x00	; 0
    4c78:	d0 e0       	ldi	r29, 0x00	; 0
  // Ensure that all (whole) temperatures from 0C to 100C are correctly compressed and expanded.
  for(int i = 0; i <= 100; ++i)
    {
    //DEBUG_SERIAL_PRINT(i<<4); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(compressTempC16(i<<4)); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(expandTempC16(compressTempC16(i<<4))); DEBUG_SERIAL_PRINTLN();
    AssertIsTrueWithErr(i<<4 == expandTempC16(compressTempC16(i<<4)), i);
    4c7a:	8e 01       	movw	r16, r28
    4c7c:	84 e0       	ldi	r24, 0x04	; 4
    4c7e:	00 0f       	add	r16, r16
    4c80:	11 1f       	adc	r17, r17
    4c82:	8a 95       	dec	r24
    4c84:	e1 f7       	brne	.-8      	; 0x4c7e <testTempCompand()+0x18>
    4c86:	c8 01       	movw	r24, r16
    4c88:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <compressTempC16(int)>
    4c8c:	0e 94 21 06 	call	0xc42	; 0xc42 <expandTempC16(unsigned char)>
    4c90:	08 17       	cp	r16, r24
    4c92:	19 07       	cpc	r17, r25
    4c94:	29 f0       	breq	.+10     	; 0x4ca0 <testTempCompand()+0x3a>
    4c96:	ce 01       	movw	r24, r28
    4c98:	6a e8       	ldi	r22, 0x8A	; 138
    4c9a:	75 e0       	ldi	r23, 0x05	; 5
    4c9c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
// Test temperature companding.
static void testTempCompand()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempCompand");
  // Ensure that all (whole) temperatures from 0C to 100C are correctly compressed and expanded.
  for(int i = 0; i <= 100; ++i)
    4ca0:	21 96       	adiw	r28, 0x01	; 1
    4ca2:	c5 36       	cpi	r28, 0x65	; 101
    4ca4:	d1 05       	cpc	r29, r1
    4ca6:	49 f7       	brne	.-46     	; 0x4c7a <testTempCompand()+0x14>
    {
    //DEBUG_SERIAL_PRINT(i<<4); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(compressTempC16(i<<4)); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(expandTempC16(compressTempC16(i<<4))); DEBUG_SERIAL_PRINTLN();
    AssertIsTrueWithErr(i<<4 == expandTempC16(compressTempC16(i<<4)), i);
    }
  // Ensure that out-of-range inputs are coerced to the limits.
  AssertIsTrueWithErr(0 == expandTempC16(compressTempC16(-1)), -1);
    4ca8:	8f ef       	ldi	r24, 0xFF	; 255
    4caa:	9f ef       	ldi	r25, 0xFF	; 255
    4cac:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <compressTempC16(int)>
    4cb0:	0e 94 21 06 	call	0xc42	; 0xc42 <expandTempC16(unsigned char)>
    4cb4:	89 2b       	or	r24, r25
    4cb6:	31 f0       	breq	.+12     	; 0x4cc4 <testTempCompand()+0x5e>
    4cb8:	8f ef       	ldi	r24, 0xFF	; 255
    4cba:	9f ef       	ldi	r25, 0xFF	; 255
    4cbc:	6d e8       	ldi	r22, 0x8D	; 141
    4cbe:	75 e0       	ldi	r23, 0x05	; 5
    4cc0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((100<<4) == expandTempC16(compressTempC16(101<<4)), 101);
    4cc4:	80 e5       	ldi	r24, 0x50	; 80
    4cc6:	96 e0       	ldi	r25, 0x06	; 6
    4cc8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <compressTempC16(int)>
    4ccc:	0e 94 21 06 	call	0xc42	; 0xc42 <expandTempC16(unsigned char)>
    4cd0:	80 54       	subi	r24, 0x40	; 64
    4cd2:	96 40       	sbci	r25, 0x06	; 6
    4cd4:	31 f0       	breq	.+12     	; 0x4ce2 <testTempCompand()+0x7c>
    4cd6:	85 e6       	ldi	r24, 0x65	; 101
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	6e e8       	ldi	r22, 0x8E	; 142
    4cdc:	75 e0       	ldi	r23, 0x05	; 5
    4cde:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(COMPRESSION_C16_CEIL_VAL_AFTER == compressTempC16(102<<4), COMPRESSION_C16_CEIL_VAL_AFTER); // Verify ceiling.
    4ce2:	80 e6       	ldi	r24, 0x60	; 96
    4ce4:	96 e0       	ldi	r25, 0x06	; 6
    4ce6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <compressTempC16(int)>
    4cea:	88 3f       	cpi	r24, 0xF8	; 248
    4cec:	31 f0       	breq	.+12     	; 0x4cfa <testTempCompand()+0x94>
    4cee:	88 ef       	ldi	r24, 0xF8	; 248
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	6f e8       	ldi	r22, 0x8F	; 143
    4cf4:	75 e0       	ldi	r23, 0x05	; 5
    4cf6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(COMPRESSION_C16_CEIL_VAL_AFTER < 0xff);
  // Ensure that 'unset' compressed value expands to 'unset' uncompressed value.
  AssertIsTrue(STATS_UNSET_INT == expandTempC16(STATS_UNSET_BYTE));
    4cfa:	8f ef       	ldi	r24, 0xFF	; 255
    4cfc:	0e 94 21 06 	call	0xc42	; 0xc42 <expandTempC16(unsigned char)>
    4d00:	8f 5f       	subi	r24, 0xFF	; 255
    4d02:	9f 47       	sbci	r25, 0x7F	; 127
    4d04:	31 f0       	breq	.+12     	; 0x4d12 <testTempCompand()+0xac>
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	62 e9       	ldi	r22, 0x92	; 146
    4d0c:	75 e0       	ldi	r23, 0x05	; 5
    4d0e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  }
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	08 95       	ret

00004d1c <testRNG8()>:
  // Covers the key cases 0 and 254 in particular.
  for(int i = 256; --i >= 0; ) { AssertIsTrue((uint8_t)i == smoothStatsValue((uint8_t)i, (uint8_t)i)); }
  }

// Test for expected behaviour of RNG8 PRNG starting from a known state.
static void testRNG8()
    4d1c:	ef 92       	push	r14
    4d1e:	ff 92       	push	r15
    4d20:	0f 93       	push	r16
    4d22:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testRNG8");
    4d24:	80 e9       	ldi	r24, 0x90	; 144
    4d26:	92 e0       	ldi	r25, 0x02	; 2
    4d28:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Reset to known state; API not normally exposed and only exists for unit tests.
  resetRNG8();
    4d2c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <resetRNG8()>
  // Extract and check a few initial values.
  const uint8_t v1 = randRNG8();
    4d30:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4d34:	18 2f       	mov	r17, r24
  const uint8_t v2 = randRNG8();
    4d36:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4d3a:	08 2f       	mov	r16, r24
  const uint8_t v3 = randRNG8();
    4d3c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4d40:	f8 2e       	mov	r15, r24
  const uint8_t v4 = randRNG8();
    4d42:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    4d46:	e8 2e       	mov	r14, r24
  //DEBUG_SERIAL_PRINT(v1); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v2); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v3); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v4); DEBUG_SERIAL_PRINTLN();
  AssertIsTrue(1 == v1);
    4d48:	11 30       	cpi	r17, 0x01	; 1
    4d4a:	31 f0       	breq	.+12     	; 0x4d58 <testRNG8()+0x3c>
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	6b e7       	ldi	r22, 0x7B	; 123
    4d52:	75 e0       	ldi	r23, 0x05	; 5
    4d54:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(0 == v2);
    4d58:	00 23       	and	r16, r16
    4d5a:	31 f0       	breq	.+12     	; 0x4d68 <testRNG8()+0x4c>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	6c e7       	ldi	r22, 0x7C	; 124
    4d62:	75 e0       	ldi	r23, 0x05	; 5
    4d64:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(3 == v3);
    4d68:	83 e0       	ldi	r24, 0x03	; 3
    4d6a:	f8 16       	cp	r15, r24
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <testRNG8()+0x5e>
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	6d e7       	ldi	r22, 0x7D	; 125
    4d74:	75 e0       	ldi	r23, 0x05	; 5
    4d76:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrue(14 == v4);
    4d7a:	8e e0       	ldi	r24, 0x0E	; 14
    4d7c:	e8 16       	cp	r14, r24
    4d7e:	31 f0       	breq	.+12     	; 0x4d8c <testRNG8()+0x70>
    4d80:	80 e0       	ldi	r24, 0x00	; 0
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	6e e7       	ldi	r22, 0x7E	; 126
    4d86:	75 e0       	ldi	r23, 0x05	; 5
    4d88:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  }
    4d8c:	1f 91       	pop	r17
    4d8e:	0f 91       	pop	r16
    4d90:	ff 90       	pop	r15
    4d92:	ef 90       	pop	r14
    4d94:	08 95       	ret

00004d96 <testRTCPersist()>:




// Test elements of RTC time persist/restore (without causing more EEPROM wear, if working correctly).
static void testRTCPersist()
    4d96:	ff 92       	push	r15
    4d98:	0f 93       	push	r16
    4d9a:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testRTCPersist");
    4d9c:	89 e9       	ldi	r24, 0x99	; 153
    4d9e:	92 e0       	ldi	r25, 0x02	; 2
    4da0:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Perform with interrupts shut out to avoid RTC ISR interferring.
  // This will effectively stall the RTC.
  bool minutesPersistOK;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4da4:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4da6:	f8 94       	cli
    {
    const uint_least16_t mb = getMinutesSinceMidnightLT();
    4da8:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <getMinutesSinceMidnightLT()>
    4dac:	8c 01       	movw	r16, r24
    persistRTC();
    4dae:	0e 94 e5 16 	call	0x2dca	; 0x2dca <persistRTC()>
    restoreRTC();
    4db2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <restoreRTC()>
    const uint_least16_t ma = getMinutesSinceMidnightLT();
    4db6:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <getMinutesSinceMidnightLT()>
    4dba:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4dbc:	ff be       	out	0x3f, r15	; 63
    // Check that persist/restore did not change live minutes value at least, within the 15-minute quantum used.
    minutesPersistOK = (mb/15 == ma/15);
    }
    AssertIsTrue(minutesPersistOK);
    4dbe:	c8 01       	movw	r24, r16
    4dc0:	6f e0       	ldi	r22, 0x0F	; 15
    4dc2:	70 e0       	ldi	r23, 0x00	; 0
    4dc4:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    4dc8:	9b 01       	movw	r18, r22
    4dca:	cf 01       	movw	r24, r30
    4dcc:	6f e0       	ldi	r22, 0x0F	; 15
    4dce:	70 e0       	ldi	r23, 0x00	; 0
    4dd0:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    4dd4:	26 17       	cp	r18, r22
    4dd6:	37 07       	cpc	r19, r23
    4dd8:	31 f0       	breq	.+12     	; 0x4de6 <testRTCPersist()+0x50>
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	69 ed       	ldi	r22, 0xD9	; 217
    4de0:	74 e0       	ldi	r23, 0x04	; 4
    4de2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  }
    4de6:	1f 91       	pop	r17
    4de8:	0f 91       	pop	r16
    4dea:	ff 90       	pop	r15
    4dec:	08 95       	ret

00004dee <testQuartiles()>:
  AssertIsTrue(!inWarmMode());
  AssertIsTrue(!inBakeMode());
  }

// Test basic behaviour of stats quartile routines.
static void testQuartiles()
    4dee:	df 92       	push	r13
    4df0:	ef 92       	push	r14
    4df2:	ff 92       	push	r15
    4df4:	0f 93       	push	r16
    4df6:	1f 93       	push	r17
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testQuartiles");
    4dfc:	83 eb       	ldi	r24, 0xB3	; 179
    4dfe:	92 e0       	ldi	r25, 0x02	; 2
    4e00:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4e04:	ee 24       	eor	r14, r14
    4e06:	34 c0       	rjmp	.+104    	; 0x4e70 <testQuartiles()+0x82>
  for(uint8_t i = 0; i < EE_STATS_SETS; ++i)
    {
    int bQ = 0, tQ = 0;
    for(uint8_t j = 0; j < 24; ++j)
      {
      const bool inTopQ = inOutlierQuartile(true, i, j);
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	6e 2d       	mov	r22, r14
    4e0c:	4f 2d       	mov	r20, r15
    4e0e:	0e 94 e7 06 	call	0xdce	; 0xdce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    4e12:	d8 2e       	mov	r13, r24
      if(inTopQ) { ++tQ; }
    4e14:	88 23       	and	r24, r24
    4e16:	11 f0       	breq	.+4      	; 0x4e1c <testQuartiles()+0x2e>
    4e18:	0f 5f       	subi	r16, 0xFF	; 255
    4e1a:	1f 4f       	sbci	r17, 0xFF	; 255
      const bool inBotQ = inOutlierQuartile(false, i, j);
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	6e 2d       	mov	r22, r14
    4e20:	4f 2d       	mov	r20, r15
    4e22:	0e 94 e7 06 	call	0xdce	; 0xdce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
      if(inBotQ) { ++bQ; }
    4e26:	81 11       	cpse	r24, r1
    4e28:	21 96       	adiw	r28, 0x01	; 1
      AssertIsTrue(!inTopQ || !inBotQ);
    4e2a:	dd 20       	and	r13, r13
    4e2c:	41 f0       	breq	.+16     	; 0x4e3e <testQuartiles()+0x50>
    4e2e:	88 23       	and	r24, r24
    4e30:	31 f0       	breq	.+12     	; 0x4e3e <testQuartiles()+0x50>
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	68 ea       	ldi	r22, 0xA8	; 168
    4e38:	72 e0       	ldi	r23, 0x02	; 2
    4e3a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Make sure that nothing can be seen as top and bottom quartile at same time.
  // Make sure that there cannot be too many items reported in each quartile
  for(uint8_t i = 0; i < EE_STATS_SETS; ++i)
    {
    int bQ = 0, tQ = 0;
    for(uint8_t j = 0; j < 24; ++j)
    4e3e:	f3 94       	inc	r15
    4e40:	88 e1       	ldi	r24, 0x18	; 24
    4e42:	f8 16       	cp	r15, r24
    4e44:	09 f7       	brne	.-62     	; 0x4e08 <testQuartiles()+0x1a>
      if(inTopQ) { ++tQ; }
      const bool inBotQ = inOutlierQuartile(false, i, j);
      if(inBotQ) { ++bQ; }
      AssertIsTrue(!inTopQ || !inBotQ);
      }
    AssertIsTrue(bQ <= 6);
    4e46:	27 97       	sbiw	r28, 0x07	; 7
    4e48:	34 f0       	brlt	.+12     	; 0x4e56 <testQuartiles()+0x68>
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	6a ea       	ldi	r22, 0xAA	; 170
    4e50:	72 e0       	ldi	r23, 0x02	; 2
    4e52:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    AssertIsTrue(tQ <= 6);
    4e56:	07 30       	cpi	r16, 0x07	; 7
    4e58:	11 05       	cpc	r17, r1
    4e5a:	34 f0       	brlt	.+12     	; 0x4e68 <testQuartiles()+0x7a>
    4e5c:	80 e0       	ldi	r24, 0x00	; 0
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	6b ea       	ldi	r22, 0xAB	; 171
    4e62:	72 e0       	ldi	r23, 0x02	; 2
    4e64:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testQuartiles");
  // For whatever happens to be in EEPROM at the moment, test for sanity for all stats sets.
  // This does not write to EEPROM, so will not wear it out.
  // Make sure that nothing can be seen as top and bottom quartile at same time.
  // Make sure that there cannot be too many items reported in each quartile
  for(uint8_t i = 0; i < EE_STATS_SETS; ++i)
    4e68:	e3 94       	inc	r14
    4e6a:	8a e0       	ldi	r24, 0x0A	; 10
    4e6c:	e8 16       	cp	r14, r24
    4e6e:	31 f0       	breq	.+12     	; 0x4e7c <testQuartiles()+0x8e>
    4e70:	c0 e0       	ldi	r28, 0x00	; 0
    4e72:	d0 e0       	ldi	r29, 0x00	; 0
    4e74:	00 e0       	ldi	r16, 0x00	; 0
    4e76:	10 e0       	ldi	r17, 0x00	; 0
    4e78:	ff 24       	eor	r15, r15
    4e7a:	c6 cf       	rjmp	.-116    	; 0x4e08 <testQuartiles()+0x1a>
      AssertIsTrue(!inTopQ || !inBotQ);
      }
    AssertIsTrue(bQ <= 6);
    AssertIsTrue(tQ <= 6);
    }
  }
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	0f 91       	pop	r16
    4e84:	ff 90       	pop	r15
    4e86:	ef 90       	pop	r14
    4e88:	df 90       	pop	r13
    4e8a:	08 95       	ret

00004e8c <testSmoothStatsValue()>:

// Test that the simple smoothing function never generates an out of range value.
// In particular, with a legitimate value range of [0,254]
// smoothStatsValue() must never generate 255 (0xff) which looks like an uninitialised EEPROM value,
// nor wrap around in either direction.
static void testSmoothStatsValue()
    4e8c:	1f 93       	push	r17
    4e8e:	cf 93       	push	r28
    4e90:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSmoothStatsValue");
    4e92:	81 ec       	ldi	r24, 0xC1	; 193
    4e94:	92 e0       	ldi	r25, 0x02	; 2
    4e96:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4e9a:	c0 e0       	ldi	r28, 0x00	; 0
    4e9c:	d1 e0       	ldi	r29, 0x01	; 1
    4e9e:	0c c0       	rjmp	.+24     	; 0x4eb8 <testSmoothStatsValue()+0x2c>
  // Covers the key cases 0 and 254 in particular.
  for(int i = 256; --i >= 0; ) { AssertIsTrue((uint8_t)i == smoothStatsValue((uint8_t)i, (uint8_t)i)); }
    4ea0:	8c 2f       	mov	r24, r28
    4ea2:	6c 2f       	mov	r22, r28
    4ea4:	0e 94 9a 06 	call	0xd34	; 0xd34 <smoothStatsValue(unsigned char, unsigned char)>
    4ea8:	c8 17       	cp	r28, r24
    4eaa:	31 f0       	breq	.+12     	; 0x4eb8 <testSmoothStatsValue()+0x2c>
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	69 e6       	ldi	r22, 0x69	; 105
    4eb2:	75 e0       	ldi	r23, 0x05	; 5
    4eb4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    4eb8:	21 97       	sbiw	r28, 0x01	; 1
    4eba:	8f ef       	ldi	r24, 0xFF	; 255
    4ebc:	cf 3f       	cpi	r28, 0xFF	; 255
    4ebe:	d8 07       	cpc	r29, r24
    4ec0:	79 f7       	brne	.-34     	; 0x4ea0 <testSmoothStatsValue()+0x14>
  }
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	1f 91       	pop	r17
    4ec8:	08 95       	ret

00004eca <testFHTEncoding()>:
  const uint8_t crc2 = crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
  }

// Test of FHT8V bitstream encoding and decoding.
static void testFHTEncoding()
    4eca:	ef 92       	push	r14
    4ecc:	ff 92       	push	r15
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
    4ed2:	df 93       	push	r29
    4ed4:	cf 93       	push	r28
    4ed6:	cd b7       	in	r28, 0x3d	; 61
    4ed8:	de b7       	in	r29, 0x3e	; 62
    4eda:	c4 54       	subi	r28, 0x44	; 68
    4edc:	d0 40       	sbci	r29, 0x00	; 0
    4ede:	0f b6       	in	r0, 0x3f	; 63
    4ee0:	f8 94       	cli
    4ee2:	de bf       	out	0x3e, r29	; 62
    4ee4:	0f be       	out	0x3f, r0	; 63
    4ee6:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFHTEncoding");
    4ee8:	86 ed       	ldi	r24, 0xD6	; 214
    4eea:	92 e0       	ldi	r25, 0x02	; 2
    4eec:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  uint8_t buf[FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE];
  fht8v_msg_t command; // For encoding.
  fht8v_msg_t commandDecoded; // For decoding.

  // Encode an example message for a real house code and command (close valve).
  command.hc1 = 13;
    4ef0:	8d e0       	ldi	r24, 0x0D	; 13
    4ef2:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    4ef4:	89 e4       	ldi	r24, 0x49	; 73
    4ef6:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  command.command = 0x26;
    4ef8:	86 e2       	ldi	r24, 0x26	; 38
    4efa:	8b 83       	std	Y+3, r24	; 0x03
  command.extension = 0;
    4efc:	1c 82       	std	Y+4, r1	; 0x04
  memset(buf, 0xff, sizeof(buf));
    4efe:	8e 01       	movw	r16, r28
    4f00:	07 5f       	subi	r16, 0xF7	; 247
    4f02:	1f 4f       	sbci	r17, 0xFF	; 255
    4f04:	c8 01       	movw	r24, r16
    4f06:	6f ef       	ldi	r22, 0xFF	; 255
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	4c e3       	ldi	r20, 0x3C	; 60
    4f0c:	50 e0       	ldi	r21, 0x00	; 0
    4f0e:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  uint8_t *result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    4f12:	c8 01       	movw	r24, r16
    4f14:	be 01       	movw	r22, r28
    4f16:	6f 5f       	subi	r22, 0xFF	; 255
    4f18:	7f 4f       	sbci	r23, 0xFF	; 255
    4f1a:	0e 94 56 09 	call	0x12ac	; 0x12ac <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    4f1e:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    4f20:	fc 01       	movw	r30, r24
    4f22:	80 81       	ld	r24, Z
    4f24:	8f 3f       	cpi	r24, 0xFF	; 255
    4f26:	29 f0       	breq	.+10     	; 0x4f32 <testFHTEncoding()+0x68>
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	69 e6       	ldi	r22, 0x69	; 105
    4f2c:	73 e0       	ldi	r23, 0x03	; 3
    4f2e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 38), result1-buf); // Check correct length.
    4f32:	99 e0       	ldi	r25, 0x09	; 9
    4f34:	e9 2e       	mov	r14, r25
    4f36:	f1 2c       	mov	r15, r1
    4f38:	ec 0e       	add	r14, r28
    4f3a:	fd 1e       	adc	r15, r29
    4f3c:	c8 01       	movw	r24, r16
    4f3e:	8e 19       	sub	r24, r14
    4f40:	9f 09       	sbc	r25, r15
    4f42:	86 32       	cpi	r24, 0x26	; 38
    4f44:	91 05       	cpc	r25, r1
    4f46:	21 f0       	breq	.+8      	; 0x4f50 <testFHTEncoding()+0x86>
    4f48:	6b e6       	ldi	r22, 0x6B	; 107
    4f4a:	73 e0       	ldi	r23, 0x03	; 3
    4f4c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    4f50:	89 85       	ldd	r24, Y+9	; 0x09
    4f52:	8c 3c       	cpi	r24, 0xCC	; 204
    4f54:	29 f0       	breq	.+10     	; 0x4f60 <testFHTEncoding()+0x96>
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	6c e6       	ldi	r22, 0x6C	; 108
    4f5a:	73 e0       	ldi	r23, 0x03	; 3
    4f5c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6], buf[6]); // Check end of preamble.
    4f60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f62:	83 3e       	cpi	r24, 0xE3	; 227
    4f64:	29 f0       	breq	.+10     	; 0x4f70 <testFHTEncoding()+0xa6>
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	6d e6       	ldi	r22, 0x6D	; 109
    4f6a:	73 e0       	ldi	r23, 0x03	; 3
    4f6c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34], buf[34]); // Check part of checksum.
    4f70:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f72:	8e 3c       	cpi	r24, 0xCE	; 206
    4f74:	29 f0       	breq	.+10     	; 0x4f80 <testFHTEncoding()+0xb6>
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	6e e6       	ldi	r22, 0x6E	; 110
    4f7a:	73 e0       	ldi	r23, 0x03	; 3
    4f7c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    4f80:	ce 01       	movw	r24, r28
    4f82:	09 96       	adiw	r24, 0x09	; 9
    4f84:	be 01       	movw	r22, r28
    4f86:	6a 5c       	subi	r22, 0xCA	; 202
    4f88:	7f 4f       	sbci	r23, 0xFF	; 255
    4f8a:	ae 01       	movw	r20, r28
    4f8c:	4b 5f       	subi	r20, 0xFB	; 251
    4f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f90:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    4f94:	89 2b       	or	r24, r25
    4f96:	31 f4       	brne	.+12     	; 0x4fa4 <testFHTEncoding()+0xda>
    4f98:	80 e0       	ldi	r24, 0x00	; 0
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	60 e7       	ldi	r22, 0x70	; 112
    4f9e:	73 e0       	ldi	r23, 0x03	; 3
    4fa0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    4fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa6:	8d 30       	cpi	r24, 0x0D	; 13
    4fa8:	29 f0       	breq	.+10     	; 0x4fb4 <testFHTEncoding()+0xea>
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	61 e7       	ldi	r22, 0x71	; 113
    4fae:	73 e0       	ldi	r23, 0x03	; 3
    4fb0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    4fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    4fb6:	89 34       	cpi	r24, 0x49	; 73
    4fb8:	29 f0       	breq	.+10     	; 0x4fc4 <testFHTEncoding()+0xfa>
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	62 e7       	ldi	r22, 0x72	; 114
    4fbe:	73 e0       	ldi	r23, 0x03	; 3
    4fc0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    4fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    4fc6:	86 32       	cpi	r24, 0x26	; 38
    4fc8:	29 f0       	breq	.+10     	; 0x4fd4 <testFHTEncoding()+0x10a>
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	63 e7       	ldi	r22, 0x73	; 115
    4fce:	73 e0       	ldi	r23, 0x03	; 3
    4fd0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    4fd4:	88 85       	ldd	r24, Y+8	; 0x08
    4fd6:	88 23       	and	r24, r24
    4fd8:	29 f0       	breq	.+10     	; 0x4fe4 <testFHTEncoding()+0x11a>
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	64 e7       	ldi	r22, 0x74	; 116
    4fde:	73 e0       	ldi	r23, 0x03	; 3
    4fe0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

  // Encode shortest-possible (all-zero-bits) FHT8V command as 200us-bit-stream...
  command.hc1 = 0;
    4fe4:	19 82       	std	Y+1, r1	; 0x01
  command.hc2 = 0;
    4fe6:	1a 82       	std	Y+2, r1	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  command.command = 0;
    4fe8:	1b 82       	std	Y+3, r1	; 0x03
  command.extension = 0;
    4fea:	1c 82       	std	Y+4, r1	; 0x04
  memset(buf, 0xff, sizeof(buf));
    4fec:	8e 01       	movw	r16, r28
    4fee:	07 5f       	subi	r16, 0xF7	; 247
    4ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff2:	c8 01       	movw	r24, r16
    4ff4:	6f ef       	ldi	r22, 0xFF	; 255
    4ff6:	70 e0       	ldi	r23, 0x00	; 0
    4ff8:	4c e3       	ldi	r20, 0x3C	; 60
    4ffa:	50 e0       	ldi	r21, 0x00	; 0
    4ffc:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    5000:	c8 01       	movw	r24, r16
    5002:	be 01       	movw	r22, r28
    5004:	6f 5f       	subi	r22, 0xFF	; 255
    5006:	7f 4f       	sbci	r23, 0xFF	; 255
    5008:	0e 94 56 09 	call	0x12ac	; 0x12ac <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    500c:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    500e:	fc 01       	movw	r30, r24
    5010:	80 81       	ld	r24, Z
    5012:	8f 3f       	cpi	r24, 0xFF	; 255
    5014:	29 f0       	breq	.+10     	; 0x5020 <testFHTEncoding()+0x156>
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	60 e8       	ldi	r22, 0x80	; 128
    501a:	73 e0       	ldi	r23, 0x03	; 3
    501c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 35), result1-buf); // Check correct length.
    5020:	c8 01       	movw	r24, r16
    5022:	8e 19       	sub	r24, r14
    5024:	9f 09       	sbc	r25, r15
    5026:	83 32       	cpi	r24, 0x23	; 35
    5028:	91 05       	cpc	r25, r1
    502a:	21 f0       	breq	.+8      	; 0x5034 <testFHTEncoding()+0x16a>
    502c:	62 e8       	ldi	r22, 0x82	; 130
    502e:	73 e0       	ldi	r23, 0x03	; 3
    5030:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5034:	89 85       	ldd	r24, Y+9	; 0x09
    5036:	8c 3c       	cpi	r24, 0xCC	; 204
    5038:	29 f0       	breq	.+10     	; 0x5044 <testFHTEncoding()+0x17a>
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	63 e8       	ldi	r22, 0x83	; 131
    503e:	73 e0       	ldi	r23, 0x03	; 3
    5040:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5044:	ce 01       	movw	r24, r28
    5046:	09 96       	adiw	r24, 0x09	; 9
    5048:	be 01       	movw	r22, r28
    504a:	6a 5c       	subi	r22, 0xCA	; 202
    504c:	7f 4f       	sbci	r23, 0xFF	; 255
    504e:	ae 01       	movw	r20, r28
    5050:	4b 5f       	subi	r20, 0xFB	; 251
    5052:	5f 4f       	sbci	r21, 0xFF	; 255
    5054:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5058:	89 2b       	or	r24, r25
    505a:	31 f4       	brne	.+12     	; 0x5068 <testFHTEncoding()+0x19e>
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	65 e8       	ldi	r22, 0x85	; 133
    5062:	73 e0       	ldi	r23, 0x03	; 3
    5064:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.hc1, commandDecoded.hc1);
    5068:	8d 81       	ldd	r24, Y+5	; 0x05
    506a:	88 23       	and	r24, r24
    506c:	29 f0       	breq	.+10     	; 0x5078 <testFHTEncoding()+0x1ae>
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	66 e8       	ldi	r22, 0x86	; 134
    5072:	73 e0       	ldi	r23, 0x03	; 3
    5074:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.hc2, commandDecoded.hc2);
    5078:	8e 81       	ldd	r24, Y+6	; 0x06
    507a:	88 23       	and	r24, r24
    507c:	29 f0       	breq	.+10     	; 0x5088 <testFHTEncoding()+0x1be>
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	67 e8       	ldi	r22, 0x87	; 135
    5082:	73 e0       	ldi	r23, 0x03	; 3
    5084:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.command, commandDecoded.command);
    5088:	8f 81       	ldd	r24, Y+7	; 0x07
    508a:	88 23       	and	r24, r24
    508c:	29 f0       	breq	.+10     	; 0x5098 <testFHTEncoding()+0x1ce>
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	68 e8       	ldi	r22, 0x88	; 136
    5092:	73 e0       	ldi	r23, 0x03	; 3
    5094:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5098:	88 85       	ldd	r24, Y+8	; 0x08
    509a:	88 23       	and	r24, r24
    509c:	29 f0       	breq	.+10     	; 0x50a8 <testFHTEncoding()+0x1de>
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	69 e8       	ldi	r22, 0x89	; 137
    50a2:	73 e0       	ldi	r23, 0x03	; 3
    50a4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

  // Encode longest-possible (as many 1-bits as possible) FHT8V command as 200us-bit-stream...
  command.hc1 = 0xff;
    50a8:	8f ef       	ldi	r24, 0xFF	; 255
    50aa:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 0xff;
    50ac:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0xff;
#endif
  command.command = 0xff;
    50ae:	8b 83       	std	Y+3, r24	; 0x03
  command.extension = 0xff;
    50b0:	8c 83       	std	Y+4, r24	; 0x04
  memset(buf, 0xff, sizeof(buf));
    50b2:	8e 01       	movw	r16, r28
    50b4:	07 5f       	subi	r16, 0xF7	; 247
    50b6:	1f 4f       	sbci	r17, 0xFF	; 255
    50b8:	c8 01       	movw	r24, r16
    50ba:	6f ef       	ldi	r22, 0xFF	; 255
    50bc:	70 e0       	ldi	r23, 0x00	; 0
    50be:	4c e3       	ldi	r20, 0x3C	; 60
    50c0:	50 e0       	ldi	r21, 0x00	; 0
    50c2:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    50c6:	c8 01       	movw	r24, r16
    50c8:	be 01       	movw	r22, r28
    50ca:	6f 5f       	subi	r22, 0xFF	; 255
    50cc:	7f 4f       	sbci	r23, 0xFF	; 255
    50ce:	0e 94 56 09 	call	0x12ac	; 0x12ac <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    50d2:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    50d4:	fc 01       	movw	r30, r24
    50d6:	80 81       	ld	r24, Z
    50d8:	8f 3f       	cpi	r24, 0xFF	; 255
    50da:	29 f0       	breq	.+10     	; 0x50e6 <testFHTEncoding()+0x21c>
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	65 e9       	ldi	r22, 0x95	; 149
    50e0:	73 e0       	ldi	r23, 0x03	; 3
    50e2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
    50e6:	c8 01       	movw	r24, r16
    50e8:	8e 19       	sub	r24, r14
    50ea:	9f 09       	sbc	r25, r15
    50ec:	8e 32       	cpi	r24, 0x2E	; 46
    50ee:	91 05       	cpc	r25, r1
    50f0:	24 f0       	brlt	.+8      	; 0x50fa <testFHTEncoding()+0x230>
    50f2:	66 e9       	ldi	r22, 0x96	; 150
    50f4:	73 e0       	ldi	r23, 0x03	; 3
    50f6:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    50fa:	89 85       	ldd	r24, Y+9	; 0x09
    50fc:	8c 3c       	cpi	r24, 0xCC	; 204
    50fe:	29 f0       	breq	.+10     	; 0x510a <testFHTEncoding()+0x240>
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	67 e9       	ldi	r22, 0x97	; 151
    5104:	73 e0       	ldi	r23, 0x03	; 3
    5106:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    510a:	ce 01       	movw	r24, r28
    510c:	09 96       	adiw	r24, 0x09	; 9
    510e:	be 01       	movw	r22, r28
    5110:	6a 5c       	subi	r22, 0xCA	; 202
    5112:	7f 4f       	sbci	r23, 0xFF	; 255
    5114:	ae 01       	movw	r20, r28
    5116:	4b 5f       	subi	r20, 0xFB	; 251
    5118:	5f 4f       	sbci	r21, 0xFF	; 255
    511a:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    511e:	89 2b       	or	r24, r25
    5120:	31 f4       	brne	.+12     	; 0x512e <testFHTEncoding()+0x264>
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	69 e9       	ldi	r22, 0x99	; 153
    5128:	73 e0       	ldi	r23, 0x03	; 3
    512a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.hc1, commandDecoded.hc1);
    512e:	8d 81       	ldd	r24, Y+5	; 0x05
    5130:	8f 3f       	cpi	r24, 0xFF	; 255
    5132:	29 f0       	breq	.+10     	; 0x513e <testFHTEncoding()+0x274>
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	6a e9       	ldi	r22, 0x9A	; 154
    5138:	73 e0       	ldi	r23, 0x03	; 3
    513a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.hc2, commandDecoded.hc2);
    513e:	8e 81       	ldd	r24, Y+6	; 0x06
    5140:	8f 3f       	cpi	r24, 0xFF	; 255
    5142:	29 f0       	breq	.+10     	; 0x514e <testFHTEncoding()+0x284>
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	6b e9       	ldi	r22, 0x9B	; 155
    5148:	73 e0       	ldi	r23, 0x03	; 3
    514a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#ifdef FHT8V_ADR_USED
  AssertIsTrueWithErr(0xff == commandDecoded.address, commandDecoded.address);
#endif
  AssertIsTrueWithErr(0xff == commandDecoded.command, commandDecoded.command);
    514e:	8f 81       	ldd	r24, Y+7	; 0x07
    5150:	8f 3f       	cpi	r24, 0xFF	; 255
    5152:	29 f0       	breq	.+10     	; 0x515e <testFHTEncoding()+0x294>
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	6f e9       	ldi	r22, 0x9F	; 159
    5158:	73 e0       	ldi	r23, 0x03	; 3
    515a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.extension, commandDecoded.extension);
    515e:	88 85       	ldd	r24, Y+8	; 0x08
    5160:	8f 3f       	cpi	r24, 0xFF	; 255
    5162:	29 f0       	breq	.+10     	; 0x516e <testFHTEncoding()+0x2a4>
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	60 ea       	ldi	r22, 0xA0	; 160
    5168:	73 e0       	ldi	r23, 0x03	; 3
    516a:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  }
    516e:	cc 5b       	subi	r28, 0xBC	; 188
    5170:	df 4f       	sbci	r29, 0xFF	; 255
    5172:	0f b6       	in	r0, 0x3f	; 63
    5174:	f8 94       	cli
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	0f be       	out	0x3f, r0	; 63
    517a:	cd bf       	out	0x3d, r28	; 61
    517c:	cf 91       	pop	r28
    517e:	df 91       	pop	r29
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	ff 90       	pop	r15
    5186:	ef 90       	pop	r14
    5188:	08 95       	ret

0000518a <testFHTEncodingHeadAndTail()>:

// Test of heat and tail of FHT8V bitstream encoding and decoding.
static void testFHTEncodingHeadAndTail()
    518a:	7f 92       	push	r7
    518c:	8f 92       	push	r8
    518e:	9f 92       	push	r9
    5190:	af 92       	push	r10
    5192:	bf 92       	push	r11
    5194:	cf 92       	push	r12
    5196:	df 92       	push	r13
    5198:	ef 92       	push	r14
    519a:	ff 92       	push	r15
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	df 93       	push	r29
    51a2:	cf 93       	push	r28
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	c2 55       	subi	r28, 0x52	; 82
    51aa:	d0 40       	sbci	r29, 0x00	; 0
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFHTEncodingHeadAndTail");
    51b6:	86 ee       	ldi	r24, 0xE6	; 230
    51b8:	92 e0       	ldi	r25, 0x02	; 2
    51ba:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  uint8_t buf[FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE];
  fht8v_msg_t command; // For encoding.
  fht8v_msg_t commandDecoded; // For decoding.

  // Encode a basic message to set a valve to 0%, without headers or trailers.
  command.hc1 = 13;
    51be:	8d e0       	ldi	r24, 0x0D	; 13
    51c0:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    51c2:	89 e4       	ldi	r24, 0x49	; 73
    51c4:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    51c6:	8e 01       	movw	r16, r28
    51c8:	09 5e       	subi	r16, 0xE9	; 233
    51ca:	1f 4f       	sbci	r17, 0xFF	; 255
    51cc:	c8 01       	movw	r24, r16
    51ce:	6f ef       	ldi	r22, 0xFF	; 255
    51d0:	70 e0       	ldi	r23, 0x00	; 0
    51d2:	4c e3       	ldi	r20, 0x3C	; 60
    51d4:	50 e0       	ldi	r21, 0x00	; 0
    51d6:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  uint8_t *result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, false, &command, 0, NULL);
    51da:	c8 01       	movw	r24, r16
    51dc:	60 e0       	ldi	r22, 0x00	; 0
    51de:	ae 01       	movw	r20, r28
    51e0:	4f 5f       	subi	r20, 0xFF	; 255
    51e2:	5f 4f       	sbci	r21, 0xFF	; 255
    51e4:	20 e0       	ldi	r18, 0x00	; 0
    51e6:	00 e0       	ldi	r16, 0x00	; 0
    51e8:	10 e0       	ldi	r17, 0x00	; 0
    51ea:	0e 94 0f 0b 	call	0x161e	; 0x161e <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    51ee:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    51f0:	fc 01       	movw	r30, r24
    51f2:	80 81       	ld	r24, Z
    51f4:	8f 3f       	cpi	r24, 0xFF	; 255
    51f6:	29 f0       	breq	.+10     	; 0x5202 <testFHTEncodingHeadAndTail()+0x78>
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	6e eb       	ldi	r22, 0xBE	; 190
    51fc:	73 e0       	ldi	r23, 0x03	; 3
    51fe:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 38), result1-buf); // Check correct length: 38-byte body.
    5202:	f7 e1       	ldi	r31, 0x17	; 23
    5204:	8f 2e       	mov	r8, r31
    5206:	91 2c       	mov	r9, r1
    5208:	8c 0e       	add	r8, r28
    520a:	9d 1e       	adc	r9, r29
    520c:	c8 01       	movw	r24, r16
    520e:	88 19       	sub	r24, r8
    5210:	99 09       	sbc	r25, r9
    5212:	86 32       	cpi	r24, 0x26	; 38
    5214:	91 05       	cpc	r25, r1
    5216:	21 f0       	breq	.+8      	; 0x5220 <testFHTEncodingHeadAndTail()+0x96>
    5218:	60 ec       	ldi	r22, 0xC0	; 192
    521a:	73 e0       	ldi	r23, 0x03	; 3
    521c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5220:	8f 89       	ldd	r24, Y+23	; 0x17
    5222:	8c 3c       	cpi	r24, 0xCC	; 204
    5224:	29 f0       	breq	.+10     	; 0x5230 <testFHTEncodingHeadAndTail()+0xa6>
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	61 ec       	ldi	r22, 0xC1	; 193
    522a:	73 e0       	ldi	r23, 0x03	; 3
    522c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6], buf[6]); // Check end of preamble.
    5230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5232:	83 3e       	cpi	r24, 0xE3	; 227
    5234:	29 f0       	breq	.+10     	; 0x5240 <testFHTEncodingHeadAndTail()+0xb6>
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	62 ec       	ldi	r22, 0xC2	; 194
    523a:	73 e0       	ldi	r23, 0x03	; 3
    523c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34], buf[34]); // Check part of checksum.
    5240:	89 ad       	ldd	r24, Y+57	; 0x39
    5242:	8e 3c       	cpi	r24, 0xCE	; 206
    5244:	29 f0       	breq	.+10     	; 0x5250 <testFHTEncodingHeadAndTail()+0xc6>
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	63 ec       	ldi	r22, 0xC3	; 195
    524a:	73 e0       	ldi	r23, 0x03	; 3
    524c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5250:	be 01       	movw	r22, r28
    5252:	69 5e       	subi	r22, 0xE9	; 233
    5254:	7f 4f       	sbci	r23, 0xFF	; 255
    5256:	cb 01       	movw	r24, r22
    5258:	63 5d       	subi	r22, 0xD3	; 211
    525a:	7f 4f       	sbci	r23, 0xFF	; 255
    525c:	ae 01       	movw	r20, r28
    525e:	4b 5f       	subi	r20, 0xFB	; 251
    5260:	5f 4f       	sbci	r21, 0xFF	; 255
    5262:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5266:	89 2b       	or	r24, r25
    5268:	31 f4       	brne	.+12     	; 0x5276 <testFHTEncodingHeadAndTail()+0xec>
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	65 ec       	ldi	r22, 0xC5	; 197
    5270:	73 e0       	ldi	r23, 0x03	; 3
    5272:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    5276:	8d 81       	ldd	r24, Y+5	; 0x05
    5278:	8d 30       	cpi	r24, 0x0D	; 13
    527a:	29 f0       	breq	.+10     	; 0x5286 <testFHTEncodingHeadAndTail()+0xfc>
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	66 ec       	ldi	r22, 0xC6	; 198
    5280:	73 e0       	ldi	r23, 0x03	; 3
    5282:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    5286:	8e 81       	ldd	r24, Y+6	; 0x06
    5288:	89 34       	cpi	r24, 0x49	; 73
    528a:	29 f0       	breq	.+10     	; 0x5296 <testFHTEncodingHeadAndTail()+0x10c>
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	67 ec       	ldi	r22, 0xC7	; 199
    5290:	73 e0       	ldi	r23, 0x03	; 3
    5292:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    5296:	8f 81       	ldd	r24, Y+7	; 0x07
    5298:	86 32       	cpi	r24, 0x26	; 38
    529a:	29 f0       	breq	.+10     	; 0x52a6 <testFHTEncodingHeadAndTail()+0x11c>
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	68 ec       	ldi	r22, 0xC8	; 200
    52a0:	73 e0       	ldi	r23, 0x03	; 3
    52a2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    52a6:	88 85       	ldd	r24, Y+8	; 0x08
    52a8:	88 23       	and	r24, r24
    52aa:	29 f0       	breq	.+10     	; 0x52b6 <testFHTEncodingHeadAndTail()+0x12c>
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	69 ec       	ldi	r22, 0xC9	; 201
    52b0:	73 e0       	ldi	r23, 0x03	; 3
    52b2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Verify that trailer NOT present.
  AssertIsTrue(!verifyHeaderAndCRCForTrailingMinimalStatsPayload(result1));
    52b6:	c8 01       	movw	r24, r16
    52b8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    52bc:	88 23       	and	r24, r24
    52be:	31 f0       	breq	.+12     	; 0x52cc <testFHTEncodingHeadAndTail()+0x142>
    52c0:	80 e0       	ldi	r24, 0x00	; 0
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	6b ec       	ldi	r22, 0xCB	; 203
    52c6:	73 e0       	ldi	r23, 0x03	; 3
    52c8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

 // Encode a basic message to set a valve to 0%, with header but without trailer.
  command.hc1 = 13;
    52cc:	8d e0       	ldi	r24, 0x0D	; 13
    52ce:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    52d0:	89 e4       	ldi	r24, 0x49	; 73
    52d2:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    52d4:	8e 01       	movw	r16, r28
    52d6:	09 5e       	subi	r16, 0xE9	; 233
    52d8:	1f 4f       	sbci	r17, 0xFF	; 255
    52da:	c8 01       	movw	r24, r16
    52dc:	6f ef       	ldi	r22, 0xFF	; 255
    52de:	70 e0       	ldi	r23, 0x00	; 0
    52e0:	4c e3       	ldi	r20, 0x3C	; 60
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, NULL);
    52e8:	c8 01       	movw	r24, r16
    52ea:	61 e0       	ldi	r22, 0x01	; 1
    52ec:	ae 01       	movw	r20, r28
    52ee:	4f 5f       	subi	r20, 0xFF	; 255
    52f0:	5f 4f       	sbci	r21, 0xFF	; 255
    52f2:	20 e0       	ldi	r18, 0x00	; 0
    52f4:	00 e0       	ldi	r16, 0x00	; 0
    52f6:	10 e0       	ldi	r17, 0x00	; 0
    52f8:	0e 94 0f 0b 	call	0x161e	; 0x161e <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    52fc:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    52fe:	fc 01       	movw	r30, r24
    5300:	80 81       	ld	r24, Z
    5302:	8f 3f       	cpi	r24, 0xFF	; 255
    5304:	29 f0       	breq	.+10     	; 0x5310 <testFHTEncodingHeadAndTail()+0x186>
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	65 ed       	ldi	r22, 0xD5	; 213
    530a:	73 e0       	ldi	r23, 0x03	; 3
    530c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == RFM22_PREAMBLE_BYTES + 38), result1-buf); // Check correct length: preamble + 38-byte body.
    5310:	c8 01       	movw	r24, r16
    5312:	88 19       	sub	r24, r8
    5314:	99 09       	sbc	r25, r9
    5316:	8b 32       	cpi	r24, 0x2B	; 43
    5318:	91 05       	cpc	r25, r1
    531a:	21 f0       	breq	.+8      	; 0x5324 <testFHTEncodingHeadAndTail()+0x19a>
    531c:	67 ed       	ldi	r22, 0xD7	; 215
    531e:	73 e0       	ldi	r23, 0x03	; 3
    5320:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5324:	8f 89       	ldd	r24, Y+23	; 0x17
    5326:	8a 3a       	cpi	r24, 0xAA	; 170
    5328:	29 f0       	breq	.+10     	; 0x5334 <testFHTEncodingHeadAndTail()+0x1aa>
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	68 ed       	ldi	r22, 0xD8	; 216
    532e:	73 e0       	ldi	r23, 0x03	; 3
    5330:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5334:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5336:	8c 3c       	cpi	r24, 0xCC	; 204
    5338:	29 f0       	breq	.+10     	; 0x5344 <testFHTEncodingHeadAndTail()+0x1ba>
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	69 ed       	ldi	r22, 0xD9	; 217
    533e:	73 e0       	ldi	r23, 0x03	; 3
    5340:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6+RFM22_PREAMBLE_BYTES], buf[6+RFM22_PREAMBLE_BYTES]); // Check end of preamble.
    5344:	8a a1       	ldd	r24, Y+34	; 0x22
    5346:	83 3e       	cpi	r24, 0xE3	; 227
    5348:	29 f0       	breq	.+10     	; 0x5354 <testFHTEncodingHeadAndTail()+0x1ca>
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	6a ed       	ldi	r22, 0xDA	; 218
    534e:	73 e0       	ldi	r23, 0x03	; 3
    5350:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34+RFM22_PREAMBLE_BYTES], buf[34+RFM22_PREAMBLE_BYTES]); // Check part of checksum.
    5354:	8e ad       	ldd	r24, Y+62	; 0x3e
    5356:	8e 3c       	cpi	r24, 0xCE	; 206
    5358:	29 f0       	breq	.+10     	; 0x5364 <testFHTEncodingHeadAndTail()+0x1da>
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	6b ed       	ldi	r22, 0xDB	; 219
    535e:	73 e0       	ldi	r23, 0x03	; 3
    5360:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5364:	ce 01       	movw	r24, r28
    5366:	4c 96       	adiw	r24, 0x1c	; 28
    5368:	be 01       	movw	r22, r28
    536a:	6c 5b       	subi	r22, 0xBC	; 188
    536c:	7f 4f       	sbci	r23, 0xFF	; 255
    536e:	ae 01       	movw	r20, r28
    5370:	4b 5f       	subi	r20, 0xFB	; 251
    5372:	5f 4f       	sbci	r21, 0xFF	; 255
    5374:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5378:	89 2b       	or	r24, r25
    537a:	31 f4       	brne	.+12     	; 0x5388 <testFHTEncodingHeadAndTail()+0x1fe>
    537c:	80 e0       	ldi	r24, 0x00	; 0
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	6d ed       	ldi	r22, 0xDD	; 221
    5382:	73 e0       	ldi	r23, 0x03	; 3
    5384:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    5388:	8d 81       	ldd	r24, Y+5	; 0x05
    538a:	8d 30       	cpi	r24, 0x0D	; 13
    538c:	29 f0       	breq	.+10     	; 0x5398 <testFHTEncodingHeadAndTail()+0x20e>
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	6e ed       	ldi	r22, 0xDE	; 222
    5392:	73 e0       	ldi	r23, 0x03	; 3
    5394:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    5398:	8e 81       	ldd	r24, Y+6	; 0x06
    539a:	89 34       	cpi	r24, 0x49	; 73
    539c:	29 f0       	breq	.+10     	; 0x53a8 <testFHTEncodingHeadAndTail()+0x21e>
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	6f ed       	ldi	r22, 0xDF	; 223
    53a2:	73 e0       	ldi	r23, 0x03	; 3
    53a4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    53a8:	8f 81       	ldd	r24, Y+7	; 0x07
    53aa:	86 32       	cpi	r24, 0x26	; 38
    53ac:	29 f0       	breq	.+10     	; 0x53b8 <testFHTEncodingHeadAndTail()+0x22e>
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	60 ee       	ldi	r22, 0xE0	; 224
    53b2:	73 e0       	ldi	r23, 0x03	; 3
    53b4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    53b8:	88 85       	ldd	r24, Y+8	; 0x08
    53ba:	88 23       	and	r24, r24
    53bc:	29 f0       	breq	.+10     	; 0x53c8 <testFHTEncodingHeadAndTail()+0x23e>
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	61 ee       	ldi	r22, 0xE1	; 225
    53c2:	73 e0       	ldi	r23, 0x03	; 3
    53c4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Verify that trailer NOT present.
  AssertIsTrue(!verifyHeaderAndCRCForTrailingMinimalStatsPayload(result1));
    53c8:	c8 01       	movw	r24, r16
    53ca:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    53ce:	88 23       	and	r24, r24
    53d0:	31 f0       	breq	.+12     	; 0x53de <testFHTEncodingHeadAndTail()+0x254>
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	63 ee       	ldi	r22, 0xE3	; 227
    53d8:	73 e0       	ldi	r23, 0x03	; 3
    53da:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>

  // Encode a basic message to set a valve to 0%, with header and trailer.
  command.hc1 = 13;
    53de:	8d e0       	ldi	r24, 0x0D	; 13
    53e0:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    53e2:	89 e4       	ldi	r24, 0x49	; 73
    53e4:	8a 83       	std	Y+2, r24	; 0x02
    53e6:	e9 e0       	ldi	r30, 0x09	; 9
    53e8:	ee 2e       	mov	r14, r30
    53ea:	f1 2c       	mov	r15, r1
    53ec:	ec 0e       	add	r14, r28
    53ee:	fd 1e       	adc	r15, r29
    53f0:	87 e0       	ldi	r24, 0x07	; 7
    53f2:	f7 01       	movw	r30, r14
    53f4:	11 92       	st	Z+, r1
    53f6:	8a 95       	dec	r24
    53f8:	e9 f7       	brne	.-6      	; 0x53f4 <testFHTEncodingHeadAndTail()+0x26a>
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  FullStatsMessageCore_t fullStats;
  clearFullStatsMessageCore(&fullStats);
  captureEntropy1(); // Try stir a little noise into the PRNG before using it.
    53fa:	0e 94 c3 13 	call	0x2786	; 0x2786 <captureEntropy1()>
  const bool powerLow = !(randRNG8() & 0x40); // Random value.
    53fe:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    5402:	b8 2e       	mov	r11, r24
    5404:	b2 94       	swap	r11
    5406:	b6 94       	lsr	r11
    5408:	b6 94       	lsr	r11
    540a:	73 e0       	ldi	r23, 0x03	; 3
    540c:	b7 22       	and	r11, r23
    540e:	b0 94       	com	r11
    5410:	f1 e0       	ldi	r31, 0x01	; 1
    5412:	bf 22       	and	r11, r31
  fullStats.containsTempAndPower = true;
    5414:	89 85       	ldd	r24, Y+9	; 0x09
    5416:	82 60       	ori	r24, 0x02	; 2
    5418:	89 87       	std	Y+9, r24	; 0x09
  fullStats.tempAndPower.powerLow = powerLow;
    541a:	9b 2d       	mov	r25, r11
    541c:	97 95       	ror	r25
    541e:	99 27       	eor	r25, r25
    5420:	97 95       	ror	r25
    5422:	8d 85       	ldd	r24, Y+13	; 0x0d
    5424:	8f 77       	andi	r24, 0x7F	; 127
    5426:	89 2b       	or	r24, r25
    5428:	8d 87       	std	Y+13, r24	; 0x0d
  const int tempC16 = (randRNG8()&0xff) + (10 << 16); // Random value in range [10C, 25C[.
    542a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    542e:	78 2e       	mov	r7, r24
  fullStats.tempAndPower.tempC16 = tempC16;
    5430:	8c 87       	std	Y+12, r24	; 0x0c
    5432:	8d 85       	ldd	r24, Y+13	; 0x0d
    5434:	80 78       	andi	r24, 0x80	; 128
    5436:	8d 87       	std	Y+13, r24	; 0x0d
  memset(buf, 0xff, sizeof(buf));
    5438:	8e 01       	movw	r16, r28
    543a:	09 5e       	subi	r16, 0xE9	; 233
    543c:	1f 4f       	sbci	r17, 0xFF	; 255
    543e:	c8 01       	movw	r24, r16
    5440:	6f ef       	ldi	r22, 0xFF	; 255
    5442:	70 e0       	ldi	r23, 0x00	; 0
    5444:	4c e3       	ldi	r20, 0x3C	; 60
    5446:	50 e0       	ldi	r21, 0x00	; 0
    5448:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, &fullStats);
    544c:	c8 01       	movw	r24, r16
    544e:	61 e0       	ldi	r22, 0x01	; 1
    5450:	ae 01       	movw	r20, r28
    5452:	4f 5f       	subi	r20, 0xFF	; 255
    5454:	5f 4f       	sbci	r21, 0xFF	; 255
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	87 01       	movw	r16, r14
    545a:	0e 94 0f 0b 	call	0x161e	; 0x161e <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    545e:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5460:	fc 01       	movw	r30, r24
    5462:	80 81       	ld	r24, Z
    5464:	8f 3f       	cpi	r24, 0xFF	; 255
    5466:	29 f0       	breq	.+10     	; 0x5472 <testFHTEncodingHeadAndTail()+0x2e8>
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	65 ef       	ldi	r22, 0xF5	; 245
    546c:	73 e0       	ldi	r23, 0x03	; 3
    546e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr((result1 - buf == 41 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length:prepamble + 38-byte body + 3 byte trailer.
#else // Expect longer encoding in this case...
  AssertIsTrueWithErr((result1 - buf == 43 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length:prepamble + 38-byte body + 5ww33 byte trailer.
    5472:	c8 01       	movw	r24, r16
    5474:	88 19       	sub	r24, r8
    5476:	99 09       	sbc	r25, r9
    5478:	80 33       	cpi	r24, 0x30	; 48
    547a:	91 05       	cpc	r25, r1
    547c:	21 f0       	breq	.+8      	; 0x5486 <testFHTEncodingHeadAndTail()+0x2fc>
    547e:	6a ef       	ldi	r22, 0xFA	; 250
    5480:	73 e0       	ldi	r23, 0x03	; 3
    5482:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#endif
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5486:	8f 89       	ldd	r24, Y+23	; 0x17
    5488:	8a 3a       	cpi	r24, 0xAA	; 170
    548a:	29 f0       	breq	.+10     	; 0x5496 <testFHTEncodingHeadAndTail()+0x30c>
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	6c ef       	ldi	r22, 0xFC	; 252
    5490:	73 e0       	ldi	r23, 0x03	; 3
    5492:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5496:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5498:	8c 3c       	cpi	r24, 0xCC	; 204
    549a:	29 f0       	breq	.+10     	; 0x54a6 <testFHTEncodingHeadAndTail()+0x31c>
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	6d ef       	ldi	r22, 0xFD	; 253
    54a0:	73 e0       	ldi	r23, 0x03	; 3
    54a2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6+RFM22_PREAMBLE_BYTES], buf[6+RFM22_PREAMBLE_BYTES]); // Check end of preamble.
    54a6:	8a a1       	ldd	r24, Y+34	; 0x22
    54a8:	83 3e       	cpi	r24, 0xE3	; 227
    54aa:	29 f0       	breq	.+10     	; 0x54b6 <testFHTEncodingHeadAndTail()+0x32c>
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	6e ef       	ldi	r22, 0xFE	; 254
    54b0:	73 e0       	ldi	r23, 0x03	; 3
    54b2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34+RFM22_PREAMBLE_BYTES], buf[34+RFM22_PREAMBLE_BYTES]); // Check part of checksum.
    54b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    54b8:	8e 3c       	cpi	r24, 0xCE	; 206
    54ba:	29 f0       	breq	.+10     	; 0x54c6 <testFHTEncodingHeadAndTail()+0x33c>
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	6f ef       	ldi	r22, 0xFF	; 255
    54c0:	73 e0       	ldi	r23, 0x03	; 3
    54c2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  const uint8_t *afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
    54c6:	ce 01       	movw	r24, r28
    54c8:	4c 96       	adiw	r24, 0x1c	; 28
    54ca:	be 01       	movw	r22, r28
    54cc:	6c 5b       	subi	r22, 0xBC	; 188
    54ce:	7f 4f       	sbci	r23, 0xFF	; 255
    54d0:	ae 01       	movw	r20, r28
    54d2:	4b 5f       	subi	r20, 0xFB	; 251
    54d4:	5f 4f       	sbci	r21, 0xFF	; 255
    54d6:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    54da:	6c 01       	movw	r12, r24
  AssertIsTrue(afterBody);
    54dc:	00 97       	sbiw	r24, 0x00	; 0
    54de:	31 f4       	brne	.+12     	; 0x54ec <testFHTEncodingHeadAndTail()+0x362>
    54e0:	80 e0       	ldi	r24, 0x00	; 0
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	62 e0       	ldi	r22, 0x02	; 2
    54e6:	74 e0       	ldi	r23, 0x04	; 4
    54e8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    54ec:	8d 81       	ldd	r24, Y+5	; 0x05
    54ee:	8d 30       	cpi	r24, 0x0D	; 13
    54f0:	29 f0       	breq	.+10     	; 0x54fc <testFHTEncodingHeadAndTail()+0x372>
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	63 e0       	ldi	r22, 0x03	; 3
    54f6:	74 e0       	ldi	r23, 0x04	; 4
    54f8:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    54fc:	8e 81       	ldd	r24, Y+6	; 0x06
    54fe:	89 34       	cpi	r24, 0x49	; 73
    5500:	29 f0       	breq	.+10     	; 0x550c <testFHTEncodingHeadAndTail()+0x382>
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	64 e0       	ldi	r22, 0x04	; 4
    5506:	74 e0       	ldi	r23, 0x04	; 4
    5508:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    550c:	8f 81       	ldd	r24, Y+7	; 0x07
    550e:	86 32       	cpi	r24, 0x26	; 38
    5510:	29 f0       	breq	.+10     	; 0x551c <testFHTEncodingHeadAndTail()+0x392>
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	65 e0       	ldi	r22, 0x05	; 5
    5516:	74 e0       	ldi	r23, 0x04	; 4
    5518:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    551c:	88 85       	ldd	r24, Y+8	; 0x08
    551e:	88 23       	and	r24, r24
    5520:	29 f0       	breq	.+10     	; 0x552c <testFHTEncodingHeadAndTail()+0x3a2>
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	66 e0       	ldi	r22, 0x06	; 6
    5526:	74 e0       	ldi	r23, 0x04	; 4
    5528:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    552c:	76 01       	movw	r14, r12
    552e:	00 e0       	ldi	r16, 0x00	; 0
    5530:	10 e0       	ldi	r17, 0x00	; 0
  serialPrintlnAndFlush();
#endif
  // Verify (start of) trailer is OK.
  for(uint8_t i = 0; i < 3; ++i)
    {
    AssertIsTrueWithErr(0xff != afterBody[i], i); // No trailer byte should be 0xff (so 0xff can be terminator).
    5532:	f7 01       	movw	r30, r14
    5534:	80 81       	ld	r24, Z
    5536:	8f 3f       	cpi	r24, 0xFF	; 255
    5538:	29 f4       	brne	.+10     	; 0x5544 <testFHTEncodingHeadAndTail()+0x3ba>
    553a:	c8 01       	movw	r24, r16
    553c:	63 e1       	ldi	r22, 0x13	; 19
    553e:	74 e0       	ldi	r23, 0x04	; 4
    5540:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    AssertIsTrueWithErr(0 == (0x80 & afterBody[i]), i); // No trailer byte should have its high bit set.
    5544:	f7 01       	movw	r30, r14
    5546:	80 81       	ld	r24, Z
    5548:	87 ff       	sbrs	r24, 7
    554a:	05 c0       	rjmp	.+10     	; 0x5556 <testFHTEncodingHeadAndTail()+0x3cc>
    554c:	c8 01       	movw	r24, r16
    554e:	64 e1       	ldi	r22, 0x14	; 20
    5550:	74 e0       	ldi	r23, 0x04	; 4
    5552:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    5556:	0f 5f       	subi	r16, 0xFF	; 255
    5558:	1f 4f       	sbci	r17, 0xFF	; 255
    555a:	08 94       	sec
    555c:	e1 1c       	adc	r14, r1
    555e:	f1 1c       	adc	r15, r1
  serialPrintAndFlush(' ');
  serialPrintAndFlush(afterBody[2], HEX);
  serialPrintlnAndFlush();
#endif
  // Verify (start of) trailer is OK.
  for(uint8_t i = 0; i < 3; ++i)
    5560:	03 30       	cpi	r16, 0x03	; 3
    5562:	11 05       	cpc	r17, r1
    5564:	31 f7       	brne	.-52     	; 0x5532 <testFHTEncodingHeadAndTail()+0x3a8>
  extractTrailingMinimalStatsPayload(afterBody, &statsDecoded);
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  FullStatsMessageCore_t statsDecoded;
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
    5566:	6c e3       	ldi	r22, 0x3C	; 60
    5568:	a6 2e       	mov	r10, r22
    556a:	a8 0c       	add	r10, r8
    556c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    5570:	18 2f       	mov	r17, r24
    5572:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    5576:	28 2f       	mov	r18, r24
    5578:	6a 2d       	mov	r22, r10
    557a:	6c 19       	sub	r22, r12
    557c:	c6 01       	movw	r24, r12
    557e:	41 2f       	mov	r20, r17
    5580:	50 e0       	ldi	r21, 0x00	; 0
    5582:	8e 01       	movw	r16, r28
    5584:	00 5f       	subi	r16, 0xF0	; 240
    5586:	1f 4f       	sbci	r17, 0xFF	; 255
    5588:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    558c:	89 2b       	or	r24, r25
    558e:	31 f4       	brne	.+12     	; 0x559c <testFHTEncodingHeadAndTail()+0x412>
    5590:	80 e0       	ldi	r24, 0x00	; 0
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	61 e2       	ldi	r22, 0x21	; 33
    5596:	74 e0       	ldi	r23, 0x04	; 4
    5598:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
    559c:	6c 89       	ldd	r22, Y+20	; 0x14
    559e:	66 1f       	adc	r22, r22
    55a0:	66 27       	eor	r22, r22
    55a2:	66 1f       	adc	r22, r22
    55a4:	8b 2d       	mov	r24, r11
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	70 e0       	ldi	r23, 0x00	; 0
    55aa:	42 e2       	ldi	r20, 0x22	; 34
    55ac:	54 e0       	ldi	r21, 0x04	; 4
    55ae:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
    55b2:	6b 89       	ldd	r22, Y+19	; 0x13
    55b4:	8c 89       	ldd	r24, Y+20	; 0x14
    55b6:	78 2f       	mov	r23, r24
    55b8:	7f 77       	andi	r23, 0x7F	; 127
    55ba:	66 0f       	add	r22, r22
    55bc:	77 1f       	adc	r23, r23
    55be:	75 95       	asr	r23
    55c0:	67 95       	ror	r22
    55c2:	87 2d       	mov	r24, r7
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	43 e2       	ldi	r20, 0x23	; 35
    55c8:	54 e0       	ldi	r21, 0x04	; 4
    55ca:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
#endif

  // Encode a basic message to set a different valve to 0%, with header and trailer.
  // This one was apparently impossible to TX or RX...
  command.hc1 = 65;
    55ce:	81 e4       	ldi	r24, 0x41	; 65
    55d0:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 74;
    55d2:	8a e4       	ldi	r24, 0x4A	; 74
    55d4:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    55d6:	8e 01       	movw	r16, r28
    55d8:	09 5e       	subi	r16, 0xE9	; 233
    55da:	1f 4f       	sbci	r17, 0xFF	; 255
    55dc:	c8 01       	movw	r24, r16
    55de:	6f ef       	ldi	r22, 0xFF	; 255
    55e0:	70 e0       	ldi	r23, 0x00	; 0
    55e2:	4c e3       	ldi	r20, 0x3C	; 60
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, &fullStats);
    55ea:	c8 01       	movw	r24, r16
    55ec:	61 e0       	ldi	r22, 0x01	; 1
    55ee:	ae 01       	movw	r20, r28
    55f0:	4f 5f       	subi	r20, 0xFF	; 255
    55f2:	5f 4f       	sbci	r21, 0xFF	; 255
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	8e 01       	movw	r16, r28
    55f8:	07 5f       	subi	r16, 0xF7	; 247
    55fa:	1f 4f       	sbci	r17, 0xFF	; 255
    55fc:	0e 94 0f 0b 	call	0x161e	; 0x161e <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    5600:	7c 01       	movw	r14, r24
//serialPrintAndFlush(result1 - buf); serialPrintlnAndFlush();
  AssertIsTrueWithErr((result1 - buf) < sizeof(buf), (result1 - buf) - sizeof(buf)); // result1 points to the terminating 0xff, not just after it.
    5602:	8c 01       	movw	r16, r24
    5604:	08 19       	sub	r16, r8
    5606:	19 09       	sbc	r17, r9
    5608:	0c 33       	cpi	r16, 0x3C	; 60
    560a:	11 05       	cpc	r17, r1
    560c:	30 f0       	brcs	.+12     	; 0x561a <testFHTEncodingHeadAndTail()+0x490>
    560e:	c8 01       	movw	r24, r16
    5610:	cc 97       	sbiw	r24, 0x3c	; 60
    5612:	60 e3       	ldi	r22, 0x30	; 48
    5614:	74 e0       	ldi	r23, 0x04	; 4
    5616:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    561a:	f7 01       	movw	r30, r14
    561c:	80 81       	ld	r24, Z
    561e:	8f 3f       	cpi	r24, 0xFF	; 255
    5620:	29 f0       	breq	.+10     	; 0x562c <testFHTEncodingHeadAndTail()+0x4a2>
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	61 e3       	ldi	r22, 0x31	; 49
    5626:	74 e0       	ldi	r23, 0x04	; 4
    5628:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr((result1 - buf == 42 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length.
#else
  AssertIsTrueWithErr((result1 - buf == 44 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length.
    562c:	01 33       	cpi	r16, 0x31	; 49
    562e:	11 05       	cpc	r17, r1
    5630:	29 f0       	breq	.+10     	; 0x563c <testFHTEncodingHeadAndTail()+0x4b2>
    5632:	c8 01       	movw	r24, r16
    5634:	66 e3       	ldi	r22, 0x36	; 54
    5636:	74 e0       	ldi	r23, 0x04	; 4
    5638:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#endif
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    563c:	8f 89       	ldd	r24, Y+23	; 0x17
    563e:	8a 3a       	cpi	r24, 0xAA	; 170
    5640:	29 f0       	breq	.+10     	; 0x564c <testFHTEncodingHeadAndTail()+0x4c2>
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	68 e3       	ldi	r22, 0x38	; 56
    5646:	74 e0       	ldi	r23, 0x04	; 4
    5648:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    564c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    564e:	8c 3c       	cpi	r24, 0xCC	; 204
    5650:	29 f0       	breq	.+10     	; 0x565c <testFHTEncodingHeadAndTail()+0x4d2>
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	69 e3       	ldi	r22, 0x39	; 57
    5656:	74 e0       	ldi	r23, 0x04	; 4
    5658:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  // Attempt to decode.
  afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
    565c:	ce 01       	movw	r24, r28
    565e:	4c 96       	adiw	r24, 0x1c	; 28
    5660:	be 01       	movw	r22, r28
    5662:	6c 5b       	subi	r22, 0xBC	; 188
    5664:	7f 4f       	sbci	r23, 0xFF	; 255
    5666:	ae 01       	movw	r20, r28
    5668:	4b 5f       	subi	r20, 0xFB	; 251
    566a:	5f 4f       	sbci	r21, 0xFF	; 255
    566c:	0e 94 a6 0a 	call	0x154c	; 0x154c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5670:	6c 01       	movw	r12, r24
  AssertIsTrue(0 != afterBody);
    5672:	00 97       	sbiw	r24, 0x00	; 0
    5674:	31 f4       	brne	.+12     	; 0x5682 <testFHTEncodingHeadAndTail()+0x4f8>
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	6c e3       	ldi	r22, 0x3C	; 60
    567c:	74 e0       	ldi	r23, 0x04	; 4
    567e:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
//serialPrintAndFlush(afterBody - buf); serialPrintlnAndFlush();
  AssertIsEqual(5, (result1 - buf) - (afterBody - buf));
    5682:	08 0d       	add	r16, r8
    5684:	19 1d       	adc	r17, r9
    5686:	0c 19       	sub	r16, r12
    5688:	1d 09       	sbc	r17, r13
    568a:	85 e0       	ldi	r24, 0x05	; 5
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	b8 01       	movw	r22, r16
    5690:	4e e3       	ldi	r20, 0x3E	; 62
    5692:	54 e0       	ldi	r21, 0x04	; 4
    5694:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsTrueWithErr(65 == commandDecoded.hc1, commandDecoded.hc1);
    5698:	8d 81       	ldd	r24, Y+5	; 0x05
    569a:	81 34       	cpi	r24, 0x41	; 65
    569c:	29 f0       	breq	.+10     	; 0x56a8 <testFHTEncodingHeadAndTail()+0x51e>
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	6f e3       	ldi	r22, 0x3F	; 63
    56a2:	74 e0       	ldi	r23, 0x04	; 4
    56a4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(74 == commandDecoded.hc2, commandDecoded.hc2);
    56a8:	8e 81       	ldd	r24, Y+6	; 0x06
    56aa:	8a 34       	cpi	r24, 0x4A	; 74
    56ac:	29 f0       	breq	.+10     	; 0x56b8 <testFHTEncodingHeadAndTail()+0x52e>
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	60 e4       	ldi	r22, 0x40	; 64
    56b2:	74 e0       	ldi	r23, 0x04	; 4
    56b4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    56b8:	8f 81       	ldd	r24, Y+7	; 0x07
    56ba:	86 32       	cpi	r24, 0x26	; 38
    56bc:	29 f0       	breq	.+10     	; 0x56c8 <testFHTEncodingHeadAndTail()+0x53e>
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	61 e4       	ldi	r22, 0x41	; 65
    56c2:	74 e0       	ldi	r23, 0x04	; 4
    56c4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    56c8:	88 85       	ldd	r24, Y+8	; 0x08
    56ca:	88 23       	and	r24, r24
    56cc:	29 f0       	breq	.+10     	; 0x56d8 <testFHTEncodingHeadAndTail()+0x54e>
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	62 e4       	ldi	r22, 0x42	; 66
    56d2:	74 e0       	ldi	r23, 0x04	; 4
    56d4:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    56d8:	76 01       	movw	r14, r12
    56da:	00 e0       	ldi	r16, 0x00	; 0
    56dc:	10 e0       	ldi	r17, 0x00	; 0
  // Verify trailer start is OK.
  for(uint8_t i = 0; i < 3; ++i)
    {
    AssertIsTrueWithErr(0xff != afterBody[i], i); // No trailer byte should be 0xff (so 0xff can be terminator).
    56de:	f7 01       	movw	r30, r14
    56e0:	80 81       	ld	r24, Z
    56e2:	8f 3f       	cpi	r24, 0xFF	; 255
    56e4:	29 f4       	brne	.+10     	; 0x56f0 <testFHTEncodingHeadAndTail()+0x566>
    56e6:	c8 01       	movw	r24, r16
    56e8:	66 e4       	ldi	r22, 0x46	; 70
    56ea:	74 e0       	ldi	r23, 0x04	; 4
    56ec:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    AssertIsTrueWithErr(0 == (0x80 & afterBody[i]), i); // No trailer byte should have its high bit set.
    56f0:	f7 01       	movw	r30, r14
    56f2:	80 81       	ld	r24, Z
    56f4:	87 ff       	sbrs	r24, 7
    56f6:	05 c0       	rjmp	.+10     	; 0x5702 <testFHTEncodingHeadAndTail()+0x578>
    56f8:	c8 01       	movw	r24, r16
    56fa:	67 e4       	ldi	r22, 0x47	; 71
    56fc:	74 e0       	ldi	r23, 0x04	; 4
    56fe:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    5702:	0f 5f       	subi	r16, 0xFF	; 255
    5704:	1f 4f       	sbci	r17, 0xFF	; 255
    5706:	08 94       	sec
    5708:	e1 1c       	adc	r14, r1
    570a:	f1 1c       	adc	r15, r1
  AssertIsTrueWithErr(65 == commandDecoded.hc1, commandDecoded.hc1);
  AssertIsTrueWithErr(74 == commandDecoded.hc2, commandDecoded.hc2);
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
  // Verify trailer start is OK.
  for(uint8_t i = 0; i < 3; ++i)
    570c:	03 30       	cpi	r16, 0x03	; 3
    570e:	11 05       	cpc	r17, r1
    5710:	31 f7       	brne	.-52     	; 0x56de <testFHTEncodingHeadAndTail()+0x554>
    }
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr(verifyHeaderAndCRCForTrailingMinimalStatsPayload(afterBody), *afterBody);
#endif
  // Decode values...
  memset(&statsDecoded, 0xff, sizeof(statsDecoded)); // Clear structure...
    5712:	8e 01       	movw	r16, r28
    5714:	00 5f       	subi	r16, 0xF0	; 240
    5716:	1f 4f       	sbci	r17, 0xFF	; 255
    5718:	c8 01       	movw	r24, r16
    571a:	6f ef       	ldi	r22, 0xFF	; 255
    571c:	70 e0       	ldi	r23, 0x00	; 0
    571e:	47 e0       	ldi	r20, 0x07	; 7
    5720:	50 e0       	ldi	r21, 0x00	; 0
    5722:	0e 94 8d 02 	call	0x51a	; 0x51a <memset>
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  extractTrailingMinimalStatsPayload(afterBody, &statsDecoded);
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
    5726:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <randRNG8()>
    572a:	f8 2e       	mov	r15, r24
    572c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <randRNG8NextBoolean()>
    5730:	28 2f       	mov	r18, r24
    5732:	ac 18       	sub	r10, r12
    5734:	c6 01       	movw	r24, r12
    5736:	6a 2d       	mov	r22, r10
    5738:	4f 2d       	mov	r20, r15
    573a:	50 e0       	ldi	r21, 0x00	; 0
    573c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    5740:	89 2b       	or	r24, r25
    5742:	31 f4       	brne	.+12     	; 0x5750 <testFHTEncodingHeadAndTail()+0x5c6>
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	63 e5       	ldi	r22, 0x53	; 83
    574a:	74 e0       	ldi	r23, 0x04	; 4
    574c:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
    5750:	6c 89       	ldd	r22, Y+20	; 0x14
    5752:	66 1f       	adc	r22, r22
    5754:	66 27       	eor	r22, r22
    5756:	66 1f       	adc	r22, r22
    5758:	8b 2d       	mov	r24, r11
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	70 e0       	ldi	r23, 0x00	; 0
    575e:	44 e5       	ldi	r20, 0x54	; 84
    5760:	54 e0       	ldi	r21, 0x04	; 4
    5762:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
    5766:	6b 89       	ldd	r22, Y+19	; 0x13
    5768:	8c 89       	ldd	r24, Y+20	; 0x14
    576a:	78 2f       	mov	r23, r24
    576c:	7f 77       	andi	r23, 0x7F	; 127
    576e:	66 0f       	add	r22, r22
    5770:	77 1f       	adc	r23, r23
    5772:	75 95       	asr	r23
    5774:	67 95       	ror	r22
    5776:	87 2d       	mov	r24, r7
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	45 e5       	ldi	r20, 0x55	; 85
    577c:	54 e0       	ldi	r21, 0x04	; 4
    577e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <errorIfNotEqual(int, int, int)>
#endif
  }
    5782:	ce 5a       	subi	r28, 0xAE	; 174
    5784:	df 4f       	sbci	r29, 0xFF	; 255
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	de bf       	out	0x3e, r29	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	cd bf       	out	0x3d, r28	; 61
    5790:	cf 91       	pop	r28
    5792:	df 91       	pop	r29
    5794:	1f 91       	pop	r17
    5796:	0f 91       	pop	r16
    5798:	ff 90       	pop	r15
    579a:	ef 90       	pop	r14
    579c:	df 90       	pop	r13
    579e:	cf 90       	pop	r12
    57a0:	bf 90       	pop	r11
    57a2:	af 90       	pop	r10
    57a4:	9f 90       	pop	r9
    57a6:	8f 90       	pop	r8
    57a8:	7f 90       	pop	r7
    57aa:	08 95       	ret

000057ac <testTempSensor()>:
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
// Test temperature sensor returns value in reasonable bounds for a test environment.
// Attempts to test that the sensor is actually present.
static void testTempSensor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempSensor");
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	93 e0       	ldi	r25, 0x03	; 3
    57b0:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int temp = TemperatureC16.read();
    57b4:	88 e9       	ldi	r24, 0x98	; 152
    57b6:	92 e0       	ldi	r25, 0x02	; 2
    57b8:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <RoomTemperatureC16::read()>
    57bc:	9c 01       	movw	r18, r24
  serialPrintAndFlush('C');
  serialPrintAndFlush(temp & 0xf, HEX);
  serialPrintlnAndFlush();
#endif
  // During testing temp should be above 0C (0C might indicate a missing/broken sensor) and below 50C.
  AssertIsTrueWithErr((temp > 0) && (temp < (50 << 4)), temp);
    57be:	01 97       	sbiw	r24, 0x01	; 1
    57c0:	8f 51       	subi	r24, 0x1F	; 31
    57c2:	93 40       	sbci	r25, 0x03	; 3
    57c4:	28 f0       	brcs	.+10     	; 0x57d0 <testTempSensor()+0x24>
    57c6:	c9 01       	movw	r24, r18
    57c8:	6b ea       	ldi	r22, 0xAB	; 171
    57ca:	75 e0       	ldi	r23, 0x05	; 5
    57cc:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    57d0:	08 95       	ret

000057d2 <testInternalTempSensor()>:
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
// Test that on-chip temperature sensor returns value in half-reasonable bounds for a test environment.
// Internal sensor may be +/- 10C out.
static void testInternalTempSensor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testInternalTempSensor");
    57d2:	80 e1       	ldi	r24, 0x10	; 16
    57d4:	93 e0       	ldi	r25, 0x03	; 3
    57d6:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int temp = readInternalTemperatureC16();
    57da:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <readInternalTemperatureC16()>
    57de:	9c 01       	movw	r18, r24
  serialPrintlnAndFlush();
#endif
  // During testing temp should be above 0C (0C might indicate a missing/broken sensor) and below 50C.
  // Internal sensor may be +/- 10C out.
  // DHD20141223: Just has a reading of ~17C from an otherwise-OK AVR with room temp ~20C.
  AssertIsTrueWithErr((temp > (-20 << 4)) && (temp < (60 << 4)), temp);
    57e0:	81 5c       	subi	r24, 0xC1	; 193
    57e2:	9e 4f       	sbci	r25, 0xFE	; 254
    57e4:	8f 5f       	subi	r24, 0xFF	; 255
    57e6:	94 40       	sbci	r25, 0x04	; 4
    57e8:	28 f0       	brcs	.+10     	; 0x57f4 <testInternalTempSensor()+0x22>
    57ea:	c9 01       	movw	r24, r18
    57ec:	60 ec       	ldi	r22, 0xC0	; 192
    57ee:	75 e0       	ldi	r23, 0x05	; 5
    57f0:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    57f4:	08 95       	ret

000057f6 <testSupplyVoltageMonitor()>:
#endif

#if !defined(DISABLE_SENSOR_UNIT_TESTS)
static void testSupplyVoltageMonitor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSupplyVoltageMonitor");
    57f6:	87 e2       	ldi	r24, 0x27	; 39
    57f8:	93 e0       	ldi	r25, 0x03	; 3
    57fa:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int mv = Supply_mV.read();
    57fe:	84 e7       	ldi	r24, 0x74	; 116
    5800:	92 e0       	ldi	r25, 0x02	; 2
    5802:	0e 94 48 13 	call	0x2690	; 0x2690 <SupplyVoltageMilliVolts::read()>
    5806:	9c 01       	movw	r18, r24
  serialPrintAndFlush(mv, DEC);
  serialPrintlnAndFlush();
#endif
  // During testing power supply voltage should be above ~1.7V BOD limit,
  // and below 3.6V for V0p2 boards which is RFM22 Vss limit.
  AssertIsTrueWithErr((mv >= 1700) && (mv <= 3600), mv);
    5808:	84 5a       	subi	r24, 0xA4	; 164
    580a:	96 40       	sbci	r25, 0x06	; 6
    580c:	8d 56       	subi	r24, 0x6D	; 109
    580e:	97 40       	sbci	r25, 0x07	; 7
    5810:	28 f0       	brcs	.+10     	; 0x581c <testSupplyVoltageMonitor()+0x26>
    5812:	c9 01       	movw	r24, r18
    5814:	60 ed       	ldi	r22, 0xD0	; 208
    5816:	75 e0       	ldi	r23, 0x05	; 5
    5818:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    581c:	08 95       	ret

0000581e <testEntropyGathering()>:
// Tests of entropy gathering routines.
//
// Maximum number of identical nominally random bits (or values with approx one bit of entropy) in a row tolerated.
// Set large enough that even soak testing for many hours should not trigger a failure if behaviour is plausibly correct.
#define MAX_IDENTICAL_BITS_SEQUENTIALLY 32
void testEntropyGathering()
    581e:	ef 92       	push	r14
    5820:	ff 92       	push	r15
    5822:	0f 93       	push	r16
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEntropyGathering");
    582a:	80 e4       	ldi	r24, 0x40	; 64
    582c:	93 e0       	ldi	r25, 0x03	; 3
    582e:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  // Test WDT jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jWDT... ");
  const uint8_t jWDT = clockJitterWDT();
    5832:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    5836:	18 2f       	mov	r17, r24
    5838:	c0 e2       	ldi	r28, 0x20	; 32
    583a:	d0 e0       	ldi	r29, 0x00	; 0
    583c:	0c c0       	rjmp	.+24     	; 0x5856 <testEntropyGathering()+0x38>
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    if(jWDT != clockJitterWDT()) { break; } // Stop as soon as a different value is obtained.
    583e:	0e 94 8e 13 	call	0x271c	; 0x271c <clockJitterWDT()>
    5842:	18 17       	cp	r17, r24
    5844:	59 f4       	brne	.+22     	; 0x585c <testEntropyGathering()+0x3e>
    AssertIsTrueWithErr(0 != i, i); // Generated too many identical values in a row. 
    5846:	20 97       	sbiw	r28, 0x00	; 0
    5848:	31 f4       	brne	.+12     	; 0x5856 <testEntropyGathering()+0x38>
    584a:	80 e0       	ldi	r24, 0x00	; 0
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	6c ee       	ldi	r22, 0xEC	; 236
    5850:	74 e0       	ldi	r23, 0x04	; 4
    5852:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEntropyGathering");

  // Test WDT jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jWDT... ");
  const uint8_t jWDT = clockJitterWDT();
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5856:	21 97       	sbiw	r28, 0x01	; 1
    5858:	d7 ff       	sbrs	r29, 7
    585a:	f1 cf       	rjmp	.-30     	; 0x583e <testEntropyGathering()+0x20>
  //DEBUG_SERIAL_PRINT((uint8_t)(t1j - t0j - 1));
  //DEBUG_SERIAL_PRINTLN();
#endif
  
  // Test noisy ADC read: assumed at least one bit of noise per call/result.
  const uint8_t nar1 = noisyADCRead(true);
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	0e 94 44 14 	call	0x2888	; 0x2888 <noisyADCRead(bool)>
    5862:	18 2f       	mov	r17, r24
    5864:	c0 e2       	ldi	r28, 0x20	; 32
    5866:	d0 e0       	ldi	r29, 0x00	; 0
    5868:	10 c0       	rjmp	.+32     	; 0x588a <testEntropyGathering()+0x6c>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    const uint8_t nar = noisyADCRead(true);
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	0e 94 44 14 	call	0x2888	; 0x2888 <noisyADCRead(bool)>
    if(nar1 != nar) { break; } // Stop as soon as a different value is obtained.
    5870:	18 17       	cp	r17, r24
    5872:	19 f0       	breq	.+6      	; 0x587a <testEntropyGathering()+0x5c>
    5874:	00 e0       	ldi	r16, 0x00	; 0
    5876:	10 e0       	ldi	r17, 0x00	; 0
    5878:	0c c0       	rjmp	.+24     	; 0x5892 <testEntropyGathering()+0x74>
#if 0
    DEBUG_SERIAL_PRINT_FLASHSTRING("repeat nar ");
    DEBUG_SERIAL_PRINTFMT(nar, BIN);
    DEBUG_SERIAL_PRINTLN();
#endif
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    587a:	20 97       	sbiw	r28, 0x00	; 0
    587c:	31 f4       	brne	.+12     	; 0x588a <testEntropyGathering()+0x6c>
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	64 e2       	ldi	r22, 0x24	; 36
    5884:	75 e0       	ldi	r23, 0x05	; 5
    5886:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("nar1 ");
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    588a:	21 97       	sbiw	r28, 0x01	; 1
    588c:	d7 ff       	sbrs	r29, 7
    588e:	ed cf       	rjmp	.-38     	; 0x586a <testEntropyGathering()+0x4c>
    5890:	f1 cf       	rjmp	.-30     	; 0x5874 <testEntropyGathering()+0x56>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }

  for(int w = 0; w < 2; ++w)
    {
    const bool whiten = (w != 0);
    5892:	ff 24       	eor	r15, r15
    5894:	01 15       	cp	r16, r1
    5896:	11 05       	cpc	r17, r1
    5898:	11 f0       	breq	.+4      	; 0x589e <testEntropyGathering()+0x80>
    589a:	ff 24       	eor	r15, r15
    589c:	f3 94       	inc	r15
    // Test secure random byte generation with and without whitening
    // to try to ensure that the underlying generation is sound.
    const uint8_t srb1 = getSecureRandomByte(whiten);
    589e:	8f 2d       	mov	r24, r15
    58a0:	0e 94 50 18 	call	0x30a0	; 0x30a0 <getSecureRandomByte(bool)>
    58a4:	e8 2e       	mov	r14, r24
    58a6:	c4 e0       	ldi	r28, 0x04	; 4
    58a8:	d0 e0       	ldi	r29, 0x00	; 0
    58aa:	0d c0       	rjmp	.+26     	; 0x58c6 <testEntropyGathering()+0xa8>
    if(whiten) { DEBUG_SERIAL_PRINT_FLASHSTRING(" whitened"); } 
    DEBUG_SERIAL_PRINTLN();
#endif
    for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
      {
      if(srb1 != getSecureRandomByte(whiten)) { break; } // Stop as soon as a different value is obtained.
    58ac:	8f 2d       	mov	r24, r15
    58ae:	0e 94 50 18 	call	0x30a0	; 0x30a0 <getSecureRandomByte(bool)>
    58b2:	e8 16       	cp	r14, r24
    58b4:	59 f4       	brne	.+22     	; 0x58cc <testEntropyGathering()+0xae>
      AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    58b6:	20 97       	sbiw	r28, 0x00	; 0
    58b8:	31 f4       	brne	.+12     	; 0x58c6 <testEntropyGathering()+0xa8>
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	66 e3       	ldi	r22, 0x36	; 54
    58c0:	75 e0       	ldi	r23, 0x05	; 5
    58c2:	0e 94 ce 19 	call	0x339c	; 0x339c <error(int, int)>
    DEBUG_SERIAL_PRINT_FLASHSTRING("srb1 ");
    DEBUG_SERIAL_PRINTFMT(srb1, BIN);
    if(whiten) { DEBUG_SERIAL_PRINT_FLASHSTRING(" whitened"); } 
    DEBUG_SERIAL_PRINTLN();
#endif
    for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    58c6:	21 97       	sbiw	r28, 0x01	; 1
    58c8:	d7 ff       	sbrs	r29, 7
    58ca:	f0 cf       	rjmp	.-32     	; 0x58ac <testEntropyGathering()+0x8e>
    DEBUG_SERIAL_PRINTLN();
#endif
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }

  for(int w = 0; w < 2; ++w)
    58cc:	0f 5f       	subi	r16, 0xFF	; 255
    58ce:	1f 4f       	sbci	r17, 0xFF	; 255
    58d0:	02 30       	cpi	r16, 0x02	; 2
    58d2:	11 05       	cpc	r17, r1
    58d4:	f1 f6       	brne	.-68     	; 0x5892 <testEntropyGathering()+0x74>
      {
      if(srb1 != getSecureRandomByte(whiten)) { break; } // Stop as soon as a different value is obtained.
      AssertIsTrue(0 != i); // Generated too many identical values in a row. 
      }
    }
  }
    58d6:	df 91       	pop	r29
    58d8:	cf 91       	pop	r28
    58da:	1f 91       	pop	r17
    58dc:	0f 91       	pop	r16
    58de:	ff 90       	pop	r15
    58e0:	ef 90       	pop	r14
    58e2:	08 95       	ret

000058e4 <loopUnitTest()>:



// To be called from loop() instead of main code when running unit tests.
// Tests generally flag an error and stop the test cycle with a call to panic() or error().
void loopUnitTest()
    58e4:	cf 93       	push	r28
    58e6:	df 93       	push	r29
    58e8:	c3 e0       	ldi	r28, 0x03	; 3
    58ea:	d0 e0       	ldi	r29, 0x00	; 0
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    {
    serialPrintAndFlush(F("Tests starting... "));
    58ec:	86 e3       	ldi	r24, 0x36	; 54
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(i);
    58f4:	ce 01       	movw	r24, r28
    58f6:	6a e0       	ldi	r22, 0x0A	; 10
    58f8:	70 e0       	ldi	r23, 0x00	; 0
    58fa:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
    serialPrintlnAndFlush();
    58fe:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
    sleepLowPowerMs(1000);
    5902:	88 ee       	ldi	r24, 0xE8	; 232
    5904:	93 e0       	ldi	r25, 0x03	; 3
    5906:	0e 94 b4 19 	call	0x3368	; 0x3368 <sleepLowPowerMs(unsigned int)>
void loopUnitTest()
  {
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    590a:	21 97       	sbiw	r28, 0x01	; 1
    590c:	79 f7       	brne	.-34     	; 0x58ec <loopUnitTest()+0x8>
    serialPrintAndFlush(F("Tests starting... "));
    serialPrintAndFlush(i);
    serialPrintlnAndFlush();
    sleepLowPowerMs(1000);
    }
  serialPrintlnAndFlush();
    590e:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>


  // Run the tests, fastest / newest / most-fragile / most-interesting first...
  testComputeRequiredTRVPercentOpen();
    5912:	0e 94 05 1a 	call	0x340a	; 0x340a <testComputeRequiredTRVPercentOpen()>
  testTargetComputation();
    5916:	0e 94 9e 1c 	call	0x393c	; 0x393c <testTargetComputation()>
  testSensorMocking();
    591a:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <testSensorMocking()>
  testModeControls();
    591e:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <testModeControls()>
  testJSONStats();
    5922:	0e 94 31 20 	call	0x4062	; 0x4062 <testJSONStats()>
  testJSONForTX();
    5926:	0e 94 8e 21 	call	0x431c	; 0x431c <testJSONForTX()>
  testFullStatsMessageCoreEncDec();
    592a:	0e 94 23 23 	call	0x4646	; 0x4646 <testFullStatsMessageCoreEncDec()>
  testCRC();
    592e:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <testCRC()>
  testTempCompand();
    5932:	0e 94 33 26 	call	0x4c66	; 0x4c66 <testTempCompand()>
  testRNG8();
    5936:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <testRNG8()>
  testEntropyGathering();
    593a:	0e 94 0f 2c 	call	0x581e	; 0x581e <testEntropyGathering()>
  testRTCPersist();
    593e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <testRTCPersist()>
  testEEPROM();
    5942:	0e 94 65 19 	call	0x32ca	; 0x32ca <testEEPROM()>
  testQuartiles();
    5946:	0e 94 f7 26 	call	0x4dee	; 0x4dee <testQuartiles()>
  testSmoothStatsValue();
    594a:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <testSmoothStatsValue()>
  testSleepUntilSubCycleTime();
  testFHTEncoding();
    594e:	0e 94 65 27 	call	0x4eca	; 0x4eca <testFHTEncoding()>
  testFHTEncodingHeadAndTail();
    5952:	0e 94 c5 28 	call	0x518a	; 0x518a <testFHTEncodingHeadAndTail()>

  // Sensor tests.
  // May need to be disabled if, for example, running in a simulator or on a partial board.
  // Should not involve anything too complex from the normal run-time, such as interrupts.
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
  testTempSensor();
    5956:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <testTempSensor()>
  testInternalTempSensor();
    595a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <testInternalTempSensor()>
  testSupplyVoltageMonitor();
    595e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <testSupplyVoltageMonitor()>
#endif


  // Announce successful loop completion and count.
  ++loopCount;
    5962:	80 91 8b 02 	lds	r24, 0x028B
    5966:	90 91 8c 02 	lds	r25, 0x028C
    596a:	01 96       	adiw	r24, 0x01	; 1
    596c:	90 93 8c 02 	sts	0x028C, r25
    5970:	80 93 8b 02 	sts	0x028B, r24
  serialPrintlnAndFlush();
    5974:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
  serialPrintAndFlush(F("%%% All tests completed OK, round "));
    5978:	83 e1       	ldi	r24, 0x13	; 19
    597a:	91 e0       	ldi	r25, 0x01	; 1
    597c:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(loopCount);
    5980:	80 91 8b 02 	lds	r24, 0x028B
    5984:	90 91 8c 02 	lds	r25, 0x028C
    5988:	6a e0       	ldi	r22, 0x0A	; 10
    598a:	70 e0       	ldi	r23, 0x00	; 0
    598c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
  serialPrintlnAndFlush();
    5990:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
  serialPrintlnAndFlush();
    5994:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
  serialPrintlnAndFlush();
    5998:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
  // Briefly flash the LED once to indicate successful completion of the tests.
  // (Panic/failure causes repeated rapid flash by contrast, and a hang may result in no flashes.)
  LED_HEATCALL_ON();
    599c:	5c 98       	cbi	0x0b, 4	; 11
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
  tinyPause();
  LED_HEATCALL_OFF();
    59a4:	5c 9a       	sbi	0x0b, 4	; 11
  // Help avoid tests spinning too fast even to see!
  // Also make panic() state flash clearly different to (faster than) this loop success/repeat.
  sleepLowPowerMs(2000);
    59a6:	80 ed       	ldi	r24, 0xD0	; 208
    59a8:	97 e0       	ldi	r25, 0x07	; 7
    59aa:	0e 94 b4 19 	call	0x3368	; 0x3368 <sleepLowPowerMs(unsigned int)>
  }
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	08 95       	ret

000059b4 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    59b4:	82 e3       	ldi	r24, 0x32	; 50
    59b6:	80 93 41 01 	sts	0x0141, r24
    59ba:	80 e3       	ldi	r24, 0x30	; 48
    59bc:	80 93 42 01 	sts	0x0142, r24
    59c0:	81 e3       	ldi	r24, 0x31	; 49
    59c2:	80 93 43 01 	sts	0x0143, r24
    59c6:	85 e3       	ldi	r24, 0x35	; 53
    59c8:	80 93 44 01 	sts	0x0144, r24
    59cc:	8a e4       	ldi	r24, 0x4A	; 74
    59ce:	80 93 46 01 	sts	0x0146, r24
    59d2:	81 e6       	ldi	r24, 0x61	; 97
    59d4:	80 93 47 01 	sts	0x0147, r24
    59d8:	8e e6       	ldi	r24, 0x6E	; 110
    59da:	80 93 48 01 	sts	0x0148, r24
    59de:	80 e2       	ldi	r24, 0x20	; 32
    59e0:	80 93 4a 01 	sts	0x014A, r24
    59e4:	88 e3       	ldi	r24, 0x38	; 56
    59e6:	80 93 4b 01 	sts	0x014B, r24
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    59ea:	08 95       	ret

000059ec <loop>:
#endif

#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#elif defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
    59ec:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <loopUnitTest()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    59f0:	08 95       	ret

000059f2 <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    59f2:	a0 e0       	ldi	r26, 0x00	; 0
    59f4:	b0 e0       	ldi	r27, 0x00	; 0
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	22 e1       	ldi	r18, 0x12	; 18
    59fc:	3a e7       	ldi	r19, 0x7A	; 122
    59fe:	40 e0       	ldi	r20, 0x00	; 0
    5a00:	50 e0       	ldi	r21, 0x00	; 0
    5a02:	0e 94 ae 39 	call	0x735c	; 0x735c <__mulsi3>
    5a06:	60 53       	subi	r22, 0x30	; 48
    5a08:	78 4f       	sbci	r23, 0xF8	; 248
    5a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0e:	20 ea       	ldi	r18, 0xA0	; 160
    5a10:	3f e0       	ldi	r19, 0x0F	; 15
    5a12:	40 e0       	ldi	r20, 0x00	; 0
    5a14:	50 e0       	ldi	r21, 0x00	; 0
    5a16:	0e 94 22 3a 	call	0x7444	; 0x7444 <__divmodsi4>
    5a1a:	da 01       	movw	r26, r20
    5a1c:	c9 01       	movw	r24, r18
    5a1e:	02 97       	sbiw	r24, 0x02	; 2
    5a20:	0e 94 29 12 	call	0x2452	; 0x2452 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5a24:	08 95       	ret

00005a26 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    5a26:	ff 92       	push	r15
    5a28:	0f 93       	push	r16
    5a2a:	1f 93       	push	r17
    5a2c:	cf 93       	push	r28
    5a2e:	df 93       	push	r29
    5a30:	f8 2e       	mov	r15, r24
    5a32:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5a34:	88 ee       	ldi	r24, 0xE8	; 232
    5a36:	93 e0       	ldi	r25, 0x03	; 3
    5a38:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5a3c:	82 ed       	ldi	r24, 0xD2	; 210
    5a3e:	93 e0       	ldi	r25, 0x03	; 3
    5a40:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5a44:	cf 2d       	mov	r28, r15
    5a46:	d0 e0       	ldi	r29, 0x00	; 0
    5a48:	ce 01       	movw	r24, r28
    5a4a:	6a e0       	ldi	r22, 0x0A	; 10
    5a4c:	70 e0       	ldi	r23, 0x00	; 0
    5a4e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5a52:	8f ec       	ldi	r24, 0xCF	; 207
    5a54:	93 e0       	ldi	r25, 0x03	; 3
    5a56:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    5a5a:	c8 01       	movw	r24, r16
    5a5c:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5a60:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5a64:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    5a66:	ff 20       	and	r15, r15
    5a68:	89 f0       	breq	.+34     	; 0x5a8c <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    5a6a:	84 ef       	ldi	r24, 0xF4	; 244
    5a6c:	91 e0       	ldi	r25, 0x01	; 1
    5a6e:	07 c0       	rjmp	.+14     	; 0x5a7e <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    5a70:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5a78:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5a7a:	8a ef       	ldi	r24, 0xFA	; 250
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    5a82:	21 97       	sbiw	r28, 0x01	; 1
    5a84:	8f ef       	ldi	r24, 0xFF	; 255
    5a86:	cf 3f       	cpi	r28, 0xFF	; 255
    5a88:	d8 07       	cpc	r29, r24
    5a8a:	91 f7       	brne	.-28     	; 0x5a70 <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5a8c:	8a ef       	ldi	r24, 0xFA	; 250
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5a94:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5a96:	88 ee       	ldi	r24, 0xE8	; 232
    5a98:	93 e0       	ldi	r25, 0x03	; 3
    5a9a:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <sleepLowPowerMs(unsigned int)>
  }
    5a9e:	df 91       	pop	r29
    5aa0:	cf 91       	pop	r28
    5aa2:	1f 91       	pop	r17
    5aa4:	0f 91       	pop	r16
    5aa6:	ff 90       	pop	r15
    5aa8:	08 95       	ret

00005aaa <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5aaa:	85 e2       	ldi	r24, 0x25	; 37
    5aac:	94 e0       	ldi	r25, 0x04	; 4
    5aae:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5ab2:	87 e0       	ldi	r24, 0x07	; 7
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	6a e0       	ldi	r22, 0x0A	; 10
    5ab8:	70 e0       	ldi	r23, 0x00	; 0
    5aba:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 4092 2015-01-08 18:03:35Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    5abe:	86 ee       	ldi	r24, 0xE6	; 230
    5ac0:	93 e0       	ldi	r25, 0x03	; 3
    5ac2:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5ac6:	81 e4       	ldi	r24, 0x41	; 65
    5ac8:	91 e0       	ldi	r25, 0x01	; 1
    5aca:	0e 94 04 19 	call	0x3208	; 0x3208 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5ace:	8c ed       	ldi	r24, 0xDC	; 220
    5ad0:	93 e0       	ldi	r25, 0x03	; 3
    5ad2:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5ad6:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
  }
    5ada:	08 95       	ret

00005adc <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    5adc:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5ae0:	0e 94 05 14 	call	0x280a	; 0x280a <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5ae4:	84 e0       	ldi	r24, 0x04	; 4
    5ae6:	61 e0       	ldi	r22, 0x01	; 1
    5ae8:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    5aec:	5c 98       	cbi	0x0b, 4	; 11
    5aee:	80 e0       	ldi	r24, 0x00	; 0
    5af0:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5af4:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5af6:	83 e0       	ldi	r24, 0x03	; 3
    5af8:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
    5afc:	f7 cf       	rjmp	.-18     	; 0x5aec <panic()+0x10>

00005afe <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    5afe:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5b02:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
  }
    5b06:	08 95       	ret

00005b08 <optionalPOST()>:
// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    5b08:	80 91 b2 00 	lds	r24, 0x00B2
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    5b0c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    5b10:	0e 94 38 16 	call	0x2c70	; 0x2c70 <RFM22CheckConnected()>
    5b14:	88 23       	and	r24, r24
    5b16:	11 f4       	brne	.+4      	; 0x5b1c <optionalPOST()+0x14>
    5b18:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    5b1c:	88 e6       	ldi	r24, 0x68	; 104
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    5b24:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck in the activated position.
  if((fastDigitalRead(BUTTON_MODE_L) == LOW)
    5b28:	4d 9b       	sbis	0x09, 5	; 9
    5b2a:	04 c0       	rjmp	.+8      	; 0x5b34 <optionalPOST()+0x2c>
    5b2c:	18 9b       	sbis	0x03, 0	; 3
    5b2e:	02 c0       	rjmp	.+4      	; 0x5b34 <optionalPOST()+0x2c>
    5b30:	4b 99       	sbic	0x09, 3	; 9
    5b32:	04 c0       	rjmp	.+8      	; 0x5b3c <optionalPOST()+0x34>
#endif
#if defined(BUTTON_LEARN2_L)
     || (fastDigitalRead(BUTTON_LEARN2_L) == LOW)
#endif
    )
    { panic(F("button stuck")); }
    5b34:	82 ec       	ldi	r24, 0xC2	; 194
    5b36:	93 e0       	ldi	r25, 0x03	; 3
    5b38:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <panic(__FlashStringHelper const*)>

  // Single POST checkpoint for speed.
#if defined(WAKEUP_32768HZ_XTAL)
  posPOST(0, F("Radio, xtal, buttons OK"));
#else
  posPOST(0, F("Radio, buttons OK"));
    5b3c:	80 e0       	ldi	r24, 0x00	; 0
    5b3e:	60 eb       	ldi	r22, 0xB0	; 176
    5b40:	73 e0       	ldi	r23, 0x03	; 3
    5b42:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <posPOST(unsigned char, __FlashStringHelper const*)>
#endif
  }
    5b46:	08 95       	ret

00005b48 <setup>:


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    5b48:	0f 93       	push	r16
    5b4a:	1f 93       	push	r17
    5b4c:	df 93       	push	r29
    5b4e:	cf 93       	push	r28
    5b50:	00 d0       	rcall	.+0      	; 0x5b52 <setup+0xa>
    5b52:	cd b7       	in	r28, 0x3d	; 61
    5b54:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    5b56:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <powerSetup()>
    5b5a:	0e e0       	ldi	r16, 0x0E	; 14
    5b5c:	10 e0       	ldi	r17, 0x00	; 0
    5b5e:	3d c0       	rjmp	.+122    	; 0x5bda <setup+0x92>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    5b60:	08 30       	cpi	r16, 0x08	; 8
    5b62:	11 05       	cpc	r17, r1
    5b64:	b1 f1       	breq	.+108    	; 0x5bd2 <setup+0x8a>
    5b66:	09 30       	cpi	r16, 0x09	; 9
    5b68:	11 05       	cpc	r17, r1
    5b6a:	6c f4       	brge	.+26     	; 0x5b86 <setup+0x3e>
    5b6c:	04 30       	cpi	r16, 0x04	; 4
    5b6e:	11 05       	cpc	r17, r1
    5b70:	e9 f0       	breq	.+58     	; 0x5bac <setup+0x64>
    5b72:	05 30       	cpi	r16, 0x05	; 5
    5b74:	11 05       	cpc	r17, r1
    5b76:	1c f4       	brge	.+6      	; 0x5b7e <setup+0x36>
    5b78:	17 ff       	sbrs	r17, 7
    5b7a:	2b c0       	rjmp	.+86     	; 0x5bd2 <setup+0x8a>
    5b7c:	10 c0       	rjmp	.+32     	; 0x5b9e <setup+0x56>
    5b7e:	05 30       	cpi	r16, 0x05	; 5
    5b80:	11 05       	cpc	r17, r1
    5b82:	69 f4       	brne	.+26     	; 0x5b9e <setup+0x56>
    5b84:	26 c0       	rjmp	.+76     	; 0x5bd2 <setup+0x8a>
    5b86:	0a 30       	cpi	r16, 0x0A	; 10
    5b88:	11 05       	cpc	r17, r1
    5b8a:	19 f1       	breq	.+70     	; 0x5bd2 <setup+0x8a>
    5b8c:	0a 30       	cpi	r16, 0x0A	; 10
    5b8e:	11 05       	cpc	r17, r1
    5b90:	ec f0       	brlt	.+58     	; 0x5bcc <setup+0x84>
    5b92:	0c 30       	cpi	r16, 0x0C	; 12
    5b94:	11 05       	cpc	r17, r1
    5b96:	e9 f0       	breq	.+58     	; 0x5bd2 <setup+0x8a>
    5b98:	0d 30       	cpi	r16, 0x0D	; 13
    5b9a:	11 05       	cpc	r17, r1
    5b9c:	71 f0       	breq	.+28     	; 0x5bba <setup+0x72>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    5b9e:	80 2f       	mov	r24, r16
    5ba0:	60 e0       	ldi	r22, 0x00	; 0
    5ba2:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <digitalWrite>
    5ba6:	80 2f       	mov	r24, r16
    5ba8:	61 e0       	ldi	r22, 0x01	; 1
    5baa:	15 c0       	rjmp	.+42     	; 0x5bd6 <setup+0x8e>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    5bac:	84 e0       	ldi	r24, 0x04	; 4
    5bae:	61 e0       	ldi	r22, 0x01	; 1
    5bb0:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
    5bb4:	84 e0       	ldi	r24, 0x04	; 4
    5bb6:	60 e0       	ldi	r22, 0x00	; 0
    5bb8:	06 c0       	rjmp	.+12     	; 0x5bc6 <setup+0x7e>
#endif

      // Switch secondary UI LED off for initialisation.
#ifdef LED_UI2_L
      case LED_UI2_L: { pinMode(LED_UI2_L, OUTPUT); digitalWrite(LED_UI2_L, HIGH); break; }
    5bba:	8d e0       	ldi	r24, 0x0D	; 13
    5bbc:	61 e0       	ldi	r22, 0x01	; 1
    5bbe:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
    5bc2:	8d e0       	ldi	r24, 0x0D	; 13
    5bc4:	61 e0       	ldi	r22, 0x01	; 1
    5bc6:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <digitalWrite>
    5bca:	07 c0       	rjmp	.+14     	; 0x5bda <setup+0x92>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    5bcc:	89 e0       	ldi	r24, 0x09	; 9
    5bce:	60 e0       	ldi	r22, 0x00	; 0
    5bd0:	02 c0       	rjmp	.+4      	; 0x5bd6 <setup+0x8e>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    5bd2:	80 2f       	mov	r24, r16
    5bd4:	62 e0       	ldi	r22, 0x02	; 2
    5bd6:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    5bda:	01 50       	subi	r16, 0x01	; 1
    5bdc:	10 40       	sbci	r17, 0x00	; 0
    5bde:	17 ff       	sbrs	r17, 7
    5be0:	bf cf       	rjmp	.-130    	; 0x5b60 <setup+0x18>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    5be2:	80 e1       	ldi	r24, 0x10	; 16
    5be4:	62 e0       	ldi	r22, 0x02	; 2
    5be6:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    5bea:	81 e1       	ldi	r24, 0x11	; 17
    5bec:	62 e0       	ldi	r22, 0x02	; 2
    5bee:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    5bf2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    5bf6:	8c e9       	ldi	r24, 0x9C	; 156
    5bf8:	93 e0       	ldi	r25, 0x03	; 3
    5bfa:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    5bfe:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5c02:	f9 99       	sbic	0x1f, 1	; 31
    5c04:	fe cf       	rjmp	.-4      	; 0x5c02 <setup+0xba>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5c06:	86 e0       	ldi	r24, 0x06	; 6
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	92 bd       	out	0x22, r25	; 34
    5c0c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5c0e:	f8 9a       	sbi	0x1f, 0	; 31
    5c10:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    5c12:	f9 99       	sbic	0x1f, 1	; 31
    5c14:	fe cf       	rjmp	.-4      	; 0x5c12 <setup+0xca>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    5c16:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    5c18:	86 e0       	ldi	r24, 0x06	; 6
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	92 bd       	out	0x22, r25	; 34
    5c1e:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    5c20:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    5c22:	10 bd       	out	0x20, r17	; 32
    5c24:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    5c26:	0f b6       	in	r0, 0x3f	; 63
    5c28:	f8 94       	cli
    5c2a:	fa 9a       	sbi	0x1f, 2	; 31
    5c2c:	f9 9a       	sbi	0x1f, 1	; 31
    5c2e:	0f be       	out	0x3f, r0	; 63

#if defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG build");
    5c30:	80 e9       	ldi	r24, 0x90	; 144
    5c32:	93 e0       	ldi	r25, 0x03	; 3
    5c34:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    5c38:	87 e8       	ldi	r24, 0x87	; 135
    5c3a:	93 e0       	ldi	r25, 0x03	; 3
    5c3c:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    5c40:	81 2f       	mov	r24, r17
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	6a e0       	ldi	r22, 0x0A	; 10
    5c46:	70 e0       	ldi	r23, 0x00	; 0
    5c48:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5c4c:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if defined(DEBUG)
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    5c50:	8c e7       	ldi	r24, 0x7C	; 124
    5c52:	93 e0       	ldi	r25, 0x03	; 3
    5c54:	0e 94 1a 19 	call	0x3234	; 0x3234 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    5c58:	80 91 21 04 	lds	r24, 0x0421
    5c5c:	90 91 22 04 	lds	r25, 0x0422
    5c60:	00 97       	sbiw	r24, 0x00	; 0
    5c62:	11 f0       	breq	.+4      	; 0x5c68 <setup+0x120>
    5c64:	9c 01       	movw	r18, r24
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <setup+0x124>
    5c68:	25 e2       	ldi	r18, 0x25	; 37
    5c6a:	34 e0       	ldi	r19, 0x04	; 4
    5c6c:	ce 01       	movw	r24, r28
    5c6e:	01 96       	adiw	r24, 0x01	; 1
    5c70:	82 1b       	sub	r24, r18
    5c72:	93 0b       	sbc	r25, r19
    5c74:	6a e0       	ldi	r22, 0x0A	; 10
    5c76:	70 e0       	ldi	r23, 0x00	; 0
    5c78:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5c7c:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <serialPrintlnAndFlush()>
#endif
#if defined(ALT_MAIN_LOOP)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("ALTERNATE MAIN LOOP...");
#elif defined(UNIT_TESTS)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS...");
    5c80:	8e e6       	ldi	r24, 0x6E	; 110
    5c82:	93 e0       	ldi	r25, 0x03	; 3
    5c84:	0e 94 30 19 	call	0x3260	; 0x3260 <serialPrintlnAndFlush(__FlashStringHelper const*)>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    5c88:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <optionalPOST()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
    5c8e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <ensureIDCreated(bool)>
    5c92:	88 23       	and	r24, r24
    5c94:	49 f4       	brne	.+18     	; 0x5ca8 <setup+0x160>
    {
    if(!ensureIDCreated(true)) // Force reset.
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <ensureIDCreated(bool)>
    5c9c:	88 23       	and	r24, r24
    5c9e:	21 f4       	brne	.+8      	; 0x5ca8 <setup+0x160>
      { panic(F("Bad ID and cannot reset.")); }
    5ca0:	85 e5       	ldi	r24, 0x55	; 85
    5ca2:	93 e0       	ldi	r25, 0x03	; 3
    5ca4:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5ca8:	5c 9a       	sbi	0x0b, 4	; 11
  // Report initial status.
  serialStatusReport();
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
#endif
  }
    5caa:	0f 90       	pop	r0
    5cac:	0f 90       	pop	r0
    5cae:	cf 91       	pop	r28
    5cb0:	df 91       	pop	r29
    5cb2:	1f 91       	pop	r17
    5cb4:	0f 91       	pop	r16
    5cb6:	08 95       	ret

00005cb8 <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    5cb8:	8c e3       	ldi	r24, 0x3C	; 60
    5cba:	08 95       	ret

00005cbc <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    5cbc:	84 e3       	ldi	r24, 0x34	; 52
    5cbe:	91 e0       	ldi	r25, 0x01	; 1
    5cc0:	08 95       	ret

00005cc2 <AmbientLight::_TEST_set_multi_(unsigned int, bool, unsigned char)>:
    uint8_t getDarkMinutes() { return(darkTicks); }

#ifdef UNIT_TESTS
    // Set new value(s) for unit test only.
    // Makes this more usable as a mock for testing other components.
    virtual void _TEST_set_multi_(uint16_t newRawValue, bool newRoomLitFlag, uint8_t newDarkTicks)
    5cc2:	fc 01       	movw	r30, r24
      { rawValue = newRawValue; value = newRawValue >> 2; isRoomLitFlag = newRoomLitFlag; darkTicks = newDarkTicks; }
    5cc4:	74 83       	std	Z+4, r23	; 0x04
    5cc6:	63 83       	std	Z+3, r22	; 0x03
    5cc8:	76 95       	lsr	r23
    5cca:	67 95       	ror	r22
    5ccc:	76 95       	lsr	r23
    5cce:	67 95       	ror	r22
    5cd0:	62 83       	std	Z+2, r22	; 0x02
    5cd2:	45 83       	std	Z+5, r20	; 0x05
    5cd4:	26 83       	std	Z+6, r18	; 0x06
    5cd6:	08 95       	ret

00005cd8 <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // This should be called at a regular rate, usually 1/60, so make stats such as velocity measurement easier.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    5cd8:	8c e3       	ldi	r24, 0x3C	; 60
    5cda:	08 95       	ret

00005cdc <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    5cdc:	fc 01       	movw	r30, r24
    5cde:	82 81       	ldd	r24, Z+2	; 0x02
    5ce0:	93 81       	ldd	r25, Z+3	; 0x03
    5ce2:	08 95       	ret

00005ce4 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    5ce4:	86 e3       	ldi	r24, 0x36	; 54
    5ce6:	91 e0       	ldi	r25, 0x01	; 1
    5ce8:	08 95       	ret

00005cea <HumiditySensorSHT21::isValid(unsigned char) const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Returns true if the sensor reading value passed is potentially valid, ie in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
    5cea:	80 e0       	ldi	r24, 0x00	; 0
    5cec:	65 36       	cpi	r22, 0x65	; 101
    5cee:	08 f4       	brcc	.+2      	; 0x5cf2 <HumiditySensorSHT21::isValid(unsigned char) const+0x8>
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	08 95       	ret

00005cf4 <HumiditySensorSHT21::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("H|%"); }
    5cf4:	8c e3       	ldi	r24, 0x3C	; 60
    5cf6:	91 e0       	ldi	r25, 0x01	; 1
    5cf8:	08 95       	ret

00005cfa <ValveMotorDirectV1::isRecalibrating() const>:

    virtual uint8_t read();

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    virtual bool isRecalibrating() const { return(0 == clicksFullTravel); } // Not yet calibrated.
    5cfa:	20 e0       	ldi	r18, 0x00	; 0
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	83 81       	ldd	r24, Z+3	; 0x03
    5d00:	94 81       	ldd	r25, Z+4	; 0x04
    5d02:	89 2b       	or	r24, r25
    5d04:	09 f4       	brne	.+2      	; 0x5d08 <ValveMotorDirectV1::isRecalibrating() const+0xe>
    5d06:	21 e0       	ldi	r18, 0x01	; 1
    5d08:	82 2f       	mov	r24, r18
    5d0a:	08 95       	ret

00005d0c <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	08 95       	ret

00005d10 <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	08 95       	ret

00005d14 <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    5d14:	80 e0       	ldi	r24, 0x00	; 0
    5d16:	08 95       	ret

00005d18 <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    5d18:	81 e0       	ldi	r24, 0x01	; 1
    5d1a:	08 95       	ret

00005d1c <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    5d1c:	80 e0       	ldi	r24, 0x00	; 0
    5d1e:	08 95       	ret

00005d20 <global constructors keyed to _ZN12AmbientLight4readEv>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    5d20:	10 92 8f 02 	sts	0x028F, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    5d24:	87 e0       	ldi	r24, 0x07	; 7
    5d26:	92 e0       	ldi	r25, 0x02	; 2
    5d28:	90 93 8e 02 	sts	0x028E, r25
    5d2c:	80 93 8d 02 	sts	0x028D, r24
      // Can initialise to a chosen value.
      SimpleTSUint8Sensor(const uint8_t v) : value(v) { }
    5d30:	8f ef       	ldi	r24, 0xFF	; 255
    5d32:	80 93 96 02 	sts	0x0296, r24
    // True if RH% is high, with hysteresis.
    // Marked volatile for thread-safe lock-free access.
    volatile bool highWithHyst;

  public:
    HumiditySensorSHT21() : SimpleTSUint8Sensor(255), highWithHyst(false) { }
    5d36:	81 ef       	ldi	r24, 0xF1	; 241
    5d38:	91 e0       	ldi	r25, 0x01	; 1
    5d3a:	90 93 95 02 	sts	0x0295, r25
    5d3e:	80 93 94 02 	sts	0x0294, r24
    5d42:	10 92 97 02 	sts	0x0297, r1
  private:
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    RoomTemperatureC16() : value(0) { }
    5d46:	8b ed       	ldi	r24, 0xDB	; 219
    5d48:	91 e0       	ldi	r25, 0x01	; 1
    5d4a:	90 93 99 02 	sts	0x0299, r25
    5d4e:	80 93 98 02 	sts	0x0298, r24
    5d52:	10 92 9b 02 	sts	0x029B, r1
    5d56:	10 92 9a 02 	sts	0x029A, r1
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    5d5a:	10 92 9e 02 	sts	0x029E, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    5d5e:	85 ec       	ldi	r24, 0xC5	; 197
    5d60:	91 e0       	ldi	r25, 0x01	; 1
    5d62:	90 93 9d 02 	sts	0x029D, r25
    5d66:	80 93 9c 02 	sts	0x029C, r24
    5d6a:	10 92 a0 02 	sts	0x02A0, r1
    5d6e:	10 92 9f 02 	sts	0x029F, r1
    5d72:	10 92 a3 02 	sts	0x02A3, r1
    // Sets flags accordingly.
    // Does not provide any monitoring of stall, position encoding, etc.
    void motorDrive(motor_drive dir);

  public:
    ValveMotorDirectV1() : clicksFullTravel(0), clicksFromClosed(0), motorDriveStatus(motorOff) { }
    5d76:	87 ea       	ldi	r24, 0xA7	; 167
    5d78:	91 e0       	ldi	r25, 0x01	; 1
    5d7a:	90 93 a2 02 	sts	0x02A2, r25
    5d7e:	80 93 a1 02 	sts	0x02A1, r24
    5d82:	10 92 a5 02 	sts	0x02A5, r1
    5d86:	10 92 a4 02 	sts	0x02A4, r1
    5d8a:	10 92 a7 02 	sts	0x02A7, r1
    5d8e:	10 92 a6 02 	sts	0x02A6, r1
    5d92:	10 92 a9 02 	sts	0x02A9, r1
    5d96:	10 92 a8 02 	sts	0x02A8, r1
    motorDriveStatus = dir;
    }
  }

// Singleton implementation/instance.
ValveMotorDirectV1 ValveDirect;
    5d9a:	08 95       	ret

00005d9c <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)>:

// Turn motor off, or on for a given drive direction.
// This routine is very careful to avoid setting outputs into any illegal/'bad' state.
// Sets flags accordingly.
// Does not provide any monitoring of stall, position encoding, etc.
void ValveMotorDirectV1::motorDrive(const motor_drive dir)
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	8c 01       	movw	r16, r24
    5da6:	eb 01       	movw	r28, r22
  {
  // *** MUST NEVER HAVE L AND R LOW AT THE SAME TIME else board may be destroyed at worst. ***
  // Operates as quickly as reasonably possible, eg to move to stall detection quickly...
  // TODO: consider making atomic to block some interrupt-related accidents...
  // TODO: note that mapping between L/R and open/close not yet defined.
  switch(dir)
    5da8:	61 30       	cpi	r22, 0x01	; 1
    5daa:	71 05       	cpc	r23, r1
    5dac:	49 f0       	breq	.+18     	; 0x5dc0 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x24>
    5dae:	62 30       	cpi	r22, 0x02	; 2
    5db0:	71 05       	cpc	r23, r1
    5db2:	a9 f4       	brne	.+42     	; 0x5dde <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x42>
    {
    case motorDriveOpening:
      {
      fastDigitalWrite(MOTOR_DRIVE_ML, HIGH); // Pull one side high immediately *FIRST* for safety.
    5db4:	42 9a       	sbi	0x08, 2	; 8
      nap(WDTO_15MS); // Let H-bridge respond and settle, and motor slow down.
    5db6:	80 e0       	ldi	r24, 0x00	; 0
    5db8:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
      fastDigitalWrite(MOTOR_DRIVE_MR, LOW); // Pull other side side low after.
    5dbc:	43 98       	cbi	0x08, 3	; 8
    5dbe:	05 c0       	rjmp	.+10     	; 0x5dca <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x2e>
      break; // Fall through to common case.
      }

    case motorDriveClosing:
      {
      fastDigitalWrite(MOTOR_DRIVE_MR, HIGH); // Pull one side high immediately *FIRST* for safety.
    5dc0:	43 9a       	sbi	0x08, 3	; 8
      nap(WDTO_15MS); // Let H-bridge respond and settle, and motor slow down.
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
      fastDigitalWrite(MOTOR_DRIVE_ML, LOW); // Pull other side side low after.
    5dc8:	42 98       	cbi	0x08, 2	; 8
      nap(WDTO_15MS); // Let H-bridge respond and settle.
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
    }

  // If state has changed to new 'active' state,
  // force both lines to outputs (which may be relatively slow)
  // and update this instance's state.
  if(motorDriveStatus != dir) 
    5dd0:	f8 01       	movw	r30, r16
    5dd2:	87 81       	ldd	r24, Z+7	; 0x07
    5dd4:	90 85       	ldd	r25, Z+8	; 0x08
    5dd6:	8c 17       	cp	r24, r28
    5dd8:	9d 07       	cpc	r25, r29
    5dda:	a9 f4       	brne	.+42     	; 0x5e06 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x6a>
    5ddc:	1f c0       	rjmp	.+62     	; 0x5e1c <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x80>
      }

    case motorOff: default: // Explicit off, and default for safety.
      {
      // Everything off...
      fastDigitalWrite(MOTOR_DRIVE_MR, HIGH); // Belt and braces force pin logical output state high.
    5dde:	43 9a       	sbi	0x08, 3	; 8
      pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP); // Switch to weak pull-up; slow but possibly marginally safer.
    5de0:	81 e1       	ldi	r24, 0x11	; 17
    5de2:	62 e0       	ldi	r22, 0x02	; 2
    5de4:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
      nap(WDTO_15MS); // Let H-bridge respond and settle.
    5de8:	80 e0       	ldi	r24, 0x00	; 0
    5dea:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
      fastDigitalWrite(MOTOR_DRIVE_ML, HIGH); // Belt and braces force pin logical output state high.
    5dee:	42 9a       	sbi	0x08, 2	; 8
      pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP); // Switch to weak pull-up; slow but possibly marginally safer.
    5df0:	80 e1       	ldi	r24, 0x10	; 16
    5df2:	62 e0       	ldi	r22, 0x02	; 2
    5df4:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
      nap(WDTO_15MS); // Let H-bridge respond and settle.
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
      motorDriveStatus = motorOff; // Ensure value state even if 'dir' invalid.
    5dfe:	f8 01       	movw	r30, r16
    5e00:	10 86       	std	Z+8, r1	; 0x08
    5e02:	17 82       	std	Z+7, r1	; 0x07
    5e04:	0b c0       	rjmp	.+22     	; 0x5e1c <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x80>
  // If state has changed to new 'active' state,
  // force both lines to outputs (which may be relatively slow)
  // and update this instance's state.
  if(motorDriveStatus != dir) 
    {
    pinMode(MOTOR_DRIVE_ML, OUTPUT);
    5e06:	80 e1       	ldi	r24, 0x10	; 16
    5e08:	61 e0       	ldi	r22, 0x01	; 1
    5e0a:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
    pinMode(MOTOR_DRIVE_MR, OUTPUT);
    5e0e:	81 e1       	ldi	r24, 0x11	; 17
    5e10:	61 e0       	ldi	r22, 0x01	; 1
    5e12:	0e 94 92 34 	call	0x6924	; 0x6924 <pinMode>
    motorDriveStatus = dir;
    5e16:	f8 01       	movw	r30, r16
    5e18:	d0 87       	std	Z+8, r29	; 0x08
    5e1a:	c7 83       	std	Z+7, r28	; 0x07
    }
  }
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	08 95       	ret

00005e26 <ValveMotorDirectV1::read()>:


#ifdef DIRECT_MOTOR_DRIVE_V1
// Actuator/driver for direct local (radiator) valve motor control.

uint8_t ValveMotorDirectV1::read()
    5e26:	9c 01       	movw	r18, r24
  {
  // Toggle just for fun...
  static bool open;
  open = !open;
    5e28:	80 91 aa 02 	lds	r24, 0x02AA
    5e2c:	91 e0       	ldi	r25, 0x01	; 1
    5e2e:	89 27       	eor	r24, r25
    5e30:	80 93 aa 02 	sts	0x02AA, r24
  motorDrive(open ? motorDriveOpening : motorDriveClosing);
    5e34:	88 23       	and	r24, r24
    5e36:	19 f4       	brne	.+6      	; 0x5e3e <ValveMotorDirectV1::read()+0x18>
    5e38:	61 e0       	ldi	r22, 0x01	; 1
    5e3a:	70 e0       	ldi	r23, 0x00	; 0
    5e3c:	02 c0       	rjmp	.+4      	; 0x5e42 <ValveMotorDirectV1::read()+0x1c>
    5e3e:	62 e0       	ldi	r22, 0x02	; 2
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	c9 01       	movw	r24, r18
    5e44:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)>
  }
    5e48:	08 95       	ret

00005e4a <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    5e4a:	0f 93       	push	r16
    5e4c:	1f 93       	push	r17
    5e4e:	cf 93       	push	r28
    5e50:	df 93       	push	r29
    5e52:	ec 01       	movw	r28, r24
  {
  // No need to wait for voltage to stablise as pot top end directly driven by IO_POWER_UP.
  power_intermittent_peripherals_enable(false);
    5e54:	80 e0       	ldi	r24, 0x00	; 0
    5e56:	0e 94 35 14 	call	0x286a	; 0x286a <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	61 e0       	ldi	r22, 0x01	; 1
    5e60:	0e 94 3e 13 	call	0x267c	; 0x267c <analogueNoiseReducedRead(int, unsigned char)>
    5e64:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    5e66:	0e 94 00 14 	call	0x2800	; 0x2800 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    5e6a:	8f ef       	ldi	r24, 0xFF	; 255
    5e6c:	93 e0       	ldi	r25, 0x03	; 3
    5e6e:	80 1b       	sub	r24, r16
    5e70:	91 0b       	sbc	r25, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    5e72:	9c 83       	std	Y+4, r25	; 0x04
    5e74:	8b 83       	std	Y+3, r24	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    5e76:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    5e78:	96 95       	lsr	r25
    5e7a:	87 95       	ror	r24
    5e7c:	96 95       	lsr	r25
    5e7e:	87 95       	ror	r24
    5e80:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    5e82:	38 17       	cp	r19, r24
    5e84:	20 f4       	brcc	.+8      	; 0x5e8e <TemperaturePot::read()+0x44>
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	83 1b       	sub	r24, r19
    5e8a:	91 09       	sbc	r25, r1
    5e8c:	06 c0       	rjmp	.+12     	; 0x5e9a <TemperaturePot::read()+0x50>
    5e8e:	83 17       	cp	r24, r19
    5e90:	f8 f4       	brcc	.+62     	; 0x5ed0 <TemperaturePot::read()+0x86>
    5e92:	83 2f       	mov	r24, r19
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	82 1b       	sub	r24, r18
    5e98:	91 09       	sbc	r25, r1
    5e9a:	04 97       	sbiw	r24, 0x04	; 4
    5e9c:	cc f0       	brlt	.+50     	; 0x5ed0 <TemperaturePot::read()+0x86>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    5e9e:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    5ea0:	80 91 ab 02 	lds	r24, 0x02AB
    5ea4:	88 23       	and	r24, r24
    5ea6:	21 f4       	brne	.+8      	; 0x5eb0 <TemperaturePot::read()+0x66>
    5ea8:	81 e0       	ldi	r24, 0x01	; 1
    5eaa:	80 93 ab 02 	sts	0x02AB, r24
    5eae:	10 c0       	rjmp	.+32     	; 0x5ed0 <TemperaturePot::read()+0x86>
    else
      {
      // Force FROST mode when right at bottom of dial.
      if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    5eb0:	28 30       	cpi	r18, 0x08	; 8
    5eb2:	10 f4       	brcc	.+4      	; 0x5eb8 <TemperaturePot::read()+0x6e>
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	08 c0       	rjmp	.+16     	; 0x5ec8 <TemperaturePot::read()+0x7e>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
      // Start BAKE mode when dial turned up to top.
      else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    5eb8:	28 3f       	cpi	r18, 0xF8	; 248
    5eba:	18 f0       	brcs	.+6      	; 0x5ec2 <TemperaturePot::read()+0x78>
    5ebc:	0e 94 40 03 	call	0x680	; 0x680 <startBakeDebounced()>
    5ec0:	05 c0       	rjmp	.+10     	; 0x5ecc <TemperaturePot::read()+0x82>
#endif
      // Force WARM mode if pot/temperature turned up.
      else if(rn > oldValue) { setWarmModeDebounced(true); }
    5ec2:	32 17       	cp	r19, r18
    5ec4:	18 f4       	brcc	.+6      	; 0x5ecc <TemperaturePot::read()+0x82>
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	0e 94 2d 03 	call	0x65a	; 0x65a <setWarmModeDebounced(bool)>

      // Note user operation of pot.
      markUIControlUsed(); 
    5ecc:	0e 94 4a 19 	call	0x3294	; 0x3294 <markUIControlUsed()>
  DEBUG_SERIAL_PRINT_FLASHSTRING(", rn: ");
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    5ed0:	8a 81       	ldd	r24, Y+2	; 0x02
  }
    5ed2:	df 91       	pop	r29
    5ed4:	cf 91       	pop	r28
    5ed6:	1f 91       	pop	r17
    5ed8:	0f 91       	pop	r16
    5eda:	08 95       	ret

00005edc <SHT21_init()>:
// Set true once SHT21 has been initialised.
static volatile bool SHT21_initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    5edc:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    5ede:	84 ef       	ldi	r24, 0xF4	; 244
    5ee0:	92 e0       	ldi	r25, 0x02	; 2
    5ee2:	60 e4       	ldi	r22, 0x40	; 64
    5ee4:	70 e0       	ldi	r23, 0x00	; 0
    5ee6:	0e 94 45 31 	call	0x628a	; 0x628a <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    5eea:	84 ef       	ldi	r24, 0xF4	; 244
    5eec:	92 e0       	ldi	r25, 0x02	; 2
    5eee:	67 ee       	ldi	r22, 0xE7	; 231
    5ef0:	0e 94 c7 31 	call	0x638e	; 0x638e <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    5ef4:	84 ef       	ldi	r24, 0xF4	; 244
    5ef6:	92 e0       	ldi	r25, 0x02	; 2
    5ef8:	0e 94 0a 32 	call	0x6414	; 0x6414 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    5efc:	84 ef       	ldi	r24, 0xF4	; 244
    5efe:	92 e0       	ldi	r25, 0x02	; 2
    5f00:	60 e4       	ldi	r22, 0x40	; 64
    5f02:	70 e0       	ldi	r23, 0x00	; 0
    5f04:	41 e0       	ldi	r20, 0x01	; 1
    5f06:	50 e0       	ldi	r21, 0x00	; 0
    5f08:	0e 94 1b 32 	call	0x6436	; 0x6436 <TwoWire::requestFrom(int, int)>
    5f0c:	04 c0       	rjmp	.+8      	; 0x5f16 <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    5f0e:	80 91 b2 00 	lds	r24, 0x00B2
    5f12:	8d 3f       	cpi	r24, 0xFD	; 253
    5f14:	28 f5       	brcc	.+74     	; 0x5f60 <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    5f16:	84 ef       	ldi	r24, 0xF4	; 244
    5f18:	92 e0       	ldi	r25, 0x02	; 2
    5f1a:	0e 94 4f 31 	call	0x629e	; 0x629e <TwoWire::available()>
    5f1e:	18 16       	cp	r1, r24
    5f20:	19 06       	cpc	r1, r25
    5f22:	ac f7       	brge	.-22     	; 0x5f0e <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    5f24:	84 ef       	ldi	r24, 0xF4	; 244
    5f26:	92 e0       	ldi	r25, 0x02	; 2
    5f28:	0e 94 58 31 	call	0x62b0	; 0x62b0 <TwoWire::read()>
    5f2c:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C).
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    5f2e:	84 ef       	ldi	r24, 0xF4	; 244
    5f30:	92 e0       	ldi	r25, 0x02	; 2
    5f32:	60 e4       	ldi	r22, 0x40	; 64
    5f34:	70 e0       	ldi	r23, 0x00	; 0
    5f36:	0e 94 45 31 	call	0x628a	; 0x628a <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    5f3a:	84 ef       	ldi	r24, 0xF4	; 244
    5f3c:	92 e0       	ldi	r25, 0x02	; 2
    5f3e:	67 ee       	ldi	r22, 0xE7	; 231
    5f40:	0e 94 c7 31 	call	0x638e	; 0x638e <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    5f44:	18 73       	andi	r17, 0x38	; 56
    5f46:	13 60       	ori	r17, 0x03	; 3
    5f48:	84 ef       	ldi	r24, 0xF4	; 244
    5f4a:	92 e0       	ldi	r25, 0x02	; 2
    5f4c:	61 2f       	mov	r22, r17
    5f4e:	0e 94 c7 31 	call	0x638e	; 0x638e <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    5f52:	84 ef       	ldi	r24, 0xF4	; 244
    5f54:	92 e0       	ldi	r25, 0x02	; 2
    5f56:	0e 94 0a 32 	call	0x6414	; 0x6414 <TwoWire::endTransmission()>

#endif
  SHT21_initialised = true;
    5f5a:	81 e0       	ldi	r24, 0x01	; 1
    5f5c:	80 93 ac 02 	sts	0x02AC, r24
  }
    5f60:	1f 91       	pop	r17
    5f62:	08 95       	ret

00005f64 <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    5f64:	ef 92       	push	r14
    5f66:	ff 92       	push	r15
    5f68:	0f 93       	push	r16
    5f6a:	1f 93       	push	r17
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	7c 01       	movw	r14, r24
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
static int Sensor_SHT21_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    5f72:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <powerUpTWIIfDisabled()>
    5f76:	08 2f       	mov	r16, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    5f78:	80 91 ac 02 	lds	r24, 0x02AC
    5f7c:	88 23       	and	r24, r24
    5f7e:	11 f4       	brne	.+4      	; 0x5f84 <RoomTemperatureC16::read()+0x20>
    5f80:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    5f84:	84 ef       	ldi	r24, 0xF4	; 244
    5f86:	92 e0       	ldi	r25, 0x02	; 2
    5f88:	60 e4       	ldi	r22, 0x40	; 64
    5f8a:	70 e0       	ldi	r23, 0x00	; 0
    5f8c:	0e 94 45 31 	call	0x628a	; 0x628a <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    5f90:	84 ef       	ldi	r24, 0xF4	; 244
    5f92:	92 e0       	ldi	r25, 0x02	; 2
    5f94:	63 ee       	ldi	r22, 0xE3	; 227
    5f96:	0e 94 c7 31 	call	0x638e	; 0x638e <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    5f9a:	81 e0       	ldi	r24, 0x01	; 1
    5f9c:	0e 94 44 12 	call	0x2488	; 0x2488 <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    5fa0:	84 ef       	ldi	r24, 0xF4	; 244
    5fa2:	92 e0       	ldi	r25, 0x02	; 2
    5fa4:	0e 94 0a 32 	call	0x6414	; 0x6414 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    5fa8:	84 ef       	ldi	r24, 0xF4	; 244
    5faa:	92 e0       	ldi	r25, 0x02	; 2
    5fac:	60 e4       	ldi	r22, 0x40	; 64
    5fae:	70 e0       	ldi	r23, 0x00	; 0
    5fb0:	43 e0       	ldi	r20, 0x03	; 3
    5fb2:	50 e0       	ldi	r21, 0x00	; 0
    5fb4:	0e 94 1b 32 	call	0x6436	; 0x6436 <TwoWire::requestFrom(int, int)>
    5fb8:	07 c0       	rjmp	.+14     	; 0x5fc8 <RoomTemperatureC16::read()+0x64>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    5fba:	80 91 b2 00 	lds	r24, 0x00B2
    5fbe:	8d 3f       	cpi	r24, 0xFD	; 253
    5fc0:	18 f0       	brcs	.+6      	; 0x5fc8 <RoomTemperatureC16::read()+0x64>
    5fc2:	60 e0       	ldi	r22, 0x00	; 0
    5fc4:	70 e0       	ldi	r23, 0x00	; 0
    5fc6:	2b c0       	rjmp	.+86     	; 0x601e <RoomTemperatureC16::read()+0xba>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    5fc8:	84 ef       	ldi	r24, 0xF4	; 244
    5fca:	92 e0       	ldi	r25, 0x02	; 2
    5fcc:	0e 94 4f 31 	call	0x629e	; 0x629e <TwoWire::available()>
    5fd0:	03 97       	sbiw	r24, 0x03	; 3
    5fd2:	9c f3       	brlt	.-26     	; 0x5fba <RoomTemperatureC16::read()+0x56>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    5fd4:	84 ef       	ldi	r24, 0xF4	; 244
    5fd6:	92 e0       	ldi	r25, 0x02	; 2
    5fd8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <TwoWire::read()>
    5fdc:	18 2f       	mov	r17, r24
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    5fde:	84 ef       	ldi	r24, 0xF4	; 244
    5fe0:	92 e0       	ldi	r25, 0x02	; 2
    5fe2:	0e 94 58 31 	call	0x62b0	; 0x62b0 <TwoWire::read()>
    5fe6:	ec 01       	movw	r28, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    5fe8:	00 23       	and	r16, r16
    5fea:	11 f0       	breq	.+4      	; 0x5ff0 <RoomTemperatureC16::read()+0x8c>
    5fec:	0e 94 83 13 	call	0x2706	; 0x2706 <powerDownTWI()>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    5ff0:	71 2f       	mov	r23, r17
    5ff2:	60 e0       	ldi	r22, 0x00	; 0
  if(neededPowerUp) { powerDownTWI(); }

  // TODO: capture entropy if (transformed) value has changed.

  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    5ff4:	cc 7f       	andi	r28, 0xFC	; 252
    5ff6:	d0 70       	andi	r29, 0x00	; 0
    5ff8:	6c 2b       	or	r22, r28
    5ffa:	7d 2b       	or	r23, r29
    5ffc:	80 e0       	ldi	r24, 0x00	; 0
    5ffe:	90 e0       	ldi	r25, 0x00	; 0
    6000:	27 ef       	ldi	r18, 0xF7	; 247
    6002:	35 e1       	ldi	r19, 0x15	; 21
    6004:	40 e0       	ldi	r20, 0x00	; 0
    6006:	50 e0       	ldi	r21, 0x00	; 0
    6008:	0e 94 ae 39 	call	0x735c	; 0x735c <__mulsi3>
    600c:	31 e1       	ldi	r19, 0x11	; 17
    600e:	95 95       	asr	r25
    6010:	87 95       	ror	r24
    6012:	77 95       	ror	r23
    6014:	67 95       	ror	r22
    6016:	3a 95       	dec	r19
    6018:	d1 f7       	brne	.-12     	; 0x600e <RoomTemperatureC16::read()+0xaa>
    601a:	6e 5e       	subi	r22, 0xEE	; 238
    601c:	72 40       	sbci	r23, 0x02	; 2
  const int raw = Sensor_SHT21_readTemperatureC16();
#else
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
    601e:	f7 01       	movw	r30, r14
    6020:	73 83       	std	Z+3, r23	; 0x03
    6022:	62 83       	std	Z+2, r22	; 0x02
  return(value);
  }
    6024:	cb 01       	movw	r24, r22
    6026:	df 91       	pop	r29
    6028:	cf 91       	pop	r28
    602a:	1f 91       	pop	r17
    602c:	0f 91       	pop	r16
    602e:	ff 90       	pop	r15
    6030:	ef 90       	pop	r14
    6032:	08 95       	ret

00006034 <HumiditySensorSHT21::read()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t HumiditySensorSHT21::read()
    6034:	ff 92       	push	r15
    6036:	0f 93       	push	r16
    6038:	1f 93       	push	r17
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	ec 01       	movw	r28, r24
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    6040:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <powerUpTWIIfDisabled()>
    6044:	18 2f       	mov	r17, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    6046:	80 91 ac 02 	lds	r24, 0x02AC
    604a:	88 23       	and	r24, r24
    604c:	11 f4       	brne	.+4      	; 0x6052 <HumiditySensorSHT21::read()+0x1e>
    604e:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6052:	84 ef       	ldi	r24, 0xF4	; 244
    6054:	92 e0       	ldi	r25, 0x02	; 2
    6056:	60 e4       	ldi	r22, 0x40	; 64
    6058:	70 e0       	ldi	r23, 0x00	; 0
    605a:	0e 94 45 31 	call	0x628a	; 0x628a <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    605e:	84 ef       	ldi	r24, 0xF4	; 244
    6060:	92 e0       	ldi	r25, 0x02	; 2
    6062:	65 ee       	ldi	r22, 0xE5	; 229
    6064:	0e 94 c7 31 	call	0x638e	; 0x638e <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    6068:	85 e2       	ldi	r24, 0x25	; 37
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	0e 94 29 12 	call	0x2452	; 0x2452 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    6070:	84 ef       	ldi	r24, 0xF4	; 244
    6072:	92 e0       	ldi	r25, 0x02	; 2
    6074:	0e 94 0a 32 	call	0x6414	; 0x6414 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    6078:	84 ef       	ldi	r24, 0xF4	; 244
    607a:	92 e0       	ldi	r25, 0x02	; 2
    607c:	60 e4       	ldi	r22, 0x40	; 64
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	43 e0       	ldi	r20, 0x03	; 3
    6082:	50 e0       	ldi	r21, 0x00	; 0
    6084:	0e 94 1b 32 	call	0x6436	; 0x6436 <TwoWire::requestFrom(int, int)>
    6088:	06 c0       	rjmp	.+12     	; 0x6096 <HumiditySensorSHT21::read()+0x62>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    608a:	80 91 b2 00 	lds	r24, 0x00B2
    608e:	8f 3f       	cpi	r24, 0xFF	; 255
    6090:	11 f4       	brne	.+4      	; 0x6096 <HumiditySensorSHT21::read()+0x62>
    6092:	1f ef       	ldi	r17, 0xFF	; 255
    6094:	3c c0       	rjmp	.+120    	; 0x610e <HumiditySensorSHT21::read()+0xda>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    6096:	84 ef       	ldi	r24, 0xF4	; 244
    6098:	92 e0       	ldi	r25, 0x02	; 2
    609a:	0e 94 4f 31 	call	0x629e	; 0x629e <TwoWire::available()>
    609e:	03 97       	sbiw	r24, 0x03	; 3
    60a0:	a4 f3       	brlt	.-24     	; 0x608a <HumiditySensorSHT21::read()+0x56>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }
  const uint8_t rawRH = Wire.read();
    60a2:	84 ef       	ldi	r24, 0xF4	; 244
    60a4:	92 e0       	ldi	r25, 0x02	; 2
    60a6:	0e 94 58 31 	call	0x62b0	; 0x62b0 <TwoWire::read()>
    60aa:	f8 2e       	mov	r15, r24
  const uint8_t rawRL = Wire.read();
    60ac:	84 ef       	ldi	r24, 0xF4	; 244
    60ae:	92 e0       	ldi	r25, 0x02	; 2
    60b0:	0e 94 58 31 	call	0x62b0	; 0x62b0 <TwoWire::read()>
    60b4:	08 2f       	mov	r16, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    60b6:	11 23       	and	r17, r17
    60b8:	11 f0       	breq	.+4      	; 0x60be <HumiditySensorSHT21::read()+0x8a>
    60ba:	0e 94 83 13 	call	0x2706	; 0x2706 <powerDownTWI()>

  const uint16_t raw = (((uint16_t)rawRH) << 8) | (rawRL & 0xfc); // Clear status ls bits.
  const uint8_t result = -6 + ((125L * raw) >> 16);
    60be:	60 2f       	mov	r22, r16
    60c0:	70 e0       	ldi	r23, 0x00	; 0
    60c2:	6c 7f       	andi	r22, 0xFC	; 252
    60c4:	70 70       	andi	r23, 0x00	; 0
    60c6:	3f 2d       	mov	r19, r15
    60c8:	20 e0       	ldi	r18, 0x00	; 0
    60ca:	62 2b       	or	r22, r18
    60cc:	73 2b       	or	r23, r19
    60ce:	80 e0       	ldi	r24, 0x00	; 0
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	2d e7       	ldi	r18, 0x7D	; 125
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	40 e0       	ldi	r20, 0x00	; 0
    60d8:	50 e0       	ldi	r21, 0x00	; 0
    60da:	0e 94 ae 39 	call	0x735c	; 0x735c <__mulsi3>
    60de:	bc 01       	movw	r22, r24
    60e0:	99 27       	eor	r25, r25
    60e2:	77 fd       	sbrc	r23, 7
    60e4:	90 95       	com	r25
    60e6:	89 2f       	mov	r24, r25
    60e8:	16 2f       	mov	r17, r22
    60ea:	16 50       	subi	r17, 0x06	; 6

  // Capture entropy from raw status bits
  // iff (transformed) reading has changed.
  if(value != result) { addEntropyToPool(rawRL ^ rawRH, 1); }
    60ec:	8a 81       	ldd	r24, Y+2	; 0x02
    60ee:	81 17       	cp	r24, r17
    60f0:	29 f0       	breq	.+10     	; 0x60fc <HumiditySensorSHT21::read()+0xc8>
    60f2:	80 2f       	mov	r24, r16
    60f4:	8f 25       	eor	r24, r15
    60f6:	61 e0       	ldi	r22, 0x01	; 1
    60f8:	0e 94 4a 18 	call	0x3094	; 0x3094 <addEntropyToPool(unsigned char, unsigned char)>

  value = result;
    60fc:	1a 83       	std	Y+2, r17	; 0x02
  if(result > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)) { highWithHyst = true; }
    60fe:	1c 34       	cpi	r17, 0x4C	; 76
    6100:	18 f0       	brcs	.+6      	; 0x6108 <HumiditySensorSHT21::read()+0xd4>
    6102:	81 e0       	ldi	r24, 0x01	; 1
    6104:	8b 83       	std	Y+3, r24	; 0x03
    6106:	03 c0       	rjmp	.+6      	; 0x610e <HumiditySensorSHT21::read()+0xda>
  else if(result < (HUMIDTY_HIGH_RHPC-HUMIDITY_EPSILON_RHPC)) { highWithHyst = false; }
    6108:	11 34       	cpi	r17, 0x41	; 65
    610a:	08 f4       	brcc	.+2      	; 0x610e <HumiditySensorSHT21::read()+0xda>
    610c:	1b 82       	std	Y+3, r1	; 0x03
  return(result);
  }
    610e:	81 2f       	mov	r24, r17
    6110:	df 91       	pop	r29
    6112:	cf 91       	pop	r28
    6114:	1f 91       	pop	r17
    6116:	0f 91       	pop	r16
    6118:	ff 90       	pop	r15
    611a:	08 95       	ret

0000611c <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    611c:	ef 92       	push	r14
    611e:	ff 92       	push	r15
    6120:	0f 93       	push	r16
    6122:	1f 93       	push	r17
    6124:	df 93       	push	r29
    6126:	cf 93       	push	r28
    6128:	cd b7       	in	r28, 0x3d	; 61
    612a:	de b7       	in	r29, 0x3e	; 62
    612c:	28 97       	sbiw	r28, 0x08	; 8
    612e:	0f b6       	in	r0, 0x3f	; 63
    6130:	f8 94       	cli
    6132:	de bf       	out	0x3e, r29	; 62
    6134:	0f be       	out	0x3f, r0	; 63
    6136:	cd bf       	out	0x3d, r28	; 61
    6138:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    613a:	80 e0       	ldi	r24, 0x00	; 0
    613c:	0e 94 35 14 	call	0x286a	; 0x286a <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    6140:	80 e0       	ldi	r24, 0x00	; 0
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	63 e0       	ldi	r22, 0x03	; 3
    6146:	0e 94 3e 13 	call	0x267c	; 0x267c <analogueNoiseReducedRead(int, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  uint16_t al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    614a:	23 e0       	ldi	r18, 0x03	; 3
    614c:	80 38       	cpi	r24, 0x80	; 128
    614e:	92 07       	cpc	r25, r18
    6150:	10 f4       	brcc	.+4      	; 0x6156 <AmbientLight::read()+0x3a>
    6152:	8c 01       	movw	r16, r24
    6154:	37 c0       	rjmp	.+110    	; 0x61c4 <AmbientLight::read()+0xa8>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    6156:	80 e0       	ldi	r24, 0x00	; 0
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	61 e0       	ldi	r22, 0x01	; 1
    615c:	0e 94 3e 13 	call	0x267c	; 0x267c <analogueNoiseReducedRead(int, unsigned char)>
    6160:	8c 01       	movw	r16, r24
    Supply_mV.read();
    6162:	84 e7       	ldi	r24, 0x74	; 116
    6164:	92 e0       	ldi	r25, 0x02	; 2
    6166:	0e 94 48 13 	call	0x2690	; 0x2690 <SupplyVoltageMilliVolts::read()>
    const uint16_t vbg = Supply_mV.getRawInv(); // Vbandgap wrt Vsupply.
    // Compute value in extended range up to ~1024 * Vsupply/Vbandgap.
    const uint16_t ale = ((al1 << 5) / ((vbg+16) >> 5)); // Faster int-only approximation to (int)((al1 * 1024L) / vbg)).
    616a:	60 91 76 02 	lds	r22, 0x0276
    616e:	70 91 77 02 	lds	r23, 0x0277
    6172:	60 5f       	subi	r22, 0xF0	; 240
    6174:	7f 4f       	sbci	r23, 0xFF	; 255
    6176:	f5 e0       	ldi	r31, 0x05	; 5
    6178:	76 95       	lsr	r23
    617a:	67 95       	ror	r22
    617c:	fa 95       	dec	r31
    617e:	e1 f7       	brne	.-8      	; 0x6178 <AmbientLight::read()+0x5c>
    6180:	c8 01       	movw	r24, r16
    6182:	e5 e0       	ldi	r30, 0x05	; 5
    6184:	88 0f       	add	r24, r24
    6186:	99 1f       	adc	r25, r25
    6188:	ea 95       	dec	r30
    618a:	e1 f7       	brne	.-8      	; 0x6184 <AmbientLight::read()+0x68>
    618c:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    6190:	cb 01       	movw	r24, r22
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor is a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    6192:	2f ef       	ldi	r18, 0xFF	; 255
    6194:	33 e0       	ldi	r19, 0x03	; 3
    6196:	3e 83       	std	Y+6, r19	; 0x06
    6198:	2d 83       	std	Y+5, r18	; 0x05
    619a:	1a 82       	std	Y+2, r1	; 0x02
    619c:	19 82       	std	Y+1, r1	; 0x01
    619e:	80 58       	subi	r24, 0x80	; 128
    61a0:	93 40       	sbci	r25, 0x03	; 3
    61a2:	69 e0       	ldi	r22, 0x09	; 9
    61a4:	70 e0       	ldi	r23, 0x00	; 0
    61a6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <__udivmodhi4>
    61aa:	7c 83       	std	Y+4, r23	; 0x04
    61ac:	6b 83       	std	Y+3, r22	; 0x03
    61ae:	8b 01       	movw	r16, r22
    61b0:	00 58       	subi	r16, 0x80	; 128
    61b2:	1c 4f       	sbci	r17, 0xFC	; 252
    61b4:	18 87       	std	Y+8, r17	; 0x08
    61b6:	0f 83       	std	Y+7, r16	; 0x07




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    61b8:	43 e0       	ldi	r20, 0x03	; 3
    61ba:	0f 3f       	cpi	r16, 0xFF	; 255
    61bc:	14 07       	cpc	r17, r20
    61be:	10 f0       	brcs	.+4      	; 0x61c4 <AmbientLight::read()+0xa8>
    61c0:	0f ef       	ldi	r16, 0xFF	; 255
    61c2:	13 e0       	ldi	r17, 0x03	; 3
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    61c4:	0e 94 00 14 	call	0x2800	; 0x2800 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    61c8:	80 2f       	mov	r24, r16
    61ca:	f7 01       	movw	r30, r14
    61cc:	93 81       	ldd	r25, Z+3	; 0x03
    61ce:	09 17       	cp	r16, r25
    61d0:	21 f0       	breq	.+8      	; 0x61da <AmbientLight::read()+0xbe>
    61d2:	89 27       	eor	r24, r25
    61d4:	60 e0       	ldi	r22, 0x00	; 0
    61d6:	0e 94 4a 18 	call	0x3094	; 0x3094 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    61da:	f1 e0       	ldi	r31, 0x01	; 1
    61dc:	0f 30       	cpi	r16, 0x0F	; 15
    61de:	1f 07       	cpc	r17, r31
    61e0:	40 f4       	brcc	.+16     	; 0x61f2 <AmbientLight::read()+0xd6>
    {
    isRoomLitFlag = false;
    61e2:	f7 01       	movw	r30, r14
    61e4:	15 82       	std	Z+5, r1	; 0x05
    // If dark enough to isRoomLitFlag false then increment counter.
    if(darkTicks < 255) { ++darkTicks; }
    61e6:	86 81       	ldd	r24, Z+6	; 0x06
    61e8:	8f 3f       	cpi	r24, 0xFF	; 255
    61ea:	01 f1       	breq	.+64     	; 0x622c <AmbientLight::read()+0x110>
    61ec:	8f 5f       	subi	r24, 0xFF	; 255
    61ee:	86 83       	std	Z+6, r24	; 0x06
    61f0:	1d c0       	rjmp	.+58     	; 0x622c <AmbientLight::read()+0x110>
    }
  else if(al > LDR_THR_HIGH)
    61f2:	f1 e0       	ldi	r31, 0x01	; 1
    61f4:	01 39       	cpi	r16, 0x91	; 145
    61f6:	1f 07       	cpc	r17, r31
    61f8:	c8 f0       	brcs	.+50     	; 0x622c <AmbientLight::read()+0x110>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    61fa:	80 91 ad 02 	lds	r24, 0x02AD
    61fe:	88 23       	and	r24, r24
    6200:	21 f4       	brne	.+8      	; 0x620a <AmbientLight::read()+0xee>
    6202:	81 e0       	ldi	r24, 0x01	; 1
    6204:	80 93 ad 02 	sts	0x02AD, r24
    6208:	0d c0       	rjmp	.+26     	; 0x6224 <AmbientLight::read()+0x108>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    620a:	f7 01       	movw	r30, r14
    620c:	85 81       	ldd	r24, Z+5	; 0x05
    620e:	88 23       	and	r24, r24
    6210:	49 f4       	brne	.+18     	; 0x6224 <AmbientLight::read()+0x108>
    6212:	83 81       	ldd	r24, Z+3	; 0x03
    6214:	94 81       	ldd	r25, Z+4	; 0x04
    6216:	8e 50       	subi	r24, 0x0E	; 14
    6218:	91 40       	sbci	r25, 0x01	; 1
    621a:	20 f4       	brcc	.+8      	; 0x6224 <AmbientLight::read()+0x108>
    621c:	8c e3       	ldi	r24, 0x3C	; 60
    621e:	92 e0       	ldi	r25, 0x02	; 2
    6220:	0e 94 df 03 	call	0x7be	; 0x7be <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	f7 01       	movw	r30, r14
    6228:	85 83       	std	Z+5, r24	; 0x05
    // If light enough to isRoomLitFlag true then reset counter.
    darkTicks = 0;
    622a:	16 82       	std	Z+6, r1	; 0x06
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    622c:	f7 01       	movw	r30, r14
    622e:	14 83       	std	Z+4, r17	; 0x04
    6230:	03 83       	std	Z+3, r16	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    6232:	c8 01       	movw	r24, r16
    6234:	96 95       	lsr	r25
    6236:	87 95       	ror	r24
    6238:	96 95       	lsr	r25
    623a:	87 95       	ror	r24
    623c:	28 2f       	mov	r18, r24
  if(newValue != value)
    623e:	82 81       	ldd	r24, Z+2	; 0x02
    6240:	28 17       	cp	r18, r24
    6242:	a1 f0       	breq	.+40     	; 0x626c <AmbientLight::read()+0x150>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    6244:	82 81       	ldd	r24, Z+2	; 0x02
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	88 0f       	add	r24, r24
    624a:	99 1f       	adc	r25, r25
    624c:	88 0f       	add	r24, r24
    624e:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    6250:	08 17       	cp	r16, r24
    6252:	19 07       	cpc	r17, r25
    6254:	18 f4       	brcc	.+6      	; 0x625c <AmbientLight::read()+0x140>
    6256:	80 1b       	sub	r24, r16
    6258:	91 0b       	sbc	r25, r17
    625a:	04 c0       	rjmp	.+8      	; 0x6264 <AmbientLight::read()+0x148>
    625c:	a8 01       	movw	r20, r16
    625e:	48 1b       	sub	r20, r24
    6260:	59 0b       	sbc	r21, r25
    6262:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    6264:	03 97       	sbiw	r24, 0x03	; 3
    6266:	10 f0       	brcs	.+4      	; 0x626c <AmbientLight::read()+0x150>
    6268:	f7 01       	movw	r30, r14
    626a:	22 83       	std	Z+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    626c:	f7 01       	movw	r30, r14
    626e:	82 81       	ldd	r24, Z+2	; 0x02
  }
    6270:	28 96       	adiw	r28, 0x08	; 8
    6272:	0f b6       	in	r0, 0x3f	; 63
    6274:	f8 94       	cli
    6276:	de bf       	out	0x3e, r29	; 62
    6278:	0f be       	out	0x3f, r0	; 63
    627a:	cd bf       	out	0x3d, r28	; 61
    627c:	cf 91       	pop	r28
    627e:	df 91       	pop	r29
    6280:	1f 91       	pop	r17
    6282:	0f 91       	pop	r16
    6284:	ff 90       	pop	r15
    6286:	ef 90       	pop	r14
    6288:	08 95       	ret

0000628a <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    628a:	81 e0       	ldi	r24, 0x01	; 1
    628c:	80 93 f3 02 	sts	0x02F3, r24
  // set address of targeted slave
  txAddress = address;
    6290:	60 93 d0 02 	sts	0x02D0, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6294:	10 92 f1 02 	sts	0x02F1, r1
  txBufferLength = 0;
    6298:	10 92 f2 02 	sts	0x02F2, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    629c:	08 95       	ret

0000629e <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    629e:	20 91 cf 02 	lds	r18, 0x02CF
    62a2:	30 e0       	ldi	r19, 0x00	; 0
    62a4:	80 91 ce 02 	lds	r24, 0x02CE
    62a8:	28 1b       	sub	r18, r24
    62aa:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    62ac:	c9 01       	movw	r24, r18
    62ae:	08 95       	ret

000062b0 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    62b0:	40 91 ce 02 	lds	r20, 0x02CE
    62b4:	80 91 cf 02 	lds	r24, 0x02CF
    62b8:	48 17       	cp	r20, r24
    62ba:	18 f0       	brcs	.+6      	; 0x62c2 <TwoWire::read()+0x12>
    62bc:	2f ef       	ldi	r18, 0xFF	; 255
    62be:	3f ef       	ldi	r19, 0xFF	; 255
    62c0:	0a c0       	rjmp	.+20     	; 0x62d6 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    62c2:	e4 2f       	mov	r30, r20
    62c4:	f0 e0       	ldi	r31, 0x00	; 0
    62c6:	e2 55       	subi	r30, 0x52	; 82
    62c8:	fd 4f       	sbci	r31, 0xFD	; 253
    62ca:	80 81       	ld	r24, Z
    62cc:	28 2f       	mov	r18, r24
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    62d0:	4f 5f       	subi	r20, 0xFF	; 255
    62d2:	40 93 ce 02 	sts	0x02CE, r20
  }

  return value;
}
    62d6:	c9 01       	movw	r24, r18
    62d8:	08 95       	ret

000062da <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    62da:	e0 91 ce 02 	lds	r30, 0x02CE
    62de:	80 91 cf 02 	lds	r24, 0x02CF
    62e2:	e8 17       	cp	r30, r24
    62e4:	18 f0       	brcs	.+6      	; 0x62ec <TwoWire::peek()+0x12>
    62e6:	ef ef       	ldi	r30, 0xFF	; 255
    62e8:	ff ef       	ldi	r31, 0xFF	; 255
    62ea:	06 c0       	rjmp	.+12     	; 0x62f8 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    62ec:	f0 e0       	ldi	r31, 0x00	; 0
    62ee:	e2 55       	subi	r30, 0x52	; 82
    62f0:	fd 4f       	sbci	r31, 0xFD	; 253
    62f2:	80 81       	ld	r24, Z
    62f4:	e8 2f       	mov	r30, r24
    62f6:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    62f8:	cf 01       	movw	r24, r30
    62fa:	08 95       	ret

000062fc <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    62fc:	08 95       	ret

000062fe <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    62fe:	10 92 f7 02 	sts	0x02F7, r1
    6302:	10 92 f6 02 	sts	0x02F6, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6306:	88 ee       	ldi	r24, 0xE8	; 232
    6308:	93 e0       	ldi	r25, 0x03	; 3
    630a:	a0 e0       	ldi	r26, 0x00	; 0
    630c:	b0 e0       	ldi	r27, 0x00	; 0
    630e:	80 93 f8 02 	sts	0x02F8, r24
    6312:	90 93 f9 02 	sts	0x02F9, r25
    6316:	a0 93 fa 02 	sts	0x02FA, r26
    631a:	b0 93 fb 02 	sts	0x02FB, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    631e:	8f e1       	ldi	r24, 0x1F	; 31
    6320:	92 e0       	ldi	r25, 0x02	; 2
    6322:	90 93 f5 02 	sts	0x02F5, r25
    6326:	80 93 f4 02 	sts	0x02F4, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    632a:	08 95       	ret

0000632c <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    632c:	cf 92       	push	r12
    632e:	df 92       	push	r13
    6330:	ef 92       	push	r14
    6332:	ff 92       	push	r15
    6334:	0f 93       	push	r16
    6336:	1f 93       	push	r17
    6338:	cf 93       	push	r28
    633a:	df 93       	push	r29
    633c:	7c 01       	movw	r14, r24
    633e:	6b 01       	movw	r12, r22
    6340:	8a 01       	movw	r16, r20
{
  if(transmitting){
    6342:	80 91 f3 02 	lds	r24, 0x02F3
    6346:	88 23       	and	r24, r24
    6348:	a1 f0       	breq	.+40     	; 0x6372 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    634a:	c0 e0       	ldi	r28, 0x00	; 0
    634c:	d0 e0       	ldi	r29, 0x00	; 0
    634e:	0d c0       	rjmp	.+26     	; 0x636a <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    6350:	d7 01       	movw	r26, r14
    6352:	ed 91       	ld	r30, X+
    6354:	fc 91       	ld	r31, X
    6356:	d6 01       	movw	r26, r12
    6358:	ac 0f       	add	r26, r28
    635a:	bd 1f       	adc	r27, r29
    635c:	01 90       	ld	r0, Z+
    635e:	f0 81       	ld	r31, Z
    6360:	e0 2d       	mov	r30, r0
    6362:	c7 01       	movw	r24, r14
    6364:	6c 91       	ld	r22, X
    6366:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    6368:	21 96       	adiw	r28, 0x01	; 1
    636a:	c0 17       	cp	r28, r16
    636c:	d1 07       	cpc	r29, r17
    636e:	80 f3       	brcs	.-32     	; 0x6350 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    6370:	04 c0       	rjmp	.+8      	; 0x637a <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    6372:	cb 01       	movw	r24, r22
    6374:	64 2f       	mov	r22, r20
    6376:	0e 94 c8 32 	call	0x6590	; 0x6590 <twi_transmit>
  }
  return quantity;
}
    637a:	c8 01       	movw	r24, r16
    637c:	df 91       	pop	r29
    637e:	cf 91       	pop	r28
    6380:	1f 91       	pop	r17
    6382:	0f 91       	pop	r16
    6384:	ff 90       	pop	r15
    6386:	ef 90       	pop	r14
    6388:	df 90       	pop	r13
    638a:	cf 90       	pop	r12
    638c:	08 95       	ret

0000638e <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    638e:	df 93       	push	r29
    6390:	cf 93       	push	r28
    6392:	0f 92       	push	r0
    6394:	cd b7       	in	r28, 0x3d	; 61
    6396:	de b7       	in	r29, 0x3e	; 62
    6398:	fc 01       	movw	r30, r24
    639a:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    639c:	80 91 f3 02 	lds	r24, 0x02F3
    63a0:	88 23       	and	r24, r24
    63a2:	c9 f0       	breq	.+50     	; 0x63d6 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    63a4:	80 91 f2 02 	lds	r24, 0x02F2
    63a8:	80 32       	cpi	r24, 0x20	; 32
    63aa:	38 f0       	brcs	.+14     	; 0x63ba <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    63ac:	81 e0       	ldi	r24, 0x01	; 1
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	93 83       	std	Z+3, r25	; 0x03
    63b2:	82 83       	std	Z+2, r24	; 0x02
    63b4:	20 e0       	ldi	r18, 0x00	; 0
    63b6:	30 e0       	ldi	r19, 0x00	; 0
    63b8:	15 c0       	rjmp	.+42     	; 0x63e4 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    63ba:	80 91 f1 02 	lds	r24, 0x02F1
    63be:	e8 2f       	mov	r30, r24
    63c0:	f0 e0       	ldi	r31, 0x00	; 0
    63c2:	ef 52       	subi	r30, 0x2F	; 47
    63c4:	fd 4f       	sbci	r31, 0xFD	; 253
    63c6:	99 81       	ldd	r25, Y+1	; 0x01
    63c8:	90 83       	st	Z, r25
    ++txBufferIndex;
    63ca:	8f 5f       	subi	r24, 0xFF	; 255
    63cc:	80 93 f1 02 	sts	0x02F1, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    63d0:	80 93 f2 02 	sts	0x02F2, r24
    63d4:	05 c0       	rjmp	.+10     	; 0x63e0 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    63d6:	ce 01       	movw	r24, r28
    63d8:	01 96       	adiw	r24, 0x01	; 1
    63da:	61 e0       	ldi	r22, 0x01	; 1
    63dc:	0e 94 c8 32 	call	0x6590	; 0x6590 <twi_transmit>
    63e0:	21 e0       	ldi	r18, 0x01	; 1
    63e2:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    63e4:	c9 01       	movw	r24, r18
    63e6:	0f 90       	pop	r0
    63e8:	cf 91       	pop	r28
    63ea:	df 91       	pop	r29
    63ec:	08 95       	ret

000063ee <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    63ee:	0f 93       	push	r16
    63f0:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    63f2:	80 91 d0 02 	lds	r24, 0x02D0
    63f6:	61 ed       	ldi	r22, 0xD1	; 209
    63f8:	72 e0       	ldi	r23, 0x02	; 2
    63fa:	40 91 f2 02 	lds	r20, 0x02F2
    63fe:	21 e0       	ldi	r18, 0x01	; 1
    6400:	0e 94 73 32 	call	0x64e6	; 0x64e6 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6404:	10 92 f1 02 	sts	0x02F1, r1
  txBufferLength = 0;
    6408:	10 92 f2 02 	sts	0x02F2, r1
  // indicate that we are done transmitting
  transmitting = 0;
    640c:	10 92 f3 02 	sts	0x02F3, r1
  return ret;
}
    6410:	0f 91       	pop	r16
    6412:	08 95       	ret

00006414 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    6414:	61 e0       	ldi	r22, 0x01	; 1
    6416:	0e 94 f7 31 	call	0x63ee	; 0x63ee <TwoWire::endTransmission(unsigned char)>
}
    641a:	08 95       	ret

0000641c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    641c:	41 32       	cpi	r20, 0x21	; 33
    641e:	08 f0       	brcs	.+2      	; 0x6422 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    6420:	40 e2       	ldi	r20, 0x20	; 32
    6422:	86 2f       	mov	r24, r22
    6424:	6e ea       	ldi	r22, 0xAE	; 174
    6426:	72 e0       	ldi	r23, 0x02	; 2
    6428:	0e 94 2a 32 	call	0x6454	; 0x6454 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    642c:	10 92 ce 02 	sts	0x02CE, r1
  rxBufferLength = read;
    6430:	80 93 cf 02 	sts	0x02CF, r24

  return read;
}
    6434:	08 95       	ret

00006436 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    6436:	21 e0       	ldi	r18, 0x01	; 1
    6438:	0e 94 0e 32 	call	0x641c	; 0x641c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    643c:	08 95       	ret

0000643e <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    643e:	10 92 ce 02 	sts	0x02CE, r1
  rxBufferLength = 0;
    6442:	10 92 cf 02 	sts	0x02CF, r1

  txBufferIndex = 0;
    6446:	10 92 f1 02 	sts	0x02F1, r1
  txBufferLength = 0;
    644a:	10 92 f2 02 	sts	0x02F2, r1

  twi_init();
    644e:	0e 94 74 34 	call	0x68e8	; 0x68e8 <twi_init>
}
    6452:	08 95       	ret

00006454 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    6454:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6456:	41 32       	cpi	r20, 0x21	; 33
    6458:	10 f0       	brcs	.+4      	; 0x645e <twi_readFrom+0xa>
    645a:	40 e0       	ldi	r20, 0x00	; 0
    645c:	42 c0       	rjmp	.+132    	; 0x64e2 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    645e:	80 91 00 03 	lds	r24, 0x0300
    6462:	88 23       	and	r24, r24
    6464:	e1 f7       	brne	.-8      	; 0x645e <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    6466:	91 e0       	ldi	r25, 0x01	; 1
    6468:	90 93 00 03 	sts	0x0300, r25
  twi_sendStop = sendStop;
    646c:	20 93 02 03 	sts	0x0302, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6470:	8f ef       	ldi	r24, 0xFF	; 255
    6472:	80 93 6d 03 	sts	0x036D, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6476:	10 92 28 03 	sts	0x0328, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    647a:	41 50       	subi	r20, 0x01	; 1
    647c:	40 93 29 03 	sts	0x0329, r20
    6480:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    6482:	90 93 01 03 	sts	0x0301, r25
  twi_slarw |= address << 1;
    6486:	80 91 01 03 	lds	r24, 0x0301
    648a:	33 0f       	add	r19, r19
    648c:	83 2b       	or	r24, r19
    648e:	80 93 01 03 	sts	0x0301, r24

  if (true == twi_inRepStart) {
    6492:	80 91 03 03 	lds	r24, 0x0303
    6496:	81 30       	cpi	r24, 0x01	; 1
    6498:	41 f4       	brne	.+16     	; 0x64aa <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    649a:	10 92 03 03 	sts	0x0303, r1
    TWDR = twi_slarw;
    649e:	80 91 01 03 	lds	r24, 0x0301
    64a2:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    64a6:	85 ec       	ldi	r24, 0xC5	; 197
    64a8:	01 c0       	rjmp	.+2      	; 0x64ac <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    64aa:	85 ee       	ldi	r24, 0xE5	; 229
    64ac:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    64b0:	80 91 00 03 	lds	r24, 0x0300
    64b4:	81 30       	cpi	r24, 0x01	; 1
    64b6:	e1 f3       	breq	.-8      	; 0x64b0 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    64b8:	80 91 28 03 	lds	r24, 0x0328
    64bc:	84 17       	cp	r24, r20
    64be:	10 f4       	brcc	.+4      	; 0x64c4 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    64c0:	40 91 28 03 	lds	r20, 0x0328
    64c4:	20 e0       	ldi	r18, 0x00	; 0
    64c6:	30 e0       	ldi	r19, 0x00	; 0
    64c8:	0a c0       	rjmp	.+20     	; 0x64de <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    64ca:	fb 01       	movw	r30, r22
    64cc:	e2 0f       	add	r30, r18
    64ce:	f3 1f       	adc	r31, r19
    64d0:	d9 01       	movw	r26, r18
    64d2:	a8 5f       	subi	r26, 0xF8	; 248
    64d4:	bc 4f       	sbci	r27, 0xFC	; 252
    64d6:	8c 91       	ld	r24, X
    64d8:	80 83       	st	Z, r24
    64da:	2f 5f       	subi	r18, 0xFF	; 255
    64dc:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    64de:	24 17       	cp	r18, r20
    64e0:	a0 f3       	brcs	.-24     	; 0x64ca <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    64e2:	84 2f       	mov	r24, r20
    64e4:	08 95       	ret

000064e6 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    64e6:	0f 93       	push	r16
    64e8:	1f 93       	push	r17
    64ea:	58 2f       	mov	r21, r24
    64ec:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    64ee:	41 32       	cpi	r20, 0x21	; 33
    64f0:	10 f0       	brcs	.+4      	; 0x64f6 <twi_writeTo+0x10>
    64f2:	81 e0       	ldi	r24, 0x01	; 1
    64f4:	4a c0       	rjmp	.+148    	; 0x658a <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    64f6:	80 91 00 03 	lds	r24, 0x0300
    64fa:	88 23       	and	r24, r24
    64fc:	e1 f7       	brne	.-8      	; 0x64f6 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    64fe:	82 e0       	ldi	r24, 0x02	; 2
    6500:	80 93 00 03 	sts	0x0300, r24
  twi_sendStop = sendStop;
    6504:	00 93 02 03 	sts	0x0302, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6508:	8f ef       	ldi	r24, 0xFF	; 255
    650a:	80 93 6d 03 	sts	0x036D, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    650e:	10 92 28 03 	sts	0x0328, r1
  twi_masterBufferLength = length;
    6512:	40 93 29 03 	sts	0x0329, r20
    6516:	a8 e0       	ldi	r26, 0x08	; 8
    6518:	b3 e0       	ldi	r27, 0x03	; 3
    651a:	fb 01       	movw	r30, r22
    651c:	02 c0       	rjmp	.+4      	; 0x6522 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    651e:	81 91       	ld	r24, Z+
    6520:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    6522:	8e 2f       	mov	r24, r30
    6524:	86 1b       	sub	r24, r22
    6526:	84 17       	cp	r24, r20
    6528:	d0 f3       	brcs	.-12     	; 0x651e <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    652a:	10 92 01 03 	sts	0x0301, r1
  twi_slarw |= address << 1;
    652e:	80 91 01 03 	lds	r24, 0x0301
    6532:	55 0f       	add	r21, r21
    6534:	85 2b       	or	r24, r21
    6536:	80 93 01 03 	sts	0x0301, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    653a:	80 91 03 03 	lds	r24, 0x0303
    653e:	81 30       	cpi	r24, 0x01	; 1
    6540:	41 f4       	brne	.+16     	; 0x6552 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6542:	10 92 03 03 	sts	0x0303, r1
    TWDR = twi_slarw;				
    6546:	80 91 01 03 	lds	r24, 0x0301
    654a:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    654e:	85 ec       	ldi	r24, 0xC5	; 197
    6550:	01 c0       	rjmp	.+2      	; 0x6554 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    6552:	85 ee       	ldi	r24, 0xE5	; 229
    6554:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    6558:	11 23       	and	r17, r17
    655a:	21 f0       	breq	.+8      	; 0x6564 <twi_writeTo+0x7e>
    655c:	80 91 00 03 	lds	r24, 0x0300
    6560:	82 30       	cpi	r24, 0x02	; 2
    6562:	e1 f3       	breq	.-8      	; 0x655c <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    6564:	80 91 6d 03 	lds	r24, 0x036D
    6568:	8f 3f       	cpi	r24, 0xFF	; 255
    656a:	11 f4       	brne	.+4      	; 0x6570 <twi_writeTo+0x8a>
    656c:	80 e0       	ldi	r24, 0x00	; 0
    656e:	0d c0       	rjmp	.+26     	; 0x658a <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    6570:	80 91 6d 03 	lds	r24, 0x036D
    6574:	80 32       	cpi	r24, 0x20	; 32
    6576:	11 f4       	brne	.+4      	; 0x657c <twi_writeTo+0x96>
    6578:	82 e0       	ldi	r24, 0x02	; 2
    657a:	07 c0       	rjmp	.+14     	; 0x658a <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    657c:	80 91 6d 03 	lds	r24, 0x036D
    6580:	80 33       	cpi	r24, 0x30	; 48
    6582:	11 f0       	breq	.+4      	; 0x6588 <twi_writeTo+0xa2>
    6584:	84 e0       	ldi	r24, 0x04	; 4
    6586:	01 c0       	rjmp	.+2      	; 0x658a <twi_writeTo+0xa4>
    6588:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    658a:	1f 91       	pop	r17
    658c:	0f 91       	pop	r16
    658e:	08 95       	ret

00006590 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    6590:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6592:	61 32       	cpi	r22, 0x21	; 33
    6594:	10 f0       	brcs	.+4      	; 0x659a <twi_transmit+0xa>
    6596:	81 e0       	ldi	r24, 0x01	; 1
    6598:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    659a:	80 91 00 03 	lds	r24, 0x0300
    659e:	84 30       	cpi	r24, 0x04	; 4
    65a0:	11 f0       	breq	.+4      	; 0x65a6 <twi_transmit+0x16>
    65a2:	82 e0       	ldi	r24, 0x02	; 2
    65a4:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    65a6:	60 93 4b 03 	sts	0x034B, r22
    65aa:	aa e2       	ldi	r26, 0x2A	; 42
    65ac:	b3 e0       	ldi	r27, 0x03	; 3
    65ae:	84 2f       	mov	r24, r20
    65b0:	9c 01       	movw	r18, r24
    65b2:	f9 01       	movw	r30, r18
    65b4:	02 c0       	rjmp	.+4      	; 0x65ba <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    65b6:	81 91       	ld	r24, Z+
    65b8:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    65ba:	8e 2f       	mov	r24, r30
    65bc:	84 1b       	sub	r24, r20
    65be:	86 17       	cp	r24, r22
    65c0:	d0 f3       	brcs	.-12     	; 0x65b6 <twi_transmit+0x26>
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    65c4:	08 95       	ret

000065c6 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    65c6:	1f 92       	push	r1
    65c8:	0f 92       	push	r0
    65ca:	0f b6       	in	r0, 0x3f	; 63
    65cc:	0f 92       	push	r0
    65ce:	11 24       	eor	r1, r1
    65d0:	2f 93       	push	r18
    65d2:	3f 93       	push	r19
    65d4:	4f 93       	push	r20
    65d6:	5f 93       	push	r21
    65d8:	6f 93       	push	r22
    65da:	7f 93       	push	r23
    65dc:	8f 93       	push	r24
    65de:	9f 93       	push	r25
    65e0:	af 93       	push	r26
    65e2:	bf 93       	push	r27
    65e4:	ef 93       	push	r30
    65e6:	ff 93       	push	r31
  switch(TW_STATUS){
    65e8:	80 91 b9 00 	lds	r24, 0x00B9
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	88 7f       	andi	r24, 0xF8	; 248
    65f0:	90 70       	andi	r25, 0x00	; 0
    65f2:	80 36       	cpi	r24, 0x60	; 96
    65f4:	91 05       	cpc	r25, r1
    65f6:	09 f4       	brne	.+2      	; 0x65fa <__vector_24+0x34>
    65f8:	f2 c0       	rjmp	.+484    	; 0x67de <__vector_24+0x218>
    65fa:	81 36       	cpi	r24, 0x61	; 97
    65fc:	91 05       	cpc	r25, r1
    65fe:	cc f5       	brge	.+114    	; 0x6672 <__vector_24+0xac>
    6600:	88 32       	cpi	r24, 0x28	; 40
    6602:	91 05       	cpc	r25, r1
    6604:	09 f4       	brne	.+2      	; 0x6608 <__vector_24+0x42>
    6606:	7b c0       	rjmp	.+246    	; 0x66fe <__vector_24+0x138>
    6608:	89 32       	cpi	r24, 0x29	; 41
    660a:	91 05       	cpc	r25, r1
    660c:	b4 f4       	brge	.+44     	; 0x663a <__vector_24+0x74>
    660e:	80 31       	cpi	r24, 0x10	; 16
    6610:	91 05       	cpc	r25, r1
    6612:	09 f4       	brne	.+2      	; 0x6616 <__vector_24+0x50>
    6614:	6f c0       	rjmp	.+222    	; 0x66f4 <__vector_24+0x12e>
    6616:	81 31       	cpi	r24, 0x11	; 17
    6618:	91 05       	cpc	r25, r1
    661a:	3c f4       	brge	.+14     	; 0x662a <__vector_24+0x64>
    661c:	00 97       	sbiw	r24, 0x00	; 0
    661e:	09 f4       	brne	.+2      	; 0x6622 <__vector_24+0x5c>
    6620:	47 c1       	rjmp	.+654    	; 0x68b0 <__vector_24+0x2ea>
    6622:	08 97       	sbiw	r24, 0x08	; 8
    6624:	09 f0       	breq	.+2      	; 0x6628 <__vector_24+0x62>
    6626:	4f c1       	rjmp	.+670    	; 0x68c6 <__vector_24+0x300>
    6628:	65 c0       	rjmp	.+202    	; 0x66f4 <__vector_24+0x12e>
    662a:	88 31       	cpi	r24, 0x18	; 24
    662c:	91 05       	cpc	r25, r1
    662e:	09 f4       	brne	.+2      	; 0x6632 <__vector_24+0x6c>
    6630:	66 c0       	rjmp	.+204    	; 0x66fe <__vector_24+0x138>
    6632:	80 97       	sbiw	r24, 0x20	; 32
    6634:	09 f0       	breq	.+2      	; 0x6638 <__vector_24+0x72>
    6636:	47 c1       	rjmp	.+654    	; 0x68c6 <__vector_24+0x300>
    6638:	82 c0       	rjmp	.+260    	; 0x673e <__vector_24+0x178>
    663a:	80 34       	cpi	r24, 0x40	; 64
    663c:	91 05       	cpc	r25, r1
    663e:	09 f4       	brne	.+2      	; 0x6642 <__vector_24+0x7c>
    6640:	a4 c0       	rjmp	.+328    	; 0x678a <__vector_24+0x1c4>
    6642:	81 34       	cpi	r24, 0x41	; 65
    6644:	91 05       	cpc	r25, r1
    6646:	44 f4       	brge	.+16     	; 0x6658 <__vector_24+0x92>
    6648:	80 33       	cpi	r24, 0x30	; 48
    664a:	91 05       	cpc	r25, r1
    664c:	09 f4       	brne	.+2      	; 0x6650 <__vector_24+0x8a>
    664e:	82 c0       	rjmp	.+260    	; 0x6754 <__vector_24+0x18e>
    6650:	c8 97       	sbiw	r24, 0x38	; 56
    6652:	09 f0       	breq	.+2      	; 0x6656 <__vector_24+0x90>
    6654:	38 c1       	rjmp	.+624    	; 0x68c6 <__vector_24+0x300>
    6656:	89 c0       	rjmp	.+274    	; 0x676a <__vector_24+0x1a4>
    6658:	80 35       	cpi	r24, 0x50	; 80
    665a:	91 05       	cpc	r25, r1
    665c:	09 f4       	brne	.+2      	; 0x6660 <__vector_24+0x9a>
    665e:	89 c0       	rjmp	.+274    	; 0x6772 <__vector_24+0x1ac>
    6660:	88 35       	cpi	r24, 0x58	; 88
    6662:	91 05       	cpc	r25, r1
    6664:	09 f4       	brne	.+2      	; 0x6668 <__vector_24+0xa2>
    6666:	96 c0       	rjmp	.+300    	; 0x6794 <__vector_24+0x1ce>
    6668:	88 34       	cpi	r24, 0x48	; 72
    666a:	91 05       	cpc	r25, r1
    666c:	09 f0       	breq	.+2      	; 0x6670 <__vector_24+0xaa>
    666e:	2b c1       	rjmp	.+598    	; 0x68c6 <__vector_24+0x300>
    6670:	ae c0       	rjmp	.+348    	; 0x67ce <__vector_24+0x208>
    6672:	88 39       	cpi	r24, 0x98	; 152
    6674:	91 05       	cpc	r25, r1
    6676:	09 f4       	brne	.+2      	; 0x667a <__vector_24+0xb4>
    6678:	13 c1       	rjmp	.+550    	; 0x68a0 <__vector_24+0x2da>
    667a:	89 39       	cpi	r24, 0x99	; 153
    667c:	91 05       	cpc	r25, r1
    667e:	ec f4       	brge	.+58     	; 0x66ba <__vector_24+0xf4>
    6680:	88 37       	cpi	r24, 0x78	; 120
    6682:	91 05       	cpc	r25, r1
    6684:	09 f4       	brne	.+2      	; 0x6688 <__vector_24+0xc2>
    6686:	ab c0       	rjmp	.+342    	; 0x67de <__vector_24+0x218>
    6688:	89 37       	cpi	r24, 0x79	; 121
    668a:	91 05       	cpc	r25, r1
    668c:	4c f4       	brge	.+18     	; 0x66a0 <__vector_24+0xda>
    668e:	88 36       	cpi	r24, 0x68	; 104
    6690:	91 05       	cpc	r25, r1
    6692:	09 f4       	brne	.+2      	; 0x6696 <__vector_24+0xd0>
    6694:	a4 c0       	rjmp	.+328    	; 0x67de <__vector_24+0x218>
    6696:	80 37       	cpi	r24, 0x70	; 112
    6698:	91 05       	cpc	r25, r1
    669a:	09 f0       	breq	.+2      	; 0x669e <__vector_24+0xd8>
    669c:	14 c1       	rjmp	.+552    	; 0x68c6 <__vector_24+0x300>
    669e:	9f c0       	rjmp	.+318    	; 0x67de <__vector_24+0x218>
    66a0:	88 38       	cpi	r24, 0x88	; 136
    66a2:	91 05       	cpc	r25, r1
    66a4:	09 f4       	brne	.+2      	; 0x66a8 <__vector_24+0xe2>
    66a6:	fc c0       	rjmp	.+504    	; 0x68a0 <__vector_24+0x2da>
    66a8:	80 39       	cpi	r24, 0x90	; 144
    66aa:	91 05       	cpc	r25, r1
    66ac:	09 f4       	brne	.+2      	; 0x66b0 <__vector_24+0xea>
    66ae:	9d c0       	rjmp	.+314    	; 0x67ea <__vector_24+0x224>
    66b0:	80 38       	cpi	r24, 0x80	; 128
    66b2:	91 05       	cpc	r25, r1
    66b4:	09 f0       	breq	.+2      	; 0x66b8 <__vector_24+0xf2>
    66b6:	07 c1       	rjmp	.+526    	; 0x68c6 <__vector_24+0x300>
    66b8:	98 c0       	rjmp	.+304    	; 0x67ea <__vector_24+0x224>
    66ba:	80 3b       	cpi	r24, 0xB0	; 176
    66bc:	91 05       	cpc	r25, r1
    66be:	09 f4       	brne	.+2      	; 0x66c2 <__vector_24+0xfc>
    66c0:	c6 c0       	rjmp	.+396    	; 0x684e <__vector_24+0x288>
    66c2:	81 3b       	cpi	r24, 0xB1	; 177
    66c4:	91 05       	cpc	r25, r1
    66c6:	4c f4       	brge	.+18     	; 0x66da <__vector_24+0x114>
    66c8:	80 3a       	cpi	r24, 0xA0	; 160
    66ca:	91 05       	cpc	r25, r1
    66cc:	09 f4       	brne	.+2      	; 0x66d0 <__vector_24+0x10a>
    66ce:	9f c0       	rjmp	.+318    	; 0x680e <__vector_24+0x248>
    66d0:	88 3a       	cpi	r24, 0xA8	; 168
    66d2:	91 05       	cpc	r25, r1
    66d4:	09 f0       	breq	.+2      	; 0x66d8 <__vector_24+0x112>
    66d6:	f7 c0       	rjmp	.+494    	; 0x68c6 <__vector_24+0x300>
    66d8:	ba c0       	rjmp	.+372    	; 0x684e <__vector_24+0x288>
    66da:	80 3c       	cpi	r24, 0xC0	; 192
    66dc:	91 05       	cpc	r25, r1
    66de:	09 f4       	brne	.+2      	; 0x66e2 <__vector_24+0x11c>
    66e0:	e3 c0       	rjmp	.+454    	; 0x68a8 <__vector_24+0x2e2>
    66e2:	88 3c       	cpi	r24, 0xC8	; 200
    66e4:	91 05       	cpc	r25, r1
    66e6:	09 f4       	brne	.+2      	; 0x66ea <__vector_24+0x124>
    66e8:	df c0       	rjmp	.+446    	; 0x68a8 <__vector_24+0x2e2>
    66ea:	88 3b       	cpi	r24, 0xB8	; 184
    66ec:	91 05       	cpc	r25, r1
    66ee:	09 f0       	breq	.+2      	; 0x66f2 <__vector_24+0x12c>
    66f0:	ea c0       	rjmp	.+468    	; 0x68c6 <__vector_24+0x300>
    66f2:	c2 c0       	rjmp	.+388    	; 0x6878 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    66f4:	80 91 01 03 	lds	r24, 0x0301
    66f8:	80 93 bb 00 	sts	0x00BB, r24
    66fc:	cf c0       	rjmp	.+414    	; 0x689c <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    66fe:	90 91 28 03 	lds	r25, 0x0328
    6702:	80 91 29 03 	lds	r24, 0x0329
    6706:	98 17       	cp	r25, r24
    6708:	68 f4       	brcc	.+26     	; 0x6724 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    670a:	90 91 28 03 	lds	r25, 0x0328
    670e:	e9 2f       	mov	r30, r25
    6710:	f0 e0       	ldi	r31, 0x00	; 0
    6712:	e8 5f       	subi	r30, 0xF8	; 248
    6714:	fc 4f       	sbci	r31, 0xFC	; 252
    6716:	80 81       	ld	r24, Z
    6718:	80 93 bb 00 	sts	0x00BB, r24
    671c:	9f 5f       	subi	r25, 0xFF	; 255
    671e:	90 93 28 03 	sts	0x0328, r25
    6722:	bc c0       	rjmp	.+376    	; 0x689c <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    6724:	80 91 02 03 	lds	r24, 0x0302
    6728:	88 23       	and	r24, r24
    672a:	09 f4       	brne	.+2      	; 0x672e <__vector_24+0x168>
    672c:	4b c0       	rjmp	.+150    	; 0x67c4 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    672e:	85 ed       	ldi	r24, 0xD5	; 213
    6730:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6734:	80 91 bc 00 	lds	r24, 0x00BC
    6738:	84 fd       	sbrc	r24, 4
    673a:	fc cf       	rjmp	.-8      	; 0x6734 <__vector_24+0x16e>
    673c:	c2 c0       	rjmp	.+388    	; 0x68c2 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    673e:	80 e2       	ldi	r24, 0x20	; 32
    6740:	80 93 6d 03 	sts	0x036D, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6744:	85 ed       	ldi	r24, 0xD5	; 213
    6746:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    674a:	80 91 bc 00 	lds	r24, 0x00BC
    674e:	84 fd       	sbrc	r24, 4
    6750:	fc cf       	rjmp	.-8      	; 0x674a <__vector_24+0x184>
    6752:	b7 c0       	rjmp	.+366    	; 0x68c2 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6754:	80 e3       	ldi	r24, 0x30	; 48
    6756:	80 93 6d 03 	sts	0x036D, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    675a:	85 ed       	ldi	r24, 0xD5	; 213
    675c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6760:	80 91 bc 00 	lds	r24, 0x00BC
    6764:	84 fd       	sbrc	r24, 4
    6766:	fc cf       	rjmp	.-8      	; 0x6760 <__vector_24+0x19a>
    6768:	ac c0       	rjmp	.+344    	; 0x68c2 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    676a:	88 e3       	ldi	r24, 0x38	; 56
    676c:	80 93 6d 03 	sts	0x036D, r24
    6770:	9b c0       	rjmp	.+310    	; 0x68a8 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6772:	80 91 28 03 	lds	r24, 0x0328
    6776:	90 91 bb 00 	lds	r25, 0x00BB
    677a:	e8 2f       	mov	r30, r24
    677c:	f0 e0       	ldi	r31, 0x00	; 0
    677e:	e8 5f       	subi	r30, 0xF8	; 248
    6780:	fc 4f       	sbci	r31, 0xFC	; 252
    6782:	90 83       	st	Z, r25
    6784:	8f 5f       	subi	r24, 0xFF	; 255
    6786:	80 93 28 03 	sts	0x0328, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    678a:	90 91 28 03 	lds	r25, 0x0328
    678e:	80 91 29 03 	lds	r24, 0x0329
    6792:	82 c0       	rjmp	.+260    	; 0x6898 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6794:	80 91 28 03 	lds	r24, 0x0328
    6798:	90 91 bb 00 	lds	r25, 0x00BB
    679c:	e8 2f       	mov	r30, r24
    679e:	f0 e0       	ldi	r31, 0x00	; 0
    67a0:	e8 5f       	subi	r30, 0xF8	; 248
    67a2:	fc 4f       	sbci	r31, 0xFC	; 252
    67a4:	90 83       	st	Z, r25
    67a6:	8f 5f       	subi	r24, 0xFF	; 255
    67a8:	80 93 28 03 	sts	0x0328, r24
	if (twi_sendStop)
    67ac:	80 91 02 03 	lds	r24, 0x0302
    67b0:	88 23       	and	r24, r24
    67b2:	41 f0       	breq	.+16     	; 0x67c4 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    67b4:	85 ed       	ldi	r24, 0xD5	; 213
    67b6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    67ba:	80 91 bc 00 	lds	r24, 0x00BC
    67be:	84 fd       	sbrc	r24, 4
    67c0:	fc cf       	rjmp	.-8      	; 0x67ba <__vector_24+0x1f4>
    67c2:	7f c0       	rjmp	.+254    	; 0x68c2 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    67c4:	81 e0       	ldi	r24, 0x01	; 1
    67c6:	80 93 03 03 	sts	0x0303, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    67ca:	84 ea       	ldi	r24, 0xA4	; 164
    67cc:	6e c0       	rjmp	.+220    	; 0x68aa <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    67ce:	85 ed       	ldi	r24, 0xD5	; 213
    67d0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    67d4:	80 91 bc 00 	lds	r24, 0x00BC
    67d8:	84 fd       	sbrc	r24, 4
    67da:	fc cf       	rjmp	.-8      	; 0x67d4 <__vector_24+0x20e>
    67dc:	72 c0       	rjmp	.+228    	; 0x68c2 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    67de:	83 e0       	ldi	r24, 0x03	; 3
    67e0:	80 93 00 03 	sts	0x0300, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    67e4:	10 92 6c 03 	sts	0x036C, r1
    67e8:	59 c0       	rjmp	.+178    	; 0x689c <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    67ea:	80 91 6c 03 	lds	r24, 0x036C
    67ee:	80 32       	cpi	r24, 0x20	; 32
    67f0:	08 f0       	brcs	.+2      	; 0x67f4 <__vector_24+0x22e>
    67f2:	56 c0       	rjmp	.+172    	; 0x68a0 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    67f4:	80 91 6c 03 	lds	r24, 0x036C
    67f8:	90 91 bb 00 	lds	r25, 0x00BB
    67fc:	e8 2f       	mov	r30, r24
    67fe:	f0 e0       	ldi	r31, 0x00	; 0
    6800:	e4 5b       	subi	r30, 0xB4	; 180
    6802:	fc 4f       	sbci	r31, 0xFC	; 252
    6804:	90 83       	st	Z, r25
    6806:	8f 5f       	subi	r24, 0xFF	; 255
    6808:	80 93 6c 03 	sts	0x036C, r24
    680c:	47 c0       	rjmp	.+142    	; 0x689c <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    680e:	80 91 6c 03 	lds	r24, 0x036C
    6812:	80 32       	cpi	r24, 0x20	; 32
    6814:	30 f4       	brcc	.+12     	; 0x6822 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6816:	e0 91 6c 03 	lds	r30, 0x036C
    681a:	f0 e0       	ldi	r31, 0x00	; 0
    681c:	e4 5b       	subi	r30, 0xB4	; 180
    681e:	fc 4f       	sbci	r31, 0xFC	; 252
    6820:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6822:	85 ed       	ldi	r24, 0xD5	; 213
    6824:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6828:	80 91 bc 00 	lds	r24, 0x00BC
    682c:	84 fd       	sbrc	r24, 4
    682e:	fc cf       	rjmp	.-8      	; 0x6828 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6830:	10 92 00 03 	sts	0x0300, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6834:	60 91 6c 03 	lds	r22, 0x036C
    6838:	e0 91 06 03 	lds	r30, 0x0306
    683c:	f0 91 07 03 	lds	r31, 0x0307
    6840:	8c e4       	ldi	r24, 0x4C	; 76
    6842:	93 e0       	ldi	r25, 0x03	; 3
    6844:	70 e0       	ldi	r23, 0x00	; 0
    6846:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6848:	10 92 6c 03 	sts	0x036C, r1
    684c:	2d c0       	rjmp	.+90     	; 0x68a8 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    684e:	84 e0       	ldi	r24, 0x04	; 4
    6850:	80 93 00 03 	sts	0x0300, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6854:	10 92 4a 03 	sts	0x034A, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6858:	10 92 4b 03 	sts	0x034B, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    685c:	e0 91 04 03 	lds	r30, 0x0304
    6860:	f0 91 05 03 	lds	r31, 0x0305
    6864:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6866:	80 91 4b 03 	lds	r24, 0x034B
    686a:	88 23       	and	r24, r24
    686c:	29 f4       	brne	.+10     	; 0x6878 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    686e:	81 e0       	ldi	r24, 0x01	; 1
    6870:	80 93 4b 03 	sts	0x034B, r24
        twi_txBuffer[0] = 0x00;
    6874:	10 92 2a 03 	sts	0x032A, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6878:	90 91 4a 03 	lds	r25, 0x034A
    687c:	e9 2f       	mov	r30, r25
    687e:	f0 e0       	ldi	r31, 0x00	; 0
    6880:	e6 5d       	subi	r30, 0xD6	; 214
    6882:	fc 4f       	sbci	r31, 0xFC	; 252
    6884:	80 81       	ld	r24, Z
    6886:	80 93 bb 00 	sts	0x00BB, r24
    688a:	9f 5f       	subi	r25, 0xFF	; 255
    688c:	90 93 4a 03 	sts	0x034A, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6890:	90 91 4a 03 	lds	r25, 0x034A
    6894:	80 91 4b 03 	lds	r24, 0x034B
    6898:	98 17       	cp	r25, r24
    689a:	10 f4       	brcc	.+4      	; 0x68a0 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    689c:	85 ec       	ldi	r24, 0xC5	; 197
    689e:	01 c0       	rjmp	.+2      	; 0x68a2 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    68a0:	85 e8       	ldi	r24, 0x85	; 133
    68a2:	80 93 bc 00 	sts	0x00BC, r24
    68a6:	0f c0       	rjmp	.+30     	; 0x68c6 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    68a8:	85 ec       	ldi	r24, 0xC5	; 197
    68aa:	80 93 bc 00 	sts	0x00BC, r24
    68ae:	09 c0       	rjmp	.+18     	; 0x68c2 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    68b0:	10 92 6d 03 	sts	0x036D, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    68b4:	85 ed       	ldi	r24, 0xD5	; 213
    68b6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    68ba:	80 91 bc 00 	lds	r24, 0x00BC
    68be:	84 fd       	sbrc	r24, 4
    68c0:	fc cf       	rjmp	.-8      	; 0x68ba <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    68c2:	10 92 00 03 	sts	0x0300, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    68c6:	ff 91       	pop	r31
    68c8:	ef 91       	pop	r30
    68ca:	bf 91       	pop	r27
    68cc:	af 91       	pop	r26
    68ce:	9f 91       	pop	r25
    68d0:	8f 91       	pop	r24
    68d2:	7f 91       	pop	r23
    68d4:	6f 91       	pop	r22
    68d6:	5f 91       	pop	r21
    68d8:	4f 91       	pop	r20
    68da:	3f 91       	pop	r19
    68dc:	2f 91       	pop	r18
    68de:	0f 90       	pop	r0
    68e0:	0f be       	out	0x3f, r0	; 63
    68e2:	0f 90       	pop	r0
    68e4:	1f 90       	pop	r1
    68e6:	18 95       	reti

000068e8 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    68e8:	10 92 00 03 	sts	0x0300, r1
  twi_sendStop = true;		// default value
    68ec:	81 e0       	ldi	r24, 0x01	; 1
    68ee:	80 93 02 03 	sts	0x0302, r24
  twi_inRepStart = false;
    68f2:	10 92 03 03 	sts	0x0303, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    68f6:	82 e1       	ldi	r24, 0x12	; 18
    68f8:	61 e0       	ldi	r22, 0x01	; 1
    68fa:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <digitalWrite>
  digitalWrite(SCL, 1);
    68fe:	83 e1       	ldi	r24, 0x13	; 19
    6900:	61 e0       	ldi	r22, 0x01	; 1
    6902:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    6906:	e9 eb       	ldi	r30, 0xB9	; 185
    6908:	f0 e0       	ldi	r31, 0x00	; 0
    690a:	80 81       	ld	r24, Z
    690c:	8e 7f       	andi	r24, 0xFE	; 254
    690e:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6910:	80 81       	ld	r24, Z
    6912:	8d 7f       	andi	r24, 0xFD	; 253
    6914:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    6916:	8d ef       	ldi	r24, 0xFD	; 253
    6918:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    691c:	85 e4       	ldi	r24, 0x45	; 69
    691e:	80 93 bc 00 	sts	0x00BC, r24
}
    6922:	08 95       	ret

00006924 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6924:	cf 93       	push	r28
    6926:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6928:	48 2f       	mov	r20, r24
    692a:	50 e0       	ldi	r21, 0x00	; 0
    692c:	ca 01       	movw	r24, r20
    692e:	8a 59       	subi	r24, 0x9A	; 154
    6930:	9b 4f       	sbci	r25, 0xFB	; 251
    6932:	fc 01       	movw	r30, r24
    6934:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6936:	4e 5a       	subi	r20, 0xAE	; 174
    6938:	5b 4f       	sbci	r21, 0xFB	; 251
    693a:	fa 01       	movw	r30, r20
    693c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    693e:	88 23       	and	r24, r24
    6940:	69 f1       	breq	.+90     	; 0x699c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	88 0f       	add	r24, r24
    6946:	99 1f       	adc	r25, r25
    6948:	fc 01       	movw	r30, r24
    694a:	ec 5c       	subi	r30, 0xCC	; 204
    694c:	fb 4f       	sbci	r31, 0xFB	; 251
    694e:	a5 91       	lpm	r26, Z+
    6950:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6952:	fc 01       	movw	r30, r24
    6954:	e2 5c       	subi	r30, 0xC2	; 194
    6956:	fb 4f       	sbci	r31, 0xFB	; 251
    6958:	c5 91       	lpm	r28, Z+
    695a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    695c:	66 23       	and	r22, r22
    695e:	51 f4       	brne	.+20     	; 0x6974 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6960:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6962:	f8 94       	cli
		*reg &= ~bit;
    6964:	8c 91       	ld	r24, X
    6966:	93 2f       	mov	r25, r19
    6968:	90 95       	com	r25
    696a:	89 23       	and	r24, r25
    696c:	8c 93       	st	X, r24
		*out &= ~bit;
    696e:	88 81       	ld	r24, Y
    6970:	89 23       	and	r24, r25
    6972:	0b c0       	rjmp	.+22     	; 0x698a <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6974:	62 30       	cpi	r22, 0x02	; 2
    6976:	61 f4       	brne	.+24     	; 0x6990 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6978:	2f b7       	in	r18, 0x3f	; 63
                cli();
    697a:	f8 94       	cli
		*reg &= ~bit;
    697c:	8c 91       	ld	r24, X
    697e:	93 2f       	mov	r25, r19
    6980:	90 95       	com	r25
    6982:	89 23       	and	r24, r25
    6984:	8c 93       	st	X, r24
		*out |= bit;
    6986:	88 81       	ld	r24, Y
    6988:	83 2b       	or	r24, r19
    698a:	88 83       	st	Y, r24
		SREG = oldSREG;
    698c:	2f bf       	out	0x3f, r18	; 63
    698e:	06 c0       	rjmp	.+12     	; 0x699c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6990:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6992:	f8 94       	cli
		*reg |= bit;
    6994:	8c 91       	ld	r24, X
    6996:	83 2b       	or	r24, r19
    6998:	8c 93       	st	X, r24
		SREG = oldSREG;
    699a:	9f bf       	out	0x3f, r25	; 63
	}
}
    699c:	df 91       	pop	r29
    699e:	cf 91       	pop	r28
    69a0:	08 95       	ret

000069a2 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    69a2:	48 2f       	mov	r20, r24
    69a4:	50 e0       	ldi	r21, 0x00	; 0
    69a6:	ca 01       	movw	r24, r20
    69a8:	86 58       	subi	r24, 0x86	; 134
    69aa:	9b 4f       	sbci	r25, 0xFB	; 251
    69ac:	fc 01       	movw	r30, r24
    69ae:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    69b0:	ca 01       	movw	r24, r20
    69b2:	8a 59       	subi	r24, 0x9A	; 154
    69b4:	9b 4f       	sbci	r25, 0xFB	; 251
    69b6:	fc 01       	movw	r30, r24
    69b8:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    69ba:	4e 5a       	subi	r20, 0xAE	; 174
    69bc:	5b 4f       	sbci	r21, 0xFB	; 251
    69be:	fa 01       	movw	r30, r20
    69c0:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    69c2:	33 23       	and	r19, r19
    69c4:	09 f4       	brne	.+2      	; 0x69c8 <digitalWrite+0x26>
    69c6:	40 c0       	rjmp	.+128    	; 0x6a48 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    69c8:	22 23       	and	r18, r18
    69ca:	51 f1       	breq	.+84     	; 0x6a20 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    69cc:	23 30       	cpi	r18, 0x03	; 3
    69ce:	71 f0       	breq	.+28     	; 0x69ec <digitalWrite+0x4a>
    69d0:	24 30       	cpi	r18, 0x04	; 4
    69d2:	28 f4       	brcc	.+10     	; 0x69de <digitalWrite+0x3c>
    69d4:	21 30       	cpi	r18, 0x01	; 1
    69d6:	a1 f0       	breq	.+40     	; 0x6a00 <digitalWrite+0x5e>
    69d8:	22 30       	cpi	r18, 0x02	; 2
    69da:	11 f5       	brne	.+68     	; 0x6a20 <digitalWrite+0x7e>
    69dc:	14 c0       	rjmp	.+40     	; 0x6a06 <digitalWrite+0x64>
    69de:	26 30       	cpi	r18, 0x06	; 6
    69e0:	b1 f0       	breq	.+44     	; 0x6a0e <digitalWrite+0x6c>
    69e2:	27 30       	cpi	r18, 0x07	; 7
    69e4:	c1 f0       	breq	.+48     	; 0x6a16 <digitalWrite+0x74>
    69e6:	24 30       	cpi	r18, 0x04	; 4
    69e8:	d9 f4       	brne	.+54     	; 0x6a20 <digitalWrite+0x7e>
    69ea:	04 c0       	rjmp	.+8      	; 0x69f4 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    69ec:	80 91 80 00 	lds	r24, 0x0080
    69f0:	8f 77       	andi	r24, 0x7F	; 127
    69f2:	03 c0       	rjmp	.+6      	; 0x69fa <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    69f4:	80 91 80 00 	lds	r24, 0x0080
    69f8:	8f 7d       	andi	r24, 0xDF	; 223
    69fa:	80 93 80 00 	sts	0x0080, r24
    69fe:	10 c0       	rjmp	.+32     	; 0x6a20 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6a00:	84 b5       	in	r24, 0x24	; 36
    6a02:	8f 77       	andi	r24, 0x7F	; 127
    6a04:	02 c0       	rjmp	.+4      	; 0x6a0a <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6a06:	84 b5       	in	r24, 0x24	; 36
    6a08:	8f 7d       	andi	r24, 0xDF	; 223
    6a0a:	84 bd       	out	0x24, r24	; 36
    6a0c:	09 c0       	rjmp	.+18     	; 0x6a20 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6a0e:	80 91 b0 00 	lds	r24, 0x00B0
    6a12:	8f 77       	andi	r24, 0x7F	; 127
    6a14:	03 c0       	rjmp	.+6      	; 0x6a1c <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6a16:	80 91 b0 00 	lds	r24, 0x00B0
    6a1a:	8f 7d       	andi	r24, 0xDF	; 223
    6a1c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6a20:	e3 2f       	mov	r30, r19
    6a22:	f0 e0       	ldi	r31, 0x00	; 0
    6a24:	ee 0f       	add	r30, r30
    6a26:	ff 1f       	adc	r31, r31
    6a28:	e2 5c       	subi	r30, 0xC2	; 194
    6a2a:	fb 4f       	sbci	r31, 0xFB	; 251
    6a2c:	a5 91       	lpm	r26, Z+
    6a2e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6a30:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6a32:	f8 94       	cli

	if (val == LOW) {
    6a34:	66 23       	and	r22, r22
    6a36:	21 f4       	brne	.+8      	; 0x6a40 <digitalWrite+0x9e>
		*out &= ~bit;
    6a38:	8c 91       	ld	r24, X
    6a3a:	90 95       	com	r25
    6a3c:	89 23       	and	r24, r25
    6a3e:	02 c0       	rjmp	.+4      	; 0x6a44 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6a40:	8c 91       	ld	r24, X
    6a42:	89 2b       	or	r24, r25
    6a44:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    6a46:	2f bf       	out	0x3f, r18	; 63
    6a48:	08 95       	ret

00006a4a <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    6a4a:	08 95       	ret

00006a4c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    6a4c:	1f 92       	push	r1
    6a4e:	0f 92       	push	r0
    6a50:	0f b6       	in	r0, 0x3f	; 63
    6a52:	0f 92       	push	r0
    6a54:	11 24       	eor	r1, r1
    6a56:	2f 93       	push	r18
    6a58:	3f 93       	push	r19
    6a5a:	4f 93       	push	r20
    6a5c:	8f 93       	push	r24
    6a5e:	9f 93       	push	r25
    6a60:	ef 93       	push	r30
    6a62:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    6a64:	80 91 c0 00 	lds	r24, 0x00C0
    6a68:	82 fd       	sbrc	r24, 2
    6a6a:	1d c0       	rjmp	.+58     	; 0x6aa6 <__vector_18+0x5a>
      unsigned char c = UDR0;
    6a6c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6a70:	20 91 ae 03 	lds	r18, 0x03AE
    6a74:	30 91 af 03 	lds	r19, 0x03AF

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6a78:	2f 5f       	subi	r18, 0xFF	; 255
    6a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a7c:	2f 73       	andi	r18, 0x3F	; 63
    6a7e:	30 70       	andi	r19, 0x00	; 0
    6a80:	80 91 b0 03 	lds	r24, 0x03B0
    6a84:	90 91 b1 03 	lds	r25, 0x03B1
    6a88:	28 17       	cp	r18, r24
    6a8a:	39 07       	cpc	r19, r25
    6a8c:	71 f0       	breq	.+28     	; 0x6aaa <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6a8e:	e0 91 ae 03 	lds	r30, 0x03AE
    6a92:	f0 91 af 03 	lds	r31, 0x03AF
    6a96:	e2 59       	subi	r30, 0x92	; 146
    6a98:	fc 4f       	sbci	r31, 0xFC	; 252
    6a9a:	40 83       	st	Z, r20
    buffer->head = i;
    6a9c:	30 93 af 03 	sts	0x03AF, r19
    6aa0:	20 93 ae 03 	sts	0x03AE, r18
    6aa4:	02 c0       	rjmp	.+4      	; 0x6aaa <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    6aa6:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    6aaa:	ff 91       	pop	r31
    6aac:	ef 91       	pop	r30
    6aae:	9f 91       	pop	r25
    6ab0:	8f 91       	pop	r24
    6ab2:	4f 91       	pop	r20
    6ab4:	3f 91       	pop	r19
    6ab6:	2f 91       	pop	r18
    6ab8:	0f 90       	pop	r0
    6aba:	0f be       	out	0x3f, r0	; 63
    6abc:	0f 90       	pop	r0
    6abe:	1f 90       	pop	r1
    6ac0:	18 95       	reti

00006ac2 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6ac2:	e0 91 02 04 	lds	r30, 0x0402
    6ac6:	f0 91 03 04 	lds	r31, 0x0403
    6aca:	e0 5c       	subi	r30, 0xC0	; 192
    6acc:	ff 4f       	sbci	r31, 0xFF	; 255
    6ace:	81 91       	ld	r24, Z+
    6ad0:	91 91       	ld	r25, Z+
    6ad2:	20 81       	ld	r18, Z
    6ad4:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    6ad6:	82 1b       	sub	r24, r18
    6ad8:	93 0b       	sbc	r25, r19
    6ada:	8f 73       	andi	r24, 0x3F	; 63
    6adc:	90 70       	andi	r25, 0x00	; 0
    6ade:	89 2b       	or	r24, r25
    6ae0:	11 f0       	breq	.+4      	; 0x6ae6 <serialEventRun()+0x24>
    6ae2:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <serialEvent()>
    6ae6:	08 95       	ret

00006ae8 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    6ae8:	1f 92       	push	r1
    6aea:	0f 92       	push	r0
    6aec:	0f b6       	in	r0, 0x3f	; 63
    6aee:	0f 92       	push	r0
    6af0:	11 24       	eor	r1, r1
    6af2:	2f 93       	push	r18
    6af4:	3f 93       	push	r19
    6af6:	8f 93       	push	r24
    6af8:	9f 93       	push	r25
    6afa:	ef 93       	push	r30
    6afc:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    6afe:	20 91 f2 03 	lds	r18, 0x03F2
    6b02:	30 91 f3 03 	lds	r19, 0x03F3
    6b06:	80 91 f4 03 	lds	r24, 0x03F4
    6b0a:	90 91 f5 03 	lds	r25, 0x03F5
    6b0e:	28 17       	cp	r18, r24
    6b10:	39 07       	cpc	r19, r25
    6b12:	31 f4       	brne	.+12     	; 0x6b20 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6b14:	80 91 c1 00 	lds	r24, 0x00C1
    6b18:	8f 7d       	andi	r24, 0xDF	; 223
    6b1a:	80 93 c1 00 	sts	0x00C1, r24
    6b1e:	14 c0       	rjmp	.+40     	; 0x6b48 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    6b20:	e0 91 f4 03 	lds	r30, 0x03F4
    6b24:	f0 91 f5 03 	lds	r31, 0x03F5
    6b28:	ee 54       	subi	r30, 0x4E	; 78
    6b2a:	fc 4f       	sbci	r31, 0xFC	; 252
    6b2c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    6b2e:	80 91 f4 03 	lds	r24, 0x03F4
    6b32:	90 91 f5 03 	lds	r25, 0x03F5
    6b36:	01 96       	adiw	r24, 0x01	; 1
    6b38:	8f 73       	andi	r24, 0x3F	; 63
    6b3a:	90 70       	andi	r25, 0x00	; 0
    6b3c:	90 93 f5 03 	sts	0x03F5, r25
    6b40:	80 93 f4 03 	sts	0x03F4, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6b44:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6b48:	ff 91       	pop	r31
    6b4a:	ef 91       	pop	r30
    6b4c:	9f 91       	pop	r25
    6b4e:	8f 91       	pop	r24
    6b50:	3f 91       	pop	r19
    6b52:	2f 91       	pop	r18
    6b54:	0f 90       	pop	r0
    6b56:	0f be       	out	0x3f, r0	; 63
    6b58:	0f 90       	pop	r0
    6b5a:	1f 90       	pop	r1
    6b5c:	18 95       	reti

00006b5e <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    6b5e:	af 92       	push	r10
    6b60:	bf 92       	push	r11
    6b62:	df 92       	push	r13
    6b64:	ef 92       	push	r14
    6b66:	ff 92       	push	r15
    6b68:	0f 93       	push	r16
    6b6a:	1f 93       	push	r17
    6b6c:	cf 93       	push	r28
    6b6e:	df 93       	push	r29
    6b70:	ec 01       	movw	r28, r24
    6b72:	7a 01       	movw	r14, r20
    6b74:	8b 01       	movw	r16, r22
    6b76:	dd 24       	eor	r13, r13
    6b78:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    6b7a:	91 e0       	ldi	r25, 0x01	; 1
    6b7c:	a9 2e       	mov	r10, r25
    6b7e:	b1 2c       	mov	r11, r1
    6b80:	ec 89       	ldd	r30, Y+20	; 0x14
    6b82:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6b84:	dd 20       	and	r13, r13
    6b86:	69 f0       	breq	.+26     	; 0x6ba2 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    6b88:	c5 01       	movw	r24, r10
    6b8a:	08 a0       	ldd	r0, Y+32	; 0x20
    6b8c:	02 c0       	rjmp	.+4      	; 0x6b92 <HardwareSerial::begin(unsigned long)+0x34>
    6b8e:	88 0f       	add	r24, r24
    6b90:	99 1f       	adc	r25, r25
    6b92:	0a 94       	dec	r0
    6b94:	e2 f7       	brpl	.-8      	; 0x6b8e <HardwareSerial::begin(unsigned long)+0x30>
    6b96:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6b98:	60 e9       	ldi	r22, 0x90	; 144
    6b9a:	70 ed       	ldi	r23, 0xD0	; 208
    6b9c:	83 e0       	ldi	r24, 0x03	; 3
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	05 c0       	rjmp	.+10     	; 0x6bac <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    6ba2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6ba4:	68 e4       	ldi	r22, 0x48	; 72
    6ba6:	78 ee       	ldi	r23, 0xE8	; 232
    6ba8:	81 e0       	ldi	r24, 0x01	; 1
    6baa:	90 e0       	ldi	r25, 0x00	; 0
    6bac:	a8 01       	movw	r20, r16
    6bae:	97 01       	movw	r18, r14
    6bb0:	0e 94 00 3a 	call	0x7400	; 0x7400 <__udivmodsi4>
    6bb4:	21 50       	subi	r18, 0x01	; 1
    6bb6:	30 40       	sbci	r19, 0x00	; 0
    6bb8:	40 40       	sbci	r20, 0x00	; 0
    6bba:	50 40       	sbci	r21, 0x00	; 0
    6bbc:	56 95       	lsr	r21
    6bbe:	47 95       	ror	r20
    6bc0:	37 95       	ror	r19
    6bc2:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    6bc4:	80 e1       	ldi	r24, 0x10	; 16
    6bc6:	20 30       	cpi	r18, 0x00	; 0
    6bc8:	38 07       	cpc	r19, r24
    6bca:	20 f0       	brcs	.+8      	; 0x6bd4 <HardwareSerial::begin(unsigned long)+0x76>
    6bcc:	dd 20       	and	r13, r13
    6bce:	11 f0       	breq	.+4      	; 0x6bd4 <HardwareSerial::begin(unsigned long)+0x76>
    6bd0:	dd 24       	eor	r13, r13
    6bd2:	d6 cf       	rjmp	.-84     	; 0x6b80 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6bd4:	e8 89       	ldd	r30, Y+16	; 0x10
    6bd6:	f9 89       	ldd	r31, Y+17	; 0x11
    6bd8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6bda:	ea 89       	ldd	r30, Y+18	; 0x12
    6bdc:	fb 89       	ldd	r31, Y+19	; 0x13
    6bde:	20 83       	st	Z, r18

  transmitting = false;
    6be0:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    6be2:	ee 89       	ldd	r30, Y+22	; 0x16
    6be4:	ff 89       	ldd	r31, Y+23	; 0x17
    6be6:	40 81       	ld	r20, Z
    6be8:	21 e0       	ldi	r18, 0x01	; 1
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	c9 01       	movw	r24, r18
    6bee:	0c 8c       	ldd	r0, Y+28	; 0x1c
    6bf0:	02 c0       	rjmp	.+4      	; 0x6bf6 <HardwareSerial::begin(unsigned long)+0x98>
    6bf2:	88 0f       	add	r24, r24
    6bf4:	99 1f       	adc	r25, r25
    6bf6:	0a 94       	dec	r0
    6bf8:	e2 f7       	brpl	.-8      	; 0x6bf2 <HardwareSerial::begin(unsigned long)+0x94>
    6bfa:	48 2b       	or	r20, r24
    6bfc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    6bfe:	ee 89       	ldd	r30, Y+22	; 0x16
    6c00:	ff 89       	ldd	r31, Y+23	; 0x17
    6c02:	40 81       	ld	r20, Z
    6c04:	c9 01       	movw	r24, r18
    6c06:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6c08:	02 c0       	rjmp	.+4      	; 0x6c0e <HardwareSerial::begin(unsigned long)+0xb0>
    6c0a:	88 0f       	add	r24, r24
    6c0c:	99 1f       	adc	r25, r25
    6c0e:	0a 94       	dec	r0
    6c10:	e2 f7       	brpl	.-8      	; 0x6c0a <HardwareSerial::begin(unsigned long)+0xac>
    6c12:	48 2b       	or	r20, r24
    6c14:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    6c16:	ee 89       	ldd	r30, Y+22	; 0x16
    6c18:	ff 89       	ldd	r31, Y+23	; 0x17
    6c1a:	40 81       	ld	r20, Z
    6c1c:	c9 01       	movw	r24, r18
    6c1e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    6c20:	02 c0       	rjmp	.+4      	; 0x6c26 <HardwareSerial::begin(unsigned long)+0xc8>
    6c22:	88 0f       	add	r24, r24
    6c24:	99 1f       	adc	r25, r25
    6c26:	0a 94       	dec	r0
    6c28:	e2 f7       	brpl	.-8      	; 0x6c22 <HardwareSerial::begin(unsigned long)+0xc4>
    6c2a:	48 2b       	or	r20, r24
    6c2c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    6c2e:	ee 89       	ldd	r30, Y+22	; 0x16
    6c30:	ff 89       	ldd	r31, Y+23	; 0x17
    6c32:	80 81       	ld	r24, Z
    6c34:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6c36:	02 c0       	rjmp	.+4      	; 0x6c3c <HardwareSerial::begin(unsigned long)+0xde>
    6c38:	22 0f       	add	r18, r18
    6c3a:	33 1f       	adc	r19, r19
    6c3c:	0a 94       	dec	r0
    6c3e:	e2 f7       	brpl	.-8      	; 0x6c38 <HardwareSerial::begin(unsigned long)+0xda>
    6c40:	20 95       	com	r18
    6c42:	28 23       	and	r18, r24
    6c44:	20 83       	st	Z, r18
}
    6c46:	df 91       	pop	r29
    6c48:	cf 91       	pop	r28
    6c4a:	1f 91       	pop	r17
    6c4c:	0f 91       	pop	r16
    6c4e:	ff 90       	pop	r15
    6c50:	ef 90       	pop	r14
    6c52:	df 90       	pop	r13
    6c54:	bf 90       	pop	r11
    6c56:	af 90       	pop	r10
    6c58:	08 95       	ret

00006c5a <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    6c5a:	cf 93       	push	r28
    6c5c:	df 93       	push	r29
    6c5e:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    6c60:	1e 96       	adiw	r26, 0x0e	; 14
    6c62:	8d 91       	ld	r24, X+
    6c64:	9c 91       	ld	r25, X
    6c66:	1f 97       	sbiw	r26, 0x0f	; 15
    6c68:	ec 01       	movw	r28, r24
    6c6a:	c0 5c       	subi	r28, 0xC0	; 192
    6c6c:	df 4f       	sbci	r29, 0xFF	; 255
    6c6e:	fc 01       	movw	r30, r24
    6c70:	ee 5b       	subi	r30, 0xBE	; 190
    6c72:	ff 4f       	sbci	r31, 0xFF	; 255
    6c74:	28 81       	ld	r18, Y
    6c76:	39 81       	ldd	r19, Y+1	; 0x01
    6c78:	80 81       	ld	r24, Z
    6c7a:	91 81       	ldd	r25, Z+1	; 0x01
    6c7c:	28 17       	cp	r18, r24
    6c7e:	39 07       	cpc	r19, r25
    6c80:	c9 f7       	brne	.-14     	; 0x6c74 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    6c82:	56 96       	adiw	r26, 0x16	; 22
    6c84:	ed 91       	ld	r30, X+
    6c86:	fc 91       	ld	r31, X
    6c88:	57 97       	sbiw	r26, 0x17	; 23
    6c8a:	40 81       	ld	r20, Z
    6c8c:	21 e0       	ldi	r18, 0x01	; 1
    6c8e:	30 e0       	ldi	r19, 0x00	; 0
    6c90:	c9 01       	movw	r24, r18
    6c92:	5c 96       	adiw	r26, 0x1c	; 28
    6c94:	0c 90       	ld	r0, X
    6c96:	5c 97       	sbiw	r26, 0x1c	; 28
    6c98:	02 c0       	rjmp	.+4      	; 0x6c9e <HardwareSerial::end()+0x44>
    6c9a:	88 0f       	add	r24, r24
    6c9c:	99 1f       	adc	r25, r25
    6c9e:	0a 94       	dec	r0
    6ca0:	e2 f7       	brpl	.-8      	; 0x6c9a <HardwareSerial::end()+0x40>
    6ca2:	80 95       	com	r24
    6ca4:	84 23       	and	r24, r20
    6ca6:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    6ca8:	56 96       	adiw	r26, 0x16	; 22
    6caa:	ed 91       	ld	r30, X+
    6cac:	fc 91       	ld	r31, X
    6cae:	57 97       	sbiw	r26, 0x17	; 23
    6cb0:	40 81       	ld	r20, Z
    6cb2:	c9 01       	movw	r24, r18
    6cb4:	5d 96       	adiw	r26, 0x1d	; 29
    6cb6:	0c 90       	ld	r0, X
    6cb8:	5d 97       	sbiw	r26, 0x1d	; 29
    6cba:	02 c0       	rjmp	.+4      	; 0x6cc0 <HardwareSerial::end()+0x66>
    6cbc:	88 0f       	add	r24, r24
    6cbe:	99 1f       	adc	r25, r25
    6cc0:	0a 94       	dec	r0
    6cc2:	e2 f7       	brpl	.-8      	; 0x6cbc <HardwareSerial::end()+0x62>
    6cc4:	80 95       	com	r24
    6cc6:	84 23       	and	r24, r20
    6cc8:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    6cca:	56 96       	adiw	r26, 0x16	; 22
    6ccc:	ed 91       	ld	r30, X+
    6cce:	fc 91       	ld	r31, X
    6cd0:	57 97       	sbiw	r26, 0x17	; 23
    6cd2:	40 81       	ld	r20, Z
    6cd4:	c9 01       	movw	r24, r18
    6cd6:	5e 96       	adiw	r26, 0x1e	; 30
    6cd8:	0c 90       	ld	r0, X
    6cda:	5e 97       	sbiw	r26, 0x1e	; 30
    6cdc:	02 c0       	rjmp	.+4      	; 0x6ce2 <HardwareSerial::end()+0x88>
    6cde:	88 0f       	add	r24, r24
    6ce0:	99 1f       	adc	r25, r25
    6ce2:	0a 94       	dec	r0
    6ce4:	e2 f7       	brpl	.-8      	; 0x6cde <HardwareSerial::end()+0x84>
    6ce6:	80 95       	com	r24
    6ce8:	84 23       	and	r24, r20
    6cea:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    6cec:	56 96       	adiw	r26, 0x16	; 22
    6cee:	ed 91       	ld	r30, X+
    6cf0:	fc 91       	ld	r31, X
    6cf2:	57 97       	sbiw	r26, 0x17	; 23
    6cf4:	80 81       	ld	r24, Z
    6cf6:	5f 96       	adiw	r26, 0x1f	; 31
    6cf8:	0c 90       	ld	r0, X
    6cfa:	5f 97       	sbiw	r26, 0x1f	; 31
    6cfc:	02 c0       	rjmp	.+4      	; 0x6d02 <HardwareSerial::end()+0xa8>
    6cfe:	22 0f       	add	r18, r18
    6d00:	33 1f       	adc	r19, r19
    6d02:	0a 94       	dec	r0
    6d04:	e2 f7       	brpl	.-8      	; 0x6cfe <HardwareSerial::end()+0xa4>
    6d06:	20 95       	com	r18
    6d08:	28 23       	and	r18, r24
    6d0a:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    6d0c:	1c 96       	adiw	r26, 0x0c	; 12
    6d0e:	ed 91       	ld	r30, X+
    6d10:	fc 91       	ld	r31, X
    6d12:	1d 97       	sbiw	r26, 0x0d	; 13
    6d14:	ee 5b       	subi	r30, 0xBE	; 190
    6d16:	ff 4f       	sbci	r31, 0xFF	; 255
    6d18:	80 81       	ld	r24, Z
    6d1a:	91 81       	ldd	r25, Z+1	; 0x01
    6d1c:	92 93       	st	-Z, r25
    6d1e:	82 93       	st	-Z, r24
}
    6d20:	df 91       	pop	r29
    6d22:	cf 91       	pop	r28
    6d24:	08 95       	ret

00006d26 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6d26:	dc 01       	movw	r26, r24
    6d28:	1c 96       	adiw	r26, 0x0c	; 12
    6d2a:	ed 91       	ld	r30, X+
    6d2c:	fc 91       	ld	r31, X
    6d2e:	1d 97       	sbiw	r26, 0x0d	; 13
    6d30:	e0 5c       	subi	r30, 0xC0	; 192
    6d32:	ff 4f       	sbci	r31, 0xFF	; 255
    6d34:	21 91       	ld	r18, Z+
    6d36:	31 91       	ld	r19, Z+
    6d38:	80 81       	ld	r24, Z
    6d3a:	91 81       	ldd	r25, Z+1	; 0x01
    6d3c:	28 1b       	sub	r18, r24
    6d3e:	39 0b       	sbc	r19, r25
    6d40:	2f 73       	andi	r18, 0x3F	; 63
    6d42:	30 70       	andi	r19, 0x00	; 0
}
    6d44:	c9 01       	movw	r24, r18
    6d46:	08 95       	ret

00006d48 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    6d48:	dc 01       	movw	r26, r24
    6d4a:	1c 96       	adiw	r26, 0x0c	; 12
    6d4c:	ed 91       	ld	r30, X+
    6d4e:	fc 91       	ld	r31, X
    6d50:	1d 97       	sbiw	r26, 0x0d	; 13
    6d52:	e0 5c       	subi	r30, 0xC0	; 192
    6d54:	ff 4f       	sbci	r31, 0xFF	; 255
    6d56:	20 81       	ld	r18, Z
    6d58:	31 81       	ldd	r19, Z+1	; 0x01
    6d5a:	e0 54       	subi	r30, 0x40	; 64
    6d5c:	f0 40       	sbci	r31, 0x00	; 0
    6d5e:	df 01       	movw	r26, r30
    6d60:	ae 5b       	subi	r26, 0xBE	; 190
    6d62:	bf 4f       	sbci	r27, 0xFF	; 255
    6d64:	8d 91       	ld	r24, X+
    6d66:	9c 91       	ld	r25, X
    6d68:	11 97       	sbiw	r26, 0x01	; 1
    6d6a:	28 17       	cp	r18, r24
    6d6c:	39 07       	cpc	r19, r25
    6d6e:	19 f4       	brne	.+6      	; 0x6d76 <HardwareSerial::peek()+0x2e>
    6d70:	2f ef       	ldi	r18, 0xFF	; 255
    6d72:	3f ef       	ldi	r19, 0xFF	; 255
    6d74:	07 c0       	rjmp	.+14     	; 0x6d84 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    6d76:	8d 91       	ld	r24, X+
    6d78:	9c 91       	ld	r25, X
    6d7a:	e8 0f       	add	r30, r24
    6d7c:	f9 1f       	adc	r31, r25
    6d7e:	80 81       	ld	r24, Z
    6d80:	28 2f       	mov	r18, r24
    6d82:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6d84:	c9 01       	movw	r24, r18
    6d86:	08 95       	ret

00006d88 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    6d88:	dc 01       	movw	r26, r24
    6d8a:	1c 96       	adiw	r26, 0x0c	; 12
    6d8c:	ed 91       	ld	r30, X+
    6d8e:	fc 91       	ld	r31, X
    6d90:	1d 97       	sbiw	r26, 0x0d	; 13
    6d92:	e0 5c       	subi	r30, 0xC0	; 192
    6d94:	ff 4f       	sbci	r31, 0xFF	; 255
    6d96:	20 81       	ld	r18, Z
    6d98:	31 81       	ldd	r19, Z+1	; 0x01
    6d9a:	e0 54       	subi	r30, 0x40	; 64
    6d9c:	f0 40       	sbci	r31, 0x00	; 0
    6d9e:	df 01       	movw	r26, r30
    6da0:	ae 5b       	subi	r26, 0xBE	; 190
    6da2:	bf 4f       	sbci	r27, 0xFF	; 255
    6da4:	8d 91       	ld	r24, X+
    6da6:	9c 91       	ld	r25, X
    6da8:	11 97       	sbiw	r26, 0x01	; 1
    6daa:	28 17       	cp	r18, r24
    6dac:	39 07       	cpc	r19, r25
    6dae:	19 f4       	brne	.+6      	; 0x6db6 <HardwareSerial::read()+0x2e>
    6db0:	2f ef       	ldi	r18, 0xFF	; 255
    6db2:	3f ef       	ldi	r19, 0xFF	; 255
    6db4:	10 c0       	rjmp	.+32     	; 0x6dd6 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6db6:	8d 91       	ld	r24, X+
    6db8:	9c 91       	ld	r25, X
    6dba:	11 97       	sbiw	r26, 0x01	; 1
    6dbc:	e8 0f       	add	r30, r24
    6dbe:	f9 1f       	adc	r31, r25
    6dc0:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6dc2:	8d 91       	ld	r24, X+
    6dc4:	9c 91       	ld	r25, X
    6dc6:	11 97       	sbiw	r26, 0x01	; 1
    6dc8:	01 96       	adiw	r24, 0x01	; 1
    6dca:	8f 73       	andi	r24, 0x3F	; 63
    6dcc:	90 70       	andi	r25, 0x00	; 0
    6dce:	11 96       	adiw	r26, 0x01	; 1
    6dd0:	9c 93       	st	X, r25
    6dd2:	8e 93       	st	-X, r24
    return c;
    6dd4:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6dd6:	c9 01       	movw	r24, r18
    6dd8:	08 95       	ret

00006dda <HardwareSerial::flush()>:

void HardwareSerial::flush()
    6dda:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6ddc:	91 96       	adiw	r26, 0x21	; 33
    6dde:	8c 91       	ld	r24, X
    6de0:	91 97       	sbiw	r26, 0x21	; 33
    6de2:	88 23       	and	r24, r24
    6de4:	39 f0       	breq	.+14     	; 0x6df4 <HardwareSerial::flush()+0x1a>
    6de6:	54 96       	adiw	r26, 0x14	; 20
    6de8:	ed 91       	ld	r30, X+
    6dea:	fc 91       	ld	r31, X
    6dec:	55 97       	sbiw	r26, 0x15	; 21
    6dee:	80 81       	ld	r24, Z
    6df0:	86 ff       	sbrs	r24, 6
    6df2:	f9 cf       	rjmp	.-14     	; 0x6de6 <HardwareSerial::flush()+0xc>
  transmitting = false;
    6df4:	91 96       	adiw	r26, 0x21	; 33
    6df6:	1c 92       	st	X, r1
}
    6df8:	08 95       	ret

00006dfa <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    6dfa:	cf 93       	push	r28
    6dfc:	df 93       	push	r29
    6dfe:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6e00:	ee 85       	ldd	r30, Y+14	; 0x0e
    6e02:	ff 85       	ldd	r31, Y+15	; 0x0f
    6e04:	e0 5c       	subi	r30, 0xC0	; 192
    6e06:	ff 4f       	sbci	r31, 0xFF	; 255
    6e08:	20 81       	ld	r18, Z
    6e0a:	31 81       	ldd	r19, Z+1	; 0x01
    6e0c:	e0 54       	subi	r30, 0x40	; 64
    6e0e:	f0 40       	sbci	r31, 0x00	; 0
    6e10:	2f 5f       	subi	r18, 0xFF	; 255
    6e12:	3f 4f       	sbci	r19, 0xFF	; 255
    6e14:	2f 73       	andi	r18, 0x3F	; 63
    6e16:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6e18:	df 01       	movw	r26, r30
    6e1a:	ae 5b       	subi	r26, 0xBE	; 190
    6e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    6e1e:	8d 91       	ld	r24, X+
    6e20:	9c 91       	ld	r25, X
    6e22:	11 97       	sbiw	r26, 0x01	; 1
    6e24:	28 17       	cp	r18, r24
    6e26:	39 07       	cpc	r19, r25
    6e28:	d1 f3       	breq	.-12     	; 0x6e1e <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6e2a:	e0 5c       	subi	r30, 0xC0	; 192
    6e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e2e:	80 81       	ld	r24, Z
    6e30:	91 81       	ldd	r25, Z+1	; 0x01
    6e32:	e0 54       	subi	r30, 0x40	; 64
    6e34:	f0 40       	sbci	r31, 0x00	; 0
    6e36:	e8 0f       	add	r30, r24
    6e38:	f9 1f       	adc	r31, r25
    6e3a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6e3c:	ee 85       	ldd	r30, Y+14	; 0x0e
    6e3e:	ff 85       	ldd	r31, Y+15	; 0x0f
    6e40:	e0 5c       	subi	r30, 0xC0	; 192
    6e42:	ff 4f       	sbci	r31, 0xFF	; 255
    6e44:	31 83       	std	Z+1, r19	; 0x01
    6e46:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    6e48:	ee 89       	ldd	r30, Y+22	; 0x16
    6e4a:	ff 89       	ldd	r31, Y+23	; 0x17
    6e4c:	20 81       	ld	r18, Z
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6e54:	02 c0       	rjmp	.+4      	; 0x6e5a <HardwareSerial::write(unsigned char)+0x60>
    6e56:	88 0f       	add	r24, r24
    6e58:	99 1f       	adc	r25, r25
    6e5a:	0a 94       	dec	r0
    6e5c:	e2 f7       	brpl	.-8      	; 0x6e56 <HardwareSerial::write(unsigned char)+0x5c>
    6e5e:	28 2b       	or	r18, r24
    6e60:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    6e62:	81 e0       	ldi	r24, 0x01	; 1
    6e64:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    6e66:	ec 89       	ldd	r30, Y+20	; 0x14
    6e68:	fd 89       	ldd	r31, Y+21	; 0x15
    6e6a:	80 81       	ld	r24, Z
    6e6c:	80 64       	ori	r24, 0x40	; 64
    6e6e:	80 83       	st	Z, r24
  
  return 1;
}
    6e70:	81 e0       	ldi	r24, 0x01	; 1
    6e72:	90 e0       	ldi	r25, 0x00	; 0
    6e74:	df 91       	pop	r29
    6e76:	cf 91       	pop	r28
    6e78:	08 95       	ret

00006e7a <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    6e7a:	10 92 f9 03 	sts	0x03F9, r1
    6e7e:	10 92 f8 03 	sts	0x03F8, r1
    6e82:	88 ee       	ldi	r24, 0xE8	; 232
    6e84:	93 e0       	ldi	r25, 0x03	; 3
    6e86:	a0 e0       	ldi	r26, 0x00	; 0
    6e88:	b0 e0       	ldi	r27, 0x00	; 0
    6e8a:	80 93 fa 03 	sts	0x03FA, r24
    6e8e:	90 93 fb 03 	sts	0x03FB, r25
    6e92:	a0 93 fc 03 	sts	0x03FC, r26
    6e96:	b0 93 fd 03 	sts	0x03FD, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    6e9a:	8f e2       	ldi	r24, 0x2F	; 47
    6e9c:	92 e0       	ldi	r25, 0x02	; 2
    6e9e:	90 93 f7 03 	sts	0x03F7, r25
    6ea2:	80 93 f6 03 	sts	0x03F6, r24
{
  _rx_buffer = rx_buffer;
    6ea6:	8e e6       	ldi	r24, 0x6E	; 110
    6ea8:	93 e0       	ldi	r25, 0x03	; 3
    6eaa:	90 93 03 04 	sts	0x0403, r25
    6eae:	80 93 02 04 	sts	0x0402, r24
  _tx_buffer = tx_buffer;
    6eb2:	82 eb       	ldi	r24, 0xB2	; 178
    6eb4:	93 e0       	ldi	r25, 0x03	; 3
    6eb6:	90 93 05 04 	sts	0x0405, r25
    6eba:	80 93 04 04 	sts	0x0404, r24
  _ubrrh = ubrrh;
    6ebe:	85 ec       	ldi	r24, 0xC5	; 197
    6ec0:	90 e0       	ldi	r25, 0x00	; 0
    6ec2:	90 93 07 04 	sts	0x0407, r25
    6ec6:	80 93 06 04 	sts	0x0406, r24
  _ubrrl = ubrrl;
    6eca:	84 ec       	ldi	r24, 0xC4	; 196
    6ecc:	90 e0       	ldi	r25, 0x00	; 0
    6ece:	90 93 09 04 	sts	0x0409, r25
    6ed2:	80 93 08 04 	sts	0x0408, r24
  _ucsra = ucsra;
    6ed6:	80 ec       	ldi	r24, 0xC0	; 192
    6ed8:	90 e0       	ldi	r25, 0x00	; 0
    6eda:	90 93 0b 04 	sts	0x040B, r25
    6ede:	80 93 0a 04 	sts	0x040A, r24
  _ucsrb = ucsrb;
    6ee2:	81 ec       	ldi	r24, 0xC1	; 193
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	90 93 0d 04 	sts	0x040D, r25
    6eea:	80 93 0c 04 	sts	0x040C, r24
  _ucsrc = ucsrc;
    6eee:	82 ec       	ldi	r24, 0xC2	; 194
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	90 93 0f 04 	sts	0x040F, r25
    6ef6:	80 93 0e 04 	sts	0x040E, r24
  _udr = udr;
    6efa:	86 ec       	ldi	r24, 0xC6	; 198
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	90 93 11 04 	sts	0x0411, r25
    6f02:	80 93 10 04 	sts	0x0410, r24
  _rxen = rxen;
    6f06:	84 e0       	ldi	r24, 0x04	; 4
    6f08:	80 93 12 04 	sts	0x0412, r24
  _txen = txen;
    6f0c:	83 e0       	ldi	r24, 0x03	; 3
    6f0e:	80 93 13 04 	sts	0x0413, r24
  _rxcie = rxcie;
    6f12:	87 e0       	ldi	r24, 0x07	; 7
    6f14:	80 93 14 04 	sts	0x0414, r24
  _udrie = udrie;
    6f18:	85 e0       	ldi	r24, 0x05	; 5
    6f1a:	80 93 15 04 	sts	0x0415, r24
  _u2x = u2x;
    6f1e:	81 e0       	ldi	r24, 0x01	; 1
    6f20:	80 93 16 04 	sts	0x0416, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    6f24:	08 95       	ret

00006f26 <main>:
#include <Arduino.h>

int main(void)
    6f26:	cf 93       	push	r28
    6f28:	df 93       	push	r29
{
	init();
    6f2a:	0e 94 76 39 	call	0x72ec	; 0x72ec <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6f2e:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6f32:	c1 e6       	ldi	r28, 0x61	; 97
    6f34:	d5 e3       	ldi	r29, 0x35	; 53
#endif
	
	setup();
    
	for (;;) {
		loop();
    6f36:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <loop>
		if (serialEventRun) serialEventRun();
    6f3a:	20 97       	sbiw	r28, 0x00	; 0
    6f3c:	e1 f3       	breq	.-8      	; 0x6f36 <main+0x10>
    6f3e:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <serialEventRun()>
    6f42:	f9 cf       	rjmp	.-14     	; 0x6f36 <main+0x10>

00006f44 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6f44:	cf 92       	push	r12
    6f46:	df 92       	push	r13
    6f48:	ef 92       	push	r14
    6f4a:	ff 92       	push	r15
    6f4c:	0f 93       	push	r16
    6f4e:	1f 93       	push	r17
    6f50:	cf 93       	push	r28
    6f52:	df 93       	push	r29
    6f54:	7c 01       	movw	r14, r24
    6f56:	6b 01       	movw	r12, r22
    6f58:	8a 01       	movw	r16, r20
    6f5a:	c0 e0       	ldi	r28, 0x00	; 0
    6f5c:	d0 e0       	ldi	r29, 0x00	; 0
    6f5e:	0f c0       	rjmp	.+30     	; 0x6f7e <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    6f60:	d6 01       	movw	r26, r12
    6f62:	6d 91       	ld	r22, X+
    6f64:	6d 01       	movw	r12, r26
    6f66:	d7 01       	movw	r26, r14
    6f68:	ed 91       	ld	r30, X+
    6f6a:	fc 91       	ld	r31, X
    6f6c:	01 90       	ld	r0, Z+
    6f6e:	f0 81       	ld	r31, Z
    6f70:	e0 2d       	mov	r30, r0
    6f72:	c7 01       	movw	r24, r14
    6f74:	09 95       	icall
    6f76:	c8 0f       	add	r28, r24
    6f78:	d9 1f       	adc	r29, r25
    6f7a:	01 50       	subi	r16, 0x01	; 1
    6f7c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    6f7e:	01 15       	cp	r16, r1
    6f80:	11 05       	cpc	r17, r1
    6f82:	71 f7       	brne	.-36     	; 0x6f60 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6f84:	ce 01       	movw	r24, r28
    6f86:	df 91       	pop	r29
    6f88:	cf 91       	pop	r28
    6f8a:	1f 91       	pop	r17
    6f8c:	0f 91       	pop	r16
    6f8e:	ff 90       	pop	r15
    6f90:	ef 90       	pop	r14
    6f92:	df 90       	pop	r13
    6f94:	cf 90       	pop	r12
    6f96:	08 95       	ret

00006f98 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6f98:	ef 92       	push	r14
    6f9a:	ff 92       	push	r15
    6f9c:	0f 93       	push	r16
    6f9e:	1f 93       	push	r17
    6fa0:	cf 93       	push	r28
    6fa2:	df 93       	push	r29
    6fa4:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    6fa6:	8b 01       	movw	r16, r22
    6fa8:	c0 e0       	ldi	r28, 0x00	; 0
    6faa:	d0 e0       	ldi	r29, 0x00	; 0
    6fac:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6fae:	0f 5f       	subi	r16, 0xFF	; 255
    6fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    6fb2:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6fb4:	66 23       	and	r22, r22
    6fb6:	59 f0       	breq	.+22     	; 0x6fce <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    6fb8:	d7 01       	movw	r26, r14
    6fba:	ed 91       	ld	r30, X+
    6fbc:	fc 91       	ld	r31, X
    6fbe:	01 90       	ld	r0, Z+
    6fc0:	f0 81       	ld	r31, Z
    6fc2:	e0 2d       	mov	r30, r0
    6fc4:	c7 01       	movw	r24, r14
    6fc6:	09 95       	icall
    6fc8:	c8 0f       	add	r28, r24
    6fca:	d9 1f       	adc	r29, r25
    6fcc:	ef cf       	rjmp	.-34     	; 0x6fac <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    6fce:	ce 01       	movw	r24, r28
    6fd0:	df 91       	pop	r29
    6fd2:	cf 91       	pop	r28
    6fd4:	1f 91       	pop	r17
    6fd6:	0f 91       	pop	r16
    6fd8:	ff 90       	pop	r15
    6fda:	ef 90       	pop	r14
    6fdc:	08 95       	ret

00006fde <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6fde:	dc 01       	movw	r26, r24
{
  return write(c);
    6fe0:	ed 91       	ld	r30, X+
    6fe2:	fc 91       	ld	r31, X
    6fe4:	01 90       	ld	r0, Z+
    6fe6:	f0 81       	ld	r31, Z
    6fe8:	e0 2d       	mov	r30, r0
    6fea:	09 95       	icall
}
    6fec:	08 95       	ret

00006fee <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6fee:	ef 92       	push	r14
    6ff0:	ff 92       	push	r15
    6ff2:	0f 93       	push	r16
    6ff4:	1f 93       	push	r17
    6ff6:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6ff8:	dc 01       	movw	r26, r24
    6ffa:	ed 91       	ld	r30, X+
    6ffc:	fc 91       	ld	r31, X
    6ffe:	01 90       	ld	r0, Z+
    7000:	f0 81       	ld	r31, Z
    7002:	e0 2d       	mov	r30, r0
    7004:	6d e0       	ldi	r22, 0x0D	; 13
    7006:	09 95       	icall
    7008:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    700a:	d8 01       	movw	r26, r16
    700c:	ed 91       	ld	r30, X+
    700e:	fc 91       	ld	r31, X
    7010:	01 90       	ld	r0, Z+
    7012:	f0 81       	ld	r31, Z
    7014:	e0 2d       	mov	r30, r0
    7016:	c8 01       	movw	r24, r16
    7018:	6a e0       	ldi	r22, 0x0A	; 10
    701a:	09 95       	icall
    701c:	9c 01       	movw	r18, r24
    701e:	2e 0d       	add	r18, r14
    7020:	3f 1d       	adc	r19, r15
    7022:	c9 01       	movw	r24, r18
    7024:	1f 91       	pop	r17
    7026:	0f 91       	pop	r16
    7028:	ff 90       	pop	r15
    702a:	ef 90       	pop	r14
    702c:	08 95       	ret

0000702e <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    702e:	ef 92       	push	r14
    7030:	ff 92       	push	r15
    7032:	0f 93       	push	r16
    7034:	1f 93       	push	r17
    7036:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    7038:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <Print::print(__FlashStringHelper const*)>
    703c:	8c 01       	movw	r16, r24
  n += println();
    703e:	c7 01       	movw	r24, r14
    7040:	0e 94 f7 37 	call	0x6fee	; 0x6fee <Print::println()>
    7044:	9c 01       	movw	r18, r24
    7046:	20 0f       	add	r18, r16
    7048:	31 1f       	adc	r19, r17
  return n;
}
    704a:	c9 01       	movw	r24, r18
    704c:	1f 91       	pop	r17
    704e:	0f 91       	pop	r16
    7050:	ff 90       	pop	r15
    7052:	ef 90       	pop	r14
    7054:	08 95       	ret

00007056 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    7056:	cf 93       	push	r28
    7058:	df 93       	push	r29
    705a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    705c:	61 15       	cp	r22, r1
    705e:	71 05       	cpc	r23, r1
    7060:	19 f4       	brne	.+6      	; 0x7068 <Print::write(char const*)+0x12>
    7062:	20 e0       	ldi	r18, 0x00	; 0
    7064:	30 e0       	ldi	r19, 0x00	; 0
    7066:	0f c0       	rjmp	.+30     	; 0x7086 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    7068:	db 01       	movw	r26, r22
    706a:	0d 90       	ld	r0, X+
    706c:	00 20       	and	r0, r0
    706e:	e9 f7       	brne	.-6      	; 0x706a <Print::write(char const*)+0x14>
    7070:	11 97       	sbiw	r26, 0x01	; 1
    7072:	a6 1b       	sub	r26, r22
    7074:	b7 0b       	sbc	r27, r23
    7076:	e8 81       	ld	r30, Y
    7078:	f9 81       	ldd	r31, Y+1	; 0x01
    707a:	02 80       	ldd	r0, Z+2	; 0x02
    707c:	f3 81       	ldd	r31, Z+3	; 0x03
    707e:	e0 2d       	mov	r30, r0
    7080:	ad 01       	movw	r20, r26
    7082:	09 95       	icall
    7084:	9c 01       	movw	r18, r24
    }
    7086:	c9 01       	movw	r24, r18
    7088:	df 91       	pop	r29
    708a:	cf 91       	pop	r28
    708c:	08 95       	ret

0000708e <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    708e:	4f 92       	push	r4
    7090:	5f 92       	push	r5
    7092:	7f 92       	push	r7
    7094:	8f 92       	push	r8
    7096:	9f 92       	push	r9
    7098:	af 92       	push	r10
    709a:	bf 92       	push	r11
    709c:	cf 92       	push	r12
    709e:	df 92       	push	r13
    70a0:	ef 92       	push	r14
    70a2:	ff 92       	push	r15
    70a4:	0f 93       	push	r16
    70a6:	1f 93       	push	r17
    70a8:	df 93       	push	r29
    70aa:	cf 93       	push	r28
    70ac:	cd b7       	in	r28, 0x3d	; 61
    70ae:	de b7       	in	r29, 0x3e	; 62
    70b0:	a1 97       	sbiw	r28, 0x21	; 33
    70b2:	0f b6       	in	r0, 0x3f	; 63
    70b4:	f8 94       	cli
    70b6:	de bf       	out	0x3e, r29	; 62
    70b8:	0f be       	out	0x3f, r0	; 63
    70ba:	cd bf       	out	0x3d, r28	; 61
    70bc:	2c 01       	movw	r4, r24
    70be:	74 2e       	mov	r7, r20
    70c0:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    70c2:	22 30       	cpi	r18, 0x02	; 2
    70c4:	08 f4       	brcc	.+2      	; 0x70c8 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    70c6:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    70c8:	19 a2       	std	Y+33, r1	; 0x21
    70ca:	31 e2       	ldi	r19, 0x21	; 33
    70cc:	c3 2e       	mov	r12, r19
    70ce:	d1 2c       	mov	r13, r1
    70d0:	cc 0e       	add	r12, r28
    70d2:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    70d4:	82 2e       	mov	r8, r18
    70d6:	99 24       	eor	r9, r9
    70d8:	aa 24       	eor	r10, r10
    70da:	bb 24       	eor	r11, r11
    70dc:	67 2d       	mov	r22, r7
    70de:	75 2f       	mov	r23, r21
    70e0:	a5 01       	movw	r20, r10
    70e2:	94 01       	movw	r18, r8
    70e4:	0e 94 00 3a 	call	0x7400	; 0x7400 <__udivmodsi4>
    70e8:	79 01       	movw	r14, r18
    70ea:	8a 01       	movw	r16, r20
    char c = m - base * n;
    70ec:	c8 01       	movw	r24, r16
    70ee:	b7 01       	movw	r22, r14
    70f0:	a5 01       	movw	r20, r10
    70f2:	94 01       	movw	r18, r8
    70f4:	0e 94 ae 39 	call	0x735c	; 0x735c <__mulsi3>
    70f8:	47 2d       	mov	r20, r7
    70fa:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    70fc:	08 94       	sec
    70fe:	c1 08       	sbc	r12, r1
    7100:	d1 08       	sbc	r13, r1
    7102:	4a 30       	cpi	r20, 0x0A	; 10
    7104:	14 f4       	brge	.+4      	; 0x710a <Print::printNumber(unsigned long, unsigned char)+0x7c>
    7106:	40 5d       	subi	r20, 0xD0	; 208
    7108:	01 c0       	rjmp	.+2      	; 0x710c <Print::printNumber(unsigned long, unsigned char)+0x7e>
    710a:	49 5c       	subi	r20, 0xC9	; 201
    710c:	f6 01       	movw	r30, r12
    710e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    7110:	e1 14       	cp	r14, r1
    7112:	f1 04       	cpc	r15, r1
    7114:	01 05       	cpc	r16, r1
    7116:	11 05       	cpc	r17, r1
    7118:	21 f0       	breq	.+8      	; 0x7122 <Print::printNumber(unsigned long, unsigned char)+0x94>
    711a:	7e 2c       	mov	r7, r14
    711c:	5f 2d       	mov	r21, r15
    711e:	c8 01       	movw	r24, r16
    7120:	dd cf       	rjmp	.-70     	; 0x70dc <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    7122:	c2 01       	movw	r24, r4
    7124:	b6 01       	movw	r22, r12
    7126:	0e 94 2b 38 	call	0x7056	; 0x7056 <Print::write(char const*)>
}
    712a:	a1 96       	adiw	r28, 0x21	; 33
    712c:	0f b6       	in	r0, 0x3f	; 63
    712e:	f8 94       	cli
    7130:	de bf       	out	0x3e, r29	; 62
    7132:	0f be       	out	0x3f, r0	; 63
    7134:	cd bf       	out	0x3d, r28	; 61
    7136:	cf 91       	pop	r28
    7138:	df 91       	pop	r29
    713a:	1f 91       	pop	r17
    713c:	0f 91       	pop	r16
    713e:	ff 90       	pop	r15
    7140:	ef 90       	pop	r14
    7142:	df 90       	pop	r13
    7144:	cf 90       	pop	r12
    7146:	bf 90       	pop	r11
    7148:	af 90       	pop	r10
    714a:	9f 90       	pop	r9
    714c:	8f 90       	pop	r8
    714e:	7f 90       	pop	r7
    7150:	5f 90       	pop	r5
    7152:	4f 90       	pop	r4
    7154:	08 95       	ret

00007156 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    7156:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    7158:	21 15       	cp	r18, r1
    715a:	31 05       	cpc	r19, r1
    715c:	41 f4       	brne	.+16     	; 0x716e <Print::print(unsigned long, int)+0x18>
    715e:	ed 91       	ld	r30, X+
    7160:	fc 91       	ld	r31, X
    7162:	01 90       	ld	r0, Z+
    7164:	f0 81       	ld	r31, Z
    7166:	e0 2d       	mov	r30, r0
    7168:	64 2f       	mov	r22, r20
    716a:	09 95       	icall
    716c:	08 95       	ret
  else return printNumber(n, base);
    716e:	0e 94 47 38 	call	0x708e	; 0x708e <Print::printNumber(unsigned long, unsigned char)>
}
    7172:	08 95       	ret

00007174 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    7174:	ef 92       	push	r14
    7176:	ff 92       	push	r15
    7178:	0f 93       	push	r16
    717a:	1f 93       	push	r17
    717c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    717e:	e6 2e       	mov	r14, r22
    7180:	ff 24       	eor	r15, r15
    7182:	00 e0       	ldi	r16, 0x00	; 0
    7184:	10 e0       	ldi	r17, 0x00	; 0
    7186:	b8 01       	movw	r22, r16
    7188:	a7 01       	movw	r20, r14
    718a:	0e 94 ab 38 	call	0x7156	; 0x7156 <Print::print(unsigned long, int)>
}
    718e:	1f 91       	pop	r17
    7190:	0f 91       	pop	r16
    7192:	ff 90       	pop	r15
    7194:	ef 90       	pop	r14
    7196:	08 95       	ret

00007198 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    7198:	cf 92       	push	r12
    719a:	df 92       	push	r13
    719c:	ef 92       	push	r14
    719e:	ff 92       	push	r15
    71a0:	0f 93       	push	r16
    71a2:	1f 93       	push	r17
    71a4:	cf 93       	push	r28
    71a6:	df 93       	push	r29
    71a8:	ec 01       	movw	r28, r24
    71aa:	6a 01       	movw	r12, r20
    71ac:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    71ae:	21 15       	cp	r18, r1
    71b0:	31 05       	cpc	r19, r1
    71b2:	41 f4       	brne	.+16     	; 0x71c4 <Print::print(long, int)+0x2c>
    return write(n);
    71b4:	e8 81       	ld	r30, Y
    71b6:	f9 81       	ldd	r31, Y+1	; 0x01
    71b8:	01 90       	ld	r0, Z+
    71ba:	f0 81       	ld	r31, Z
    71bc:	e0 2d       	mov	r30, r0
    71be:	64 2f       	mov	r22, r20
    71c0:	09 95       	icall
    71c2:	1f c0       	rjmp	.+62     	; 0x7202 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    71c4:	2a 30       	cpi	r18, 0x0A	; 10
    71c6:	31 05       	cpc	r19, r1
    71c8:	d1 f4       	brne	.+52     	; 0x71fe <Print::print(long, int)+0x66>
    if (n < 0) {
    71ca:	77 ff       	sbrs	r23, 7
    71cc:	17 c0       	rjmp	.+46     	; 0x71fc <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    71ce:	e8 81       	ld	r30, Y
    71d0:	f9 81       	ldd	r31, Y+1	; 0x01
    71d2:	01 90       	ld	r0, Z+
    71d4:	f0 81       	ld	r31, Z
    71d6:	e0 2d       	mov	r30, r0
    71d8:	6d e2       	ldi	r22, 0x2D	; 45
    71da:	09 95       	icall
    71dc:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    71de:	44 27       	eor	r20, r20
    71e0:	55 27       	eor	r21, r21
    71e2:	ba 01       	movw	r22, r20
    71e4:	4c 19       	sub	r20, r12
    71e6:	5d 09       	sbc	r21, r13
    71e8:	6e 09       	sbc	r22, r14
    71ea:	7f 09       	sbc	r23, r15
    71ec:	ce 01       	movw	r24, r28
    71ee:	2a e0       	ldi	r18, 0x0A	; 10
    71f0:	0e 94 47 38 	call	0x708e	; 0x708e <Print::printNumber(unsigned long, unsigned char)>
    71f4:	98 01       	movw	r18, r16
    71f6:	28 0f       	add	r18, r24
    71f8:	39 1f       	adc	r19, r25
    71fa:	04 c0       	rjmp	.+8      	; 0x7204 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    71fc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    71fe:	0e 94 47 38 	call	0x708e	; 0x708e <Print::printNumber(unsigned long, unsigned char)>
    7202:	9c 01       	movw	r18, r24
  }
}
    7204:	c9 01       	movw	r24, r18
    7206:	df 91       	pop	r29
    7208:	cf 91       	pop	r28
    720a:	1f 91       	pop	r17
    720c:	0f 91       	pop	r16
    720e:	ff 90       	pop	r15
    7210:	ef 90       	pop	r14
    7212:	df 90       	pop	r13
    7214:	cf 90       	pop	r12
    7216:	08 95       	ret

00007218 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    7218:	ef 92       	push	r14
    721a:	ff 92       	push	r15
    721c:	0f 93       	push	r16
    721e:	1f 93       	push	r17
    7220:	7b 01       	movw	r14, r22
    7222:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    7224:	00 27       	eor	r16, r16
    7226:	f7 fc       	sbrc	r15, 7
    7228:	00 95       	com	r16
    722a:	10 2f       	mov	r17, r16
    722c:	b8 01       	movw	r22, r16
    722e:	a7 01       	movw	r20, r14
    7230:	0e 94 cc 38 	call	0x7198	; 0x7198 <Print::print(long, int)>
}
    7234:	1f 91       	pop	r17
    7236:	0f 91       	pop	r16
    7238:	ff 90       	pop	r15
    723a:	ef 90       	pop	r14
    723c:	08 95       	ret

0000723e <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    723e:	0e 94 2b 38 	call	0x7056	; 0x7056 <Print::write(char const*)>
}
    7242:	08 95       	ret

00007244 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7244:	1f 92       	push	r1
    7246:	0f 92       	push	r0
    7248:	0f b6       	in	r0, 0x3f	; 63
    724a:	0f 92       	push	r0
    724c:	11 24       	eor	r1, r1
    724e:	2f 93       	push	r18
    7250:	3f 93       	push	r19
    7252:	4f 93       	push	r20
    7254:	5f 93       	push	r21
    7256:	6f 93       	push	r22
    7258:	7f 93       	push	r23
    725a:	8f 93       	push	r24
    725c:	9f 93       	push	r25
    725e:	af 93       	push	r26
    7260:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7262:	20 91 1c 04 	lds	r18, 0x041C
    7266:	30 91 1d 04 	lds	r19, 0x041D
    726a:	40 91 1e 04 	lds	r20, 0x041E
    726e:	50 91 1f 04 	lds	r21, 0x041F
	unsigned char f = timer0_fract;
    7272:	70 91 20 04 	lds	r23, 0x0420

	m += MILLIS_INC;
    7276:	da 01       	movw	r26, r20
    7278:	c9 01       	movw	r24, r18
    727a:	40 96       	adiw	r24, 0x10	; 16
    727c:	a1 1d       	adc	r26, r1
    727e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    7280:	67 2f       	mov	r22, r23
    7282:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    7284:	6d 37       	cpi	r22, 0x7D	; 125
    7286:	30 f0       	brcs	.+12     	; 0x7294 <__vector_16+0x50>
		f -= FRACT_MAX;
    7288:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    728a:	da 01       	movw	r26, r20
    728c:	c9 01       	movw	r24, r18
    728e:	41 96       	adiw	r24, 0x11	; 17
    7290:	a1 1d       	adc	r26, r1
    7292:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7294:	60 93 20 04 	sts	0x0420, r22
	timer0_millis = m;
    7298:	80 93 1c 04 	sts	0x041C, r24
    729c:	90 93 1d 04 	sts	0x041D, r25
    72a0:	a0 93 1e 04 	sts	0x041E, r26
    72a4:	b0 93 1f 04 	sts	0x041F, r27
	timer0_overflow_count++;
    72a8:	80 91 18 04 	lds	r24, 0x0418
    72ac:	90 91 19 04 	lds	r25, 0x0419
    72b0:	a0 91 1a 04 	lds	r26, 0x041A
    72b4:	b0 91 1b 04 	lds	r27, 0x041B
    72b8:	01 96       	adiw	r24, 0x01	; 1
    72ba:	a1 1d       	adc	r26, r1
    72bc:	b1 1d       	adc	r27, r1
    72be:	80 93 18 04 	sts	0x0418, r24
    72c2:	90 93 19 04 	sts	0x0419, r25
    72c6:	a0 93 1a 04 	sts	0x041A, r26
    72ca:	b0 93 1b 04 	sts	0x041B, r27
}
    72ce:	bf 91       	pop	r27
    72d0:	af 91       	pop	r26
    72d2:	9f 91       	pop	r25
    72d4:	8f 91       	pop	r24
    72d6:	7f 91       	pop	r23
    72d8:	6f 91       	pop	r22
    72da:	5f 91       	pop	r21
    72dc:	4f 91       	pop	r20
    72de:	3f 91       	pop	r19
    72e0:	2f 91       	pop	r18
    72e2:	0f 90       	pop	r0
    72e4:	0f be       	out	0x3f, r0	; 63
    72e6:	0f 90       	pop	r0
    72e8:	1f 90       	pop	r1
    72ea:	18 95       	reti

000072ec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    72ec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    72ee:	84 b5       	in	r24, 0x24	; 36
    72f0:	82 60       	ori	r24, 0x02	; 2
    72f2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    72f4:	84 b5       	in	r24, 0x24	; 36
    72f6:	81 60       	ori	r24, 0x01	; 1
    72f8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    72fa:	85 b5       	in	r24, 0x25	; 37
    72fc:	82 60       	ori	r24, 0x02	; 2
    72fe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7300:	85 b5       	in	r24, 0x25	; 37
    7302:	81 60       	ori	r24, 0x01	; 1
    7304:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7306:	ee e6       	ldi	r30, 0x6E	; 110
    7308:	f0 e0       	ldi	r31, 0x00	; 0
    730a:	80 81       	ld	r24, Z
    730c:	81 60       	ori	r24, 0x01	; 1
    730e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7310:	e1 e8       	ldi	r30, 0x81	; 129
    7312:	f0 e0       	ldi	r31, 0x00	; 0
    7314:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7316:	80 81       	ld	r24, Z
    7318:	82 60       	ori	r24, 0x02	; 2
    731a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    731c:	e0 e8       	ldi	r30, 0x80	; 128
    731e:	f0 e0       	ldi	r31, 0x00	; 0
    7320:	80 81       	ld	r24, Z
    7322:	81 60       	ori	r24, 0x01	; 1
    7324:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7326:	e1 eb       	ldi	r30, 0xB1	; 177
    7328:	f0 e0       	ldi	r31, 0x00	; 0
    732a:	80 81       	ld	r24, Z
    732c:	84 60       	ori	r24, 0x04	; 4
    732e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7330:	e0 eb       	ldi	r30, 0xB0	; 176
    7332:	f0 e0       	ldi	r31, 0x00	; 0
    7334:	80 81       	ld	r24, Z
    7336:	81 60       	ori	r24, 0x01	; 1
    7338:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    733a:	ea e7       	ldi	r30, 0x7A	; 122
    733c:	f0 e0       	ldi	r31, 0x00	; 0
    733e:	80 81       	ld	r24, Z
    7340:	84 60       	ori	r24, 0x04	; 4
    7342:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    7344:	80 81       	ld	r24, Z
    7346:	82 60       	ori	r24, 0x02	; 2
    7348:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    734a:	80 81       	ld	r24, Z
    734c:	81 60       	ori	r24, 0x01	; 1
    734e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7350:	80 81       	ld	r24, Z
    7352:	80 68       	ori	r24, 0x80	; 128
    7354:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7356:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    735a:	08 95       	ret

0000735c <__mulsi3>:
    735c:	62 9f       	mul	r22, r18
    735e:	d0 01       	movw	r26, r0
    7360:	73 9f       	mul	r23, r19
    7362:	f0 01       	movw	r30, r0
    7364:	82 9f       	mul	r24, r18
    7366:	e0 0d       	add	r30, r0
    7368:	f1 1d       	adc	r31, r1
    736a:	64 9f       	mul	r22, r20
    736c:	e0 0d       	add	r30, r0
    736e:	f1 1d       	adc	r31, r1
    7370:	92 9f       	mul	r25, r18
    7372:	f0 0d       	add	r31, r0
    7374:	83 9f       	mul	r24, r19
    7376:	f0 0d       	add	r31, r0
    7378:	74 9f       	mul	r23, r20
    737a:	f0 0d       	add	r31, r0
    737c:	65 9f       	mul	r22, r21
    737e:	f0 0d       	add	r31, r0
    7380:	99 27       	eor	r25, r25
    7382:	72 9f       	mul	r23, r18
    7384:	b0 0d       	add	r27, r0
    7386:	e1 1d       	adc	r30, r1
    7388:	f9 1f       	adc	r31, r25
    738a:	63 9f       	mul	r22, r19
    738c:	b0 0d       	add	r27, r0
    738e:	e1 1d       	adc	r30, r1
    7390:	f9 1f       	adc	r31, r25
    7392:	bd 01       	movw	r22, r26
    7394:	cf 01       	movw	r24, r30
    7396:	11 24       	eor	r1, r1
    7398:	08 95       	ret

0000739a <__udivmodqi4>:
    739a:	99 1b       	sub	r25, r25
    739c:	79 e0       	ldi	r23, 0x09	; 9
    739e:	04 c0       	rjmp	.+8      	; 0x73a8 <__udivmodqi4_ep>

000073a0 <__udivmodqi4_loop>:
    73a0:	99 1f       	adc	r25, r25
    73a2:	96 17       	cp	r25, r22
    73a4:	08 f0       	brcs	.+2      	; 0x73a8 <__udivmodqi4_ep>
    73a6:	96 1b       	sub	r25, r22

000073a8 <__udivmodqi4_ep>:
    73a8:	88 1f       	adc	r24, r24
    73aa:	7a 95       	dec	r23
    73ac:	c9 f7       	brne	.-14     	; 0x73a0 <__udivmodqi4_loop>
    73ae:	80 95       	com	r24
    73b0:	08 95       	ret

000073b2 <__udivmodhi4>:
    73b2:	aa 1b       	sub	r26, r26
    73b4:	bb 1b       	sub	r27, r27
    73b6:	51 e1       	ldi	r21, 0x11	; 17
    73b8:	07 c0       	rjmp	.+14     	; 0x73c8 <__udivmodhi4_ep>

000073ba <__udivmodhi4_loop>:
    73ba:	aa 1f       	adc	r26, r26
    73bc:	bb 1f       	adc	r27, r27
    73be:	a6 17       	cp	r26, r22
    73c0:	b7 07       	cpc	r27, r23
    73c2:	10 f0       	brcs	.+4      	; 0x73c8 <__udivmodhi4_ep>
    73c4:	a6 1b       	sub	r26, r22
    73c6:	b7 0b       	sbc	r27, r23

000073c8 <__udivmodhi4_ep>:
    73c8:	88 1f       	adc	r24, r24
    73ca:	99 1f       	adc	r25, r25
    73cc:	5a 95       	dec	r21
    73ce:	a9 f7       	brne	.-22     	; 0x73ba <__udivmodhi4_loop>
    73d0:	80 95       	com	r24
    73d2:	90 95       	com	r25
    73d4:	bc 01       	movw	r22, r24
    73d6:	cd 01       	movw	r24, r26
    73d8:	08 95       	ret

000073da <__divmodhi4>:
    73da:	97 fb       	bst	r25, 7
    73dc:	09 2e       	mov	r0, r25
    73de:	07 26       	eor	r0, r23
    73e0:	0a d0       	rcall	.+20     	; 0x73f6 <__divmodhi4_neg1>
    73e2:	77 fd       	sbrc	r23, 7
    73e4:	04 d0       	rcall	.+8      	; 0x73ee <__divmodhi4_neg2>
    73e6:	e5 df       	rcall	.-54     	; 0x73b2 <__udivmodhi4>
    73e8:	06 d0       	rcall	.+12     	; 0x73f6 <__divmodhi4_neg1>
    73ea:	00 20       	and	r0, r0
    73ec:	1a f4       	brpl	.+6      	; 0x73f4 <__divmodhi4_exit>

000073ee <__divmodhi4_neg2>:
    73ee:	70 95       	com	r23
    73f0:	61 95       	neg	r22
    73f2:	7f 4f       	sbci	r23, 0xFF	; 255

000073f4 <__divmodhi4_exit>:
    73f4:	08 95       	ret

000073f6 <__divmodhi4_neg1>:
    73f6:	f6 f7       	brtc	.-4      	; 0x73f4 <__divmodhi4_exit>
    73f8:	90 95       	com	r25
    73fa:	81 95       	neg	r24
    73fc:	9f 4f       	sbci	r25, 0xFF	; 255
    73fe:	08 95       	ret

00007400 <__udivmodsi4>:
    7400:	a1 e2       	ldi	r26, 0x21	; 33
    7402:	1a 2e       	mov	r1, r26
    7404:	aa 1b       	sub	r26, r26
    7406:	bb 1b       	sub	r27, r27
    7408:	fd 01       	movw	r30, r26
    740a:	0d c0       	rjmp	.+26     	; 0x7426 <__udivmodsi4_ep>

0000740c <__udivmodsi4_loop>:
    740c:	aa 1f       	adc	r26, r26
    740e:	bb 1f       	adc	r27, r27
    7410:	ee 1f       	adc	r30, r30
    7412:	ff 1f       	adc	r31, r31
    7414:	a2 17       	cp	r26, r18
    7416:	b3 07       	cpc	r27, r19
    7418:	e4 07       	cpc	r30, r20
    741a:	f5 07       	cpc	r31, r21
    741c:	20 f0       	brcs	.+8      	; 0x7426 <__udivmodsi4_ep>
    741e:	a2 1b       	sub	r26, r18
    7420:	b3 0b       	sbc	r27, r19
    7422:	e4 0b       	sbc	r30, r20
    7424:	f5 0b       	sbc	r31, r21

00007426 <__udivmodsi4_ep>:
    7426:	66 1f       	adc	r22, r22
    7428:	77 1f       	adc	r23, r23
    742a:	88 1f       	adc	r24, r24
    742c:	99 1f       	adc	r25, r25
    742e:	1a 94       	dec	r1
    7430:	69 f7       	brne	.-38     	; 0x740c <__udivmodsi4_loop>
    7432:	60 95       	com	r22
    7434:	70 95       	com	r23
    7436:	80 95       	com	r24
    7438:	90 95       	com	r25
    743a:	9b 01       	movw	r18, r22
    743c:	ac 01       	movw	r20, r24
    743e:	bd 01       	movw	r22, r26
    7440:	cf 01       	movw	r24, r30
    7442:	08 95       	ret

00007444 <__divmodsi4>:
    7444:	97 fb       	bst	r25, 7
    7446:	09 2e       	mov	r0, r25
    7448:	05 26       	eor	r0, r21
    744a:	0e d0       	rcall	.+28     	; 0x7468 <__divmodsi4_neg1>
    744c:	57 fd       	sbrc	r21, 7
    744e:	04 d0       	rcall	.+8      	; 0x7458 <__divmodsi4_neg2>
    7450:	d7 df       	rcall	.-82     	; 0x7400 <__udivmodsi4>
    7452:	0a d0       	rcall	.+20     	; 0x7468 <__divmodsi4_neg1>
    7454:	00 1c       	adc	r0, r0
    7456:	38 f4       	brcc	.+14     	; 0x7466 <__divmodsi4_exit>

00007458 <__divmodsi4_neg2>:
    7458:	50 95       	com	r21
    745a:	40 95       	com	r20
    745c:	30 95       	com	r19
    745e:	21 95       	neg	r18
    7460:	3f 4f       	sbci	r19, 0xFF	; 255
    7462:	4f 4f       	sbci	r20, 0xFF	; 255
    7464:	5f 4f       	sbci	r21, 0xFF	; 255

00007466 <__divmodsi4_exit>:
    7466:	08 95       	ret

00007468 <__divmodsi4_neg1>:
    7468:	f6 f7       	brtc	.-4      	; 0x7466 <__divmodsi4_exit>
    746a:	90 95       	com	r25
    746c:	80 95       	com	r24
    746e:	70 95       	com	r23
    7470:	61 95       	neg	r22
    7472:	7f 4f       	sbci	r23, 0xFF	; 255
    7474:	8f 4f       	sbci	r24, 0xFF	; 255
    7476:	9f 4f       	sbci	r25, 0xFF	; 255
    7478:	08 95       	ret

0000747a <__tablejump2__>:
    747a:	ee 0f       	add	r30, r30
    747c:	ff 1f       	adc	r31, r31

0000747e <__tablejump__>:
    747e:	05 90       	lpm	r0, Z+
    7480:	f4 91       	lpm	r31, Z+
    7482:	e0 2d       	mov	r30, r0
    7484:	09 94       	ijmp

00007486 <_exit>:
    7486:	f8 94       	cli

00007488 <__stop_program>:
    7488:	ff cf       	rjmp	.-2      	; 0x7488 <__stop_program>
