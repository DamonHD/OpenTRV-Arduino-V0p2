
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build2081542144367372425.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000057ee  00005882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000217  00800126  00800126  000058a8  2**0
                  ALLOC
  3 .debug_aranges 00000d40  00000000  00000000  000058a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001ebf  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000fdb9  00000000  00000000  000084a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000036d4  00000000  00000000  00018260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000dd52  00000000  00000000  0001b934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001700  00000000  00000000  00029688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004921  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007268  00000000  00000000  0002f6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000976f2  00000000  00000000  00036911  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e00  00000000  00000000  000ce003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

// Returns true if system is in 'learn'/smart mode.
// If in 'smart' mode can anticipate user demand to pre-warm rooms, maintain customary temperatures, etc.
// Currently true if any simple schedule is set.
// TODO: maybe only if schedule characteristic of having been set by the learn button.
bool inSmartMode()
       0:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
// Sleep briefly in as lower-power mode as possible until the specified (watchdog) time expires, or another interrupt.
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
//   * allowPrematureWakeup if true then if woken before watchdog fires return false; default false
// Returns false if the watchdog timer did not go off.
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
bool nap(int_fast8_t watchdogSleep, bool allowPrematureWakeup)
       8:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
       c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      if(eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)) <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT)
        { return(true); }
      }
    }
  return(false);
  }
      10:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>

// Reduced-noise temp pot value in range [0,255].
static uint8_t tempPotReducedNoise;

// Return previously-read (with readTempPot()) temperature pot user control level in range [0,1023]; very fast.
int getTempPot() { return(tempPot); }
      14:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
      18:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__vector_6>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      1c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      20:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      24:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_9>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      28:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      2c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      30:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      34:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      38:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      3c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      40:	0c 94 16 2a 	jmp	0x542c	; 0x542c <__vector_16>
      44:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      48:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__vector_18>
      4c:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__vector_19>
      50:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      54:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <__vector_21>
      58:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      5c:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>
      60:	0c 94 b6 23 	jmp	0x476c	; 0x476c <__vector_24>
      64:	0c 94 91 03 	jmp	0x722	; 0x722 <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 0b 15 0c 12 30 00 33 06 34 08 35 10     ........0.3.4.5.
      78:	36 aa 37 cc 38 cc 39 cc 6d 0d 6e 28 6f f5 70 20     6.7.8.9.m.n(o.p 
      88:	71 21 72 20 73 00 74 00 75 73 76 64 77 00 79 23     q!r s.t.usvdw.y#
      98:	7a 01 1c c1 1d 40 1e 0a 1f 03 20 96 21 00 22 da     z....@.... .!.".
      a8:	23 74 24 00 25 dc 2a 24 2c 28 2d fa 2e 29 69 60     #t$.%.*$,(-..)i`
      b8:	ff ff                                               ..

000000ba <FHT8VCallForHeatPoll()::__c>:
      ba:	52 58 20 46 49 46 4f 20 70 72 6f 62 6c 65 6d 00     RX FIFO problem.

000000ca <FHT8VCallForHeatPoll()::__c>:
      ca:	42 61 64 20 52 58 20 66 72 61 6d 65 00              Bad RX frame.

000000d7 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
      d7:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
      e7:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

000000f3 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      f3:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000fc <FHT8VPollSyncAndTX_Next(bool)::__c>:
      fc:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
     10c:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
     11c:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

00000127 <doSync(bool)::__c>:
     127:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

00000138 <doSync(bool)::__c>:
     138:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000146 <FHT8VPollSyncAndTX_First(bool)::__c>:
     146:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

0000014f <FHT8VPollSyncAndTX_First(bool)::__c>:
     14f:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     15f:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

00000169 <RFM22CheckConnected()::__c>:
     169:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

0000017a <RFM22CheckConnected()::__c>:
     17a:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     18a:	6e 3a 20 00                                         n: .

0000018e <pollCLI(unsigned char)::__c>:
     18e:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

0000019c <pollCLI(unsigned char)::__c>:
     19c:	5a 61 70 70 65 64 2e 00                             Zapped..

000001a4 <pollCLI(unsigned char)::__c>:
     1a4:	53 6d 61 72 74 20 77 61 72 6d 69 6e 67 3a 20 00     Smart warming: .

000001b4 <pollCLI(unsigned char)::__c>:
     1b4:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

000001c2 <pollCLI(unsigned char)::__c>:
     1c2:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

000001d1 <dumpCLIUsage()::__c>:
     1d1:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

000001db <dumpCLIUsage()::__c>:
     1db:	73 65 74 20 57 61 72 6d 20 74 65 6d 70 20 43 43     set Warm temp CC
	...

000001ec <dumpCLIUsage()::__c>:
     1ec:	57 20 43 43 00                                      W CC.

000001f1 <dumpCLIUsage()::__c>:
     1f1:	57 61 72 6d 00                                      Warm.

000001f6 <dumpCLIUsage()::__c>:
     1f6:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

00000203 <dumpCLIUsage()::__c>:
     203:	54 20 48 48 20 4d 4d 00                             T HH MM.

0000020b <dumpCLIUsage()::__c>:
     20b:	73 68 6f 77 20 53 74 61 74 75 73 20 61 6e 64 20     show Status and 
     21b:	73 6d 61 72 74 20 77 61 72 6d 69 6e 67 20 66 6f     smart warming fo
     22b:	72 20 6e 65 78 74 20 32 34 68 00                    r next 24h.

00000236 <dumpCLIUsage()::__c>:
     236:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     246:	65 74 20 4e 00                                      et N.

0000024b <dumpCLIUsage()::__c>:
     24b:	52 20 4e 00                                         R N.

0000024f <dumpCLIUsage()::__c>:
     24f:	51 75 69 63 6b 20 48 65 61 74 20 28 42 41 4b 45     Quick Heat (BAKE
     25f:	29 00                                               ).

00000261 <dumpCLIUsage()::__c>:
     261:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     271:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     281:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

00000292 <dumpCLIUsage()::__c>:
     292:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

0000029c <dumpCLIUsage()::__c>:
     29c:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     2ac:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     2bc:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 30     HH MM schedule 0
	...

000002cd <dumpCLIUsage()::__c>:
     2cd:	50 20 48 48 20 4d 4d 00                             P HH MM.

000002d5 <dumpCLIUsage()::__c>:
     2d5:	4c 65 61 72 6e 20 74 6f 20 77 61 72 6d 20 65 76     Learn to warm ev
     2e5:	65 72 79 20 32 34 68 20 66 72 6f 6d 20 6e 6f 77     ery 24h from now
     2f5:	2c 20 6f 72 20 63 6c 65 61 72 20 69 66 20 69 6e     , or clear if in
     305:	20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63 68      frost mode, sch
     315:	65 64 75 6c 65 20 53 00                             edule S.

0000031d <dumpCLIUsage()::__c>:
     31d:	4c 20 53 00                                         L S.

00000321 <dumpCLIUsage()::__c>:
     321:	4c 65 61 72 6e 20 74 6f 20 77 61 72 6d 20 65 76     Learn to warm ev
     331:	65 72 79 20 32 34 68 20 66 72 6f 6d 20 6e 6f 77     ery 24h from now
     341:	2c 20 63 6c 65 61 72 20 69 66 20 69 6e 20 66 72     , clear if in fr
     351:	6f 73 74 20 6d 6f 64 65 2c 20 73 63 68 65 64 75     ost mode, schedu
     361:	6c 65 20 30 00                                      le 0.

00000366 <dumpCLIUsage()::__c>:
     366:	73 65 74 20 77 69 72 65 6c 65 73 73 20 46 48 54     set wireless FHT
     376:	38 56 20 48 6f 75 73 65 20 63 6f 64 65 73 20 31     8V House codes 1
     386:	26 32 00                                            &2.

00000389 <dumpCLIUsage()::__c>:
     389:	48 20 48 31 20 48 32 00                             H H1 H2.

00000391 <dumpCLIUsage()::__c>:
     391:	63 6c 65 61 72 20 77 69 72 65 6c 65 73 73 20 46     clear wireless F
     3a1:	48 54 38 56 20 48 6f 75 73 65 20 63 6f 64 65 73     HT8V House codes
	...

000003b2 <dumpCLIUsage()::__c>:
     3b2:	48 00                                               H.

000003b4 <dumpCLIUsage()::__c>:
     3b4:	73 65 74 20 46 72 6f 73 74 20 74 65 6d 70 20 43     set Frost temp C
     3c4:	43 00                                               C.

000003c6 <dumpCLIUsage()::__c>:
     3c6:	46 20 43 43 00                                      F CC.

000003cb <dumpCLIUsage()::__c>:
     3cb:	46 72 6f 73 74 00                                   Frost.

000003d1 <dumpCLIUsage()::__c>:
     3d1:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

000003da <dumpCLIUsage()::__c>:
     3da:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

000003eb <dumpCLIUsage()::__c>:
     3eb:	44 20 4e 00                                         D N.

000003ef <dumpCLIUsage()::__c>:
     3ef:	43 65 6e 74 72 61 6c 20 68 75 62 3a 20 6d 69 6e     Central hub: min
     3ff:	69 6d 75 6d 20 4d 20 6d 69 6e 73 20 6f 6e 2c 20     imum M mins on, 
     40f:	30 20 64 69 73 61 62 6c 65 64 00                    0 disabled.

0000041a <dumpCLIUsage()::__c>:
     41a:	43 20 4d 00                                         C M.

0000041e <dumpCLIUsage()::__c>:
     41e:	74 68 69 73 20 68 65 6c 70 00                       this help.

00000428 <dumpCLIUsage()::__c>:
     428:	43 4c 49 20 75 73 61 67 65 3a 00                    CLI usage:.

00000433 <InvalidIgnored()::__c>:
     433:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     443:	2e 00                                               ..

00000445 <serialStatusReport()::__c>:
     445:	48 43 00                                            HC.

00000448 <loop::__c>:
     448:	45 52 52 4f 52 3a 20 6c 6f 6f 70 28 29 20 6f 76     ERROR: loop() ov
     458:	65 72 72 75 6e 21 00                                errun!.

0000045f <loop::__c>:
     45f:	42 6f 69 6c 65 72 20 6f 6e 2c 20 6d 69 6e 73 20     Boiler on, mins 
     46f:	6c 65 66 74 3a 20 00                                left: .

00000476 <loop::__c>:
     476:	45 78 74 72 61 20 54 58 00                          Extra TX.

0000047f <loop::__c>:
     47f:	43 61 6c 6c 20 66 6f 72 20 68 65 61 74 20 66 72     Call for heat fr
     48f:	6f 6d 20 00                                         om .

00000493 <setup::__c>:
     493:	73 6c 6f 77 20 52 54 43 20 63 6c 6f 63 6b 20 4f     slow RTC clock O
     4a3:	4b 00                                               K.

000004a5 <setup::__c>:
     4a5:	58 54 41 4c 20 64 65 61 64 00                       XTAL dead.

000004af <setup::__c>:
     4af:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     4bf:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     4cf:	75 6e 6e 69 6e 67 21 00                             unning!.

000004d7 <setup::__c>:
     4d7:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     4e7:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     4f7:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

00000504 <setup::__c>:
     504:	6c 69 67 68 74 2f 74 65 6d 70 20 4f 4b 00           light/temp OK.

00000512 <setup::__c>:
     512:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

0000051b <setup::__c>:
     51b:	4c 20 73 74 75 63 6b 00                             L stuck.

00000523 <setup::__c>:
     523:	4d 20 73 74 75 63 6b 00                             M stuck.

0000052b <setup::__c>:
     52b:	74 65 6d 70 20 70 6f 74 3a 20 00                    temp pot: .

00000536 <setup::__c>:
     536:	74 65 6d 70 3a 20 00                                temp: .

0000053d <setup::__c>:
     53d:	6c 69 67 68 74 3a 20 00                             light: .

00000545 <setup::__c>:
     545:	47 61 74 68 65 72 69 6e 67 20 69 6e 69 74 69 61     Gathering initia
     555:	6c 20 69 6e 70 75 74 73 20 61 6e 64 20 63 6f 6d     l inputs and com
     565:	70 75 74 69 6e 67 20 74 61 72 67 65 74 2f 64 65     puting target/de
     575:	6d 61 6e 64 2e 2e 2e 00                             mand....

0000057d <setup::__c>:
     57d:	69 6e 74 65 72 6e 61 6c 20 73 65 6e 73 6f 72 73     internal sensors
     58d:	20 4f 4b 2c 20 6e 65 78 74 20 6c 69 67 68 74 2f      OK, next light/
     59d:	74 65 6d 70 2f 6f 74 68 65 72 00                    temp/other.

000005a8 <setup::__c>:
     5a8:	43 20 2f 20 00                                      C / .

000005ad <setup::__c>:
     5ad:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

000005b8 <setup::__c>:
     5b8:	6d 56 00                                            mV.

000005bb <setup::__c>:
     5bb:	56 63 63 3a 20 00                                   Vcc: .

000005c1 <setup::__c>:
     5c1:	52 46 4d 32 33 20 4f 4b 00                          RFM23 OK.

000005ca <setup::__c>:
     5ca:	28 55 73 69 6e 67 20 52 46 4d 32 32 2e 29 00        (Using RFM22.).

000005d9 <setup::__c>:
     5d9:	61 62 6f 75 74 20 74 6f 20 74 65 73 74 20 52 46     about to test RF
     5e9:	4d 32 33 00                                         M23.

000005ed <setup::__c>:
     5ed:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

000005f8 <setup::__c>:
     5f8:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

00000606 <setup::__c>:
     606:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     616:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

00000625 <setup::__c>:
     625:	42 6f 61 72 64 20 56 30 2e 32 2c 20 52 45 56 00     Board V0.2, REV.

00000635 <setup::__c>:
     635:	0d 0a 4f 70 65 6e 54 52 56 20 62 75 69 6c 74 20     ..OpenTRV built 
     645:	4d 61 72 20 20 32 20 32 30 31 34 20 31 38 3a 33     Mar  2 2014 18:3
     655:	31 3a 30 36 20 62 6f 6f 74 69 6e 67 2e 2e 2e 00     1:06 booting....

00000665 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     665:	3a 20 00                                            : .

00000668 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     668:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

00000672 <port_to_mode_PGM>:
     672:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000067c <port_to_output_PGM>:
     67c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000686 <port_to_input_PGM>:
     686:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000690 <digital_pin_to_port_PGM>:
     690:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6a0:	03 03 03 03                                         ....

000006a4 <digital_pin_to_bit_mask_PGM>:
     6a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6b4:	04 08 10 20                                         ... 

000006b8 <digital_pin_to_timer_PGM>:
     6b8:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     6c8:	00 00 00 00                                         ....

000006cc <__ctors_start>:
     6cc:	0c 11       	cpse	r16, r12
     6ce:	52 22       	and	r5, r18
     6d0:	10 28       	or	r1, r0

000006d2 <__ctors_end>:
     6d2:	11 24       	eor	r1, r1
     6d4:	1f be       	out	0x3f, r1	; 63
     6d6:	cf ef       	ldi	r28, 0xFF	; 255
     6d8:	d8 e0       	ldi	r29, 0x08	; 8
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	cd bf       	out	0x3d, r28	; 61

000006de <__do_copy_data>:
     6de:	11 e0       	ldi	r17, 0x01	; 1
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b1 e0       	ldi	r27, 0x01	; 1
     6e4:	ee ee       	ldi	r30, 0xEE	; 238
     6e6:	f7 e5       	ldi	r31, 0x57	; 87
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <.do_copy_data_start>

000006ea <.do_copy_data_loop>:
     6ea:	05 90       	lpm	r0, Z+
     6ec:	0d 92       	st	X+, r0

000006ee <.do_copy_data_start>:
     6ee:	a6 32       	cpi	r26, 0x26	; 38
     6f0:	b1 07       	cpc	r27, r17
     6f2:	d9 f7       	brne	.-10     	; 0x6ea <.do_copy_data_loop>

000006f4 <__do_clear_bss>:
     6f4:	13 e0       	ldi	r17, 0x03	; 3
     6f6:	a6 e2       	ldi	r26, 0x26	; 38
     6f8:	b1 e0       	ldi	r27, 0x01	; 1
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <.do_clear_bss_start>

000006fc <.do_clear_bss_loop>:
     6fc:	1d 92       	st	X+, r1

000006fe <.do_clear_bss_start>:
     6fe:	ad 33       	cpi	r26, 0x3D	; 61
     700:	b1 07       	cpc	r27, r17
     702:	e1 f7       	brne	.-8      	; 0x6fc <.do_clear_bss_loop>

00000704 <__do_global_ctors>:
     704:	16 e0       	ldi	r17, 0x06	; 6
     706:	c2 ed       	ldi	r28, 0xD2	; 210
     708:	d6 e0       	ldi	r29, 0x06	; 6
     70a:	04 c0       	rjmp	.+8      	; 0x714 <.do_global_ctors_start>

0000070c <.do_global_ctors_loop>:
     70c:	22 97       	sbiw	r28, 0x02	; 2
     70e:	fe 01       	movw	r30, r28
     710:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__tablejump__>

00000714 <.do_global_ctors_start>:
     714:	cc 3c       	cpi	r28, 0xCC	; 204
     716:	d1 07       	cpc	r29, r17
     718:	c9 f7       	brne	.-14     	; 0x70c <.do_global_ctors_loop>
     71a:	0e 94 66 28 	call	0x50cc	; 0x50cc <main>
     71e:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <_exit>

00000722 <__bad_interrupt>:
     722:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000726 <abort>:
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	f8 94       	cli
     72c:	0c 94 f5 2b 	jmp	0x57ea	; 0x57ea <_exit>

00000730 <atoi>:
     730:	fc 01       	movw	r30, r24
     732:	88 27       	eor	r24, r24
     734:	99 27       	eor	r25, r25
     736:	e8 94       	clt
     738:	21 91       	ld	r18, Z+
     73a:	20 32       	cpi	r18, 0x20	; 32
     73c:	e9 f3       	breq	.-6      	; 0x738 <atoi+0x8>
     73e:	29 30       	cpi	r18, 0x09	; 9
     740:	10 f0       	brcs	.+4      	; 0x746 <atoi+0x16>
     742:	2e 30       	cpi	r18, 0x0E	; 14
     744:	c8 f3       	brcs	.-14     	; 0x738 <atoi+0x8>
     746:	2b 32       	cpi	r18, 0x2B	; 43
     748:	41 f0       	breq	.+16     	; 0x75a <atoi+0x2a>
     74a:	2d 32       	cpi	r18, 0x2D	; 45
     74c:	39 f4       	brne	.+14     	; 0x75c <atoi+0x2c>
     74e:	68 94       	set
     750:	04 c0       	rjmp	.+8      	; 0x75a <atoi+0x2a>
     752:	0e 94 26 04 	call	0x84c	; 0x84c <__mulhi_const_10>
     756:	82 0f       	add	r24, r18
     758:	91 1d       	adc	r25, r1
     75a:	21 91       	ld	r18, Z+
     75c:	20 53       	subi	r18, 0x30	; 48
     75e:	2a 30       	cpi	r18, 0x0A	; 10
     760:	c0 f3       	brcs	.-16     	; 0x752 <atoi+0x22>
     762:	1e f4       	brtc	.+6      	; 0x76a <atoi+0x3a>
     764:	90 95       	com	r25
     766:	81 95       	neg	r24
     768:	9f 4f       	sbci	r25, 0xFF	; 255
     76a:	08 95       	ret

0000076c <strlen_P>:
     76c:	fc 01       	movw	r30, r24
     76e:	05 90       	lpm	r0, Z+
     770:	00 20       	and	r0, r0
     772:	e9 f7       	brne	.-6      	; 0x76e <strlen_P+0x2>
     774:	80 95       	com	r24
     776:	90 95       	com	r25
     778:	8e 0f       	add	r24, r30
     77a:	9f 1f       	adc	r25, r31
     77c:	08 95       	ret

0000077e <strtok_r>:
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	31 f4       	brne	.+12     	; 0x78e <strtok_r+0x10>
     782:	da 01       	movw	r26, r20
     784:	8d 91       	ld	r24, X+
     786:	9c 91       	ld	r25, X
     788:	00 97       	sbiw	r24, 0x00	; 0
     78a:	09 f4       	brne	.+2      	; 0x78e <strtok_r+0x10>
     78c:	0e c0       	rjmp	.+28     	; 0x7aa <strtok_r+0x2c>
     78e:	dc 01       	movw	r26, r24
     790:	fb 01       	movw	r30, r22
     792:	3d 91       	ld	r19, X+
     794:	21 91       	ld	r18, Z+
     796:	22 23       	and	r18, r18
     798:	19 f0       	breq	.+6      	; 0x7a0 <strtok_r+0x22>
     79a:	32 17       	cp	r19, r18
     79c:	c9 f3       	breq	.-14     	; 0x790 <strtok_r+0x12>
     79e:	fa cf       	rjmp	.-12     	; 0x794 <strtok_r+0x16>
     7a0:	33 23       	and	r19, r19
     7a2:	31 f4       	brne	.+12     	; 0x7b0 <strtok_r+0x32>
     7a4:	da 01       	movw	r26, r20
     7a6:	1d 92       	st	X+, r1
     7a8:	1c 92       	st	X, r1
     7aa:	88 27       	eor	r24, r24
     7ac:	99 27       	eor	r25, r25
     7ae:	08 95       	ret
     7b0:	11 97       	sbiw	r26, 0x01	; 1
     7b2:	af 93       	push	r26
     7b4:	bf 93       	push	r27
     7b6:	fb 01       	movw	r30, r22
     7b8:	3d 91       	ld	r19, X+
     7ba:	21 91       	ld	r18, Z+
     7bc:	32 17       	cp	r19, r18
     7be:	71 f4       	brne	.+28     	; 0x7dc <strtok_r+0x5e>
     7c0:	33 23       	and	r19, r19
     7c2:	21 f4       	brne	.+8      	; 0x7cc <strtok_r+0x4e>
     7c4:	88 27       	eor	r24, r24
     7c6:	99 27       	eor	r25, r25
     7c8:	11 97       	sbiw	r26, 0x01	; 1
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <strtok_r+0x52>
     7cc:	1e 92       	st	-X, r1
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	fa 01       	movw	r30, r20
     7d2:	a1 93       	st	Z+, r26
     7d4:	b0 83       	st	Z, r27
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	08 95       	ret
     7dc:	22 23       	and	r18, r18
     7de:	69 f7       	brne	.-38     	; 0x7ba <strtok_r+0x3c>
     7e0:	ea cf       	rjmp	.-44     	; 0x7b6 <strtok_r+0x38>

000007e2 <strupr>:
     7e2:	dc 01       	movw	r26, r24
     7e4:	6c 91       	ld	r22, X
     7e6:	61 56       	subi	r22, 0x61	; 97
     7e8:	6a 31       	cpi	r22, 0x1A	; 26
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <strupr+0xc>
     7ec:	60 5e       	subi	r22, 0xE0	; 224
     7ee:	6f 5b       	subi	r22, 0xBF	; 191
     7f0:	6d 93       	st	X+, r22
     7f2:	c1 f7       	brne	.-16     	; 0x7e4 <strupr+0x2>
     7f4:	08 95       	ret

000007f6 <__eerd_word>:
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	7b 01       	movw	r14, r22
     802:	8c 01       	movw	r16, r24
     804:	fb 01       	movw	r30, r22
     806:	09 95       	icall
     808:	d8 2e       	mov	r13, r24
     80a:	c8 01       	movw	r24, r16
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	f7 01       	movw	r30, r14
     810:	09 95       	icall
     812:	98 2f       	mov	r25, r24
     814:	8d 2d       	mov	r24, r13
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	08 95       	ret

00000822 <__eewr_word>:
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	d7 2e       	mov	r13, r23
     82e:	7a 01       	movw	r14, r20
     830:	8c 01       	movw	r16, r24
     832:	fa 01       	movw	r30, r20
     834:	09 95       	icall
     836:	c8 01       	movw	r24, r16
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	6d 2d       	mov	r22, r13
     83c:	f7 01       	movw	r30, r14
     83e:	09 95       	icall
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	08 95       	ret

0000084c <__mulhi_const_10>:
     84c:	7a e0       	ldi	r23, 0x0A	; 10
     84e:	97 9f       	mul	r25, r23
     850:	90 2d       	mov	r25, r0
     852:	87 9f       	mul	r24, r23
     854:	80 2d       	mov	r24, r0
     856:	91 0d       	add	r25, r1
     858:	11 24       	eor	r1, r1
     85a:	08 95       	ret

0000085c <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     85c:	80 91 26 01 	lds	r24, 0x0126
     860:	08 95       	ret

00000862 <getAmbientLight()>:

// Ambient light levels in range [0,1023].
static int ambientLightLevel;

// Return previously-read (with readAmbientLight()) ambient light level in range [0,1023]; very fast.
int getAmbientLight() { return(ambientLightLevel); }
     862:	80 91 27 01 	lds	r24, 0x0127
     866:	90 91 28 01 	lds	r25, 0x0128
     86a:	08 95       	ret

0000086c <readAmbientLight()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
int readAmbientLight()
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(true);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	0e 94 a3 10 	call	0x2146	; 0x2146 <power_intermittent_peripherals_enable(bool)>
  const int al = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vcc reference.
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <analogueNoiseReducedRead(int, unsigned char)>
     880:	ec 01       	movw	r28, r24
  power_intermittent_peripherals_disable();
     882:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <power_intermittent_peripherals_disable()>

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Adjust room-lit flag, with hysteresis.
  if(al < LDR_THR_LOW)
     886:	c0 3a       	cpi	r28, 0xA0	; 160
     888:	d1 05       	cpc	r29, r1
     88a:	1c f4       	brge	.+6      	; 0x892 <readAmbientLight()+0x26>
    { isRoomLitFlag = false; }
     88c:	10 92 26 01 	sts	0x0126, r1
     890:	13 c0       	rjmp	.+38     	; 0x8b8 <readAmbientLight()+0x4c>
  else if(al > LDR_THR_HIGH)
     892:	c9 3c       	cpi	r28, 0xC9	; 201
     894:	d1 05       	cpc	r29, r1
     896:	84 f0       	brlt	.+32     	; 0x8b8 <readAmbientLight()+0x4c>
    {
    // Take sharp transition from dark to light as possible indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (ambientLightLevel < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
     898:	80 91 26 01 	lds	r24, 0x0126
     89c:	88 23       	and	r24, r24
     89e:	49 f4       	brne	.+18     	; 0x8b2 <readAmbientLight()+0x46>
     8a0:	80 91 27 01 	lds	r24, 0x0127
     8a4:	90 91 28 01 	lds	r25, 0x0128
     8a8:	80 3a       	cpi	r24, 0xA0	; 160
     8aa:	91 05       	cpc	r25, r1
     8ac:	14 f4       	brge	.+4      	; 0x8b2 <readAmbientLight()+0x46>
     8ae:	0e 94 b2 06 	call	0xd64	; 0xd64 <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 26 01 	sts	0x0126, r24
    }

  // Store new value.
  ambientLightLevel = al;
     8b8:	d0 93 28 01 	sts	0x0128, r29
     8bc:	c0 93 27 01 	sts	0x0127, r28
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(al);
  }
     8c0:	ce 01       	movw	r24, r28
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <getTRVPercentOpen()>:
#include "Temp_Pot.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     8c8:	80 91 31 01 	lds	r24, 0x0131
     8cc:	08 95       	ret

000008ce <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     8ce:	80 91 30 01 	lds	r24, 0x0130
     8d2:	08 95       	ret

000008d4 <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8d4:	f9 99       	sbic	0x1f, 1	; 31
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8d8:	82 e1       	ldi	r24, 0x12	; 18
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	92 bd       	out	0x22, r25	; 34
     8de:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8e0:	f8 9a       	sbi	0x1f, 0	; 31
     8e2:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     8e4:	80 95       	com	r24
     8e6:	08 95       	ret

000008e8 <isLikelyOccupied()>:

// Returns true if the room appears to be likely occupied (with active users) now or recently.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Do not call from an ISR.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     8e8:	80 91 2f 01 	lds	r24, 0x012F
     8ec:	81 11       	cpse	r24, r1
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	08 95       	ret

000008f2 <isLikelyRecentlyOccupied()>:
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Do not call from an ISR.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	80 91 2f 01 	lds	r24, 0x012F
     8f8:	87 31       	cpi	r24, 0x17	; 23
     8fa:	08 f0       	brcs	.+2      	; 0x8fe <isLikelyRecentlyOccupied()+0xc>
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	89 2f       	mov	r24, r25
     900:	08 95       	ret

00000902 <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     902:	8d e2       	ldi	r24, 0x2D	; 45
     904:	80 93 2f 01 	sts	0x012F, r24
     908:	08 95       	ret

0000090a <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     90a:	65 30       	cpi	r22, 0x05	; 5
     90c:	98 f4       	brcc	.+38     	; 0x934 <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     90e:	88 31       	cpi	r24, 0x18	; 24
     910:	88 f4       	brcc	.+34     	; 0x934 <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     912:	f9 99       	sbic	0x1f, 1	; 31
     914:	fe cf       	rjmp	.-4      	; 0x912 <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     916:	28 2f       	mov	r18, r24
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	20 50       	subi	r18, 0x00	; 0
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	88 e1       	ldi	r24, 0x18	; 24
     920:	68 9f       	mul	r22, r24
     922:	c0 01       	movw	r24, r0
     924:	11 24       	eor	r1, r1
     926:	28 0f       	add	r18, r24
     928:	39 1f       	adc	r19, r25
     92a:	32 bd       	out	0x22, r19	; 34
     92c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     92e:	f8 9a       	sbi	0x1f, 0	; 31
     930:	80 b5       	in	r24, 0x20	; 32
     932:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     934:	8f ef       	ldi	r24, 0xFF	; 255
  }
     936:	08 95       	ret

00000938 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     938:	18 16       	cp	r1, r24
     93a:	19 06       	cpc	r1, r25
     93c:	14 f0       	brlt	.+4      	; 0x942 <compressTempC16(int)+0xa>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     942:	8f 3f       	cpi	r24, 0xFF	; 255
     944:	91 05       	cpc	r25, r1
     946:	09 f0       	breq	.+2      	; 0x94a <compressTempC16(int)+0x12>
     948:	34 f4       	brge	.+12     	; 0x956 <compressTempC16(int)+0x1e>
     94a:	43 e0       	ldi	r20, 0x03	; 3
     94c:	95 95       	asr	r25
     94e:	87 95       	ror	r24
     950:	4a 95       	dec	r20
     952:	e1 f7       	brne	.-8      	; 0x94c <compressTempC16(int)+0x14>
     954:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	80 38       	cpi	r24, 0x80	; 128
     95a:	92 07       	cpc	r25, r18
     95c:	34 f4       	brge	.+12     	; 0x96a <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     95e:	80 50       	subi	r24, 0x00	; 0
     960:	91 40       	sbci	r25, 0x01	; 1
     962:	95 95       	asr	r25
     964:	87 95       	ror	r24
     966:	80 5e       	subi	r24, 0xE0	; 224
     968:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     96a:	26 e0       	ldi	r18, 0x06	; 6
     96c:	80 34       	cpi	r24, 0x40	; 64
     96e:	92 07       	cpc	r25, r18
     970:	14 f0       	brlt	.+4      	; 0x976 <compressTempC16(int)+0x3e>
     972:	88 ef       	ldi	r24, 0xF8	; 248
     974:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     976:	80 58       	subi	r24, 0x80	; 128
     978:	91 40       	sbci	r25, 0x01	; 1
     97a:	23 e0       	ldi	r18, 0x03	; 3
     97c:	95 95       	asr	r25
     97e:	87 95       	ror	r24
     980:	2a 95       	dec	r18
     982:	e1 f7       	brne	.-8      	; 0x97c <compressTempC16(int)+0x44>
     984:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     986:	08 95       	ret

00000988 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     988:	80 32       	cpi	r24, 0x20	; 32
     98a:	40 f4       	brcc	.+16     	; 0x99c <expandTempC16(unsigned char)+0x14>
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	73 e0       	ldi	r23, 0x03	; 3
     992:	22 0f       	add	r18, r18
     994:	33 1f       	adc	r19, r19
     996:	7a 95       	dec	r23
     998:	e1 f7       	brne	.-8      	; 0x992 <expandTempC16(unsigned char)+0xa>
     99a:	17 c0       	rjmp	.+46     	; 0x9ca <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     99c:	80 36       	cpi	r24, 0x60	; 96
     99e:	38 f4       	brcc	.+14     	; 0x9ae <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     9a0:	28 2f       	mov	r18, r24
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	22 0f       	add	r18, r18
     9a6:	33 1f       	adc	r19, r19
     9a8:	20 54       	subi	r18, 0x40	; 64
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	0e c0       	rjmp	.+28     	; 0x9ca <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     9ae:	89 3f       	cpi	r24, 0xF9	; 249
     9b0:	18 f0       	brcs	.+6      	; 0x9b8 <expandTempC16(unsigned char)+0x30>
     9b2:	2f ef       	ldi	r18, 0xFF	; 255
     9b4:	3f e7       	ldi	r19, 0x7F	; 127
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     9b8:	28 2f       	mov	r18, r24
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	53 e0       	ldi	r21, 0x03	; 3
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	5a 95       	dec	r21
     9c4:	e1 f7       	brne	.-8      	; 0x9be <expandTempC16(unsigned char)+0x36>
     9c6:	20 58       	subi	r18, 0x80	; 128
     9c8:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     9ca:	c9 01       	movw	r24, r18
     9cc:	08 95       	ret

000009ce <hasEcoBias()>:
#if defined(TEMP_POT_AVAILABLE)
// If true (the default) then the system has an 'Eco' energy-saving bias, else it has a 'comfort' bias.
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
// TRUE IF TEMP POT LESS THAN HALF WAY.
bool hasEcoBias() { return(getTempPotReducedNoise() < 128); }
     9ce:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <getTempPotReducedNoise()>
     9d2:	80 95       	com	r24
     9d4:	88 1f       	adc	r24, r24
     9d6:	88 27       	eor	r24, r24
     9d8:	88 1f       	adc	r24, r24
     9da:	08 95       	ret

000009dc <getFROSTTargetC()>:
uint8_t getFROSTTargetC()
  {
  // Crudely select between eco/comfort FROST levels at the half-way mark.
  // Should not be critical enough to worry over.
  // TODO: used stored value as base/minimum.
  if(!hasEcoBias()) { return(BIASCOM_FROST); }
     9dc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
     9e0:	88 23       	and	r24, r24
     9e2:	11 f0       	breq	.+4      	; 0x9e8 <getFROSTTargetC()+0xc>
     9e4:	85 e0       	ldi	r24, 0x05	; 5
     9e6:	08 95       	ret
     9e8:	8a e0       	ldi	r24, 0x0A	; 10
  return(BIASECO_FROST); // Default is 'eco' notion of frost protection.
  }
     9ea:	08 95       	ret

000009ec <getWARMTargetC()>:
// Get 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getWARMTargetC()
  {
  const uint8_t pot = getTempPotReducedNoise();
     9ec:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <getTempPotReducedNoise()>
  // Temp ranges from eco-1C to comfort+1C levels across full (reduced jitter) [0,255] pot range.
  // TODO: used stored value as base.
  const uint8_t range = (BIASCOM_WARM+1) - (BIASECO_WARM-1) + 1;
  const int band = 256 / range;
  if(pot >= 256 - band) { return(BIASCOM_WARM+1); } // At top...
     9f0:	86 3d       	cpi	r24, 0xD6	; 214
     9f2:	10 f0       	brcs	.+4      	; 0x9f8 <getWARMTargetC()+0xc>
     9f4:	85 e1       	ldi	r24, 0x15	; 21
     9f6:	08 95       	ret
  if(pot < band) { return(BIASECO_WARM-1); } // At bottom...
     9f8:	8a 32       	cpi	r24, 0x2A	; 42
     9fa:	10 f4       	brcc	.+4      	; 0xa00 <getWARMTargetC()+0x14>
     9fc:	80 e1       	ldi	r24, 0x10	; 16
     9fe:	08 95       	ret
  return((pot / band) + BIASECO_WARM-1); // Intermediate (requires expensive division).
     a00:	6a e2       	ldi	r22, 0x2A	; 42
     a02:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodqi4>
     a06:	80 5f       	subi	r24, 0xF0	; 240
  }
     a08:	08 95       	ret

00000a0a <shouldBeWarmedAtHour(unsigned char)>:

// Returns true iff room likely to be occupied and need warming at the specified hour's sample point based on collected stats.
// Used for predictively warming a room in smart mode and for choosing setback depths.
// Returns false if no good evidence to warm the room at the given time based on past history over about one week.
//   * hh hour to check for predictive warming [0,23]
bool shouldBeWarmedAtHour(const uint_least8_t hh)
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
  {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Return false if the sample hour's historic ambient light level falls in the bottom quartile.
  // Thus avoid any 'smart' warming for at least 25% of the daily cycle.
  const uint8_t smoothedAmbLight = eeprom_read_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh));
     a0e:	48 2f       	mov	r20, r24
     a10:	50 e0       	ldi	r21, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a12:	f9 99       	sbic	0x1f, 1	; 31
     a14:	fe cf       	rjmp	.-4      	; 0xa12 <shouldBeWarmedAtHour(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a16:	48 5b       	subi	r20, 0xB8	; 184
     a18:	5e 4f       	sbci	r21, 0xFE	; 254
     a1a:	52 bd       	out	0x22, r21	; 34
     a1c:	41 bd       	out	0x21, r20	; 33
     a1e:	48 54       	subi	r20, 0x48	; 72
     a20:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a22:	f8 9a       	sbi	0x1f, 0	; 31
     a24:	60 b5       	in	r22, 0x20	; 32
     a26:	28 e4       	ldi	r18, 0x48	; 72
     a28:	31 e0       	ldi	r19, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a2c:	f9 99       	sbic	0x1f, 1	; 31
     a2e:	fe cf       	rjmp	.-4      	; 0xa2c <shouldBeWarmedAtHour(unsigned char)+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a30:	32 bd       	out	0x22, r19	; 34
     a32:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a34:	f8 9a       	sbi	0x1f, 0	; 31
     a36:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full days' worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     a38:	68 17       	cp	r22, r24
     a3a:	20 f4       	brcc	.+8      	; 0xa44 <shouldBeWarmedAtHour(unsigned char)+0x3a>
     a3c:	9f 5f       	subi	r25, 0xFF	; 255
     a3e:	92 31       	cpi	r25, 0x12	; 18
     a40:	08 f0       	brcs	.+2      	; 0xa44 <shouldBeWarmedAtHour(unsigned char)+0x3a>
     a42:	55 c0       	rjmp	.+170    	; 0xaee <shouldBeWarmedAtHour(unsigned char)+0xe4>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     a44:	2f 5f       	subi	r18, 0xFF	; 255
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	20 36       	cpi	r18, 0x60	; 96
     a4c:	38 07       	cpc	r19, r24
     a4e:	71 f7       	brne	.-36     	; 0xa2c <shouldBeWarmedAtHour(unsigned char)+0x22>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a50:	f9 99       	sbic	0x1f, 1	; 31
     a52:	fe cf       	rjmp	.-4      	; 0xa50 <shouldBeWarmedAtHour(unsigned char)+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a54:	40 5a       	subi	r20, 0xA0	; 160
     a56:	5e 4f       	sbci	r21, 0xFE	; 254
     a58:	52 bd       	out	0x22, r21	; 34
     a5a:	41 bd       	out	0x21, r20	; 33
     a5c:	40 56       	subi	r20, 0x60	; 96
     a5e:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a60:	f8 9a       	sbi	0x1f, 0	; 31
     a62:	80 b5       	in	r24, 0x20	; 32
#endif

  // Return false if no WARM mode this hour for the last week (ie the unit needs reminding at least once per week).
  // Return true if this hour was in WARM mode yesterday or a week ago, and at least one other day.
  const uint8_t warmHistory = eeprom_read_byte((uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh));
  if(0 == (0x80 & warmHistory)) // This hour has a history.
     a64:	87 fd       	sbrc	r24, 7
     a66:	0e c0       	rjmp	.+28     	; 0xa84 <shouldBeWarmedAtHour(unsigned char)+0x7a>
    {
    if(0 == warmHistory) // No explicit WARM for a week at this hour, so prevent 'smart' warming.
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <shouldBeWarmedAtHour(unsigned char)+0x64>
     a6c:	40 c0       	rjmp	.+128    	; 0xaee <shouldBeWarmedAtHour(unsigned char)+0xe4>
      { return(false); }
    if((0 != (0x41 & warmHistory)) && (0 != (0x3e & warmHistory)))
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	c9 01       	movw	r24, r18
     a74:	81 74       	andi	r24, 0x41	; 65
     a76:	90 70       	andi	r25, 0x00	; 0
     a78:	89 2b       	or	r24, r25
     a7a:	21 f0       	breq	.+8      	; 0xa84 <shouldBeWarmedAtHour(unsigned char)+0x7a>
     a7c:	2e 73       	andi	r18, 0x3E	; 62
     a7e:	30 70       	andi	r19, 0x00	; 0
     a80:	23 2b       	or	r18, r19
     a82:	99 f5       	brne	.+102    	; 0xaea <shouldBeWarmedAtHour(unsigned char)+0xe0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a84:	f9 99       	sbic	0x1f, 1	; 31
     a86:	fe cf       	rjmp	.-4      	; 0xa84 <shouldBeWarmedAtHour(unsigned char)+0x7a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a88:	48 5e       	subi	r20, 0xE8	; 232
     a8a:	5e 4f       	sbci	r21, 0xFE	; 254
     a8c:	52 bd       	out	0x22, r21	; 34
     a8e:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a90:	f8 9a       	sbi	0x1f, 0	; 31
     a92:	80 b5       	in	r24, 0x20	; 32

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     a94:	80 32       	cpi	r24, 0x20	; 32
     a96:	40 f4       	brcc	.+16     	; 0xaa8 <shouldBeWarmedAtHour(unsigned char)+0x9e>
     a98:	c8 2f       	mov	r28, r24
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
     a9c:	b3 e0       	ldi	r27, 0x03	; 3
     a9e:	cc 0f       	add	r28, r28
     aa0:	dd 1f       	adc	r29, r29
     aa2:	ba 95       	dec	r27
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <shouldBeWarmedAtHour(unsigned char)+0x94>
     aa6:	14 c0       	rjmp	.+40     	; 0xad0 <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     aa8:	80 36       	cpi	r24, 0x60	; 96
     aaa:	38 f4       	brcc	.+14     	; 0xaba <shouldBeWarmedAtHour(unsigned char)+0xb0>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     aac:	c8 2f       	mov	r28, r24
     aae:	d0 e0       	ldi	r29, 0x00	; 0
     ab0:	cc 0f       	add	r28, r28
     ab2:	dd 1f       	adc	r29, r29
     ab4:	c0 54       	subi	r28, 0x40	; 64
     ab6:	df 4f       	sbci	r29, 0xFF	; 255
     ab8:	0b c0       	rjmp	.+22     	; 0xad0 <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     aba:	89 3f       	cpi	r24, 0xF9	; 249
     abc:	c0 f4       	brcc	.+48     	; 0xaee <shouldBeWarmedAtHour(unsigned char)+0xe4>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     abe:	c8 2f       	mov	r28, r24
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
     ac2:	f3 e0       	ldi	r31, 0x03	; 3
     ac4:	cc 0f       	add	r28, r28
     ac6:	dd 1f       	adc	r29, r29
     ac8:	fa 95       	dec	r31
     aca:	e1 f7       	brne	.-8      	; 0xac4 <shouldBeWarmedAtHour(unsigned char)+0xba>
     acc:	c0 58       	subi	r28, 0x80	; 128
     ace:	d1 40       	sbci	r29, 0x01	; 1
  DEBUG_SERIAL_PRINT(hh);
  DEBUG_SERIAL_PRINT_FLASHSTRING("h is ");
  DEBUG_SERIAL_PRINT(smoothedTempHHNext >> 4);
  DEBUG_SERIAL_PRINTLN();
#endif
  if((STATS_UNSET_INT != smoothedTempHHNext) && (((smoothedTempHHNext+8)>>4) >= getWARMTargetC()))
     ad0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	28 96       	adiw	r28, 0x08	; 8
     ad8:	e4 e0       	ldi	r30, 0x04	; 4
     ada:	d5 95       	asr	r29
     adc:	c7 95       	ror	r28
     ade:	ea 95       	dec	r30
     ae0:	e1 f7       	brne	.-8      	; 0xada <shouldBeWarmedAtHour(unsigned char)+0xd0>
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	c8 17       	cp	r28, r24
     ae6:	d9 07       	cpc	r29, r25
     ae8:	1c f0       	brlt	.+6      	; 0xaf0 <shouldBeWarmedAtHour(unsigned char)+0xe6>
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <shouldBeWarmedAtHour(unsigned char)+0xe6>
     aee:	20 e0       	ldi	r18, 0x00	; 0
    { return(true); }

  // No good evidence for room to be warmed for specified hour.
  return(false);
  }
     af0:	82 2f       	mov	r24, r18
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	8c 01       	movw	r16, r24
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
     b06:	ce 01       	movw	r24, r28
     b08:	0e 94 94 07 	call	0xf28	; 0xf28 <eeprom_smart_erase_byte(unsigned char*)>
     b0c:	88 23       	and	r24, r24
     b0e:	29 f0       	breq	.+10     	; 0xb1a <zapStats(unsigned int)+0x22>
     b10:	01 50       	subi	r16, 0x01	; 1
     b12:	10 40       	sbci	r17, 0x00	; 0
     b14:	11 f4       	brne	.+4      	; 0xb1a <zapStats(unsigned int)+0x22>
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
     b1a:	21 96       	adiw	r28, 0x01	; 1
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	c8 37       	cpi	r28, 0x78	; 120
     b20:	d8 07       	cpc	r29, r24
     b22:	89 f7       	brne	.-30     	; 0xb06 <zapStats(unsigned int)+0xe>
     b24:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	08 95       	ret

00000b30 <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     b30:	68 2f       	mov	r22, r24
     b32:	60 95       	com	r22
     b34:	82 e1       	ldi	r24, 0x12	; 18
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     b3c:	08 95       	ret

00000b3e <setWARMTargetC(unsigned char)>:
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
  return(true); // Assume value correctly written.
  }
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
     b3e:	1f 93       	push	r17
     b40:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     b42:	85 50       	subi	r24, 0x05	; 5
     b44:	8b 35       	cpi	r24, 0x5B	; 91
     b46:	58 f4       	brcc	.+22     	; 0xb5e <setWARMTargetC(unsigned char)+0x20>
  if(tempC < getFROSTTargetC()) { return(false); } // Cannot set below FROST target.
     b48:	0e 94 ee 04 	call	0x9dc	; 0x9dc <getFROSTTargetC()>
     b4c:	18 17       	cp	r17, r24
     b4e:	38 f0       	brcs	.+14     	; 0xb5e <setWARMTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_WARM_C, tempC); // Update in EEPROM if necessary.
     b50:	8f e0       	ldi	r24, 0x0F	; 15
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	61 2f       	mov	r22, r17
     b56:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <setWARMTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     b5e:	80 e0       	ldi	r24, 0x00	; 0
  }
     b60:	1f 91       	pop	r17
     b62:	08 95       	ret

00000b64 <setFROSTTargetC(unsigned char)>:
#endif

#ifdef SETTABLE_TARGET_TEMPERATURES
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     b64:	1f 93       	push	r17
     b66:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     b68:	85 50       	subi	r24, 0x05	; 5
     b6a:	8b 35       	cpi	r24, 0x5B	; 91
     b6c:	58 f4       	brcc	.+22     	; 0xb84 <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     b6e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
     b72:	81 17       	cp	r24, r17
     b74:	38 f0       	brcs	.+14     	; 0xb84 <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     b76:	8e e0       	ldi	r24, 0x0E	; 14
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	61 2f       	mov	r22, r17
     b7c:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     b84:	80 e0       	ldi	r24, 0x00	; 0
  }
     b86:	1f 91       	pop	r17
     b88:	08 95       	ret

00000b8a <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	18 2f       	mov	r17, r24
     b90:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     b92:	86 17       	cp	r24, r22
     b94:	b9 f0       	breq	.+46     	; 0xbc4 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     b96:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     b9a:	21 2f       	mov	r18, r17
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	a9 01       	movw	r20, r18
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	44 0f       	add	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	9a 95       	dec	r25
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     baa:	42 1b       	sub	r20, r18
     bac:	53 0b       	sbc	r21, r19
     bae:	87 70       	andi	r24, 0x07	; 7
     bb0:	48 0f       	add	r20, r24
     bb2:	51 1d       	adc	r21, r1
     bb4:	40 0f       	add	r20, r16
     bb6:	51 1d       	adc	r21, r1
     bb8:	13 e0       	ldi	r17, 0x03	; 3
     bba:	56 95       	lsr	r21
     bbc:	47 95       	ror	r20
     bbe:	1a 95       	dec	r17
     bc0:	e1 f7       	brne	.-8      	; 0xbba <smoothStatsValue(unsigned char, unsigned char)+0x30>
     bc2:	14 2f       	mov	r17, r20
  }
     bc4:	81 2f       	mov	r24, r17
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	08 95       	ret

00000bcc <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	08 2f       	mov	r16, r24
  {
  // (Sub-)sample processing.
  static uint8_t sampleCount; // General sub-sample count; initially zero, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount++);
     bda:	80 91 2e 01 	lds	r24, 0x012E
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <sampleStats(bool)+0x1a>
     be4:	11 e0       	ldi	r17, 0x01	; 1
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	80 93 2e 01 	sts	0x012E, r24
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmModeDebounced()) { ++warmCount; } else { --warmCount; }
     bec:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <inWarmModeDebounced()>
     bf0:	90 91 2d 01 	lds	r25, 0x012D
     bf4:	88 23       	and	r24, r24
     bf6:	11 f0       	breq	.+4      	; 0xbfc <sampleStats(bool)+0x30>
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <sampleStats(bool)+0x32>
     bfc:	91 50       	subi	r25, 0x01	; 1
     bfe:	90 93 2d 01 	sts	0x012D, r25
  // Ambient light.
  const int ambLight = getAmbientLight();
     c02:	0e 94 31 04 	call	0x862	; 0x862 <getAmbientLight()>
     c06:	9c 01       	movw	r18, r24
  static int ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
     c08:	11 23       	and	r17, r17
     c0a:	31 f4       	brne	.+12     	; 0xc18 <sampleStats(bool)+0x4c>
     c0c:	80 91 2b 01 	lds	r24, 0x012B
     c10:	90 91 2c 01 	lds	r25, 0x012C
     c14:	28 0f       	add	r18, r24
     c16:	39 1f       	adc	r19, r25
     c18:	30 93 2c 01 	sts	0x012C, r19
     c1c:	20 93 2b 01 	sts	0x012B, r18
  const int tempC16 = getTemperatureC16();
     c20:	0e 94 00 16 	call	0x2c00	; 0x2c00 <getTemperatureC16()>
     c24:	9c 01       	movw	r18, r24
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
     c26:	11 23       	and	r17, r17
     c28:	31 f4       	brne	.+12     	; 0xc36 <sampleStats(bool)+0x6a>
     c2a:	80 91 29 01 	lds	r24, 0x0129
     c2e:	90 91 2a 01 	lds	r25, 0x012A
     c32:	28 0f       	add	r18, r24
     c34:	39 1f       	adc	r19, r25
     c36:	30 93 2a 01 	sts	0x012A, r19
     c3a:	20 93 29 01 	sts	0x0129, r18
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
     c3e:	00 23       	and	r16, r16
     c40:	09 f4       	brne	.+2      	; 0xc44 <sampleStats(bool)+0x78>
     c42:	89 c0       	rjmp	.+274    	; 0xd56 <sampleStats(bool)+0x18a>

  const uint_least8_t hh = getHoursLT(); // Get the current local-time hour...
     c44:	0e 94 8b 13 	call	0x2716	; 0x2716 <getHoursLT()>
     c48:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const uint8_t temp = compressTempC16((tempC16Total + (sampleCount/2)) / sampleCount);
     c4a:	60 91 2e 01 	lds	r22, 0x012E
     c4e:	26 2f       	mov	r18, r22
     c50:	26 95       	lsr	r18
     c52:	80 91 29 01 	lds	r24, 0x0129
     c56:	90 91 2a 01 	lds	r25, 0x012A
     c5a:	82 0f       	add	r24, r18
     c5c:	91 1d       	adc	r25, r1
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 ba 2b 	call	0x5774	; 0x5774 <__divmodhi4>
     c64:	cb 01       	movw	r24, r22
     c66:	0e 94 9c 04 	call	0x938	; 0x938 <compressTempC16(int)>
     c6a:	08 2f       	mov	r16, r24
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_TEMP_BY_HOUR + hh), temp);
     c6c:	e1 2e       	mov	r14, r17
     c6e:	ff 24       	eor	r15, r15
     c70:	c7 01       	movw	r24, r14
     c72:	80 50       	subi	r24, 0x00	; 0
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	60 2f       	mov	r22, r16
     c78:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phT = (uint8_t *)(EE_START_LAST_TEMP_BY_HOUR_SMOOTHED + hh);
     c7c:	e7 01       	movw	r28, r14
     c7e:	c8 5e       	subi	r28, 0xE8	; 232
     c80:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c82:	f9 99       	sbic	0x1f, 1	; 31
     c84:	fe cf       	rjmp	.-4      	; 0xc82 <sampleStats(bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c86:	d2 bd       	out	0x22, r29	; 34
     c88:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c8a:	f8 9a       	sbi	0x1f, 0	; 31
     c8c:	80 b5       	in	r24, 0x20	; 32
  const uint8_t tempSmoothed = eeprom_read_byte(phT);
  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
     c8e:	89 3f       	cpi	r24, 0xF9	; 249
     c90:	18 f0       	brcs	.+6      	; 0xc98 <sampleStats(bool)+0xcc>
     c92:	ce 01       	movw	r24, r28
     c94:	60 2f       	mov	r22, r16
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <sampleStats(bool)+0xd6>
  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }
     c98:	60 2f       	mov	r22, r16
     c9a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <smoothStatsValue(unsigned char, unsigned char)>
     c9e:	68 2f       	mov	r22, r24
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sampleCount<<1)) / (sampleCount<<2));
     ca6:	80 91 2e 01 	lds	r24, 0x012E
     caa:	90 e0       	ldi	r25, 0x00	; 0
  const uint8_t ambL = min(ambLShifted, MAX_STATS_AMBLIGHT);
     cac:	20 91 2b 01 	lds	r18, 0x012B
     cb0:	30 91 2c 01 	lds	r19, 0x012C
     cb4:	bc 01       	movw	r22, r24
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	66 0f       	add	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	0e 94 ba 2b 	call	0x5774	; 0x5774 <__divmodhi4>
     cca:	16 2f       	mov	r17, r22
     ccc:	6f 3f       	cpi	r22, 0xFF	; 255
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <sampleStats(bool)+0x106>
     cd0:	1e ef       	ldi	r17, 0xFE	; 254
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR + hh), ambL);
     cd2:	c7 01       	movw	r24, r14
     cd4:	80 5d       	subi	r24, 0xD0	; 208
     cd6:	9e 4f       	sbci	r25, 0xFE	; 254
     cd8:	61 2f       	mov	r22, r17
     cda:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phA = (uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh);
     cde:	e7 01       	movw	r28, r14
     ce0:	c8 5b       	subi	r28, 0xB8	; 184
     ce2:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ce4:	f9 99       	sbic	0x1f, 1	; 31
     ce6:	fe cf       	rjmp	.-4      	; 0xce4 <sampleStats(bool)+0x118>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ce8:	d2 bd       	out	0x22, r29	; 34
     cea:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cec:	f8 9a       	sbi	0x1f, 0	; 31
     cee:	80 b5       	in	r24, 0x20	; 32
  const uint8_t ambLSmoothed = eeprom_read_byte(phA);
  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
     cf0:	8f 3f       	cpi	r24, 0xFF	; 255
     cf2:	19 f4       	brne	.+6      	; 0xcfa <sampleStats(bool)+0x12e>
     cf4:	ce 01       	movw	r24, r28
     cf6:	61 2f       	mov	r22, r17
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <sampleStats(bool)+0x138>
  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }
     cfa:	61 2f       	mov	r22, r17
     cfc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <smoothStatsValue(unsigned char, unsigned char)>
     d00:	68 2f       	mov	r22, r24
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh);
     d08:	e7 01       	movw	r28, r14
     d0a:	c0 5a       	subi	r28, 0xA0	; 160
     d0c:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d0e:	f9 99       	sbic	0x1f, 1	; 31
     d10:	fe cf       	rjmp	.-4      	; 0xd0e <sampleStats(bool)+0x142>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d12:	d2 bd       	out	0x22, r29	; 34
     d14:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d16:	f8 9a       	sbi	0x1f, 0	; 31
     d18:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmModeDebounced() ? 0x7f : 0); } // First use sets all history bits to current sample value.
     d1a:	87 ff       	sbrs	r24, 7
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <sampleStats(bool)+0x168>
     d1e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <inWarmModeDebounced()>
     d22:	88 23       	and	r24, r24
     d24:	11 f4       	brne	.+4      	; 0xd2a <sampleStats(bool)+0x15e>
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <sampleStats(bool)+0x160>
     d2a:	6f e7       	ldi	r22, 0x7F	; 127
     d2c:	ce 01       	movw	r24, r28
     d2e:	0e 94 a8 07 	call	0xf50	; 0xf50 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <sampleStats(bool)+0x182>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	95 95       	asr	r25
     d38:	87 95       	ror	r24
     d3a:	68 2f       	mov	r22, r24
     d3c:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
     d3e:	80 91 2d 01 	lds	r24, 0x012D
     d42:	18 16       	cp	r1, r24
     d44:	0c f4       	brge	.+2      	; 0xd48 <sampleStats(bool)+0x17c>
     d46:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
     d4e:	10 92 2d 01 	sts	0x012D, r1

  // TODO: other stats measures...


  // Reset generical sub-sample count to initial state after fill sample.
  sampleCount = 0;
     d52:	10 92 2e 01 	sts	0x012E, r1
  }
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	08 95       	ret

00000d64 <markAsPossiblyOccupied()>:
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Do not call from an ISR.
void markAsPossiblyOccupied()
  { occupationCountdownM = fmax(occupationCountdownM, OCCUPATION_TIMEOUT_M/2); }
     d64:	60 91 2f 01 	lds	r22, 0x012F
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 ce 2a 	call	0x559c	; 0x559c <__floatunsisf>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 eb       	ldi	r20, 0xB0	; 176
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 0b 2b 	call	0x5616	; 0x5616 <fmax>
     d7e:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__fixunssfsi>
     d82:	60 93 2f 01 	sts	0x012F, r22
     d86:	08 95       	ret

00000d88 <computeTargetTemperature()>:
// Will be called by computeCallForHeat().
void computeTargetTemperature()
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  readTempPot();
     d88:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <readTempPot()>
#endif

  if(!inWarmModeDebounced()) // In FROST mode.
     d8c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <inWarmModeDebounced()>
     d90:	88 23       	and	r24, r24
     d92:	19 f4       	brne	.+6      	; 0xd9a <computeTargetTemperature()+0x12>
    {
    const uint8_t frostC = getFROSTTargetC();
     d94:	0e 94 ee 04 	call	0x9dc	; 0x9dc <getFROSTTargetC()>
     d98:	24 c0       	rjmp	.+72     	; 0xde2 <computeTargetTemperature()+0x5a>
      }
#endif
    }

#ifdef SUPPORT_BAKE
  else if(inBakeModeDebounced()) // If in BAKE mode then use elevated target.
     d9a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <inBakeModeDebounced()>
     d9e:	88 23       	and	r24, r24
     da0:	39 f0       	breq	.+14     	; 0xdb0 <computeTargetTemperature()+0x28>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
     da2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
     da6:	8b 5f       	subi	r24, 0xFB	; 251
     da8:	80 36       	cpi	r24, 0x60	; 96
     daa:	d8 f0       	brcs	.+54     	; 0xde2 <computeTargetTemperature()+0x5a>
     dac:	8f e5       	ldi	r24, 0x5F	; 95
     dae:	19 c0       	rjmp	.+50     	; 0xde2 <computeTargetTemperature()+0x5a>
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if room is too dark for activity AND room seems unoccupied
    // AND the unit has an eco bias or no schedule is on WARM at the moment (TODO-111).
    // TODO: with full occupancy support then allow setback simply based on lack of occupancy.
    if(isRoomDark() && isLikelyUnoccupied() &&
     db0:	0e 94 2e 04 	call	0x85c	; 0x85c <isRoomLit()>
     db4:	88 23       	and	r24, r24
     db6:	99 f4       	brne	.+38     	; 0xdde <computeTargetTemperature()+0x56>
     db8:	80 91 2f 01 	lds	r24, 0x012F
     dbc:	88 23       	and	r24, r24
     dbe:	79 f4       	brne	.+30     	; 0xdde <computeTargetTemperature()+0x56>
     dc0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
     dc4:	88 23       	and	r24, r24
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <computeTargetTemperature()+0x48>
     dc8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <isAnyScheduleOnWARMNow()>
     dcc:	88 23       	and	r24, r24
     dce:	39 f4       	brne	.+14     	; 0xdde <computeTargetTemperature()+0x56>
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sb = shouldBeWarmedAtHour(hh) ? SETBACK : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - sb), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - SETBACK), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
     dd0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
     dd4:	81 50       	subi	r24, 0x01	; 1
void panic();


// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	20 f4       	brcc	.+8      	; 0xde2 <computeTargetTemperature()+0x5a>
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <computeTargetTemperature()+0x5a>
#endif
      }
    else
      { targetTempC = getWARMTargetC(); } // Room not known to be too dark for normal activity so use WARM target directly.
     dde:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
     de2:	80 93 30 01 	sts	0x0130, r24
     de6:	08 95       	ret

00000de8 <computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, TRVPercentOpen.
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeCallForHeat()
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
  {
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }
     dec:	80 91 2f 01 	lds	r24, 0x012F
     df0:	88 23       	and	r24, r24
     df2:	19 f0       	breq	.+6      	; 0xdfa <computeCallForHeat()+0x12>
     df4:	81 50       	subi	r24, 0x01	; 1
     df6:	80 93 2f 01 	sts	0x012F, r24

  computeTargetTemperature();
     dfa:	0e 94 c4 06 	call	0xd88	; 0xd88 <computeTargetTemperature()>
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
     dfe:	0e 94 00 16 	call	0x2c00	; 0x2c00 <getTemperatureC16()>
     e02:	ac 01       	movw	r20, r24
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     e04:	64 e0       	ldi	r22, 0x04	; 4
     e06:	95 95       	asr	r25
     e08:	87 95       	ror	r24
     e0a:	6a 95       	dec	r22
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <computeCallForHeat()+0x1e>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     e0e:	30 91 30 01 	lds	r19, 0x0130
     e12:	83 17       	cp	r24, r19
     e14:	e0 f4       	brcc	.+56     	; 0xe4e <computeCallForHeat()+0x66>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
     e16:	80 91 31 01 	lds	r24, 0x0131
     e1a:	84 36       	cpi	r24, 0x64	; 100
     e1c:	09 f4       	brne	.+2      	; 0xe20 <computeCallForHeat()+0x38>
     e1e:	7c c0       	rjmp	.+248    	; 0xf18 <computeCallForHeat()+0x130>
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target then in BAKE mode immediately open to 100%, unless always glacial.
      // FIXME: use debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeModeDebounced()) { TRVPercentOpen = 100; }
     e20:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <inBakeModeDebounced()>
     e24:	88 23       	and	r24, r24
     e26:	61 f4       	brne	.+24     	; 0xe40 <computeCallForHeat()+0x58>
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
        const uint8_t tmp = TRVPercentOpen + ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     e28:	10 91 31 01 	lds	r17, 0x0131
     e2c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
     e30:	88 23       	and	r24, r24
     e32:	11 f0       	breq	.+4      	; 0xe38 <computeCallForHeat()+0x50>
     e34:	8a e0       	ldi	r24, 0x0A	; 10
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <computeCallForHeat()+0x52>
     e38:	84 e1       	ldi	r24, 0x14	; 20
     e3a:	81 0f       	add	r24, r17
#else
        const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(tmp > 100) { TRVPercentOpen = 100; } // Capped at 100%.
     e3c:	85 36       	cpi	r24, 0x65	; 101
     e3e:	10 f0       	brcs	.+4      	; 0xe44 <computeCallForHeat()+0x5c>
     e40:	84 e6       	ldi	r24, 0x64	; 100
     e42:	6f c0       	rjmp	.+222    	; 0xf22 <computeCallForHeat()+0x13a>
        else
          {
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > TRV_MAX_SLEW_PC_PER_MIN)
          // Ensure valve will be immediately significantly opened (and that linger can work properly).
          if(tmp < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) { TRVPercentOpen = DEFAULT_MIN_VALVE_PC_REALLY_OPEN; }
     e44:	8a 30       	cpi	r24, 0x0A	; 10
     e46:	08 f0       	brcs	.+2      	; 0xe4a <computeCallForHeat()+0x62>
     e48:	6c c0       	rjmp	.+216    	; 0xf22 <computeCallForHeat()+0x13a>
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	6a c0       	rjmp	.+212    	; 0xf22 <computeCallForHeat()+0x13a>
          }
        }      
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     e4e:	38 17       	cp	r19, r24
     e50:	30 f5       	brcc	.+76     	; 0xe9e <computeCallForHeat()+0xb6>
    {
    cancelBake(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
     e52:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <cancelBake()>
    if(TRVPercentOpen != 0)
     e56:	80 91 31 01 	lds	r24, 0x0131
     e5a:	88 23       	and	r24, r24
     e5c:	09 f4       	brne	.+2      	; 0xe60 <computeCallForHeat()+0x78>
     e5e:	5c c0       	rjmp	.+184    	; 0xf18 <computeCallForHeat()+0x130>
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(TRVPercentOpen <= lingerThreshold)
     e60:	8a 30       	cpi	r24, 0x0A	; 10
     e62:	38 f4       	brcc	.+14     	; 0xe72 <computeCallForHeat()+0x8a>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) && (TRVPercentOpen < DEFAULT_MIN_VALVE_PC_REALLY_OPEN - DEFAULT_MAX_RUN_ON_TIME_M))
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	18 f4       	brcc	.+6      	; 0xe6e <computeCallForHeat()+0x86>
          { TRVPercentOpen = 0; } // Shut right off.
     e68:	10 92 31 01 	sts	0x0131, r1
     e6c:	39 c0       	rjmp	.+114    	; 0xee0 <computeCallForHeat()+0xf8>
        else
          { --TRVPercentOpen; } // Turn down as slowly as reasonably possible to help boiler cool.
     e6e:	81 50       	subi	r24, 0x01	; 1
     e70:	58 c0       	rjmp	.+176    	; 0xf22 <computeCallForHeat()+0x13a>
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
     e72:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
     e76:	88 23       	and	r24, r24
     e78:	59 f0       	breq	.+22     	; 0xe90 <computeCallForHeat()+0xa8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e7a:	f9 99       	sbic	0x1f, 1	; 31
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <computeCallForHeat()+0x92>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e7e:	82 e1       	ldi	r24, 0x12	; 18
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	92 bd       	out	0x22, r25	; 34
     e84:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e86:	f8 9a       	sbi	0x1f, 0	; 31
     e88:	80 b5       	in	r24, 0x20	; 32
     e8a:	8f 3f       	cpi	r24, 0xFF	; 255
     e8c:	09 f4       	brne	.+2      	; 0xe90 <computeCallForHeat()+0xa8>
     e8e:	48 c0       	rjmp	.+144    	; 0xf20 <computeCallForHeat()+0x138>
     e90:	80 91 31 01 	lds	r24, 0x0131
     e94:	8e 31       	cpi	r24, 0x1E	; 30
     e96:	08 f4       	brcc	.+2      	; 0xe9a <computeCallForHeat()+0xb2>
     e98:	43 c0       	rjmp	.+134    	; 0xf20 <computeCallForHeat()+0x138>
     e9a:	84 51       	subi	r24, 0x14	; 20
     e9c:	42 c0       	rjmp	.+132    	; 0xf22 <computeCallForHeat()+0x13a>
    }
  else // Close to temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     e9e:	24 2f       	mov	r18, r20
     ea0:	2f 70       	andi	r18, 0x0F	; 15
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
#if defined(VALVE_TURN_OFF_LINGER)
    // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
    const uint8_t targetPO = fmax(targetPORaw, getMinValvePcReallyOpen());
     ea2:	60 e1       	ldi	r22, 0x10	; 16
     ea4:	62 1b       	sub	r22, r18
     ea6:	26 e0       	ldi	r18, 0x06	; 6
     ea8:	62 9f       	mul	r22, r18
     eaa:	60 2d       	mov	r22, r0
     eac:	11 24       	eor	r1, r1
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 ce 2a 	call	0x559c	; 0x559c <__floatunsisf>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	0e 94 0b 2b 	call	0x5616	; 0x5616 <fmax>
     ec4:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__fixunssfsi>
     ec8:	16 2f       	mov	r17, r22
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO < TRVPercentOpen) // Currently open more than required.
     eca:	20 91 31 01 	lds	r18, 0x0131
     ece:	62 17       	cp	r22, r18
     ed0:	48 f4       	brcc	.+18     	; 0xee4 <computeCallForHeat()+0xfc>
      {
      const uint8_t slew = TRVPercentOpen - targetPO;
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     ed2:	82 2f       	mov	r24, r18
     ed4:	81 1b       	sub	r24, r17
     ed6:	87 30       	cpi	r24, 0x07	; 7
     ed8:	f8 f0       	brcs	.+62     	; 0xf18 <computeCallForHeat()+0x130>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
            { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     eda:	25 50       	subi	r18, 0x05	; 5
     edc:	20 93 31 01 	sts	0x0131, r18
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	1b c0       	rjmp	.+54     	; 0xf1a <computeCallForHeat()+0x132>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
        changed = true; // TRV setting has been changed.
        }
      }
    else if(targetPO > TRVPercentOpen) // Currently open less than required.
     ee4:	26 17       	cp	r18, r22
     ee6:	c0 f4       	brcc	.+48     	; 0xf18 <computeCallForHeat()+0x130>
      {
      const uint8_t slew = targetPO - TRVPercentOpen;
     ee8:	06 2f       	mov	r16, r22
     eea:	02 1b       	sub	r16, r18
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     eec:	07 30       	cpi	r16, 0x07	; 7
     eee:	a0 f0       	brcs	.+40     	; 0xf18 <computeCallForHeat()+0x130>
        {
        // Slew open faster in BAKE mode or with comfort bias (unless always glacial).
#if !defined(TRV_SLEW_GLACIAL)
        const uint8_t maxSlew = (inBakeModeDebounced() || !hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     ef0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <inBakeModeDebounced()>
     ef4:	88 23       	and	r24, r24
     ef6:	31 f4       	brne	.+12     	; 0xf04 <computeCallForHeat()+0x11c>
     ef8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
     efc:	88 23       	and	r24, r24
     efe:	11 f0       	breq	.+4      	; 0xf04 <computeCallForHeat()+0x11c>
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <computeCallForHeat()+0x122>
#else
        const uint8_t maxSlew = TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(slew > maxSlew)
     f04:	0b 30       	cpi	r16, 0x0B	; 11
     f06:	28 f0       	brcs	.+10     	; 0xf12 <computeCallForHeat()+0x12a>
     f08:	9a e0       	ldi	r25, 0x0A	; 10
            { TRVPercentOpen += maxSlew; } // Cap slew rate.
     f0a:	80 91 31 01 	lds	r24, 0x0131
     f0e:	89 0f       	add	r24, r25
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <computeCallForHeat()+0x13a>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
     f12:	10 93 31 01 	sts	0x0131, r17
     f16:	e4 cf       	rjmp	.-56     	; 0xee0 <computeCallForHeat()+0xf8>
     f18:	80 e0       	ldi	r24, 0x00	; 0
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }

  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { TRVPercentOpen = lingerThreshold; }
     f20:	89 e0       	ldi	r24, 0x09	; 9
     f22:	80 93 31 01 	sts	0x0131, r24
     f26:	dc cf       	rjmp	.-72     	; 0xee0 <computeCallForHeat()+0xf8>

00000f28 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     f28:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     f2a:	f9 99       	sbic	0x1f, 1	; 31
     f2c:	fe cf       	rjmp	.-4      	; 0xf2a <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     f2e:	32 bd       	out	0x22, r19	; 34
     f30:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     f36:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     f38:	8f 3f       	cpi	r24, 0xFF	; 255
     f3a:	11 f4       	brne	.+4      	; 0xf40 <eeprom_smart_erase_byte(unsigned char*)+0x18>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     f40:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f42:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     f44:	84 e1       	ldi	r24, 0x14	; 20
     f46:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     f48:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f4a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     f4c:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     f4e:	08 95       	ret

00000f50 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     f50:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     f52:	f9 99       	sbic	0x1f, 1	; 31
     f54:	fe cf       	rjmp	.-4      	; 0xf52 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     f56:	32 bd       	out	0x22, r19	; 34
     f58:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     f5e:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     f60:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     f62:	86 17       	cp	r24, r22
     f64:	11 f4       	brne	.+4      	; 0xf6a <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     f6a:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     f6c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f6e:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     f70:	84 e2       	ldi	r24, 0x24	; 36
     f72:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
     f74:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f76:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     f78:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
     f7a:	08 95       	ret

00000f7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
     f7c:	78 2f       	mov	r23, r24
     f7e:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
     f80:	6f 3f       	cpi	r22, 0xFF	; 255
     f82:	19 f4       	brne	.+6      	; 0xf8a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
     f84:	0e 94 94 07 	call	0xf28	; 0xf28 <eeprom_smart_erase_byte(unsigned char*)>
     f88:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f8a:	f9 99       	sbic	0x1f, 1	; 31
     f8c:	fe cf       	rjmp	.-4      	; 0xf8a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f8e:	47 2f       	mov	r20, r23
     f90:	5e 2f       	mov	r21, r30
     f92:	52 bd       	out	0x22, r21	; 34
     f94:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f96:	f8 9a       	sbi	0x1f, 0	; 31
     f98:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
     f9a:	68 17       	cp	r22, r24
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
     fa2:	26 2f       	mov	r18, r22
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	82 23       	and	r24, r18
     faa:	93 23       	and	r25, r19
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	29 f4       	brne	.+10     	; 0xfbc <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
     fb2:	87 2f       	mov	r24, r23
     fb4:	9e 2f       	mov	r25, r30
     fb6:	0e 94 a8 07 	call	0xf50	; 0xf50 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     fba:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     fbc:	f9 99       	sbic	0x1f, 1	; 31
     fbe:	fe cf       	rjmp	.-4      	; 0xfbc <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     fc0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fc2:	52 bd       	out	0x22, r21	; 34
     fc4:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     fc6:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	fa 9a       	sbi	0x1f, 2	; 31
     fce:	f9 9a       	sbi	0x1f, 1	; 31
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
     fd4:	08 95       	ret

00000fd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
     fd6:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
     fd8:	80 81       	ld	r24, Z
     fda:	98 2f       	mov	r25, r24
     fdc:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
     fde:	66 23       	and	r22, r22
     fe0:	b1 f4       	brne	.+44     	; 0x100e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
     fe2:	92 30       	cpi	r25, 0x02	; 2
     fe4:	51 f0       	breq	.+20     	; 0xffa <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
     fe6:	93 30       	cpi	r25, 0x03	; 3
     fe8:	31 f0       	breq	.+12     	; 0xff6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
     fea:	9f 01       	movw	r18, r30
     fec:	2f 5f       	subi	r18, 0xFF	; 255
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	91 30       	cpi	r25, 0x01	; 1
     ff2:	59 f4       	brne	.+22     	; 0x100a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
     ff6:	8d ec       	ldi	r24, 0xCD	; 205
     ff8:	25 c0       	rjmp	.+74     	; 0x1044 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
     ffa:	80 7c       	andi	r24, 0xC0	; 192
     ffc:	80 63       	ori	r24, 0x30	; 48
     ffe:	22 c0       	rjmp	.+68     	; 0x1044 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    1000:	80 7f       	andi	r24, 0xF0	; 240
    1002:	8c 60       	ori	r24, 0x0C	; 12
    1004:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1006:	f9 01       	movw	r30, r18
    1008:	11 c0       	rjmp	.+34     	; 0x102c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    100a:	83 60       	ori	r24, 0x03	; 3
    100c:	13 c0       	rjmp	.+38     	; 0x1034 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    100e:	92 30       	cpi	r25, 0x02	; 2
    1010:	51 f0       	breq	.+20     	; 0x1026 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    1012:	93 30       	cpi	r25, 0x03	; 3
    1014:	31 f0       	breq	.+12     	; 0x1022 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    1016:	9f 01       	movw	r18, r30
    1018:	2f 5f       	subi	r18, 0xFF	; 255
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	91 30       	cpi	r25, 0x01	; 1
    101e:	71 f4       	brne	.+28     	; 0x103c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    1020:	07 c0       	rjmp	.+14     	; 0x1030 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    1022:	80 ee       	ldi	r24, 0xE0	; 224
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    1026:	80 7c       	andi	r24, 0xC0	; 192
    1028:	88 63       	ori	r24, 0x38	; 56
    102a:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    1030:	80 7f       	andi	r24, 0xF0	; 240
    1032:	8e 60       	ori	r24, 0x0E	; 14
    1034:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    1036:	f9 01       	movw	r30, r18
    1038:	8e e3       	ldi	r24, 0x3E	; 62
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    103c:	83 60       	ori	r24, 0x03	; 3
    103e:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    1040:	f9 01       	movw	r30, r18
    1042:	8d e8       	ldi	r24, 0x8D	; 141
    1044:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    1046:	cf 01       	movw	r24, r30
    1048:	08 95       	ret

0000104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	9c 01       	movw	r18, r24
    1058:	16 2f       	mov	r17, r22
    105a:	00 e8       	ldi	r16, 0x80	; 128
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    1060:	e6 2e       	mov	r14, r22
    1062:	ff 24       	eor	r15, r15
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	80 2f       	mov	r24, r16
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	8e 21       	and	r24, r14
    106c:	9f 21       	and	r25, r15
    106e:	89 2b       	or	r24, r25
    1070:	09 f0       	breq	.+2      	; 0x1074 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	c9 01       	movw	r24, r18
    1076:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    107a:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    107c:	06 95       	lsr	r16
    107e:	21 96       	adiw	r28, 0x01	; 1
    1080:	c8 30       	cpi	r28, 0x08	; 8
    1082:	d1 05       	cpc	r29, r1
    1084:	79 f7       	brne	.-34     	; 0x1064 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1086:	01 2e       	mov	r0, r17
    1088:	12 95       	swap	r17
    108a:	10 25       	eor	r17, r0
    108c:	01 2e       	mov	r0, r17
    108e:	16 95       	lsr	r17
    1090:	16 95       	lsr	r17
    1092:	10 25       	eor	r17, r0
    1094:	61 2f       	mov	r22, r17
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	76 95       	lsr	r23
    109e:	67 95       	ror	r22
    10a0:	61 70       	andi	r22, 0x01	; 1
    10a2:	c9 01       	movw	r24, r18
    10a4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	dc 01       	movw	r26, r24
    10be:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    10c0:	8c ec       	ldi	r24, 0xCC	; 204
    10c2:	fd 01       	movw	r30, r26
    10c4:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	8c 93       	st	X, r24
    10ca:	df 01       	movw	r26, r30
    10cc:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    10ce:	81 83       	std	Z+1, r24	; 0x01
    10d0:	fd 01       	movw	r30, r26
    10d2:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    10d4:	11 96       	adiw	r26, 0x01	; 1
    10d6:	8c 93       	st	X, r24
    10d8:	df 01       	movw	r26, r30
    10da:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    10dc:	81 83       	std	Z+1, r24	; 0x01
    10de:	fd 01       	movw	r30, r26
    10e0:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    10e6:	ff 24       	eor	r15, r15
    10e8:	fa 94       	dec	r15
    10ea:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    10ec:	cf 01       	movw	r24, r30
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    10f6:	f8 01       	movw	r30, r16
    10f8:	60 81       	ld	r22, Z
    10fa:	0e 94 25 08 	call	0x104a	; 0x104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    10fe:	f8 01       	movw	r30, r16
    1100:	61 81       	ldd	r22, Z+1	; 0x01
    1102:	0e 94 25 08 	call	0x104a	; 0x104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	0e 94 25 08 	call	0x104a	; 0x104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    110c:	f8 01       	movw	r30, r16
    110e:	62 81       	ldd	r22, Z+2	; 0x02
    1110:	0e 94 25 08 	call	0x104a	; 0x104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    1114:	f8 01       	movw	r30, r16
    1116:	63 81       	ldd	r22, Z+3	; 0x03
    1118:	0e 94 25 08 	call	0x104a	; 0x104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    111c:	f8 01       	movw	r30, r16
    111e:	60 81       	ld	r22, Z
    1120:	21 81       	ldd	r18, Z+1	; 0x01
    1122:	62 0f       	add	r22, r18
    1124:	64 5f       	subi	r22, 0xF4	; 244
    1126:	22 81       	ldd	r18, Z+2	; 0x02
    1128:	62 0f       	add	r22, r18
    112a:	23 81       	ldd	r18, Z+3	; 0x03
    112c:	62 0f       	add	r22, r18
    112e:	0e 94 25 08 	call	0x104a	; 0x104a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bit to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    113e:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    1140:	f0 82       	st	Z, r15
  return(bptr);
  }
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	08 95       	ret

0000114a <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
// The TRVPercentOpen value is used to generate the frame.
// On entry hc1, hc2 (and addresss if used) must be set correctly; this sets command and extension.
// The generated command frame can be resent indefinitely.
// The command buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	ec 01       	movw	r28, r24
    1150:	9b 01       	movw	r18, r22
  {
  command->command = 0x26;
    1152:	86 e2       	ldi	r24, 0x26	; 38
    1154:	fb 01       	movw	r30, r22
    1156:	82 83       	std	Z+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	48 9f       	mul	r20, r24
    115c:	c0 01       	movw	r24, r0
    115e:	11 24       	eor	r1, r1
    1160:	64 e6       	ldi	r22, 0x64	; 100
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	0e 94 ba 2b 	call	0x5774	; 0x5774 <__divmodhi4>
    1168:	63 83       	std	Z+3, r22	; 0x03
#ifdef RFM22_SYNC_ONLY_BCFH
  // Huge cheat: only add RFM22-friendly pre-preamble if calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
  if(TRVPercentOpen >= getMinValvePcReallyOpen())
    116a:	4a 30       	cpi	r20, 0x0A	; 10
    116c:	60 f0       	brcs	.+24     	; 0x1186 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    {
    *bptr++ = 0xaa;
    116e:	8a ea       	ldi	r24, 0xAA	; 170
    1170:	fe 01       	movw	r30, r28
    1172:	81 93       	st	Z+, r24
    *bptr++ = 0xaa;
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	df 01       	movw	r26, r30
    1178:	11 96       	adiw	r26, 0x01	; 1
    *bptr++ = 0xaa;
    117a:	81 83       	std	Z+1, r24	; 0x01
    *bptr++ = 0xaa;
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	8c 93       	st	X, r24
    1180:	11 97       	sbiw	r26, 0x01	; 1
    1182:	ed 01       	movw	r28, r26
    1184:	22 96       	adiw	r28, 0x02	; 2
    }
#endif
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
    1186:	ce 01       	movw	r24, r28
    1188:	b9 01       	movw	r22, r18
    118a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
  }
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1194:	f9 99       	sbic	0x1f, 1	; 31
    1196:	fe cf       	rjmp	.-4      	; 0x1194 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	92 bd       	out	0x22, r25	; 34
    119e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    11a0:	f8 9a       	sbi	0x1f, 0	; 31
    11a2:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    11a4:	08 95       	ret

000011a6 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11a6:	f9 99       	sbic	0x1f, 1	; 31
    11a8:	fe cf       	rjmp	.-4      	; 0x11a6 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    11aa:	81 e1       	ldi	r24, 0x11	; 17
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	92 bd       	out	0x22, r25	; 34
    11b0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    11b2:	f8 9a       	sbi	0x1f, 0	; 31
    11b4:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    11b6:	08 95       	ret

000011b8 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    11b8:	80 91 65 01 	lds	r24, 0x0165
    11bc:	08 95       	ret

000011be <isControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    11be:	80 91 65 01 	lds	r24, 0x0165
    11c2:	88 23       	and	r24, r24
    11c4:	21 f0       	breq	.+8      	; 0x11ce <isControlledValveOpen()+0x10>
    11c6:	80 91 9b 01 	lds	r24, 0x019B
    11ca:	81 11       	cpse	r24, r1
    11cc:	81 e0       	ldi	r24, 0x01	; 1
// GLOBAL NOTION OF CONTRLLED VALVE STATE PROVIDED HERE
// True iff the valve(s) (if any) controlled by this unit are really open.
// This waits until, for example, an ACK where appropriate, or at least the command has been sent.
// This also implies open to DEFAULT_MIN_VALVE_PC_REALLY_OPEN or equivalent.
// Must be exectly one definition supplied at link time.
bool isControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    11ce:	08 95       	ret

000011d0 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    11d0:	10 92 65 01 	sts	0x0165, r1
  syncStateFHT8V = 0;
    11d4:	10 92 9a 01 	sts	0x019A, r1
  halfSecondsToNextFHT8VTX = 0;
    11d8:	10 92 66 01 	sts	0x0166, r1
  FHT8V_isValveOpen = false;
    11dc:	10 92 9b 01 	sts	0x019B, r1
  }
    11e0:	08 95       	ret

000011e2 <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns one housecode calling for heat heard since last call and clears, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    11e2:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11e4:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    11e6:	20 91 02 01 	lds	r18, 0x0102
    11ea:	30 91 03 01 	lds	r19, 0x0103
    lastCallForHeatHC = ~0;
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	90 93 03 01 	sts	0x0103, r25
    11f6:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11fa:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    11fc:	c9 01       	movw	r24, r18
    11fe:	08 95       	ret

00001200 <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    1200:	88 23       	and	r24, r24
    1202:	21 f4       	brne	.+8      	; 0x120c <StopEavesdropOnFHT8V(bool)+0xc>
    1204:	80 91 32 01 	lds	r24, 0x0132
    1208:	88 23       	and	r24, r24
    120a:	21 f0       	breq	.+8      	; 0x1214 <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    120c:	10 92 32 01 	sts	0x0132, r1
  RFM22ModeStandbyAndClearState();
    1210:	0e 94 83 12 	call	0x2506	; 0x2506 <RFM22ModeStandbyAndClearState()>
    1214:	08 95       	ret

00001216 <_SetupRFM22ToEavesdropOnFHT8V()>:
// Must be written/read under a lock if any chance of access from ISR.
static volatile uint16_t lastCallForHeatHC = ~0;

static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    1216:	0e 94 83 12 	call	0x2506	; 0x2506 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    121a:	8e e2       	ldi	r24, 0x2E	; 46
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	0e 94 79 11 	call	0x22f2	; 0x22f2 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    1224:	08 95       	ret

00001226 <SetupToEavesdropOnFHT8V(bool)>:
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
void SetupToEavesdropOnFHT8V(bool force)
  {
  if(!force && eavesdropping) { return; } // Already eavesdropping.
    1226:	88 23       	and	r24, r24
    1228:	21 f4       	brne	.+8      	; 0x1232 <SetupToEavesdropOnFHT8V(bool)+0xc>
    122a:	80 91 32 01 	lds	r24, 0x0132
    122e:	88 23       	and	r24, r24
    1230:	29 f4       	brne	.+10     	; 0x123c <SetupToEavesdropOnFHT8V(bool)+0x16>
  eavesdropping = true;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 32 01 	sts	0x0132, r24
  _SetupRFM22ToEavesdropOnFHT8V();
    1238:	0e 94 0b 09 	call	0x1216	; 0x1216 <_SetupRFM22ToEavesdropOnFHT8V()>
    123c:	08 95       	ret

0000123e <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    1244:	28 81       	ld	r18, Y
    1246:	39 81       	ldd	r19, Y+1	; 0x01
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	82 17       	cp	r24, r18
    124e:	93 07       	cpc	r25, r19
    1250:	10 f4       	brcc	.+4      	; 0x1256 <readOneBit(decode_state_t*)+0x18>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	88 23       	and	r24, r24
    125a:	09 f0       	breq	.+2      	; 0x125e <readOneBit(decode_state_t*)+0x20>
    125c:	7e c0       	rjmp	.+252    	; 0x135a <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	88 23       	and	r24, r24
    1262:	11 f4       	brne	.+4      	; 0x1268 <readOneBit(decode_state_t*)+0x2a>
    1264:	80 ec       	ldi	r24, 0xC0	; 192
    1266:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	80 3c       	cpi	r24, 0xC0	; 192
    126c:	41 f0       	breq	.+16     	; 0x127e <readOneBit(decode_state_t*)+0x40>
    126e:	80 33       	cpi	r24, 0x30	; 48
    1270:	31 f0       	breq	.+12     	; 0x127e <readOneBit(decode_state_t*)+0x40>
    1272:	8c 30       	cpi	r24, 0x0C	; 12
    1274:	21 f0       	breq	.+8      	; 0x127e <readOneBit(decode_state_t*)+0x40>
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	11 f0       	breq	.+4      	; 0x127e <readOneBit(decode_state_t*)+0x40>
    127a:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	e8 81       	ld	r30, Y
    1286:	f9 81       	ldd	r31, Y+1	; 0x01
    1288:	80 81       	ld	r24, Z
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	82 23       	and	r24, r18
    128e:	93 23       	and	r25, r19
    1290:	28 17       	cp	r18, r24
    1292:	39 07       	cpc	r19, r25
    1294:	09 f0       	breq	.+2      	; 0x1298 <readOneBit(decode_state_t*)+0x5a>
    1296:	51 c0       	rjmp	.+162    	; 0x133a <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1298:	c9 01       	movw	r24, r18
    129a:	95 95       	asr	r25
    129c:	87 95       	ror	r24
    129e:	95 95       	asr	r25
    12a0:	87 95       	ror	r24
    12a2:	8c 83       	std	Y+4, r24	; 0x04
    12a4:	88 23       	and	r24, r24
    12a6:	61 f4       	brne	.+24     	; 0x12c0 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    12a8:	80 ec       	ldi	r24, 0xC0	; 192
    12aa:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    12ac:	9f 01       	movw	r18, r30
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	39 83       	std	Y+1, r19	; 0x01
    12b4:	28 83       	st	Y, r18
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	82 17       	cp	r24, r18
    12bc:	93 07       	cpc	r25, r19
    12be:	e8 f1       	brcs	.+122    	; 0x133a <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    12c2:	e8 81       	ld	r30, Y
    12c4:	f9 81       	ldd	r31, Y+1	; 0x01
    12c6:	20 81       	ld	r18, Z
    12c8:	28 23       	and	r18, r24
    12ca:	28 30       	cpi	r18, 0x08	; 8
    12cc:	c1 f0       	breq	.+48     	; 0x12fe <readOneBit(decode_state_t*)+0xc0>
    12ce:	29 30       	cpi	r18, 0x09	; 9
    12d0:	28 f4       	brcc	.+10     	; 0x12dc <readOneBit(decode_state_t*)+0x9e>
    12d2:	22 23       	and	r18, r18
    12d4:	41 f0       	breq	.+16     	; 0x12e6 <readOneBit(decode_state_t*)+0xa8>
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	81 f5       	brne	.+96     	; 0x133a <readOneBit(decode_state_t*)+0xfc>
    12da:	11 c0       	rjmp	.+34     	; 0x12fe <readOneBit(decode_state_t*)+0xc0>
    12dc:	20 32       	cpi	r18, 0x20	; 32
    12de:	79 f0       	breq	.+30     	; 0x12fe <readOneBit(decode_state_t*)+0xc0>
    12e0:	20 38       	cpi	r18, 0x80	; 128
    12e2:	59 f5       	brne	.+86     	; 0x133a <readOneBit(decode_state_t*)+0xfc>
    12e4:	0c c0       	rjmp	.+24     	; 0x12fe <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	95 95       	asr	r25
    12ea:	87 95       	ror	r24
    12ec:	95 95       	asr	r25
    12ee:	87 95       	ror	r24
    12f0:	8c 83       	std	Y+4, r24	; 0x04
    12f2:	88 23       	and	r24, r24
    12f4:	91 f5       	brne	.+100    	; 0x135a <readOneBit(decode_state_t*)+0x11c>
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	f9 83       	std	Y+1, r31	; 0x01
    12fa:	e8 83       	st	Y, r30
    12fc:	2f c0       	rjmp	.+94     	; 0x135c <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	95 95       	asr	r25
    1302:	87 95       	ror	r24
    1304:	95 95       	asr	r25
    1306:	87 95       	ror	r24
    1308:	8c 83       	std	Y+4, r24	; 0x04
    130a:	88 23       	and	r24, r24
    130c:	61 f4       	brne	.+24     	; 0x1326 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1312:	88 81       	ld	r24, Y
    1314:	99 81       	ldd	r25, Y+1	; 0x01
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	99 83       	std	Y+1, r25	; 0x01
    131a:	88 83       	st	Y, r24
    131c:	2a 81       	ldd	r18, Y+2	; 0x02
    131e:	3b 81       	ldd	r19, Y+3	; 0x03
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	50 f0       	brcs	.+20     	; 0x133a <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	e8 81       	ld	r30, Y
    132a:	f9 81       	ldd	r31, Y+1	; 0x01
    132c:	80 81       	ld	r24, Z
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	82 23       	and	r24, r18
    1334:	93 23       	and	r25, r19
    1336:	89 2b       	or	r24, r25
    1338:	19 f0       	breq	.+6      	; 0x1340 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	8d 83       	std	Y+5, r24	; 0x05
    133e:	0d c0       	rjmp	.+26     	; 0x135a <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1340:	c9 01       	movw	r24, r18
    1342:	95 95       	asr	r25
    1344:	87 95       	ror	r24
    1346:	95 95       	asr	r25
    1348:	87 95       	ror	r24
    134a:	8c 83       	std	Y+4, r24	; 0x04
    134c:	88 23       	and	r24, r24
    134e:	19 f4       	brne	.+6      	; 0x1356 <readOneBit(decode_state_t*)+0x118>
    1350:	31 96       	adiw	r30, 0x01	; 1
    1352:	f9 83       	std	Y+1, r31	; 0x01
    1354:	e8 83       	st	Y, r30
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	01 c0       	rjmp	.+2      	; 0x135c <readOneBit(decode_state_t*)+0x11e>
    135a:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1370:	fc 01       	movw	r30, r24
    1372:	85 81       	ldd	r24, Z+5	; 0x05
    1374:	88 23       	and	r24, r24
    1376:	11 f0       	breq	.+4      	; 0x137c <readOneByteWithParity(decode_state_t*)+0x1a>
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    137c:	c7 01       	movw	r24, r14
    137e:	0e 94 1f 09 	call	0x123e	; 0x123e <readOneBit(decode_state_t*)>
    1382:	18 2f       	mov	r17, r24
    1384:	08 2f       	mov	r16, r24
    1386:	c7 e0       	ldi	r28, 0x07	; 7
    1388:	d0 e0       	ldi	r29, 0x00	; 0
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    138c:	c7 01       	movw	r24, r14
    138e:	0e 94 1f 09 	call	0x123e	; 0x123e <readOneBit(decode_state_t*)>
    parity ^= bit;
    1392:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    1394:	11 0f       	add	r17, r17
    1396:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    1398:	21 97       	sbiw	r28, 0x01	; 1
    139a:	ff ef       	ldi	r31, 0xFF	; 255
    139c:	cf 3f       	cpi	r28, 0xFF	; 255
    139e:	df 07       	cpc	r29, r31
    13a0:	a9 f7       	brne	.-22     	; 0x138c <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    13a2:	c7 01       	movw	r24, r14
    13a4:	0e 94 1f 09 	call	0x123e	; 0x123e <readOneBit(decode_state_t*)>
    13a8:	08 17       	cp	r16, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	f7 01       	movw	r30, r14
    13b0:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    13b2:	81 2f       	mov	r24, r17
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	08 95       	ret

000013c2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
bool FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    13e0:	7c 83       	std	Y+4, r23	; 0x04
    13e2:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    13e4:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    13e6:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(false); } }
    13e8:	7e 01       	movw	r14, r28
    13ea:	08 94       	sec
    13ec:	e1 1c       	adc	r14, r1
    13ee:	f1 1c       	adc	r15, r1
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	88 23       	and	r24, r24
    13f6:	c9 f5       	brne	.+114    	; 0x146a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
    13f8:	c7 01       	movw	r24, r14
    13fa:	0e 94 1f 09 	call	0x123e	; 0x123e <readOneBit(decode_state_t*)>
    13fe:	88 23       	and	r24, r24
    1400:	c1 f3       	breq	.-16     	; 0x13f2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    1402:	c7 01       	movw	r24, r14
    1404:	0e 94 b1 09 	call	0x1362	; 0x1362 <readOneByteWithParity(decode_state_t*)>
    1408:	f8 01       	movw	r30, r16
    140a:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    140c:	c7 01       	movw	r24, r14
    140e:	0e 94 b1 09 	call	0x1362	; 0x1362 <readOneByteWithParity(decode_state_t*)>
    1412:	f8 01       	movw	r30, r16
    1414:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    1416:	c7 01       	movw	r24, r14
    1418:	0e 94 b1 09 	call	0x1362	; 0x1362 <readOneByteWithParity(decode_state_t*)>
    141c:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    141e:	c7 01       	movw	r24, r14
    1420:	0e 94 b1 09 	call	0x1362	; 0x1362 <readOneByteWithParity(decode_state_t*)>
    1424:	f8 01       	movw	r30, r16
    1426:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    1428:	c7 01       	movw	r24, r14
    142a:	0e 94 b1 09 	call	0x1362	; 0x1362 <readOneByteWithParity(decode_state_t*)>
    142e:	f8 01       	movw	r30, r16
    1430:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    1432:	c7 01       	movw	r24, r14
    1434:	0e 94 b1 09 	call	0x1362	; 0x1362 <readOneByteWithParity(decode_state_t*)>
    1438:	28 2f       	mov	r18, r24
  if(state.failed)
    143a:	8e 81       	ldd	r24, Y+6	; 0x06
    143c:	88 23       	and	r24, r24
    143e:	a9 f4       	brne	.+42     	; 0x146a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    1440:	f8 01       	movw	r30, r16
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	89 0f       	add	r24, r25
    1448:	84 5f       	subi	r24, 0xF4	; 244
    144a:	92 81       	ldd	r25, Z+2	; 0x02
    144c:	89 0f       	add	r24, r25
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	89 0f       	add	r24, r25
    1452:	8d 0d       	add	r24, r13
    1454:	82 17       	cp	r24, r18
    1456:	49 f4       	brne	.+18     	; 0x146a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#endif
    state.failed = true; return(false);
    }

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state)) { state.failed = true; return(false); }
    1458:	c7 01       	movw	r24, r14
    145a:	0e 94 1f 09 	call	0x123e	; 0x123e <readOneBit(decode_state_t*)>
    145e:	88 23       	and	r24, r24
    1460:	21 f4       	brne	.+8      	; 0x146a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>

  return(!state.failed);
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	98 27       	eor	r25, r24
    1468:	01 c0       	rjmp	.+2      	; 0x146c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xaa>
    146a:	90 e0       	ldi	r25, 0x00	; 0
  }
    146c:	89 2f       	mov	r24, r25
    146e:	26 96       	adiw	r28, 0x06	; 6
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	08 95       	ret

0000148a <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <FHT8VCallForHeatPoll()+0xa>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <FHT8VCallForHeatPoll()+0xc>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    149a:	80 91 32 01 	lds	r24, 0x0132
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <FHT8VCallForHeatPoll()+0x1a>
    14a2:	57 c0       	rjmp	.+174    	; 0x1552 <FHT8VCallForHeatPoll()+0xc8>

#ifdef PIN_RFM_NIRQ
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    14a4:	19 99       	sbic	0x03, 1	; 3
    14a6:	55 c0       	rjmp	.+170    	; 0x1552 <FHT8VCallForHeatPoll()+0xc8>

// Returns true if there is a pending accepted call for heat.
// If so a non-~0 housecode will be returned by FHT8VCallForHeatHeardGetAndClear().
bool FHT8VCallForHeatHeard()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    14a8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14aa:	f8 94       	cli
    { return(lastCallForHeatHC != (uint16_t)~0); }
    14ac:	80 91 02 01 	lds	r24, 0x0102
    14b0:	90 91 03 01 	lds	r25, 0x0103
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14b4:	2f bf       	out	0x3f, r18	; 63
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
#endif

  // Do nothing once call for heat has been collected and is pending action.
  if(FHT8VCallForHeatHeard()) { return(false); }
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	09 f0       	breq	.+2      	; 0x14be <FHT8VCallForHeatPoll()+0x34>
    14bc:	4a c0       	rjmp	.+148    	; 0x1552 <FHT8VCallForHeatPoll()+0xc8>

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    14be:	0e 94 5e 12 	call	0x24bc	; 0x24bc <RFM22ReadStatusBoth()>

  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    14c2:	94 ff       	sbrs	r25, 4
    14c4:	48 c0       	rjmp	.+144    	; 0x1556 <FHT8VCallForHeatPoll()+0xcc>
    14c6:	e5 e6       	ldi	r30, 0x65	; 101
    14c8:	f1 e0       	ldi	r31, 0x01	; 1
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <FHT8VCallForHeatPoll()+0x44>
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
      { *p = 0; }
    14cc:	10 82       	st	Z, r1
  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	e2 33       	cpi	r30, 0x32	; 50
    14d4:	f8 07       	cpc	r31, r24
    14d6:	d1 f7       	brne	.-12     	; 0x14cc <FHT8VCallForHeatPoll()+0x42>
      { *p = 0; }
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    14d8:	8f 01       	movw	r16, r30
    14da:	0f 5f       	subi	r16, 0xFF	; 255
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	c8 01       	movw	r24, r16
    14e0:	62 e3       	ldi	r22, 0x32	; 50
    14e2:	0e 94 11 11 	call	0x2222	; 0x2222 <RFM22RXFIFO(unsigned char*, unsigned char)>
    14e6:	f8 01       	movw	r30, r16
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
      {
      if(0xcc != FHT8VRXHubArea[pos])
    14ea:	80 81       	ld	r24, Z
    14ec:	8c 3c       	cpi	r24, 0xCC	; 204
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <FHT8VCallForHeatPoll()+0x6c>
        {
        if(pos < 2)
    14f0:	92 30       	cpi	r25, 0x02	; 2
    14f2:	28 f4       	brcc	.+10     	; 0x14fe <FHT8VCallForHeatPoll()+0x74>
    14f4:	2c c0       	rjmp	.+88     	; 0x154e <FHT8VCallForHeatPoll()+0xc4>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	31 96       	adiw	r30, 0x01	; 1
    14fa:	96 30       	cpi	r25, 0x06	; 6
    14fc:	b1 f7       	brne	.-20     	; 0x14ea <FHT8VCallForHeatPoll()+0x60>
          }
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    const bool decoded = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1, &command);
    14fe:	89 2f       	mov	r24, r25
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	8d 5c       	subi	r24, 0xCD	; 205
    1504:	9e 4f       	sbci	r25, 0xFE	; 254
    1506:	64 e6       	ldi	r22, 0x64	; 100
    1508:	71 e0       	ldi	r23, 0x01	; 1
    150a:	ae 01       	movw	r20, r28
    150c:	4f 5f       	subi	r20, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    if(decoded)
    1514:	88 23       	and	r24, r24
    1516:	b9 f0       	breq	.+46     	; 0x1546 <FHT8VCallForHeatPoll()+0xbc>
      DEBUG_SERIAL_PRINT_FLASHSTRING(" ext ");
      DEBUG_SERIAL_PRINT(command.extension);
      DEBUG_SERIAL_PRINTLN();
#endif
      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= getMinValvePcReallyOpen()))
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	86 32       	cpi	r24, 0x26	; 38
    151c:	11 f5       	brne	.+68     	; 0x1562 <FHT8VCallForHeatPoll()+0xd8>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	8a 30       	cpi	r24, 0x0A	; 10
    1522:	f8 f0       	brcs	.+62     	; 0x1562 <FHT8VCallForHeatPoll()+0xd8>
        {
        const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    1524:	99 81       	ldd	r25, Y+1	; 0x01
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	2a 81       	ldd	r18, Y+2	; 0x02
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	82 2b       	or	r24, r18
    152e:	93 2b       	or	r25, r19
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1530:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1532:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1534:	90 93 03 01 	sts	0x0103, r25
    1538:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    153c:	2f bf       	out	0x3f, r18	; 63
          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0e 94 00 09 	call	0x1200	; 0x1200 <StopEavesdropOnFHT8V(bool)>
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <FHT8VCallForHeatPoll()+0xd8>
      return(true); // Got a valid frame.
      }
    else
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bad RX frame");
    1546:	8a ec       	ldi	r24, 0xCA	; 202
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    154e:	0e 94 0b 09 	call	0x1216	; 0x1216 <_SetupRFM22ToEavesdropOnFHT8V()>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <FHT8VCallForHeatPoll()+0xda>
//  else if(status & 0x80) // Got sync from incoming FHT8V message.
//    { 
////    syncSeen = true;
//    return(true);
//    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1556:	97 ff       	sbrs	r25, 7
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <FHT8VCallForHeatPoll()+0xd6>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
    155a:	8a eb       	ldi	r24, 0xBA	; 186
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	f5 cf       	rjmp	.-22     	; 0x154a <FHT8VCallForHeatPoll()+0xc0>
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <FHT8VCallForHeatPoll()+0xda>
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false);
    }
  }
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <FHT8VCreateValveSetCmdFrame()>:

// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <FHT8VCreateValveSetCmdFrame()+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <FHT8VCreateValveSetCmdFrame()+0x8>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1582:	f9 99       	sbic	0x1f, 1	; 31
    1584:	fe cf       	rjmp	.-4      	; 0x1582 <FHT8VCreateValveSetCmdFrame()+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1586:	80 e1       	ldi	r24, 0x10	; 16
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	92 bd       	out	0x22, r25	; 34
    158c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    158e:	f8 9a       	sbi	0x1f, 0	; 31
    1590:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1592:	f9 99       	sbic	0x1f, 1	; 31
    1594:	fe cf       	rjmp	.-4      	; 0x1592 <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1596:	81 e1       	ldi	r24, 0x11	; 17
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	92 bd       	out	0x22, r25	; 34
    159c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    159e:	f8 9a       	sbi	0x1f, 0	; 31
    15a0:	80 b5       	in	r24, 0x20	; 32
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    15a2:	8a 83       	std	Y+2, r24	; 0x02
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    15a4:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif
  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
    15a6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    15aa:	48 2f       	mov	r20, r24
    15ac:	87 e6       	ldi	r24, 0x67	; 103
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	be 01       	movw	r22, r28
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	0e 94 a5 08 	call	0x114a	; 0x114a <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
// The trailing 0xff is not sent.
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// TODO: in RX-on/HUB mode, this has to turn RX off (noting anything received) before TX, and restore RX after (rather than standby).
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    15d4:	88 81       	ld	r24, Y
    15d6:	8f 3f       	cpi	r24, 0xFF	; 255
    15d8:	41 f1       	breq	.+80     	; 0x162a <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    15da:	88 23       	and	r24, r24
    15dc:	31 f4       	brne	.+12     	; 0x15ea <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    15de:	87 ed       	ldi	r24, 0xD7	; 215
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    15e6:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    15ea:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getMinBoilerOnMinutes()>
    15ee:	18 2f       	mov	r17, r24
    15f0:	88 23       	and	r24, r24
    15f2:	19 f0       	breq	.+6      	; 0x15fa <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    15f4:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    15f6:	0e 94 45 0a 	call	0x148a	; 0x148a <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	0e 94 00 09 	call	0x1200	; 0x1200 <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!
    1606:	0e 94 cb 12 	call	0x2596	; 0x2596 <RFM22TXFIFO()>

  if(doubleTX)
    160a:	00 23       	and	r16, r16
    160c:	31 f0       	breq	.+12     	; 0x161a <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    160e:	8d e3       	ldi	r24, 0x3D	; 61
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    RFM22TXFIFO(); // Re-send it!
    1616:	0e 94 cb 12 	call	0x2596	; 0x2596 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    161a:	11 23       	and	r17, r17
    161c:	21 f0       	breq	.+8      	; 0x1626 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 13 09 	call	0x1226	; 0x1226 <SetupToEavesdropOnFHT8V(bool)>
    1624:	02 c0       	rjmp	.+4      	; 0x162a <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    1626:	0e 94 83 12 	call	0x2506	; 0x2506 <RFM22ModeStandbyAndClearState()>
  }
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <FHT8VDoSafeExtraTXToHub()>:
// Returns true iff a TX was done.
// This may also be omitted if the TX would not be heard by the hub anyway.
bool FHT8VDoSafeExtraTXToHub()
  {
  // Do nothing until in sync.
  if(!syncedWithFHT8V) { return(false); }
    1634:	80 91 65 01 	lds	r24, 0x0165
    1638:	88 23       	and	r24, r24
    163a:	81 f0       	breq	.+32     	; 0x165c <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do nothing if too close to (within maybe 10s of) the start or finish of a ~2m TX cycle
  // (which might cause FHT8V to latch onto the wrong, extra, TX).
  if((halfSecondsToNextFHT8VTX < 20) || (halfSecondsToNextFHT8VTX > 210)) { return(false); }
    163c:	80 91 66 01 	lds	r24, 0x0166
    1640:	84 51       	subi	r24, 0x14	; 20
    1642:	8f 3b       	cpi	r24, 0xBF	; 191
    1644:	58 f4       	brcc	.+22     	; 0x165c <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do nothing if we would not send something that the hub would hear anyway.
  if(getTRVPercentOpen() < getMinValvePcReallyOpen()) { return(false); }
    1646:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    164a:	8a 30       	cpi	r24, 0x0A	; 10
    164c:	38 f0       	brcs	.+14     	; 0x165c <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do (single) TX.
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, false);
    164e:	87 e6       	ldi	r24, 0x67	; 103
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	08 95       	ret
  // Done it.
  return(true);
    165c:	80 e0       	ldi	r24, 0x00	; 0
  }
    165e:	08 95       	ret

00001660 <valveSettingTX(bool)>:
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
  }

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    1660:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    1662:	87 e6       	ldi	r24, 0x67	; 103
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (getTRVPercentOpen() >= getMinValvePcReallyOpen()); }
    166a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    166e:	10 92 9b 01 	sts	0x019B, r1
    1672:	8a 30       	cpi	r24, 0x0A	; 10
    1674:	18 f0       	brcs	.+6      	; 0x167c <valveSettingTX(bool)+0x1c>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 9b 01 	sts	0x019B, r24
    167c:	08 95       	ret

0000167e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    1694:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getMinBoilerOnMinutes()>
    1698:	88 2e       	mov	r8, r24
    169a:	88 23       	and	r24, r24
    169c:	a9 f1       	breq	.+106    	; 0x1708 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    169e:	88 24       	eor	r8, r8
    16a0:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    16a2:	89 2d       	mov	r24, r9
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	5c 01       	movw	r10, r24
    16a8:	cc 24       	eor	r12, r12
    16aa:	b7 fc       	sbrc	r11, 7
    16ac:	c0 94       	com	r12
    16ae:	dc 2c       	mov	r13, r12
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
    16be:	60 91 b2 00 	lds	r22, 0x00B2
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	69 5f       	subi	r22, 0xF9	; 249
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	88 27       	eor	r24, r24
    16ca:	77 fd       	sbrc	r23, 7
    16cc:	80 95       	com	r24
    16ce:	98 2f       	mov	r25, r24
    16d0:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <__floatsisf>
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	53 e4       	ldi	r21, 0x43	; 67
    16dc:	0e 94 0b 2b 	call	0x5616	; 0x5616 <fmax>
    16e0:	7b 01       	movw	r14, r22
    16e2:	8c 01       	movw	r16, r24
    16e4:	c6 01       	movw	r24, r12
    16e6:	b5 01       	movw	r22, r10
    16e8:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <__floatsisf>
    16ec:	a8 01       	movw	r20, r16
    16ee:	97 01       	movw	r18, r14
    16f0:	0e 94 77 2b 	call	0x56ee	; 0x56ee <__gesf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	ec f2       	brlt	.-70     	; 0x16b2 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    1700:	80 91 b2 00 	lds	r24, 0x00B2
    1704:	89 15       	cp	r24, r9
    1706:	c8 f3       	brcs	.-14     	; 0x16fa <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    1708:	89 2d       	mov	r24, r9
    170a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    170e:	88 20       	and	r8, r8
    1710:	11 f0       	breq	.+4      	; 0x1716 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    1712:	0e 94 45 0a 	call	0x148a	; 0x148a <FHT8VCallForHeatPoll()>
#endif
    }
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	08 95       	ret

0000172c <doSync(bool)>:

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    172c:	1f 93       	push	r17
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <doSync(bool)+0x8>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <doSync(bool)+0xa>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	18 2f       	mov	r17, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    173c:	f9 99       	sbic	0x1f, 1	; 31
    173e:	fe cf       	rjmp	.-4      	; 0x173c <doSync(bool)+0x10>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1740:	80 e1       	ldi	r24, 0x10	; 16
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	92 bd       	out	0x22, r25	; 34
    1746:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1748:	f8 9a       	sbi	0x1f, 0	; 31
    174a:	80 b5       	in	r24, 0x20	; 32
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    174c:	84 36       	cpi	r24, 0x64	; 100
    174e:	58 f4       	brcc	.+22     	; 0x1766 <doSync(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1750:	f9 99       	sbic	0x1f, 1	; 31
    1752:	fe cf       	rjmp	.-4      	; 0x1750 <doSync(bool)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1754:	81 e1       	ldi	r24, 0x11	; 17
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	92 bd       	out	0x22, r25	; 34
    175a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    175c:	f8 9a       	sbi	0x1f, 0	; 31
    175e:	80 b5       	in	r24, 0x20	; 32
    1760:	84 36       	cpi	r24, 0x64	; 100
    1762:	08 f4       	brcc	.+2      	; 0x1766 <doSync(bool)+0x3a>
    1764:	af c0       	rjmp	.+350    	; 0x18c4 <doSync(bool)+0x198>
    { syncedWithFHT8V = false; return(false); }
    1766:	10 92 65 01 	sts	0x0165, r1
    176a:	a1 c0       	rjmp	.+322    	; 0x18ae <doSync(bool)+0x182>

  if(0 == syncStateFHT8V)
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    176c:	81 ef       	ldi	r24, 0xF1	; 241
    176e:	80 93 9a 01 	sts	0x019A, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1772:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	0e 94 65 15 	call	0x2aca	; 0x2aca <serialPrintAndFlush(char)>
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    177c:	88 e3       	ldi	r24, 0x38	; 56
    177e:	91 e0       	ldi	r25, 0x01	; 1
    1780:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    1784:	20 91 9a 01 	lds	r18, 0x019A
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	08 f4       	brcc	.+2      	; 0x178e <doSync(bool)+0x62>
    178c:	45 c0       	rjmp	.+138    	; 0x1818 <doSync(bool)+0xec>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    178e:	20 ff       	sbrs	r18, 0
    1790:	2b c0       	rjmp	.+86     	; 0x17e8 <doSync(bool)+0xbc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1792:	f9 99       	sbic	0x1f, 1	; 31
    1794:	fe cf       	rjmp	.-4      	; 0x1792 <doSync(bool)+0x66>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1796:	80 e1       	ldi	r24, 0x10	; 16
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	92 bd       	out	0x22, r25	; 34
    179c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    179e:	f8 9a       	sbi	0x1f, 0	; 31
    17a0:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17a2:	f9 99       	sbic	0x1f, 1	; 31
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <doSync(bool)+0x76>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17a6:	81 e1       	ldi	r24, 0x11	; 17
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	92 bd       	out	0x22, r25	; 34
    17ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17ae:	f8 9a       	sbi	0x1f, 0	; 31
    17b0:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    17b2:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    17b4:	8c e2       	ldi	r24, 0x2C	; 44
    17b6:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    17b8:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    17ba:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    17bc:	87 e6       	ldi	r24, 0x67	; 103
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    17ca:	80 91 99 01 	lds	r24, 0x0199
    17ce:	88 23       	and	r24, r24
    17d0:	31 f0       	breq	.+12     	; 0x17de <doSync(bool)+0xb2>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    17d2:	82 95       	swap	r24
    17d4:	88 0f       	add	r24, r24
    17d6:	88 0f       	add	r24, r24
    17d8:	80 7c       	andi	r24, 0xC0	; 192
    17da:	0e 94 3f 0b 	call	0x167e	; 0x167e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    17de:	87 e6       	ldi	r24, 0x67	; 103
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	61 2f       	mov	r22, r17
    17e4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    17e8:	80 91 9a 01 	lds	r24, 0x019A
    17ec:	81 50       	subi	r24, 0x01	; 1
    17ee:	80 93 9a 01 	sts	0x019A, r24
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <doSync(bool)+0xcc>
    17f6:	5d c0       	rjmp	.+186    	; 0x18b2 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17f8:	f9 99       	sbic	0x1f, 1	; 31
    17fa:	fe cf       	rjmp	.-4      	; 0x17f8 <doSync(bool)+0xcc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17fc:	81 e1       	ldi	r24, 0x11	; 17
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	92 bd       	out	0x22, r25	; 34
    1802:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1804:	f8 9a       	sbi	0x1f, 0	; 31
    1806:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    1808:	80 91 99 01 	lds	r24, 0x0199
    180c:	8b 5f       	subi	r24, 0xFB	; 251
    180e:	97 70       	andi	r25, 0x07	; 7
    1810:	89 0f       	add	r24, r25
    1812:	80 93 66 01 	sts	0x0166, r24
    1816:	4b c0       	rjmp	.+150    	; 0x18ae <doSync(bool)+0x182>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    1818:	80 91 66 01 	lds	r24, 0x0166
    181c:	81 50       	subi	r24, 0x01	; 1
    181e:	80 93 66 01 	sts	0x0166, r24
    1822:	88 23       	and	r24, r24
    1824:	09 f0       	breq	.+2      	; 0x1828 <doSync(bool)+0xfc>
    1826:	45 c0       	rjmp	.+138    	; 0x18b2 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1828:	f9 99       	sbic	0x1f, 1	; 31
    182a:	fe cf       	rjmp	.-4      	; 0x1828 <doSync(bool)+0xfc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    182c:	80 e1       	ldi	r24, 0x10	; 16
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	92 bd       	out	0x22, r25	; 34
    1832:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1834:	f8 9a       	sbi	0x1f, 0	; 31
    1836:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1838:	f9 99       	sbic	0x1f, 1	; 31
    183a:	fe cf       	rjmp	.-4      	; 0x1838 <doSync(bool)+0x10c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    183c:	81 e1       	ldi	r24, 0x11	; 17
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	92 bd       	out	0x22, r25	; 34
    1842:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1844:	f8 9a       	sbi	0x1f, 0	; 31
    1846:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    1848:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    184a:	80 e2       	ldi	r24, 0x20	; 32
    184c:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    184e:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    1850:	10 92 9b 01 	sts	0x019B, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    1854:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    1856:	87 e6       	ldi	r24, 0x67	; 103
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    1864:	80 91 99 01 	lds	r24, 0x0199
    1868:	88 23       	and	r24, r24
    186a:	31 f0       	breq	.+12     	; 0x1878 <doSync(bool)+0x14c>
    186c:	82 95       	swap	r24
    186e:	88 0f       	add	r24, r24
    1870:	88 0f       	add	r24, r24
    1872:	80 7c       	andi	r24, 0xC0	; 192
    1874:	0e 94 3f 0b 	call	0x167e	; 0x167e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    1878:	87 e6       	ldi	r24, 0x67	; 103
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	61 2f       	mov	r22, r17
    187e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
    1882:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    1886:	80 e2       	ldi	r24, 0x20	; 32
    1888:	0e 94 65 15 	call	0x2aca	; 0x2aca <serialPrintAndFlush(char)>
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    188c:	87 e2       	ldi	r24, 0x27	; 39
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 65 01 	sts	0x0165, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    189a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    189e:	90 91 99 01 	lds	r25, 0x0199
    18a2:	9d 51       	subi	r25, 0x1D	; 29
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	87 70       	andi	r24, 0x07	; 7
    18a8:	98 0f       	add	r25, r24
    18aa:	90 93 66 01 	sts	0x0166, r25
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <doSync(bool)+0x188>
      return(false);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	1f 91       	pop	r17
    18c2:	08 95       	ret
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    { syncedWithFHT8V = false; return(false); }

  if(0 == syncStateFHT8V)
    18c4:	80 91 9a 01 	lds	r24, 0x019A
    18c8:	88 23       	and	r24, r24
    18ca:	09 f0       	breq	.+2      	; 0x18ce <doSync(bool)+0x1a2>
    18cc:	5b cf       	rjmp	.-330    	; 0x1784 <doSync(bool)+0x58>
    18ce:	4e cf       	rjmp	.-356    	; 0x176c <doSync(bool)+0x40>

000018d0 <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    18d0:	1f 93       	push	r17
    18d2:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
    18d4:	10 92 99 01 	sts	0x0199, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    18d8:	80 91 65 01 	lds	r24, 0x0165
    18dc:	88 23       	and	r24, r24
    18de:	21 f4       	brne	.+8      	; 0x18e8 <FHT8VPollSyncAndTX_First(bool)+0x18>
    18e0:	81 2f       	mov	r24, r17
    18e2:	0e 94 96 0b 	call	0x172c	; 0x172c <doSync(bool)>
    18e6:	30 c0       	rjmp	.+96     	; 0x1948 <FHT8VPollSyncAndTX_First(bool)+0x78>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
    18e8:	80 91 66 01 	lds	r24, 0x0166
    18ec:	88 23       	and	r24, r24
    18ee:	31 f4       	brne	.+12     	; 0x18fc <FHT8VPollSyncAndTX_First(bool)+0x2c>
    18f0:	8f e4       	ldi	r24, 0x4F	; 79
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    18f8:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    18fc:	80 91 66 01 	lds	r24, 0x0166
    1900:	85 30       	cpi	r24, 0x05	; 5
    1902:	10 f0       	brcs	.+4      	; 0x1908 <FHT8VPollSyncAndTX_First(bool)+0x38>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    1904:	84 50       	subi	r24, 0x04	; 4
    1906:	1d c0       	rjmp	.+58     	; 0x1942 <FHT8VPollSyncAndTX_First(bool)+0x72>
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    1908:	81 50       	subi	r24, 0x01	; 1
    190a:	80 93 66 01 	sts	0x0166, r24
    190e:	88 23       	and	r24, r24
    1910:	11 f0       	breq	.+4      	; 0x1916 <FHT8VPollSyncAndTX_First(bool)+0x46>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	19 c0       	rjmp	.+50     	; 0x1948 <FHT8VPollSyncAndTX_First(bool)+0x78>
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    1916:	81 2f       	mov	r24, r17
    1918:	0e 94 30 0b 	call	0x1660	; 0x1660 <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    191c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1920:	80 e2       	ldi	r24, 0x20	; 32
    1922:	0e 94 65 15 	call	0x2aca	; 0x2aca <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    1926:	86 e4       	ldi	r24, 0x46	; 70
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    192e:	f9 99       	sbic	0x1f, 1	; 31
    1930:	fe cf       	rjmp	.-4      	; 0x192e <FHT8VPollSyncAndTX_First(bool)+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1932:	81 e1       	ldi	r24, 0x11	; 17
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	92 bd       	out	0x22, r25	; 34
    1938:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    193a:	f8 9a       	sbi	0x1f, 0	; 31
    193c:	80 b5       	in	r24, 0x20	; 32
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    193e:	87 70       	andi	r24, 0x07	; 7
    1940:	8d 51       	subi	r24, 0x1D	; 29
    1942:	80 93 66 01 	sts	0x0166, r24
    1946:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    1948:	1f 91       	pop	r17
    194a:	08 95       	ret

0000194c <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    194c:	1f 93       	push	r17
    194e:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    1950:	80 91 99 01 	lds	r24, 0x0199
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	80 93 99 01 	sts	0x0199, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	30 f0       	brcs	.+12     	; 0x196a <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    195e:	8c ef       	ldi	r24, 0xFC	; 252
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1966:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    196a:	80 91 65 01 	lds	r24, 0x0165
    196e:	88 23       	and	r24, r24
    1970:	21 f4       	brne	.+8      	; 0x197a <FHT8VPollSyncAndTX_Next(bool)+0x2e>
    1972:	81 2f       	mov	r24, r17
    1974:	0e 94 96 0b 	call	0x172c	; 0x172c <doSync(bool)>
    1978:	2d c0       	rjmp	.+90     	; 0x19d4 <FHT8VPollSyncAndTX_Next(bool)+0x88>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    197a:	80 91 66 01 	lds	r24, 0x0166
    197e:	81 50       	subi	r24, 0x01	; 1
    1980:	80 93 66 01 	sts	0x0166, r24
    1984:	88 23       	and	r24, r24
    1986:	11 f0       	breq	.+4      	; 0x198c <FHT8VPollSyncAndTX_Next(bool)+0x40>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	24 c0       	rjmp	.+72     	; 0x19d4 <FHT8VPollSyncAndTX_Next(bool)+0x88>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    198c:	80 91 99 01 	lds	r24, 0x0199
    1990:	82 95       	swap	r24
    1992:	88 0f       	add	r24, r24
    1994:	88 0f       	add	r24, r24
    1996:	80 7c       	andi	r24, 0xC0	; 192
    1998:	0e 94 3f 0b 	call	0x167e	; 0x167e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    199c:	81 2f       	mov	r24, r17
    199e:	0e 94 30 0b 	call	0x1660	; 0x1660 <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    19a2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    19a6:	80 e2       	ldi	r24, 0x20	; 32
    19a8:	0e 94 65 15 	call	0x2aca	; 0x2aca <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    19ac:	83 ef       	ldi	r24, 0xF3	; 243
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19b4:	f9 99       	sbic	0x1f, 1	; 31
    19b6:	fe cf       	rjmp	.-4      	; 0x19b4 <FHT8VPollSyncAndTX_Next(bool)+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    19b8:	81 e1       	ldi	r24, 0x11	; 17
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	92 bd       	out	0x22, r25	; 34
    19be:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19c0:	f8 9a       	sbi	0x1f, 0	; 31
    19c2:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    19c4:	80 91 99 01 	lds	r24, 0x0199
    19c8:	8d 51       	subi	r24, 0x1D	; 29
    19ca:	97 70       	andi	r25, 0x07	; 7
    19cc:	89 0f       	add	r24, r25
    19ce:	80 93 66 01 	sts	0x0166, r24
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    19d4:	1f 91       	pop	r17
    19d6:	08 95       	ret

000019d8 <FHT8VSetHC2(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    19d8:	68 2f       	mov	r22, r24
    19da:	81 e1       	ldi	r24, 0x11	; 17
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    19e2:	08 95       	ret

000019e4 <FHT8VSetHC1(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    19e4:	68 2f       	mov	r22, r24
    19e6:	80 e1       	ldi	r24, 0x10	; 16
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    19ee:	08 95       	ret

000019f0 <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    19f0:	80 e1       	ldi	r24, 0x10	; 16
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 94 07 	call	0xf28	; 0xf28 <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    19f8:	81 e1       	ldi	r24, 0x11	; 17
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 94 07 	call	0xf28	; 0xf28 <eeprom_smart_erase_byte(unsigned char*)>
  }
    1a00:	08 95       	ret

00001a02 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	2f 93       	push	r18
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    1a12:	80 91 a6 01 	lds	r24, 0x01A6
#if defined(TWO_S_TICK_RTC_SUPPORT)
  sTemp += 2;
    1a16:	8e 5f       	subi	r24, 0xFE	; 254
#else
  ++sTemp;
#endif
  if(sTemp > 59)
    1a18:	8c 33       	cpi	r24, 0x3C	; 60
    1a1a:	c8 f0       	brcs	.+50     	; 0x1a4e <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    1a1c:	80 91 a7 01 	lds	r24, 0x01A7
    1a20:	90 91 a8 01 	lds	r25, 0x01A8
    1a24:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    1a26:	25 e0       	ldi	r18, 0x05	; 5
    1a28:	80 3a       	cpi	r24, 0xA0	; 160
    1a2a:	92 07       	cpc	r25, r18
    1a2c:	58 f0       	brcs	.+22     	; 0x1a44 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    1a2e:	80 91 a9 01 	lds	r24, 0x01A9
    1a32:	90 91 aa 01 	lds	r25, 0x01AA
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	90 93 aa 01 	sts	0x01AA, r25
    1a3c:	80 93 a9 01 	sts	0x01A9, r24
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    1a44:	90 93 a8 01 	sts	0x01A8, r25
    1a48:	80 93 a7 01 	sts	0x01A7, r24
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    1a4e:	80 93 a6 01 	sts	0x01A6, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    1a52:	9f 91       	pop	r25
    1a54:	8f 91       	pop	r24
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    1a62:	1f 92       	push	r1
    1a64:	0f 92       	push	r0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	0f 92       	push	r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    1a7a:	88 e1       	ldi	r24, 0x18	; 24
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	80 93 60 00 	sts	0x0060, r24
    1a84:	10 92 60 00 	sts	0x0060, r1
    1a88:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  uint8_t x;
  _watchdogFired = (uint8_t) 0x80 | (uint8_t) (int) &x; // Ensure non-zero, retaining any entropy in ls bits.
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	80 68       	ori	r24, 0x80	; 128
    1a90:	80 93 9c 01 	sts	0x019C, r24
  }
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	0f 90       	pop	r0
    1aa4:	1f 90       	pop	r1
    1aa6:	18 95       	reti

00001aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    1aa8:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    1aaa:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    1aae:	28 e0       	ldi	r18, 0x08	; 8
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	40 93 61 00 	sts	0x0061, r20
    1abc:	20 93 61 00 	sts	0x0061, r18
    1ac0:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1ac2:	31 97       	sbiw	r30, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	90 70       	andi	r25, 0x00	; 0
    1acc:	20 e8       	ldi	r18, 0x80	; 128
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	20 93 61 00 	sts	0x0061, r18
    1ad6:	80 93 61 00 	sts	0x0061, r24
    1ada:	0f be       	out	0x3f, r0	; 63
  }
    1adc:	08 95       	ret

00001ade <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1ade:	83 b7       	in	r24, 0x33	; 51
    1ae0:	81 7f       	andi	r24, 0xF1	; 241
    1ae2:	86 60       	ori	r24, 0x06	; 6
    1ae4:	83 bf       	out	0x33, r24	; 51
  cli();
    1ae6:	f8 94       	cli
  sleep_enable();
    1ae8:	83 b7       	in	r24, 0x33	; 51
    1aea:	81 60       	ori	r24, 0x01	; 1
    1aec:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1aee:	85 b7       	in	r24, 0x35	; 53
    1af0:	80 66       	ori	r24, 0x60	; 96
    1af2:	85 bf       	out	0x35, r24	; 53
    1af4:	8f 7d       	andi	r24, 0xDF	; 223
    1af6:	85 bf       	out	0x35, r24	; 53
  sei();
    1af8:	78 94       	sei
  sleep_cpu();
    1afa:	88 95       	sleep
  sleep_disable();
    1afc:	83 b7       	in	r24, 0x33	; 51
    1afe:	8e 7f       	andi	r24, 0xFE	; 254
    1b00:	83 bf       	out	0x33, r24	; 51
  sei();
    1b02:	78 94       	sei
  }
    1b04:	08 95       	ret

00001b06 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1b06:	10 92 9c 01 	sts	0x019C, r1

  wdt_enable(watchdogSleep);
    1b0a:	83 fd       	sbrc	r24, 3
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <nap(signed char)+0xc>
    1b0e:	28 e0       	ldi	r18, 0x08	; 8
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <nap(signed char)+0xe>
    1b12:	28 e2       	ldi	r18, 0x28	; 40
    1b14:	87 70       	andi	r24, 0x07	; 7
    1b16:	28 2b       	or	r18, r24
    1b18:	88 e1       	ldi	r24, 0x18	; 24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	a8 95       	wdr
    1b22:	80 93 60 00 	sts	0x0060, r24
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1b2c:	80 91 60 00 	lds	r24, 0x0060
    1b30:	80 64       	ori	r24, 0x40	; 64
    1b32:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1b36:	83 b7       	in	r24, 0x33	; 51
    1b38:	81 7f       	andi	r24, 0xF1	; 241
    1b3a:	86 60       	ori	r24, 0x06	; 6
    1b3c:	83 bf       	out	0x33, r24	; 51
  cli();
    1b3e:	f8 94       	cli
  sleep_enable();
    1b40:	83 b7       	in	r24, 0x33	; 51
    1b42:	81 60       	ori	r24, 0x01	; 1
    1b44:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1b46:	85 b7       	in	r24, 0x35	; 53
    1b48:	80 66       	ori	r24, 0x60	; 96
    1b4a:	85 bf       	out	0x35, r24	; 53
    1b4c:	8f 7d       	andi	r24, 0xDF	; 223
    1b4e:	85 bf       	out	0x35, r24	; 53
  sei();
    1b50:	78 94       	sei
  sleep_cpu();
    1b52:	88 95       	sleep
  sleep_disable();
    1b54:	83 b7       	in	r24, 0x33	; 51
    1b56:	8e 7f       	andi	r24, 0xFE	; 254
    1b58:	83 bf       	out	0x33, r24	; 51
  sei();
    1b5a:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(_watchdogFired)
    1b5c:	80 91 9c 01 	lds	r24, 0x019C
    1b60:	88 23       	and	r24, r24
    1b62:	49 f3       	breq	.-46     	; 0x1b36 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    1b64:	88 e1       	ldi	r24, 0x18	; 24
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	80 93 60 00 	sts	0x0060, r24
    1b6e:	10 92 60 00 	sts	0x0060, r1
    1b72:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    1b74:	08 95       	ret

00001b76 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1b76:	10 92 9c 01 	sts	0x019C, r1
  wdt_enable(watchdogSleep);
    1b7a:	83 fd       	sbrc	r24, 3
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <idleCPU(signed char)+0xc>
    1b7e:	28 e0       	ldi	r18, 0x08	; 8
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <idleCPU(signed char)+0xe>
    1b82:	28 e2       	ldi	r18, 0x28	; 40
    1b84:	87 70       	andi	r24, 0x07	; 7
    1b86:	28 2b       	or	r18, r24
    1b88:	88 e1       	ldi	r24, 0x18	; 24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	a8 95       	wdr
    1b92:	80 93 60 00 	sts	0x0060, r24
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1b9c:	80 91 60 00 	lds	r24, 0x0060
    1ba0:	80 64       	ori	r24, 0x40	; 64
    1ba2:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    1ba6:	83 b7       	in	r24, 0x33	; 51
    1ba8:	81 7f       	andi	r24, 0xF1	; 241
    1baa:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    1bac:	83 b7       	in	r24, 0x33	; 51
    1bae:	81 60       	ori	r24, 0x01	; 1
    1bb0:	83 bf       	out	0x33, r24	; 51
    1bb2:	88 95       	sleep
    1bb4:	83 b7       	in	r24, 0x33	; 51
    1bb6:	8e 7f       	andi	r24, 0xFE	; 254
    1bb8:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    1bba:	88 e1       	ldi	r24, 0x18	; 24
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	80 93 60 00 	sts	0x0060, r24
    1bc4:	10 92 60 00 	sts	0x0060, r1
    1bc8:	0f be       	out	0x3f, r0	; 63
  return(_watchdogFired != 0);
    1bca:	80 91 9c 01 	lds	r24, 0x019C
    1bce:	81 11       	cpse	r24, r1
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
  }
    1bd2:	08 95       	ret

00001bd4 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    1bd4:	1f 92       	push	r1
    1bd6:	0f 92       	push	r0
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	0f 92       	push	r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	8f 93       	push	r24
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 93 9e 01 	sts	0x019E, r24
    1be6:	8f 91       	pop	r24
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	98 2f       	mov	r25, r24
    1bf8:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    1bfa:	80 91 64 00 	lds	r24, 0x0064
    1bfe:	80 fd       	sbrc	r24, 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    1c02:	00 e0       	ldi	r16, 0x00	; 0
    1c04:	0b c0       	rjmp	.+22     	; 0x1c1c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1c06:	80 91 64 00 	lds	r24, 0x0064
    1c0a:	8e 7f       	andi	r24, 0xFE	; 254
    1c0c:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1c10:	80 91 7a 00 	lds	r24, 0x007A
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	80 93 7a 00 	sts	0x007A, r24
    1c1a:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    1c1c:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    1c20:	12 30       	cpi	r17, 0x02	; 2
    1c22:	1c f4       	brge	.+6      	; 0x1c2a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    1c2a:	83 b7       	in	r24, 0x33	; 51
    1c2c:	81 7f       	andi	r24, 0xF1	; 241
    1c2e:	82 60       	ori	r24, 0x02	; 2
    1c30:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    1c32:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    1c36:	12 30       	cpi	r17, 0x02	; 2
    1c38:	24 f0       	brlt	.+8      	; 0x1c42 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    1c3a:	80 91 7a 00 	lds	r24, 0x007A
    1c3e:	80 62       	ori	r24, 0x20	; 32
    1c40:	03 c0       	rjmp	.+6      	; 0x1c48 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    1c42:	80 91 7a 00 	lds	r24, 0x007A
    1c46:	8f 7d       	andi	r24, 0xDF	; 223
    1c48:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    1c4c:	80 91 7a 00 	lds	r24, 0x007A
    1c50:	88 60       	ori	r24, 0x08	; 8
    1c52:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    1c56:	80 91 7a 00 	lds	r24, 0x007A
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	80 93 7a 00 	sts	0x007A, r24
    1c60:	20 91 9d 01 	lds	r18, 0x019D
    1c64:	5f ef       	ldi	r21, 0xFF	; 255
    1c66:	4f ef       	ldi	r20, 0xFF	; 255
    1c68:	1e c0       	rjmp	.+60     	; 0x1ca6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb4>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    1c6a:	10 92 9e 01 	sts	0x019E, r1
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8c>
      while(!ADC_complete) { sleep_mode(); }
    1c70:	83 b7       	in	r24, 0x33	; 51
    1c72:	81 60       	ori	r24, 0x01	; 1
    1c74:	83 bf       	out	0x33, r24	; 51
    1c76:	88 95       	sleep
    1c78:	83 b7       	in	r24, 0x33	; 51
    1c7a:	8e 7f       	andi	r24, 0xFE	; 254
    1c7c:	83 bf       	out	0x33, r24	; 51
    1c7e:	80 91 9e 01 	lds	r24, 0x019E
    1c82:	88 23       	and	r24, r24
    1c84:	a9 f3       	breq	.-22     	; 0x1c70 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7e>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1c86:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    1c8a:	90 91 79 00 	lds	r25, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    1c8e:	94 17       	cp	r25, r20
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa4>
    1c92:	35 17       	cp	r19, r21
    1c94:	59 f0       	breq	.+22     	; 0x1cac <_analogueNoiseReducedReadM(unsigned char, signed char)+0xba>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    1c96:	82 2f       	mov	r24, r18
    1c98:	86 95       	lsr	r24
    1c9a:	29 2f       	mov	r18, r25
    1c9c:	23 27       	eor	r18, r19
    1c9e:	2b 5f       	subi	r18, 0xFB	; 251
    1ca0:	28 0f       	add	r18, r24
    1ca2:	49 2f       	mov	r20, r25
    1ca4:	53 2f       	mov	r21, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    1ca6:	11 50       	subi	r17, 0x01	; 1
    1ca8:	17 ff       	sbrs	r17, 7
    1caa:	df cf       	rjmp	.-66     	; 0x1c6a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x78>
    1cac:	20 93 9d 01 	sts	0x019D, r18
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1cb0:	80 91 7a 00 	lds	r24, 0x007A
    1cb4:	87 7f       	andi	r24, 0xF7	; 247
    1cb6:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1cba:	80 91 7a 00 	lds	r24, 0x007A
    1cbe:	8f 7d       	andi	r24, 0xDF	; 223
    1cc0:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1cc4:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    1cc8:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    1ccc:	00 23       	and	r16, r16
    1cce:	51 f0       	breq	.+20     	; 0x1ce4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf2>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1cd0:	80 91 7a 00 	lds	r24, 0x007A
    1cd4:	8f 77       	andi	r24, 0x7F	; 127
    1cd6:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1cda:	80 91 64 00 	lds	r24, 0x0064
    1cde:	81 60       	ori	r24, 0x01	; 1
    1ce0:	80 93 64 00 	sts	0x0064, r24
    1ce4:	94 2f       	mov	r25, r20
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	28 2b       	or	r18, r24
    1cec:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    1cee:	c9 01       	movw	r24, r18
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <isBatteryLow()>:


// True if battery voltage was low when last read.
// For a 2xAA NiMH configuration this is ~2.0V, where the BOD may force a reset at 1.8V.
static bool batteryLow; // Initially false.
bool isBatteryLow() { return(batteryLow); }
    1cf6:	80 91 a1 01 	lds	r24, 0x01A1
    1cfa:	08 95       	ret

00001cfc <getBatterymV()>:
// Last-read battery voltage.
static uint16_t batterymV;

// Get power supply voltage in mV as last read by readBatterymV(); non-negative, intially zero until first readBatterymV().
uint16_t getBatterymV() { return(batterymV); }
    1cfc:	80 91 9f 01 	lds	r24, 0x019F
    1d00:	90 91 a0 01 	lds	r25, 0x01A0
    1d04:	08 95       	ret

00001d06 <readBatterymV()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t readBatterymV()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS0) | 14);
    1d06:	8e e4       	ldi	r24, 0x4E	; 78
    1d08:	63 e0       	ldi	r22, 0x03	; 3
    1d0a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d0e:	bc 01       	movw	r22, r24
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    1d10:	80 ec       	ldi	r24, 0xC0	; 192
    1d12:	9f ef       	ldi	r25, 0xFF	; 255
    1d14:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	84 e0       	ldi	r24, 0x04	; 4
    1d1c:	22 0f       	add	r18, r18
    1d1e:	33 1f       	adc	r19, r19
    1d20:	8a 95       	dec	r24
    1d22:	e1 f7       	brne	.-8      	; 0x1d1c <readBatterymV()+0x16>
    1d24:	26 0f       	add	r18, r22
    1d26:	37 1f       	adc	r19, r23
  batterymV = result;
    1d28:	30 93 a0 01 	sts	0x01A0, r19
    1d2c:	20 93 9f 01 	sts	0x019F, r18
  batteryLow = (result < 2000); // Suitable for 2xAA NiMH, with BOD at 1.8V.
    1d30:	10 92 a1 01 	sts	0x01A1, r1
    1d34:	87 e0       	ldi	r24, 0x07	; 7
    1d36:	20 3d       	cpi	r18, 0xD0	; 208
    1d38:	38 07       	cpc	r19, r24
    1d3a:	18 f4       	brcc	.+6      	; 0x1d42 <readBatterymV()+0x3c>
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 a1 01 	sts	0x01A1, r24
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    1d42:	c9 01       	movw	r24, r18
    1d44:	08 95       	ret

00001d46 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    1d46:	88 ec       	ldi	r24, 0xC8	; 200
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d4e:	84 54       	subi	r24, 0x44	; 68
    1d50:	91 40       	sbci	r25, 0x01	; 1
    1d52:	22 ed       	ldi	r18, 0xD2	; 210
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	a9 01       	movw	r20, r18
    1d58:	84 9f       	mul	r24, r20
    1d5a:	90 01       	movw	r18, r0
    1d5c:	85 9f       	mul	r24, r21
    1d5e:	30 0d       	add	r19, r0
    1d60:	94 9f       	mul	r25, r20
    1d62:	30 0d       	add	r19, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	94 e0       	ldi	r25, 0x04	; 4
    1d68:	35 95       	asr	r19
    1d6a:	27 95       	ror	r18
    1d6c:	9a 95       	dec	r25
    1d6e:	e1 f7       	brne	.-8      	; 0x1d68 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    1d70:	c9 01       	movw	r24, r18
    1d72:	08 95       	ret

00001d74 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    1d74:	62 95       	swap	r22
    1d76:	66 0f       	add	r22, r22
    1d78:	66 0f       	add	r22, r22
    1d7a:	60 7c       	andi	r22, 0xC0	; 192
    1d7c:	87 70       	andi	r24, 0x07	; 7
    1d7e:	86 2b       	or	r24, r22
    1d80:	63 e0       	ldi	r22, 0x03	; 3
    1d82:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d86:	08 95       	ret

00001d88 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    1d88:	ec eb       	ldi	r30, 0xBC	; 188
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8b 7f       	andi	r24, 0xFB	; 251
    1d90:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    1d92:	e4 e6       	ldi	r30, 0x64	; 100
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 68       	ori	r24, 0x80	; 128
    1d9a:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    1d9c:	08 95       	ret

00001d9e <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    1d9e:	10 92 9c 01 	sts	0x019C, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    1da2:	88 e0       	ldi	r24, 0x08	; 8
    1da4:	28 e1       	ldi	r18, 0x18	; 24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	a8 95       	wdr
    1dae:	20 93 60 00 	sts	0x0060, r18
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1db8:	80 91 60 00 	lds	r24, 0x0060
    1dbc:	80 64       	ori	r24, 0x40	; 64
    1dbe:	80 93 60 00 	sts	0x0060, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    1dc6:	9f 5f       	subi	r25, 0xFF	; 255
    1dc8:	80 91 9c 01 	lds	r24, 0x019C
    1dcc:	88 23       	and	r24, r24
    1dce:	d9 f3       	breq	.-10     	; 0x1dc6 <clockJitterWDT()+0x28>
  return(count);
  }
    1dd0:	89 2f       	mov	r24, r25
    1dd2:	08 95       	ret

00001dd4 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    1dd4:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    1dd6:	90 91 b2 00 	lds	r25, 0x00B2
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    1de0:	4f 5f       	subi	r20, 0xFF	; 255
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	80 91 b2 00 	lds	r24, 0x00B2
    1de8:	98 17       	cp	r25, r24
    1dea:	d1 f3       	breq	.-12     	; 0x1de0 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    1dec:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    1df0:	10 92 9c 01 	sts	0x019C, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    1df4:	88 e0       	ldi	r24, 0x08	; 8
    1df6:	28 e1       	ldi	r18, 0x18	; 24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	a8 95       	wdr
    1e00:	20 93 60 00 	sts	0x0060, r18
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1e0a:	80 91 60 00 	lds	r24, 0x0060
    1e0e:	80 64       	ori	r24, 0x40	; 64
    1e10:	80 93 60 00 	sts	0x0060, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	e0 e0       	ldi	r30, 0x00	; 0
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1e20:	a8 e1       	ldi	r26, 0x18	; 24
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    1e26:	80 91 9c 01 	lds	r24, 0x019C
    1e2a:	88 23       	and	r24, r24
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <clockJitterEntropyByte()+0x5e>
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	2a c0       	rjmp	.+84     	; 0x1e86 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1e32:	27 17       	cp	r18, r23
    1e34:	c1 f0       	breq	.+48     	; 0x1e66 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    1e36:	42 27       	eor	r20, r18
    1e38:	04 2e       	mov	r0, r20
    1e3a:	42 95       	swap	r20
    1e3c:	40 7f       	andi	r20, 0xF0	; 240
    1e3e:	40 25       	eor	r20, r0
    1e40:	05 2e       	mov	r0, r21
    1e42:	54 2f       	mov	r21, r20
    1e44:	42 95       	swap	r20
    1e46:	4f 70       	andi	r20, 0x0F	; 15
    1e48:	04 26       	eor	r0, r20
    1e4a:	46 95       	lsr	r20
    1e4c:	54 27       	eor	r21, r20
    1e4e:	45 27       	eor	r20, r21
    1e50:	44 0f       	add	r20, r20
    1e52:	44 0f       	add	r20, r20
    1e54:	44 0f       	add	r20, r20
    1e56:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1e58:	99 0f       	add	r25, r25
    1e5a:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1e5c:	31 50       	subi	r19, 0x01	; 1
    1e5e:	13 16       	cp	r1, r19
    1e60:	0c f0       	brlt	.+2      	; 0x1e64 <clockJitterEntropyByte()+0x90>
    1e62:	34 c0       	rjmp	.+104    	; 0x1ecc <clockJitterEntropyByte()+0xf8>
    1e64:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    1e66:	10 92 9c 01 	sts	0x019C, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	a8 95       	wdr
    1e70:	a0 93 60 00 	sts	0x0060, r26
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    1e7a:	80 91 60 00 	lds	r24, 0x0060
    1e7e:	80 64       	ori	r24, 0x40	; 64
    1e80:	80 93 60 00 	sts	0x0060, r24
    1e84:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    1e86:	80 91 b2 00 	lds	r24, 0x00B2
    1e8a:	f8 17       	cp	r31, r24
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <clockJitterEntropyByte()+0xbe>
    1e8e:	61 50       	subi	r22, 0x01	; 1
    1e90:	ca cf       	rjmp	.-108    	; 0x1e26 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    1e92:	6e 17       	cp	r22, r30
    1e94:	b9 f0       	breq	.+46     	; 0x1ec4 <clockJitterEntropyByte()+0xf0>
    1e96:	46 27       	eor	r20, r22
    1e98:	04 2e       	mov	r0, r20
    1e9a:	42 95       	swap	r20
    1e9c:	40 7f       	andi	r20, 0xF0	; 240
    1e9e:	40 25       	eor	r20, r0
    1ea0:	05 2e       	mov	r0, r21
    1ea2:	54 2f       	mov	r21, r20
    1ea4:	42 95       	swap	r20
    1ea6:	4f 70       	andi	r20, 0x0F	; 15
    1ea8:	04 26       	eor	r0, r20
    1eaa:	46 95       	lsr	r20
    1eac:	54 27       	eor	r21, r20
    1eae:	45 27       	eor	r20, r21
    1eb0:	44 0f       	add	r20, r20
    1eb2:	44 0f       	add	r20, r20
    1eb4:	44 0f       	add	r20, r20
    1eb6:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1eb8:	99 0f       	add	r25, r25
    1eba:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1ebc:	31 50       	subi	r19, 0x01	; 1
    1ebe:	13 16       	cp	r1, r19
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <clockJitterEntropyByte()+0xf8>
    1ec2:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    1ec4:	f0 91 b2 00 	lds	r31, 0x00B2
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	ad cf       	rjmp	.-166    	; 0x1e26 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    1ecc:	88 e1       	ldi	r24, 0x18	; 24
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	80 93 60 00 	sts	0x0060, r24
    1ed6:	10 92 60 00 	sts	0x0060, r1
    1eda:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    1edc:	89 2f       	mov	r24, r25
    1ede:	1f 91       	pop	r17
    1ee0:	08 95       	ret

00001ee2 <captureEntropy1()>:

// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU(), _watchdogFired); }
    1ee2:	80 91 b2 00 	lds	r24, 0x00B2
    1ee6:	66 b5       	in	r22, 0x26	; 38
    1ee8:	40 91 9c 01 	lds	r20, 0x019C
    1eec:	90 91 9d 01 	lds	r25, 0x019D
    1ef0:	89 27       	eor	r24, r25
    1ef2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1ef6:	08 95       	ret

00001ef8 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1ef8:	8c b5       	in	r24, 0x2c	; 44
    1efa:	8f 7b       	andi	r24, 0xBF	; 191
    1efc:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    1efe:	e4 e6       	ldi	r30, 0x64	; 100
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	84 60       	ori	r24, 0x04	; 4
    1f06:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1f08:	8a e0       	ldi	r24, 0x0A	; 10
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1f10:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    1f12:	8d e0       	ldi	r24, 0x0D	; 13
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1f1a:	8b e0       	ldi	r24, 0x0B	; 11
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    1f22:	8c e0       	ldi	r24, 0x0C	; 12
    1f24:	62 e0       	ldi	r22, 0x02	; 2
    1f26:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1f2a:	08 95       	ret

00001f2c <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    1f2c:	80 91 64 00 	lds	r24, 0x0064
    1f30:	82 fd       	sbrc	r24, 2
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <powerUpSPIIfDisabled()+0xc>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1f38:	8a e0       	ldi	r24, 0x0A	; 10
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1f40:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    1f42:	80 91 64 00 	lds	r24, 0x0064
    1f46:	8b 7f       	andi	r24, 0xFB	; 251
    1f48:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    1f4c:	80 e5       	ldi	r24, 0x50	; 80
    1f4e:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1f54:	08 95       	ret

00001f56 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up(ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1f56:	87 e0       	ldi	r24, 0x07	; 7
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  }
    1f5e:	08 95       	ret

00001f60 <minimisePowerWithoutSleep()>:
// Suitable for start-up and for belt-and-braces use before main sleep on each cycle,
// to ensure that nothing is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
void minimisePowerWithoutSleep()
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    1f64:	88 e1       	ldi	r24, 0x18	; 24
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	80 93 60 00 	sts	0x0060, r24
    1f6e:	10 92 60 00 	sts	0x0060, r1
    1f72:	0f be       	out	0x3f, r0	; 63
  
  // Turn off external peripherals.
  power_intermittent_peripherals_disable();
    1f74:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1f78:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    1f7c:	80 e8       	ldi	r24, 0x80	; 128
    1f7e:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    1f80:	8f e3       	ldi	r24, 0x3F	; 63
    1f82:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    1f86:	83 e0       	ldi	r24, 0x03	; 3
    1f88:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    1f8c:	04 e6       	ldi	r16, 0x64	; 100
    1f8e:	10 e0       	ldi	r17, 0x00	; 0
    1f90:	f8 01       	movw	r30, r16
    1f92:	80 81       	ld	r24, Z
    1f94:	81 60       	ori	r24, 0x01	; 1
    1f96:	80 83       	st	Z, r24

  // Power down SPI during major sleep.
  powerDownSPI();
    1f98:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>

#ifdef DONT_USE_TIMER0
  power_timer0_disable();
#endif

  power_timer1_disable();
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 60       	ori	r24, 0x08	; 8
    1fa2:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    1faa:	80 91 64 00 	lds	r24, 0x0064
    1fae:	87 fd       	sbrc	r24, 7
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <powerUpTWIIfDisabled()+0xc>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    1fb6:	80 91 64 00 	lds	r24, 0x0064
    1fba:	8f 77       	andi	r24, 0x7F	; 127
    1fbc:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    1fc0:	80 91 bc 00 	lds	r24, 0x00BC
    1fc4:	84 60       	ori	r24, 0x04	; 4
    1fc6:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1fca:	8c e0       	ldi	r24, 0x0C	; 12
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    1fd2:	10 92 b8 00 	sts	0x00B8, r1
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    1fd8:	08 95       	ret

00001fda <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    1fe4:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    1fe6:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    1fea:	81 17       	cp	r24, r17
    1fec:	e1 f1       	breq	.+120    	; 0x2066 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    1fee:	18 17       	cp	r17, r24
    1ff0:	10 f4       	brcc	.+4      	; 0x1ff6 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	39 c0       	rjmp	.+114    	; 0x2068 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    1ff6:	21 2f       	mov	r18, r17
    1ff8:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    1ffa:	21 30       	cpi	r18, 0x01	; 1
    1ffc:	19 f4       	brne	.+6      	; 0x2004 <sleepUntilSubCycleTime(unsigned char)+0x2a>
      {
      // Take a very short sleep, less than half a tick,
      // eg as may be some way into this tick already.
      //burnHundredsOfCyclesProductively();
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
    1ffe:	83 e1       	ldi	r24, 0x13	; 19
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	2e c0       	rjmp	.+92     	; 0x2060 <sleepUntilSubCycleTime(unsigned char)+0x86>
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    2004:	20 9f       	mul	r18, r16
    2006:	e0 01       	movw	r28, r0
    2008:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    if(msLeft >= 20)
    200a:	c4 31       	cpi	r28, 0x14	; 20
    200c:	d1 05       	cpc	r29, r1
    200e:	70 f0       	brcs	.+28     	; 0x202c <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    2010:	c0 35       	cpi	r28, 0x50	; 80
    2012:	d1 05       	cpc	r29, r1
    2014:	38 f0       	brcs	.+14     	; 0x2024 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    2016:	cd 54       	subi	r28, 0x4D	; 77
    2018:	d1 40       	sbci	r29, 0x01	; 1
    201a:	10 f0       	brcs	.+4      	; 0x2020 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    201c:	84 e0       	ldi	r24, 0x04	; 4
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    202a:	dd cf       	rjmp	.-70     	; 0x1fe6 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    202c:	ce 01       	movw	r24, r28
    202e:	02 97       	sbiw	r24, 0x02	; 2
    2030:	87 5e       	subi	r24, 0xE7	; 231
    2032:	93 40       	sbci	r25, 0x03	; 3
    2034:	10 f0       	brcs	.+4      	; 0x203a <sleepUntilSubCycleTime(unsigned char)+0x60>
    2036:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    203a:	9e 01       	movw	r18, r28
    203c:	21 50       	subi	r18, 0x01	; 1
    203e:	30 40       	sbci	r19, 0x00	; 0
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	da 01       	movw	r26, r20
    2046:	c9 01       	movw	r24, r18
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	aa 1f       	adc	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	6a 95       	dec	r22
    2054:	d1 f7       	brne	.-12     	; 0x204a <sleepUntilSubCycleTime(unsigned char)+0x70>
    2056:	82 1b       	sub	r24, r18
    2058:	93 0b       	sbc	r25, r19
    205a:	a4 0b       	sbc	r26, r20
    205c:	b5 0b       	sbc	r27, r21
    205e:	02 97       	sbiw	r24, 0x02	; 2
    2060:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    2064:	c0 cf       	rjmp	.-128    	; 0x1fe6 <sleepUntilSubCycleTime(unsigned char)+0xc>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	08 95       	ret

00002072 <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2072:	80 91 64 00 	lds	r24, 0x0064

// Flush any pending serial output and power it down.
void powerDownSerial()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    2076:	81 ff       	sbrs	r24, 1
    2078:	02 c0       	rjmp	.+4      	; 0x207e <powerDownSerial()+0xc>
    207a:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
#endif
  // Flush serial output and shut down to minimal power state including minimising leakage to serial lines!
  Serial.flush();
    207e:	8e e0       	ldi	r24, 0x0E	; 14
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <HardwareSerial::flush()>
  //flushSerialHW();
  Serial.end();
    2086:	8e e0       	ldi	r24, 0x0E	; 14
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	0e 94 00 27 	call	0x4e00	; 0x4e00 <HardwareSerial::end()>
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	62 e0       	ldi	r22, 0x02	; 2
    2092:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    209e:	80 91 64 00 	lds	r24, 0x0064
    20a2:	82 60       	ori	r24, 0x02	; 2
    20a4:	80 93 64 00 	sts	0x0064, r24
  }
    20a8:	08 95       	ret

000020aa <burnHundredsOfCyclesProductivelyAndPoll()>:
// This may churn PRNGs or gather entropy for example.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), 0, getSubCycleTime()); }
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
    20b0:	88 23       	and	r24, r24
    20b2:	39 f0       	breq	.+14     	; 0x20c2 <burnHundredsOfCyclesProductivelyAndPoll()+0x18>
    20b4:	86 b5       	in	r24, 0x26	; 38
    20b6:	40 91 b2 00 	lds	r20, 0x00B2
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    20c0:	08 95       	ret
  else { captureEntropy1(); }
    20c2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <captureEntropy1()>
    20c6:	08 95       	ret

000020c8 <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    20c8:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    20cc:	81 ff       	sbrs	r24, 1
    20ce:	05 c0       	rjmp	.+10     	; 0x20da <flushSerialProductive()+0x12>
    20d0:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    20d6:	0e 94 55 10 	call	0x20aa	; 0x20aa <burnHundredsOfCyclesProductivelyAndPoll()>
    20da:	80 91 c0 00 	lds	r24, 0x00C0
    20de:	85 ff       	sbrs	r24, 5
    20e0:	fa cf       	rjmp	.-12     	; 0x20d6 <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    20e2:	8e e0       	ldi	r24, 0x0E	; 14
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    20e6:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <HardwareSerial::flush()>
  }
    20ea:	08 95       	ret

000020ec <flushSerialSCTSensitive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    20ec:	80 91 64 00 	lds	r24, 0x0064
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    20f0:	81 ff       	sbrs	r24, 1
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <flushSerialSCTSensitive()+0xc>
    20f4:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    20f8:	80 91 c0 00 	lds	r24, 0x00C0
    20fc:	85 fd       	sbrc	r24, 5
    20fe:	0b c0       	rjmp	.+22     	; 0x2116 <flushSerialSCTSensitive()+0x2a>
    2100:	80 91 b2 00 	lds	r24, 0x00B2
    2104:	8b 3f       	cpi	r24, 0xFB	; 251
    2106:	38 f4       	brcc	.+14     	; 0x2116 <flushSerialSCTSensitive()+0x2a>
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline idle30AndPoll() { idleCPU(WDTO_30MS); pollIO(true); }
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <idleCPU(signed char)>
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
    2114:	f1 cf       	rjmp	.-30     	; 0x20f8 <flushSerialSCTSensitive()+0xc>
    {
    idle30AndPoll(); // Save much power by idling CPU, though everything else runs.
    }
#endif
  flushSerialProductive();
    2116:	0e 94 64 10 	call	0x20c8	; 0x20c8 <flushSerialProductive()>
  }
    211a:	08 95       	ret

0000211c <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    211c:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    2120:	81 fd       	sbrc	r24, 1
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <powerUpSerialIfDisabled()+0xc>
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    2128:	80 91 64 00 	lds	r24, 0x0064
    212c:	8d 7f       	andi	r24, 0xFD	; 253
    212e:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    2132:	8e e0       	ldi	r24, 0x0E	; 14
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	40 ec       	ldi	r20, 0xC0	; 192
    2138:	52 e1       	ldi	r21, 0x12	; 18
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	0e 94 82 26 	call	0x4d04	; 0x4d04 <HardwareSerial::begin(unsigned long)>
    2142:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    2144:	08 95       	ret

00002146 <power_intermittent_peripherals_enable(bool)>:
// Enable power to intermittent peripherals.
//   * waitUntilStable  wait long enough (and maybe test) for I/O power to become stable.
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    2146:	1f 93       	push	r17
    2148:	18 2f       	mov	r17, r24
  {
  digitalWrite(IO_POWER_UP, HIGH);
    214a:	87 e0       	ldi	r24, 0x07	; 7
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <digitalWrite>
  pinMode(IO_POWER_UP, OUTPUT);
    2152:	87 e0       	ldi	r24, 0x07	; 7
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    215a:	11 23       	and	r17, r17
    215c:	21 f0       	breq	.+8      	; 0x2166 <power_intermittent_peripherals_enable(bool)+0x20>
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    2166:	1f 91       	pop	r17
    2168:	08 95       	ret

0000216a <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    216a:	80 91 61 00 	lds	r24, 0x0061
    216e:	8f 70       	andi	r24, 0x0F	; 15
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	11 f0       	breq	.+4      	; 0x2178 <powerSetup()+0xe>
    2174:	0e 94 93 03 	call	0x726	; 0x726 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2178:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    217c:	80 91 64 00 	lds	r24, 0x0064
    2180:	8f 6e       	ori	r24, 0xEF	; 239
    2182:	80 93 64 00 	sts	0x0064, r24

#ifndef DONT_USE_TIMER0
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2186:	80 91 64 00 	lds	r24, 0x0064
    218a:	8f 7d       	andi	r24, 0xDF	; 223
    218c:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    2190:	80 91 64 00 	lds	r24, 0x0064
    2194:	8f 7b       	andi	r24, 0xBF	; 191
    2196:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    219a:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    219e:	86 e0       	ldi	r24, 0x06	; 6
    21a0:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    21b0:	08 95       	ret

000021b2 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    21b2:	20 91 a4 01 	lds	r18, 0x01A4
  b ^=s2;
    21b6:	90 91 a5 01 	lds	r25, 0x01A5
    21ba:	69 27       	eor	r22, r25
  c ^=s3;
    21bc:	90 91 a2 01 	lds	r25, 0x01A2
    21c0:	49 27       	eor	r20, r25
  x++;
    21c2:	90 91 a3 01 	lds	r25, 0x01A3
    21c6:	9f 5f       	subi	r25, 0xFF	; 255
    21c8:	90 93 a3 01 	sts	0x01A3, r25
  a = (a^c^x);
    21cc:	28 27       	eor	r18, r24
    21ce:	24 27       	eor	r18, r20
    21d0:	29 27       	eor	r18, r25
    21d2:	20 93 a4 01 	sts	0x01A4, r18
  b = (b+a);
    21d6:	62 0f       	add	r22, r18
    21d8:	60 93 a5 01 	sts	0x01A5, r22
  c = ((c+(b>>1))^a);
    21dc:	66 95       	lsr	r22
    21de:	64 0f       	add	r22, r20
    21e0:	62 27       	eor	r22, r18
    21e2:	60 93 a2 01 	sts	0x01A2, r22
  }
    21e6:	08 95       	ret

000021e8 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    21e8:	80 91 a3 01 	lds	r24, 0x01A3
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	80 93 a3 01 	sts	0x01A3, r24
  a = (a^c^x);       //note the mix of addition and XOR
    21f2:	20 91 a2 01 	lds	r18, 0x01A2
    21f6:	90 91 a4 01 	lds	r25, 0x01A4
    21fa:	92 27       	eor	r25, r18
    21fc:	98 27       	eor	r25, r24
    21fe:	90 93 a4 01 	sts	0x01A4, r25
  b = (b+a);         //And the use of very few instructions
    2202:	80 91 a5 01 	lds	r24, 0x01A5
    2206:	89 0f       	add	r24, r25
    2208:	80 93 a5 01 	sts	0x01A5, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    220c:	86 95       	lsr	r24
    220e:	82 0f       	add	r24, r18
    2210:	89 27       	eor	r24, r25
    2212:	80 93 a2 01 	sts	0x01A2, r24
  return(c);         //low order bits of other variables
  }
    2216:	08 95       	ret

00002218 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    2218:	87 e5       	ldi	r24, 0x57	; 87
    221a:	92 e0       	ldi	r25, 0x02	; 2
    221c:	80 93 a3 01 	sts	0x01A3, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    2220:	08 95       	ret

00002222 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	18 2f       	mov	r17, r24
    222a:	09 2f       	mov	r16, r25
    222c:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    222e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    2232:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2234:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2236:	87 e8       	ldi	r24, 0x87	; 135
    2238:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    223a:	0d b4       	in	r0, 0x2d	; 45
    223c:	07 fe       	sbrs	r0, 7
    223e:	fd cf       	rjmp	.-6      	; 0x223a <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2240:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2242:	0d b4       	in	r0, 0x2d	; 45
    2244:	07 fe       	sbrs	r0, 7
    2246:	fd cf       	rjmp	.-6      	; 0x2242 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2248:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    224a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    224c:	8f e7       	ldi	r24, 0x7F	; 127
    224e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2250:	0d b4       	in	r0, 0x2d	; 45
    2252:	07 fe       	sbrs	r0, 7
    2254:	fd cf       	rjmp	.-6      	; 0x2250 <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    2256:	8e b5       	in	r24, 0x2e	; 46
    2258:	81 2f       	mov	r24, r17
    225a:	90 2f       	mov	r25, r16
    225c:	9c 01       	movw	r18, r24
    225e:	f9 01       	movw	r30, r18
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2264:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2266:	0d b4       	in	r0, 0x2d	; 45
    2268:	07 fe       	sbrs	r0, 7
    226a:	fd cf       	rjmp	.-6      	; 0x2266 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    226c:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    226e:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    2270:	9f 5f       	subi	r25, 0xFF	; 255
    2272:	9f 15       	cp	r25, r15
    2274:	b8 f3       	brcs	.-18     	; 0x2264 <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    2276:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2278:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    227a:	88 e8       	ldi	r24, 0x88	; 136
    227c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    227e:	0d b4       	in	r0, 0x2d	; 45
    2280:	07 fe       	sbrs	r0, 7
    2282:	fd cf       	rjmp	.-6      	; 0x227e <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2288:	0d b4       	in	r0, 0x2d	; 45
    228a:	07 fe       	sbrs	r0, 7
    228c:	fd cf       	rjmp	.-6      	; 0x2288 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    228e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2290:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2292:	88 e8       	ldi	r24, 0x88	; 136
    2294:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2296:	0d b4       	in	r0, 0x2d	; 45
    2298:	07 fe       	sbrs	r0, 7
    229a:	fd cf       	rjmp	.-6      	; 0x2296 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    229c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    229e:	0d b4       	in	r0, 0x2d	; 45
    22a0:	07 fe       	sbrs	r0, 7
    22a2:	fd cf       	rjmp	.-6      	; 0x229e <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22a4:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    22a6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22a8:	85 e8       	ldi	r24, 0x85	; 133
    22aa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22ac:	0d b4       	in	r0, 0x2d	; 45
    22ae:	07 fe       	sbrs	r0, 7
    22b0:	fd cf       	rjmp	.-6      	; 0x22ac <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22b2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22b4:	0d b4       	in	r0, 0x2d	; 45
    22b6:	07 fe       	sbrs	r0, 7
    22b8:	fd cf       	rjmp	.-6      	; 0x22b4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22ba:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22bc:	0d b4       	in	r0, 0x2d	; 45
    22be:	07 fe       	sbrs	r0, 7
    22c0:	fd cf       	rjmp	.-6      	; 0x22bc <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    22c2:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    22c4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22c6:	83 e8       	ldi	r24, 0x83	; 131
    22c8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22ca:	0d b4       	in	r0, 0x2d	; 45
    22cc:	07 fe       	sbrs	r0, 7
    22ce:	fd cf       	rjmp	.-6      	; 0x22ca <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22d0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22d2:	0d b4       	in	r0, 0x2d	; 45
    22d4:	07 fe       	sbrs	r0, 7
    22d6:	fd cf       	rjmp	.-6      	; 0x22d2 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22d8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22da:	0d b4       	in	r0, 0x2d	; 45
    22dc:	07 fe       	sbrs	r0, 7
    22de:	fd cf       	rjmp	.-6      	; 0x22da <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    22e0:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    22e2:	44 23       	and	r20, r20
    22e4:	11 f0       	breq	.+4      	; 0x22ea <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    22e6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
  }
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	08 95       	ret

000022f2 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	18 2f       	mov	r17, r24
    22fa:	f6 2e       	mov	r15, r22
    22fc:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    22fe:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    2302:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2304:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2306:	88 e8       	ldi	r24, 0x88	; 136
    2308:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    230a:	0d b4       	in	r0, 0x2d	; 45
    230c:	07 fe       	sbrs	r0, 7
    230e:	fd cf       	rjmp	.-6      	; 0x230a <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2314:	0d b4       	in	r0, 0x2d	; 45
    2316:	07 fe       	sbrs	r0, 7
    2318:	fd cf       	rjmp	.-6      	; 0x2314 <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    231a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    231c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    231e:	88 e8       	ldi	r24, 0x88	; 136
    2320:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2322:	0d b4       	in	r0, 0x2d	; 45
    2324:	07 fe       	sbrs	r0, 7
    2326:	fd cf       	rjmp	.-6      	; 0x2322 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2328:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    232a:	0d b4       	in	r0, 0x2d	; 45
    232c:	07 fe       	sbrs	r0, 7
    232e:	fd cf       	rjmp	.-6      	; 0x232a <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2330:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2332:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2334:	8e ef       	ldi	r24, 0xFE	; 254
    2336:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2338:	0d b4       	in	r0, 0x2d	; 45
    233a:	07 fe       	sbrs	r0, 7
    233c:	fd cf       	rjmp	.-6      	; 0x2338 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    233e:	81 2f       	mov	r24, r17
    2340:	10 34       	cpi	r17, 0x40	; 64
    2342:	08 f0       	brcs	.+2      	; 0x2346 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    2344:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2346:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2348:	0d b4       	in	r0, 0x2d	; 45
    234a:	07 fe       	sbrs	r0, 7
    234c:	fd cf       	rjmp	.-6      	; 0x2348 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    234e:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    2350:	00 23       	and	r16, r16
    2352:	11 f4       	brne	.+4      	; 0x2358 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	01 c0       	rjmp	.+2      	; 0x235a <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    2358:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    235a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    235c:	85 e8       	ldi	r24, 0x85	; 133
    235e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2360:	0d b4       	in	r0, 0x2d	; 45
    2362:	07 fe       	sbrs	r0, 7
    2364:	fd cf       	rjmp	.-6      	; 0x2360 <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2366:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2368:	0d b4       	in	r0, 0x2d	; 45
    236a:	07 fe       	sbrs	r0, 7
    236c:	fd cf       	rjmp	.-6      	; 0x2368 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    236e:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    2370:	ff 20       	and	r15, r15
    2372:	11 f4       	brne	.+4      	; 0x2378 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	01 c0       	rjmp	.+2      	; 0x237a <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    2378:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    237a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    237c:	86 e8       	ldi	r24, 0x86	; 134
    237e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2380:	0d b4       	in	r0, 0x2d	; 45
    2382:	07 fe       	sbrs	r0, 7
    2384:	fd cf       	rjmp	.-6      	; 0x2380 <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2386:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2388:	0d b4       	in	r0, 0x2d	; 45
    238a:	07 fe       	sbrs	r0, 7
    238c:	fd cf       	rjmp	.-6      	; 0x2388 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    238e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2390:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2392:	83 e8       	ldi	r24, 0x83	; 131
    2394:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2396:	0d b4       	in	r0, 0x2d	; 45
    2398:	07 fe       	sbrs	r0, 7
    239a:	fd cf       	rjmp	.-6      	; 0x2396 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    239c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    239e:	0d b4       	in	r0, 0x2d	; 45
    23a0:	07 fe       	sbrs	r0, 7
    23a2:	fd cf       	rjmp	.-6      	; 0x239e <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23a4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23a6:	0d b4       	in	r0, 0x2d	; 45
    23a8:	07 fe       	sbrs	r0, 7
    23aa:	fd cf       	rjmp	.-6      	; 0x23a6 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    23ac:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23ae:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23b0:	87 e8       	ldi	r24, 0x87	; 135
    23b2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23b4:	0d b4       	in	r0, 0x2d	; 45
    23b6:	07 fe       	sbrs	r0, 7
    23b8:	fd cf       	rjmp	.-6      	; 0x23b4 <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23ba:	85 e0       	ldi	r24, 0x05	; 5
    23bc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23be:	0d b4       	in	r0, 0x2d	; 45
    23c0:	07 fe       	sbrs	r0, 7
    23c2:	fd cf       	rjmp	.-6      	; 0x23be <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    23c4:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    23c6:	22 23       	and	r18, r18
    23c8:	11 f0       	breq	.+4      	; 0x23ce <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    23ca:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
  }
    23ce:	1f 91       	pop	r17
    23d0:	0f 91       	pop	r16
    23d2:	ff 90       	pop	r15
    23d4:	08 95       	ret

000023d6 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    23dc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    23e0:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23e2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23e4:	88 e8       	ldi	r24, 0x88	; 136
    23e6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23e8:	0d b4       	in	r0, 0x2d	; 45
    23ea:	07 fe       	sbrs	r0, 7
    23ec:	fd cf       	rjmp	.-6      	; 0x23e8 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23f2:	0d b4       	in	r0, 0x2d	; 45
    23f4:	07 fe       	sbrs	r0, 7
    23f6:	fd cf       	rjmp	.-6      	; 0x23f2 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    23f8:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23fa:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23fc:	88 e8       	ldi	r24, 0x88	; 136
    23fe:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2400:	0d b4       	in	r0, 0x2d	; 45
    2402:	07 fe       	sbrs	r0, 7
    2404:	fd cf       	rjmp	.-6      	; 0x2400 <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2406:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2408:	0d b4       	in	r0, 0x2d	; 45
    240a:	07 fe       	sbrs	r0, 7
    240c:	fd cf       	rjmp	.-6      	; 0x2408 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    240e:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    2410:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2412:	8f ef       	ldi	r24, 0xFF	; 255
    2414:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2416:	0d b4       	in	r0, 0x2d	; 45
    2418:	07 fe       	sbrs	r0, 7
    241a:	fd cf       	rjmp	.-6      	; 0x2416 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    241c:	04 c0       	rjmp	.+8      	; 0x2426 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    241e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2420:	0d b4       	in	r0, 0x2d	; 45
    2422:	07 fe       	sbrs	r0, 7
    2424:	fd cf       	rjmp	.-6      	; 0x2420 <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    2426:	89 91       	ld	r24, Y+
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	c9 f7       	brne	.-14     	; 0x241e <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    242c:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    242e:	99 23       	and	r25, r25
    2430:	11 f0       	breq	.+4      	; 0x2436 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    2432:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
  }
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2442:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    2446:	fe 01       	movw	r30, r28
    2448:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    244a:	21 96       	adiw	r28, 0x01	; 1
    244c:	fe 01       	movw	r30, r28
    244e:	24 91       	lpm	r18, Z+
    2450:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    2452:	9f 3f       	cpi	r25, 0xFF	; 255
    2454:	69 f0       	breq	.+26     	; 0x2470 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2456:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    2458:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    245a:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    245c:	0d b4       	in	r0, 0x2d	; 45
    245e:	07 fe       	sbrs	r0, 7
    2460:	fd cf       	rjmp	.-6      	; 0x245c <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2462:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2464:	0d b4       	in	r0, 0x2d	; 45
    2466:	07 fe       	sbrs	r0, 7
    2468:	fd cf       	rjmp	.-6      	; 0x2464 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    246a:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    246c:	22 96       	adiw	r28, 0x02	; 2
    246e:	eb cf       	rjmp	.-42     	; 0x2446 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    2470:	88 23       	and	r24, r24
    2472:	11 f0       	breq	.+4      	; 0x2478 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    2474:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
  }
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	08 95       	ret

0000247e <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    247e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    2482:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2484:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2486:	87 e8       	ldi	r24, 0x87	; 135
    2488:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    248a:	0d b4       	in	r0, 0x2d	; 45
    248c:	07 fe       	sbrs	r0, 7
    248e:	fd cf       	rjmp	.-6      	; 0x248a <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2490:	80 e8       	ldi	r24, 0x80	; 128
    2492:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2494:	0d b4       	in	r0, 0x2d	; 45
    2496:	07 fe       	sbrs	r0, 7
    2498:	fd cf       	rjmp	.-6      	; 0x2494 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    249a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    249c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    249e:	87 e8       	ldi	r24, 0x87	; 135
    24a0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24a2:	0d b4       	in	r0, 0x2d	; 45
    24a4:	07 fe       	sbrs	r0, 7
    24a6:	fd cf       	rjmp	.-6      	; 0x24a2 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24a8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24aa:	0d b4       	in	r0, 0x2d	; 45
    24ac:	07 fe       	sbrs	r0, 7
    24ae:	fd cf       	rjmp	.-6      	; 0x24aa <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24b0:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    24b2:	99 23       	and	r25, r25
    24b4:	11 f0       	breq	.+4      	; 0x24ba <RFM22PowerOnInit()+0x3c>
    24b6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
    24ba:	08 95       	ret

000024bc <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    24c0:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    24c4:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    24c6:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24c8:	83 e0       	ldi	r24, 0x03	; 3
    24ca:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24cc:	0d b4       	in	r0, 0x2d	; 45
    24ce:	07 fe       	sbrs	r0, 7
    24d0:	fd cf       	rjmp	.-6      	; 0x24cc <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    24d2:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24d4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24d6:	0d b4       	in	r0, 0x2d	; 45
    24d8:	07 fe       	sbrs	r0, 7
    24da:	fd cf       	rjmp	.-6      	; 0x24d6 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    24dc:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    24de:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24e0:	0d b4       	in	r0, 0x2d	; 45
    24e2:	07 fe       	sbrs	r0, 7
    24e4:	fd cf       	rjmp	.-6      	; 0x24e0 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    24e6:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    24e8:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    24ea:	99 23       	and	r25, r25
    24ec:	11 f0       	breq	.+4      	; 0x24f2 <RFM22ReadStatusBoth()+0x36>
    24ee:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
    24f2:	90 2f       	mov	r25, r16
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	21 2f       	mov	r18, r17
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	28 2b       	or	r18, r24
    24fc:	39 2b       	or	r19, r25
  return(result);
  }
    24fe:	c9 01       	movw	r24, r18
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2506:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    250a:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    250c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    250e:	87 e8       	ldi	r24, 0x87	; 135
    2510:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2512:	0d b4       	in	r0, 0x2d	; 45
    2514:	07 fe       	sbrs	r0, 7
    2516:	fd cf       	rjmp	.-6      	; 0x2512 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2518:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    251a:	0d b4       	in	r0, 0x2d	; 45
    251c:	07 fe       	sbrs	r0, 7
    251e:	fd cf       	rjmp	.-6      	; 0x251a <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2520:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2522:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2524:	88 e8       	ldi	r24, 0x88	; 136
    2526:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2528:	0d b4       	in	r0, 0x2d	; 45
    252a:	07 fe       	sbrs	r0, 7
    252c:	fd cf       	rjmp	.-6      	; 0x2528 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2532:	0d b4       	in	r0, 0x2d	; 45
    2534:	07 fe       	sbrs	r0, 7
    2536:	fd cf       	rjmp	.-6      	; 0x2532 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2538:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    253a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    253c:	88 e8       	ldi	r24, 0x88	; 136
    253e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2540:	0d b4       	in	r0, 0x2d	; 45
    2542:	07 fe       	sbrs	r0, 7
    2544:	fd cf       	rjmp	.-6      	; 0x2540 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2546:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2548:	0d b4       	in	r0, 0x2d	; 45
    254a:	07 fe       	sbrs	r0, 7
    254c:	fd cf       	rjmp	.-6      	; 0x2548 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    254e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2550:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2552:	85 e8       	ldi	r24, 0x85	; 133
    2554:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2556:	0d b4       	in	r0, 0x2d	; 45
    2558:	07 fe       	sbrs	r0, 7
    255a:	fd cf       	rjmp	.-6      	; 0x2556 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    255c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    255e:	0d b4       	in	r0, 0x2d	; 45
    2560:	07 fe       	sbrs	r0, 7
    2562:	fd cf       	rjmp	.-6      	; 0x255e <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2564:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2566:	0d b4       	in	r0, 0x2d	; 45
    2568:	07 fe       	sbrs	r0, 7
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    256c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    256e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2570:	83 e8       	ldi	r24, 0x83	; 131
    2572:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2574:	0d b4       	in	r0, 0x2d	; 45
    2576:	07 fe       	sbrs	r0, 7
    2578:	fd cf       	rjmp	.-6      	; 0x2574 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    257a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    257c:	0d b4       	in	r0, 0x2d	; 45
    257e:	07 fe       	sbrs	r0, 7
    2580:	fd cf       	rjmp	.-6      	; 0x257c <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2582:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2584:	0d b4       	in	r0, 0x2d	; 45
    2586:	07 fe       	sbrs	r0, 7
    2588:	fd cf       	rjmp	.-6      	; 0x2584 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    258a:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    258c:	99 23       	and	r25, r25
    258e:	11 f0       	breq	.+4      	; 0x2594 <RFM22ModeStandbyAndClearState()+0x8e>
    2590:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
    2594:	08 95       	ret

00002596 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    259c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    25a0:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    25a2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25a4:	85 e8       	ldi	r24, 0x85	; 133
    25a6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25a8:	0d b4       	in	r0, 0x2d	; 45
    25aa:	07 fe       	sbrs	r0, 7
    25ac:	fd cf       	rjmp	.-6      	; 0x25a8 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25ae:	84 e0       	ldi	r24, 0x04	; 4
    25b0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25b2:	0d b4       	in	r0, 0x2d	; 45
    25b4:	07 fe       	sbrs	r0, 7
    25b6:	fd cf       	rjmp	.-6      	; 0x25b2 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    25b8:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    25ba:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25bc:	86 e8       	ldi	r24, 0x86	; 134
    25be:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25c0:	0d b4       	in	r0, 0x2d	; 45
    25c2:	07 fe       	sbrs	r0, 7
    25c4:	fd cf       	rjmp	.-6      	; 0x25c0 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25c6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25c8:	0d b4       	in	r0, 0x2d	; 45
    25ca:	07 fe       	sbrs	r0, 7
    25cc:	fd cf       	rjmp	.-6      	; 0x25c8 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    25ce:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    25d0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25d2:	83 e8       	ldi	r24, 0x83	; 131
    25d4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25d6:	0d b4       	in	r0, 0x2d	; 45
    25d8:	07 fe       	sbrs	r0, 7
    25da:	fd cf       	rjmp	.-6      	; 0x25d6 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25dc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25de:	0d b4       	in	r0, 0x2d	; 45
    25e0:	07 fe       	sbrs	r0, 7
    25e2:	fd cf       	rjmp	.-6      	; 0x25de <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25e4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25e6:	0d b4       	in	r0, 0x2d	; 45
    25e8:	07 fe       	sbrs	r0, 7
    25ea:	fd cf       	rjmp	.-6      	; 0x25e6 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    25ec:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    25ee:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25f0:	87 e8       	ldi	r24, 0x87	; 135
    25f2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25f4:	0d b4       	in	r0, 0x2d	; 45
    25f6:	07 fe       	sbrs	r0, 7
    25f8:	fd cf       	rjmp	.-6      	; 0x25f4 <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25fa:	89 e0       	ldi	r24, 0x09	; 9
    25fc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25fe:	0d b4       	in	r0, 0x2d	; 45
    2600:	07 fe       	sbrs	r0, 7
    2602:	fd cf       	rjmp	.-6      	; 0x25fe <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2604:	2a 9a       	sbi	0x05, 2	; 5
    2606:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2608:	03 e0       	ldi	r16, 0x03	; 3
    260a:	13 c0       	rjmp	.+38     	; 0x2632 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2612:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2614:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2616:	0d b4       	in	r0, 0x2d	; 45
    2618:	07 fe       	sbrs	r0, 7
    261a:	fd cf       	rjmp	.-6      	; 0x2616 <RFM22TXFIFO()+0x80>
  return(SPDR);
    261c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    261e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2620:	0d b4       	in	r0, 0x2d	; 45
    2622:	07 fe       	sbrs	r0, 7
    2624:	fd cf       	rjmp	.-6      	; 0x2620 <RFM22TXFIFO()+0x8a>
  return(SPDR);
    2626:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2628:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    262a:	82 ff       	sbrs	r24, 2
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <RFM22TXFIFO()+0x9c>
    262e:	11 e0       	ldi	r17, 0x01	; 1
    2630:	03 c0       	rjmp	.+6      	; 0x2638 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    2632:	11 50       	subi	r17, 0x01	; 1
    2634:	58 f7       	brcc	.-42     	; 0x260c <RFM22TXFIFO()+0x76>
    2636:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    2638:	ff 20       	and	r15, r15
    263a:	11 f0       	breq	.+4      	; 0x2640 <RFM22TXFIFO()+0xaa>
    263c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
  return(result);
  }
    2640:	81 2f       	mov	r24, r17
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	08 95       	ret

0000264a <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    264e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <powerUpSPIIfDisabled()>
    2652:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2654:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2656:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2658:	0d b4       	in	r0, 0x2d	; 45
    265a:	07 fe       	sbrs	r0, 7
    265c:	fd cf       	rjmp	.-6      	; 0x2658 <RFM22CheckConnected()+0xe>
  return(SPDR);
    265e:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2660:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2662:	0d b4       	in	r0, 0x2d	; 45
    2664:	07 fe       	sbrs	r0, 7
    2666:	fd cf       	rjmp	.-6      	; 0x2662 <RFM22CheckConnected()+0x18>
  return(SPDR);
    2668:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    266a:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    266c:	18 30       	cpi	r17, 0x08	; 8
    266e:	a1 f4       	brne	.+40     	; 0x2698 <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2670:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2676:	0d b4       	in	r0, 0x2d	; 45
    2678:	07 fe       	sbrs	r0, 7
    267a:	fd cf       	rjmp	.-6      	; 0x2676 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    267c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    267e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2680:	0d b4       	in	r0, 0x2d	; 45
    2682:	07 fe       	sbrs	r0, 7
    2684:	fd cf       	rjmp	.-6      	; 0x2680 <RFM22CheckConnected()+0x36>
  return(SPDR);
    2686:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2688:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    268a:	16 30       	cpi	r17, 0x06	; 6
    268c:	11 f4       	brne	.+4      	; 0x2692 <RFM22CheckConnected()+0x48>
    268e:	11 e0       	ldi	r17, 0x01	; 1
    2690:	10 c0       	rjmp	.+32     	; 0x26b2 <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    2692:	8a e7       	ldi	r24, 0x7A	; 122
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	02 c0       	rjmp	.+4      	; 0x269c <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    2698:	89 e6       	ldi	r24, 0x69	; 105
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    26a0:	81 2f       	mov	r24, r17
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	60 e1       	ldi	r22, 0x10	; 16
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    26ac:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
    26b0:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    26b2:	00 23       	and	r16, r16
    26b4:	11 f0       	breq	.+4      	; 0x26ba <RFM22CheckConnected()+0x70>
    26b6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <powerDownSPI()>
  return(isOK);
  }
    26ba:	81 2f       	mov	r24, r17
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	08 95       	ret

000026c2 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    26c2:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    26c4:	f9 99       	sbic	0x1f, 1	; 31
    26c6:	fe cf       	rjmp	.-4      	; 0x26c4 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    26c8:	32 bd       	out	0x22, r19	; 34
    26ca:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    26cc:	f8 9a       	sbi	0x1f, 0	; 31
    26ce:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    26d0:	08 95       	ret

000026d2 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    26d2:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    26d4:	f9 99       	sbic	0x1f, 1	; 31
    26d6:	fe cf       	rjmp	.-4      	; 0x26d4 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    26d8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26da:	32 bd       	out	0x22, r19	; 34
    26dc:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    26de:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	fa 9a       	sbi	0x1f, 2	; 31
    26e6:	f9 9a       	sbi	0x1f, 1	; 31
    26e8:	0f be       	out	0x3f, r0	; 63
}
    26ea:	08 95       	ret

000026ec <getMinutesSinceMidnightLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    26ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26ee:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    26f0:	20 91 a7 01 	lds	r18, 0x01A7
    26f4:	30 91 a8 01 	lds	r19, 0x01A8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26f8:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    26fa:	c9 01       	movw	r24, r18
    26fc:	08 95       	ret

000026fe <getMinutesLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    26fe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2700:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    2702:	80 91 a7 01 	lds	r24, 0x01A7
    2706:	90 91 a8 01 	lds	r25, 0x01A8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    270a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    270c:	6c e3       	ldi	r22, 0x3C	; 60
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
  return(result);
  }
#endif

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    2714:	08 95       	ret

00002716 <getHoursLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2716:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2718:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    271a:	80 91 a7 01 	lds	r24, 0x01A7
    271e:	90 91 a8 01 	lds	r25, 0x01A8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2722:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2724:	6c e3       	ldi	r22, 0x3C	; 60
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    272c:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    272e:	08 95       	ret

00002730 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    2730:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2732:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2734:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2736:	88 e0       	ldi	r24, 0x08	; 8
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	61 e6       	ldi	r22, 0x61	; 97
    273c:	73 e1       	ldi	r23, 0x13	; 19
    273e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    2742:	2f ef       	ldi	r18, 0xFF	; 255
    2744:	8f 3f       	cpi	r24, 0xFF	; 255
    2746:	92 07       	cpc	r25, r18
    2748:	21 f0       	breq	.+8      	; 0x2752 <restoreRTC()+0x22>
    274a:	90 93 aa 01 	sts	0x01AA, r25
    274e:	80 93 a9 01 	sts	0x01A9, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2752:	f9 99       	sbic	0x1f, 1	; 31
    2754:	fe cf       	rjmp	.-4      	; 0x2752 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2756:	8a e0       	ldi	r24, 0x0A	; 10
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	92 bd       	out	0x22, r25	; 34
    275c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    275e:	f8 9a       	sbi	0x1f, 0	; 31
    2760:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2762:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    2764:	60 3c       	cpi	r22, 0xC0	; 192
    2766:	90 f5       	brcc	.+100    	; 0x27cc <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    2768:	86 2f       	mov	r24, r22
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	23 e0       	ldi	r18, 0x03	; 3
    276e:	95 95       	asr	r25
    2770:	87 95       	ror	r24
    2772:	2a 95       	dec	r18
    2774:	e1 f7       	brne	.-8      	; 0x276e <restoreRTC()+0x3e>
    2776:	2c e3       	ldi	r18, 0x3C	; 60
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	82 9f       	mul	r24, r18
    277c:	a0 01       	movw	r20, r0
    277e:	83 9f       	mul	r24, r19
    2780:	50 0d       	add	r21, r0
    2782:	92 9f       	mul	r25, r18
    2784:	50 0d       	add	r21, r0
    2786:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    2788:	9a 01       	movw	r18, r20
    278a:	28 5f       	subi	r18, 0xF8	; 248
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    278e:	86 2f       	mov	r24, r22
    2790:	87 70       	andi	r24, 0x07	; 7
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	59 f0       	breq	.+22     	; 0x27ac <restoreRTC()+0x7c>
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	28 f0       	brcs	.+10     	; 0x27a4 <restoreRTC()+0x74>
    279a:	83 30       	cpi	r24, 0x03	; 3
    279c:	59 f0       	breq	.+22     	; 0x27b4 <restoreRTC()+0x84>
    279e:	87 30       	cpi	r24, 0x07	; 7
    27a0:	a9 f4       	brne	.+42     	; 0x27cc <restoreRTC()+0x9c>
    27a2:	0b c0       	rjmp	.+22     	; 0x27ba <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    27a4:	9a 01       	movw	r18, r20
    27a6:	2b 5c       	subi	r18, 0xCB	; 203
    27a8:	3f 4f       	sbci	r19, 0xFF	; 255
    27aa:	07 c0       	rjmp	.+14     	; 0x27ba <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    27ac:	9a 01       	movw	r18, r20
    27ae:	2a 5d       	subi	r18, 0xDA	; 218
    27b0:	3f 4f       	sbci	r19, 0xFF	; 255
    27b2:	03 c0       	rjmp	.+6      	; 0x27ba <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    27b4:	9a 01       	movw	r18, r20
    27b6:	29 5e       	subi	r18, 0xE9	; 233
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    27ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27bc:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    27be:	30 93 a8 01 	sts	0x01A8, r19
    27c2:	20 93 a7 01 	sts	0x01A7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27c6:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <restoreRTC()+0x9e>

  return(true);
    27cc:	80 e0       	ldi	r24, 0x00	; 0
  }
    27ce:	1f 91       	pop	r17
    27d0:	08 95       	ret

000027d2 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    27d2:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    27d4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27d6:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    27d8:	80 91 a7 01 	lds	r24, 0x01A7
    27dc:	90 91 a8 01 	lds	r25, 0x01A8
    27e0:	6f e0       	ldi	r22, 0x0F	; 15
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    27e8:	46 2f       	mov	r20, r22
    27ea:	44 0f       	add	r20, r20
    27ec:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	63 70       	andi	r22, 0x03	; 3
    27f2:	70 70       	andi	r23, 0x00	; 0
    27f4:	61 30       	cpi	r22, 0x01	; 1
    27f6:	71 05       	cpc	r23, r1
    27f8:	39 f0       	breq	.+14     	; 0x2808 <persistRTC()+0x36>
    27fa:	62 30       	cpi	r22, 0x02	; 2
    27fc:	71 05       	cpc	r23, r1
    27fe:	31 f0       	breq	.+12     	; 0x280c <persistRTC()+0x3a>
    2800:	67 2b       	or	r22, r23
    2802:	29 f4       	brne	.+10     	; 0x280e <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    2804:	47 60       	ori	r20, 0x07	; 7
    2806:	03 c0       	rjmp	.+6      	; 0x280e <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    2808:	43 60       	ori	r20, 0x03	; 3
    280a:	01 c0       	rjmp	.+2      	; 0x280e <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    280c:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    280e:	f9 99       	sbic	0x1f, 1	; 31
    2810:	fe cf       	rjmp	.-4      	; 0x280e <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2812:	8a e0       	ldi	r24, 0x0A	; 10
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	92 bd       	out	0x22, r25	; 34
    2818:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    281a:	f8 9a       	sbi	0x1f, 0	; 31
    281c:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    281e:	84 17       	cp	r24, r20
    2820:	91 f1       	breq	.+100    	; 0x2886 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    2822:	24 2f       	mov	r18, r20
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	82 23       	and	r24, r18
    282a:	93 23       	and	r25, r19
    282c:	28 17       	cp	r18, r24
    282e:	39 07       	cpc	r19, r25
    2830:	71 f0       	breq	.+28     	; 0x284e <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2832:	f9 99       	sbic	0x1f, 1	; 31
    2834:	fe cf       	rjmp	.-4      	; 0x2832 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2836:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2838:	8a e0       	ldi	r24, 0x0A	; 10
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	92 bd       	out	0x22, r25	; 34
    283e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2840:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	fa 9a       	sbi	0x1f, 2	; 31
    2848:	f9 9a       	sbi	0x1f, 1	; 31
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    284e:	8a e0       	ldi	r24, 0x0A	; 10
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	64 2f       	mov	r22, r20
    2854:	0e 94 a8 07 	call	0xf50	; 0xf50 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2858:	88 e0       	ldi	r24, 0x08	; 8
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	61 e6       	ldi	r22, 0x61	; 97
    285e:	73 e1       	ldi	r23, 0x13	; 19
    2860:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    2864:	20 91 a9 01 	lds	r18, 0x01A9
    2868:	30 91 aa 01 	lds	r19, 0x01AA
    286c:	82 17       	cp	r24, r18
    286e:	93 07       	cpc	r25, r19
    2870:	51 f0       	breq	.+20     	; 0x2886 <persistRTC()+0xb4>
    2872:	60 91 a9 01 	lds	r22, 0x01A9
    2876:	70 91 aa 01 	lds	r23, 0x01AA
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    287a:	88 e0       	ldi	r24, 0x08	; 8
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	49 e6       	ldi	r20, 0x69	; 105
    2880:	53 e1       	ldi	r21, 0x13	; 19
    2882:	0e 94 11 04 	call	0x822	; 0x822 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2886:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    2888:	1f 91       	pop	r17
    288a:	08 95       	ret

0000288c <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    288c:	1f 93       	push	r17
    288e:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    2890:	88 31       	cpi	r24, 0x18	; 24
    2892:	91 05       	cpc	r25, r1
    2894:	10 f5       	brcc	.+68     	; 0x28da <setHoursMinutesLT(int, int)+0x4e>
    2896:	77 fd       	sbrc	r23, 7
    2898:	20 c0       	rjmp	.+64     	; 0x28da <setHoursMinutesLT(int, int)+0x4e>
    289a:	6c 33       	cpi	r22, 0x3C	; 60
    289c:	71 05       	cpc	r23, r1
    289e:	ec f4       	brge	.+58     	; 0x28da <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    28a0:	8c e3       	ldi	r24, 0x3C	; 60
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	48 9f       	mul	r20, r24
    28a6:	90 01       	movw	r18, r0
    28a8:	49 9f       	mul	r20, r25
    28aa:	30 0d       	add	r19, r0
    28ac:	58 9f       	mul	r21, r24
    28ae:	30 0d       	add	r19, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	26 0f       	add	r18, r22
    28b4:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    28b6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28b8:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    28ba:	80 91 a7 01 	lds	r24, 0x01A7
    28be:	90 91 a8 01 	lds	r25, 0x01A8
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	31 f0       	breq	.+12     	; 0x28d4 <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    28c8:	30 93 a8 01 	sts	0x01A8, r19
    28cc:	20 93 a7 01 	sts	0x01A7, r18
      persistRTC();
    28d0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28d4:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    28da:	80 e0       	ldi	r24, 0x00	; 0
  }
    28dc:	1f 91       	pop	r17
    28de:	08 95       	ret

000028e0 <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    28e0:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    28e2:	82 30       	cpi	r24, 0x02	; 2
    28e4:	38 f4       	brcc	.+14     	; 0x28f4 <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    28e6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28e8:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0c 96       	adiw	r24, 0x0c	; 12
    28ee:	0e 94 94 07 	call	0xf28	; 0xf28 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28f2:	1f bf       	out	0x3f, r17	; 63
  }
    28f4:	1f 91       	pop	r17
    28f6:	08 95       	ret

000028f8 <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    28f8:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    28fa:	62 30       	cpi	r22, 0x02	; 2
    28fc:	98 f4       	brcc	.+38     	; 0x2924 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    28fe:	25 e0       	ldi	r18, 0x05	; 5
    2900:	80 3a       	cpi	r24, 0xA0	; 160
    2902:	92 07       	cpc	r25, r18
    2904:	78 f4       	brcc	.+30     	; 0x2924 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2906:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2908:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    290a:	26 2f       	mov	r18, r22
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	66 e0       	ldi	r22, 0x06	; 6
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    2916:	c9 01       	movw	r24, r18
    2918:	0c 96       	adiw	r24, 0x0c	; 12
    291a:	0e 94 be 07 	call	0xf7c	; 0xf7c <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    291e:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    2924:	80 e0       	ldi	r24, 0x00	; 0
  }
    2926:	1f 91       	pop	r17
    2928:	08 95       	ret

0000292a <getSimpleScheduleOn(unsigned char)>:
  }

// Get the simple/primary schedule on time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    292e:	82 30       	cpi	r24, 0x02	; 2
    2930:	20 f5       	brcc	.+72     	; 0x297a <getSimpleScheduleOn(unsigned char)+0x50>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2932:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2934:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2936:	f9 99       	sbic	0x1f, 1	; 31
    2938:	fe cf       	rjmp	.-4      	; 0x2936 <getSimpleScheduleOn(unsigned char)+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0c 96       	adiw	r24, 0x0c	; 12
    293e:	92 bd       	out	0x22, r25	; 34
    2940:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2942:	f8 9a       	sbi	0x1f, 0	; 31
    2944:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2946:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    2948:	90 3f       	cpi	r25, 0xF0	; 240
    294a:	b8 f4       	brcc	.+46     	; 0x297a <getSimpleScheduleOn(unsigned char)+0x50>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    294c:	86 e0       	ldi	r24, 0x06	; 6
    294e:	98 9f       	mul	r25, r24
    2950:	e0 01       	movw	r28, r0
    2952:	11 24       	eor	r1, r1
// Number of minutes of schedule on time to use.
// Will depend on eco bias.
// TODO: make gradual.
static inline uint8_t onTime()
  {
    const uint8_t lengthM = hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M;
    2954:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
    2958:	88 23       	and	r24, r24
    295a:	11 f4       	brne	.+4      	; 0x2960 <getSimpleScheduleOn(unsigned char)+0x36>
    295c:	88 e7       	ldi	r24, 0x78	; 120
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <getSimpleScheduleOn(unsigned char)+0x38>
    2960:	8c e3       	ldi	r24, 0x3C	; 60
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
  const uint8_t windBackM = (onTime() >> 2); // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    2962:	86 95       	lsr	r24
    2964:	86 95       	lsr	r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	c8 17       	cp	r28, r24
    296a:	d9 07       	cpc	r29, r25
    296c:	10 f4       	brcc	.+4      	; 0x2972 <getSimpleScheduleOn(unsigned char)+0x48>
    296e:	c0 56       	subi	r28, 0x60	; 96
    2970:	da 4f       	sbci	r29, 0xFA	; 250
  startTime -= windBackM;
    2972:	9e 01       	movw	r18, r28
    2974:	28 1b       	sub	r18, r24
    2976:	39 0b       	sbc	r19, r25
    2978:	02 c0       	rjmp	.+4      	; 0x297e <getSimpleScheduleOn(unsigned char)+0x54>
  return(startTime);
    297a:	2f ef       	ldi	r18, 0xFF	; 255
    297c:	3f ef       	ldi	r19, 0xFF	; 255
  }
    297e:	c9 01       	movw	r24, r18
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	08 95       	ret

00002986 <getSimpleScheduleOff(unsigned char)>:

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    298a:	0e 94 95 14 	call	0x292a	; 0x292a <getSimpleScheduleOn(unsigned char)>
    298e:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    2990:	8f ef       	ldi	r24, 0xFF	; 255
    2992:	cf 3f       	cpi	r28, 0xFF	; 255
    2994:	d8 07       	cpc	r29, r24
    2996:	19 f4       	brne	.+6      	; 0x299e <getSimpleScheduleOff(unsigned char)+0x18>
    2998:	2f ef       	ldi	r18, 0xFF	; 255
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	10 c0       	rjmp	.+32     	; 0x29be <getSimpleScheduleOff(unsigned char)+0x38>
// Number of minutes of schedule on time to use.
// Will depend on eco bias.
// TODO: make gradual.
static inline uint8_t onTime()
  {
    const uint8_t lengthM = hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M;
    299e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
    29a2:	88 23       	and	r24, r24
    29a4:	11 f4       	brne	.+4      	; 0x29aa <getSimpleScheduleOff(unsigned char)+0x24>
    29a6:	88 e7       	ldi	r24, 0x78	; 120
    29a8:	01 c0       	rjmp	.+2      	; 0x29ac <getSimpleScheduleOff(unsigned char)+0x26>
    29aa:	8c e3       	ldi	r24, 0x3C	; 60
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + onTime();
    29ac:	9e 01       	movw	r18, r28
    29ae:	28 0f       	add	r18, r24
    29b0:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    29b2:	85 e0       	ldi	r24, 0x05	; 5
    29b4:	20 3a       	cpi	r18, 0xA0	; 160
    29b6:	38 07       	cpc	r19, r24
    29b8:	10 f0       	brcs	.+4      	; 0x29be <getSimpleScheduleOff(unsigned char)+0x38>
    29ba:	20 5a       	subi	r18, 0xA0	; 160
    29bc:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    29be:	c9 01       	movw	r24, r18
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	08 95       	ret

000029c6 <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    29ce:	0e 94 76 13 	call	0x26ec	; 0x26ec <getMinutesSinceMidnightLT()>
    29d2:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	0e 94 95 14 	call	0x292a	; 0x292a <getSimpleScheduleOn(unsigned char)>
    29da:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    29dc:	08 17       	cp	r16, r24
    29de:	19 07       	cpc	r17, r25
    29e0:	68 f0       	brcs	.+26     	; 0x29fc <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 c3 14 	call	0x2986	; 0x2986 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    29e8:	8c 17       	cp	r24, r28
    29ea:	9d 07       	cpc	r25, r29
    29ec:	20 f0       	brcs	.+8      	; 0x29f6 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    29ee:	08 17       	cp	r16, r24
    29f0:	19 07       	cpc	r17, r25
    29f2:	20 f4       	brcc	.+8      	; 0x29fc <isAnyScheduleOnWARMNow()+0x36>
    29f4:	17 c0       	rjmp	.+46     	; 0x2a24 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    29f6:	80 56       	subi	r24, 0x60	; 96
    29f8:	9a 4f       	sbci	r25, 0xFA	; 250
    29fa:	f9 cf       	rjmp	.-14     	; 0x29ee <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	0e 94 95 14 	call	0x292a	; 0x292a <getSimpleScheduleOn(unsigned char)>
    2a02:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    2a04:	08 17       	cp	r16, r24
    2a06:	19 07       	cpc	r17, r25
    2a08:	58 f0       	brcs	.+22     	; 0x2a20 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	0e 94 c3 14 	call	0x2986	; 0x2986 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    2a10:	8c 17       	cp	r24, r28
    2a12:	9d 07       	cpc	r25, r29
    2a14:	10 f4       	brcc	.+4      	; 0x2a1a <isAnyScheduleOnWARMNow()+0x54>
    2a16:	80 56       	subi	r24, 0x60	; 96
    2a18:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    2a1a:	08 17       	cp	r16, r24
    2a1c:	19 07       	cpc	r17, r25
    2a1e:	10 f0       	brcs	.+4      	; 0x2a24 <isAnyScheduleOnWARMNow()+0x5e>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	08 95       	ret

00002a30 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2a36:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2a3a:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    2a3c:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    2a40:	10 91 a6 01 	lds	r17, 0x01A6
  const uint16_t m = getMinutesSinceMidnightLT();
    2a44:	0e 94 76 13 	call	0x26ec	; 0x26ec <getMinutesSinceMidnightLT()>
    2a48:	bc 01       	movw	r22, r24
  Serial.print(m);
    2a4a:	8e e0       	ldi	r24, 0x0E	; 14
    2a4c:	93 e0       	ldi	r25, 0x03	; 3
    2a4e:	4a e0       	ldi	r20, 0x0A	; 10
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	0e 94 8d 29 	call	0x531a	; 0x531a <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    2a56:	8e e0       	ldi	r24, 0x0E	; 14
    2a58:	93 e0       	ldi	r25, 0x03	; 3
    2a5a:	6a e3       	ldi	r22, 0x3A	; 58
    2a5c:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    2a60:	8e e0       	ldi	r24, 0x0E	; 14
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	61 2f       	mov	r22, r17
    2a66:	4a e0       	ldi	r20, 0x0A	; 10
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    2a6e:	8e e0       	ldi	r24, 0x0E	; 14
    2a70:	93 e0       	ldi	r25, 0x03	; 3
    2a72:	6a e3       	ldi	r22, 0x3A	; 58
    2a74:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    2a78:	8e e0       	ldi	r24, 0x0E	; 14
    2a7a:	93 e0       	ldi	r25, 0x03	; 3
    2a7c:	60 2f       	mov	r22, r16
    2a7e:	4a e0       	ldi	r20, 0x0A	; 10
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  _flush();
    2a86:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2a8a:	ff 20       	and	r15, r15
    2a8c:	11 f0       	breq	.+4      	; 0x2a92 <_debug_serial_timestamp()+0x62>
    2a8e:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	08 95       	ret

00002a9a <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2aa2:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2aa6:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(u);
    2aa8:	8e e0       	ldi	r24, 0x0E	; 14
    2aaa:	93 e0       	ldi	r25, 0x03	; 3
    2aac:	b8 01       	movw	r22, r16
    2aae:	4a e0       	ldi	r20, 0x0A	; 10
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	0e 94 8d 29 	call	0x531a	; 0x531a <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2ab6:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2aba:	ff 20       	and	r15, r15
    2abc:	11 f0       	breq	.+4      	; 0x2ac2 <serialPrintAndFlush(unsigned int, int)+0x28>
    2abe:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	08 95       	ret

00002aca <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2ad0:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2ad4:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    2ad6:	8e e0       	ldi	r24, 0x0E	; 14
    2ad8:	93 e0       	ldi	r25, 0x03	; 3
    2ada:	61 2f       	mov	r22, r17
    2adc:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2ae0:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2ae4:	00 23       	and	r16, r16
    2ae6:	11 f0       	breq	.+4      	; 0x2aec <serialPrintAndFlush(char)+0x22>
    2ae8:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	08 95       	ret

00002af2 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    2af2:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2af4:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2af8:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    2afa:	8e e0       	ldi	r24, 0x0E	; 14
    2afc:	93 e0       	ldi	r25, 0x03	; 3
    2afe:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b02:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b06:	11 23       	and	r17, r17
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <serialPrintlnAndFlush()+0x1c>
    2b0a:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2b0e:	1f 91       	pop	r17
    2b10:	08 95       	ret

00002b12 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b1a:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2b1e:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(i);
    2b20:	8e e0       	ldi	r24, 0x0E	; 14
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	b8 01       	movw	r22, r16
    2b26:	4a e0       	ldi	r20, 0x0A	; 10
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b2e:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b32:	ff 20       	and	r15, r15
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <serialPrintAndFlush(int, int)+0x28>
    2b36:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2b3a:	1f 91       	pop	r17
    2b3c:	0f 91       	pop	r16
    2b3e:	ff 90       	pop	r15
    2b40:	08 95       	ret

00002b42 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    2b42:	ff 92       	push	r15
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b4a:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2b4e:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    2b50:	8e e0       	ldi	r24, 0x0E	; 14
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	b8 01       	movw	r22, r16
    2b56:	0e 94 9f 28 	call	0x513e	; 0x513e <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b5a:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b5e:	ff 20       	and	r15, r15
    2b60:	11 f0       	breq	.+4      	; 0x2b66 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    2b62:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	ff 90       	pop	r15
    2b6c:	08 95       	ret

00002b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    2b6e:	ff 92       	push	r15
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2b76:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2b7a:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    2b7c:	8e e0       	ldi	r24, 0x0E	; 14
    2b7e:	93 e0       	ldi	r25, 0x03	; 3
    2b80:	b8 01       	movw	r22, r16
    2b82:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2b86:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2b8a:	ff 20       	and	r15, r15
    2b8c:	11 f0       	breq	.+4      	; 0x2b92 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    2b8e:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	ff 90       	pop	r15
    2b98:	08 95       	ret

00002b9a <getTempPotReducedNoise()>:

// Get reduced-noise temperature pot user control value (previously read with readTempPot()) in range [0,255]; very fast.
// In particular this value should not jitter between readings even if the pot is sitting at the boundary.
uint8_t getTempPotReducedNoise() { return(tempPotReducedNoise); }
    2b9a:	80 91 ad 01 	lds	r24, 0x01AD
    2b9e:	08 95       	ret

00002ba0 <readTempPot()>:

// Read the user 'temperature pot' setting in range [0,1023].
// This may consume significant power and time.
int readTempPot()
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(true);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	0e 94 a3 10 	call	0x2146	; 0x2146 <power_intermittent_peripherals_enable(bool)>
  const int tp = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <analogueNoiseReducedRead(int, unsigned char)>
    2bb4:	ec 01       	movw	r28, r24
  power_intermittent_peripherals_disable();
    2bb6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <power_intermittent_peripherals_disable()>

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new value.
  tempPot = tp;
    2bba:	d0 93 ac 01 	sts	0x01AC, r29
    2bbe:	c0 93 ab 01 	sts	0x01AB, r28

  // Capture reduced-noise value with a little hysteresis.
  const int shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    2bc2:	9e 01       	movw	r18, r28
    2bc4:	35 95       	asr	r19
    2bc6:	27 95       	ror	r18
    2bc8:	35 95       	asr	r19
    2bca:	27 95       	ror	r18
  if(((shifted > tempPotReducedNoise) && (shifted - tempPotReducedNoise >= RN_HYST)) ||
    2bcc:	80 91 ad 01 	lds	r24, 0x01AD
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	82 17       	cp	r24, r18
    2bd4:	93 07       	cpc	r25, r19
    2bd6:	2c f4       	brge	.+10     	; 0x2be2 <readTempPot()+0x42>
    2bd8:	a9 01       	movw	r20, r18
    2bda:	48 1b       	sub	r20, r24
    2bdc:	59 0b       	sbc	r21, r25
    2bde:	ca 01       	movw	r24, r20
    2be0:	05 c0       	rjmp	.+10     	; 0x2bec <readTempPot()+0x4c>
    2be2:	28 17       	cp	r18, r24
    2be4:	39 07       	cpc	r19, r25
    2be6:	44 f4       	brge	.+16     	; 0x2bf8 <readTempPot()+0x58>
    2be8:	82 1b       	sub	r24, r18
    2bea:	93 0b       	sbc	r25, r19
    2bec:	08 97       	sbiw	r24, 0x08	; 8
    2bee:	24 f0       	brlt	.+8      	; 0x2bf8 <readTempPot()+0x58>
     ((shifted < tempPotReducedNoise) && (tempPotReducedNoise - shifted >= RN_HYST)))
    {
    tempPotReducedNoise = (uint8_t) shifted;
    2bf0:	20 93 ad 01 	sts	0x01AD, r18
    markUIControlUsed(); // Note user operation of pot.
    2bf4:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	08 95       	ret

00002c00 <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    2c00:	80 91 ae 01 	lds	r24, 0x01AE
    2c04:	90 91 af 01 	lds	r25, 0x01AF
    2c08:	08 95       	ret

00002c0a <readTemperatureC16()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
#ifdef FAKE_TMP102
  temp16 = 17 * 16;
  return(temp16); // FAKE IT!
#endif

  const bool neededPowerUp = powerUpTWIIfDisabled();
    2c12:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <powerUpTWIIfDisabled()>
    2c16:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2c18:	8c e0       	ldi	r24, 0x0C	; 12
    2c1a:	92 e0       	ldi	r25, 0x02	; 2
    2c1c:	68 e4       	ldi	r22, 0x48	; 72
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	0e 94 18 22 	call	0x4430	; 0x4430 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2c24:	8c e0       	ldi	r24, 0x0C	; 12
    2c26:	92 e0       	ldi	r25, 0x02	; 2
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	0e 94 9a 22 	call	0x4534	; 0x4534 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    2c2e:	8c e0       	ldi	r24, 0x0C	; 12
    2c30:	92 e0       	ldi	r25, 0x02	; 2
    2c32:	61 e3       	ldi	r22, 0x31	; 49
    2c34:	0e 94 9a 22 	call	0x4534	; 0x4534 <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    2c38:	8c e0       	ldi	r24, 0x0C	; 12
    2c3a:	92 e0       	ldi	r25, 0x02	; 2
    2c3c:	0e 94 dd 22 	call	0x45ba	; 0x45ba <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2c40:	8c e0       	ldi	r24, 0x0C	; 12
    2c42:	92 e0       	ldi	r25, 0x02	; 2
    2c44:	68 e4       	ldi	r22, 0x48	; 72
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	0e 94 18 22 	call	0x4430	; 0x4430 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2c4c:	8c e0       	ldi	r24, 0x0C	; 12
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	0e 94 9a 22 	call	0x4534	; 0x4534 <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2c56:	8c e0       	ldi	r24, 0x0C	; 12
    2c58:	92 e0       	ldi	r25, 0x02	; 2
    2c5a:	61 eb       	ldi	r22, 0xB1	; 177
    2c5c:	0e 94 9a 22 	call	0x4534	; 0x4534 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2c60:	8c e0       	ldi	r24, 0x0C	; 12
    2c62:	92 e0       	ldi	r25, 0x02	; 2
    2c64:	0e 94 dd 22 	call	0x45ba	; 0x45ba <TwoWire::endTransmission()>
    2c68:	88 23       	and	r24, r24
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <readTemperatureC16()+0x64>
    2c6c:	4d c0       	rjmp	.+154    	; 0x2d08 <readTemperatureC16()+0xfe>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2c6e:	8c e0       	ldi	r24, 0x0C	; 12
    2c70:	92 e0       	ldi	r25, 0x02	; 2
    2c72:	68 e4       	ldi	r22, 0x48	; 72
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	0e 94 18 22 	call	0x4430	; 0x4430 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2c7a:	8c e0       	ldi	r24, 0x0C	; 12
    2c7c:	92 e0       	ldi	r25, 0x02	; 2
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	0e 94 9a 22 	call	0x4534	; 0x4534 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2c84:	8c e0       	ldi	r24, 0x0C	; 12
    2c86:	92 e0       	ldi	r25, 0x02	; 2
    2c88:	0e 94 dd 22 	call	0x45ba	; 0x45ba <TwoWire::endTransmission()>
    2c8c:	88 23       	and	r24, r24
    2c8e:	e1 f5       	brne	.+120    	; 0x2d08 <readTemperatureC16()+0xfe>
    2c90:	c8 e0       	ldi	r28, 0x08	; 8
    2c92:	d0 e0       	ldi	r29, 0x00	; 0
    2c94:	16 c0       	rjmp	.+44     	; 0x2cc2 <readTemperatureC16()+0xb8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { temp16 = 0; return(0); } // Exit if error.
    2c96:	1c 16       	cp	r1, r28
    2c98:	1d 06       	cpc	r1, r29
    2c9a:	b4 f5       	brge	.+108    	; 0x2d08 <readTemperatureC16()+0xfe>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { temp16 = 0; return(0); } // Exit if error.
    2c9c:	8c e0       	ldi	r24, 0x0C	; 12
    2c9e:	92 e0       	ldi	r25, 0x02	; 2
    2ca0:	68 e4       	ldi	r22, 0x48	; 72
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	41 e0       	ldi	r20, 0x01	; 1
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	0e 94 ee 22 	call	0x45dc	; 0x45dc <TwoWire::requestFrom(int, int)>
    2cac:	81 30       	cpi	r24, 0x01	; 1
    2cae:	61 f5       	brne	.+88     	; 0x2d08 <readTemperatureC16()+0xfe>
    const byte b1 = Wire.read();
    2cb0:	8c e0       	ldi	r24, 0x0C	; 12
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	0e 94 2b 22 	call	0x4456	; 0x4456 <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    2cb8:	87 fd       	sbrc	r24, 7
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <readTemperatureC16()+0xbc>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    2cc2:	21 97       	sbiw	r28, 0x01	; 1
    2cc4:	41 f7       	brne	.-48     	; 0x2c96 <readTemperatureC16()+0x8c>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2cc6:	8c e0       	ldi	r24, 0x0C	; 12
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	68 e4       	ldi	r22, 0x48	; 72
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	0e 94 18 22 	call	0x4430	; 0x4430 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    2cd2:	8c e0       	ldi	r24, 0x0C	; 12
    2cd4:	92 e0       	ldi	r25, 0x02	; 2
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	0e 94 9a 22 	call	0x4534	; 0x4534 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2cdc:	8c e0       	ldi	r24, 0x0C	; 12
    2cde:	92 e0       	ldi	r25, 0x02	; 2
    2ce0:	0e 94 dd 22 	call	0x45ba	; 0x45ba <TwoWire::endTransmission()>
    2ce4:	88 23       	and	r24, r24
    2ce6:	81 f4       	brne	.+32     	; 0x2d08 <readTemperatureC16()+0xfe>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { temp16 = 0; return(0); }
    2ce8:	8c e0       	ldi	r24, 0x0C	; 12
    2cea:	92 e0       	ldi	r25, 0x02	; 2
    2cec:	68 e4       	ldi	r22, 0x48	; 72
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	42 e0       	ldi	r20, 0x02	; 2
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	0e 94 ee 22 	call	0x45dc	; 0x45dc <TwoWire::requestFrom(int, int)>
    2cf8:	82 30       	cpi	r24, 0x02	; 2
    2cfa:	31 f4       	brne	.+12     	; 0x2d08 <readTemperatureC16()+0xfe>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2cfc:	8c e0       	ldi	r24, 0x0C	; 12
    2cfe:	92 e0       	ldi	r25, 0x02	; 2
    2d00:	0e 94 dd 22 	call	0x45ba	; 0x45ba <TwoWire::endTransmission()>
    2d04:	88 23       	and	r24, r24
    2d06:	39 f0       	breq	.+14     	; 0x2d16 <readTemperatureC16()+0x10c>
    2d08:	10 92 af 01 	sts	0x01AF, r1
    2d0c:	10 92 ae 01 	sts	0x01AE, r1
    2d10:	c0 e0       	ldi	r28, 0x00	; 0
    2d12:	d0 e0       	ldi	r29, 0x00	; 0
    2d14:	2a c0       	rjmp	.+84     	; 0x2d6a <readTemperatureC16()+0x160>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    2d16:	8c e0       	ldi	r24, 0x0C	; 12
    2d18:	92 e0       	ldi	r25, 0x02	; 2
    2d1a:	0e 94 2b 22 	call	0x4456	; 0x4456 <TwoWire::read()>
    2d1e:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    2d20:	8c e0       	ldi	r24, 0x0C	; 12
    2d22:	92 e0       	ldi	r25, 0x02	; 2
    2d24:	0e 94 2b 22 	call	0x4456	; 0x4456 <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    2d28:	17 fd       	sbrc	r17, 7
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <readTemperatureC16()+0x128>
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <readTemperatureC16()+0x12c>
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 ef       	ldi	r19, 0xF0	; 240
    2d36:	c8 2f       	mov	r28, r24
    2d38:	d0 e0       	ldi	r29, 0x00	; 0
    2d3a:	54 e0       	ldi	r21, 0x04	; 4
    2d3c:	d5 95       	asr	r29
    2d3e:	c7 95       	ror	r28
    2d40:	5a 95       	dec	r21
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <readTemperatureC16()+0x132>
    2d44:	81 2f       	mov	r24, r17
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	44 e0       	ldi	r20, 0x04	; 4
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	4a 95       	dec	r20
    2d50:	e1 f7       	brne	.-8      	; 0x2d4a <readTemperatureC16()+0x140>
    2d52:	c8 2b       	or	r28, r24
    2d54:	d9 2b       	or	r29, r25
    2d56:	c2 2b       	or	r28, r18
    2d58:	d3 2b       	or	r29, r19

  // Store the result for access at any time.
  temp16 = t16;
    2d5a:	d0 93 af 01 	sts	0x01AF, r29
    2d5e:	c0 93 ae 01 	sts	0x01AE, r28
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    2d62:	00 23       	and	r16, r16
    2d64:	11 f0       	breq	.+4      	; 0x2d6a <readTemperatureC16()+0x160>
    2d66:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <powerDownTWI()>

  return(t16);
  }
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	08 95       	ret

00002d76 <inWarmModeDebounced()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then is in WARM (or BAKE) mode, but 'debounced' to avoid accidental operation.
static bool isWarmModeDebounced;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmModeDebounced() { return(isWarmModeDebounced); }
    2d76:	80 91 ba 01 	lds	r24, 0x01BA
    2d7a:	08 95       	ret

00002d7c <inBakeModeDebounced()>:
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    2d7c:	80 91 ba 01 	lds	r24, 0x01BA
    2d80:	88 23       	and	r24, r24
    2d82:	21 f0       	breq	.+8      	; 0x2d8c <inBakeModeDebounced()+0x10>
    2d84:	80 91 bc 01 	lds	r24, 0x01BC
    2d88:	81 11       	cpse	r24, r1
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	08 95       	ret

00002d8e <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    2d8e:	10 92 bc 01 	sts	0x01BC, r1
    2d92:	08 95       	ret

00002d94 <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLITimeoutM); }
    2d94:	80 91 04 01 	lds	r24, 0x0104
    2d98:	81 11       	cpse	r24, r1
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	08 95       	ret

00002d9e <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    2d9e:	8e e0       	ldi	r24, 0x0E	; 14
    2da0:	93 e0       	ldi	r25, 0x03	; 3
    2da2:	60 e2       	ldi	r22, 0x20	; 32
    2da4:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    2da8:	08 95       	ret

00002daa <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    2daa:	8e e0       	ldi	r24, 0x0E	; 14
    2dac:	93 e0       	ldi	r25, 0x03	; 3
    2dae:	63 e3       	ldi	r22, 0x33	; 51
    2db0:	74 e0       	ldi	r23, 0x04	; 4
    2db2:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
    2db6:	08 95       	ret

00002db8 <printCLILine(char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(char syntax, __FlashStringHelper const *description)
    2db8:	1f 93       	push	r17
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	eb 01       	movw	r28, r22
  {
  Serial.print(syntax);
    2dc2:	8e e0       	ldi	r24, 0x0E	; 14
    2dc4:	93 e0       	ldi	r25, 0x03	; 3
    2dc6:	62 2f       	mov	r22, r18
    2dc8:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.flush();
    2dcc:	8e e0       	ldi	r24, 0x0E	; 14
    2dce:	93 e0       	ldi	r25, 0x03	; 3
    2dd0:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2dd4:	80 91 b2 00 	lds	r24, 0x00B2
    2dd8:	80 3e       	cpi	r24, 0xE0	; 224
    2dda:	10 f4       	brcc	.+4      	; 0x2de0 <printCLILine(char, __FlashStringHelper const*)+0x28>
    2ddc:	19 e0       	ldi	r17, 0x09	; 9
    2dde:	07 c0       	rjmp	.+14     	; 0x2dee <printCLILine(char, __FlashStringHelper const*)+0x36>
    2de0:	8e e0       	ldi	r24, 0x0E	; 14
    2de2:	93 e0       	ldi	r25, 0x03	; 3
    2de4:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
    2de8:	09 c0       	rjmp	.+18     	; 0x2dfc <printCLILine(char, __FlashStringHelper const*)+0x44>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    2dea:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    2dee:	11 50       	subi	r17, 0x01	; 1
    2df0:	e0 f7       	brcc	.-8      	; 0x2dea <printCLILine(char, __FlashStringHelper const*)+0x32>
  Serial.println(description);
    2df2:	8e e0       	ldi	r24, 0x0E	; 14
    2df4:	93 e0       	ldi	r25, 0x03	; 3
    2df6:	be 01       	movw	r22, r28
    2df8:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
  }
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	1f 91       	pop	r17
    2e02:	08 95       	ret

00002e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>:

#define SYNTAX_COL_WIDTH 10 // Width of 'syntax' column; strictly positive.
#define STOP_PRINTING_DESCRIPTION_AT (GSCT_MAX-(GSCT_MAX/8)) // Time into minor cycle after which the description should be skipped.
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(__FlashStringHelper const *syntax, __FlashStringHelper const *description)
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	ec 01       	movw	r28, r24
    2e10:	7b 01       	movw	r14, r22
  {
  Serial.print(syntax);
    2e12:	8e e0       	ldi	r24, 0x0E	; 14
    2e14:	93 e0       	ldi	r25, 0x03	; 3
    2e16:	be 01       	movw	r22, r28
    2e18:	0e 94 9f 28 	call	0x513e	; 0x513e <Print::print(__FlashStringHelper const*)>
  Serial.flush();
    2e1c:	8e e0       	ldi	r24, 0x0E	; 14
    2e1e:	93 e0       	ldi	r25, 0x03	; 3
    2e20:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2e24:	80 91 b2 00 	lds	r24, 0x00B2
    2e28:	80 3e       	cpi	r24, 0xE0	; 224
    2e2a:	28 f0       	brcs	.+10     	; 0x2e36 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x32>
    2e2c:	8e e0       	ldi	r24, 0x0E	; 14
    2e2e:	93 e0       	ldi	r25, 0x03	; 3
    2e30:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
    2e34:	10 c0       	rjmp	.+32     	; 0x2e56 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x52>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    2e36:	ce 01       	movw	r24, r28
    2e38:	0e 94 b6 03 	call	0x76c	; 0x76c <strlen_P>
    2e3c:	1a e0       	ldi	r17, 0x0A	; 10
    2e3e:	18 1b       	sub	r17, r24
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x42>
    2e42:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    2e46:	11 50       	subi	r17, 0x01	; 1
    2e48:	17 ff       	sbrs	r17, 7
    2e4a:	fb cf       	rjmp	.-10     	; 0x2e42 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
  Serial.println(description);
    2e4c:	8e e0       	ldi	r24, 0x0E	; 14
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	b7 01       	movw	r22, r14
    2e52:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
  }
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	ff 90       	pop	r15
    2e5e:	ef 90       	pop	r14
    2e60:	08 95       	ret

00002e62 <dumpCLIUsage()>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage()
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
  {
  Serial.println();
    2e66:	0e e0       	ldi	r16, 0x0E	; 14
    2e68:	13 e0       	ldi	r17, 0x03	; 3
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
  Serial.println(F("CLI usage:"));
    2e70:	c8 01       	movw	r24, r16
    2e72:	68 e2       	ldi	r22, 0x28	; 40
    2e74:	74 e0       	ldi	r23, 0x04	; 4
    2e76:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
  printCLILine('?', F("this help"));
    2e7a:	8f e3       	ldi	r24, 0x3F	; 63
    2e7c:	6e e1       	ldi	r22, 0x1E	; 30
    2e7e:	74 e0       	ldi	r23, 0x04	; 4
    2e80:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(F("C M"), F("Central hub: minimum M mins on, 0 disabled"));
    2e84:	8a e1       	ldi	r24, 0x1A	; 26
    2e86:	94 e0       	ldi	r25, 0x04	; 4
    2e88:	6f ee       	ldi	r22, 0xEF	; 239
    2e8a:	73 e0       	ldi	r23, 0x03	; 3
    2e8c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(F("D N"), F("Dump stats set N"));
    2e90:	8b ee       	ldi	r24, 0xEB	; 235
    2e92:	93 e0       	ldi	r25, 0x03	; 3
    2e94:	6a ed       	ldi	r22, 0xDA	; 218
    2e96:	73 e0       	ldi	r23, 0x03	; 3
    2e98:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('E', F("Exit CLI"));
    2e9c:	85 e4       	ldi	r24, 0x45	; 69
    2e9e:	61 ed       	ldi	r22, 0xD1	; 209
    2ea0:	73 e0       	ldi	r23, 0x03	; 3
    2ea2:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('F', F("Frost"));
    2ea6:	86 e4       	ldi	r24, 0x46	; 70
    2ea8:	6b ec       	ldi	r22, 0xCB	; 203
    2eaa:	73 e0       	ldi	r23, 0x03	; 3
    2eac:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("F CC"), F("set Frost temp CC"));
    2eb0:	86 ec       	ldi	r24, 0xC6	; 198
    2eb2:	93 e0       	ldi	r25, 0x03	; 3
    2eb4:	64 eb       	ldi	r22, 0xB4	; 180
    2eb6:	73 e0       	ldi	r23, 0x03	; 3
    2eb8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(F("H"), F("clear wireless FHT8V House codes"));
    2ebc:	82 eb       	ldi	r24, 0xB2	; 178
    2ebe:	93 e0       	ldi	r25, 0x03	; 3
    2ec0:	61 e9       	ldi	r22, 0x91	; 145
    2ec2:	73 e0       	ldi	r23, 0x03	; 3
    2ec4:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(F("H H1 H2"), F("set wireless FHT8V House codes 1&2"));
    2ec8:	89 e8       	ldi	r24, 0x89	; 137
    2eca:	93 e0       	ldi	r25, 0x03	; 3
    2ecc:	66 e6       	ldi	r22, 0x66	; 102
    2ece:	73 e0       	ldi	r23, 0x03	; 3
    2ed0:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
    2ed4:	8c e4       	ldi	r24, 0x4C	; 76
    2ed6:	61 e2       	ldi	r22, 0x21	; 33
    2ed8:	73 e0       	ldi	r23, 0x03	; 3
    2eda:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("L S"), F("Learn to warm every 24h from now, or clear if in frost mode, schedule S"));
    2ede:	8d e1       	ldi	r24, 0x1D	; 29
    2ee0:	93 e0       	ldi	r25, 0x03	; 3
    2ee2:	65 ed       	ldi	r22, 0xD5	; 213
    2ee4:	72 e0       	ldi	r23, 0x02	; 2
    2ee6:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
    2eea:	8d ec       	ldi	r24, 0xCD	; 205
    2eec:	92 e0       	ldi	r25, 0x02	; 2
    2eee:	6c e9       	ldi	r22, 0x9C	; 156
    2ef0:	72 e0       	ldi	r23, 0x02	; 2
    2ef2:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    2ef6:	82 e9       	ldi	r24, 0x92	; 146
    2ef8:	92 e0       	ldi	r25, 0x02	; 2
    2efa:	61 e6       	ldi	r22, 0x61	; 97
    2efc:	72 e0       	ldi	r23, 0x02	; 2
    2efe:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine('Q', F("Quick Heat (BAKE)"));
    2f02:	81 e5       	ldi	r24, 0x51	; 81
    2f04:	6f e4       	ldi	r22, 0x4F	; 79
    2f06:	72 e0       	ldi	r23, 0x02	; 2
    2f08:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
#endif
  printCLILine(F("R N"), F("dump Raw stats set N"));
    2f0c:	8b e4       	ldi	r24, 0x4B	; 75
    2f0e:	92 e0       	ldi	r25, 0x02	; 2
    2f10:	66 e3       	ldi	r22, 0x36	; 54
    2f12:	72 e0       	ldi	r23, 0x02	; 2
    2f14:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('S', F("show Status and smart warming for next 24h"));
    2f18:	83 e5       	ldi	r24, 0x53	; 83
    2f1a:	6b e0       	ldi	r22, 0x0B	; 11
    2f1c:	72 e0       	ldi	r23, 0x02	; 2
    2f1e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("T HH MM"), F("set 24h Time"));
    2f22:	83 e0       	ldi	r24, 0x03	; 3
    2f24:	92 e0       	ldi	r25, 0x02	; 2
    2f26:	66 ef       	ldi	r22, 0xF6	; 246
    2f28:	71 e0       	ldi	r23, 0x01	; 1
    2f2a:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('W', F("Warm"));
    2f2e:	87 e5       	ldi	r24, 0x57	; 87
    2f30:	61 ef       	ldi	r22, 0xF1	; 241
    2f32:	71 e0       	ldi	r23, 0x01	; 1
    2f34:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("W CC"), F("set Warm temp CC"));
    2f38:	8c ee       	ldi	r24, 0xEC	; 236
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	6b ed       	ldi	r22, 0xDB	; 219
    2f3e:	71 e0       	ldi	r23, 0x01	; 1
    2f40:	0e 94 02 17 	call	0x2e04	; 0x2e04 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('Z', F("Zap stats"));
    2f44:	8a e5       	ldi	r24, 0x5A	; 90
    2f46:	61 ed       	ldi	r22, 0xD1	; 209
    2f48:	71 e0       	ldi	r23, 0x01	; 1
    2f4a:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <printCLILine(char, __FlashStringHelper const*)>
  Serial.println();
    2f4e:	c8 01       	movw	r24, r16
    2f50:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
  }
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	08 95       	ret

00002f5a <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    2f5a:	1f 93       	push	r17
    2f5c:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(isWarmModeDebounced) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    2f5e:	80 91 ba 01 	lds	r24, 0x01BA
    2f62:	88 23       	and	r24, r24
    2f64:	31 f0       	breq	.+12     	; 0x2f72 <handleLEARN(unsigned char)+0x18>
    2f66:	0e 94 76 13 	call	0x26ec	; 0x26ec <getMinutesSinceMidnightLT()>
    2f6a:	61 2f       	mov	r22, r17
    2f6c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <setSimpleSchedule(unsigned int, unsigned char)>
    2f70:	03 c0       	rjmp	.+6      	; 0x2f78 <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    2f72:	81 2f       	mov	r24, r17
    2f74:	0e 94 70 14 	call	0x28e0	; 0x28e0 <clearSimpleSchedule(unsigned char)>
  }
    2f78:	1f 91       	pop	r17
    2f7a:	08 95       	ret

00002f7c <serialStatusReport()>:
The ";" terminates this current/Celsius section.
'HC' introduces the FHT8V house codes, if supported.
eg 'HC255 255'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    2f7c:	df 92       	push	r13
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2f8a:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    2f8e:	d8 2e       	mov	r13, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
    2f90:	8e e0       	ldi	r24, 0x0E	; 14
    2f92:	93 e0       	ldi	r25, 0x03	; 3
    2f94:	6d e3       	ldi	r22, 0x3D	; 61
    2f96:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    2f9a:	80 91 ba 01 	lds	r24, 0x01BA
    2f9e:	88 23       	and	r24, r24
    2fa0:	11 f4       	brne	.+4      	; 0x2fa6 <serialStatusReport()+0x2a>
    2fa2:	66 e4       	ldi	r22, 0x46	; 70
    2fa4:	07 c0       	rjmp	.+14     	; 0x2fb4 <serialStatusReport()+0x38>
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    2fa6:	80 91 bc 01 	lds	r24, 0x01BC
    2faa:	88 23       	and	r24, r24
    2fac:	11 f4       	brne	.+4      	; 0x2fb2 <serialStatusReport()+0x36>
    2fae:	67 e5       	ldi	r22, 0x57	; 87
    2fb0:	01 c0       	rjmp	.+2      	; 0x2fb4 <serialStatusReport()+0x38>
    2fb2:	62 e4       	ldi	r22, 0x42	; 66

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    2fb4:	8e e0       	ldi	r24, 0x0E	; 14
    2fb6:	93 e0       	ldi	r25, 0x03	; 3
    2fb8:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
#else
  Serial.print(inWarmModeDebounced() ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target valve position.
    2fbc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    2fc0:	68 2f       	mov	r22, r24
    2fc2:	8e e0       	ldi	r24, 0x0E	; 14
    2fc4:	93 e0       	ldi	r25, 0x03	; 3
    2fc6:	4a e0       	ldi	r20, 0x0A	; 10
    2fc8:	50 e0       	ldi	r21, 0x00	; 0
    2fca:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
    2fce:	8e e0       	ldi	r24, 0x0E	; 14
    2fd0:	93 e0       	ldi	r25, 0x03	; 3
    2fd2:	65 e2       	ldi	r22, 0x25	; 37
    2fd4:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  const int temp = getTemperatureC16();
    2fd8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <getTemperatureC16()>
    2fdc:	8c 01       	movw	r16, r24
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    2fde:	8e e0       	ldi	r24, 0x0E	; 14
    2fe0:	93 e0       	ldi	r25, 0x03	; 3
    2fe2:	60 e4       	ldi	r22, 0x40	; 64
    2fe4:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    2fe8:	b8 01       	movw	r22, r16
    2fea:	84 e0       	ldi	r24, 0x04	; 4
    2fec:	75 95       	asr	r23
    2fee:	67 95       	ror	r22
    2ff0:	8a 95       	dec	r24
    2ff2:	e1 f7       	brne	.-8      	; 0x2fec <serialStatusReport()+0x70>
    2ff4:	8e e0       	ldi	r24, 0x0E	; 14
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	4a e0       	ldi	r20, 0x0A	; 10
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
    3000:	8e e0       	ldi	r24, 0x0E	; 14
    3002:	93 e0       	ldi	r25, 0x03	; 3
    3004:	63 e4       	ldi	r22, 0x43	; 67
    3006:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    300a:	0f 70       	andi	r16, 0x0F	; 15
    300c:	10 70       	andi	r17, 0x00	; 0
    300e:	8e e0       	ldi	r24, 0x0E	; 14
    3010:	93 e0       	ldi	r25, 0x03	; 3
    3012:	b8 01       	movw	r22, r16
    3014:	40 e1       	ldi	r20, 0x10	; 16
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>

  Serial.print(';'); // End of initial section.
    301c:	8e e0       	ldi	r24, 0x0E	; 14
    301e:	93 e0       	ldi	r25, 0x03	; 3
    3020:	6b e3       	ldi	r22, 0x3B	; 59
    3022:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  const uint_least8_t hh = getHoursLT();
    3026:	0e 94 8b 13 	call	0x2716	; 0x2716 <getHoursLT()>
    302a:	e8 2e       	mov	r14, r24
  const uint_least8_t mm = getMinutesLT();
    302c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <getMinutesLT()>
    3030:	18 2f       	mov	r17, r24
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    3032:	8e e0       	ldi	r24, 0x0E	; 14
    3034:	93 e0       	ldi	r25, 0x03	; 3
    3036:	64 e5       	ldi	r22, 0x54	; 84
    3038:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    303c:	8e e0       	ldi	r24, 0x0E	; 14
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	6e 2d       	mov	r22, r14
    3042:	4a e0       	ldi	r20, 0x0A	; 10
    3044:	50 e0       	ldi	r21, 0x00	; 0
    3046:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
    304a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    304e:	8e e0       	ldi	r24, 0x0E	; 14
    3050:	93 e0       	ldi	r25, 0x03	; 3
    3052:	61 2f       	mov	r22, r17
    3054:	4a e0       	ldi	r20, 0x0A	; 10
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
    305c:	ff 24       	eor	r15, r15

  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    305e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    3062:	8f 2d       	mov	r24, r15
    3064:	0e 94 95 14 	call	0x292a	; 0x292a <getSimpleScheduleOn(unsigned char)>
    3068:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    306a:	85 e0       	ldi	r24, 0x05	; 5
    306c:	e0 3a       	cpi	r30, 0xA0	; 160
    306e:	f8 07       	cpc	r31, r24
    3070:	28 f0       	brcs	.+10     	; 0x307c <serialStatusReport()+0x100>
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	cf ef       	ldi	r28, 0xFF	; 255
    3078:	d0 e0       	ldi	r29, 0x00	; 0
    307a:	0c c0       	rjmp	.+24     	; 0x3094 <serialStatusReport()+0x118>
    307c:	cf 01       	movw	r24, r30
    307e:	6c e3       	ldi	r22, 0x3C	; 60
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    3086:	eb 01       	movw	r28, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    3088:	cf 01       	movw	r24, r30
    308a:	6c e3       	ldi	r22, 0x3C	; 60
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    3092:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    3094:	8e e0       	ldi	r24, 0x0E	; 14
    3096:	93 e0       	ldi	r25, 0x03	; 3
    3098:	67 e5       	ldi	r22, 0x57	; 87
    309a:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    309e:	8e e0       	ldi	r24, 0x0E	; 14
    30a0:	93 e0       	ldi	r25, 0x03	; 3
    30a2:	be 01       	movw	r22, r28
    30a4:	4a e0       	ldi	r20, 0x0A	; 10
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
    30ac:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    30b0:	8e e0       	ldi	r24, 0x0E	; 14
    30b2:	93 e0       	ldi	r25, 0x03	; 3
    30b4:	b8 01       	movw	r22, r16
    30b6:	4a e0       	ldi	r20, 0x0A	; 10
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
    Serial_print_space();
    30be:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    30c2:	8f 2d       	mov	r24, r15
    30c4:	0e 94 c3 14 	call	0x2986	; 0x2986 <getSimpleScheduleOff(unsigned char)>
    30c8:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    30ca:	85 e0       	ldi	r24, 0x05	; 5
    30cc:	e0 3a       	cpi	r30, 0xA0	; 160
    30ce:	f8 07       	cpc	r31, r24
    30d0:	28 f0       	brcs	.+10     	; 0x30dc <serialStatusReport()+0x160>
    30d2:	00 e0       	ldi	r16, 0x00	; 0
    30d4:	10 e0       	ldi	r17, 0x00	; 0
    30d6:	cf ef       	ldi	r28, 0xFF	; 255
    30d8:	d0 e0       	ldi	r29, 0x00	; 0
    30da:	0c c0       	rjmp	.+24     	; 0x30f4 <serialStatusReport()+0x178>
    30dc:	cf 01       	movw	r24, r30
    30de:	6c e3       	ldi	r22, 0x3C	; 60
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    30e6:	eb 01       	movw	r28, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    30e8:	cf 01       	movw	r24, r30
    30ea:	6c e3       	ldi	r22, 0x3C	; 60
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodhi4>
    30f2:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    30f4:	8e e0       	ldi	r24, 0x0E	; 14
    30f6:	93 e0       	ldi	r25, 0x03	; 3
    30f8:	66 e4       	ldi	r22, 0x46	; 70
    30fa:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    30fe:	8e e0       	ldi	r24, 0x0E	; 14
    3100:	93 e0       	ldi	r25, 0x03	; 3
    3102:	be 01       	movw	r22, r28
    3104:	4a e0       	ldi	r20, 0x0A	; 10
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
    310c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    3110:	8e e0       	ldi	r24, 0x0E	; 14
    3112:	93 e0       	ldi	r25, 0x03	; 3
    3114:	b8 01       	movw	r22, r16
    3116:	4a e0       	ldi	r20, 0x0A	; 10
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);

  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    311e:	f3 94       	inc	r15
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	f8 16       	cp	r15, r24
    3124:	09 f0       	breq	.+2      	; 0x3128 <serialStatusReport()+0x1ac>
    3126:	9b cf       	rjmp	.-202    	; 0x305e <serialStatusReport()+0xe2>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate at least one schedule should be on now.
    3128:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <isAnyScheduleOnWARMNow()>
    312c:	88 23       	and	r24, r24
    312e:	29 f0       	breq	.+10     	; 0x313a <serialStatusReport()+0x1be>
    3130:	8e e0       	ldi	r24, 0x0E	; 14
    3132:	93 e0       	ldi	r25, 0x03	; 3
    3134:	6a e2       	ldi	r22, 0x2A	; 42
    3136:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>

#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    313a:	8e e0       	ldi	r24, 0x0E	; 14
    313c:	93 e0       	ldi	r25, 0x03	; 3
    313e:	6b e3       	ldi	r22, 0x3B	; 59
    3140:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.print('C'); // Current Celsius target, and FROST and WARM settings.
    3144:	8e e0       	ldi	r24, 0x0E	; 14
    3146:	93 e0       	ldi	r25, 0x03	; 3
    3148:	63 e4       	ldi	r22, 0x43	; 67
    314a:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.print(getTargetTempC());
    314e:	0e 94 67 04 	call	0x8ce	; 0x8ce <getTargetTempC()>
    3152:	68 2f       	mov	r22, r24
    3154:	8e e0       	ldi	r24, 0x0E	; 14
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	4a e0       	ldi	r20, 0x0A	; 10
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  Serial_print_space();
    3160:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    3164:	0e 94 ee 04 	call	0x9dc	; 0x9dc <getFROSTTargetC()>
    3168:	68 2f       	mov	r22, r24
    316a:	8e e0       	ldi	r24, 0x0E	; 14
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	4a e0       	ldi	r20, 0x0A	; 10
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  Serial_print_space();
    3176:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
  Serial.print(getWARMTargetC());
    317a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
    317e:	68 2f       	mov	r22, r24
    3180:	8e e0       	ldi	r24, 0x0E	; 14
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	4a e0       	ldi	r20, 0x0A	; 10
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  Serial_print_space();
    318c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
  // Show bias.
  Serial.print(hasEcoBias() ? 'e' : 'c'); // Show eco/comfort bias.
    3190:	0e 94 e7 04 	call	0x9ce	; 0x9ce <hasEcoBias()>
    3194:	88 23       	and	r24, r24
    3196:	11 f4       	brne	.+4      	; 0x319c <serialStatusReport()+0x220>
    3198:	63 e6       	ldi	r22, 0x63	; 99
    319a:	01 c0       	rjmp	.+2      	; 0x319e <serialStatusReport()+0x222>
    319c:	65 e6       	ldi	r22, 0x65	; 101
    319e:	8e e0       	ldi	r24, 0x0E	; 14
    31a0:	93 e0       	ldi	r25, 0x03	; 3
    31a2:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  // Show warming predictions.
  Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f');
    31a6:	8e 2d       	mov	r24, r14
    31a8:	0e 94 05 05 	call	0xa0a	; 0xa0a <shouldBeWarmedAtHour(unsigned char)>
    31ac:	88 23       	and	r24, r24
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <serialStatusReport()+0x238>
    31b0:	66 e6       	ldi	r22, 0x66	; 102
    31b2:	01 c0       	rjmp	.+2      	; 0x31b6 <serialStatusReport()+0x23a>
    31b4:	67 e7       	ldi	r22, 0x77	; 119
    31b6:	8e e0       	ldi	r24, 0x0E	; 14
    31b8:	93 e0       	ldi	r25, 0x03	; 3
    31ba:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.print(shouldBeWarmedAtHour(hh < 23 ? (hh+1) : 0) ? 'w' : 'f');
    31be:	86 e1       	ldi	r24, 0x16	; 22
    31c0:	8e 15       	cp	r24, r14
    31c2:	10 f4       	brcc	.+4      	; 0x31c8 <serialStatusReport()+0x24c>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <serialStatusReport()+0x250>
    31c8:	8e 2d       	mov	r24, r14
    31ca:	8f 5f       	subi	r24, 0xFF	; 255
    31cc:	0e 94 05 05 	call	0xa0a	; 0xa0a <shouldBeWarmedAtHour(unsigned char)>
    31d0:	88 23       	and	r24, r24
    31d2:	11 f4       	brne	.+4      	; 0x31d8 <serialStatusReport()+0x25c>
    31d4:	66 e6       	ldi	r22, 0x66	; 102
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <serialStatusReport()+0x25e>
    31d8:	67 e7       	ldi	r22, 0x77	; 119
    31da:	8e e0       	ldi	r24, 0x0E	; 14
    31dc:	93 e0       	ldi	r25, 0x03	; 3
    31de:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  // Show occupancy if known.
  if(isLikelyOccupied()) { Serial.print(isLikelyRecentlyOccupied() ? 'O' : 'o'); } // Show room occupied and how recently.
    31e2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <isLikelyOccupied()>
    31e6:	88 23       	and	r24, r24
    31e8:	59 f0       	breq	.+22     	; 0x3200 <serialStatusReport()+0x284>
    31ea:	0e 94 79 04 	call	0x8f2	; 0x8f2 <isLikelyRecentlyOccupied()>
    31ee:	88 23       	and	r24, r24
    31f0:	11 f4       	brne	.+4      	; 0x31f6 <serialStatusReport()+0x27a>
    31f2:	6f e6       	ldi	r22, 0x6F	; 111
    31f4:	01 c0       	rjmp	.+2      	; 0x31f8 <serialStatusReport()+0x27c>
    31f6:	6f e4       	ldi	r22, 0x4F	; 79
    31f8:	8e e0       	ldi	r24, 0x0E	; 14
    31fa:	93 e0       	ldi	r25, 0x03	; 3
    31fc:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
#endif

#ifdef ENABLE_BOILER_HUB
  Serial.print(';'); // Terminate previous section.
    3200:	8e e0       	ldi	r24, 0x0E	; 14
    3202:	93 e0       	ldi	r25, 0x03	; 3
    3204:	6b e3       	ldi	r22, 0x3B	; 59
    3206:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.print('C'); // Indicate central hub mode available.
    320a:	8e e0       	ldi	r24, 0x0E	; 14
    320c:	93 e0       	ldi	r25, 0x03	; 3
    320e:	63 e4       	ldi	r22, 0x43	; 67
    3210:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.print(getMinBoilerOnMinutes()); // Show min 'on' time, or zero if disabled.
    3214:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getMinBoilerOnMinutes()>
    3218:	68 2f       	mov	r22, r24
    321a:	8e e0       	ldi	r24, 0x0E	; 14
    321c:	93 e0       	ldi	r25, 0x03	; 3
    321e:	4a e0       	ldi	r20, 0x0A	; 10
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
#endif

#if defined(USE_MODULE_FHT8VSIMPLE)
  Serial.print(';'); // Terminate previous section.
    3226:	8e e0       	ldi	r24, 0x0E	; 14
    3228:	93 e0       	ldi	r25, 0x03	; 3
    322a:	6b e3       	ldi	r22, 0x3B	; 59
    322c:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  Serial.print(F("HC"));
    3230:	8e e0       	ldi	r24, 0x0E	; 14
    3232:	93 e0       	ldi	r25, 0x03	; 3
    3234:	65 e4       	ldi	r22, 0x45	; 69
    3236:	74 e0       	ldi	r23, 0x04	; 4
    3238:	0e 94 9f 28 	call	0x513e	; 0x513e <Print::print(__FlashStringHelper const*)>
  Serial.print(FHT8VGetHC1());
    323c:	0e 94 ca 08 	call	0x1194	; 0x1194 <FHT8VGetHC1()>
    3240:	68 2f       	mov	r22, r24
    3242:	8e e0       	ldi	r24, 0x0E	; 14
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	4a e0       	ldi	r20, 0x0A	; 10
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  Serial_print_space();
    324e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
  Serial.print(FHT8VGetHC2());
    3252:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <FHT8VGetHC2()>
    3256:	68 2f       	mov	r22, r24
    3258:	8e e0       	ldi	r24, 0x0E	; 14
    325a:	93 e0       	ldi	r25, 0x03	; 3
    325c:	4a e0       	ldi	r20, 0x0A	; 10
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
  if(!isSyncedWithFHT8V())
    3264:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <isSyncedWithFHT8V()>
    3268:	88 23       	and	r24, r24
    326a:	39 f4       	brne	.+14     	; 0x327a <serialStatusReport()+0x2fe>
    {
    Serial_print_space();
    326c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
    Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    3270:	8e e0       	ldi	r24, 0x0E	; 14
    3272:	93 e0       	ldi	r25, 0x03	; 3
    3274:	63 e7       	ldi	r22, 0x73	; 115
    3276:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    }
#endif
  Serial.println();
    327a:	8e e0       	ldi	r24, 0x0E	; 14
    327c:	93 e0       	ldi	r25, 0x03	; 3
    327e:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    3282:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    3286:	dd 20       	and	r13, r13
    3288:	11 f0       	breq	.+4      	; 0x328e <serialStatusReport()+0x312>
    328a:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
  }
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	df 90       	pop	r13
    329c:	08 95       	ret

0000329e <pollCLI(unsigned char)>:
#endif
// Used to poll user side for CLI input until specified sub-cycle time.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    329e:	bf 92       	push	r11
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <pollCLI(unsigned char)+0x14>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <pollCLI(unsigned char)+0x16>
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <pollCLI(unsigned char)+0x18>
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? 0 : (maxSCT - 1 - MIN_POLL_SCT);
    32ba:	83 30       	cpi	r24, 0x03	; 3
    32bc:	10 f4       	brcc	.+4      	; 0x32c2 <pollCLI(unsigned char)+0x24>
    32be:	00 e0       	ldi	r16, 0x00	; 0
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <pollCLI(unsigned char)+0x28>
    32c2:	08 2f       	mov	r16, r24
    32c4:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    32c6:	80 91 b2 00 	lds	r24, 0x00B2
    32ca:	80 17       	cp	r24, r16
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <pollCLI(unsigned char)+0x32>
    32ce:	b2 c2       	rjmp	.+1380   	; 0x3834 <pollCLI(unsigned char)+0x596>

  const bool neededWaking = powerUpSerialIfDisabled();
    32d0:	0e 94 8e 10 	call	0x211c	; 0x211c <powerUpSerialIfDisabled()>
    32d4:	b8 2e       	mov	r11, r24
    32d6:	04 c0       	rjmp	.+8      	; 0x32e0 <pollCLI(unsigned char)+0x42>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    32d8:	8e e0       	ldi	r24, 0x0E	; 14
    32da:	93 e0       	ldi	r25, 0x03	; 3
    32dc:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <HardwareSerial::read()>
    32e0:	8e e0       	ldi	r24, 0x0E	; 14
    32e2:	93 e0       	ldi	r25, 0x03	; 3
    32e4:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <HardwareSerial::available()>
    32e8:	18 16       	cp	r1, r24
    32ea:	19 06       	cpc	r1, r25
    32ec:	ac f3       	brlt	.-22     	; 0x32d8 <pollCLI(unsigned char)+0x3a>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  Serial.println();
    32ee:	8e e0       	ldi	r24, 0x0E	; 14
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
  Serial.print(CLIPromptChar);
    32f6:	8e e0       	ldi	r24, 0x0E	; 14
    32f8:	93 e0       	ldi	r25, 0x03	; 3
    32fa:	6e e3       	ldi	r22, 0x3E	; 62
    32fc:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    3300:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
    3304:	10 e0       	ldi	r17, 0x00	; 0
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    3306:	8e e0       	ldi	r24, 0x0E	; 14
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <HardwareSerial::available()>
    330e:	18 16       	cp	r1, r24
    3310:	19 06       	cpc	r1, r25
    3312:	8c f4       	brge	.+34     	; 0x3336 <pollCLI(unsigned char)+0x98>
      {
      const int ic = Serial.read();
    3314:	8e e0       	ldi	r24, 0x0E	; 14
    3316:	93 e0       	ldi	r25, 0x03	; 3
    3318:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <HardwareSerial::read()>
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    331c:	8d 30       	cpi	r24, 0x0D	; 13
    331e:	91 05       	cpc	r25, r1
    3320:	c1 f0       	breq	.+48     	; 0x3352 <pollCLI(unsigned char)+0xb4>
    3322:	8a 30       	cpi	r24, 0x0A	; 10
    3324:	91 05       	cpc	r25, r1
    3326:	a9 f0       	breq	.+42     	; 0x3352 <pollCLI(unsigned char)+0xb4>
      buf[n++] = (char) ic;
    3328:	e1 2f       	mov	r30, r17
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	e0 55       	subi	r30, 0x50	; 80
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	80 83       	st	Z, r24
    3332:	1f 5f       	subi	r17, 0xFF	; 255
    3334:	0b c0       	rjmp	.+22     	; 0x334c <pollCLI(unsigned char)+0xae>
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    3336:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    333a:	80 17       	cp	r24, r16
    333c:	08 f0       	brcs	.+2      	; 0x3340 <pollCLI(unsigned char)+0xa2>
    333e:	5a c2       	rjmp	.+1204   	; 0x37f4 <pollCLI(unsigned char)+0x556>
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <idleCPU(signed char)>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    334c:	19 30       	cpi	r17, 0x09	; 9
    334e:	d8 f2       	brcs	.-74     	; 0x3306 <pollCLI(unsigned char)+0x68>
    3350:	03 c0       	rjmp	.+6      	; 0x3358 <pollCLI(unsigned char)+0xba>
#else
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
#endif
    }

  if(n > 0)
    3352:	11 23       	and	r17, r17
    3354:	09 f4       	brne	.+2      	; 0x3358 <pollCLI(unsigned char)+0xba>
    3356:	4e c2       	rjmp	.+1180   	; 0x37f4 <pollCLI(unsigned char)+0x556>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    3358:	80 91 b0 01 	lds	r24, 0x01B0
    335c:	8f 53       	subi	r24, 0x3F	; 63
    335e:	8c 33       	cpi	r24, 0x3C	; 60
    3360:	08 f0       	brcs	.+2      	; 0x3364 <pollCLI(unsigned char)+0xc6>
    3362:	40 c0       	rjmp	.+128    	; 0x33e4 <pollCLI(unsigned char)+0x146>
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	80 93 04 01 	sts	0x0104, r24
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else { Serial.println(F("? for CLI help")); flushSerialSCTSensitive(); return; }

    // Null-terminate the command line.
    buf[n] = '\0';
    336a:	e1 2f       	mov	r30, r17
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	e0 55       	subi	r30, 0x50	; 80
    3370:	fe 4f       	sbci	r31, 0xFE	; 254
    3372:	10 82       	st	Z, r1

    // Force to upper-case and echo the line received.
    strupr(buf);
    3374:	80 eb       	ldi	r24, 0xB0	; 176
    3376:	91 e0       	ldi	r25, 0x01	; 1
    3378:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <strupr>
    Serial.println(buf);
    337c:	8e e0       	ldi	r24, 0x0E	; 14
    337e:	93 e0       	ldi	r25, 0x03	; 3
    3380:	60 eb       	ldi	r22, 0xB0	; 176
    3382:	71 e0       	ldi	r23, 0x01	; 1
    3384:	0e 94 03 2a 	call	0x5406	; 0x5406 <Print::println(char const*)>

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    3388:	80 91 b0 01 	lds	r24, 0x01B0
    338c:	80 35       	cpi	r24, 0x50	; 80
    338e:	09 f4       	brne	.+2      	; 0x3392 <pollCLI(unsigned char)+0xf4>
    3390:	39 c1       	rjmp	.+626    	; 0x3604 <pollCLI(unsigned char)+0x366>
    3392:	81 35       	cpi	r24, 0x51	; 81
    3394:	9c f4       	brge	.+38     	; 0x33bc <pollCLI(unsigned char)+0x11e>
    3396:	85 34       	cpi	r24, 0x45	; 69
    3398:	09 f4       	brne	.+2      	; 0x339c <pollCLI(unsigned char)+0xfe>
    339a:	44 c0       	rjmp	.+136    	; 0x3424 <pollCLI(unsigned char)+0x186>
    339c:	86 34       	cpi	r24, 0x46	; 70
    339e:	2c f4       	brge	.+10     	; 0x33aa <pollCLI(unsigned char)+0x10c>
    33a0:	83 34       	cpi	r24, 0x43	; 67
    33a2:	61 f1       	breq	.+88     	; 0x33fc <pollCLI(unsigned char)+0x15e>
    33a4:	84 34       	cpi	r24, 0x44	; 68
    33a6:	39 f5       	brne	.+78     	; 0x33f6 <pollCLI(unsigned char)+0x158>
    33a8:	64 c0       	rjmp	.+200    	; 0x3472 <pollCLI(unsigned char)+0x1d4>
    33aa:	88 34       	cpi	r24, 0x48	; 72
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <pollCLI(unsigned char)+0x112>
    33ae:	da c0       	rjmp	.+436    	; 0x3564 <pollCLI(unsigned char)+0x2c6>
    33b0:	8c 34       	cpi	r24, 0x4C	; 76
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <pollCLI(unsigned char)+0x118>
    33b4:	13 c1       	rjmp	.+550    	; 0x35dc <pollCLI(unsigned char)+0x33e>
    33b6:	86 34       	cpi	r24, 0x46	; 70
    33b8:	f1 f4       	brne	.+60     	; 0x33f6 <pollCLI(unsigned char)+0x158>
    33ba:	c0 c0       	rjmp	.+384    	; 0x353c <pollCLI(unsigned char)+0x29e>
    33bc:	83 35       	cpi	r24, 0x53	; 83
    33be:	09 f4       	brne	.+2      	; 0x33c2 <pollCLI(unsigned char)+0x124>
    33c0:	6b c1       	rjmp	.+726    	; 0x3698 <pollCLI(unsigned char)+0x3fa>
    33c2:	84 35       	cpi	r24, 0x54	; 84
    33c4:	34 f4       	brge	.+12     	; 0x33d2 <pollCLI(unsigned char)+0x134>
    33c6:	81 35       	cpi	r24, 0x51	; 81
    33c8:	09 f4       	brne	.+2      	; 0x33cc <pollCLI(unsigned char)+0x12e>
    33ca:	5f c1       	rjmp	.+702    	; 0x368a <pollCLI(unsigned char)+0x3ec>
    33cc:	82 35       	cpi	r24, 0x52	; 82
    33ce:	99 f4       	brne	.+38     	; 0x33f6 <pollCLI(unsigned char)+0x158>
    33d0:	2c c0       	rjmp	.+88     	; 0x342a <pollCLI(unsigned char)+0x18c>
    33d2:	87 35       	cpi	r24, 0x57	; 87
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <pollCLI(unsigned char)+0x13a>
    33d6:	c9 c1       	rjmp	.+914    	; 0x376a <pollCLI(unsigned char)+0x4cc>
    33d8:	8a 35       	cpi	r24, 0x5A	; 90
    33da:	09 f4       	brne	.+2      	; 0x33de <pollCLI(unsigned char)+0x140>
    33dc:	df c1       	rjmp	.+958    	; 0x379c <pollCLI(unsigned char)+0x4fe>
    33de:	84 35       	cpi	r24, 0x54	; 84
    33e0:	51 f4       	brne	.+20     	; 0x33f6 <pollCLI(unsigned char)+0x158>
    33e2:	9a c1       	rjmp	.+820    	; 0x3718 <pollCLI(unsigned char)+0x47a>
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else { Serial.println(F("? for CLI help")); flushSerialSCTSensitive(); return; }
    33e4:	8e e0       	ldi	r24, 0x0E	; 14
    33e6:	93 e0       	ldi	r25, 0x03	; 3
    33e8:	62 ec       	ldi	r22, 0xC2	; 194
    33ea:	71 e0       	ldi	r23, 0x01	; 1
    33ec:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
    33f0:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>
    33f4:	1f c2       	rjmp	.+1086   	; 0x3834 <pollCLI(unsigned char)+0x596>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(); showStatus = false; break; }
    33f6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <dumpCLIUsage()>
    33fa:	00 c2       	rjmp	.+1024   	; 0x37fc <pollCLI(unsigned char)+0x55e>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    33fc:	13 30       	cpi	r17, 0x03	; 3
    33fe:	08 f4       	brcc	.+2      	; 0x3402 <pollCLI(unsigned char)+0x164>
    3400:	16 c2       	rjmp	.+1068   	; 0x382e <pollCLI(unsigned char)+0x590>
    3402:	82 eb       	ldi	r24, 0xB2	; 178
    3404:	91 e0       	ldi	r25, 0x01	; 1
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	71 e0       	ldi	r23, 0x01	; 1
    340a:	ae 01       	movw	r20, r28
    340c:	4f 5f       	subi	r20, 0xFF	; 255
    340e:	5f 4f       	sbci	r21, 0xFF	; 255
    3410:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	09 f4       	brne	.+2      	; 0x341a <pollCLI(unsigned char)+0x17c>
    3418:	0a c2       	rjmp	.+1044   	; 0x382e <pollCLI(unsigned char)+0x590>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    341a:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
          setMinBoilerOnMinutes(m);
    341e:	0e 94 98 05 	call	0xb30	; 0xb30 <setMinBoilerOnMinutes(unsigned char)>
    3422:	05 c2       	rjmp	.+1034   	; 0x382e <pollCLI(unsigned char)+0x590>
        break;
        }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLITimeoutM = 0; break; }
    3424:	10 92 04 01 	sts	0x0104, r1
    3428:	02 c2       	rjmp	.+1028   	; 0x382e <pollCLI(unsigned char)+0x590>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    342a:	13 30       	cpi	r17, 0x03	; 3
    342c:	08 f4       	brcc	.+2      	; 0x3430 <pollCLI(unsigned char)+0x192>
    342e:	ff c1       	rjmp	.+1022   	; 0x382e <pollCLI(unsigned char)+0x590>
    3430:	82 eb       	ldi	r24, 0xB2	; 178
    3432:	91 e0       	ldi	r25, 0x01	; 1
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	71 e0       	ldi	r23, 0x01	; 1
    3438:	ae 01       	movw	r20, r28
    343a:	4f 5f       	subi	r20, 0xFF	; 255
    343c:	5f 4f       	sbci	r21, 0xFF	; 255
    343e:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	09 f4       	brne	.+2      	; 0x3448 <pollCLI(unsigned char)+0x1aa>
    3446:	f3 c1       	rjmp	.+998    	; 0x382e <pollCLI(unsigned char)+0x590>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    3448:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    344c:	08 2f       	mov	r16, r24
    344e:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    3450:	81 2f       	mov	r24, r17
    3452:	60 2f       	mov	r22, r16
    3454:	0e 94 85 04 	call	0x90a	; 0x90a <getByHourStat(unsigned char, unsigned char)>
    3458:	68 2f       	mov	r22, r24
    345a:	8e e0       	ldi	r24, 0x0E	; 14
    345c:	93 e0       	ldi	r25, 0x03	; 3
    345e:	4a e0       	ldi	r20, 0x0A	; 10
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
    3466:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    346a:	1f 5f       	subi	r17, 0xFF	; 255
    346c:	18 31       	cpi	r17, 0x18	; 24
    346e:	81 f7       	brne	.-32     	; 0x3450 <pollCLI(unsigned char)+0x1b2>
    3470:	4e c1       	rjmp	.+668    	; 0x370e <pollCLI(unsigned char)+0x470>
      case 'D':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3472:	13 30       	cpi	r17, 0x03	; 3
    3474:	08 f4       	brcc	.+2      	; 0x3478 <pollCLI(unsigned char)+0x1da>
    3476:	c2 c1       	rjmp	.+900    	; 0x37fc <pollCLI(unsigned char)+0x55e>
    3478:	82 eb       	ldi	r24, 0xB2	; 178
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	71 e0       	ldi	r23, 0x01	; 1
    3480:	ae 01       	movw	r20, r28
    3482:	4f 5f       	subi	r20, 0xFF	; 255
    3484:	5f 4f       	sbci	r21, 0xFF	; 255
    3486:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	09 f4       	brne	.+2      	; 0x3490 <pollCLI(unsigned char)+0x1f2>
    348e:	b6 c1       	rjmp	.+876    	; 0x37fc <pollCLI(unsigned char)+0x55e>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    3490:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    3494:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    3496:	0e 94 8b 13 	call	0x2716	; 0x2716 <getHoursLT()>
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
    349a:	88 23       	and	r24, r24
    349c:	19 f4       	brne	.+6      	; 0x34a4 <pollCLI(unsigned char)+0x206>
    349e:	f7 e1       	ldi	r31, 0x17	; 23
    34a0:	ff 2e       	mov	r15, r31
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <pollCLI(unsigned char)+0x20a>
    34a4:	f8 2e       	mov	r15, r24
    34a6:	fa 94       	dec	r15
    34a8:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    34aa:	81 2f       	mov	r24, r17
    34ac:	60 2f       	mov	r22, r16
    34ae:	0e 94 85 04 	call	0x90a	; 0x90a <getByHourStat(unsigned char, unsigned char)>
    34b2:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    34b4:	8f 3f       	cpi	r24, 0xFF	; 255
    34b6:	21 f4       	brne	.+8      	; 0x34c0 <pollCLI(unsigned char)+0x222>
    34b8:	8e e0       	ldi	r24, 0x0E	; 14
    34ba:	93 e0       	ldi	r25, 0x03	; 3
    34bc:	6d e2       	ldi	r22, 0x2D	; 45
    34be:	1b c0       	rjmp	.+54     	; 0x34f6 <pollCLI(unsigned char)+0x258>
            // ...else print more human-friendly version of stat.
            else switch(setN) // Relationship between stats set and type should probably be centralised to avoid getting out of sync with usage.
    34c0:	04 30       	cpi	r16, 0x04	; 4
    34c2:	18 f4       	brcc	.+6      	; 0x34ca <pollCLI(unsigned char)+0x22c>
    34c4:	02 30       	cpi	r16, 0x02	; 2
    34c6:	d0 f4       	brcc	.+52     	; 0x34fc <pollCLI(unsigned char)+0x25e>
    34c8:	03 c0       	rjmp	.+6      	; 0x34d0 <pollCLI(unsigned char)+0x232>
    34ca:	04 30       	cpi	r16, 0x04	; 4
    34cc:	49 f5       	brne	.+82     	; 0x3520 <pollCLI(unsigned char)+0x282>
    34ce:	22 c0       	rjmp	.+68     	; 0x3514 <pollCLI(unsigned char)+0x276>
              {
              case 0: case 1: { Serial.print((expandTempC16(statRaw)+8) >> 4); Serial.print('C'); break; } // Uncompanded temperature, rounded.
    34d0:	0e 94 c4 04 	call	0x988	; 0x988 <expandTempC16(unsigned char)>
    34d4:	bc 01       	movw	r22, r24
    34d6:	68 5f       	subi	r22, 0xF8	; 248
    34d8:	7f 4f       	sbci	r23, 0xFF	; 255
    34da:	e4 e0       	ldi	r30, 0x04	; 4
    34dc:	75 95       	asr	r23
    34de:	67 95       	ror	r22
    34e0:	ea 95       	dec	r30
    34e2:	e1 f7       	brne	.-8      	; 0x34dc <pollCLI(unsigned char)+0x23e>
    34e4:	8e e0       	ldi	r24, 0x0E	; 14
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	4a e0       	ldi	r20, 0x0A	; 10
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
    34f0:	8e e0       	ldi	r24, 0x0E	; 14
    34f2:	93 e0       	ldi	r25, 0x03	; 3
    34f4:	63 e4       	ldi	r22, 0x43	; 67
    34f6:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
    34fa:	12 c0       	rjmp	.+36     	; 0x3520 <pollCLI(unsigned char)+0x282>
              case 2: case 3: { Serial.print(((int)statRaw) << 2); break; } // Uncompressed ambient light level.
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	66 0f       	add	r22, r22
    3500:	77 1f       	adc	r23, r23
    3502:	66 0f       	add	r22, r22
    3504:	77 1f       	adc	r23, r23
    3506:	8e e0       	ldi	r24, 0x0E	; 14
    3508:	93 e0       	ldi	r25, 0x03	; 3
    350a:	4a e0       	ldi	r20, 0x0A	; 10
    350c:	50 e0       	ldi	r21, 0x00	; 0
    350e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <Print::print(int, int)>
    3512:	06 c0       	rjmp	.+12     	; 0x3520 <pollCLI(unsigned char)+0x282>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
    3514:	8e e0       	ldi	r24, 0x0E	; 14
    3516:	93 e0       	ldi	r25, 0x03	; 3
    3518:	40 e1       	ldi	r20, 0x10	; 16
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
    3520:	1f 15       	cp	r17, r15
    3522:	29 f4       	brne	.+10     	; 0x352e <pollCLI(unsigned char)+0x290>
    3524:	8e e0       	ldi	r24, 0x0E	; 14
    3526:	93 e0       	ldi	r25, 0x03	; 3
    3528:	6c e3       	ldi	r22, 0x3C	; 60
    352a:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
            Serial_print_space();
    352e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <Serial_print_space()>
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          const uint8_t thisHH = getHoursLT();
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          for(uint8_t hh = 0; hh < 24; ++hh)
    3532:	1f 5f       	subi	r17, 0xFF	; 255
    3534:	18 31       	cpi	r17, 0x18	; 24
    3536:	09 f0       	breq	.+2      	; 0x353a <pollCLI(unsigned char)+0x29c>
    3538:	b8 cf       	rjmp	.-144    	; 0x34aa <pollCLI(unsigned char)+0x20c>
    353a:	5c c1       	rjmp	.+696    	; 0x37f4 <pollCLI(unsigned char)+0x556>
      case 'F':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    353c:	13 30       	cpi	r17, 0x03	; 3
    353e:	08 f4       	brcc	.+2      	; 0x3542 <pollCLI(unsigned char)+0x2a4>
    3540:	64 c1       	rjmp	.+712    	; 0x380a <pollCLI(unsigned char)+0x56c>
    3542:	82 eb       	ldi	r24, 0xB2	; 178
    3544:	91 e0       	ldi	r25, 0x01	; 1
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	71 e0       	ldi	r23, 0x01	; 1
    354a:	ae 01       	movw	r20, r28
    354c:	4f 5f       	subi	r20, 0xFF	; 255
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	09 f4       	brne	.+2      	; 0x355a <pollCLI(unsigned char)+0x2bc>
    3558:	58 c1       	rjmp	.+688    	; 0x380a <pollCLI(unsigned char)+0x56c>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    355a:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    355e:	0e 94 b2 05 	call	0xb64	; 0xb64 <setFROSTTargetC(unsigned char)>
    3562:	16 c1       	rjmp	.+556    	; 0x3790 <pollCLI(unsigned char)+0x4f2>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3564:	15 30       	cpi	r17, 0x05	; 5
    3566:	08 f4       	brcc	.+2      	; 0x356a <pollCLI(unsigned char)+0x2cc>
    3568:	55 c1       	rjmp	.+682    	; 0x3814 <pollCLI(unsigned char)+0x576>
    356a:	82 eb       	ldi	r24, 0xB2	; 178
    356c:	91 e0       	ldi	r25, 0x01	; 1
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	71 e0       	ldi	r23, 0x01	; 1
    3572:	6e 01       	movw	r12, r28
    3574:	08 94       	sec
    3576:	c1 1c       	adc	r12, r1
    3578:	d1 1c       	adc	r13, r1
    357a:	a6 01       	movw	r20, r12
    357c:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3580:	7c 01       	movw	r14, r24
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	09 f4       	brne	.+2      	; 0x3588 <pollCLI(unsigned char)+0x2ea>
    3586:	46 c1       	rjmp	.+652    	; 0x3814 <pollCLI(unsigned char)+0x576>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	71 e0       	ldi	r23, 0x01	; 1
    3590:	a6 01       	movw	r20, r12
    3592:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3596:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	09 f4       	brne	.+2      	; 0x359e <pollCLI(unsigned char)+0x300>
    359c:	48 c1       	rjmp	.+656    	; 0x382e <pollCLI(unsigned char)+0x590>
            {
            const int hc1 = atoi(tok1);
    359e:	c7 01       	movw	r24, r14
    35a0:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    35a4:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    35a6:	c8 01       	movw	r24, r16
    35a8:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    35ac:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    35ae:	24 e6       	ldi	r18, 0x64	; 100
    35b0:	e2 16       	cp	r14, r18
    35b2:	f1 04       	cpc	r15, r1
    35b4:	08 f0       	brcs	.+2      	; 0x35b8 <pollCLI(unsigned char)+0x31a>
    35b6:	ef c0       	rjmp	.+478    	; 0x3796 <pollCLI(unsigned char)+0x4f8>
    35b8:	97 fd       	sbrc	r25, 7
    35ba:	ed c0       	rjmp	.+474    	; 0x3796 <pollCLI(unsigned char)+0x4f8>
    35bc:	84 36       	cpi	r24, 0x64	; 100
    35be:	91 05       	cpc	r25, r1
    35c0:	0c f0       	brlt	.+2      	; 0x35c4 <pollCLI(unsigned char)+0x326>
    35c2:	e9 c0       	rjmp	.+466    	; 0x3796 <pollCLI(unsigned char)+0x4f8>
            else
              {
              FHT8VSetHC1(hc1);
    35c4:	8e 2d       	mov	r24, r14
    35c6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    35ca:	80 2f       	mov	r24, r16
    35cc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <FHT8VSetHC2(unsigned char)>
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <pollCLI(unsigned char)+0x338>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    35d2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    35d6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <FHT8VSyncAndTXReset()>
    35da:	29 c1       	rjmp	.+594    	; 0x382e <pollCLI(unsigned char)+0x590>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    35dc:	13 30       	cpi	r17, 0x03	; 3
    35de:	08 f4       	brcc	.+2      	; 0x35e2 <pollCLI(unsigned char)+0x344>
    35e0:	1c c1       	rjmp	.+568    	; 0x381a <pollCLI(unsigned char)+0x57c>
    35e2:	82 eb       	ldi	r24, 0xB2	; 178
    35e4:	91 e0       	ldi	r25, 0x01	; 1
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	71 e0       	ldi	r23, 0x01	; 1
    35ea:	ae 01       	movw	r20, r28
    35ec:	4f 5f       	subi	r20, 0xFF	; 255
    35ee:	5f 4f       	sbci	r21, 0xFF	; 255
    35f0:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	09 f4       	brne	.+2      	; 0x35fa <pollCLI(unsigned char)+0x35c>
    35f8:	10 c1       	rjmp	.+544    	; 0x381a <pollCLI(unsigned char)+0x57c>
          {
          s = atoi(tok1);
    35fa:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    35fe:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <handleLEARN(unsigned char)>
    3602:	15 c1       	rjmp	.+554    	; 0x382e <pollCLI(unsigned char)+0x590>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3604:	15 30       	cpi	r17, 0x05	; 5
    3606:	08 f4       	brcc	.+2      	; 0x360a <pollCLI(unsigned char)+0x36c>
    3608:	12 c1       	rjmp	.+548    	; 0x382e <pollCLI(unsigned char)+0x590>
    360a:	82 eb       	ldi	r24, 0xB2	; 178
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	71 e0       	ldi	r23, 0x01	; 1
    3612:	6e 01       	movw	r12, r28
    3614:	08 94       	sec
    3616:	c1 1c       	adc	r12, r1
    3618:	d1 1c       	adc	r13, r1
    361a:	a6 01       	movw	r20, r12
    361c:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3620:	7c 01       	movw	r14, r24
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	09 f4       	brne	.+2      	; 0x3628 <pollCLI(unsigned char)+0x38a>
    3626:	03 c1       	rjmp	.+518    	; 0x382e <pollCLI(unsigned char)+0x590>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	71 e0       	ldi	r23, 0x01	; 1
    3630:	a6 01       	movw	r20, r12
    3632:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3636:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	09 f4       	brne	.+2      	; 0x363e <pollCLI(unsigned char)+0x3a0>
    363c:	f8 c0       	rjmp	.+496    	; 0x382e <pollCLI(unsigned char)+0x590>
            {
            const int hh = atoi(tok1);
    363e:	c7 01       	movw	r24, r14
    3640:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    3644:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    3646:	c8 01       	movw	r24, r16
    3648:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    364c:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	71 e0       	ldi	r23, 0x01	; 1
    3656:	a6 01       	movw	r20, r12
    3658:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
            if(NULL != tok3)
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	19 f4       	brne	.+6      	; 0x3666 <pollCLI(unsigned char)+0x3c8>
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	03 c0       	rjmp	.+6      	; 0x366c <pollCLI(unsigned char)+0x3ce>
              {
              s = atoi(tok3);
    3666:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    366a:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    366c:	8c e3       	ldi	r24, 0x3C	; 60
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	9c 01       	movw	r18, r24
    3672:	e2 9e       	mul	r14, r18
    3674:	c0 01       	movw	r24, r0
    3676:	e3 9e       	mul	r14, r19
    3678:	90 0d       	add	r25, r0
    367a:	f2 9e       	mul	r15, r18
    367c:	90 0d       	add	r25, r0
    367e:	11 24       	eor	r1, r1
    3680:	80 0f       	add	r24, r16
    3682:	91 1f       	adc	r25, r17
    3684:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <setSimpleSchedule(unsigned int, unsigned char)>
    3688:	83 c0       	rjmp	.+262    	; 0x3790 <pollCLI(unsigned char)+0x4f2>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	80 93 bb 01 	sts	0x01BB, r24
    3690:	8e e1       	ldi	r24, 0x1E	; 30
    3692:	80 93 bc 01 	sts	0x01BC, r24
    3696:	cb c0       	rjmp	.+406    	; 0x382e <pollCLI(unsigned char)+0x590>
#endif

      // Status line and smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Reset count: "));
    3698:	8e e0       	ldi	r24, 0x0E	; 14
    369a:	93 e0       	ldi	r25, 0x03	; 3
    369c:	64 eb       	ldi	r22, 0xB4	; 180
    369e:	71 e0       	ldi	r23, 0x01	; 1
    36a0:	0e 94 9f 28 	call	0x513e	; 0x513e <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    36a4:	f9 99       	sbic	0x1f, 1	; 31
    36a6:	fe cf       	rjmp	.-4      	; 0x36a4 <pollCLI(unsigned char)+0x406>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    36a8:	86 e0       	ldi	r24, 0x06	; 6
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	92 bd       	out	0x22, r25	; 34
    36ae:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    36b0:	f8 9a       	sbi	0x1f, 0	; 31
    36b2:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    36b4:	8e e0       	ldi	r24, 0x0E	; 14
    36b6:	93 e0       	ldi	r25, 0x03	; 3
    36b8:	4a e0       	ldi	r20, 0x0A	; 10
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	0e 94 9e 29 	call	0x533c	; 0x533c <Print::print(unsigned char, int)>
        Serial.println();
    36c0:	8e e0       	ldi	r24, 0x0E	; 14
    36c2:	93 e0       	ldi	r25, 0x03	; 3
    36c4:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
        uint_least8_t hh = getHoursLT();
    36c8:	0e 94 8b 13 	call	0x2716	; 0x2716 <getHoursLT()>
    36cc:	f8 2e       	mov	r15, r24
        Serial.print(F("Smart warming: "));
    36ce:	8e e0       	ldi	r24, 0x0E	; 14
    36d0:	93 e0       	ldi	r25, 0x03	; 3
    36d2:	64 ea       	ldi	r22, 0xA4	; 164
    36d4:	71 e0       	ldi	r23, 0x01	; 1
    36d6:	0e 94 9f 28 	call	0x513e	; 0x513e <Print::print(__FlashStringHelper const*)>
    36da:	08 e1       	ldi	r16, 0x18	; 24
    36dc:	10 e0       	ldi	r17, 0x00	; 0
    36de:	11 c0       	rjmp	.+34     	; 0x3702 <pollCLI(unsigned char)+0x464>
        for(int i = 24; --i >= 0; )
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
    36e0:	8f 2d       	mov	r24, r15
    36e2:	0e 94 05 05 	call	0xa0a	; 0xa0a <shouldBeWarmedAtHour(unsigned char)>
    36e6:	88 23       	and	r24, r24
    36e8:	11 f4       	brne	.+4      	; 0x36ee <pollCLI(unsigned char)+0x450>
    36ea:	66 e6       	ldi	r22, 0x66	; 102
    36ec:	01 c0       	rjmp	.+2      	; 0x36f0 <pollCLI(unsigned char)+0x452>
    36ee:	67 e7       	ldi	r22, 0x77	; 119
    36f0:	8e e0       	ldi	r24, 0x0E	; 14
    36f2:	93 e0       	ldi	r25, 0x03	; 3
    36f4:	0e 94 c2 28 	call	0x5184	; 0x5184 <Print::print(char)>
          if(++hh > 23) { hh = 0; }
    36f8:	f3 94       	inc	r15
    36fa:	37 e1       	ldi	r19, 0x17	; 23
    36fc:	3f 15       	cp	r19, r15
    36fe:	08 f4       	brcc	.+2      	; 0x3702 <pollCLI(unsigned char)+0x464>
    3700:	ff 24       	eor	r15, r15
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
        Serial.println();
        uint_least8_t hh = getHoursLT();
        Serial.print(F("Smart warming: "));
        for(int i = 24; --i >= 0; )
    3702:	01 50       	subi	r16, 0x01	; 1
    3704:	10 40       	sbci	r17, 0x00	; 0
    3706:	8f ef       	ldi	r24, 0xFF	; 255
    3708:	0f 3f       	cpi	r16, 0xFF	; 255
    370a:	18 07       	cpc	r17, r24
    370c:	49 f7       	brne	.-46     	; 0x36e0 <pollCLI(unsigned char)+0x442>
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
          if(++hh > 23) { hh = 0; }
          }
        Serial.println();
    370e:	8e e0       	ldi	r24, 0x0E	; 14
    3710:	93 e0       	ldi	r25, 0x03	; 3
    3712:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
    3716:	8b c0       	rjmp	.+278    	; 0x382e <pollCLI(unsigned char)+0x590>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3718:	15 30       	cpi	r17, 0x05	; 5
    371a:	08 f4       	brcc	.+2      	; 0x371e <pollCLI(unsigned char)+0x480>
    371c:	88 c0       	rjmp	.+272    	; 0x382e <pollCLI(unsigned char)+0x590>
    371e:	82 eb       	ldi	r24, 0xB2	; 178
    3720:	91 e0       	ldi	r25, 0x01	; 1
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	71 e0       	ldi	r23, 0x01	; 1
    3726:	ae 01       	movw	r20, r28
    3728:	4f 5f       	subi	r20, 0xFF	; 255
    372a:	5f 4f       	sbci	r21, 0xFF	; 255
    372c:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3730:	8c 01       	movw	r16, r24
    3732:	00 97       	sbiw	r24, 0x00	; 0
    3734:	09 f4       	brne	.+2      	; 0x3738 <pollCLI(unsigned char)+0x49a>
    3736:	7b c0       	rjmp	.+246    	; 0x382e <pollCLI(unsigned char)+0x590>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	71 e0       	ldi	r23, 0x01	; 1
    3740:	ae 01       	movw	r20, r28
    3742:	4f 5f       	subi	r20, 0xFF	; 255
    3744:	5f 4f       	sbci	r21, 0xFF	; 255
    3746:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    374a:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	09 f4       	brne	.+2      	; 0x3752 <pollCLI(unsigned char)+0x4b4>
    3750:	6e c0       	rjmp	.+220    	; 0x382e <pollCLI(unsigned char)+0x590>
            {
            const int hh = atoi(tok1);
    3752:	c8 01       	movw	r24, r16
    3754:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    3758:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    375a:	c7 01       	movw	r24, r14
    375c:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
    3760:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    3762:	c8 01       	movw	r24, r16
    3764:	0e 94 46 14 	call	0x288c	; 0x288c <setHoursMinutesLT(int, int)>
    3768:	13 c0       	rjmp	.+38     	; 0x3790 <pollCLI(unsigned char)+0x4f2>
      case 'W':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    376a:	13 30       	cpi	r17, 0x03	; 3
    376c:	08 f4       	brcc	.+2      	; 0x3770 <pollCLI(unsigned char)+0x4d2>
    376e:	58 c0       	rjmp	.+176    	; 0x3820 <pollCLI(unsigned char)+0x582>
    3770:	82 eb       	ldi	r24, 0xB2	; 178
    3772:	91 e0       	ldi	r25, 0x01	; 1
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	71 e0       	ldi	r23, 0x01	; 1
    3778:	ae 01       	movw	r20, r28
    377a:	4f 5f       	subi	r20, 0xFF	; 255
    377c:	5f 4f       	sbci	r21, 0xFF	; 255
    377e:	0e 94 bf 03 	call	0x77e	; 0x77e <strtok_r>
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	09 f4       	brne	.+2      	; 0x3788 <pollCLI(unsigned char)+0x4ea>
    3786:	4c c0       	rjmp	.+152    	; 0x3820 <pollCLI(unsigned char)+0x582>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    3788:	0e 94 98 03 	call	0x730	; 0x730 <atoi>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
    378c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <setWARMTargetC(unsigned char)>
    3790:	88 23       	and	r24, r24
    3792:	09 f0       	breq	.+2      	; 0x3796 <pollCLI(unsigned char)+0x4f8>
    3794:	4c c0       	rjmp	.+152    	; 0x382e <pollCLI(unsigned char)+0x590>
    3796:	0e 94 d5 16 	call	0x2daa	; 0x2daa <InvalidIgnored()>
    379a:	49 c0       	rjmp	.+146    	; 0x382e <pollCLI(unsigned char)+0x590>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9c 83       	std	Y+4, r25	; 0x04
    37a2:	8b 83       	std	Y+3, r24	; 0x03
    37a4:	80 91 b2 00 	lds	r24, 0x00B2
    37a8:	2f ef       	ldi	r18, 0xFF	; 255
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	28 1b       	sub	r18, r24
    37ae:	31 09       	sbc	r19, r1
    37b0:	c9 01       	movw	r24, r18
    37b2:	43 e0       	ldi	r20, 0x03	; 3
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	4a 95       	dec	r20
    37ba:	e1 f7       	brne	.-8      	; 0x37b4 <pollCLI(unsigned char)+0x516>
    37bc:	82 1b       	sub	r24, r18
    37be:	93 0b       	sbc	r25, r19
    37c0:	95 95       	asr	r25
    37c2:	87 95       	ror	r24
    37c4:	44 97       	sbiw	r24, 0x14	; 20
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	91 05       	cpc	r25, r1
    37ce:	14 f4       	brge	.+4      	; 0x37d4 <pollCLI(unsigned char)+0x536>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <zapStats(unsigned int)>
    37d8:	88 23       	and	r24, r24
    37da:	29 f0       	breq	.+10     	; 0x37e6 <pollCLI(unsigned char)+0x548>
          { Serial.println(F("Zapped.")); }
    37dc:	8e e0       	ldi	r24, 0x0E	; 14
    37de:	93 e0       	ldi	r25, 0x03	; 3
    37e0:	6c e9       	ldi	r22, 0x9C	; 156
    37e2:	71 e0       	ldi	r23, 0x01	; 1
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <pollCLI(unsigned char)+0x550>
        else
          { Serial.println(F("Not finished.")); }
    37e6:	8e e0       	ldi	r24, 0x0E	; 14
    37e8:	93 e0       	ldi	r25, 0x03	; 3
    37ea:	6e e8       	ldi	r22, 0x8E	; 142
    37ec:	71 e0       	ldi	r23, 0x01	; 1
    37ee:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <Print::println(__FlashStringHelper const*)>
    37f2:	04 c0       	rjmp	.+8      	; 0x37fc <pollCLI(unsigned char)+0x55e>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    }
  else { Serial.println(); } // Terminate empty CLI input line after timeout.
    37f4:	8e e0       	ldi	r24, 0x0E	; 14
    37f6:	93 e0       	ldi	r25, 0x03	; 3
    37f8:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    37fc:	0e 94 76 10 	call	0x20ec	; 0x20ec <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    3800:	bb 20       	and	r11, r11
    3802:	c1 f0       	breq	.+48     	; 0x3834 <pollCLI(unsigned char)+0x596>
    3804:	0e 94 39 10 	call	0x2072	; 0x2072 <powerDownSerial()>
    3808:	15 c0       	rjmp	.+42     	; 0x3834 <pollCLI(unsigned char)+0x596>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    380a:	10 92 bb 01 	sts	0x01BB, r1
  isWarmModeDebounced = warm;
    380e:	10 92 ba 01 	sts	0x01BA, r1
    3812:	0b c0       	rjmp	.+22     	; 0x382a <pollCLI(unsigned char)+0x58c>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    3814:	12 30       	cpi	r17, 0x02	; 2
    3816:	58 f4       	brcc	.+22     	; 0x382e <pollCLI(unsigned char)+0x590>
    3818:	dc ce       	rjmp	.-584    	; 0x35d2 <pollCLI(unsigned char)+0x334>
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	ef ce       	rjmp	.-546    	; 0x35fe <pollCLI(unsigned char)+0x360>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	80 93 bb 01 	sts	0x01BB, r24
  isWarmModeDebounced = warm;
    3826:	80 93 ba 01 	sts	0x01BA, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    382a:	10 92 bc 01 	sts	0x01BC, r1
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    382e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <serialStatusReport()>
    3832:	e4 cf       	rjmp	.-56     	; 0x37fc <pollCLI(unsigned char)+0x55e>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    3834:	26 96       	adiw	r28, 0x06	; 6
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	de bf       	out	0x3e, r29	; 62
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	cd bf       	out	0x3d, r28	; 61
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	bf 90       	pop	r11
    3852:	08 95       	ret

00003854 <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    385c:	0e 94 76 13 	call	0x26ec	; 0x26ec <getMinutesSinceMidnightLT()>
    3860:	ec 01       	movw	r28, r24
    3862:	10 e0       	ldi	r17, 0x00	; 0

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3864:	01 e0       	ldi	r16, 0x01	; 1
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    3866:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <isAnyScheduleOnWARMNow()>
    386a:	88 23       	and	r24, r24
    386c:	c9 f4       	brne	.+50     	; 0x38a0 <checkUserSchedule()+0x4c>
    386e:	81 2f       	mov	r24, r17
    3870:	0e 94 c3 14 	call	0x2986	; 0x2986 <getSimpleScheduleOff(unsigned char)>
    3874:	c8 17       	cp	r28, r24
    3876:	d9 07       	cpc	r29, r25
    3878:	99 f4       	brne	.+38     	; 0x38a0 <checkUserSchedule()+0x4c>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    387a:	10 92 bb 01 	sts	0x01BB, r1
  isWarmModeDebounced = warm;
    387e:	10 92 ba 01 	sts	0x01BA, r1
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    3882:	10 92 bc 01 	sts	0x01BC, r1
    3886:	08 c0       	rjmp	.+16     	; 0x3898 <checkUserSchedule()+0x44>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3888:	00 93 bb 01 	sts	0x01BB, r16
  isWarmModeDebounced = warm;
    388c:	00 93 ba 01 	sts	0x01BA, r16
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    3890:	10 92 bc 01 	sts	0x01BC, r1
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      {
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
    3894:	0e 94 b2 06 	call	0xd64	; 0xd64 <markAsPossiblyOccupied()>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    3898:	1f 5f       	subi	r17, 0xFF	; 255
    389a:	12 30       	cpi	r17, 0x02	; 2
    389c:	21 f7       	brne	.-56     	; 0x3866 <checkUserSchedule()+0x12>
    389e:	07 c0       	rjmp	.+14     	; 0x38ae <checkUserSchedule()+0x5a>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmMode(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    38a0:	81 2f       	mov	r24, r17
    38a2:	0e 94 95 14 	call	0x292a	; 0x292a <getSimpleScheduleOn(unsigned char)>
    38a6:	c8 17       	cp	r28, r24
    38a8:	d9 07       	cpc	r29, r25
    38aa:	b1 f7       	brne	.-20     	; 0x3898 <checkUserSchedule()+0x44>
    38ac:	ed cf       	rjmp	.-38     	; 0x3888 <checkUserSchedule()+0x34>
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
      }
    }
  }
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	08 95       	ret

000038b8 <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
  }
    38c4:	08 95       	ret

000038c6 <markUIControlUsed()>:
bool isCLIActive() { return(0 != CLITimeoutM); }

// Record local manual operation of a UI control, eg not remote or via CLI.
void markUIControlUsed()
  {
  statusChange = true; // Note a user interaction with the system.
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 bf 01 	sts	0x01BF, r24
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	80 93 bd 01 	sts	0x01BD, r24
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    38d2:	80 93 04 01 	sts	0x0104, r24
  statusChange = true; // Note a user interaction with the system.
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while.
  resetCLIActiveTimer();
  // User operation of controls locally is strong indication of presence.
  markAsOccupied();
    38d6:	0e 94 81 04 	call	0x902	; 0x902 <markAsOccupied()>
  }
    38da:	08 95       	ret

000038dc <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    38dc:	0f 93       	push	r16
    38de:	1f 93       	push	r17
  {
  const bool sec0 = (0 == sec);

  // Perform any once-per-minute operations.
  if(sec0)
    38e0:	88 23       	and	r24, r24
    38e2:	a9 f4       	brne	.+42     	; 0x390e <tickUI(unsigned char)+0x32>
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    if(bakeCountdownM > 0) { --bakeCountdownM; }
    38e4:	80 91 bc 01 	lds	r24, 0x01BC
    38e8:	88 23       	and	r24, r24
    38ea:	19 f0       	breq	.+6      	; 0x38f2 <tickUI(unsigned char)+0x16>
    38ec:	81 50       	subi	r24, 0x01	; 1
    38ee:	80 93 bc 01 	sts	0x01BC, r24
#endif

    // Run down UI iteraction timer if need be, one tick per minute.
    if(uiTimeoutM > 0) { --uiTimeoutM; }
    38f2:	80 91 bd 01 	lds	r24, 0x01BD
    38f6:	88 23       	and	r24, r24
    38f8:	19 f0       	breq	.+6      	; 0x3900 <tickUI(unsigned char)+0x24>
    38fa:	81 50       	subi	r24, 0x01	; 1
    38fc:	80 93 bd 01 	sts	0x01BD, r24

    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    3900:	80 91 04 01 	lds	r24, 0x0104
    3904:	88 23       	and	r24, r24
    3906:	19 f0       	breq	.+6      	; 0x390e <tickUI(unsigned char)+0x32>
    3908:	81 50       	subi	r24, 0x01	; 1
    390a:	80 93 04 01 	sts	0x0104, r24
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    390e:	80 91 be 01 	lds	r24, 0x01BE
    3912:	8f 5f       	subi	r24, 0xFF	; 255
    3914:	80 93 be 01 	sts	0x01BE, r24
    3918:	00 e0       	ldi	r16, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	83 70       	andi	r24, 0x03	; 3
    391e:	90 70       	andi	r25, 0x00	; 0
    3920:	89 2b       	or	r24, r25
    3922:	09 f4       	brne	.+2      	; 0x3926 <tickUI(unsigned char)+0x4a>
    3924:	01 e0       	ldi	r16, 0x01	; 1
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
bool recentUIControlUse()
  {
  return(0 != uiTimeoutM);
    3926:	10 91 bd 01 	lds	r17, 0x01BD
    392a:	11 23       	and	r17, r17
    392c:	11 f0       	breq	.+4      	; 0x3932 <tickUI(unsigned char)+0x56>
    392e:	11 e0       	ldi	r17, 0x01	; 1
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <tickUI(unsigned char)+0x5a>
  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    
#ifdef TEMP_POT_AVAILABLE
  const bool rUIcu = recentUIControlUse();
  if(rUIcu || forthTick)
    3932:	00 23       	and	r16, r16
    3934:	11 f0       	breq	.+4      	; 0x393a <tickUI(unsigned char)+0x5e>
    {
    // Force re-read of temp pot device if recent UI activity, and periodically.
    readTempPot();
    3936:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <readTempPot()>
    }
#endif

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    393a:	4d 99       	sbic	0x09, 5	; 9
    393c:	21 c0       	rjmp	.+66     	; 0x3980 <tickUI(unsigned char)+0xa4>
    {
    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    393e:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <markUIControlUsed()>
    // LED on...
    LED_HEATCALL_ON();
    3942:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    394a:	80 91 bb 01 	lds	r24, 0x01BB
    394e:	88 23       	and	r24, r24
    3950:	69 f4       	brne	.+26     	; 0x396c <tickUI(unsigned char)+0x90>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	80 93 bb 01 	sts	0x01BB, r24
  isWarmModeDebounced = warm;
    3958:	80 93 ba 01 	sts	0x01BA, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    395c:	10 92 bc 01 	sts	0x01BC, r1
      setWarmMode(true);
#ifdef SUPPORT_BAKE
      cancelBake(); // Ensure no bake mode running.
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    3960:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    3962:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <offPause()>
      LED_HEATCALL_ON();
    3966:	5c 98       	cbi	0x0b, 4	; 11
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	a3 c0       	rjmp	.+326    	; 0x3ab2 <tickUI(unsigned char)+0x1d6>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    396c:	80 91 bc 01 	lds	r24, 0x01BC
    3970:	88 23       	and	r24, r24
    3972:	09 f4       	brne	.+2      	; 0x3976 <tickUI(unsigned char)+0x9a>
    3974:	8b c0       	rjmp	.+278    	; 0x3a8c <tickUI(unsigned char)+0x1b0>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3976:	10 92 bb 01 	sts	0x01BB, r1
  isWarmModeDebounced = warm;
    397a:	10 92 ba 01 	sts	0x01BA, r1
    397e:	70 c0       	rjmp	.+224    	; 0x3a60 <tickUI(unsigned char)+0x184>
    }
  else
    {
    // Don't update the debounced WARM mode while button held down.
    // Will also capture programmatic changes to isWarmMode, eg from schedules.
    isWarmModeDebounced = isWarmMode;
    3980:	80 91 bb 01 	lds	r24, 0x01BB
    3984:	80 93 ba 01 	sts	0x01BA, r24

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(isWarmModeDebounced || rUIcu) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    3988:	88 23       	and	r24, r24
    398a:	11 f4       	brne	.+4      	; 0x3990 <tickUI(unsigned char)+0xb4>
    398c:	11 23       	and	r17, r17
    398e:	f1 f1       	breq	.+124    	; 0x3a0c <tickUI(unsigned char)+0x130>
      {
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls manually.
      if(!isRoomDark() || rUIcu || (forthTick && (0 != readAmbientLight()) && !isRoomDark()))
    3990:	0e 94 2e 04 	call	0x85c	; 0x85c <isRoomLit()>
    3994:	88 23       	and	r24, r24
    3996:	79 f4       	brne	.+30     	; 0x39b6 <tickUI(unsigned char)+0xda>
    3998:	11 23       	and	r17, r17
    399a:	69 f4       	brne	.+26     	; 0x39b6 <tickUI(unsigned char)+0xda>
    399c:	00 23       	and	r16, r16
    399e:	09 f4       	brne	.+2      	; 0x39a2 <tickUI(unsigned char)+0xc6>
    39a0:	4e c0       	rjmp	.+156    	; 0x3a3e <tickUI(unsigned char)+0x162>
    39a2:	0e 94 36 04 	call	0x86c	; 0x86c <readAmbientLight()>
    39a6:	89 2b       	or	r24, r25
    39a8:	09 f4       	brne	.+2      	; 0x39ac <tickUI(unsigned char)+0xd0>
    39aa:	49 c0       	rjmp	.+146    	; 0x3a3e <tickUI(unsigned char)+0x162>
    39ac:	0e 94 2e 04 	call	0x85c	; 0x85c <isRoomLit()>
    39b0:	88 23       	and	r24, r24
    39b2:	09 f4       	brne	.+2      	; 0x39b6 <tickUI(unsigned char)+0xda>
    39b4:	44 c0       	rjmp	.+136    	; 0x3a3e <tickUI(unsigned char)+0x162>
//#ifdef LEARN_BUTTON_AVAILABLE
//        if((!forthTick) || isSimpleScheduleSet()) // Omit every 4th set of flashes unless a schedule is set.
//#endif
          {
          // First flash to indicate WARM mode (or pot being twiddled).
          LED_HEATCALL_ON();
    39b6:	5c 98       	cbi	0x0b, 4	; 11
#if defined(TEMP_POT_AVAILABLE)
          // LED on stepwise proportional to temp pot setting.
          // Small number of steps (3) should help make positioning more obvious.
          const uint8_t wt = getWARMTargetC();
    39b8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <getWARMTargetC()>
          // Makes vtiny|small|medium flash for cool|OK|warm temperature target.
          if(wt <= BIASECO_WARM) { veryTinyPause(); }
    39bc:	82 31       	cpi	r24, 0x12	; 18
    39be:	28 f4       	brcc	.+10     	; 0x39ca <tickUI(unsigned char)+0xee>


// Use WDT-based timer for xxxPause() routines.
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
    39c0:	85 e2       	ldi	r24, 0x25	; 37
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    39c8:	07 c0       	rjmp	.+14     	; 0x39d8 <tickUI(unsigned char)+0xfc>
          else if(wt >= BIASCOM_WARM) { mediumPause(); }
    39ca:	84 31       	cpi	r24, 0x14	; 20
    39cc:	10 f0       	brcs	.+4      	; 0x39d2 <tickUI(unsigned char)+0xf6>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	01 c0       	rjmp	.+2      	; 0x39d4 <tickUI(unsigned char)+0xf8>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
          else { mediumPause(); }
#endif
  
          // Second flash to indicate nominally calling for heat.
          // TODO: could consider using isControlledValveOpen() instead.
          if(getTRVPercentOpen() >= getMinValvePcReallyOpen())
    39d8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    39dc:	8a 30       	cpi	r24, 0x0A	; 10
    39de:	78 f1       	brcs	.+94     	; 0x3a3e <tickUI(unsigned char)+0x162>
            {
            LED_HEATCALL_OFF();
    39e0:	5c 9a       	sbi	0x0b, 4	; 11
            offPause(); // V0.09 was mediumPause().
    39e2:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <offPause()>
            LED_HEATCALL_ON(); // flash
    39e6:	5c 98       	cbi	0x0b, 4	; 11
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    39ee:	80 91 bb 01 	lds	r24, 0x01BB
    39f2:	88 23       	and	r24, r24
    39f4:	21 f1       	breq	.+72     	; 0x3a3e <tickUI(unsigned char)+0x162>
    39f6:	80 91 bc 01 	lds	r24, 0x01BC
    39fa:	88 23       	and	r24, r24
    39fc:	01 f1       	breq	.+64     	; 0x3a3e <tickUI(unsigned char)+0x162>
  
#ifdef SUPPORT_BAKE
            if(inBakeMode())
              {
              // Third (lengthened) flash to indicate BAKE mode.
              LED_HEATCALL_OFF();
    39fe:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
              mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
              LED_HEATCALL_ON();
    3a06:	5c 98       	cbi	0x0b, 4	; 11
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	17 c0       	rjmp	.+46     	; 0x3a3a <tickUI(unsigned char)+0x15e>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick && !isRoomDark() && isControlledValveOpen() && (getTRVPercentOpen() >= getMinValvePcReallyOpen()))
    3a0c:	00 23       	and	r16, r16
    3a0e:	b9 f0       	breq	.+46     	; 0x3a3e <tickUI(unsigned char)+0x162>
    3a10:	0e 94 2e 04 	call	0x85c	; 0x85c <isRoomLit()>
    3a14:	88 23       	and	r24, r24
    3a16:	99 f0       	breq	.+38     	; 0x3a3e <tickUI(unsigned char)+0x162>
    3a18:	0e 94 df 08 	call	0x11be	; 0x11be <isControlledValveOpen()>
    3a1c:	88 23       	and	r24, r24
    3a1e:	79 f0       	breq	.+30     	; 0x3a3e <tickUI(unsigned char)+0x162>
    3a20:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    3a24:	8a 30       	cpi	r24, 0x0A	; 10
    3a26:	58 f0       	brcs	.+22     	; 0x3a3e <tickUI(unsigned char)+0x162>
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    3a28:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    3a30:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    3a32:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <offPause()>
      LED_HEATCALL_ON(); // flash
    3a36:	5c 98       	cbi	0x0b, 4	; 11
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
      tinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    3a3e:	80 91 bf 01 	lds	r24, 0x01BF
    3a42:	88 23       	and	r24, r24
    3a44:	79 f0       	breq	.+30     	; 0x3a64 <tickUI(unsigned char)+0x188>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    3a46:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <isAnyScheduleOnWARMNow()>
    3a4a:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    3a4c:	80 91 c0 01 	lds	r24, 0x01C0
    3a50:	98 17       	cp	r25, r24
    3a52:	41 f0       	breq	.+16     	; 0x3a64 <tickUI(unsigned char)+0x188>
        {
        prevScheduleStatus = currentScheduleStatus;
    3a54:	90 93 c0 01 	sts	0x01C0, r25

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    3a58:	90 93 bb 01 	sts	0x01BB, r25
  isWarmModeDebounced = warm;
    3a5c:	90 93 ba 01 	sts	0x01BA, r25
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    3a60:	10 92 bc 01 	sts	0x01BC, r1
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    3a64:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    3a66:	18 99       	sbic	0x03, 0	; 3
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <tickUI(unsigned char)+0x192>
    {
    handleLEARN(0);
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	03 c0       	rjmp	.+6      	; 0x3a74 <tickUI(unsigned char)+0x198>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    3a6e:	4b 99       	sbic	0x09, 3	; 9
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <tickUI(unsigned char)+0x1a2>
    {
    handleLEARN(1);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <handleLEARN(unsigned char)>
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    3a78:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <markUIControlUsed()>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    3a7c:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    3a7e:	80 91 bf 01 	lds	r24, 0x01BF
  statusChange = false; // Potential race.
    3a82:	10 92 bf 01 	sts	0x01BF, r1
  return(statusChanged);
  }
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	08 95       	ret
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	80 93 bb 01 	sts	0x01BB, r24
    3a92:	8e e1       	ldi	r24, 0x1E	; 30
    3a94:	80 93 bc 01 	sts	0x01BC, r24
#ifdef SUPPORT_BAKE
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    3a98:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    3a9a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <offPause()>
      LED_HEATCALL_ON();
    3a9e:	5c 98       	cbi	0x0b, 4	; 11
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    3aa6:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    3aa8:	82 e0       	ldi	r24, 0x02	; 2
    3aaa:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    3aae:	5c 98       	cbi	0x0b, 4	; 11
    3ab0:	82 e0       	ldi	r24, 0x02	; 2
    3ab2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    3ab6:	d6 cf       	rjmp	.-84     	; 0x3a64 <tickUI(unsigned char)+0x188>

00003ab8 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
    3ab8:	1f 93       	push	r17
    3aba:	18 2f       	mov	r17, r24
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
    3abc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getMinBoilerOnMinutes()>
    3ac0:	88 23       	and	r24, r24
    3ac2:	99 f0       	breq	.+38     	; 0x3aea <pollIO(bool)+0x32>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    uint8_t sct;
    if(force || ((0 == ((sct = getSubCycleTime()) & 3)) && (sct != _pO_lastPoll)))
    3ac4:	11 23       	and	r17, r17
    3ac6:	61 f4       	brne	.+24     	; 0x3ae0 <pollIO(bool)+0x28>
    3ac8:	20 91 b2 00 	lds	r18, 0x00B2
    3acc:	82 2f       	mov	r24, r18
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	83 70       	andi	r24, 0x03	; 3
    3ad2:	90 70       	andi	r25, 0x00	; 0
    3ad4:	89 2b       	or	r24, r25
    3ad6:	49 f4       	brne	.+18     	; 0x3aea <pollIO(bool)+0x32>
    3ad8:	80 91 c5 01 	lds	r24, 0x01C5
    3adc:	28 17       	cp	r18, r24
    3ade:	29 f0       	breq	.+10     	; 0x3aea <pollIO(bool)+0x32>
      {
      _pO_lastPoll = sct;
    3ae0:	20 93 c5 01 	sts	0x01C5, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
    3ae4:	0e 94 45 0a 	call	0x148a	; 0x148a <FHT8VCallForHeatPoll()>
    3ae8:	01 c0       	rjmp	.+2      	; 0x3aec <pollIO(bool)+0x34>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
    3aec:	1f 91       	pop	r17
    3aee:	08 95       	ret

00003af0 <loop>:
static uint8_t boilerNoCallM;
#endif

// The main control loop routine runs forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    3af0:	8f 92       	push	r8
    3af2:	9f 92       	push	r9
    3af4:	af 92       	push	r10
    3af6:	bf 92       	push	r11
    3af8:	cf 92       	push	r12
    3afa:	df 92       	push	r13
    3afc:	ef 92       	push	r14
    3afe:	ff 92       	push	r15
    3b00:	0f 93       	push	r16
    3b02:	1f 93       	push	r17
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <loop+0x1a>
    3b0a:	00 d0       	rcall	.+0      	; 0x3b0c <loop+0x1c>
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep resets, etc.
  const bool second0 = (0 == TIME_LSD);
    3b10:	cc 24       	eor	r12, r12
    3b12:	80 91 c1 01 	lds	r24, 0x01C1
    3b16:	88 23       	and	r24, r24
    3b18:	11 f4       	brne	.+4      	; 0x3b1e <loop+0x2e>
    3b1a:	cc 24       	eor	r12, r12
    3b1c:	c3 94       	inc	r12
//  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and if possible noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == (minuteCount & 3));
    3b1e:	dd 24       	eor	r13, r13
    3b20:	80 91 c2 01 	lds	r24, 0x01C2
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	83 70       	andi	r24, 0x03	; 3
    3b28:	90 70       	andi	r25, 0x00	; 0
    3b2a:	89 2b       	or	r24, r25
    3b2c:	11 f4       	brne	.+4      	; 0x3b32 <loop+0x42>
    3b2e:	dd 24       	eor	r13, r13
    3b30:	d3 94       	inc	r13

  // Note last-measured battery status.
  const bool batteryLow = isBatteryLow();
    3b32:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <isBatteryLow()>
    3b36:	a8 2e       	mov	r10, r24
    (batteryLow || !inWarmModeDebounced()) && // Don't spare the batteries unless in FROST mode (which should be most of the time) or the batteries are low.
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownM) && // Unless the boiler is off, stay responsive.
#endif
    (!isControlledValveOpen()) &&  // Run at full speed until the FHT8V valve should actually have shut and the boiler gone off.
    (0 == getTRVPercentOpen()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    3b38:	88 23       	and	r24, r24
    3b3a:	21 f4       	brne	.+8      	; 0x3b44 <loop+0x54>
    3b3c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <inWarmModeDebounced()>
    3b40:	88 23       	and	r24, r24
    3b42:	79 f4       	brne	.+30     	; 0x3b62 <loop+0x72>
    3b44:	80 91 c3 01 	lds	r24, 0x01C3
    3b48:	88 23       	and	r24, r24
    3b4a:	59 f4       	brne	.+22     	; 0x3b62 <loop+0x72>
    3b4c:	0e 94 df 08 	call	0x11be	; 0x11be <isControlledValveOpen()>
    3b50:	88 23       	and	r24, r24
    3b52:	39 f4       	brne	.+14     	; 0x3b62 <loop+0x72>
    3b54:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    3b58:	88 23       	and	r24, r24
    3b5a:	19 f4       	brne	.+6      	; 0x3b62 <loop+0x72>
    3b5c:	bb 24       	eor	r11, r11
    3b5e:	b3 94       	inc	r11
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <loop+0x74>
    3b62:	bb 24       	eor	r11, r11


  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    3b64:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getMinBoilerOnMinutes()>
    3b68:	f8 2e       	mov	r15, r24
    3b6a:	88 23       	and	r24, r24
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <loop+0x80>
    3b6e:	41 c0       	rjmp	.+130    	; 0x3bf2 <loop+0x102>
    3b70:	ff 24       	eor	r15, r15
    3b72:	f3 94       	inc	r15
  if(hubMode)
    {
#if defined(USE_MODULE_FHT8VSIMPLE)

    // Final poll to to cover up to end of previous minor loop.
    FHT8VCallForHeatPoll();
    3b74:	0e 94 45 0a 	call	0x148a	; 0x148a <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    3b78:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <FHT8VCallForHeatHeardGetAndClear()>
    3b7c:	8c 01       	movw	r16, r24
    const bool heardIt = hcRequest != (uint16_t)~0;
    3b7e:	ee 24       	eor	r14, r14
    3b80:	8f ef       	ldi	r24, 0xFF	; 255
    3b82:	0f 3f       	cpi	r16, 0xFF	; 255
    3b84:	18 07       	cpc	r17, r24
    3b86:	c1 f0       	breq	.+48     	; 0x3bb8 <loop+0xc8>
    3b88:	ee 24       	eor	r14, r14
    3b8a:	e3 94       	inc	r14
    if(heardIt)
      {
      serialPrintAndFlush(F("Call for heat from "));
    3b8c:	8f e7       	ldi	r24, 0x7F	; 127
    3b8e:	94 e0       	ldi	r25, 0x04	; 4
    3b90:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush((hcRequest >> 8) & 0xff);
    3b94:	81 2f       	mov	r24, r17
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	6a e0       	ldi	r22, 0x0A	; 10
    3b9a:	70 e0       	ldi	r23, 0x00	; 0
    3b9c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <serialPrintAndFlush(unsigned int, int)>
      serialPrintAndFlush(' ');
    3ba0:	80 e2       	ldi	r24, 0x20	; 32
    3ba2:	0e 94 65 15 	call	0x2aca	; 0x2aca <serialPrintAndFlush(char)>
      serialPrintAndFlush(hcRequest & 0xff);
    3ba6:	c8 01       	movw	r24, r16
    3ba8:	90 70       	andi	r25, 0x00	; 0
    3baa:	6a e0       	ldi	r22, 0x0A	; 10
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <serialPrintAndFlush(unsigned int, int)>
      serialPrintlnAndFlush();
    3bb2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
    3bb6:	04 c0       	rjmp	.+8      	; 0x3bc0 <loop+0xd0>
      }   

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: can stop listening if boiler on to satisfy local demand (so as to measure local temp better: less self-heating).
    if(heardIt ||
    3bb8:	0e 94 df 08 	call	0x11be	; 0x11be <isControlledValveOpen()>
    3bbc:	88 23       	and	r24, r24
    3bbe:	41 f0       	breq	.+16     	; 0x3bd0 <loop+0xe0>
       isControlledValveOpen())
      {
      boilerCountdownM = getMinBoilerOnMinutes(); // Expect to turn boiler on.
    3bc0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getMinBoilerOnMinutes()>
    3bc4:	80 93 c3 01 	sts	0x01C3, r24
      boilerNoCallM = 0; // Ensure set to eager full duty-cycle listen at boiler off.
    3bc8:	10 92 c4 01 	sts	0x01C4, r1
    // Never listen in the 'quiet' sensor minute in order to minimise noise and power consumption and self-heating.
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    if((!heardIt) &&
    3bcc:	ee 20       	and	r14, r14
    3bce:	89 f4       	brne	.+34     	; 0x3bf2 <loop+0x102>
    3bd0:	dd 20       	and	r13, r13
    3bd2:	79 f4       	brne	.+30     	; 0x3bf2 <loop+0x102>
    3bd4:	80 91 c3 01 	lds	r24, 0x01C3
    3bd8:	84 30       	cpi	r24, 0x04	; 4
    3bda:	58 f4       	brcc	.+22     	; 0x3bf2 <loop+0x102>
       (boilerCountdownM <= 3)) // Listen eagerly for fresh calls for heat for last 2--3 minutes before turning boiler off.
      {
      // Skip the minute before the 'quiet' minute also in very quiet mode.
      // (Should still catch at least one TX per 4 minutes at worst.)
      needsToEavesdrop =
          ((boilerNoCallM <= RX_REDUCE_MAX_M) || (3 != (minuteCount & 3)));
    3bdc:	80 91 c4 01 	lds	r24, 0x01C4
    3be0:	8f 31       	cpi	r24, 0x1F	; 31
    3be2:	08 f4       	brcc	.+2      	; 0x3be6 <loop+0xf6>
    3be4:	96 c1       	rjmp	.+812    	; 0x3f12 <loop+0x422>
    3be6:	80 91 c2 01 	lds	r24, 0x01C2
    3bea:	83 70       	andi	r24, 0x03	; 3
    3bec:	83 30       	cpi	r24, 0x03	; 3
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <loop+0x102>
    3bf0:	90 c1       	rjmp	.+800    	; 0x3f12 <loop+0x422>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    3bf2:	8c 2d       	mov	r24, r12
    3bf4:	0e 94 00 09 	call	0x1200	; 0x1200 <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    3bf8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <FHT8VCallForHeatHeardGetAndClear()>
    3bfc:	10 e0       	ldi	r17, 0x00	; 0
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  minimisePowerWithoutSleep(); // Must not turn off radio RX nor RX interrupts if in hub mode.
    3bfe:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <minimisePowerWithoutSleep()>
    3c02:	11 c0       	rjmp	.+34     	; 0x3c26 <loop+0x136>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    3c04:	11 23       	and	r17, r17
    3c06:	39 f0       	breq	.+14     	; 0x3c16 <loop+0x126>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <pollIO(bool)>
    3c14:	08 c0       	rjmp	.+16     	; 0x3c26 <loop+0x136>
#endif
#ifdef USE_MODULE_RFM22RADIOSIMPLE // Deal with radio if should be in standby state.
    // Force radio to known-low-power state from time to time (not all time to avoid unnecessary work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    3c16:	aa 20       	and	r10, r10
    3c18:	11 f4       	brne	.+4      	; 0x3c1e <loop+0x12e>
    3c1a:	cc 20       	and	r12, r12
    3c1c:	11 f0       	breq	.+4      	; 0x3c22 <loop+0x132>
    3c1e:	0e 94 83 12 	call	0x2506	; 0x2506 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep intil wake-up interrupt.
    3c22:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <sleepPwrSaveWithBODDisabled()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  minimisePowerWithoutSleep(); // Must not turn off radio RX nor RX interrupts if in hub mode.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    3c26:	90 91 a6 01 	lds	r25, 0x01A6
    3c2a:	80 91 c1 01 	lds	r24, 0x01C1
    3c2e:	89 17       	cp	r24, r25
    3c30:	49 f3       	breq	.-46     	; 0x3c04 <loop+0x114>
    // Force radio to known-low-power state from time to time (not all time to avoid unnecessary work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep intil wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    3c32:	90 93 c1 01 	sts	0x01C1, r25


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(!conserveBattery); // Time for extra TX before UI.
    3c36:	0e 94 ca 08 	call	0x1194	; 0x1194 <FHT8VGetHC1()>
    3c3a:	84 36       	cpi	r24, 0x64	; 100
    3c3c:	68 f4       	brcc	.+26     	; 0x3c58 <loop+0x168>
    3c3e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <FHT8VGetHC2()>
    3c42:	84 36       	cpi	r24, 0x64	; 100
    3c44:	48 f4       	brcc	.+18     	; 0x3c58 <loop+0x168>
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	8b 25       	eor	r24, r11
    3c4a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <FHT8VPollSyncAndTX_First(bool)>
    3c4e:	88 23       	and	r24, r24
    3c50:	19 f0       	breq	.+6      	; 0x3c58 <loop+0x168>
    3c52:	cc 24       	eor	r12, r12
    3c54:	c3 94       	inc	r12
    3c56:	01 c0       	rjmp	.+2      	; 0x3c5a <loop+0x16a>
    3c58:	cc 24       	eor	r12, r12
  // Must take ~300ms or less so as not to run over into next half second if two TXs are done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    3c5a:	80 91 c1 01 	lds	r24, 0x01C1
    3c5e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <tickUI(unsigned char)>
    3c62:	88 23       	and	r24, r24
    3c64:	11 f4       	brne	.+4      	; 0x3c6a <loop+0x17a>
    3c66:	88 24       	eor	r8, r8
    3c68:	04 c0       	rjmp	.+8      	; 0x3c72 <loop+0x182>
      {
      showStatus = true;
      computeTargetTemperature(); // Force recompute of temperature for (UI) responsivene
    3c6a:	0e 94 c4 06 	call	0xd88	; 0xd88 <computeTargetTemperature()>
    3c6e:	88 24       	eor	r8, r8
    3c70:	83 94       	inc	r8
      }
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    3c72:	cc 20       	and	r12, r12
    3c74:	79 f0       	breq	.+30     	; 0x3c94 <loop+0x1a4>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3c76:	0e 94 ca 08 	call	0x1194	; 0x1194 <FHT8VGetHC1()>
    3c7a:	84 36       	cpi	r24, 0x64	; 100
    3c7c:	50 f4       	brcc	.+20     	; 0x3c92 <loop+0x1a2>
    3c7e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <FHT8VGetHC2()>
    3c82:	84 36       	cpi	r24, 0x64	; 100
    3c84:	30 f4       	brcc	.+12     	; 0x3c92 <loop+0x1a2>
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	8b 25       	eor	r24, r11
    3c8a:	0e 94 a6 0c 	call	0x194c	; 0x194c <FHT8VPollSyncAndTX_Next(bool)>
    3c8e:	88 23       	and	r24, r24
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <loop+0x1a4>
    3c92:	cc 24       	eor	r12, r12
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    3c94:	99 24       	eor	r9, r9
    3c96:	93 94       	inc	r9
    3c98:	9b 24       	eor	r9, r11
    3c9a:	11 f0       	breq	.+4      	; 0x3ca0 <loop+0x1b0>
    3c9c:	11 e0       	ldi	r17, 0x01	; 1
    3c9e:	01 c0       	rjmp	.+2      	; 0x3ca2 <loop+0x1b2>
    3ca0:	1d 2d       	mov	r17, r13

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    3ca2:	80 91 c1 01 	lds	r24, 0x01C1
    3ca6:	82 33       	cpi	r24, 0x32	; 50
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <loop+0x1bc>
    3caa:	6b c0       	rjmp	.+214    	; 0x3d82 <loop+0x292>
    3cac:	83 33       	cpi	r24, 0x33	; 51
    3cae:	68 f4       	brcc	.+26     	; 0x3cca <loop+0x1da>
    3cb0:	82 30       	cpi	r24, 0x02	; 2
    3cb2:	29 f1       	breq	.+74     	; 0x3cfe <loop+0x20e>
    3cb4:	83 30       	cpi	r24, 0x03	; 3
    3cb6:	18 f4       	brcc	.+6      	; 0x3cbe <loop+0x1ce>
    3cb8:	88 23       	and	r24, r24
    3cba:	b9 f0       	breq	.+46     	; 0x3cea <loop+0x1fa>
    3cbc:	dc c0       	rjmp	.+440    	; 0x3e76 <loop+0x386>
    3cbe:	84 30       	cpi	r24, 0x04	; 4
    3cc0:	b9 f1       	breq	.+110    	; 0x3d30 <loop+0x240>
    3cc2:	88 30       	cpi	r24, 0x08	; 8
    3cc4:	09 f0       	breq	.+2      	; 0x3cc8 <loop+0x1d8>
    3cc6:	d7 c0       	rjmp	.+430    	; 0x3e76 <loop+0x386>
    3cc8:	39 c0       	rjmp	.+114    	; 0x3d3c <loop+0x24c>
    3cca:	86 33       	cpi	r24, 0x36	; 54
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <loop+0x1e0>
    3cce:	65 c0       	rjmp	.+202    	; 0x3d9a <loop+0x2aa>
    3cd0:	87 33       	cpi	r24, 0x37	; 55
    3cd2:	20 f4       	brcc	.+8      	; 0x3cdc <loop+0x1ec>
    3cd4:	84 33       	cpi	r24, 0x34	; 52
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <loop+0x1ea>
    3cd8:	ce c0       	rjmp	.+412    	; 0x3e76 <loop+0x386>
    3cda:	59 c0       	rjmp	.+178    	; 0x3d8e <loop+0x29e>
    3cdc:	88 33       	cpi	r24, 0x38	; 56
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <loop+0x1f2>
    3ce0:	65 c0       	rjmp	.+202    	; 0x3dac <loop+0x2bc>
    3ce2:	8a 33       	cpi	r24, 0x3A	; 58
    3ce4:	09 f0       	breq	.+2      	; 0x3ce8 <loop+0x1f8>
    3ce6:	c7 c0       	rjmp	.+398    	; 0x3e76 <loop+0x386>
    3ce8:	af c0       	rjmp	.+350    	; 0x3e48 <loop+0x358>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    3cea:	80 91 c2 01 	lds	r24, 0x01C2
    3cee:	8f 5f       	subi	r24, 0xFF	; 255
    3cf0:	80 93 c2 01 	sts	0x01C2, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    3cf4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <checkUserSchedule()>
      // Ensure that RTC is persisted promptly when needed.
      persistRTC();
    3cf8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <persistRTC()>
    3cfc:	bc c0       	rjmp	.+376    	; 0x3e76 <loop+0x386>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)getBatterymV(), getSubCycleTime() ^ (uint8_t)getAmbientLight(), (uint8_t)getTemperatureC16()); } break; }
    3cfe:	11 23       	and	r17, r17
    3d00:	09 f4       	brne	.+2      	; 0x3d04 <loop+0x214>
    3d02:	b9 c0       	rjmp	.+370    	; 0x3e76 <loop+0x386>
    3d04:	06 b5       	in	r16, 0x26	; 38
    3d06:	80 91 c2 01 	lds	r24, 0x01C2
    3d0a:	08 27       	eor	r16, r24
    3d0c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <getBatterymV()>
    3d10:	e8 2e       	mov	r14, r24
    3d12:	10 91 b2 00 	lds	r17, 0x00B2
    3d16:	0e 94 31 04 	call	0x862	; 0x862 <getAmbientLight()>
    3d1a:	f8 2e       	mov	r15, r24
    3d1c:	0e 94 00 16 	call	0x2c00	; 0x2c00 <getTemperatureC16()>
    3d20:	48 2f       	mov	r20, r24
    3d22:	1f 25       	eor	r17, r15
    3d24:	80 2f       	mov	r24, r16
    3d26:	8e 25       	eor	r24, r14
    3d28:	61 2f       	mov	r22, r17
    3d2a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3d2e:	a3 c0       	rjmp	.+326    	; 0x3e76 <loop+0x386>
    // Monitor battery voltage; measure and recompute status less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { readBatterymV(); } break; }
    3d30:	11 23       	and	r17, r17
    3d32:	09 f4       	brne	.+2      	; 0x3d36 <loop+0x246>
    3d34:	a0 c0       	rjmp	.+320    	; 0x3e76 <loop+0x386>
    3d36:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <readBatterymV()>
    3d3a:	9d c0       	rjmp	.+314    	; 0x3e76 <loop+0x386>
    // This is entirely optional, and just improves odds of an urgent call for heat being acted on quickly,
    // so it can be cancelled with any reasonable excuse to save some energy and bandwidth.
    // This should always be safe, ie not done unless valve actually open, etc/
    case 8:
      {
      if((!hubMode) && // Hub doesn't need to send extra TXes to itself!
    3d3c:	ff 20       	and	r15, r15
    3d3e:	09 f0       	breq	.+2      	; 0x3d42 <loop+0x252>
    3d40:	9a c0       	rjmp	.+308    	; 0x3e76 <loop+0x386>
    3d42:	aa 20       	and	r10, r10
    3d44:	09 f0       	breq	.+2      	; 0x3d48 <loop+0x258>
    3d46:	97 c0       	rjmp	.+302    	; 0x3e76 <loop+0x386>
    3d48:	cc 20       	and	r12, r12
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <loop+0x25e>
    3d4c:	94 c0       	rjmp	.+296    	; 0x3e76 <loop+0x386>
    3d4e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <inWarmModeDebounced()>
    3d52:	88 23       	and	r24, r24
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <loop+0x268>
    3d56:	9f c0       	rjmp	.+318    	; 0x3e96 <loop+0x3a6>
    3d58:	0e 94 df 08 	call	0x11be	; 0x11be <isControlledValveOpen()>
    3d5c:	88 23       	and	r24, r24
    3d5e:	09 f4       	brne	.+2      	; 0x3d62 <loop+0x272>
    3d60:	9a c0       	rjmp	.+308    	; 0x3e96 <loop+0x3a6>
    3d62:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    3d66:	8b 34       	cpi	r24, 0x4B	; 75
    3d68:	28 f4       	brcc	.+10     	; 0x3d74 <loop+0x284>
    3d6a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <inBakeModeDebounced()>
    3d6e:	88 23       	and	r24, r24
    3d70:	09 f4       	brne	.+2      	; 0x3d74 <loop+0x284>
    3d72:	91 c0       	rjmp	.+290    	; 0x3e96 <loop+0x3a6>
         (!useExtraFHT8VTXSlots) && // Don't send if there's an immediately pending TX.
         inWarmModeDebounced() && // Only do extra TX if still in a warming mode, ie don't TX if mode just changed to FROST.
         (isControlledValveOpen()) && // Valve should be open already so we won't hurt the pump/boiler with call for heat.
         ((getTRVPercentOpen() >= 75) || inBakeModeDebounced())) // Valve fairly wide open, eg for BAKE or because boiler not hearing us reliably.
          {
          FHT8VDoSafeExtraTXToHub();
    3d74:	0e 94 1a 0b 	call	0x1634	; 0x1634 <FHT8VDoSafeExtraTXToHub()>
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINTLN_FLASHSTRING("Extra TX");
    3d78:	86 e7       	ldi	r24, 0x76	; 118
    3d7a:	94 e0       	ldi	r25, 0x04	; 4
    3d7c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    3d80:	8a c0       	rjmp	.+276    	; 0x3e96 <loop+0x3a6>
#endif

    // Read all environmental inputs, late in the cycle.
#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected temperature base.
    case 50: { if(runAll) { readTempPot(); } break; }
    3d82:	11 23       	and	r17, r17
    3d84:	09 f4       	brne	.+2      	; 0x3d88 <loop+0x298>
    3d86:	77 c0       	rjmp	.+238    	; 0x3e76 <loop+0x386>
    3d88:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <readTempPot()>
    3d8c:	74 c0       	rjmp	.+232    	; 0x3e76 <loop+0x386>
#endif
    // Sample ambient light levels.
    case 52: { if(runAll) { readAmbientLight(); } break; }
    3d8e:	11 23       	and	r17, r17
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <loop+0x2a4>
    3d92:	71 c0       	rjmp	.+226    	; 0x3e76 <loop+0x386>
    3d94:	0e 94 36 04 	call	0x86c	; 0x86c <readAmbientLight()>
    3d98:	6e c0       	rjmp	.+220    	; 0x3e76 <loop+0x386>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { readTemperatureC16(); } break; }
    3d9a:	ff 20       	and	r15, r15
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <loop+0x2b0>
    3d9e:	d1 2e       	mov	r13, r17
    3da0:	dd 20       	and	r13, r13
    3da2:	09 f4       	brne	.+2      	; 0x3da6 <loop+0x2b6>
    3da4:	68 c0       	rjmp	.+208    	; 0x3e76 <loop+0x386>
    3da6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <readTemperatureC16()>
    3daa:	65 c0       	rjmp	.+202    	; 0x3e76 <loop+0x386>
    // Compute targets and heat demand based on environmental inputs.
    // Note: ensure that valve-shut message is always conveyed quickly to valve even in slow/'conserve' mode.
    // Also drives OUT_HEATCALL to control local boiler if in central hub mode.
    case 56:
      {
      if(computeCallForHeat()) // Should be called each minute to work correctly.
    3dac:	0e 94 f4 06 	call	0xde8	; 0xde8 <computeCallForHeat()>
    3db0:	88 23       	and	r24, r24
    3db2:	51 f0       	breq	.+20     	; 0x3dc8 <loop+0x2d8>
        {
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    3db4:	0e 94 ca 08 	call	0x1194	; 0x1194 <FHT8VGetHC1()>
    3db8:	84 36       	cpi	r24, 0x64	; 100
    3dba:	30 f4       	brcc	.+12     	; 0x3dc8 <loop+0x2d8>
    3dbc:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <FHT8VGetHC2()>
    3dc0:	84 36       	cpi	r24, 0x64	; 100
    3dc2:	10 f4       	brcc	.+4      	; 0x3dc8 <loop+0x2d8>
    3dc4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode && (boilerCountdownM == 0) && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }
    3dc8:	ff 20       	and	r15, r15
    3dca:	59 f0       	breq	.+22     	; 0x3de2 <loop+0x2f2>
    3dcc:	80 91 c3 01 	lds	r24, 0x01C3
    3dd0:	88 23       	and	r24, r24
    3dd2:	39 f4       	brne	.+14     	; 0x3de2 <loop+0x2f2>
    3dd4:	80 91 c4 01 	lds	r24, 0x01C4
    3dd8:	8f 3f       	cpi	r24, 0xFF	; 255
    3dda:	19 f0       	breq	.+6      	; 0x3de2 <loop+0x2f2>
    3ddc:	8f 5f       	subi	r24, 0xFF	; 255
    3dde:	80 93 c4 01 	sts	0x01C4, r24

      // If remote calls for heat from local boiler are (still) active then ensure that the boiler is on.
      if(hubMode && (boilerCountdownM > 0))
    3de2:	ff 20       	and	r15, r15
    3de4:	f1 f0       	breq	.+60     	; 0x3e22 <loop+0x332>
    3de6:	80 91 c3 01 	lds	r24, 0x01C3
    3dea:	88 23       	and	r24, r24
    3dec:	d1 f0       	breq	.+52     	; 0x3e22 <loop+0x332>
        {
        fastDigitalWrite(OUT_HEATCALL, HIGH);
    3dee:	5e 9a       	sbi	0x0b, 6	; 11
#if 1 && defined(DEBUG)
        DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, mins left: ");
    3df0:	8f e5       	ldi	r24, 0x5F	; 95
    3df2:	94 e0       	ldi	r25, 0x04	; 4
    3df4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
        DEBUG_SERIAL_PRINT(boilerCountdownM);
    3df8:	80 91 c3 01 	lds	r24, 0x01C3
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	6a e0       	ldi	r22, 0x0A	; 10
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
        DEBUG_SERIAL_PRINTLN();
    3e06:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#else
        serialPrintlnAndFlush(F("Boiler on"));
#endif
        // Don't count down if forced into low-power (non-listening) mode for quiet 'sensor' minute
        // and in the last minute or so of countdown and thus might miss a last-chance continuing call for heat.
        if(!minute0From4ForSensors || (boilerCountdownM > 1)) { --boilerCountdownM; }
    3e0a:	dd 20       	and	r13, r13
    3e0c:	21 f0       	breq	.+8      	; 0x3e16 <loop+0x326>
    3e0e:	80 91 c3 01 	lds	r24, 0x01C3
    3e12:	82 30       	cpi	r24, 0x02	; 2
    3e14:	a0 f0       	brcs	.+40     	; 0x3e3e <loop+0x34e>
    3e16:	80 91 c3 01 	lds	r24, 0x01C3
    3e1a:	81 50       	subi	r24, 0x01	; 1
    3e1c:	80 93 c3 01 	sts	0x01C3, r24
    3e20:	0e c0       	rjmp	.+28     	; 0x3e3e <loop+0x34e>
        }
      else
#endif
        // Local call for heat given local TRV is at least partly open/on.  (TODO: modulating!)
        // In hub mode delay turning on until our local valve is at least partly open.
        if(hubMode ? isControlledValveOpen() : (0 != getTRVPercentOpen()))
    3e22:	ff 20       	and	r15, r15
    3e24:	19 f0       	breq	.+6      	; 0x3e2c <loop+0x33c>
    3e26:	0e 94 df 08 	call	0x11be	; 0x11be <isControlledValveOpen()>
    3e2a:	04 c0       	rjmp	.+8      	; 0x3e34 <loop+0x344>
    3e2c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <getTRVPercentOpen()>
    3e30:	81 11       	cpse	r24, r1
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	88 23       	and	r24, r24
    3e36:	11 f0       	breq	.+4      	; 0x3e3c <loop+0x34c>
          { fastDigitalWrite(OUT_HEATCALL, HIGH); }
    3e38:	5e 9a       	sbi	0x0b, 6	; 11
    3e3a:	01 c0       	rjmp	.+2      	; 0x3e3e <loop+0x34e>
      else // Stop calling for heat from the boiler.
          { fastDigitalWrite(OUT_HEATCALL, LOW); }
    3e3c:	5e 98       	cbi	0x0b, 6	; 11

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    3e3e:	11 23       	and	r17, r17
    3e40:	d1 f0       	breq	.+52     	; 0x3e76 <loop+0x386>
    3e42:	88 24       	eor	r8, r8
    3e44:	83 94       	inc	r8
    3e46:	17 c0       	rjmp	.+46     	; 0x3e76 <loop+0x386>
    // Stats samples; should never be missed.
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      if(minute0From4ForSensors) // Hope to take lowest-noise samples on the special minute out of each 4.
    3e48:	dd 20       	and	r13, r13
    3e4a:	a9 f0       	breq	.+42     	; 0x3e76 <loop+0x386>
        {
        const uint_least8_t mm = getMinutesLT();
    3e4c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <getMinutesLT()>
        switch(mm)
    3e50:	88 32       	cpi	r24, 0x28	; 40
    3e52:	30 f4       	brcc	.+12     	; 0x3e60 <loop+0x370>
    3e54:	84 32       	cpi	r24, 0x24	; 36
    3e56:	40 f4       	brcc	.+16     	; 0x3e68 <loop+0x378>
    3e58:	80 51       	subi	r24, 0x10	; 16
    3e5a:	84 30       	cpi	r24, 0x04	; 4
    3e5c:	60 f4       	brcc	.+24     	; 0x3e76 <loop+0x386>
    3e5e:	04 c0       	rjmp	.+8      	; 0x3e68 <loop+0x378>
    3e60:	88 53       	subi	r24, 0x38	; 56
    3e62:	84 30       	cpi	r24, 0x04	; 4
    3e64:	40 f4       	brcc	.+16     	; 0x3e76 <loop+0x386>
    3e66:	04 c0       	rjmp	.+8      	; 0x3e70 <loop+0x380>
          {
          case 16: case 17: case 18: case 19:
          case 36: case 37: case 38: case 39:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of juice.
    3e68:	aa 20       	and	r10, r10
    3e6a:	29 f4       	brne	.+10     	; 0x3e76 <loop+0x386>
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	01 c0       	rjmp	.+2      	; 0x3e72 <loop+0x382>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at end of hour.
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	0e 94 e6 05 	call	0xbcc	; 0xbcc <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3e76:	cc 20       	and	r12, r12
    3e78:	71 f0       	breq	.+28     	; 0x3e96 <loop+0x3a6>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3e7a:	0e 94 ca 08 	call	0x1194	; 0x1194 <FHT8VGetHC1()>
    3e7e:	84 36       	cpi	r24, 0x64	; 100
    3e80:	48 f4       	brcc	.+18     	; 0x3e94 <loop+0x3a4>
    3e82:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <FHT8VGetHC2()>
    3e86:	84 36       	cpi	r24, 0x64	; 100
    3e88:	28 f4       	brcc	.+10     	; 0x3e94 <loop+0x3a4>
    3e8a:	89 2d       	mov	r24, r9
    3e8c:	0e 94 a6 0c 	call	0x194c	; 0x194c <FHT8VPollSyncAndTX_Next(bool)>
    3e90:	88 23       	and	r24, r24
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <loop+0x3a6>
    3e94:	cc 24       	eor	r12, r12
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    3e96:	88 20       	and	r8, r8
    3e98:	11 f0       	breq	.+4      	; 0x3e9e <loop+0x3ae>
    3e9a:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3e9e:	cc 20       	and	r12, r12
    3ea0:	59 f0       	breq	.+22     	; 0x3eb8 <loop+0x3c8>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3ea2:	0e 94 ca 08 	call	0x1194	; 0x1194 <FHT8VGetHC1()>
    3ea6:	84 36       	cpi	r24, 0x64	; 100
    3ea8:	38 f4       	brcc	.+14     	; 0x3eb8 <loop+0x3c8>
    3eaa:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <FHT8VGetHC2()>
    3eae:	84 36       	cpi	r24, 0x64	; 100
    3eb0:	18 f4       	brcc	.+6      	; 0x3eb8 <loop+0x3c8>
    3eb2:	89 2d       	mov	r24, r9
    3eb4:	0e 94 a6 0c 	call	0x194c	; 0x194c <FHT8VPollSyncAndTX_Next(bool)>
  // then poll/prompt the user for input
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
  // TODO: be clever and if getSubCycleTime() has gone backwards then assume end tick has been missed and return from loop() without sleeping.
#if defined(SUPPORT_CLI)
  if(showStatus || isCLIActive())
    3eb8:	88 20       	and	r8, r8
    3eba:	21 f4       	brne	.+8      	; 0x3ec4 <loop+0x3d4>
    3ebc:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <isCLIActive()>
    3ec0:	88 23       	and	r24, r24
    3ec2:	b1 f0       	breq	.+44     	; 0x3ef0 <loop+0x400>
    {
    const uint8_t sct = getSubCycleTime();
    3ec4:	20 91 b2 00 	lds	r18, 0x00B2
    if(sct < (GSCT_MAX-(GSCT_MAX/8)))
    3ec8:	20 3e       	cpi	r18, 0xE0	; 224
    3eca:	90 f4       	brcc	.+36     	; 0x3ef0 <loop+0x400>
      // Don't listen longer than ~500ms or beyond the last 16th of the cycle,
      // as listening for UART RX uses lots of power.
      { pollCLI((uint8_t)fnmin(GSCT_MAX-(GSCT_MAX/16), sct+(int)(SUB_CYCLE_TICKS_PER_S/2))); }
    3ecc:	80 ef       	ldi	r24, 0xF0	; 240
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	9a 83       	std	Y+2, r25	; 0x02
    3ed2:	89 83       	std	Y+1, r24	; 0x01
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	20 5c       	subi	r18, 0xC0	; 192
    3ed8:	3f 4f       	sbci	r19, 0xFF	; 255
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic();


// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    3eda:	20 3f       	cpi	r18, 0xF0	; 240
    3edc:	31 05       	cpc	r19, r1
    3ede:	14 f4       	brge	.+4      	; 0x3ee4 <loop+0x3f4>
    3ee0:	c9 01       	movw	r24, r18
    3ee2:	02 c0       	rjmp	.+4      	; 0x3ee8 <loop+0x3f8>
    3ee4:	80 ef       	ldi	r24, 0xF0	; 240
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	3c 83       	std	Y+4, r19	; 0x04
    3eea:	2b 83       	std	Y+3, r18	; 0x03
    3eec:	0e 94 4f 19 	call	0x329e	; 0x329e <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    3ef0:	90 91 a6 01 	lds	r25, 0x01A6
    3ef4:	80 91 c1 01 	lds	r24, 0x01C1
    3ef8:	89 17       	cp	r24, r25
    3efa:	81 f0       	breq	.+32     	; 0x3f1c <loop+0x42c>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("ERROR: loop() overrun!");
    3efc:	88 e4       	ldi	r24, 0x48	; 72
    3efe:	94 e0       	ldi	r25, 0x04	; 4
    3f00:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    3f04:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    3f08:	80 91 a6 01 	lds	r24, 0x01A6
    3f0c:	80 93 c1 01 	sts	0x01C1, r24
    3f10:	05 c0       	rjmp	.+10     	; 0x3f1c <loop+0x42c>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    3f12:	8c 2d       	mov	r24, r12
    3f14:	0e 94 13 09 	call	0x1226	; 0x1226 <SetupToEavesdropOnFHT8V(bool)>
    3f18:	11 e0       	ldi	r17, 0x01	; 1
    3f1a:	71 ce       	rjmp	.-798    	; 0x3bfe <loop+0x10e>
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    }
  }
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	cf 91       	pop	r28
    3f26:	df 91       	pop	r29
    3f28:	1f 91       	pop	r17
    3f2a:	0f 91       	pop	r16
    3f2c:	ff 90       	pop	r15
    3f2e:	ef 90       	pop	r14
    3f30:	df 90       	pop	r13
    3f32:	cf 90       	pop	r12
    3f34:	bf 90       	pop	r11
    3f36:	af 90       	pop	r10
    3f38:	9f 90       	pop	r9
    3f3a:	8f 90       	pop	r8
    3f3c:	08 95       	ret

00003f3e <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	f8 2e       	mov	r15, r24
    3f4a:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    3f4c:	83 e8       	ldi	r24, 0x83	; 131
    3f4e:	9e e1       	ldi	r25, 0x1E	; 30
    3f50:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    3f54:	88 e6       	ldi	r24, 0x68	; 104
    3f56:	96 e0       	ldi	r25, 0x06	; 6
    3f58:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    3f5c:	cf 2d       	mov	r28, r15
    3f5e:	d0 e0       	ldi	r29, 0x00	; 0
    3f60:	ce 01       	movw	r24, r28
    3f62:	6a e0       	ldi	r22, 0x0A	; 10
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    3f6a:	85 e6       	ldi	r24, 0x65	; 101
    3f6c:	96 e0       	ldi	r25, 0x06	; 6
    3f6e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    3f72:	c8 01       	movw	r24, r16
    3f74:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    3f78:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    3f7c:	5c 9a       	sbi	0x0b, 4	; 11
  sleepLowPowerMs(2*PP_OFF_MS);
    3f7e:	80 e4       	ldi	r24, 0x40	; 64
    3f80:	9f e0       	ldi	r25, 0x0F	; 15
    3f82:	07 c0       	rjmp	.+14     	; 0x3f92 <posPOST(unsigned char, __FlashStringHelper const*)+0x54>
  
  int i = position;
  while(--i >= 0)
    {
    LED_HEATCALL_ON();
    3f84:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    3f8c:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(PP_OFF_MS);
    3f8e:	8f e9       	ldi	r24, 0x9F	; 159
    3f90:	97 e0       	ldi	r25, 0x07	; 7
    3f92:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
  sleepLowPowerMs(2*PP_OFF_MS);
  
  int i = position;
  while(--i >= 0)
    3f96:	21 97       	sbiw	r28, 0x01	; 1
    3f98:	8f ef       	ldi	r24, 0xFF	; 255
    3f9a:	cf 3f       	cpi	r28, 0xFF	; 255
    3f9c:	d8 07       	cpc	r29, r24
    3f9e:	91 f7       	brne	.-28     	; 0x3f84 <posPOST(unsigned char, __FlashStringHelper const*)+0x46>
    tinyPause();
    LED_HEATCALL_OFF();
    sleepLowPowerMs(PP_OFF_MS);
    }

  sleepLowPowerMs(PP_OFF_MS);
    3fa0:	8f e9       	ldi	r24, 0x9F	; 159
    3fa2:	97 e0       	ldi	r25, 0x07	; 7
    3fa4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  LED_HEATCALL_ON();
    3fa8:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000);
    3faa:	83 e8       	ldi	r24, 0x83	; 131
    3fac:	9e e1       	ldi	r25, 0x1E	; 30
    3fae:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	1f 91       	pop	r17
    3fb8:	0f 91       	pop	r16
    3fba:	ff 90       	pop	r15
    3fbc:	08 95       	ret

00003fbe <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    3fbe:	0e 94 3f 12 	call	0x247e	; 0x247e <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    3fc2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    3fc6:	84 e0       	ldi	r24, 0x04	; 4
    3fc8:	61 e0       	ldi	r22, 0x01	; 1
    3fca:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    3fce:	5c 98       	cbi	0x0b, 4	; 11
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    3fd6:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    3fd8:	83 e0       	ldi	r24, 0x03	; 3
    3fda:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <nap(signed char)>
    3fde:	f7 cf       	rjmp	.-18     	; 0x3fce <panic()+0x10>

00003fe0 <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    3fe0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    3fe4:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
  }
    3fe8:	08 95       	ret

00003fea <setup>:
  sleepLowPowerMs(1000);
  }

// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    3fea:	2f 92       	push	r2
    3fec:	3f 92       	push	r3
    3fee:	4f 92       	push	r4
    3ff0:	5f 92       	push	r5
    3ff2:	6f 92       	push	r6
    3ff4:	7f 92       	push	r7
    3ff6:	8f 92       	push	r8
    3ff8:	9f 92       	push	r9
    3ffa:	af 92       	push	r10
    3ffc:	bf 92       	push	r11
    3ffe:	cf 92       	push	r12
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	df 93       	push	r29
    400c:	cf 93       	push	r28
    400e:	00 d0       	rcall	.+0      	; 0x4010 <setup+0x26>
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
//  // Attempt to capture reason for reset/(re)start.
//  const uint8_t mcusr = MCUSR;
//  MCUSR = 0;

  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    4014:	0e 94 b5 10 	call	0x216a	; 0x216a <powerSetup()>

  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    4018:	e0 90 b2 00 	lds	r14, 0x00B2
    401c:	0e e0       	ldi	r16, 0x0E	; 14
    401e:	10 e0       	ldi	r17, 0x00	; 0
    4020:	3f c0       	rjmp	.+126    	; 0x40a0 <setup+0xb6>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    4022:	04 30       	cpi	r16, 0x04	; 4
    4024:	11 05       	cpc	r17, r1
    4026:	31 f1       	breq	.+76     	; 0x4074 <setup+0x8a>
    4028:	05 30       	cpi	r16, 0x05	; 5
    402a:	11 05       	cpc	r17, r1
    402c:	4c f4       	brge	.+18     	; 0x4040 <setup+0x56>
    402e:	02 30       	cpi	r16, 0x02	; 2
    4030:	11 05       	cpc	r17, r1
    4032:	79 f1       	breq	.+94     	; 0x4092 <setup+0xa8>
    4034:	03 30       	cpi	r16, 0x03	; 3
    4036:	11 05       	cpc	r17, r1
    4038:	34 f5       	brge	.+76     	; 0x4086 <setup+0x9c>
    403a:	17 ff       	sbrs	r17, 7
    403c:	24 c0       	rjmp	.+72     	; 0x4086 <setup+0x9c>
    403e:	13 c0       	rjmp	.+38     	; 0x4066 <setup+0x7c>
    4040:	09 30       	cpi	r16, 0x09	; 9
    4042:	11 05       	cpc	r17, r1
    4044:	49 f1       	breq	.+82     	; 0x4098 <setup+0xae>
    4046:	0a 30       	cpi	r16, 0x0A	; 10
    4048:	11 05       	cpc	r17, r1
    404a:	3c f4       	brge	.+14     	; 0x405a <setup+0x70>
    404c:	05 30       	cpi	r16, 0x05	; 5
    404e:	11 05       	cpc	r17, r1
    4050:	d1 f0       	breq	.+52     	; 0x4086 <setup+0x9c>
    4052:	08 30       	cpi	r16, 0x08	; 8
    4054:	11 05       	cpc	r17, r1
    4056:	39 f4       	brne	.+14     	; 0x4066 <setup+0x7c>
    4058:	16 c0       	rjmp	.+44     	; 0x4086 <setup+0x9c>
    405a:	0a 30       	cpi	r16, 0x0A	; 10
    405c:	11 05       	cpc	r17, r1
    405e:	a9 f0       	breq	.+42     	; 0x408a <setup+0xa0>
    4060:	0c 30       	cpi	r16, 0x0C	; 12
    4062:	11 05       	cpc	r17, r1
    4064:	a1 f0       	breq	.+40     	; 0x408e <setup+0xa4>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    4066:	80 2f       	mov	r24, r16
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <digitalWrite>
    406e:	80 2f       	mov	r24, r16
    4070:	61 e0       	ldi	r22, 0x01	; 1
    4072:	14 c0       	rjmp	.+40     	; 0x409c <setup+0xb2>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    4074:	84 e0       	ldi	r24, 0x04	; 4
    4076:	61 e0       	ldi	r22, 0x01	; 1
    4078:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
    407c:	84 e0       	ldi	r24, 0x04	; 4
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <digitalWrite>
    4084:	0d c0       	rjmp	.+26     	; 0x40a0 <setup+0xb6>
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
#ifdef BUTTON_LEARN2_L
      case BUTTON_LEARN2_L: // Learn button 2 is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    4086:	80 2f       	mov	r24, r16
    4088:	05 c0       	rjmp	.+10     	; 0x4094 <setup+0xaa>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    408a:	8a e0       	ldi	r24, 0x0A	; 10
    408c:	03 c0       	rjmp	.+6      	; 0x4094 <setup+0xaa>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    408e:	8c e0       	ldi	r24, 0x0C	; 12
    4090:	01 c0       	rjmp	.+2      	; 0x4094 <setup+0xaa>
#endif

#ifdef PIN_OW_DQ_DATA
      // Weak pull-up to avoid leakage current.
      case PIN_OW_DQ_DATA: { pinMode(PIN_OW_DQ_DATA, INPUT_PULLUP); break; }
    4092:	82 e0       	ldi	r24, 0x02	; 2
    4094:	62 e0       	ldi	r22, 0x02	; 2
    4096:	02 c0       	rjmp	.+4      	; 0x409c <setup+0xb2>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    4098:	89 e0       	ldi	r24, 0x09	; 9
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	0e 94 65 25 	call	0x4aca	; 0x4aca <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    40a0:	01 50       	subi	r16, 0x01	; 1
    40a2:	10 40       	sbci	r17, 0x00	; 0
    40a4:	17 ff       	sbrs	r17, 7
    40a6:	bd cf       	rjmp	.-134    	; 0x4022 <setup+0x38>

  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    40a8:	0e 94 98 13 	call	0x2730	; 0x2730 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintlnAndFlush(F("\r\nOpenTRV built " __DATE__ " " __TIME__ " booting..."));
    40ac:	85 e3       	ldi	r24, 0x35	; 53
    40ae:	96 e0       	ldi	r25, 0x06	; 6
    40b0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#ifdef V0p2_REV
  serialPrintAndFlush(F("Board V0.2, REV"));
    40b4:	85 e2       	ldi	r24, 0x25	; 37
    40b6:	96 e0       	ldi	r25, 0x06	; 6
    40b8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	6a e0       	ldi	r22, 0x0A	; 10
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  serialPrintlnAndFlush();
    40c8:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    40cc:	f9 99       	sbic	0x1f, 1	; 31
    40ce:	fe cf       	rjmp	.-4      	; 0x40cc <setup+0xe2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    40d0:	86 e0       	ldi	r24, 0x06	; 6
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	92 bd       	out	0x22, r25	; 34
    40d6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    40d8:	f8 9a       	sbi	0x1f, 0	; 31
    40da:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    40dc:	f9 99       	sbic	0x1f, 1	; 31
    40de:	fe cf       	rjmp	.-4      	; 0x40dc <setup+0xf2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    40e0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    40e2:	86 e0       	ldi	r24, 0x06	; 6
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	92 bd       	out	0x22, r25	; 34
    40e8:	81 bd       	out	0x21, r24	; 33
#endif

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    40ea:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    40ec:	10 bd       	out	0x20, r17	; 32
    40ee:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	fa 9a       	sbi	0x1f, 2	; 31
    40f6:	f9 9a       	sbi	0x1f, 1	; 31
    40f8:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN();
    40fa:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    40fe:	86 e0       	ldi	r24, 0x06	; 6
    4100:	96 e0       	ldi	r25, 0x06	; 6
    4102:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Reset count: ");
    4106:	88 ef       	ldi	r24, 0xF8	; 248
    4108:	95 e0       	ldi	r25, 0x05	; 5
    410a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    410e:	81 2f       	mov	r24, r17
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	6a e0       	ldi	r22, 0x0A	; 10
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    411a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
//  DEBUG_SERIAL_PRINT_FLASHSTRING("MCUSR: "); // bits: 3 WDRF, 2 BORF, 1 EXTRF, 0 PORF.
//  DEBUG_SERIAL_PRINTFMT(mcusr, HEX);
//  DEBUG_SERIAL_PRINTLN();
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    411e:	8d ee       	ldi	r24, 0xED	; 237
    4120:	95 e0       	ldi	r25, 0x05	; 5
    4122:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    4126:	80 91 39 03 	lds	r24, 0x0339
    412a:	90 91 3a 03 	lds	r25, 0x033A
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	11 f0       	breq	.+4      	; 0x4136 <setup+0x14c>
    4132:	9c 01       	movw	r18, r24
    4134:	02 c0       	rjmp	.+4      	; 0x413a <setup+0x150>
    4136:	2d e3       	ldi	r18, 0x3D	; 61
    4138:	33 e0       	ldi	r19, 0x03	; 3
    413a:	ce 01       	movw	r24, r28
    413c:	01 96       	adiw	r24, 0x01	; 1
    413e:	82 1b       	sub	r24, r18
    4140:	93 0b       	sbc	r25, r19
    4142:	6a e0       	ldi	r22, 0x0A	; 10
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    414a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#ifdef UNIT_TESTS
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS WILL BE RUN...");
#endif
#endif

  posPOST(1, F("about to test RFM23"));
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	69 ed       	ldi	r22, 0xD9	; 217
    4152:	75 e0       	ldi	r23, 0x05	; 5
    4154:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <posPOST(unsigned char, __FlashStringHelper const*)>

#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
    4158:	8a ec       	ldi	r24, 0xCA	; 202
    415a:	95 e0       	ldi	r25, 0x05	; 5
    415c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    4160:	0e 94 3f 12 	call	0x247e	; 0x247e <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    4164:	0e 94 25 13 	call	0x264a	; 0x264a <RFM22CheckConnected()>
    4168:	88 23       	and	r24, r24
    416a:	11 f4       	brne	.+4      	; 0x4170 <setup+0x186>
    416c:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    4170:	88 e6       	ldi	r24, 0x68	; 104
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 1e 12 	call	0x243c	; 0x243c <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    4178:	0e 94 83 12 	call	0x2506	; 0x2506 <RFM22ModeStandbyAndClearState()>
#endif

  posPOST(2, F("RFM23 OK"));
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	61 ec       	ldi	r22, 0xC1	; 193
    4180:	75 e0       	ldi	r23, 0x05	; 5
    4182:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <posPOST(unsigned char, __FlashStringHelper const*)>
  // Do additional POST.
  optionalPOST();
#endif

  // Get current power supply voltage.
  const uint16_t Vcc = readBatterymV();
    4186:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <readBatterymV()>
    418a:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    418c:	8b eb       	ldi	r24, 0xBB	; 187
    418e:	95 e0       	ldi	r25, 0x05	; 5
    4190:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    4194:	c1 01       	movw	r24, r2
    4196:	6a e0       	ldi	r22, 0x0A	; 10
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    419e:	88 eb       	ldi	r24, 0xB8	; 184
    41a0:	95 e0       	ldi	r25, 0x05	; 5
    41a2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement.
  const int intTempC16 = readInternalTemperatureC16();
    41a6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <readInternalTemperatureC16()>
    41aa:	2c 01       	movw	r4, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    41ac:	8d ea       	ldi	r24, 0xAD	; 173
    41ae:	95 e0       	ldi	r25, 0x05	; 5
    41b0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    41b4:	c2 01       	movw	r24, r4
    41b6:	08 96       	adiw	r24, 0x08	; 8
    41b8:	64 e0       	ldi	r22, 0x04	; 4
    41ba:	95 95       	asr	r25
    41bc:	87 95       	ror	r24
    41be:	6a 95       	dec	r22
    41c0:	e1 f7       	brne	.-8      	; 0x41ba <setup+0x1d0>
    41c2:	6a e0       	ldi	r22, 0x0A	; 10
    41c4:	70 e0       	ldi	r23, 0x00	; 0
    41c6:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    41ca:	88 ea       	ldi	r24, 0xA8	; 168
    41cc:	95 e0       	ldi	r25, 0x05	; 5
    41ce:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    41d2:	c2 01       	movw	r24, r4
    41d4:	6a e0       	ldi	r22, 0x0A	; 10
    41d6:	70 e0       	ldi	r23, 0x00	; 0
    41d8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    41dc:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#endif

  posPOST(3, F("internal sensors OK, next light/temp/other"));
    41e0:	83 e0       	ldi	r24, 0x03	; 3
    41e2:	6d e7       	ldi	r22, 0x7D	; 125
    41e4:	75 e0       	ldi	r23, 0x05	; 5
    41e6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <posPOST(unsigned char, __FlashStringHelper const*)>

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
    41ea:	85 e4       	ldi	r24, 0x45	; 69
    41ec:	95 e0       	ldi	r25, 0x05	; 5
    41ee:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Collect full set of environmental values before entering loop().
  // This should also help ensure that sensors are properly initialised.
  const int light = readAmbientLight();
    41f2:	0e 94 36 04 	call	0x86c	; 0x86c <readAmbientLight()>
    41f6:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    41f8:	8d e3       	ldi	r24, 0x3D	; 61
    41fa:	95 e0       	ldi	r25, 0x05	; 5
    41fc:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    4200:	c3 01       	movw	r24, r6
    4202:	6a e0       	ldi	r22, 0x0A	; 10
    4204:	70 e0       	ldi	r23, 0x00	; 0
    4206:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    420a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }

  const int heat = readTemperatureC16();
    420e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <readTemperatureC16()>
    4212:	4c 01       	movw	r8, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    4214:	86 e3       	ldi	r24, 0x36	; 54
    4216:	95 e0       	ldi	r25, 0x05	; 5
    4218:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    421c:	c4 01       	movw	r24, r8
    421e:	6a e0       	ldi	r22, 0x0A	; 10
    4220:	70 e0       	ldi	r23, 0x00	; 0
    4222:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    4226:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#endif

#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = readTempPot();
    422a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <readTempPot()>
    422e:	8c 01       	movw	r16, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp pot: ");
    4230:	8b e2       	ldi	r24, 0x2B	; 43
    4232:	95 e0       	ldi	r25, 0x05	; 5
    4234:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(tempPot);
    4238:	c8 01       	movw	r24, r16
    423a:	6a e0       	ldi	r22, 0x0A	; 10
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    4242:	0e 94 79 15 	call	0x2af2	; 0x2af2 <serialPrintlnAndFlush()>
#endif
#endif

  // Check buttons not stuck enabled.
  if(fastDigitalRead(BUTTON_MODE_L) == LOW) { panic(F("M stuck")); }
    4246:	4d 99       	sbic	0x09, 5	; 9
    4248:	04 c0       	rjmp	.+8      	; 0x4252 <setup+0x268>
    424a:	83 e2       	ldi	r24, 0x23	; 35
    424c:	95 e0       	ldi	r25, 0x05	; 5
    424e:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <panic(__FlashStringHelper const*)>
#if defined(BUTTON_LEARN_L)
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW) { panic(F("L stuck")); }
    4252:	18 99       	sbic	0x03, 0	; 3
    4254:	04 c0       	rjmp	.+8      	; 0x425e <setup+0x274>
    4256:	8b e1       	ldi	r24, 0x1B	; 27
    4258:	95 e0       	ldi	r25, 0x05	; 5
    425a:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <panic(__FlashStringHelper const*)>
#endif
#if defined(BUTTON_LEARN2_L)
  if(fastDigitalRead(BUTTON_LEARN2_L) == LOW) { panic(F("L2 stuck")); }
    425e:	4b 99       	sbic	0x09, 3	; 9
    4260:	04 c0       	rjmp	.+8      	; 0x426a <setup+0x280>
    4262:	82 e1       	ldi	r24, 0x12	; 18
    4264:	95 e0       	ldi	r25, 0x05	; 5
    4266:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <panic(__FlashStringHelper const*)>
#endif


  posPOST(4, F("light/temp OK"));
    426a:	84 e0       	ldi	r24, 0x04	; 4
    426c:	64 e0       	ldi	r22, 0x04	; 4
    426e:	75 e0       	ldi	r23, 0x05	; 5
    4270:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <posPOST(unsigned char, __FlashStringHelper const*)>

#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
#endif
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeCallForHeat();
    4274:	0e 94 f4 06 	call	0xde8	; 0xde8 <computeCallForHeat()>
#if defined(USE_MODULE_FHT8VSIMPLE)
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored.
  FHT8VCreateValveSetCmdFrame();
    4278:	0e 94 bb 0a 	call	0x1576	; 0x1576 <FHT8VCreateValveSetCmdFrame()>
    427c:	e0 e0       	ldi	r30, 0x00	; 0
    427e:	f1 e0       	ldi	r31, 0x01	; 1
    4280:	aa 24       	eor	r10, r10
    4282:	aa 94       	dec	r10
    4284:	ba 2c       	mov	r11, r10
    4286:	81 91       	ld	r24, Z+
    4288:	95 01       	movw	r18, r10
    428a:	28 27       	eor	r18, r24
    428c:	02 2e       	mov	r0, r18
    428e:	22 95       	swap	r18
    4290:	20 7f       	andi	r18, 0xF0	; 240
    4292:	20 25       	eor	r18, r0
    4294:	03 2e       	mov	r0, r19
    4296:	32 2f       	mov	r19, r18
    4298:	22 95       	swap	r18
    429a:	2f 70       	andi	r18, 0x0F	; 15
    429c:	02 26       	eor	r0, r18
    429e:	26 95       	lsr	r18
    42a0:	32 27       	eor	r19, r18
    42a2:	23 27       	eor	r18, r19
    42a4:	22 0f       	add	r18, r18
    42a6:	22 0f       	add	r18, r18
    42a8:	22 0f       	add	r18, r18
    42aa:	20 25       	eor	r18, r0
    42ac:	59 01       	movw	r10, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    42ae:	39 e0       	ldi	r19, 0x09	; 9
    42b0:	e0 30       	cpi	r30, 0x00	; 0
    42b2:	f3 07       	cpc	r31, r19
    42b4:	41 f7       	brne	.-48     	; 0x4286 <setup+0x29c>
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	cc 24       	eor	r12, r12
    42bc:	ca 94       	dec	r12
    42be:	dc 2c       	mov	r13, r12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    42c0:	f9 99       	sbic	0x1f, 1	; 31
    42c2:	fe cf       	rjmp	.-4      	; 0x42c0 <setup+0x2d6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    42c4:	32 bd       	out	0x22, r19	; 34
    42c6:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    42c8:	f8 9a       	sbi	0x1f, 0	; 31
    42ca:	80 b5       	in	r24, 0x20	; 32
    42cc:	a6 01       	movw	r20, r12
    42ce:	48 27       	eor	r20, r24
    42d0:	04 2e       	mov	r0, r20
    42d2:	42 95       	swap	r20
    42d4:	40 7f       	andi	r20, 0xF0	; 240
    42d6:	40 25       	eor	r20, r0
    42d8:	05 2e       	mov	r0, r21
    42da:	54 2f       	mov	r21, r20
    42dc:	42 95       	swap	r20
    42de:	4f 70       	andi	r20, 0x0F	; 15
    42e0:	04 26       	eor	r0, r20
    42e2:	46 95       	lsr	r20
    42e4:	54 27       	eor	r21, r20
    42e6:	45 27       	eor	r20, r21
    42e8:	44 0f       	add	r20, r20
    42ea:	44 0f       	add	r20, r20
    42ec:	44 0f       	add	r20, r20
    42ee:	40 25       	eor	r20, r0
    42f0:	6a 01       	movw	r12, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    42f2:	2f 5f       	subi	r18, 0xFF	; 255
    42f4:	3f 4f       	sbci	r19, 0xFF	; 255
    42f6:	54 e0       	ldi	r21, 0x04	; 4
    42f8:	20 30       	cpi	r18, 0x00	; 0
    42fa:	35 07       	cpc	r19, r21
    42fc:	09 f7       	brne	.-62     	; 0x42c0 <setup+0x2d6>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Starting seed computation...");
#endif
  const uint16_t srseed = sramCRC();
  const uint16_t eeseed = eeCRC();
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    42fe:	f0 90 b2 00 	lds	r15, 0x00B2
  if(laterSCT == earlySCT)
    4302:	fe 14       	cp	r15, r14
    4304:	09 f5       	brne	.+66     	; 0x4348 <setup+0x35e>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    4306:	87 ed       	ldi	r24, 0xD7	; 215
    4308:	94 e0       	ldi	r25, 0x04	; 4
    430a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    430e:	04 e1       	ldi	r16, 0x14	; 20
    4310:	10 e0       	ldi	r17, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    4312:	01 50       	subi	r16, 0x01	; 1
    4314:	10 40       	sbci	r17, 0x00	; 0
    4316:	8f ef       	ldi	r24, 0xFF	; 255
    4318:	0f 3f       	cpi	r16, 0xFF	; 255
    431a:	18 07       	cpc	r17, r24
    431c:	09 f4       	brne	.+2      	; 0x4320 <setup+0x336>
    431e:	82 c0       	rjmp	.+260    	; 0x4424 <setup+0x43a>
    4320:	80 91 b2 00 	lds	r24, 0x00B2
    4324:	f8 16       	cp	r15, r24
    4326:	09 f0       	breq	.+2      	; 0x432a <setup+0x340>
    4328:	7d c0       	rjmp	.+250    	; 0x4424 <setup+0x43a>
      {
      sleepLowPowerMs(691);
    432a:	84 e1       	ldi	r24, 0x14	; 20
    432c:	95 e1       	ldi	r25, 0x15	; 21
    432e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      captureEntropy1();
    4332:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <captureEntropy1()>
    4336:	ed cf       	rjmp	.-38     	; 0x4312 <setup+0x328>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    4338:	8f ea       	ldi	r24, 0xAF	; 175
    433a:	94 e0       	ldi	r25, 0x04	; 4
    433c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(F("XTAL dead")); // Async clock not running.
    4340:	85 ea       	ldi	r24, 0xA5	; 165
    4342:	94 e0       	ldi	r25, 0x04	; 4
    4344:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <panic(__FlashStringHelper const*)>
      }
    }
  posPOST(5, F("slow RTC clock OK"));
    4348:	85 e0       	ldi	r24, 0x05	; 5
    434a:	63 e9       	ldi	r22, 0x93	; 147
    434c:	74 e0       	ldi	r23, 0x04	; 4
    434e:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <posPOST(unsigned char, __FlashStringHelper const*)>
  // DHD20130430: maybe as much as 16 bits of entropy on each reset in seed1, concentrated in the least-significant bits.
  const uint16_t s16 = (__DATE__[5]) ^ ((getMinutesSinceMidnightLT() << 5) ^ (((int)getSubCycleTime()) << 7) ^ (heat << 2) ^ (light << 6) ^ Vcc ^ intTempC16); /* This fits in an int (16 bits). */
    4352:	0e 94 76 13 	call	0x26ec	; 0x26ec <getMinutesSinceMidnightLT()>
    4356:	00 91 b2 00 	lds	r16, 0x00B2
    435a:	10 e0       	ldi	r17, 0x00	; 0
    435c:	16 95       	lsr	r17
    435e:	10 2f       	mov	r17, r16
    4360:	00 27       	eor	r16, r16
    4362:	17 95       	ror	r17
    4364:	07 95       	ror	r16
    4366:	02 63       	ori	r16, 0x32	; 50
    4368:	02 25       	eor	r16, r2
    436a:	13 25       	eor	r17, r3
    436c:	04 25       	eor	r16, r4
    436e:	15 25       	eor	r17, r5
    4370:	88 0c       	add	r8, r8
    4372:	99 1c       	adc	r9, r9
    4374:	88 0c       	add	r8, r8
    4376:	99 1c       	adc	r9, r9
    4378:	08 25       	eor	r16, r8
    437a:	19 25       	eor	r17, r9
    437c:	36 e0       	ldi	r19, 0x06	; 6
    437e:	66 0c       	add	r6, r6
    4380:	77 1c       	adc	r7, r7
    4382:	3a 95       	dec	r19
    4384:	e1 f7       	brne	.-8      	; 0x437e <setup+0x394>
    4386:	06 25       	eor	r16, r6
    4388:	17 25       	eor	r17, r7
    438a:	25 e0       	ldi	r18, 0x05	; 5
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	2a 95       	dec	r18
    4392:	e1 f7       	brne	.-8      	; 0x438c <setup+0x3a2>
    4394:	08 27       	eor	r16, r24
    4396:	19 27       	eor	r17, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  seedRNG8((uint8_t) s16, (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    4398:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <clockJitterWDT()>
    439c:	98 01       	movw	r18, r16
    439e:	2c 0d       	add	r18, r12
    43a0:	3d 1d       	adc	r19, r13
    43a2:	48 2f       	mov	r20, r24
    43a4:	4a 25       	eor	r20, r10
    43a6:	80 2f       	mov	r24, r16
    43a8:	63 2f       	mov	r22, r19
    43aa:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    43ae:	8d 2d       	mov	r24, r13
    43b0:	99 27       	eor	r25, r25
    43b2:	c6 96       	adiw	r24, 0x36	; 54
    43b4:	80 27       	eor	r24, r16
    43b6:	91 27       	eor	r25, r17
    43b8:	83 70       	andi	r24, 0x03	; 3
    43ba:	90 70       	andi	r25, 0x00	; 0
    43bc:	02 96       	adiw	r24, 0x02	; 2
    43be:	18 2f       	mov	r17, r24
    43c0:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    43c2:	f9 99       	sbic	0x1f, 1	; 31
    43c4:	fe cf       	rjmp	.-4      	; 0x43c2 <setup+0x3d8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    43c6:	92 bd       	out	0x22, r25	; 34
    43c8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    43ca:	f8 9a       	sbi	0x1f, 0	; 31
    43cc:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    43ce:	88 23       	and	r24, r24
    43d0:	29 f4       	brne	.+10     	; 0x43dc <setup+0x3f2>
    43d2:	81 2f       	mov	r24, r17
    43d4:	90 2f       	mov	r25, r16
    43d6:	0e 94 94 07 	call	0xf28	; 0xf28 <eeprom_smart_erase_byte(unsigned char*)>
    43da:	08 c0       	rjmp	.+16     	; 0x43ec <setup+0x402>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    43dc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <clockJitterEntropyByte()>
    43e0:	68 2f       	mov	r22, r24
    43e2:	6c 0d       	add	r22, r12
    43e4:	81 2f       	mov	r24, r17
    43e6:	90 2f       	mov	r25, r16
    43e8:	0e 94 a8 07 	call	0xf50	; 0xf50 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
  DEBUG_SERIAL_PRINTLN();
#endif

  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    43ec:	5c 9a       	sbi	0x0b, 4	; 11

  // Report initial status.
  serialStatusReport();
    43ee:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <serialStatusReport()>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    43f2:	80 91 a6 01 	lds	r24, 0x01A6
    43f6:	80 93 c1 01 	sts	0x01C1, r24
  }
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	cf 91       	pop	r28
    4400:	df 91       	pop	r29
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	ff 90       	pop	r15
    4408:	ef 90       	pop	r14
    440a:	df 90       	pop	r13
    440c:	cf 90       	pop	r12
    440e:	bf 90       	pop	r11
    4410:	af 90       	pop	r10
    4412:	9f 90       	pop	r9
    4414:	8f 90       	pop	r8
    4416:	7f 90       	pop	r7
    4418:	6f 90       	pop	r6
    441a:	5f 90       	pop	r5
    441c:	4f 90       	pop	r4
    441e:	3f 90       	pop	r3
    4420:	2f 90       	pop	r2
    4422:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    4424:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    4428:	8f 15       	cp	r24, r15
    442a:	09 f0       	breq	.+2      	; 0x442e <setup+0x444>
    442c:	8d cf       	rjmp	.-230    	; 0x4348 <setup+0x35e>
    442e:	84 cf       	rjmp	.-248    	; 0x4338 <setup+0x34e>

00004430 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	80 93 0b 02 	sts	0x020B, r24
  // set address of targeted slave
  txAddress = address;
    4436:	60 93 e8 01 	sts	0x01E8, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    443a:	10 92 09 02 	sts	0x0209, r1
  txBufferLength = 0;
    443e:	10 92 0a 02 	sts	0x020A, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    4442:	08 95       	ret

00004444 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4444:	20 91 e7 01 	lds	r18, 0x01E7
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	80 91 e6 01 	lds	r24, 0x01E6
    444e:	28 1b       	sub	r18, r24
    4450:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    4452:	c9 01       	movw	r24, r18
    4454:	08 95       	ret

00004456 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4456:	40 91 e6 01 	lds	r20, 0x01E6
    445a:	80 91 e7 01 	lds	r24, 0x01E7
    445e:	48 17       	cp	r20, r24
    4460:	18 f0       	brcs	.+6      	; 0x4468 <TwoWire::read()+0x12>
    4462:	2f ef       	ldi	r18, 0xFF	; 255
    4464:	3f ef       	ldi	r19, 0xFF	; 255
    4466:	0a c0       	rjmp	.+20     	; 0x447c <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    4468:	e4 2f       	mov	r30, r20
    446a:	f0 e0       	ldi	r31, 0x00	; 0
    446c:	ea 53       	subi	r30, 0x3A	; 58
    446e:	fe 4f       	sbci	r31, 0xFE	; 254
    4470:	80 81       	ld	r24, Z
    4472:	28 2f       	mov	r18, r24
    4474:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4476:	4f 5f       	subi	r20, 0xFF	; 255
    4478:	40 93 e6 01 	sts	0x01E6, r20
  }

  return value;
}
    447c:	c9 01       	movw	r24, r18
    447e:	08 95       	ret

00004480 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4480:	e0 91 e6 01 	lds	r30, 0x01E6
    4484:	80 91 e7 01 	lds	r24, 0x01E7
    4488:	e8 17       	cp	r30, r24
    448a:	18 f0       	brcs	.+6      	; 0x4492 <TwoWire::peek()+0x12>
    448c:	ef ef       	ldi	r30, 0xFF	; 255
    448e:	ff ef       	ldi	r31, 0xFF	; 255
    4490:	06 c0       	rjmp	.+12     	; 0x449e <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	ea 53       	subi	r30, 0x3A	; 58
    4496:	fe 4f       	sbci	r31, 0xFE	; 254
    4498:	80 81       	ld	r24, Z
    449a:	e8 2f       	mov	r30, r24
    449c:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    449e:	cf 01       	movw	r24, r30
    44a0:	08 95       	ret

000044a2 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    44a2:	08 95       	ret

000044a4 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    44a4:	10 92 0f 02 	sts	0x020F, r1
    44a8:	10 92 0e 02 	sts	0x020E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    44ac:	88 ee       	ldi	r24, 0xE8	; 232
    44ae:	93 e0       	ldi	r25, 0x03	; 3
    44b0:	a0 e0       	ldi	r26, 0x00	; 0
    44b2:	b0 e0       	ldi	r27, 0x00	; 0
    44b4:	80 93 10 02 	sts	0x0210, r24
    44b8:	90 93 11 02 	sts	0x0211, r25
    44bc:	a0 93 12 02 	sts	0x0212, r26
    44c0:	b0 93 13 02 	sts	0x0213, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    44c4:	89 e0       	ldi	r24, 0x09	; 9
    44c6:	91 e0       	ldi	r25, 0x01	; 1
    44c8:	90 93 0d 02 	sts	0x020D, r25
    44cc:	80 93 0c 02 	sts	0x020C, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    44d0:	08 95       	ret

000044d2 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    44d2:	cf 92       	push	r12
    44d4:	df 92       	push	r13
    44d6:	ef 92       	push	r14
    44d8:	ff 92       	push	r15
    44da:	0f 93       	push	r16
    44dc:	1f 93       	push	r17
    44de:	cf 93       	push	r28
    44e0:	df 93       	push	r29
    44e2:	7c 01       	movw	r14, r24
    44e4:	6b 01       	movw	r12, r22
    44e6:	8a 01       	movw	r16, r20
{
  if(transmitting){
    44e8:	80 91 0b 02 	lds	r24, 0x020B
    44ec:	88 23       	and	r24, r24
    44ee:	a1 f0       	breq	.+40     	; 0x4518 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    44f0:	c0 e0       	ldi	r28, 0x00	; 0
    44f2:	d0 e0       	ldi	r29, 0x00	; 0
    44f4:	0d c0       	rjmp	.+26     	; 0x4510 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    44f6:	d7 01       	movw	r26, r14
    44f8:	ed 91       	ld	r30, X+
    44fa:	fc 91       	ld	r31, X
    44fc:	d6 01       	movw	r26, r12
    44fe:	ac 0f       	add	r26, r28
    4500:	bd 1f       	adc	r27, r29
    4502:	01 90       	ld	r0, Z+
    4504:	f0 81       	ld	r31, Z
    4506:	e0 2d       	mov	r30, r0
    4508:	c7 01       	movw	r24, r14
    450a:	6c 91       	ld	r22, X
    450c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    450e:	21 96       	adiw	r28, 0x01	; 1
    4510:	c0 17       	cp	r28, r16
    4512:	d1 07       	cpc	r29, r17
    4514:	80 f3       	brcs	.-32     	; 0x44f6 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    4516:	04 c0       	rjmp	.+8      	; 0x4520 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4518:	cb 01       	movw	r24, r22
    451a:	64 2f       	mov	r22, r20
    451c:	0e 94 9b 23 	call	0x4736	; 0x4736 <twi_transmit>
  }
  return quantity;
}
    4520:	c8 01       	movw	r24, r16
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	ff 90       	pop	r15
    452c:	ef 90       	pop	r14
    452e:	df 90       	pop	r13
    4530:	cf 90       	pop	r12
    4532:	08 95       	ret

00004534 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4534:	df 93       	push	r29
    4536:	cf 93       	push	r28
    4538:	0f 92       	push	r0
    453a:	cd b7       	in	r28, 0x3d	; 61
    453c:	de b7       	in	r29, 0x3e	; 62
    453e:	fc 01       	movw	r30, r24
    4540:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4542:	80 91 0b 02 	lds	r24, 0x020B
    4546:	88 23       	and	r24, r24
    4548:	c9 f0       	breq	.+50     	; 0x457c <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    454a:	80 91 0a 02 	lds	r24, 0x020A
    454e:	80 32       	cpi	r24, 0x20	; 32
    4550:	38 f0       	brcs	.+14     	; 0x4560 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	93 83       	std	Z+3, r25	; 0x03
    4558:	82 83       	std	Z+2, r24	; 0x02
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	15 c0       	rjmp	.+42     	; 0x458a <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4560:	80 91 09 02 	lds	r24, 0x0209
    4564:	e8 2f       	mov	r30, r24
    4566:	f0 e0       	ldi	r31, 0x00	; 0
    4568:	e7 51       	subi	r30, 0x17	; 23
    456a:	fe 4f       	sbci	r31, 0xFE	; 254
    456c:	99 81       	ldd	r25, Y+1	; 0x01
    456e:	90 83       	st	Z, r25
    ++txBufferIndex;
    4570:	8f 5f       	subi	r24, 0xFF	; 255
    4572:	80 93 09 02 	sts	0x0209, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4576:	80 93 0a 02 	sts	0x020A, r24
    457a:	05 c0       	rjmp	.+10     	; 0x4586 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    457c:	ce 01       	movw	r24, r28
    457e:	01 96       	adiw	r24, 0x01	; 1
    4580:	61 e0       	ldi	r22, 0x01	; 1
    4582:	0e 94 9b 23 	call	0x4736	; 0x4736 <twi_transmit>
    4586:	21 e0       	ldi	r18, 0x01	; 1
    4588:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    458a:	c9 01       	movw	r24, r18
    458c:	0f 90       	pop	r0
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	08 95       	ret

00004594 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4594:	0f 93       	push	r16
    4596:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4598:	80 91 e8 01 	lds	r24, 0x01E8
    459c:	69 ee       	ldi	r22, 0xE9	; 233
    459e:	71 e0       	ldi	r23, 0x01	; 1
    45a0:	40 91 0a 02 	lds	r20, 0x020A
    45a4:	21 e0       	ldi	r18, 0x01	; 1
    45a6:	0e 94 46 23 	call	0x468c	; 0x468c <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    45aa:	10 92 09 02 	sts	0x0209, r1
  txBufferLength = 0;
    45ae:	10 92 0a 02 	sts	0x020A, r1
  // indicate that we are done transmitting
  transmitting = 0;
    45b2:	10 92 0b 02 	sts	0x020B, r1
  return ret;
}
    45b6:	0f 91       	pop	r16
    45b8:	08 95       	ret

000045ba <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    45ba:	61 e0       	ldi	r22, 0x01	; 1
    45bc:	0e 94 ca 22 	call	0x4594	; 0x4594 <TwoWire::endTransmission(unsigned char)>
}
    45c0:	08 95       	ret

000045c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    45c2:	41 32       	cpi	r20, 0x21	; 33
    45c4:	08 f0       	brcs	.+2      	; 0x45c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    45c6:	40 e2       	ldi	r20, 0x20	; 32
    45c8:	86 2f       	mov	r24, r22
    45ca:	66 ec       	ldi	r22, 0xC6	; 198
    45cc:	71 e0       	ldi	r23, 0x01	; 1
    45ce:	0e 94 fd 22 	call	0x45fa	; 0x45fa <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    45d2:	10 92 e6 01 	sts	0x01E6, r1
  rxBufferLength = read;
    45d6:	80 93 e7 01 	sts	0x01E7, r24

  return read;
}
    45da:	08 95       	ret

000045dc <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    45dc:	21 e0       	ldi	r18, 0x01	; 1
    45de:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    45e2:	08 95       	ret

000045e4 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    45e4:	10 92 e6 01 	sts	0x01E6, r1
  rxBufferLength = 0;
    45e8:	10 92 e7 01 	sts	0x01E7, r1

  txBufferIndex = 0;
    45ec:	10 92 09 02 	sts	0x0209, r1
  txBufferLength = 0;
    45f0:	10 92 0a 02 	sts	0x020A, r1

  twi_init();
    45f4:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <twi_init>
}
    45f8:	08 95       	ret

000045fa <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    45fa:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    45fc:	41 32       	cpi	r20, 0x21	; 33
    45fe:	10 f0       	brcs	.+4      	; 0x4604 <twi_readFrom+0xa>
    4600:	40 e0       	ldi	r20, 0x00	; 0
    4602:	42 c0       	rjmp	.+132    	; 0x4688 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4604:	80 91 18 02 	lds	r24, 0x0218
    4608:	88 23       	and	r24, r24
    460a:	e1 f7       	brne	.-8      	; 0x4604 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    460c:	91 e0       	ldi	r25, 0x01	; 1
    460e:	90 93 18 02 	sts	0x0218, r25
  twi_sendStop = sendStop;
    4612:	20 93 1a 02 	sts	0x021A, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4616:	8f ef       	ldi	r24, 0xFF	; 255
    4618:	80 93 85 02 	sts	0x0285, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    461c:	10 92 40 02 	sts	0x0240, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    4620:	41 50       	subi	r20, 0x01	; 1
    4622:	40 93 41 02 	sts	0x0241, r20
    4626:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4628:	90 93 19 02 	sts	0x0219, r25
  twi_slarw |= address << 1;
    462c:	80 91 19 02 	lds	r24, 0x0219
    4630:	33 0f       	add	r19, r19
    4632:	83 2b       	or	r24, r19
    4634:	80 93 19 02 	sts	0x0219, r24

  if (true == twi_inRepStart) {
    4638:	80 91 1b 02 	lds	r24, 0x021B
    463c:	81 30       	cpi	r24, 0x01	; 1
    463e:	41 f4       	brne	.+16     	; 0x4650 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4640:	10 92 1b 02 	sts	0x021B, r1
    TWDR = twi_slarw;
    4644:	80 91 19 02 	lds	r24, 0x0219
    4648:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    464c:	85 ec       	ldi	r24, 0xC5	; 197
    464e:	01 c0       	rjmp	.+2      	; 0x4652 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4650:	85 ee       	ldi	r24, 0xE5	; 229
    4652:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4656:	80 91 18 02 	lds	r24, 0x0218
    465a:	81 30       	cpi	r24, 0x01	; 1
    465c:	e1 f3       	breq	.-8      	; 0x4656 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    465e:	80 91 40 02 	lds	r24, 0x0240
    4662:	84 17       	cp	r24, r20
    4664:	10 f4       	brcc	.+4      	; 0x466a <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4666:	40 91 40 02 	lds	r20, 0x0240
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	0a c0       	rjmp	.+20     	; 0x4684 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    4670:	fb 01       	movw	r30, r22
    4672:	e2 0f       	add	r30, r18
    4674:	f3 1f       	adc	r31, r19
    4676:	d9 01       	movw	r26, r18
    4678:	a0 5e       	subi	r26, 0xE0	; 224
    467a:	bd 4f       	sbci	r27, 0xFD	; 253
    467c:	8c 91       	ld	r24, X
    467e:	80 83       	st	Z, r24
    4680:	2f 5f       	subi	r18, 0xFF	; 255
    4682:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    4684:	24 17       	cp	r18, r20
    4686:	a0 f3       	brcs	.-24     	; 0x4670 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4688:	84 2f       	mov	r24, r20
    468a:	08 95       	ret

0000468c <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	58 2f       	mov	r21, r24
    4692:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4694:	41 32       	cpi	r20, 0x21	; 33
    4696:	10 f0       	brcs	.+4      	; 0x469c <twi_writeTo+0x10>
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	4a c0       	rjmp	.+148    	; 0x4730 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    469c:	80 91 18 02 	lds	r24, 0x0218
    46a0:	88 23       	and	r24, r24
    46a2:	e1 f7       	brne	.-8      	; 0x469c <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    46a4:	82 e0       	ldi	r24, 0x02	; 2
    46a6:	80 93 18 02 	sts	0x0218, r24
  twi_sendStop = sendStop;
    46aa:	00 93 1a 02 	sts	0x021A, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    46ae:	8f ef       	ldi	r24, 0xFF	; 255
    46b0:	80 93 85 02 	sts	0x0285, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    46b4:	10 92 40 02 	sts	0x0240, r1
  twi_masterBufferLength = length;
    46b8:	40 93 41 02 	sts	0x0241, r20
    46bc:	a0 e2       	ldi	r26, 0x20	; 32
    46be:	b2 e0       	ldi	r27, 0x02	; 2
    46c0:	fb 01       	movw	r30, r22
    46c2:	02 c0       	rjmp	.+4      	; 0x46c8 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    46c4:	81 91       	ld	r24, Z+
    46c6:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    46c8:	8e 2f       	mov	r24, r30
    46ca:	86 1b       	sub	r24, r22
    46cc:	84 17       	cp	r24, r20
    46ce:	d0 f3       	brcs	.-12     	; 0x46c4 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    46d0:	10 92 19 02 	sts	0x0219, r1
  twi_slarw |= address << 1;
    46d4:	80 91 19 02 	lds	r24, 0x0219
    46d8:	55 0f       	add	r21, r21
    46da:	85 2b       	or	r24, r21
    46dc:	80 93 19 02 	sts	0x0219, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    46e0:	80 91 1b 02 	lds	r24, 0x021B
    46e4:	81 30       	cpi	r24, 0x01	; 1
    46e6:	41 f4       	brne	.+16     	; 0x46f8 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    46e8:	10 92 1b 02 	sts	0x021B, r1
    TWDR = twi_slarw;				
    46ec:	80 91 19 02 	lds	r24, 0x0219
    46f0:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    46f4:	85 ec       	ldi	r24, 0xC5	; 197
    46f6:	01 c0       	rjmp	.+2      	; 0x46fa <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    46f8:	85 ee       	ldi	r24, 0xE5	; 229
    46fa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    46fe:	11 23       	and	r17, r17
    4700:	21 f0       	breq	.+8      	; 0x470a <twi_writeTo+0x7e>
    4702:	80 91 18 02 	lds	r24, 0x0218
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	e1 f3       	breq	.-8      	; 0x4702 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    470a:	80 91 85 02 	lds	r24, 0x0285
    470e:	8f 3f       	cpi	r24, 0xFF	; 255
    4710:	11 f4       	brne	.+4      	; 0x4716 <twi_writeTo+0x8a>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	0d c0       	rjmp	.+26     	; 0x4730 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4716:	80 91 85 02 	lds	r24, 0x0285
    471a:	80 32       	cpi	r24, 0x20	; 32
    471c:	11 f4       	brne	.+4      	; 0x4722 <twi_writeTo+0x96>
    471e:	82 e0       	ldi	r24, 0x02	; 2
    4720:	07 c0       	rjmp	.+14     	; 0x4730 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4722:	80 91 85 02 	lds	r24, 0x0285
    4726:	80 33       	cpi	r24, 0x30	; 48
    4728:	11 f0       	breq	.+4      	; 0x472e <twi_writeTo+0xa2>
    472a:	84 e0       	ldi	r24, 0x04	; 4
    472c:	01 c0       	rjmp	.+2      	; 0x4730 <twi_writeTo+0xa4>
    472e:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4730:	1f 91       	pop	r17
    4732:	0f 91       	pop	r16
    4734:	08 95       	ret

00004736 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4736:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4738:	61 32       	cpi	r22, 0x21	; 33
    473a:	10 f0       	brcs	.+4      	; 0x4740 <twi_transmit+0xa>
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4740:	80 91 18 02 	lds	r24, 0x0218
    4744:	84 30       	cpi	r24, 0x04	; 4
    4746:	11 f0       	breq	.+4      	; 0x474c <twi_transmit+0x16>
    4748:	82 e0       	ldi	r24, 0x02	; 2
    474a:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    474c:	60 93 63 02 	sts	0x0263, r22
    4750:	a2 e4       	ldi	r26, 0x42	; 66
    4752:	b2 e0       	ldi	r27, 0x02	; 2
    4754:	84 2f       	mov	r24, r20
    4756:	9c 01       	movw	r18, r24
    4758:	f9 01       	movw	r30, r18
    475a:	02 c0       	rjmp	.+4      	; 0x4760 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    475c:	81 91       	ld	r24, Z+
    475e:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    4760:	8e 2f       	mov	r24, r30
    4762:	84 1b       	sub	r24, r20
    4764:	86 17       	cp	r24, r22
    4766:	d0 f3       	brcs	.-12     	; 0x475c <twi_transmit+0x26>
    4768:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    476a:	08 95       	ret

0000476c <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    476c:	1f 92       	push	r1
    476e:	0f 92       	push	r0
    4770:	0f b6       	in	r0, 0x3f	; 63
    4772:	0f 92       	push	r0
    4774:	11 24       	eor	r1, r1
    4776:	2f 93       	push	r18
    4778:	3f 93       	push	r19
    477a:	4f 93       	push	r20
    477c:	5f 93       	push	r21
    477e:	6f 93       	push	r22
    4780:	7f 93       	push	r23
    4782:	8f 93       	push	r24
    4784:	9f 93       	push	r25
    4786:	af 93       	push	r26
    4788:	bf 93       	push	r27
    478a:	ef 93       	push	r30
    478c:	ff 93       	push	r31
  switch(TW_STATUS){
    478e:	80 91 b9 00 	lds	r24, 0x00B9
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	88 7f       	andi	r24, 0xF8	; 248
    4796:	90 70       	andi	r25, 0x00	; 0
    4798:	80 36       	cpi	r24, 0x60	; 96
    479a:	91 05       	cpc	r25, r1
    479c:	09 f4       	brne	.+2      	; 0x47a0 <__vector_24+0x34>
    479e:	f2 c0       	rjmp	.+484    	; 0x4984 <__vector_24+0x218>
    47a0:	81 36       	cpi	r24, 0x61	; 97
    47a2:	91 05       	cpc	r25, r1
    47a4:	cc f5       	brge	.+114    	; 0x4818 <__vector_24+0xac>
    47a6:	88 32       	cpi	r24, 0x28	; 40
    47a8:	91 05       	cpc	r25, r1
    47aa:	09 f4       	brne	.+2      	; 0x47ae <__vector_24+0x42>
    47ac:	7b c0       	rjmp	.+246    	; 0x48a4 <__vector_24+0x138>
    47ae:	89 32       	cpi	r24, 0x29	; 41
    47b0:	91 05       	cpc	r25, r1
    47b2:	b4 f4       	brge	.+44     	; 0x47e0 <__vector_24+0x74>
    47b4:	80 31       	cpi	r24, 0x10	; 16
    47b6:	91 05       	cpc	r25, r1
    47b8:	09 f4       	brne	.+2      	; 0x47bc <__vector_24+0x50>
    47ba:	6f c0       	rjmp	.+222    	; 0x489a <__vector_24+0x12e>
    47bc:	81 31       	cpi	r24, 0x11	; 17
    47be:	91 05       	cpc	r25, r1
    47c0:	3c f4       	brge	.+14     	; 0x47d0 <__vector_24+0x64>
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <__vector_24+0x5c>
    47c6:	47 c1       	rjmp	.+654    	; 0x4a56 <__vector_24+0x2ea>
    47c8:	08 97       	sbiw	r24, 0x08	; 8
    47ca:	09 f0       	breq	.+2      	; 0x47ce <__vector_24+0x62>
    47cc:	4f c1       	rjmp	.+670    	; 0x4a6c <__vector_24+0x300>
    47ce:	65 c0       	rjmp	.+202    	; 0x489a <__vector_24+0x12e>
    47d0:	88 31       	cpi	r24, 0x18	; 24
    47d2:	91 05       	cpc	r25, r1
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <__vector_24+0x6c>
    47d6:	66 c0       	rjmp	.+204    	; 0x48a4 <__vector_24+0x138>
    47d8:	80 97       	sbiw	r24, 0x20	; 32
    47da:	09 f0       	breq	.+2      	; 0x47de <__vector_24+0x72>
    47dc:	47 c1       	rjmp	.+654    	; 0x4a6c <__vector_24+0x300>
    47de:	82 c0       	rjmp	.+260    	; 0x48e4 <__vector_24+0x178>
    47e0:	80 34       	cpi	r24, 0x40	; 64
    47e2:	91 05       	cpc	r25, r1
    47e4:	09 f4       	brne	.+2      	; 0x47e8 <__vector_24+0x7c>
    47e6:	a4 c0       	rjmp	.+328    	; 0x4930 <__vector_24+0x1c4>
    47e8:	81 34       	cpi	r24, 0x41	; 65
    47ea:	91 05       	cpc	r25, r1
    47ec:	44 f4       	brge	.+16     	; 0x47fe <__vector_24+0x92>
    47ee:	80 33       	cpi	r24, 0x30	; 48
    47f0:	91 05       	cpc	r25, r1
    47f2:	09 f4       	brne	.+2      	; 0x47f6 <__vector_24+0x8a>
    47f4:	82 c0       	rjmp	.+260    	; 0x48fa <__vector_24+0x18e>
    47f6:	c8 97       	sbiw	r24, 0x38	; 56
    47f8:	09 f0       	breq	.+2      	; 0x47fc <__vector_24+0x90>
    47fa:	38 c1       	rjmp	.+624    	; 0x4a6c <__vector_24+0x300>
    47fc:	89 c0       	rjmp	.+274    	; 0x4910 <__vector_24+0x1a4>
    47fe:	80 35       	cpi	r24, 0x50	; 80
    4800:	91 05       	cpc	r25, r1
    4802:	09 f4       	brne	.+2      	; 0x4806 <__vector_24+0x9a>
    4804:	89 c0       	rjmp	.+274    	; 0x4918 <__vector_24+0x1ac>
    4806:	88 35       	cpi	r24, 0x58	; 88
    4808:	91 05       	cpc	r25, r1
    480a:	09 f4       	brne	.+2      	; 0x480e <__vector_24+0xa2>
    480c:	96 c0       	rjmp	.+300    	; 0x493a <__vector_24+0x1ce>
    480e:	88 34       	cpi	r24, 0x48	; 72
    4810:	91 05       	cpc	r25, r1
    4812:	09 f0       	breq	.+2      	; 0x4816 <__vector_24+0xaa>
    4814:	2b c1       	rjmp	.+598    	; 0x4a6c <__vector_24+0x300>
    4816:	ae c0       	rjmp	.+348    	; 0x4974 <__vector_24+0x208>
    4818:	88 39       	cpi	r24, 0x98	; 152
    481a:	91 05       	cpc	r25, r1
    481c:	09 f4       	brne	.+2      	; 0x4820 <__vector_24+0xb4>
    481e:	13 c1       	rjmp	.+550    	; 0x4a46 <__vector_24+0x2da>
    4820:	89 39       	cpi	r24, 0x99	; 153
    4822:	91 05       	cpc	r25, r1
    4824:	ec f4       	brge	.+58     	; 0x4860 <__vector_24+0xf4>
    4826:	88 37       	cpi	r24, 0x78	; 120
    4828:	91 05       	cpc	r25, r1
    482a:	09 f4       	brne	.+2      	; 0x482e <__vector_24+0xc2>
    482c:	ab c0       	rjmp	.+342    	; 0x4984 <__vector_24+0x218>
    482e:	89 37       	cpi	r24, 0x79	; 121
    4830:	91 05       	cpc	r25, r1
    4832:	4c f4       	brge	.+18     	; 0x4846 <__vector_24+0xda>
    4834:	88 36       	cpi	r24, 0x68	; 104
    4836:	91 05       	cpc	r25, r1
    4838:	09 f4       	brne	.+2      	; 0x483c <__vector_24+0xd0>
    483a:	a4 c0       	rjmp	.+328    	; 0x4984 <__vector_24+0x218>
    483c:	80 37       	cpi	r24, 0x70	; 112
    483e:	91 05       	cpc	r25, r1
    4840:	09 f0       	breq	.+2      	; 0x4844 <__vector_24+0xd8>
    4842:	14 c1       	rjmp	.+552    	; 0x4a6c <__vector_24+0x300>
    4844:	9f c0       	rjmp	.+318    	; 0x4984 <__vector_24+0x218>
    4846:	88 38       	cpi	r24, 0x88	; 136
    4848:	91 05       	cpc	r25, r1
    484a:	09 f4       	brne	.+2      	; 0x484e <__vector_24+0xe2>
    484c:	fc c0       	rjmp	.+504    	; 0x4a46 <__vector_24+0x2da>
    484e:	80 39       	cpi	r24, 0x90	; 144
    4850:	91 05       	cpc	r25, r1
    4852:	09 f4       	brne	.+2      	; 0x4856 <__vector_24+0xea>
    4854:	9d c0       	rjmp	.+314    	; 0x4990 <__vector_24+0x224>
    4856:	80 38       	cpi	r24, 0x80	; 128
    4858:	91 05       	cpc	r25, r1
    485a:	09 f0       	breq	.+2      	; 0x485e <__vector_24+0xf2>
    485c:	07 c1       	rjmp	.+526    	; 0x4a6c <__vector_24+0x300>
    485e:	98 c0       	rjmp	.+304    	; 0x4990 <__vector_24+0x224>
    4860:	80 3b       	cpi	r24, 0xB0	; 176
    4862:	91 05       	cpc	r25, r1
    4864:	09 f4       	brne	.+2      	; 0x4868 <__vector_24+0xfc>
    4866:	c6 c0       	rjmp	.+396    	; 0x49f4 <__vector_24+0x288>
    4868:	81 3b       	cpi	r24, 0xB1	; 177
    486a:	91 05       	cpc	r25, r1
    486c:	4c f4       	brge	.+18     	; 0x4880 <__vector_24+0x114>
    486e:	80 3a       	cpi	r24, 0xA0	; 160
    4870:	91 05       	cpc	r25, r1
    4872:	09 f4       	brne	.+2      	; 0x4876 <__vector_24+0x10a>
    4874:	9f c0       	rjmp	.+318    	; 0x49b4 <__vector_24+0x248>
    4876:	88 3a       	cpi	r24, 0xA8	; 168
    4878:	91 05       	cpc	r25, r1
    487a:	09 f0       	breq	.+2      	; 0x487e <__vector_24+0x112>
    487c:	f7 c0       	rjmp	.+494    	; 0x4a6c <__vector_24+0x300>
    487e:	ba c0       	rjmp	.+372    	; 0x49f4 <__vector_24+0x288>
    4880:	80 3c       	cpi	r24, 0xC0	; 192
    4882:	91 05       	cpc	r25, r1
    4884:	09 f4       	brne	.+2      	; 0x4888 <__vector_24+0x11c>
    4886:	e3 c0       	rjmp	.+454    	; 0x4a4e <__vector_24+0x2e2>
    4888:	88 3c       	cpi	r24, 0xC8	; 200
    488a:	91 05       	cpc	r25, r1
    488c:	09 f4       	brne	.+2      	; 0x4890 <__vector_24+0x124>
    488e:	df c0       	rjmp	.+446    	; 0x4a4e <__vector_24+0x2e2>
    4890:	88 3b       	cpi	r24, 0xB8	; 184
    4892:	91 05       	cpc	r25, r1
    4894:	09 f0       	breq	.+2      	; 0x4898 <__vector_24+0x12c>
    4896:	ea c0       	rjmp	.+468    	; 0x4a6c <__vector_24+0x300>
    4898:	c2 c0       	rjmp	.+388    	; 0x4a1e <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    489a:	80 91 19 02 	lds	r24, 0x0219
    489e:	80 93 bb 00 	sts	0x00BB, r24
    48a2:	cf c0       	rjmp	.+414    	; 0x4a42 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    48a4:	90 91 40 02 	lds	r25, 0x0240
    48a8:	80 91 41 02 	lds	r24, 0x0241
    48ac:	98 17       	cp	r25, r24
    48ae:	68 f4       	brcc	.+26     	; 0x48ca <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    48b0:	90 91 40 02 	lds	r25, 0x0240
    48b4:	e9 2f       	mov	r30, r25
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	e0 5e       	subi	r30, 0xE0	; 224
    48ba:	fd 4f       	sbci	r31, 0xFD	; 253
    48bc:	80 81       	ld	r24, Z
    48be:	80 93 bb 00 	sts	0x00BB, r24
    48c2:	9f 5f       	subi	r25, 0xFF	; 255
    48c4:	90 93 40 02 	sts	0x0240, r25
    48c8:	bc c0       	rjmp	.+376    	; 0x4a42 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    48ca:	80 91 1a 02 	lds	r24, 0x021A
    48ce:	88 23       	and	r24, r24
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <__vector_24+0x168>
    48d2:	4b c0       	rjmp	.+150    	; 0x496a <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    48d4:	85 ed       	ldi	r24, 0xD5	; 213
    48d6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    48da:	80 91 bc 00 	lds	r24, 0x00BC
    48de:	84 fd       	sbrc	r24, 4
    48e0:	fc cf       	rjmp	.-8      	; 0x48da <__vector_24+0x16e>
    48e2:	c2 c0       	rjmp	.+388    	; 0x4a68 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    48e4:	80 e2       	ldi	r24, 0x20	; 32
    48e6:	80 93 85 02 	sts	0x0285, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    48ea:	85 ed       	ldi	r24, 0xD5	; 213
    48ec:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    48f0:	80 91 bc 00 	lds	r24, 0x00BC
    48f4:	84 fd       	sbrc	r24, 4
    48f6:	fc cf       	rjmp	.-8      	; 0x48f0 <__vector_24+0x184>
    48f8:	b7 c0       	rjmp	.+366    	; 0x4a68 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    48fa:	80 e3       	ldi	r24, 0x30	; 48
    48fc:	80 93 85 02 	sts	0x0285, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4900:	85 ed       	ldi	r24, 0xD5	; 213
    4902:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4906:	80 91 bc 00 	lds	r24, 0x00BC
    490a:	84 fd       	sbrc	r24, 4
    490c:	fc cf       	rjmp	.-8      	; 0x4906 <__vector_24+0x19a>
    490e:	ac c0       	rjmp	.+344    	; 0x4a68 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4910:	88 e3       	ldi	r24, 0x38	; 56
    4912:	80 93 85 02 	sts	0x0285, r24
    4916:	9b c0       	rjmp	.+310    	; 0x4a4e <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4918:	80 91 40 02 	lds	r24, 0x0240
    491c:	90 91 bb 00 	lds	r25, 0x00BB
    4920:	e8 2f       	mov	r30, r24
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	e0 5e       	subi	r30, 0xE0	; 224
    4926:	fd 4f       	sbci	r31, 0xFD	; 253
    4928:	90 83       	st	Z, r25
    492a:	8f 5f       	subi	r24, 0xFF	; 255
    492c:	80 93 40 02 	sts	0x0240, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4930:	90 91 40 02 	lds	r25, 0x0240
    4934:	80 91 41 02 	lds	r24, 0x0241
    4938:	82 c0       	rjmp	.+260    	; 0x4a3e <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    493a:	80 91 40 02 	lds	r24, 0x0240
    493e:	90 91 bb 00 	lds	r25, 0x00BB
    4942:	e8 2f       	mov	r30, r24
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	e0 5e       	subi	r30, 0xE0	; 224
    4948:	fd 4f       	sbci	r31, 0xFD	; 253
    494a:	90 83       	st	Z, r25
    494c:	8f 5f       	subi	r24, 0xFF	; 255
    494e:	80 93 40 02 	sts	0x0240, r24
	if (twi_sendStop)
    4952:	80 91 1a 02 	lds	r24, 0x021A
    4956:	88 23       	and	r24, r24
    4958:	41 f0       	breq	.+16     	; 0x496a <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    495a:	85 ed       	ldi	r24, 0xD5	; 213
    495c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4960:	80 91 bc 00 	lds	r24, 0x00BC
    4964:	84 fd       	sbrc	r24, 4
    4966:	fc cf       	rjmp	.-8      	; 0x4960 <__vector_24+0x1f4>
    4968:	7f c0       	rjmp	.+254    	; 0x4a68 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	80 93 1b 02 	sts	0x021B, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4970:	84 ea       	ldi	r24, 0xA4	; 164
    4972:	6e c0       	rjmp	.+220    	; 0x4a50 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4974:	85 ed       	ldi	r24, 0xD5	; 213
    4976:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    497a:	80 91 bc 00 	lds	r24, 0x00BC
    497e:	84 fd       	sbrc	r24, 4
    4980:	fc cf       	rjmp	.-8      	; 0x497a <__vector_24+0x20e>
    4982:	72 c0       	rjmp	.+228    	; 0x4a68 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4984:	83 e0       	ldi	r24, 0x03	; 3
    4986:	80 93 18 02 	sts	0x0218, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    498a:	10 92 84 02 	sts	0x0284, r1
    498e:	59 c0       	rjmp	.+178    	; 0x4a42 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4990:	80 91 84 02 	lds	r24, 0x0284
    4994:	80 32       	cpi	r24, 0x20	; 32
    4996:	08 f0       	brcs	.+2      	; 0x499a <__vector_24+0x22e>
    4998:	56 c0       	rjmp	.+172    	; 0x4a46 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    499a:	80 91 84 02 	lds	r24, 0x0284
    499e:	90 91 bb 00 	lds	r25, 0x00BB
    49a2:	e8 2f       	mov	r30, r24
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	ec 59       	subi	r30, 0x9C	; 156
    49a8:	fd 4f       	sbci	r31, 0xFD	; 253
    49aa:	90 83       	st	Z, r25
    49ac:	8f 5f       	subi	r24, 0xFF	; 255
    49ae:	80 93 84 02 	sts	0x0284, r24
    49b2:	47 c0       	rjmp	.+142    	; 0x4a42 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    49b4:	80 91 84 02 	lds	r24, 0x0284
    49b8:	80 32       	cpi	r24, 0x20	; 32
    49ba:	30 f4       	brcc	.+12     	; 0x49c8 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    49bc:	e0 91 84 02 	lds	r30, 0x0284
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	ec 59       	subi	r30, 0x9C	; 156
    49c4:	fd 4f       	sbci	r31, 0xFD	; 253
    49c6:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    49c8:	85 ed       	ldi	r24, 0xD5	; 213
    49ca:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    49ce:	80 91 bc 00 	lds	r24, 0x00BC
    49d2:	84 fd       	sbrc	r24, 4
    49d4:	fc cf       	rjmp	.-8      	; 0x49ce <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    49d6:	10 92 18 02 	sts	0x0218, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    49da:	60 91 84 02 	lds	r22, 0x0284
    49de:	e0 91 1e 02 	lds	r30, 0x021E
    49e2:	f0 91 1f 02 	lds	r31, 0x021F
    49e6:	84 e6       	ldi	r24, 0x64	; 100
    49e8:	92 e0       	ldi	r25, 0x02	; 2
    49ea:	70 e0       	ldi	r23, 0x00	; 0
    49ec:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    49ee:	10 92 84 02 	sts	0x0284, r1
    49f2:	2d c0       	rjmp	.+90     	; 0x4a4e <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    49f4:	84 e0       	ldi	r24, 0x04	; 4
    49f6:	80 93 18 02 	sts	0x0218, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    49fa:	10 92 62 02 	sts	0x0262, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    49fe:	10 92 63 02 	sts	0x0263, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4a02:	e0 91 1c 02 	lds	r30, 0x021C
    4a06:	f0 91 1d 02 	lds	r31, 0x021D
    4a0a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4a0c:	80 91 63 02 	lds	r24, 0x0263
    4a10:	88 23       	and	r24, r24
    4a12:	29 f4       	brne	.+10     	; 0x4a1e <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	80 93 63 02 	sts	0x0263, r24
        twi_txBuffer[0] = 0x00;
    4a1a:	10 92 42 02 	sts	0x0242, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4a1e:	90 91 62 02 	lds	r25, 0x0262
    4a22:	e9 2f       	mov	r30, r25
    4a24:	f0 e0       	ldi	r31, 0x00	; 0
    4a26:	ee 5b       	subi	r30, 0xBE	; 190
    4a28:	fd 4f       	sbci	r31, 0xFD	; 253
    4a2a:	80 81       	ld	r24, Z
    4a2c:	80 93 bb 00 	sts	0x00BB, r24
    4a30:	9f 5f       	subi	r25, 0xFF	; 255
    4a32:	90 93 62 02 	sts	0x0262, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4a36:	90 91 62 02 	lds	r25, 0x0262
    4a3a:	80 91 63 02 	lds	r24, 0x0263
    4a3e:	98 17       	cp	r25, r24
    4a40:	10 f4       	brcc	.+4      	; 0x4a46 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4a42:	85 ec       	ldi	r24, 0xC5	; 197
    4a44:	01 c0       	rjmp	.+2      	; 0x4a48 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4a46:	85 e8       	ldi	r24, 0x85	; 133
    4a48:	80 93 bc 00 	sts	0x00BC, r24
    4a4c:	0f c0       	rjmp	.+30     	; 0x4a6c <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4a4e:	85 ec       	ldi	r24, 0xC5	; 197
    4a50:	80 93 bc 00 	sts	0x00BC, r24
    4a54:	09 c0       	rjmp	.+18     	; 0x4a68 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4a56:	10 92 85 02 	sts	0x0285, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4a5a:	85 ed       	ldi	r24, 0xD5	; 213
    4a5c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4a60:	80 91 bc 00 	lds	r24, 0x00BC
    4a64:	84 fd       	sbrc	r24, 4
    4a66:	fc cf       	rjmp	.-8      	; 0x4a60 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4a68:	10 92 18 02 	sts	0x0218, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4a6c:	ff 91       	pop	r31
    4a6e:	ef 91       	pop	r30
    4a70:	bf 91       	pop	r27
    4a72:	af 91       	pop	r26
    4a74:	9f 91       	pop	r25
    4a76:	8f 91       	pop	r24
    4a78:	7f 91       	pop	r23
    4a7a:	6f 91       	pop	r22
    4a7c:	5f 91       	pop	r21
    4a7e:	4f 91       	pop	r20
    4a80:	3f 91       	pop	r19
    4a82:	2f 91       	pop	r18
    4a84:	0f 90       	pop	r0
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	0f 90       	pop	r0
    4a8a:	1f 90       	pop	r1
    4a8c:	18 95       	reti

00004a8e <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4a8e:	10 92 18 02 	sts	0x0218, r1
  twi_sendStop = true;		// default value
    4a92:	81 e0       	ldi	r24, 0x01	; 1
    4a94:	80 93 1a 02 	sts	0x021A, r24
  twi_inRepStart = false;
    4a98:	10 92 1b 02 	sts	0x021B, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    4a9c:	82 e1       	ldi	r24, 0x12	; 18
    4a9e:	61 e0       	ldi	r22, 0x01	; 1
    4aa0:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <digitalWrite>
  digitalWrite(SCL, 1);
    4aa4:	83 e1       	ldi	r24, 0x13	; 19
    4aa6:	61 e0       	ldi	r22, 0x01	; 1
    4aa8:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    4aac:	e9 eb       	ldi	r30, 0xB9	; 185
    4aae:	f0 e0       	ldi	r31, 0x00	; 0
    4ab0:	80 81       	ld	r24, Z
    4ab2:	8e 7f       	andi	r24, 0xFE	; 254
    4ab4:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    4ab6:	80 81       	ld	r24, Z
    4ab8:	8d 7f       	andi	r24, 0xFD	; 253
    4aba:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    4abc:	8d ef       	ldi	r24, 0xFD	; 253
    4abe:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4ac2:	85 e4       	ldi	r24, 0x45	; 69
    4ac4:	80 93 bc 00 	sts	0x00BC, r24
}
    4ac8:	08 95       	ret

00004aca <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4aca:	cf 93       	push	r28
    4acc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4ace:	48 2f       	mov	r20, r24
    4ad0:	50 e0       	ldi	r21, 0x00	; 0
    4ad2:	ca 01       	movw	r24, r20
    4ad4:	8c 55       	subi	r24, 0x5C	; 92
    4ad6:	99 4f       	sbci	r25, 0xF9	; 249
    4ad8:	fc 01       	movw	r30, r24
    4ada:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    4adc:	40 57       	subi	r20, 0x70	; 112
    4ade:	59 4f       	sbci	r21, 0xF9	; 249
    4ae0:	fa 01       	movw	r30, r20
    4ae2:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4ae4:	88 23       	and	r24, r24
    4ae6:	69 f1       	breq	.+90     	; 0x4b42 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	88 0f       	add	r24, r24
    4aec:	99 1f       	adc	r25, r25
    4aee:	fc 01       	movw	r30, r24
    4af0:	ee 58       	subi	r30, 0x8E	; 142
    4af2:	f9 4f       	sbci	r31, 0xF9	; 249
    4af4:	a5 91       	lpm	r26, Z+
    4af6:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    4af8:	fc 01       	movw	r30, r24
    4afa:	e4 58       	subi	r30, 0x84	; 132
    4afc:	f9 4f       	sbci	r31, 0xF9	; 249
    4afe:	c5 91       	lpm	r28, Z+
    4b00:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    4b02:	66 23       	and	r22, r22
    4b04:	51 f4       	brne	.+20     	; 0x4b1a <pinMode+0x50>
		uint8_t oldSREG = SREG;
    4b06:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4b08:	f8 94       	cli
		*reg &= ~bit;
    4b0a:	8c 91       	ld	r24, X
    4b0c:	93 2f       	mov	r25, r19
    4b0e:	90 95       	com	r25
    4b10:	89 23       	and	r24, r25
    4b12:	8c 93       	st	X, r24
		*out &= ~bit;
    4b14:	88 81       	ld	r24, Y
    4b16:	89 23       	and	r24, r25
    4b18:	0b c0       	rjmp	.+22     	; 0x4b30 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4b1a:	62 30       	cpi	r22, 0x02	; 2
    4b1c:	61 f4       	brne	.+24     	; 0x4b36 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    4b1e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4b20:	f8 94       	cli
		*reg &= ~bit;
    4b22:	8c 91       	ld	r24, X
    4b24:	93 2f       	mov	r25, r19
    4b26:	90 95       	com	r25
    4b28:	89 23       	and	r24, r25
    4b2a:	8c 93       	st	X, r24
		*out |= bit;
    4b2c:	88 81       	ld	r24, Y
    4b2e:	83 2b       	or	r24, r19
    4b30:	88 83       	st	Y, r24
		SREG = oldSREG;
    4b32:	2f bf       	out	0x3f, r18	; 63
    4b34:	06 c0       	rjmp	.+12     	; 0x4b42 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    4b36:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4b38:	f8 94       	cli
		*reg |= bit;
    4b3a:	8c 91       	ld	r24, X
    4b3c:	83 2b       	or	r24, r19
    4b3e:	8c 93       	st	X, r24
		SREG = oldSREG;
    4b40:	9f bf       	out	0x3f, r25	; 63
	}
}
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	08 95       	ret

00004b48 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    4b48:	48 2f       	mov	r20, r24
    4b4a:	50 e0       	ldi	r21, 0x00	; 0
    4b4c:	ca 01       	movw	r24, r20
    4b4e:	88 54       	subi	r24, 0x48	; 72
    4b50:	99 4f       	sbci	r25, 0xF9	; 249
    4b52:	fc 01       	movw	r30, r24
    4b54:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    4b56:	ca 01       	movw	r24, r20
    4b58:	8c 55       	subi	r24, 0x5C	; 92
    4b5a:	99 4f       	sbci	r25, 0xF9	; 249
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    4b60:	40 57       	subi	r20, 0x70	; 112
    4b62:	59 4f       	sbci	r21, 0xF9	; 249
    4b64:	fa 01       	movw	r30, r20
    4b66:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4b68:	33 23       	and	r19, r19
    4b6a:	09 f4       	brne	.+2      	; 0x4b6e <digitalWrite+0x26>
    4b6c:	40 c0       	rjmp	.+128    	; 0x4bee <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4b6e:	22 23       	and	r18, r18
    4b70:	51 f1       	breq	.+84     	; 0x4bc6 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4b72:	23 30       	cpi	r18, 0x03	; 3
    4b74:	71 f0       	breq	.+28     	; 0x4b92 <digitalWrite+0x4a>
    4b76:	24 30       	cpi	r18, 0x04	; 4
    4b78:	28 f4       	brcc	.+10     	; 0x4b84 <digitalWrite+0x3c>
    4b7a:	21 30       	cpi	r18, 0x01	; 1
    4b7c:	a1 f0       	breq	.+40     	; 0x4ba6 <digitalWrite+0x5e>
    4b7e:	22 30       	cpi	r18, 0x02	; 2
    4b80:	11 f5       	brne	.+68     	; 0x4bc6 <digitalWrite+0x7e>
    4b82:	14 c0       	rjmp	.+40     	; 0x4bac <digitalWrite+0x64>
    4b84:	26 30       	cpi	r18, 0x06	; 6
    4b86:	b1 f0       	breq	.+44     	; 0x4bb4 <digitalWrite+0x6c>
    4b88:	27 30       	cpi	r18, 0x07	; 7
    4b8a:	c1 f0       	breq	.+48     	; 0x4bbc <digitalWrite+0x74>
    4b8c:	24 30       	cpi	r18, 0x04	; 4
    4b8e:	d9 f4       	brne	.+54     	; 0x4bc6 <digitalWrite+0x7e>
    4b90:	04 c0       	rjmp	.+8      	; 0x4b9a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4b92:	80 91 80 00 	lds	r24, 0x0080
    4b96:	8f 77       	andi	r24, 0x7F	; 127
    4b98:	03 c0       	rjmp	.+6      	; 0x4ba0 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4b9a:	80 91 80 00 	lds	r24, 0x0080
    4b9e:	8f 7d       	andi	r24, 0xDF	; 223
    4ba0:	80 93 80 00 	sts	0x0080, r24
    4ba4:	10 c0       	rjmp	.+32     	; 0x4bc6 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4ba6:	84 b5       	in	r24, 0x24	; 36
    4ba8:	8f 77       	andi	r24, 0x7F	; 127
    4baa:	02 c0       	rjmp	.+4      	; 0x4bb0 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4bac:	84 b5       	in	r24, 0x24	; 36
    4bae:	8f 7d       	andi	r24, 0xDF	; 223
    4bb0:	84 bd       	out	0x24, r24	; 36
    4bb2:	09 c0       	rjmp	.+18     	; 0x4bc6 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4bb4:	80 91 b0 00 	lds	r24, 0x00B0
    4bb8:	8f 77       	andi	r24, 0x7F	; 127
    4bba:	03 c0       	rjmp	.+6      	; 0x4bc2 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4bbc:	80 91 b0 00 	lds	r24, 0x00B0
    4bc0:	8f 7d       	andi	r24, 0xDF	; 223
    4bc2:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    4bc6:	e3 2f       	mov	r30, r19
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	ee 0f       	add	r30, r30
    4bcc:	ff 1f       	adc	r31, r31
    4bce:	e4 58       	subi	r30, 0x84	; 132
    4bd0:	f9 4f       	sbci	r31, 0xF9	; 249
    4bd2:	a5 91       	lpm	r26, Z+
    4bd4:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    4bd6:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4bd8:	f8 94       	cli

	if (val == LOW) {
    4bda:	66 23       	and	r22, r22
    4bdc:	21 f4       	brne	.+8      	; 0x4be6 <digitalWrite+0x9e>
		*out &= ~bit;
    4bde:	8c 91       	ld	r24, X
    4be0:	90 95       	com	r25
    4be2:	89 23       	and	r24, r25
    4be4:	02 c0       	rjmp	.+4      	; 0x4bea <digitalWrite+0xa2>
	} else {
		*out |= bit;
    4be6:	8c 91       	ld	r24, X
    4be8:	89 2b       	or	r24, r25
    4bea:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    4bec:	2f bf       	out	0x3f, r18	; 63
    4bee:	08 95       	ret

00004bf0 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    4bf0:	08 95       	ret

00004bf2 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    4bf2:	1f 92       	push	r1
    4bf4:	0f 92       	push	r0
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	0f 92       	push	r0
    4bfa:	11 24       	eor	r1, r1
    4bfc:	2f 93       	push	r18
    4bfe:	3f 93       	push	r19
    4c00:	4f 93       	push	r20
    4c02:	8f 93       	push	r24
    4c04:	9f 93       	push	r25
    4c06:	ef 93       	push	r30
    4c08:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    4c0a:	80 91 c0 00 	lds	r24, 0x00C0
    4c0e:	82 fd       	sbrc	r24, 2
    4c10:	1d c0       	rjmp	.+58     	; 0x4c4c <__vector_18+0x5a>
      unsigned char c = UDR0;
    4c12:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4c16:	20 91 c6 02 	lds	r18, 0x02C6
    4c1a:	30 91 c7 02 	lds	r19, 0x02C7

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4c1e:	2f 5f       	subi	r18, 0xFF	; 255
    4c20:	3f 4f       	sbci	r19, 0xFF	; 255
    4c22:	2f 73       	andi	r18, 0x3F	; 63
    4c24:	30 70       	andi	r19, 0x00	; 0
    4c26:	80 91 c8 02 	lds	r24, 0x02C8
    4c2a:	90 91 c9 02 	lds	r25, 0x02C9
    4c2e:	28 17       	cp	r18, r24
    4c30:	39 07       	cpc	r19, r25
    4c32:	71 f0       	breq	.+28     	; 0x4c50 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    4c34:	e0 91 c6 02 	lds	r30, 0x02C6
    4c38:	f0 91 c7 02 	lds	r31, 0x02C7
    4c3c:	ea 57       	subi	r30, 0x7A	; 122
    4c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    4c40:	40 83       	st	Z, r20
    buffer->head = i;
    4c42:	30 93 c7 02 	sts	0x02C7, r19
    4c46:	20 93 c6 02 	sts	0x02C6, r18
    4c4a:	02 c0       	rjmp	.+4      	; 0x4c50 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    4c4c:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    4c50:	ff 91       	pop	r31
    4c52:	ef 91       	pop	r30
    4c54:	9f 91       	pop	r25
    4c56:	8f 91       	pop	r24
    4c58:	4f 91       	pop	r20
    4c5a:	3f 91       	pop	r19
    4c5c:	2f 91       	pop	r18
    4c5e:	0f 90       	pop	r0
    4c60:	0f be       	out	0x3f, r0	; 63
    4c62:	0f 90       	pop	r0
    4c64:	1f 90       	pop	r1
    4c66:	18 95       	reti

00004c68 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4c68:	e0 91 1a 03 	lds	r30, 0x031A
    4c6c:	f0 91 1b 03 	lds	r31, 0x031B
    4c70:	e0 5c       	subi	r30, 0xC0	; 192
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	81 91       	ld	r24, Z+
    4c76:	91 91       	ld	r25, Z+
    4c78:	20 81       	ld	r18, Z
    4c7a:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4c7c:	82 1b       	sub	r24, r18
    4c7e:	93 0b       	sbc	r25, r19
    4c80:	8f 73       	andi	r24, 0x3F	; 63
    4c82:	90 70       	andi	r25, 0x00	; 0
    4c84:	89 2b       	or	r24, r25
    4c86:	11 f0       	breq	.+4      	; 0x4c8c <serialEventRun()+0x24>
    4c88:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <serialEvent()>
    4c8c:	08 95       	ret

00004c8e <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    4c8e:	1f 92       	push	r1
    4c90:	0f 92       	push	r0
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	0f 92       	push	r0
    4c96:	11 24       	eor	r1, r1
    4c98:	2f 93       	push	r18
    4c9a:	3f 93       	push	r19
    4c9c:	8f 93       	push	r24
    4c9e:	9f 93       	push	r25
    4ca0:	ef 93       	push	r30
    4ca2:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    4ca4:	20 91 0a 03 	lds	r18, 0x030A
    4ca8:	30 91 0b 03 	lds	r19, 0x030B
    4cac:	80 91 0c 03 	lds	r24, 0x030C
    4cb0:	90 91 0d 03 	lds	r25, 0x030D
    4cb4:	28 17       	cp	r18, r24
    4cb6:	39 07       	cpc	r19, r25
    4cb8:	31 f4       	brne	.+12     	; 0x4cc6 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4cba:	80 91 c1 00 	lds	r24, 0x00C1
    4cbe:	8f 7d       	andi	r24, 0xDF	; 223
    4cc0:	80 93 c1 00 	sts	0x00C1, r24
    4cc4:	14 c0       	rjmp	.+40     	; 0x4cee <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4cc6:	e0 91 0c 03 	lds	r30, 0x030C
    4cca:	f0 91 0d 03 	lds	r31, 0x030D
    4cce:	e6 53       	subi	r30, 0x36	; 54
    4cd0:	fd 4f       	sbci	r31, 0xFD	; 253
    4cd2:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4cd4:	80 91 0c 03 	lds	r24, 0x030C
    4cd8:	90 91 0d 03 	lds	r25, 0x030D
    4cdc:	01 96       	adiw	r24, 0x01	; 1
    4cde:	8f 73       	andi	r24, 0x3F	; 63
    4ce0:	90 70       	andi	r25, 0x00	; 0
    4ce2:	90 93 0d 03 	sts	0x030D, r25
    4ce6:	80 93 0c 03 	sts	0x030C, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4cea:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4cee:	ff 91       	pop	r31
    4cf0:	ef 91       	pop	r30
    4cf2:	9f 91       	pop	r25
    4cf4:	8f 91       	pop	r24
    4cf6:	3f 91       	pop	r19
    4cf8:	2f 91       	pop	r18
    4cfa:	0f 90       	pop	r0
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	0f 90       	pop	r0
    4d00:	1f 90       	pop	r1
    4d02:	18 95       	reti

00004d04 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4d04:	af 92       	push	r10
    4d06:	bf 92       	push	r11
    4d08:	df 92       	push	r13
    4d0a:	ef 92       	push	r14
    4d0c:	ff 92       	push	r15
    4d0e:	0f 93       	push	r16
    4d10:	1f 93       	push	r17
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	ec 01       	movw	r28, r24
    4d18:	7a 01       	movw	r14, r20
    4d1a:	8b 01       	movw	r16, r22
    4d1c:	dd 24       	eor	r13, r13
    4d1e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4d20:	91 e0       	ldi	r25, 0x01	; 1
    4d22:	a9 2e       	mov	r10, r25
    4d24:	b1 2c       	mov	r11, r1
    4d26:	ec 89       	ldd	r30, Y+20	; 0x14
    4d28:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    4d2a:	dd 20       	and	r13, r13
    4d2c:	69 f0       	breq	.+26     	; 0x4d48 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    4d2e:	c5 01       	movw	r24, r10
    4d30:	08 a0       	ldd	r0, Y+32	; 0x20
    4d32:	02 c0       	rjmp	.+4      	; 0x4d38 <HardwareSerial::begin(unsigned long)+0x34>
    4d34:	88 0f       	add	r24, r24
    4d36:	99 1f       	adc	r25, r25
    4d38:	0a 94       	dec	r0
    4d3a:	e2 f7       	brpl	.-8      	; 0x4d34 <HardwareSerial::begin(unsigned long)+0x30>
    4d3c:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4d3e:	60 e9       	ldi	r22, 0x90	; 144
    4d40:	70 ed       	ldi	r23, 0xD0	; 208
    4d42:	83 e0       	ldi	r24, 0x03	; 3
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	05 c0       	rjmp	.+10     	; 0x4d52 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    4d48:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4d4a:	68 e4       	ldi	r22, 0x48	; 72
    4d4c:	78 ee       	ldi	r23, 0xE8	; 232
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	a8 01       	movw	r20, r16
    4d54:	97 01       	movw	r18, r14
    4d56:	0e 94 cd 2b 	call	0x579a	; 0x579a <__udivmodsi4>
    4d5a:	21 50       	subi	r18, 0x01	; 1
    4d5c:	30 40       	sbci	r19, 0x00	; 0
    4d5e:	40 40       	sbci	r20, 0x00	; 0
    4d60:	50 40       	sbci	r21, 0x00	; 0
    4d62:	56 95       	lsr	r21
    4d64:	47 95       	ror	r20
    4d66:	37 95       	ror	r19
    4d68:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4d6a:	80 e1       	ldi	r24, 0x10	; 16
    4d6c:	20 30       	cpi	r18, 0x00	; 0
    4d6e:	38 07       	cpc	r19, r24
    4d70:	20 f0       	brcs	.+8      	; 0x4d7a <HardwareSerial::begin(unsigned long)+0x76>
    4d72:	dd 20       	and	r13, r13
    4d74:	11 f0       	breq	.+4      	; 0x4d7a <HardwareSerial::begin(unsigned long)+0x76>
    4d76:	dd 24       	eor	r13, r13
    4d78:	d6 cf       	rjmp	.-84     	; 0x4d26 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4d7a:	e8 89       	ldd	r30, Y+16	; 0x10
    4d7c:	f9 89       	ldd	r31, Y+17	; 0x11
    4d7e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4d80:	ea 89       	ldd	r30, Y+18	; 0x12
    4d82:	fb 89       	ldd	r31, Y+19	; 0x13
    4d84:	20 83       	st	Z, r18

  transmitting = false;
    4d86:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    4d88:	ee 89       	ldd	r30, Y+22	; 0x16
    4d8a:	ff 89       	ldd	r31, Y+23	; 0x17
    4d8c:	40 81       	ld	r20, Z
    4d8e:	21 e0       	ldi	r18, 0x01	; 1
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	c9 01       	movw	r24, r18
    4d94:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4d96:	02 c0       	rjmp	.+4      	; 0x4d9c <HardwareSerial::begin(unsigned long)+0x98>
    4d98:	88 0f       	add	r24, r24
    4d9a:	99 1f       	adc	r25, r25
    4d9c:	0a 94       	dec	r0
    4d9e:	e2 f7       	brpl	.-8      	; 0x4d98 <HardwareSerial::begin(unsigned long)+0x94>
    4da0:	48 2b       	or	r20, r24
    4da2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4da4:	ee 89       	ldd	r30, Y+22	; 0x16
    4da6:	ff 89       	ldd	r31, Y+23	; 0x17
    4da8:	40 81       	ld	r20, Z
    4daa:	c9 01       	movw	r24, r18
    4dac:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <HardwareSerial::begin(unsigned long)+0xb0>
    4db0:	88 0f       	add	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	0a 94       	dec	r0
    4db6:	e2 f7       	brpl	.-8      	; 0x4db0 <HardwareSerial::begin(unsigned long)+0xac>
    4db8:	48 2b       	or	r20, r24
    4dba:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4dbc:	ee 89       	ldd	r30, Y+22	; 0x16
    4dbe:	ff 89       	ldd	r31, Y+23	; 0x17
    4dc0:	40 81       	ld	r20, Z
    4dc2:	c9 01       	movw	r24, r18
    4dc4:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <HardwareSerial::begin(unsigned long)+0xc8>
    4dc8:	88 0f       	add	r24, r24
    4dca:	99 1f       	adc	r25, r25
    4dcc:	0a 94       	dec	r0
    4dce:	e2 f7       	brpl	.-8      	; 0x4dc8 <HardwareSerial::begin(unsigned long)+0xc4>
    4dd0:	48 2b       	or	r20, r24
    4dd2:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4dd4:	ee 89       	ldd	r30, Y+22	; 0x16
    4dd6:	ff 89       	ldd	r31, Y+23	; 0x17
    4dd8:	80 81       	ld	r24, Z
    4dda:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4ddc:	02 c0       	rjmp	.+4      	; 0x4de2 <HardwareSerial::begin(unsigned long)+0xde>
    4dde:	22 0f       	add	r18, r18
    4de0:	33 1f       	adc	r19, r19
    4de2:	0a 94       	dec	r0
    4de4:	e2 f7       	brpl	.-8      	; 0x4dde <HardwareSerial::begin(unsigned long)+0xda>
    4de6:	20 95       	com	r18
    4de8:	28 23       	and	r18, r24
    4dea:	20 83       	st	Z, r18
}
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	1f 91       	pop	r17
    4df2:	0f 91       	pop	r16
    4df4:	ff 90       	pop	r15
    4df6:	ef 90       	pop	r14
    4df8:	df 90       	pop	r13
    4dfa:	bf 90       	pop	r11
    4dfc:	af 90       	pop	r10
    4dfe:	08 95       	ret

00004e00 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4e06:	1e 96       	adiw	r26, 0x0e	; 14
    4e08:	8d 91       	ld	r24, X+
    4e0a:	9c 91       	ld	r25, X
    4e0c:	1f 97       	sbiw	r26, 0x0f	; 15
    4e0e:	ec 01       	movw	r28, r24
    4e10:	c0 5c       	subi	r28, 0xC0	; 192
    4e12:	df 4f       	sbci	r29, 0xFF	; 255
    4e14:	fc 01       	movw	r30, r24
    4e16:	ee 5b       	subi	r30, 0xBE	; 190
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	28 81       	ld	r18, Y
    4e1c:	39 81       	ldd	r19, Y+1	; 0x01
    4e1e:	80 81       	ld	r24, Z
    4e20:	91 81       	ldd	r25, Z+1	; 0x01
    4e22:	28 17       	cp	r18, r24
    4e24:	39 07       	cpc	r19, r25
    4e26:	c9 f7       	brne	.-14     	; 0x4e1a <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    4e28:	56 96       	adiw	r26, 0x16	; 22
    4e2a:	ed 91       	ld	r30, X+
    4e2c:	fc 91       	ld	r31, X
    4e2e:	57 97       	sbiw	r26, 0x17	; 23
    4e30:	40 81       	ld	r20, Z
    4e32:	21 e0       	ldi	r18, 0x01	; 1
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	c9 01       	movw	r24, r18
    4e38:	5c 96       	adiw	r26, 0x1c	; 28
    4e3a:	0c 90       	ld	r0, X
    4e3c:	5c 97       	sbiw	r26, 0x1c	; 28
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <HardwareSerial::end()+0x44>
    4e40:	88 0f       	add	r24, r24
    4e42:	99 1f       	adc	r25, r25
    4e44:	0a 94       	dec	r0
    4e46:	e2 f7       	brpl	.-8      	; 0x4e40 <HardwareSerial::end()+0x40>
    4e48:	80 95       	com	r24
    4e4a:	84 23       	and	r24, r20
    4e4c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    4e4e:	56 96       	adiw	r26, 0x16	; 22
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	57 97       	sbiw	r26, 0x17	; 23
    4e56:	40 81       	ld	r20, Z
    4e58:	c9 01       	movw	r24, r18
    4e5a:	5d 96       	adiw	r26, 0x1d	; 29
    4e5c:	0c 90       	ld	r0, X
    4e5e:	5d 97       	sbiw	r26, 0x1d	; 29
    4e60:	02 c0       	rjmp	.+4      	; 0x4e66 <HardwareSerial::end()+0x66>
    4e62:	88 0f       	add	r24, r24
    4e64:	99 1f       	adc	r25, r25
    4e66:	0a 94       	dec	r0
    4e68:	e2 f7       	brpl	.-8      	; 0x4e62 <HardwareSerial::end()+0x62>
    4e6a:	80 95       	com	r24
    4e6c:	84 23       	and	r24, r20
    4e6e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    4e70:	56 96       	adiw	r26, 0x16	; 22
    4e72:	ed 91       	ld	r30, X+
    4e74:	fc 91       	ld	r31, X
    4e76:	57 97       	sbiw	r26, 0x17	; 23
    4e78:	40 81       	ld	r20, Z
    4e7a:	c9 01       	movw	r24, r18
    4e7c:	5e 96       	adiw	r26, 0x1e	; 30
    4e7e:	0c 90       	ld	r0, X
    4e80:	5e 97       	sbiw	r26, 0x1e	; 30
    4e82:	02 c0       	rjmp	.+4      	; 0x4e88 <HardwareSerial::end()+0x88>
    4e84:	88 0f       	add	r24, r24
    4e86:	99 1f       	adc	r25, r25
    4e88:	0a 94       	dec	r0
    4e8a:	e2 f7       	brpl	.-8      	; 0x4e84 <HardwareSerial::end()+0x84>
    4e8c:	80 95       	com	r24
    4e8e:	84 23       	and	r24, r20
    4e90:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    4e92:	56 96       	adiw	r26, 0x16	; 22
    4e94:	ed 91       	ld	r30, X+
    4e96:	fc 91       	ld	r31, X
    4e98:	57 97       	sbiw	r26, 0x17	; 23
    4e9a:	80 81       	ld	r24, Z
    4e9c:	5f 96       	adiw	r26, 0x1f	; 31
    4e9e:	0c 90       	ld	r0, X
    4ea0:	5f 97       	sbiw	r26, 0x1f	; 31
    4ea2:	02 c0       	rjmp	.+4      	; 0x4ea8 <HardwareSerial::end()+0xa8>
    4ea4:	22 0f       	add	r18, r18
    4ea6:	33 1f       	adc	r19, r19
    4ea8:	0a 94       	dec	r0
    4eaa:	e2 f7       	brpl	.-8      	; 0x4ea4 <HardwareSerial::end()+0xa4>
    4eac:	20 95       	com	r18
    4eae:	28 23       	and	r18, r24
    4eb0:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4eb2:	1c 96       	adiw	r26, 0x0c	; 12
    4eb4:	ed 91       	ld	r30, X+
    4eb6:	fc 91       	ld	r31, X
    4eb8:	1d 97       	sbiw	r26, 0x0d	; 13
    4eba:	ee 5b       	subi	r30, 0xBE	; 190
    4ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebe:	80 81       	ld	r24, Z
    4ec0:	91 81       	ldd	r25, Z+1	; 0x01
    4ec2:	92 93       	st	-Z, r25
    4ec4:	82 93       	st	-Z, r24
}
    4ec6:	df 91       	pop	r29
    4ec8:	cf 91       	pop	r28
    4eca:	08 95       	ret

00004ecc <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4ecc:	dc 01       	movw	r26, r24
    4ece:	1c 96       	adiw	r26, 0x0c	; 12
    4ed0:	ed 91       	ld	r30, X+
    4ed2:	fc 91       	ld	r31, X
    4ed4:	1d 97       	sbiw	r26, 0x0d	; 13
    4ed6:	e0 5c       	subi	r30, 0xC0	; 192
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	21 91       	ld	r18, Z+
    4edc:	31 91       	ld	r19, Z+
    4ede:	80 81       	ld	r24, Z
    4ee0:	91 81       	ldd	r25, Z+1	; 0x01
    4ee2:	28 1b       	sub	r18, r24
    4ee4:	39 0b       	sbc	r19, r25
    4ee6:	2f 73       	andi	r18, 0x3F	; 63
    4ee8:	30 70       	andi	r19, 0x00	; 0
}
    4eea:	c9 01       	movw	r24, r18
    4eec:	08 95       	ret

00004eee <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4eee:	dc 01       	movw	r26, r24
    4ef0:	1c 96       	adiw	r26, 0x0c	; 12
    4ef2:	ed 91       	ld	r30, X+
    4ef4:	fc 91       	ld	r31, X
    4ef6:	1d 97       	sbiw	r26, 0x0d	; 13
    4ef8:	e0 5c       	subi	r30, 0xC0	; 192
    4efa:	ff 4f       	sbci	r31, 0xFF	; 255
    4efc:	20 81       	ld	r18, Z
    4efe:	31 81       	ldd	r19, Z+1	; 0x01
    4f00:	e0 54       	subi	r30, 0x40	; 64
    4f02:	f0 40       	sbci	r31, 0x00	; 0
    4f04:	df 01       	movw	r26, r30
    4f06:	ae 5b       	subi	r26, 0xBE	; 190
    4f08:	bf 4f       	sbci	r27, 0xFF	; 255
    4f0a:	8d 91       	ld	r24, X+
    4f0c:	9c 91       	ld	r25, X
    4f0e:	11 97       	sbiw	r26, 0x01	; 1
    4f10:	28 17       	cp	r18, r24
    4f12:	39 07       	cpc	r19, r25
    4f14:	19 f4       	brne	.+6      	; 0x4f1c <HardwareSerial::peek()+0x2e>
    4f16:	2f ef       	ldi	r18, 0xFF	; 255
    4f18:	3f ef       	ldi	r19, 0xFF	; 255
    4f1a:	07 c0       	rjmp	.+14     	; 0x4f2a <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4f1c:	8d 91       	ld	r24, X+
    4f1e:	9c 91       	ld	r25, X
    4f20:	e8 0f       	add	r30, r24
    4f22:	f9 1f       	adc	r31, r25
    4f24:	80 81       	ld	r24, Z
    4f26:	28 2f       	mov	r18, r24
    4f28:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4f2a:	c9 01       	movw	r24, r18
    4f2c:	08 95       	ret

00004f2e <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4f2e:	dc 01       	movw	r26, r24
    4f30:	1c 96       	adiw	r26, 0x0c	; 12
    4f32:	ed 91       	ld	r30, X+
    4f34:	fc 91       	ld	r31, X
    4f36:	1d 97       	sbiw	r26, 0x0d	; 13
    4f38:	e0 5c       	subi	r30, 0xC0	; 192
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	20 81       	ld	r18, Z
    4f3e:	31 81       	ldd	r19, Z+1	; 0x01
    4f40:	e0 54       	subi	r30, 0x40	; 64
    4f42:	f0 40       	sbci	r31, 0x00	; 0
    4f44:	df 01       	movw	r26, r30
    4f46:	ae 5b       	subi	r26, 0xBE	; 190
    4f48:	bf 4f       	sbci	r27, 0xFF	; 255
    4f4a:	8d 91       	ld	r24, X+
    4f4c:	9c 91       	ld	r25, X
    4f4e:	11 97       	sbiw	r26, 0x01	; 1
    4f50:	28 17       	cp	r18, r24
    4f52:	39 07       	cpc	r19, r25
    4f54:	19 f4       	brne	.+6      	; 0x4f5c <HardwareSerial::read()+0x2e>
    4f56:	2f ef       	ldi	r18, 0xFF	; 255
    4f58:	3f ef       	ldi	r19, 0xFF	; 255
    4f5a:	10 c0       	rjmp	.+32     	; 0x4f7c <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4f5c:	8d 91       	ld	r24, X+
    4f5e:	9c 91       	ld	r25, X
    4f60:	11 97       	sbiw	r26, 0x01	; 1
    4f62:	e8 0f       	add	r30, r24
    4f64:	f9 1f       	adc	r31, r25
    4f66:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4f68:	8d 91       	ld	r24, X+
    4f6a:	9c 91       	ld	r25, X
    4f6c:	11 97       	sbiw	r26, 0x01	; 1
    4f6e:	01 96       	adiw	r24, 0x01	; 1
    4f70:	8f 73       	andi	r24, 0x3F	; 63
    4f72:	90 70       	andi	r25, 0x00	; 0
    4f74:	11 96       	adiw	r26, 0x01	; 1
    4f76:	9c 93       	st	X, r25
    4f78:	8e 93       	st	-X, r24
    return c;
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4f7c:	c9 01       	movw	r24, r18
    4f7e:	08 95       	ret

00004f80 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    4f80:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    4f82:	91 96       	adiw	r26, 0x21	; 33
    4f84:	8c 91       	ld	r24, X
    4f86:	91 97       	sbiw	r26, 0x21	; 33
    4f88:	88 23       	and	r24, r24
    4f8a:	39 f0       	breq	.+14     	; 0x4f9a <HardwareSerial::flush()+0x1a>
    4f8c:	54 96       	adiw	r26, 0x14	; 20
    4f8e:	ed 91       	ld	r30, X+
    4f90:	fc 91       	ld	r31, X
    4f92:	55 97       	sbiw	r26, 0x15	; 21
    4f94:	80 81       	ld	r24, Z
    4f96:	86 ff       	sbrs	r24, 6
    4f98:	f9 cf       	rjmp	.-14     	; 0x4f8c <HardwareSerial::flush()+0xc>
  transmitting = false;
    4f9a:	91 96       	adiw	r26, 0x21	; 33
    4f9c:	1c 92       	st	X, r1
}
    4f9e:	08 95       	ret

00004fa0 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4fa6:	ee 85       	ldd	r30, Y+14	; 0x0e
    4fa8:	ff 85       	ldd	r31, Y+15	; 0x0f
    4faa:	e0 5c       	subi	r30, 0xC0	; 192
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	20 81       	ld	r18, Z
    4fb0:	31 81       	ldd	r19, Z+1	; 0x01
    4fb2:	e0 54       	subi	r30, 0x40	; 64
    4fb4:	f0 40       	sbci	r31, 0x00	; 0
    4fb6:	2f 5f       	subi	r18, 0xFF	; 255
    4fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fba:	2f 73       	andi	r18, 0x3F	; 63
    4fbc:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    4fbe:	df 01       	movw	r26, r30
    4fc0:	ae 5b       	subi	r26, 0xBE	; 190
    4fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    4fc4:	8d 91       	ld	r24, X+
    4fc6:	9c 91       	ld	r25, X
    4fc8:	11 97       	sbiw	r26, 0x01	; 1
    4fca:	28 17       	cp	r18, r24
    4fcc:	39 07       	cpc	r19, r25
    4fce:	d1 f3       	breq	.-12     	; 0x4fc4 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    4fd0:	e0 5c       	subi	r30, 0xC0	; 192
    4fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd4:	80 81       	ld	r24, Z
    4fd6:	91 81       	ldd	r25, Z+1	; 0x01
    4fd8:	e0 54       	subi	r30, 0x40	; 64
    4fda:	f0 40       	sbci	r31, 0x00	; 0
    4fdc:	e8 0f       	add	r30, r24
    4fde:	f9 1f       	adc	r31, r25
    4fe0:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    4fe2:	ee 85       	ldd	r30, Y+14	; 0x0e
    4fe4:	ff 85       	ldd	r31, Y+15	; 0x0f
    4fe6:	e0 5c       	subi	r30, 0xC0	; 192
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	31 83       	std	Z+1, r19	; 0x01
    4fec:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    4fee:	ee 89       	ldd	r30, Y+22	; 0x16
    4ff0:	ff 89       	ldd	r31, Y+23	; 0x17
    4ff2:	20 81       	ld	r18, Z
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4ffa:	02 c0       	rjmp	.+4      	; 0x5000 <HardwareSerial::write(unsigned char)+0x60>
    4ffc:	88 0f       	add	r24, r24
    4ffe:	99 1f       	adc	r25, r25
    5000:	0a 94       	dec	r0
    5002:	e2 f7       	brpl	.-8      	; 0x4ffc <HardwareSerial::write(unsigned char)+0x5c>
    5004:	28 2b       	or	r18, r24
    5006:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    5008:	81 e0       	ldi	r24, 0x01	; 1
    500a:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    500c:	ec 89       	ldd	r30, Y+20	; 0x14
    500e:	fd 89       	ldd	r31, Y+21	; 0x15
    5010:	80 81       	ld	r24, Z
    5012:	80 64       	ori	r24, 0x40	; 64
    5014:	80 83       	st	Z, r24
  
  return 1;
}
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	08 95       	ret

00005020 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    5020:	10 92 11 03 	sts	0x0311, r1
    5024:	10 92 10 03 	sts	0x0310, r1
    5028:	88 ee       	ldi	r24, 0xE8	; 232
    502a:	93 e0       	ldi	r25, 0x03	; 3
    502c:	a0 e0       	ldi	r26, 0x00	; 0
    502e:	b0 e0       	ldi	r27, 0x00	; 0
    5030:	80 93 12 03 	sts	0x0312, r24
    5034:	90 93 13 03 	sts	0x0313, r25
    5038:	a0 93 14 03 	sts	0x0314, r26
    503c:	b0 93 15 03 	sts	0x0315, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    5040:	89 e1       	ldi	r24, 0x19	; 25
    5042:	91 e0       	ldi	r25, 0x01	; 1
    5044:	90 93 0f 03 	sts	0x030F, r25
    5048:	80 93 0e 03 	sts	0x030E, r24
{
  _rx_buffer = rx_buffer;
    504c:	86 e8       	ldi	r24, 0x86	; 134
    504e:	92 e0       	ldi	r25, 0x02	; 2
    5050:	90 93 1b 03 	sts	0x031B, r25
    5054:	80 93 1a 03 	sts	0x031A, r24
  _tx_buffer = tx_buffer;
    5058:	8a ec       	ldi	r24, 0xCA	; 202
    505a:	92 e0       	ldi	r25, 0x02	; 2
    505c:	90 93 1d 03 	sts	0x031D, r25
    5060:	80 93 1c 03 	sts	0x031C, r24
  _ubrrh = ubrrh;
    5064:	85 ec       	ldi	r24, 0xC5	; 197
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	90 93 1f 03 	sts	0x031F, r25
    506c:	80 93 1e 03 	sts	0x031E, r24
  _ubrrl = ubrrl;
    5070:	84 ec       	ldi	r24, 0xC4	; 196
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	90 93 21 03 	sts	0x0321, r25
    5078:	80 93 20 03 	sts	0x0320, r24
  _ucsra = ucsra;
    507c:	80 ec       	ldi	r24, 0xC0	; 192
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	90 93 23 03 	sts	0x0323, r25
    5084:	80 93 22 03 	sts	0x0322, r24
  _ucsrb = ucsrb;
    5088:	81 ec       	ldi	r24, 0xC1	; 193
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	90 93 25 03 	sts	0x0325, r25
    5090:	80 93 24 03 	sts	0x0324, r24
  _ucsrc = ucsrc;
    5094:	82 ec       	ldi	r24, 0xC2	; 194
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	90 93 27 03 	sts	0x0327, r25
    509c:	80 93 26 03 	sts	0x0326, r24
  _udr = udr;
    50a0:	86 ec       	ldi	r24, 0xC6	; 198
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	90 93 29 03 	sts	0x0329, r25
    50a8:	80 93 28 03 	sts	0x0328, r24
  _rxen = rxen;
    50ac:	84 e0       	ldi	r24, 0x04	; 4
    50ae:	80 93 2a 03 	sts	0x032A, r24
  _txen = txen;
    50b2:	83 e0       	ldi	r24, 0x03	; 3
    50b4:	80 93 2b 03 	sts	0x032B, r24
  _rxcie = rxcie;
    50b8:	87 e0       	ldi	r24, 0x07	; 7
    50ba:	80 93 2c 03 	sts	0x032C, r24
  _udrie = udrie;
    50be:	85 e0       	ldi	r24, 0x05	; 5
    50c0:	80 93 2d 03 	sts	0x032D, r24
  _u2x = u2x;
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	80 93 2e 03 	sts	0x032E, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    50ca:	08 95       	ret

000050cc <main>:
#include <Arduino.h>

int main(void)
    50cc:	cf 93       	push	r28
    50ce:	df 93       	push	r29
{
	init();
    50d0:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    50d4:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    50d8:	c4 e3       	ldi	r28, 0x34	; 52
    50da:	d6 e2       	ldi	r29, 0x26	; 38
#endif
	
	setup();
    
	for (;;) {
		loop();
    50dc:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <loop>
		if (serialEventRun) serialEventRun();
    50e0:	20 97       	sbiw	r28, 0x00	; 0
    50e2:	e1 f3       	breq	.-8      	; 0x50dc <main+0x10>
    50e4:	0e 94 34 26 	call	0x4c68	; 0x4c68 <serialEventRun()>
    50e8:	f9 cf       	rjmp	.-14     	; 0x50dc <main+0x10>

000050ea <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    50ea:	cf 92       	push	r12
    50ec:	df 92       	push	r13
    50ee:	ef 92       	push	r14
    50f0:	ff 92       	push	r15
    50f2:	0f 93       	push	r16
    50f4:	1f 93       	push	r17
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29
    50fa:	7c 01       	movw	r14, r24
    50fc:	6b 01       	movw	r12, r22
    50fe:	8a 01       	movw	r16, r20
    5100:	c0 e0       	ldi	r28, 0x00	; 0
    5102:	d0 e0       	ldi	r29, 0x00	; 0
    5104:	0f c0       	rjmp	.+30     	; 0x5124 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    5106:	d6 01       	movw	r26, r12
    5108:	6d 91       	ld	r22, X+
    510a:	6d 01       	movw	r12, r26
    510c:	d7 01       	movw	r26, r14
    510e:	ed 91       	ld	r30, X+
    5110:	fc 91       	ld	r31, X
    5112:	01 90       	ld	r0, Z+
    5114:	f0 81       	ld	r31, Z
    5116:	e0 2d       	mov	r30, r0
    5118:	c7 01       	movw	r24, r14
    511a:	09 95       	icall
    511c:	c8 0f       	add	r28, r24
    511e:	d9 1f       	adc	r29, r25
    5120:	01 50       	subi	r16, 0x01	; 1
    5122:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    5124:	01 15       	cp	r16, r1
    5126:	11 05       	cpc	r17, r1
    5128:	71 f7       	brne	.-36     	; 0x5106 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    512a:	ce 01       	movw	r24, r28
    512c:	df 91       	pop	r29
    512e:	cf 91       	pop	r28
    5130:	1f 91       	pop	r17
    5132:	0f 91       	pop	r16
    5134:	ff 90       	pop	r15
    5136:	ef 90       	pop	r14
    5138:	df 90       	pop	r13
    513a:	cf 90       	pop	r12
    513c:	08 95       	ret

0000513e <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    513e:	ef 92       	push	r14
    5140:	ff 92       	push	r15
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    514c:	8b 01       	movw	r16, r22
    514e:	c0 e0       	ldi	r28, 0x00	; 0
    5150:	d0 e0       	ldi	r29, 0x00	; 0
    5152:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    5154:	0f 5f       	subi	r16, 0xFF	; 255
    5156:	1f 4f       	sbci	r17, 0xFF	; 255
    5158:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    515a:	66 23       	and	r22, r22
    515c:	59 f0       	breq	.+22     	; 0x5174 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    515e:	d7 01       	movw	r26, r14
    5160:	ed 91       	ld	r30, X+
    5162:	fc 91       	ld	r31, X
    5164:	01 90       	ld	r0, Z+
    5166:	f0 81       	ld	r31, Z
    5168:	e0 2d       	mov	r30, r0
    516a:	c7 01       	movw	r24, r14
    516c:	09 95       	icall
    516e:	c8 0f       	add	r28, r24
    5170:	d9 1f       	adc	r29, r25
    5172:	ef cf       	rjmp	.-34     	; 0x5152 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    5174:	ce 01       	movw	r24, r28
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	1f 91       	pop	r17
    517c:	0f 91       	pop	r16
    517e:	ff 90       	pop	r15
    5180:	ef 90       	pop	r14
    5182:	08 95       	ret

00005184 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    5184:	dc 01       	movw	r26, r24
{
  return write(c);
    5186:	ed 91       	ld	r30, X+
    5188:	fc 91       	ld	r31, X
    518a:	01 90       	ld	r0, Z+
    518c:	f0 81       	ld	r31, Z
    518e:	e0 2d       	mov	r30, r0
    5190:	09 95       	icall
}
    5192:	08 95       	ret

00005194 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    5194:	ef 92       	push	r14
    5196:	ff 92       	push	r15
    5198:	0f 93       	push	r16
    519a:	1f 93       	push	r17
    519c:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    519e:	dc 01       	movw	r26, r24
    51a0:	ed 91       	ld	r30, X+
    51a2:	fc 91       	ld	r31, X
    51a4:	01 90       	ld	r0, Z+
    51a6:	f0 81       	ld	r31, Z
    51a8:	e0 2d       	mov	r30, r0
    51aa:	6d e0       	ldi	r22, 0x0D	; 13
    51ac:	09 95       	icall
    51ae:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    51b0:	d8 01       	movw	r26, r16
    51b2:	ed 91       	ld	r30, X+
    51b4:	fc 91       	ld	r31, X
    51b6:	01 90       	ld	r0, Z+
    51b8:	f0 81       	ld	r31, Z
    51ba:	e0 2d       	mov	r30, r0
    51bc:	c8 01       	movw	r24, r16
    51be:	6a e0       	ldi	r22, 0x0A	; 10
    51c0:	09 95       	icall
    51c2:	9c 01       	movw	r18, r24
    51c4:	2e 0d       	add	r18, r14
    51c6:	3f 1d       	adc	r19, r15
    51c8:	c9 01       	movw	r24, r18
    51ca:	1f 91       	pop	r17
    51cc:	0f 91       	pop	r16
    51ce:	ff 90       	pop	r15
    51d0:	ef 90       	pop	r14
    51d2:	08 95       	ret

000051d4 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    51d4:	ef 92       	push	r14
    51d6:	ff 92       	push	r15
    51d8:	0f 93       	push	r16
    51da:	1f 93       	push	r17
    51dc:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    51de:	0e 94 9f 28 	call	0x513e	; 0x513e <Print::print(__FlashStringHelper const*)>
    51e2:	8c 01       	movw	r16, r24
  n += println();
    51e4:	c7 01       	movw	r24, r14
    51e6:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
    51ea:	9c 01       	movw	r18, r24
    51ec:	20 0f       	add	r18, r16
    51ee:	31 1f       	adc	r19, r17
  return n;
}
    51f0:	c9 01       	movw	r24, r18
    51f2:	1f 91       	pop	r17
    51f4:	0f 91       	pop	r16
    51f6:	ff 90       	pop	r15
    51f8:	ef 90       	pop	r14
    51fa:	08 95       	ret

000051fc <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    5202:	61 15       	cp	r22, r1
    5204:	71 05       	cpc	r23, r1
    5206:	19 f4       	brne	.+6      	; 0x520e <Print::write(char const*)+0x12>
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	0f c0       	rjmp	.+30     	; 0x522c <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    520e:	db 01       	movw	r26, r22
    5210:	0d 90       	ld	r0, X+
    5212:	00 20       	and	r0, r0
    5214:	e9 f7       	brne	.-6      	; 0x5210 <Print::write(char const*)+0x14>
    5216:	11 97       	sbiw	r26, 0x01	; 1
    5218:	a6 1b       	sub	r26, r22
    521a:	b7 0b       	sbc	r27, r23
    521c:	e8 81       	ld	r30, Y
    521e:	f9 81       	ldd	r31, Y+1	; 0x01
    5220:	02 80       	ldd	r0, Z+2	; 0x02
    5222:	f3 81       	ldd	r31, Z+3	; 0x03
    5224:	e0 2d       	mov	r30, r0
    5226:	ad 01       	movw	r20, r26
    5228:	09 95       	icall
    522a:	9c 01       	movw	r18, r24
    }
    522c:	c9 01       	movw	r24, r18
    522e:	df 91       	pop	r29
    5230:	cf 91       	pop	r28
    5232:	08 95       	ret

00005234 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    5234:	4f 92       	push	r4
    5236:	5f 92       	push	r5
    5238:	7f 92       	push	r7
    523a:	8f 92       	push	r8
    523c:	9f 92       	push	r9
    523e:	af 92       	push	r10
    5240:	bf 92       	push	r11
    5242:	cf 92       	push	r12
    5244:	df 92       	push	r13
    5246:	ef 92       	push	r14
    5248:	ff 92       	push	r15
    524a:	0f 93       	push	r16
    524c:	1f 93       	push	r17
    524e:	df 93       	push	r29
    5250:	cf 93       	push	r28
    5252:	cd b7       	in	r28, 0x3d	; 61
    5254:	de b7       	in	r29, 0x3e	; 62
    5256:	a1 97       	sbiw	r28, 0x21	; 33
    5258:	0f b6       	in	r0, 0x3f	; 63
    525a:	f8 94       	cli
    525c:	de bf       	out	0x3e, r29	; 62
    525e:	0f be       	out	0x3f, r0	; 63
    5260:	cd bf       	out	0x3d, r28	; 61
    5262:	2c 01       	movw	r4, r24
    5264:	74 2e       	mov	r7, r20
    5266:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5268:	22 30       	cpi	r18, 0x02	; 2
    526a:	08 f4       	brcc	.+2      	; 0x526e <Print::printNumber(unsigned long, unsigned char)+0x3a>
    526c:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    526e:	19 a2       	std	Y+33, r1	; 0x21
    5270:	31 e2       	ldi	r19, 0x21	; 33
    5272:	c3 2e       	mov	r12, r19
    5274:	d1 2c       	mov	r13, r1
    5276:	cc 0e       	add	r12, r28
    5278:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    527a:	82 2e       	mov	r8, r18
    527c:	99 24       	eor	r9, r9
    527e:	aa 24       	eor	r10, r10
    5280:	bb 24       	eor	r11, r11
    5282:	67 2d       	mov	r22, r7
    5284:	75 2f       	mov	r23, r21
    5286:	a5 01       	movw	r20, r10
    5288:	94 01       	movw	r18, r8
    528a:	0e 94 cd 2b 	call	0x579a	; 0x579a <__udivmodsi4>
    528e:	79 01       	movw	r14, r18
    5290:	8a 01       	movw	r16, r20
    char c = m - base * n;
    5292:	c8 01       	movw	r24, r16
    5294:	b7 01       	movw	r22, r14
    5296:	a5 01       	movw	r20, r10
    5298:	94 01       	movw	r18, r8
    529a:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <__mulsi3>
    529e:	47 2d       	mov	r20, r7
    52a0:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    52a2:	08 94       	sec
    52a4:	c1 08       	sbc	r12, r1
    52a6:	d1 08       	sbc	r13, r1
    52a8:	4a 30       	cpi	r20, 0x0A	; 10
    52aa:	14 f4       	brge	.+4      	; 0x52b0 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    52ac:	40 5d       	subi	r20, 0xD0	; 208
    52ae:	01 c0       	rjmp	.+2      	; 0x52b2 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    52b0:	49 5c       	subi	r20, 0xC9	; 201
    52b2:	f6 01       	movw	r30, r12
    52b4:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    52b6:	e1 14       	cp	r14, r1
    52b8:	f1 04       	cpc	r15, r1
    52ba:	01 05       	cpc	r16, r1
    52bc:	11 05       	cpc	r17, r1
    52be:	21 f0       	breq	.+8      	; 0x52c8 <Print::printNumber(unsigned long, unsigned char)+0x94>
    52c0:	7e 2c       	mov	r7, r14
    52c2:	5f 2d       	mov	r21, r15
    52c4:	c8 01       	movw	r24, r16
    52c6:	dd cf       	rjmp	.-70     	; 0x5282 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    52c8:	c2 01       	movw	r24, r4
    52ca:	b6 01       	movw	r22, r12
    52cc:	0e 94 fe 28 	call	0x51fc	; 0x51fc <Print::write(char const*)>
}
    52d0:	a1 96       	adiw	r28, 0x21	; 33
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	f8 94       	cli
    52d6:	de bf       	out	0x3e, r29	; 62
    52d8:	0f be       	out	0x3f, r0	; 63
    52da:	cd bf       	out	0x3d, r28	; 61
    52dc:	cf 91       	pop	r28
    52de:	df 91       	pop	r29
    52e0:	1f 91       	pop	r17
    52e2:	0f 91       	pop	r16
    52e4:	ff 90       	pop	r15
    52e6:	ef 90       	pop	r14
    52e8:	df 90       	pop	r13
    52ea:	cf 90       	pop	r12
    52ec:	bf 90       	pop	r11
    52ee:	af 90       	pop	r10
    52f0:	9f 90       	pop	r9
    52f2:	8f 90       	pop	r8
    52f4:	7f 90       	pop	r7
    52f6:	5f 90       	pop	r5
    52f8:	4f 90       	pop	r4
    52fa:	08 95       	ret

000052fc <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    52fc:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    52fe:	21 15       	cp	r18, r1
    5300:	31 05       	cpc	r19, r1
    5302:	41 f4       	brne	.+16     	; 0x5314 <Print::print(unsigned long, int)+0x18>
    5304:	ed 91       	ld	r30, X+
    5306:	fc 91       	ld	r31, X
    5308:	01 90       	ld	r0, Z+
    530a:	f0 81       	ld	r31, Z
    530c:	e0 2d       	mov	r30, r0
    530e:	64 2f       	mov	r22, r20
    5310:	09 95       	icall
    5312:	08 95       	ret
  else return printNumber(n, base);
    5314:	0e 94 1a 29 	call	0x5234	; 0x5234 <Print::printNumber(unsigned long, unsigned char)>
}
    5318:	08 95       	ret

0000531a <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    531a:	ef 92       	push	r14
    531c:	ff 92       	push	r15
    531e:	0f 93       	push	r16
    5320:	1f 93       	push	r17
    5322:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    5324:	7b 01       	movw	r14, r22
    5326:	00 e0       	ldi	r16, 0x00	; 0
    5328:	10 e0       	ldi	r17, 0x00	; 0
    532a:	b8 01       	movw	r22, r16
    532c:	a7 01       	movw	r20, r14
    532e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <Print::print(unsigned long, int)>
}
    5332:	1f 91       	pop	r17
    5334:	0f 91       	pop	r16
    5336:	ff 90       	pop	r15
    5338:	ef 90       	pop	r14
    533a:	08 95       	ret

0000533c <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    533c:	ef 92       	push	r14
    533e:	ff 92       	push	r15
    5340:	0f 93       	push	r16
    5342:	1f 93       	push	r17
    5344:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    5346:	e6 2e       	mov	r14, r22
    5348:	ff 24       	eor	r15, r15
    534a:	00 e0       	ldi	r16, 0x00	; 0
    534c:	10 e0       	ldi	r17, 0x00	; 0
    534e:	b8 01       	movw	r22, r16
    5350:	a7 01       	movw	r20, r14
    5352:	0e 94 7e 29 	call	0x52fc	; 0x52fc <Print::print(unsigned long, int)>
}
    5356:	1f 91       	pop	r17
    5358:	0f 91       	pop	r16
    535a:	ff 90       	pop	r15
    535c:	ef 90       	pop	r14
    535e:	08 95       	ret

00005360 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    5360:	cf 92       	push	r12
    5362:	df 92       	push	r13
    5364:	ef 92       	push	r14
    5366:	ff 92       	push	r15
    5368:	0f 93       	push	r16
    536a:	1f 93       	push	r17
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	ec 01       	movw	r28, r24
    5372:	6a 01       	movw	r12, r20
    5374:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    5376:	21 15       	cp	r18, r1
    5378:	31 05       	cpc	r19, r1
    537a:	41 f4       	brne	.+16     	; 0x538c <Print::print(long, int)+0x2c>
    return write(n);
    537c:	e8 81       	ld	r30, Y
    537e:	f9 81       	ldd	r31, Y+1	; 0x01
    5380:	01 90       	ld	r0, Z+
    5382:	f0 81       	ld	r31, Z
    5384:	e0 2d       	mov	r30, r0
    5386:	64 2f       	mov	r22, r20
    5388:	09 95       	icall
    538a:	1f c0       	rjmp	.+62     	; 0x53ca <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    538c:	2a 30       	cpi	r18, 0x0A	; 10
    538e:	31 05       	cpc	r19, r1
    5390:	d1 f4       	brne	.+52     	; 0x53c6 <Print::print(long, int)+0x66>
    if (n < 0) {
    5392:	77 ff       	sbrs	r23, 7
    5394:	17 c0       	rjmp	.+46     	; 0x53c4 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    5396:	e8 81       	ld	r30, Y
    5398:	f9 81       	ldd	r31, Y+1	; 0x01
    539a:	01 90       	ld	r0, Z+
    539c:	f0 81       	ld	r31, Z
    539e:	e0 2d       	mov	r30, r0
    53a0:	6d e2       	ldi	r22, 0x2D	; 45
    53a2:	09 95       	icall
    53a4:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    53a6:	44 27       	eor	r20, r20
    53a8:	55 27       	eor	r21, r21
    53aa:	ba 01       	movw	r22, r20
    53ac:	4c 19       	sub	r20, r12
    53ae:	5d 09       	sbc	r21, r13
    53b0:	6e 09       	sbc	r22, r14
    53b2:	7f 09       	sbc	r23, r15
    53b4:	ce 01       	movw	r24, r28
    53b6:	2a e0       	ldi	r18, 0x0A	; 10
    53b8:	0e 94 1a 29 	call	0x5234	; 0x5234 <Print::printNumber(unsigned long, unsigned char)>
    53bc:	98 01       	movw	r18, r16
    53be:	28 0f       	add	r18, r24
    53c0:	39 1f       	adc	r19, r25
    53c2:	04 c0       	rjmp	.+8      	; 0x53cc <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    53c4:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    53c6:	0e 94 1a 29 	call	0x5234	; 0x5234 <Print::printNumber(unsigned long, unsigned char)>
    53ca:	9c 01       	movw	r18, r24
  }
}
    53cc:	c9 01       	movw	r24, r18
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	1f 91       	pop	r17
    53d4:	0f 91       	pop	r16
    53d6:	ff 90       	pop	r15
    53d8:	ef 90       	pop	r14
    53da:	df 90       	pop	r13
    53dc:	cf 90       	pop	r12
    53de:	08 95       	ret

000053e0 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    53e0:	ef 92       	push	r14
    53e2:	ff 92       	push	r15
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	7b 01       	movw	r14, r22
    53ea:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    53ec:	00 27       	eor	r16, r16
    53ee:	f7 fc       	sbrc	r15, 7
    53f0:	00 95       	com	r16
    53f2:	10 2f       	mov	r17, r16
    53f4:	b8 01       	movw	r22, r16
    53f6:	a7 01       	movw	r20, r14
    53f8:	0e 94 b0 29 	call	0x5360	; 0x5360 <Print::print(long, int)>
}
    53fc:	1f 91       	pop	r17
    53fe:	0f 91       	pop	r16
    5400:	ff 90       	pop	r15
    5402:	ef 90       	pop	r14
    5404:	08 95       	ret

00005406 <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    5406:	ef 92       	push	r14
    5408:	ff 92       	push	r15
    540a:	0f 93       	push	r16
    540c:	1f 93       	push	r17
    540e:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5410:	0e 94 fe 28 	call	0x51fc	; 0x51fc <Print::write(char const*)>
    5414:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    5416:	c7 01       	movw	r24, r14
    5418:	0e 94 ca 28 	call	0x5194	; 0x5194 <Print::println()>
    541c:	08 0f       	add	r16, r24
    541e:	19 1f       	adc	r17, r25
  return n;
}
    5420:	c8 01       	movw	r24, r16
    5422:	1f 91       	pop	r17
    5424:	0f 91       	pop	r16
    5426:	ff 90       	pop	r15
    5428:	ef 90       	pop	r14
    542a:	08 95       	ret

0000542c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    542c:	1f 92       	push	r1
    542e:	0f 92       	push	r0
    5430:	0f b6       	in	r0, 0x3f	; 63
    5432:	0f 92       	push	r0
    5434:	11 24       	eor	r1, r1
    5436:	2f 93       	push	r18
    5438:	3f 93       	push	r19
    543a:	4f 93       	push	r20
    543c:	5f 93       	push	r21
    543e:	6f 93       	push	r22
    5440:	7f 93       	push	r23
    5442:	8f 93       	push	r24
    5444:	9f 93       	push	r25
    5446:	af 93       	push	r26
    5448:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    544a:	20 91 34 03 	lds	r18, 0x0334
    544e:	30 91 35 03 	lds	r19, 0x0335
    5452:	40 91 36 03 	lds	r20, 0x0336
    5456:	50 91 37 03 	lds	r21, 0x0337
	unsigned char f = timer0_fract;
    545a:	70 91 38 03 	lds	r23, 0x0338

	m += MILLIS_INC;
    545e:	da 01       	movw	r26, r20
    5460:	c9 01       	movw	r24, r18
    5462:	40 96       	adiw	r24, 0x10	; 16
    5464:	a1 1d       	adc	r26, r1
    5466:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    5468:	67 2f       	mov	r22, r23
    546a:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    546c:	6d 37       	cpi	r22, 0x7D	; 125
    546e:	30 f0       	brcs	.+12     	; 0x547c <__vector_16+0x50>
		f -= FRACT_MAX;
    5470:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    5472:	da 01       	movw	r26, r20
    5474:	c9 01       	movw	r24, r18
    5476:	41 96       	adiw	r24, 0x11	; 17
    5478:	a1 1d       	adc	r26, r1
    547a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    547c:	60 93 38 03 	sts	0x0338, r22
	timer0_millis = m;
    5480:	80 93 34 03 	sts	0x0334, r24
    5484:	90 93 35 03 	sts	0x0335, r25
    5488:	a0 93 36 03 	sts	0x0336, r26
    548c:	b0 93 37 03 	sts	0x0337, r27
	timer0_overflow_count++;
    5490:	80 91 30 03 	lds	r24, 0x0330
    5494:	90 91 31 03 	lds	r25, 0x0331
    5498:	a0 91 32 03 	lds	r26, 0x0332
    549c:	b0 91 33 03 	lds	r27, 0x0333
    54a0:	01 96       	adiw	r24, 0x01	; 1
    54a2:	a1 1d       	adc	r26, r1
    54a4:	b1 1d       	adc	r27, r1
    54a6:	80 93 30 03 	sts	0x0330, r24
    54aa:	90 93 31 03 	sts	0x0331, r25
    54ae:	a0 93 32 03 	sts	0x0332, r26
    54b2:	b0 93 33 03 	sts	0x0333, r27
}
    54b6:	bf 91       	pop	r27
    54b8:	af 91       	pop	r26
    54ba:	9f 91       	pop	r25
    54bc:	8f 91       	pop	r24
    54be:	7f 91       	pop	r23
    54c0:	6f 91       	pop	r22
    54c2:	5f 91       	pop	r21
    54c4:	4f 91       	pop	r20
    54c6:	3f 91       	pop	r19
    54c8:	2f 91       	pop	r18
    54ca:	0f 90       	pop	r0
    54cc:	0f be       	out	0x3f, r0	; 63
    54ce:	0f 90       	pop	r0
    54d0:	1f 90       	pop	r1
    54d2:	18 95       	reti

000054d4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    54d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    54d6:	84 b5       	in	r24, 0x24	; 36
    54d8:	82 60       	ori	r24, 0x02	; 2
    54da:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    54dc:	84 b5       	in	r24, 0x24	; 36
    54de:	81 60       	ori	r24, 0x01	; 1
    54e0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    54e2:	85 b5       	in	r24, 0x25	; 37
    54e4:	82 60       	ori	r24, 0x02	; 2
    54e6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    54e8:	85 b5       	in	r24, 0x25	; 37
    54ea:	81 60       	ori	r24, 0x01	; 1
    54ec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    54ee:	ee e6       	ldi	r30, 0x6E	; 110
    54f0:	f0 e0       	ldi	r31, 0x00	; 0
    54f2:	80 81       	ld	r24, Z
    54f4:	81 60       	ori	r24, 0x01	; 1
    54f6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    54f8:	e1 e8       	ldi	r30, 0x81	; 129
    54fa:	f0 e0       	ldi	r31, 0x00	; 0
    54fc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    54fe:	80 81       	ld	r24, Z
    5500:	82 60       	ori	r24, 0x02	; 2
    5502:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5504:	e0 e8       	ldi	r30, 0x80	; 128
    5506:	f0 e0       	ldi	r31, 0x00	; 0
    5508:	80 81       	ld	r24, Z
    550a:	81 60       	ori	r24, 0x01	; 1
    550c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    550e:	e1 eb       	ldi	r30, 0xB1	; 177
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	80 81       	ld	r24, Z
    5514:	84 60       	ori	r24, 0x04	; 4
    5516:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5518:	e0 eb       	ldi	r30, 0xB0	; 176
    551a:	f0 e0       	ldi	r31, 0x00	; 0
    551c:	80 81       	ld	r24, Z
    551e:	81 60       	ori	r24, 0x01	; 1
    5520:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    5522:	ea e7       	ldi	r30, 0x7A	; 122
    5524:	f0 e0       	ldi	r31, 0x00	; 0
    5526:	80 81       	ld	r24, Z
    5528:	84 60       	ori	r24, 0x04	; 4
    552a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    552c:	80 81       	ld	r24, Z
    552e:	82 60       	ori	r24, 0x02	; 2
    5530:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    5532:	80 81       	ld	r24, Z
    5534:	81 60       	ori	r24, 0x01	; 1
    5536:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5538:	80 81       	ld	r24, Z
    553a:	80 68       	ori	r24, 0x80	; 128
    553c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    553e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    5542:	08 95       	ret

00005544 <__fixunssfsi>:
    5544:	b3 d0       	rcall	.+358    	; 0x56ac <__fp_splitA>
    5546:	88 f0       	brcs	.+34     	; 0x556a <__fixunssfsi+0x26>
    5548:	9f 57       	subi	r25, 0x7F	; 127
    554a:	90 f0       	brcs	.+36     	; 0x5570 <__fixunssfsi+0x2c>
    554c:	b9 2f       	mov	r27, r25
    554e:	99 27       	eor	r25, r25
    5550:	b7 51       	subi	r27, 0x17	; 23
    5552:	a0 f0       	brcs	.+40     	; 0x557c <__fixunssfsi+0x38>
    5554:	d1 f0       	breq	.+52     	; 0x558a <__fixunssfsi+0x46>
    5556:	66 0f       	add	r22, r22
    5558:	77 1f       	adc	r23, r23
    555a:	88 1f       	adc	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	1a f0       	brmi	.+6      	; 0x5566 <__fixunssfsi+0x22>
    5560:	ba 95       	dec	r27
    5562:	c9 f7       	brne	.-14     	; 0x5556 <__fixunssfsi+0x12>
    5564:	12 c0       	rjmp	.+36     	; 0x558a <__fixunssfsi+0x46>
    5566:	b1 30       	cpi	r27, 0x01	; 1
    5568:	81 f0       	breq	.+32     	; 0x558a <__fixunssfsi+0x46>
    556a:	ba d0       	rcall	.+372    	; 0x56e0 <__fp_zero>
    556c:	b1 e0       	ldi	r27, 0x01	; 1
    556e:	08 95       	ret
    5570:	b7 c0       	rjmp	.+366    	; 0x56e0 <__fp_zero>
    5572:	67 2f       	mov	r22, r23
    5574:	78 2f       	mov	r23, r24
    5576:	88 27       	eor	r24, r24
    5578:	b8 5f       	subi	r27, 0xF8	; 248
    557a:	39 f0       	breq	.+14     	; 0x558a <__fixunssfsi+0x46>
    557c:	b9 3f       	cpi	r27, 0xF9	; 249
    557e:	cc f3       	brlt	.-14     	; 0x5572 <__fixunssfsi+0x2e>
    5580:	86 95       	lsr	r24
    5582:	77 95       	ror	r23
    5584:	67 95       	ror	r22
    5586:	b3 95       	inc	r27
    5588:	d9 f7       	brne	.-10     	; 0x5580 <__fixunssfsi+0x3c>
    558a:	3e f4       	brtc	.+14     	; 0x559a <__fixunssfsi+0x56>
    558c:	90 95       	com	r25
    558e:	80 95       	com	r24
    5590:	70 95       	com	r23
    5592:	61 95       	neg	r22
    5594:	7f 4f       	sbci	r23, 0xFF	; 255
    5596:	8f 4f       	sbci	r24, 0xFF	; 255
    5598:	9f 4f       	sbci	r25, 0xFF	; 255
    559a:	08 95       	ret

0000559c <__floatunsisf>:
    559c:	e8 94       	clt
    559e:	09 c0       	rjmp	.+18     	; 0x55b2 <__floatsisf+0x12>

000055a0 <__floatsisf>:
    55a0:	97 fb       	bst	r25, 7
    55a2:	3e f4       	brtc	.+14     	; 0x55b2 <__floatsisf+0x12>
    55a4:	90 95       	com	r25
    55a6:	80 95       	com	r24
    55a8:	70 95       	com	r23
    55aa:	61 95       	neg	r22
    55ac:	7f 4f       	sbci	r23, 0xFF	; 255
    55ae:	8f 4f       	sbci	r24, 0xFF	; 255
    55b0:	9f 4f       	sbci	r25, 0xFF	; 255
    55b2:	99 23       	and	r25, r25
    55b4:	a9 f0       	breq	.+42     	; 0x55e0 <__floatsisf+0x40>
    55b6:	f9 2f       	mov	r31, r25
    55b8:	96 e9       	ldi	r25, 0x96	; 150
    55ba:	bb 27       	eor	r27, r27
    55bc:	93 95       	inc	r25
    55be:	f6 95       	lsr	r31
    55c0:	87 95       	ror	r24
    55c2:	77 95       	ror	r23
    55c4:	67 95       	ror	r22
    55c6:	b7 95       	ror	r27
    55c8:	f1 11       	cpse	r31, r1
    55ca:	f8 cf       	rjmp	.-16     	; 0x55bc <__floatsisf+0x1c>
    55cc:	fa f4       	brpl	.+62     	; 0x560c <__floatsisf+0x6c>
    55ce:	bb 0f       	add	r27, r27
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <__floatsisf+0x36>
    55d2:	60 ff       	sbrs	r22, 0
    55d4:	1b c0       	rjmp	.+54     	; 0x560c <__floatsisf+0x6c>
    55d6:	6f 5f       	subi	r22, 0xFF	; 255
    55d8:	7f 4f       	sbci	r23, 0xFF	; 255
    55da:	8f 4f       	sbci	r24, 0xFF	; 255
    55dc:	9f 4f       	sbci	r25, 0xFF	; 255
    55de:	16 c0       	rjmp	.+44     	; 0x560c <__floatsisf+0x6c>
    55e0:	88 23       	and	r24, r24
    55e2:	11 f0       	breq	.+4      	; 0x55e8 <__floatsisf+0x48>
    55e4:	96 e9       	ldi	r25, 0x96	; 150
    55e6:	11 c0       	rjmp	.+34     	; 0x560a <__floatsisf+0x6a>
    55e8:	77 23       	and	r23, r23
    55ea:	21 f0       	breq	.+8      	; 0x55f4 <__floatsisf+0x54>
    55ec:	9e e8       	ldi	r25, 0x8E	; 142
    55ee:	87 2f       	mov	r24, r23
    55f0:	76 2f       	mov	r23, r22
    55f2:	05 c0       	rjmp	.+10     	; 0x55fe <__floatsisf+0x5e>
    55f4:	66 23       	and	r22, r22
    55f6:	71 f0       	breq	.+28     	; 0x5614 <__floatsisf+0x74>
    55f8:	96 e8       	ldi	r25, 0x86	; 134
    55fa:	86 2f       	mov	r24, r22
    55fc:	70 e0       	ldi	r23, 0x00	; 0
    55fe:	60 e0       	ldi	r22, 0x00	; 0
    5600:	2a f0       	brmi	.+10     	; 0x560c <__floatsisf+0x6c>
    5602:	9a 95       	dec	r25
    5604:	66 0f       	add	r22, r22
    5606:	77 1f       	adc	r23, r23
    5608:	88 1f       	adc	r24, r24
    560a:	da f7       	brpl	.-10     	; 0x5602 <__floatsisf+0x62>
    560c:	88 0f       	add	r24, r24
    560e:	96 95       	lsr	r25
    5610:	87 95       	ror	r24
    5612:	97 f9       	bld	r25, 7
    5614:	08 95       	ret

00005616 <fmax>:
    5616:	99 0f       	add	r25, r25
    5618:	bb 0b       	sbc	r27, r27
    561a:	55 0f       	add	r21, r21
    561c:	aa 0b       	sbc	r26, r26
    561e:	e0 e8       	ldi	r30, 0x80	; 128
    5620:	fe ef       	ldi	r31, 0xFE	; 254
    5622:	16 16       	cp	r1, r22
    5624:	17 06       	cpc	r1, r23
    5626:	e8 07       	cpc	r30, r24
    5628:	f9 07       	cpc	r31, r25
    562a:	70 f0       	brcs	.+28     	; 0x5648 <fmax+0x32>
    562c:	12 16       	cp	r1, r18
    562e:	13 06       	cpc	r1, r19
    5630:	e4 07       	cpc	r30, r20
    5632:	f5 07       	cpc	r31, r21
    5634:	60 f0       	brcs	.+24     	; 0x564e <fmax+0x38>
    5636:	ba 17       	cp	r27, r26
    5638:	3c f0       	brlt	.+14     	; 0x5648 <fmax+0x32>
    563a:	49 f4       	brne	.+18     	; 0x564e <fmax+0x38>
    563c:	62 17       	cp	r22, r18
    563e:	73 07       	cpc	r23, r19
    5640:	84 07       	cpc	r24, r20
    5642:	95 07       	cpc	r25, r21
    5644:	a7 95       	ror	r26
    5646:	1b f4       	brvc	.+6      	; 0x564e <fmax+0x38>
    5648:	b9 01       	movw	r22, r18
    564a:	ca 01       	movw	r24, r20
    564c:	ba 2f       	mov	r27, r26
    564e:	b6 95       	lsr	r27
    5650:	97 95       	ror	r25
    5652:	08 95       	ret

00005654 <__fp_cmp>:
    5654:	99 0f       	add	r25, r25
    5656:	00 08       	sbc	r0, r0
    5658:	55 0f       	add	r21, r21
    565a:	aa 0b       	sbc	r26, r26
    565c:	e0 e8       	ldi	r30, 0x80	; 128
    565e:	fe ef       	ldi	r31, 0xFE	; 254
    5660:	16 16       	cp	r1, r22
    5662:	17 06       	cpc	r1, r23
    5664:	e8 07       	cpc	r30, r24
    5666:	f9 07       	cpc	r31, r25
    5668:	c0 f0       	brcs	.+48     	; 0x569a <__fp_cmp+0x46>
    566a:	12 16       	cp	r1, r18
    566c:	13 06       	cpc	r1, r19
    566e:	e4 07       	cpc	r30, r20
    5670:	f5 07       	cpc	r31, r21
    5672:	98 f0       	brcs	.+38     	; 0x569a <__fp_cmp+0x46>
    5674:	62 1b       	sub	r22, r18
    5676:	73 0b       	sbc	r23, r19
    5678:	84 0b       	sbc	r24, r20
    567a:	95 0b       	sbc	r25, r21
    567c:	39 f4       	brne	.+14     	; 0x568c <__fp_cmp+0x38>
    567e:	0a 26       	eor	r0, r26
    5680:	61 f0       	breq	.+24     	; 0x569a <__fp_cmp+0x46>
    5682:	23 2b       	or	r18, r19
    5684:	24 2b       	or	r18, r20
    5686:	25 2b       	or	r18, r21
    5688:	21 f4       	brne	.+8      	; 0x5692 <__fp_cmp+0x3e>
    568a:	08 95       	ret
    568c:	0a 26       	eor	r0, r26
    568e:	09 f4       	brne	.+2      	; 0x5692 <__fp_cmp+0x3e>
    5690:	a1 40       	sbci	r26, 0x01	; 1
    5692:	a6 95       	lsr	r26
    5694:	8f ef       	ldi	r24, 0xFF	; 255
    5696:	81 1d       	adc	r24, r1
    5698:	81 1d       	adc	r24, r1
    569a:	08 95       	ret

0000569c <__fp_split3>:
    569c:	57 fd       	sbrc	r21, 7
    569e:	90 58       	subi	r25, 0x80	; 128
    56a0:	44 0f       	add	r20, r20
    56a2:	55 1f       	adc	r21, r21
    56a4:	59 f0       	breq	.+22     	; 0x56bc <__fp_splitA+0x10>
    56a6:	5f 3f       	cpi	r21, 0xFF	; 255
    56a8:	71 f0       	breq	.+28     	; 0x56c6 <__fp_splitA+0x1a>
    56aa:	47 95       	ror	r20

000056ac <__fp_splitA>:
    56ac:	88 0f       	add	r24, r24
    56ae:	97 fb       	bst	r25, 7
    56b0:	99 1f       	adc	r25, r25
    56b2:	61 f0       	breq	.+24     	; 0x56cc <__fp_splitA+0x20>
    56b4:	9f 3f       	cpi	r25, 0xFF	; 255
    56b6:	79 f0       	breq	.+30     	; 0x56d6 <__fp_splitA+0x2a>
    56b8:	87 95       	ror	r24
    56ba:	08 95       	ret
    56bc:	12 16       	cp	r1, r18
    56be:	13 06       	cpc	r1, r19
    56c0:	14 06       	cpc	r1, r20
    56c2:	55 1f       	adc	r21, r21
    56c4:	f2 cf       	rjmp	.-28     	; 0x56aa <__fp_split3+0xe>
    56c6:	46 95       	lsr	r20
    56c8:	f1 df       	rcall	.-30     	; 0x56ac <__fp_splitA>
    56ca:	08 c0       	rjmp	.+16     	; 0x56dc <__fp_splitA+0x30>
    56cc:	16 16       	cp	r1, r22
    56ce:	17 06       	cpc	r1, r23
    56d0:	18 06       	cpc	r1, r24
    56d2:	99 1f       	adc	r25, r25
    56d4:	f1 cf       	rjmp	.-30     	; 0x56b8 <__fp_splitA+0xc>
    56d6:	86 95       	lsr	r24
    56d8:	71 05       	cpc	r23, r1
    56da:	61 05       	cpc	r22, r1
    56dc:	08 94       	sec
    56de:	08 95       	ret

000056e0 <__fp_zero>:
    56e0:	e8 94       	clt

000056e2 <__fp_szero>:
    56e2:	bb 27       	eor	r27, r27
    56e4:	66 27       	eor	r22, r22
    56e6:	77 27       	eor	r23, r23
    56e8:	cb 01       	movw	r24, r22
    56ea:	97 f9       	bld	r25, 7
    56ec:	08 95       	ret

000056ee <__gesf2>:
    56ee:	b2 df       	rcall	.-156    	; 0x5654 <__fp_cmp>
    56f0:	08 f4       	brcc	.+2      	; 0x56f4 <__gesf2+0x6>
    56f2:	8f ef       	ldi	r24, 0xFF	; 255
    56f4:	08 95       	ret

000056f6 <__mulsi3>:
    56f6:	62 9f       	mul	r22, r18
    56f8:	d0 01       	movw	r26, r0
    56fa:	73 9f       	mul	r23, r19
    56fc:	f0 01       	movw	r30, r0
    56fe:	82 9f       	mul	r24, r18
    5700:	e0 0d       	add	r30, r0
    5702:	f1 1d       	adc	r31, r1
    5704:	64 9f       	mul	r22, r20
    5706:	e0 0d       	add	r30, r0
    5708:	f1 1d       	adc	r31, r1
    570a:	92 9f       	mul	r25, r18
    570c:	f0 0d       	add	r31, r0
    570e:	83 9f       	mul	r24, r19
    5710:	f0 0d       	add	r31, r0
    5712:	74 9f       	mul	r23, r20
    5714:	f0 0d       	add	r31, r0
    5716:	65 9f       	mul	r22, r21
    5718:	f0 0d       	add	r31, r0
    571a:	99 27       	eor	r25, r25
    571c:	72 9f       	mul	r23, r18
    571e:	b0 0d       	add	r27, r0
    5720:	e1 1d       	adc	r30, r1
    5722:	f9 1f       	adc	r31, r25
    5724:	63 9f       	mul	r22, r19
    5726:	b0 0d       	add	r27, r0
    5728:	e1 1d       	adc	r30, r1
    572a:	f9 1f       	adc	r31, r25
    572c:	bd 01       	movw	r22, r26
    572e:	cf 01       	movw	r24, r30
    5730:	11 24       	eor	r1, r1
    5732:	08 95       	ret

00005734 <__udivmodqi4>:
    5734:	99 1b       	sub	r25, r25
    5736:	79 e0       	ldi	r23, 0x09	; 9
    5738:	04 c0       	rjmp	.+8      	; 0x5742 <__udivmodqi4_ep>

0000573a <__udivmodqi4_loop>:
    573a:	99 1f       	adc	r25, r25
    573c:	96 17       	cp	r25, r22
    573e:	08 f0       	brcs	.+2      	; 0x5742 <__udivmodqi4_ep>
    5740:	96 1b       	sub	r25, r22

00005742 <__udivmodqi4_ep>:
    5742:	88 1f       	adc	r24, r24
    5744:	7a 95       	dec	r23
    5746:	c9 f7       	brne	.-14     	; 0x573a <__udivmodqi4_loop>
    5748:	80 95       	com	r24
    574a:	08 95       	ret

0000574c <__udivmodhi4>:
    574c:	aa 1b       	sub	r26, r26
    574e:	bb 1b       	sub	r27, r27
    5750:	51 e1       	ldi	r21, 0x11	; 17
    5752:	07 c0       	rjmp	.+14     	; 0x5762 <__udivmodhi4_ep>

00005754 <__udivmodhi4_loop>:
    5754:	aa 1f       	adc	r26, r26
    5756:	bb 1f       	adc	r27, r27
    5758:	a6 17       	cp	r26, r22
    575a:	b7 07       	cpc	r27, r23
    575c:	10 f0       	brcs	.+4      	; 0x5762 <__udivmodhi4_ep>
    575e:	a6 1b       	sub	r26, r22
    5760:	b7 0b       	sbc	r27, r23

00005762 <__udivmodhi4_ep>:
    5762:	88 1f       	adc	r24, r24
    5764:	99 1f       	adc	r25, r25
    5766:	5a 95       	dec	r21
    5768:	a9 f7       	brne	.-22     	; 0x5754 <__udivmodhi4_loop>
    576a:	80 95       	com	r24
    576c:	90 95       	com	r25
    576e:	bc 01       	movw	r22, r24
    5770:	cd 01       	movw	r24, r26
    5772:	08 95       	ret

00005774 <__divmodhi4>:
    5774:	97 fb       	bst	r25, 7
    5776:	09 2e       	mov	r0, r25
    5778:	07 26       	eor	r0, r23
    577a:	0a d0       	rcall	.+20     	; 0x5790 <__divmodhi4_neg1>
    577c:	77 fd       	sbrc	r23, 7
    577e:	04 d0       	rcall	.+8      	; 0x5788 <__divmodhi4_neg2>
    5780:	e5 df       	rcall	.-54     	; 0x574c <__udivmodhi4>
    5782:	06 d0       	rcall	.+12     	; 0x5790 <__divmodhi4_neg1>
    5784:	00 20       	and	r0, r0
    5786:	1a f4       	brpl	.+6      	; 0x578e <__divmodhi4_exit>

00005788 <__divmodhi4_neg2>:
    5788:	70 95       	com	r23
    578a:	61 95       	neg	r22
    578c:	7f 4f       	sbci	r23, 0xFF	; 255

0000578e <__divmodhi4_exit>:
    578e:	08 95       	ret

00005790 <__divmodhi4_neg1>:
    5790:	f6 f7       	brtc	.-4      	; 0x578e <__divmodhi4_exit>
    5792:	90 95       	com	r25
    5794:	81 95       	neg	r24
    5796:	9f 4f       	sbci	r25, 0xFF	; 255
    5798:	08 95       	ret

0000579a <__udivmodsi4>:
    579a:	a1 e2       	ldi	r26, 0x21	; 33
    579c:	1a 2e       	mov	r1, r26
    579e:	aa 1b       	sub	r26, r26
    57a0:	bb 1b       	sub	r27, r27
    57a2:	fd 01       	movw	r30, r26
    57a4:	0d c0       	rjmp	.+26     	; 0x57c0 <__udivmodsi4_ep>

000057a6 <__udivmodsi4_loop>:
    57a6:	aa 1f       	adc	r26, r26
    57a8:	bb 1f       	adc	r27, r27
    57aa:	ee 1f       	adc	r30, r30
    57ac:	ff 1f       	adc	r31, r31
    57ae:	a2 17       	cp	r26, r18
    57b0:	b3 07       	cpc	r27, r19
    57b2:	e4 07       	cpc	r30, r20
    57b4:	f5 07       	cpc	r31, r21
    57b6:	20 f0       	brcs	.+8      	; 0x57c0 <__udivmodsi4_ep>
    57b8:	a2 1b       	sub	r26, r18
    57ba:	b3 0b       	sbc	r27, r19
    57bc:	e4 0b       	sbc	r30, r20
    57be:	f5 0b       	sbc	r31, r21

000057c0 <__udivmodsi4_ep>:
    57c0:	66 1f       	adc	r22, r22
    57c2:	77 1f       	adc	r23, r23
    57c4:	88 1f       	adc	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	1a 94       	dec	r1
    57ca:	69 f7       	brne	.-38     	; 0x57a6 <__udivmodsi4_loop>
    57cc:	60 95       	com	r22
    57ce:	70 95       	com	r23
    57d0:	80 95       	com	r24
    57d2:	90 95       	com	r25
    57d4:	9b 01       	movw	r18, r22
    57d6:	ac 01       	movw	r20, r24
    57d8:	bd 01       	movw	r22, r26
    57da:	cf 01       	movw	r24, r30
    57dc:	08 95       	ret

000057de <__tablejump2__>:
    57de:	ee 0f       	add	r30, r30
    57e0:	ff 1f       	adc	r31, r31

000057e2 <__tablejump__>:
    57e2:	05 90       	lpm	r0, Z+
    57e4:	f4 91       	lpm	r31, Z+
    57e6:	e0 2d       	mov	r30, r0
    57e8:	09 94       	ijmp

000057ea <_exit>:
    57ea:	f8 94       	cli

000057ec <__stop_program>:
    57ec:	ff cf       	rjmp	.-2      	; 0x57ec <__stop_program>
