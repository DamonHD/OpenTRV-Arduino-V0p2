
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build1131181819854712286.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000055de  00005672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000210  00800126  00800126  00005698  2**0
                  ALLOC
  3 .debug_aranges 00000ce8  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001df3  00000000  00000000  00006380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f972  00000000  00000000  00008173  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003587  00000000  00000000  00017ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b41b  00000000  00000000  0001b06c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001670  00000000  00000000  00026488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000469d  00000000  00000000  00027af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007140  00000000  00000000  0002c195  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0001f00d  00000000  00000000  000332d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d98  00000000  00000000  000522e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

// Returns true if system is in 'learn'/smart mode.
// If in 'smart' mode can anticipate user demand to pre-warm rooms, maintain customary temperatures, etc.
// Currently true if any simple schedule is set.
// TODO: maybe only if schedule characteristic of having been set by the learn button.
bool inSmartMode()
       0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
// Sleep briefly in as lower-power mode as possible until the specified (watchdog) time expires, or another interrupt.
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
//   * allowPrematureWakeup if true then if woken before watchdog fires return false; default false
// Returns false if the watchdog timer did not go off.
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
bool nap(int_fast8_t watchdogSleep, bool allowPrematureWakeup)
       8:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
       c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
    }
  }

// Returns true if a simple schedule is set, false otherwise.
// This implementation just checks for a valid 'on' time.
bool isSimpleScheduleSet()
      10:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
      14:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      18:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_6>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      1c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      20:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      24:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_9>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      28:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      2c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      30:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      34:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      38:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      3c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      40:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <__vector_16>
      44:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      48:	0c 94 fd 24 	jmp	0x49fa	; 0x49fa <__vector_18>
      4c:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__vector_19>
      50:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      54:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_21>
      58:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      5c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>
      60:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__vector_24>
      64:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
      98:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
      a8:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

000000b6 <FHT8VCallForHeatPoll()::__c>:
      b6:	52 58 20 46 49 46 4f 20 70 72 6f 62 6c 65 6d 00     RX FIFO problem.

000000c6 <FHT8VCallForHeatPoll()::__c>:
      c6:	42 61 64 20 52 58 20 66 72 61 6d 65 00              Bad RX frame.

000000d3 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
      d3:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
      e3:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

000000ef <FHT8VPollSyncAndTX_Next(bool)::__c>:
      ef:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000f8 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      f8:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
     108:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
     118:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

00000123 <doSync(bool)::__c>:
     123:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

00000134 <doSync(bool)::__c>:
     134:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000142 <FHT8VPollSyncAndTX_First(bool)::__c>:
     142:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

0000014b <FHT8VPollSyncAndTX_First(bool)::__c>:
     14b:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     15b:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

00000165 <RFM22CheckConnected()::__c>:
     165:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

00000176 <RFM22CheckConnected()::__c>:
     176:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     186:	6e 3a 20 00                                         n: .

0000018a <pollCLI(unsigned char)::__c>:
     18a:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

00000198 <pollCLI(unsigned char)::__c>:
     198:	5a 61 70 70 65 64 2e 00                             Zapped..

000001a0 <pollCLI(unsigned char)::__c>:
     1a0:	53 6d 61 72 74 20 77 61 72 6d 69 6e 67 3a 20 00     Smart warming: .

000001b0 <pollCLI(unsigned char)::__c>:
     1b0:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

000001be <pollCLI(unsigned char)::__c>:
     1be:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

000001cd <dumpCLIUsage()::__c>:
     1cd:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

000001d7 <dumpCLIUsage()::__c>:
     1d7:	73 65 74 20 57 61 72 6d 20 74 65 6d 70 20 43 43     set Warm temp CC
	...

000001e8 <dumpCLIUsage()::__c>:
     1e8:	57 20 43 43 00                                      W CC.

000001ed <dumpCLIUsage()::__c>:
     1ed:	57 61 72 6d 00                                      Warm.

000001f2 <dumpCLIUsage()::__c>:
     1f2:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000001ff <dumpCLIUsage()::__c>:
     1ff:	54 20 48 48 20 4d 4d 00                             T HH MM.

00000207 <dumpCLIUsage()::__c>:
     207:	73 68 6f 77 20 53 74 61 74 75 73 20 61 6e 64 20     show Status and 
     217:	73 6d 61 72 74 20 77 61 72 6d 69 6e 67 20 66 6f     smart warming fo
     227:	72 20 6e 65 78 74 20 32 34 68 00                    r next 24h.

00000232 <dumpCLIUsage()::__c>:
     232:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     242:	65 74 20 4e 00                                      et N.

00000247 <dumpCLIUsage()::__c>:
     247:	52 20 4e 00                                         R N.

0000024b <dumpCLIUsage()::__c>:
     24b:	51 75 69 63 6b 20 48 65 61 74 20 28 42 41 4b 45     Quick Heat (BAKE
     25b:	29 00                                               ).

0000025d <dumpCLIUsage()::__c>:
     25d:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     26d:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     27d:	48 48 20 4d 4d 20 66 6f 72 20 4c 4c 20 68 6f 75     HH MM for LL hou
     28d:	72 73 00                                            rs.

00000290 <dumpCLIUsage()::__c>:
     290:	50 20 48 48 20 4d 4d 20 4c 4c 00                    P HH MM LL.

0000029b <dumpCLIUsage()::__c>:
     29b:	4c 65 61 72 6e 20 74 6f 20 77 61 72 6d 20 65 76     Learn to warm ev
     2ab:	65 72 79 20 32 34 68 20 66 72 6f 6d 20 6e 6f 77     ery 24h from now
     2bb:	2c 20 65 6c 73 65 20 63 61 6e 63 65 6c 20 73 63     , else cancel sc
     2cb:	68 65 64 75 6c 65 20 69 66 20 69 6e 20 66 72 6f     hedule if in fro
     2db:	73 74 20 6d 6f 64 65 00                             st mode.

000002e3 <dumpCLIUsage()::__c>:
     2e3:	73 65 74 20 77 69 72 65 6c 65 73 73 20 46 48 54     set wireless FHT
     2f3:	38 56 20 48 6f 75 73 65 20 63 6f 64 65 73 20 31     8V House codes 1
     303:	26 32 00                                            &2.

00000306 <dumpCLIUsage()::__c>:
     306:	48 20 48 31 20 48 32 00                             H H1 H2.

0000030e <dumpCLIUsage()::__c>:
     30e:	63 6c 65 61 72 20 77 69 72 65 6c 65 73 73 20 46     clear wireless F
     31e:	48 54 38 56 20 48 6f 75 73 65 20 63 6f 64 65 73     HT8V House codes
	...

0000032f <dumpCLIUsage()::__c>:
     32f:	48 00                                               H.

00000331 <dumpCLIUsage()::__c>:
     331:	73 65 74 20 46 72 6f 73 74 20 74 65 6d 70 20 43     set Frost temp C
     341:	43 00                                               C.

00000343 <dumpCLIUsage()::__c>:
     343:	46 20 43 43 00                                      F CC.

00000348 <dumpCLIUsage()::__c>:
     348:	46 72 6f 73 74 00                                   Frost.

0000034e <dumpCLIUsage()::__c>:
     34e:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

00000357 <dumpCLIUsage()::__c>:
     357:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000368 <dumpCLIUsage()::__c>:
     368:	44 20 4e 00                                         D N.

0000036c <dumpCLIUsage()::__c>:
     36c:	43 65 6e 74 72 61 6c 20 68 75 62 3a 20 6d 69 6e     Central hub: min
     37c:	69 6d 75 6d 20 4d 20 6d 69 6e 73 20 6f 6e 2c 20     imum M mins on, 
     38c:	30 20 64 69 73 61 62 6c 65 64 00                    0 disabled.

00000397 <dumpCLIUsage()::__c>:
     397:	43 20 4d 00                                         C M.

0000039b <dumpCLIUsage()::__c>:
     39b:	42 69 61 73 20 45 20 28 45 63 6f 29 20 6f 72 20     Bias E (Eco) or 
     3ab:	43 20 28 43 6f 6d 66 6f 72 74 29 00                 C (Comfort).

000003b7 <dumpCLIUsage()::__c>:
     3b7:	42 20 58 00                                         B X.

000003bb <dumpCLIUsage()::__c>:
     3bb:	74 68 69 73 20 68 65 6c 70 00                       this help.

000003c5 <dumpCLIUsage()::__c>:
     3c5:	43 4c 49 20 75 73 61 67 65 3a 00                    CLI usage:.

000003d0 <InvalidIgnored()::__c>:
     3d0:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     3e0:	2e 00                                               ..

000003e2 <serialStatusReport()::__c>:
     3e2:	48 43 00                                            HC.

000003e5 <loop::__c>:
     3e5:	45 52 52 4f 52 3a 20 6c 6f 6f 70 28 29 20 6f 76     ERROR: loop() ov
     3f5:	65 72 72 75 6e 21 00                                errun!.

000003fc <loop::__c>:
     3fc:	42 6f 69 6c 65 72 20 6f 6e 2c 20 6d 69 6e 73 20     Boiler on, mins 
     40c:	6c 65 66 74 3a 20 00                                left: .

00000413 <loop::__c>:
     413:	45 78 74 72 61 20 54 58 00                          Extra TX.

0000041c <loop::__c>:
     41c:	43 61 6c 6c 20 66 6f 72 20 68 65 61 74 20 66 72     Call for heat fr
     42c:	6f 6d 20 00                                         om .

00000430 <setup::__c>:
     430:	73 6c 6f 77 20 52 54 43 20 63 6c 6f 63 6b 20 4f     slow RTC clock O
     440:	4b 00                                               K.

00000442 <setup::__c>:
     442:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     452:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     462:	75 6e 6e 69 6e 67 21 00                             unning!.

0000046a <setup::__c>:
     46a:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     47a:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     48a:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

00000497 <setup::__c>:
     497:	6c 69 67 68 74 2f 74 65 6d 70 20 4f 4b 00           light/temp OK.

000004a5 <setup::__c>:
     4a5:	74 65 6d 70 3a 20 00                                temp: .

000004ac <setup::__c>:
     4ac:	6c 69 67 68 74 3a 20 00                             light: .

000004b4 <setup::__c>:
     4b4:	47 61 74 68 65 72 69 6e 67 20 69 6e 69 74 69 61     Gathering initia
     4c4:	6c 20 69 6e 70 75 74 73 20 61 6e 64 20 63 6f 6d     l inputs and com
     4d4:	70 75 74 69 6e 67 20 74 61 72 67 65 74 2f 64 65     puting target/de
     4e4:	6d 61 6e 64 2e 2e 2e 00                             mand....

000004ec <setup::__c>:
     4ec:	69 6e 74 65 72 6e 61 6c 20 73 65 6e 73 6f 72 73     internal sensors
     4fc:	20 4f 4b 2c 20 6e 65 78 74 20 6c 69 67 68 74 2f      OK, next light/
     50c:	74 65 6d 70 00                                      temp.

00000511 <setup::__c>:
     511:	43 20 2f 20 00                                      C / .

00000516 <setup::__c>:
     516:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

00000521 <setup::__c>:
     521:	6d 56 00                                            mV.

00000524 <setup::__c>:
     524:	56 63 63 3a 20 00                                   Vcc: .

0000052a <setup::__c>:
     52a:	52 46 4d 32 33 20 4f 4b 00                          RFM23 OK.

00000533 <setup::__c>:
     533:	61 62 6f 75 74 20 74 6f 20 74 65 73 74 20 52 46     about to test RF
     543:	4d 32 33 00                                         M23.

00000547 <setup::__c>:
     547:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000552 <setup::__c>:
     552:	52 65 73 65 74 20 63 6f 75 6e 74 3a 20 00           Reset count: .

00000560 <setup::__c>:
     560:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     570:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

0000057f <setup::__c>:
     57f:	42 6f 61 72 64 20 56 30 2e 32 2c 20 52 45 56 00     Board V0.2, REV.

0000058f <setup::__c>:
     58f:	0d 0a 4f 70 65 6e 54 52 56 20 62 75 69 6c 74 20     ..OpenTRV built 
     59f:	4a 61 6e 20 31 33 20 32 30 31 34 20 31 37 3a 33     Jan 13 2014 17:3
     5af:	33 3a 30 33 20 62 6f 6f 74 69 6e 67 2e 2e 2e 00     3:03 booting....

000005bf <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5bf:	3a 20 00                                            : .

000005c2 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5c2:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000005cc <port_to_mode_PGM>:
     5cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005d6 <port_to_output_PGM>:
     5d6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005e0 <port_to_input_PGM>:
     5e0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000005ea <digital_pin_to_port_PGM>:
     5ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     5fa:	03 03 03 03                                         ....

000005fe <digital_pin_to_bit_mask_PGM>:
     5fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     60e:	04 08 10 20                                         ... 

00000612 <digital_pin_to_timer_PGM>:
     612:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     622:	00 00 00 00                                         ....

00000626 <__ctors_start>:
     626:	e1 10       	cpse	r14, r1
     628:	56 21       	and	r21, r6
     62a:	14 27       	eor	r17, r20

0000062c <__ctors_end>:
     62c:	11 24       	eor	r1, r1
     62e:	1f be       	out	0x3f, r1	; 63
     630:	cf ef       	ldi	r28, 0xFF	; 255
     632:	d8 e0       	ldi	r29, 0x08	; 8
     634:	de bf       	out	0x3e, r29	; 62
     636:	cd bf       	out	0x3d, r28	; 61

00000638 <__do_copy_data>:
     638:	11 e0       	ldi	r17, 0x01	; 1
     63a:	a0 e0       	ldi	r26, 0x00	; 0
     63c:	b1 e0       	ldi	r27, 0x01	; 1
     63e:	ee ed       	ldi	r30, 0xDE	; 222
     640:	f5 e5       	ldi	r31, 0x55	; 85
     642:	02 c0       	rjmp	.+4      	; 0x648 <.do_copy_data_start>

00000644 <.do_copy_data_loop>:
     644:	05 90       	lpm	r0, Z+
     646:	0d 92       	st	X+, r0

00000648 <.do_copy_data_start>:
     648:	a6 32       	cpi	r26, 0x26	; 38
     64a:	b1 07       	cpc	r27, r17
     64c:	d9 f7       	brne	.-10     	; 0x644 <.do_copy_data_loop>

0000064e <__do_clear_bss>:
     64e:	13 e0       	ldi	r17, 0x03	; 3
     650:	a6 e2       	ldi	r26, 0x26	; 38
     652:	b1 e0       	ldi	r27, 0x01	; 1
     654:	01 c0       	rjmp	.+2      	; 0x658 <.do_clear_bss_start>

00000656 <.do_clear_bss_loop>:
     656:	1d 92       	st	X+, r1

00000658 <.do_clear_bss_start>:
     658:	a6 33       	cpi	r26, 0x36	; 54
     65a:	b1 07       	cpc	r27, r17
     65c:	e1 f7       	brne	.-8      	; 0x656 <.do_clear_bss_loop>

0000065e <__do_global_ctors>:
     65e:	16 e0       	ldi	r17, 0x06	; 6
     660:	cc e2       	ldi	r28, 0x2C	; 44
     662:	d6 e0       	ldi	r29, 0x06	; 6
     664:	04 c0       	rjmp	.+8      	; 0x66e <.do_global_ctors_start>

00000666 <.do_global_ctors_loop>:
     666:	22 97       	sbiw	r28, 0x02	; 2
     668:	fe 01       	movw	r30, r28
     66a:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <__tablejump__>

0000066e <.do_global_ctors_start>:
     66e:	c6 32       	cpi	r28, 0x26	; 38
     670:	d1 07       	cpc	r29, r17
     672:	c9 f7       	brne	.-14     	; 0x666 <.do_global_ctors_loop>
     674:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <main>
     678:	0c 94 ed 2a 	jmp	0x55da	; 0x55da <_exit>

0000067c <__bad_interrupt>:
     67c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000680 <abort>:
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	f8 94       	cli
     686:	0c 94 ed 2a 	jmp	0x55da	; 0x55da <_exit>

0000068a <atoi>:
     68a:	fc 01       	movw	r30, r24
     68c:	88 27       	eor	r24, r24
     68e:	99 27       	eor	r25, r25
     690:	e8 94       	clt
     692:	21 91       	ld	r18, Z+
     694:	20 32       	cpi	r18, 0x20	; 32
     696:	e9 f3       	breq	.-6      	; 0x692 <atoi+0x8>
     698:	29 30       	cpi	r18, 0x09	; 9
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <atoi+0x16>
     69c:	2e 30       	cpi	r18, 0x0E	; 14
     69e:	c8 f3       	brcs	.-14     	; 0x692 <atoi+0x8>
     6a0:	2b 32       	cpi	r18, 0x2B	; 43
     6a2:	41 f0       	breq	.+16     	; 0x6b4 <atoi+0x2a>
     6a4:	2d 32       	cpi	r18, 0x2D	; 45
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <atoi+0x2c>
     6a8:	68 94       	set
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <atoi+0x2a>
     6ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulhi_const_10>
     6b0:	82 0f       	add	r24, r18
     6b2:	91 1d       	adc	r25, r1
     6b4:	21 91       	ld	r18, Z+
     6b6:	20 53       	subi	r18, 0x30	; 48
     6b8:	2a 30       	cpi	r18, 0x0A	; 10
     6ba:	c0 f3       	brcs	.-16     	; 0x6ac <atoi+0x22>
     6bc:	1e f4       	brtc	.+6      	; 0x6c4 <atoi+0x3a>
     6be:	90 95       	com	r25
     6c0:	81 95       	neg	r24
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	08 95       	ret

000006c6 <strlen_P>:
     6c6:	fc 01       	movw	r30, r24
     6c8:	05 90       	lpm	r0, Z+
     6ca:	00 20       	and	r0, r0
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <strlen_P+0x2>
     6ce:	80 95       	com	r24
     6d0:	90 95       	com	r25
     6d2:	8e 0f       	add	r24, r30
     6d4:	9f 1f       	adc	r25, r31
     6d6:	08 95       	ret

000006d8 <strtok_r>:
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	31 f4       	brne	.+12     	; 0x6e8 <strtok_r+0x10>
     6dc:	da 01       	movw	r26, r20
     6de:	8d 91       	ld	r24, X+
     6e0:	9c 91       	ld	r25, X
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <strtok_r+0x10>
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <strtok_r+0x2c>
     6e8:	dc 01       	movw	r26, r24
     6ea:	fb 01       	movw	r30, r22
     6ec:	3d 91       	ld	r19, X+
     6ee:	21 91       	ld	r18, Z+
     6f0:	22 23       	and	r18, r18
     6f2:	19 f0       	breq	.+6      	; 0x6fa <strtok_r+0x22>
     6f4:	32 17       	cp	r19, r18
     6f6:	c9 f3       	breq	.-14     	; 0x6ea <strtok_r+0x12>
     6f8:	fa cf       	rjmp	.-12     	; 0x6ee <strtok_r+0x16>
     6fa:	33 23       	and	r19, r19
     6fc:	31 f4       	brne	.+12     	; 0x70a <strtok_r+0x32>
     6fe:	da 01       	movw	r26, r20
     700:	1d 92       	st	X+, r1
     702:	1c 92       	st	X, r1
     704:	88 27       	eor	r24, r24
     706:	99 27       	eor	r25, r25
     708:	08 95       	ret
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	fb 01       	movw	r30, r22
     712:	3d 91       	ld	r19, X+
     714:	21 91       	ld	r18, Z+
     716:	32 17       	cp	r19, r18
     718:	71 f4       	brne	.+28     	; 0x736 <strtok_r+0x5e>
     71a:	33 23       	and	r19, r19
     71c:	21 f4       	brne	.+8      	; 0x726 <strtok_r+0x4e>
     71e:	88 27       	eor	r24, r24
     720:	99 27       	eor	r25, r25
     722:	11 97       	sbiw	r26, 0x01	; 1
     724:	02 c0       	rjmp	.+4      	; 0x72a <strtok_r+0x52>
     726:	1e 92       	st	-X, r1
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	fa 01       	movw	r30, r20
     72c:	a1 93       	st	Z+, r26
     72e:	b0 83       	st	Z, r27
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	08 95       	ret
     736:	22 23       	and	r18, r18
     738:	69 f7       	brne	.-38     	; 0x714 <strtok_r+0x3c>
     73a:	ea cf       	rjmp	.-44     	; 0x710 <strtok_r+0x38>

0000073c <strupr>:
     73c:	dc 01       	movw	r26, r24
     73e:	6c 91       	ld	r22, X
     740:	61 56       	subi	r22, 0x61	; 97
     742:	6a 31       	cpi	r22, 0x1A	; 26
     744:	08 f0       	brcs	.+2      	; 0x748 <strupr+0xc>
     746:	60 5e       	subi	r22, 0xE0	; 224
     748:	6f 5b       	subi	r22, 0xBF	; 191
     74a:	6d 93       	st	X+, r22
     74c:	c1 f7       	brne	.-16     	; 0x73e <strupr+0x2>
     74e:	08 95       	ret

00000750 <__eerd_word>:
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	7b 01       	movw	r14, r22
     75c:	8c 01       	movw	r16, r24
     75e:	fb 01       	movw	r30, r22
     760:	09 95       	icall
     762:	d8 2e       	mov	r13, r24
     764:	c8 01       	movw	r24, r16
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	f7 01       	movw	r30, r14
     76a:	09 95       	icall
     76c:	98 2f       	mov	r25, r24
     76e:	8d 2d       	mov	r24, r13
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	08 95       	ret

0000077c <__eewr_word>:
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	d7 2e       	mov	r13, r23
     788:	7a 01       	movw	r14, r20
     78a:	8c 01       	movw	r16, r24
     78c:	fa 01       	movw	r30, r20
     78e:	09 95       	icall
     790:	c8 01       	movw	r24, r16
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	6d 2d       	mov	r22, r13
     796:	f7 01       	movw	r30, r14
     798:	09 95       	icall
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	08 95       	ret

000007a6 <__mulhi_const_10>:
     7a6:	7a e0       	ldi	r23, 0x0A	; 10
     7a8:	97 9f       	mul	r25, r23
     7aa:	90 2d       	mov	r25, r0
     7ac:	87 9f       	mul	r24, r23
     7ae:	80 2d       	mov	r24, r0
     7b0:	91 0d       	add	r25, r1
     7b2:	11 24       	eor	r1, r1
     7b4:	08 95       	ret

000007b6 <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     7b6:	80 91 26 01 	lds	r24, 0x0126
     7ba:	08 95       	ret

000007bc <getAmbientLight()>:

// Ambient light levels in range [0,1023].
static int ambientLightLevel;

// Return previously-read (with readAmbientLight()) ambient light level in range [0,1023]; very fast.
int getAmbientLight() { return(ambientLightLevel); }
     7bc:	80 91 27 01 	lds	r24, 0x0127
     7c0:	90 91 28 01 	lds	r25, 0x0128
     7c4:	08 95       	ret

000007c6 <readAmbientLight()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
int readAmbientLight()
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(true);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <power_intermittent_peripherals_enable(bool)>

  //analogReference(DEFAULT); // Force use of Vcc as reference.

  const int al = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <analogueNoiseReducedRead(int, unsigned char)>
     7da:	ec 01       	movw	r28, r24
  DEBUG_SERIAL_PRINT(ambientLightLevel);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Adjust room-lit flag, with hysteresis.
  if(al < LDR_THR_LOW)
     7dc:	80 3a       	cpi	r24, 0xA0	; 160
     7de:	91 05       	cpc	r25, r1
     7e0:	1c f4       	brge	.+6      	; 0x7e8 <readAmbientLight()+0x22>
    { isRoomLitFlag = false; }
     7e2:	10 92 26 01 	sts	0x0126, r1
     7e6:	13 c0       	rjmp	.+38     	; 0x80e <readAmbientLight()+0x48>
  else if(al > LDR_THR_HIGH)
     7e8:	89 3c       	cpi	r24, 0xC9	; 201
     7ea:	91 05       	cpc	r25, r1
     7ec:	84 f0       	brlt	.+32     	; 0x80e <readAmbientLight()+0x48>
    {
    // Take sharp transition from dark to light as possible indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (ambientLightLevel < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
     7ee:	80 91 26 01 	lds	r24, 0x0126
     7f2:	88 23       	and	r24, r24
     7f4:	49 f4       	brne	.+18     	; 0x808 <readAmbientLight()+0x42>
     7f6:	80 91 27 01 	lds	r24, 0x0127
     7fa:	90 91 28 01 	lds	r25, 0x0128
     7fe:	80 3a       	cpi	r24, 0xA0	; 160
     800:	91 05       	cpc	r25, r1
     802:	14 f4       	brge	.+4      	; 0x808 <readAmbientLight()+0x42>
     804:	0e 94 57 07 	call	0xeae	; 0xeae <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 26 01 	sts	0x0126, r24
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Store new value.
  ambientLightLevel = al;
     80e:	d0 93 28 01 	sts	0x0128, r29
     812:	c0 93 27 01 	sts	0x0127, r28

  power_intermittent_peripherals_disable();
     816:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <power_intermittent_peripherals_disable()>

  return(al);
  }
     81a:	ce 01       	movw	r24, r28
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <getTRVPercentOpen()>:
#include "Temperature_Sensor.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     822:	80 91 31 01 	lds	r24, 0x0131
     826:	08 95       	ret

00000828 <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     828:	80 91 30 01 	lds	r24, 0x0130
     82c:	08 95       	ret

0000082e <getFROSTTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     82e:	f9 99       	sbic	0x1f, 1	; 31
     830:	fe cf       	rjmp	.-4      	; 0x82e <getFROSTTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     832:	8e e0       	ldi	r24, 0x0E	; 14
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	92 bd       	out	0x22, r25	; 34
     838:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     83a:	f8 9a       	sbi	0x1f, 0	; 31
     83c:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     83e:	89 2f       	mov	r24, r25
     840:	85 50       	subi	r24, 0x05	; 5
     842:	8b 35       	cpi	r24, 0x5B	; 91
     844:	08 f0       	brcs	.+2      	; 0x848 <getFROSTTargetC()+0x1a>
     846:	95 e0       	ldi	r25, 0x05	; 5
  // Return valid persisted value.
  return(stored);
  }
     848:	89 2f       	mov	r24, r25
     84a:	08 95       	ret

0000084c <getWARMTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     84c:	f9 99       	sbic	0x1f, 1	; 31
     84e:	fe cf       	rjmp	.-4      	; 0x84c <getWARMTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     850:	8f e0       	ldi	r24, 0x0F	; 15
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	92 bd       	out	0x22, r25	; 34
     856:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     858:	f8 9a       	sbi	0x1f, 0	; 31
     85a:	20 b5       	in	r18, 0x20	; 32
uint8_t getWARMTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(fnmax((uint8_t)WARM, getFROSTTargetC())); }
     85c:	82 2f       	mov	r24, r18
     85e:	85 50       	subi	r24, 0x05	; 5
     860:	8b 35       	cpi	r24, 0x5B	; 91
     862:	98 f0       	brcs	.+38     	; 0x88a <getWARMTargetC()+0x3e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     864:	f9 99       	sbic	0x1f, 1	; 31
     866:	fe cf       	rjmp	.-4      	; 0x864 <getWARMTargetC()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     868:	8e e0       	ldi	r24, 0x0E	; 14
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	92 bd       	out	0x22, r25	; 34
     86e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     870:	f8 9a       	sbi	0x1f, 0	; 31
     872:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     874:	89 2f       	mov	r24, r25
     876:	85 50       	subi	r24, 0x05	; 5
     878:	8b 35       	cpi	r24, 0x5B	; 91
     87a:	10 f0       	brcs	.+4      	; 0x880 <getWARMTargetC()+0x34>
     87c:	81 e1       	ldi	r24, 0x11	; 17
     87e:	08 95       	ret
     880:	81 e1       	ldi	r24, 0x11	; 17
     882:	89 17       	cp	r24, r25
     884:	98 f4       	brcc	.+38     	; 0x8ac <getWARMTargetC()+0x60>
     886:	89 2f       	mov	r24, r25
     888:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     88a:	f9 99       	sbic	0x1f, 1	; 31
     88c:	fe cf       	rjmp	.-4      	; 0x88a <getWARMTargetC()+0x3e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     88e:	8e e0       	ldi	r24, 0x0E	; 14
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	92 bd       	out	0x22, r25	; 34
     894:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     896:	f8 9a       	sbi	0x1f, 0	; 31
     898:	90 b5       	in	r25, 0x20	; 32
     89a:	89 2f       	mov	r24, r25
     89c:	85 50       	subi	r24, 0x05	; 5
     89e:	8b 35       	cpi	r24, 0x5B	; 91
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <getWARMTargetC()+0x58>
     8a2:	95 e0       	ldi	r25, 0x05	; 5
     8a4:	89 2f       	mov	r24, r25
     8a6:	92 17       	cp	r25, r18
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <getWARMTargetC()+0x60>
     8aa:	82 2f       	mov	r24, r18
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(fnmax((uint8_t)WARM, getFROSTTargetC())); }
  // Return valid persisted value (or frost value if set and higher).
  return(fnmax(stored, getFROSTTargetC()));
  }
     8ac:	08 95       	ret

000008ae <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8ae:	f9 99       	sbic	0x1f, 1	; 31
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8b2:	82 e1       	ldi	r24, 0x12	; 18
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	92 bd       	out	0x22, r25	; 34
     8b8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8ba:	f8 9a       	sbi	0x1f, 0	; 31
     8bc:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     8be:	80 95       	com	r24
     8c0:	08 95       	ret

000008c2 <isLikelyOccupied()>:

// Returns true if the room appears to be likely occupied (with active users) now or recently.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Do not call from an ISR.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     8c2:	80 91 2f 01 	lds	r24, 0x012F
     8c6:	81 11       	cpse	r24, r1
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	08 95       	ret

000008cc <isLikelyRecentlyOccupied()>:
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Do not call from an ISR.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	80 91 2f 01 	lds	r24, 0x012F
     8d2:	87 31       	cpi	r24, 0x17	; 23
     8d4:	08 f0       	brcs	.+2      	; 0x8d8 <isLikelyRecentlyOccupied()+0xc>
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	89 2f       	mov	r24, r25
     8da:	08 95       	ret

000008dc <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     8dc:	8d e2       	ldi	r24, 0x2D	; 45
     8de:	80 93 2f 01 	sts	0x012F, r24
     8e2:	08 95       	ret

000008e4 <shouldBeWarmedAtHour(unsigned char)>:

// Returns true iff room likely to be occupied and need warming at the specified hour's sample point based on collected stats.
// Used for predictively warming a room in smart mode and for choosing setback depths.
// Returns false if no good evidence to warm the room at the given time based on past history over about one week.
//   * hh hour to check for predictive warming [0,23]
bool shouldBeWarmedAtHour(const uint_least8_t hh)
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
  {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Return false if the sample hour's historic ambient light level falls in the bottom quartile.
  // Thus avoid any 'smart' warming for at least 25% of the daily cycle.
  const uint8_t smoothedAmbLight = eeprom_read_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh));
     8e8:	48 2f       	mov	r20, r24
     8ea:	50 e0       	ldi	r21, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8ec:	f9 99       	sbic	0x1f, 1	; 31
     8ee:	fe cf       	rjmp	.-4      	; 0x8ec <shouldBeWarmedAtHour(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8f0:	48 5b       	subi	r20, 0xB8	; 184
     8f2:	5e 4f       	sbci	r21, 0xFE	; 254
     8f4:	52 bd       	out	0x22, r21	; 34
     8f6:	41 bd       	out	0x21, r20	; 33
     8f8:	48 54       	subi	r20, 0x48	; 72
     8fa:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8fc:	f8 9a       	sbi	0x1f, 0	; 31
     8fe:	60 b5       	in	r22, 0x20	; 32
     900:	28 e4       	ldi	r18, 0x48	; 72
     902:	31 e0       	ldi	r19, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     906:	f9 99       	sbic	0x1f, 1	; 31
     908:	fe cf       	rjmp	.-4      	; 0x906 <__stack+0x7>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     90a:	32 bd       	out	0x22, r19	; 34
     90c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     90e:	f8 9a       	sbi	0x1f, 0	; 31
     910:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full days' worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     912:	68 17       	cp	r22, r24
     914:	20 f4       	brcc	.+8      	; 0x91e <__stack+0x1f>
     916:	9f 5f       	subi	r25, 0xFF	; 255
     918:	92 31       	cpi	r25, 0x12	; 18
     91a:	08 f0       	brcs	.+2      	; 0x91e <__stack+0x1f>
     91c:	55 c0       	rjmp	.+170    	; 0x9c8 <__stack+0xc9>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     91e:	2f 5f       	subi	r18, 0xFF	; 255
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	20 36       	cpi	r18, 0x60	; 96
     926:	38 07       	cpc	r19, r24
     928:	71 f7       	brne	.-36     	; 0x906 <__stack+0x7>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     92a:	f9 99       	sbic	0x1f, 1	; 31
     92c:	fe cf       	rjmp	.-4      	; 0x92a <__stack+0x2b>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     92e:	40 5a       	subi	r20, 0xA0	; 160
     930:	5e 4f       	sbci	r21, 0xFE	; 254
     932:	52 bd       	out	0x22, r21	; 34
     934:	41 bd       	out	0x21, r20	; 33
     936:	40 56       	subi	r20, 0x60	; 96
     938:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     93a:	f8 9a       	sbi	0x1f, 0	; 31
     93c:	80 b5       	in	r24, 0x20	; 32
#endif

  // Return false if no WARM mode this hour for the last week (ie the unit needs reminding at least once per week).
  // Return true if this hour was in WARM mode yesterday or a week ago, and at least one other day.
  const uint8_t warmHistory = eeprom_read_byte((uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh));
  if(0 == (0x80 & warmHistory)) // This hour has a history.
     93e:	87 fd       	sbrc	r24, 7
     940:	0e c0       	rjmp	.+28     	; 0x95e <__stack+0x5f>
    {
    if(0 == warmHistory) // No explicit WARM for a week at this hour, so prevent 'smart' warming.
     942:	88 23       	and	r24, r24
     944:	09 f4       	brne	.+2      	; 0x948 <__stack+0x49>
     946:	40 c0       	rjmp	.+128    	; 0x9c8 <__stack+0xc9>
      { return(false); }
    if((0 != (0x41 & warmHistory)) && (0 != (0x3e & warmHistory)))
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	c9 01       	movw	r24, r18
     94e:	81 74       	andi	r24, 0x41	; 65
     950:	90 70       	andi	r25, 0x00	; 0
     952:	89 2b       	or	r24, r25
     954:	21 f0       	breq	.+8      	; 0x95e <__stack+0x5f>
     956:	2e 73       	andi	r18, 0x3E	; 62
     958:	30 70       	andi	r19, 0x00	; 0
     95a:	23 2b       	or	r18, r19
     95c:	99 f5       	brne	.+102    	; 0x9c4 <__stack+0xc5>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     95e:	f9 99       	sbic	0x1f, 1	; 31
     960:	fe cf       	rjmp	.-4      	; 0x95e <__stack+0x5f>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     962:	48 5e       	subi	r20, 0xE8	; 232
     964:	5e 4f       	sbci	r21, 0xFE	; 254
     966:	52 bd       	out	0x22, r21	; 34
     968:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     96a:	f8 9a       	sbi	0x1f, 0	; 31
     96c:	80 b5       	in	r24, 0x20	; 32

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     96e:	80 32       	cpi	r24, 0x20	; 32
     970:	40 f4       	brcc	.+16     	; 0x982 <__stack+0x83>
     972:	c8 2f       	mov	r28, r24
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	43 e0       	ldi	r20, 0x03	; 3
     978:	cc 0f       	add	r28, r28
     97a:	dd 1f       	adc	r29, r29
     97c:	4a 95       	dec	r20
     97e:	e1 f7       	brne	.-8      	; 0x978 <__stack+0x79>
     980:	14 c0       	rjmp	.+40     	; 0x9aa <__stack+0xab>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     982:	80 36       	cpi	r24, 0x60	; 96
     984:	38 f4       	brcc	.+14     	; 0x994 <__stack+0x95>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     986:	c8 2f       	mov	r28, r24
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	cc 0f       	add	r28, r28
     98c:	dd 1f       	adc	r29, r29
     98e:	c0 54       	subi	r28, 0x40	; 64
     990:	df 4f       	sbci	r29, 0xFF	; 255
     992:	0b c0       	rjmp	.+22     	; 0x9aa <__stack+0xab>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     994:	89 3f       	cpi	r24, 0xF9	; 249
     996:	c0 f4       	brcc	.+48     	; 0x9c8 <__stack+0xc9>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     998:	c8 2f       	mov	r28, r24
     99a:	d0 e0       	ldi	r29, 0x00	; 0
     99c:	23 e0       	ldi	r18, 0x03	; 3
     99e:	cc 0f       	add	r28, r28
     9a0:	dd 1f       	adc	r29, r29
     9a2:	2a 95       	dec	r18
     9a4:	e1 f7       	brne	.-8      	; 0x99e <__stack+0x9f>
     9a6:	c0 58       	subi	r28, 0x80	; 128
     9a8:	d1 40       	sbci	r29, 0x01	; 1
  DEBUG_SERIAL_PRINT(hh);
  DEBUG_SERIAL_PRINT_FLASHSTRING("h is ");
  DEBUG_SERIAL_PRINT(smoothedTempHHNext >> 4);
  DEBUG_SERIAL_PRINTLN();
#endif
  if((STATS_UNSET_INT != smoothedTempHHNext) && (((smoothedTempHHNext+8)>>4) >= getWARMTargetC()))
     9aa:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	28 96       	adiw	r28, 0x08	; 8
     9b2:	94 e0       	ldi	r25, 0x04	; 4
     9b4:	d5 95       	asr	r29
     9b6:	c7 95       	ror	r28
     9b8:	9a 95       	dec	r25
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <__stack+0xb5>
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	c8 17       	cp	r28, r24
     9c0:	d9 07       	cpc	r29, r25
     9c2:	1c f0       	brlt	.+6      	; 0x9ca <__stack+0xcb>
     9c4:	21 e0       	ldi	r18, 0x01	; 1
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
    { return(true); }

  // No good evidence for room to be warmed for specified hour.
  return(false);
  }
     9ca:	82 2f       	mov	r24, r18
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     9d2:	65 30       	cpi	r22, 0x05	; 5
     9d4:	98 f4       	brcc	.+38     	; 0x9fc <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     9d6:	88 31       	cpi	r24, 0x18	; 24
     9d8:	88 f4       	brcc	.+34     	; 0x9fc <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     9da:	f9 99       	sbic	0x1f, 1	; 31
     9dc:	fe cf       	rjmp	.-4      	; 0x9da <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     9de:	28 2f       	mov	r18, r24
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	20 50       	subi	r18, 0x00	; 0
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	88 e1       	ldi	r24, 0x18	; 24
     9e8:	68 9f       	mul	r22, r24
     9ea:	c0 01       	movw	r24, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	28 0f       	add	r18, r24
     9f0:	39 1f       	adc	r19, r25
     9f2:	32 bd       	out	0x22, r19	; 34
     9f4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     9f6:	f8 9a       	sbi	0x1f, 0	; 31
     9f8:	80 b5       	in	r24, 0x20	; 32
     9fa:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
  }
     9fe:	08 95       	ret

00000a00 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     a00:	18 16       	cp	r1, r24
     a02:	19 06       	cpc	r1, r25
     a04:	14 f0       	brlt	.+4      	; 0xa0a <compressTempC16(int)+0xa>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     a0a:	8f 3f       	cpi	r24, 0xFF	; 255
     a0c:	91 05       	cpc	r25, r1
     a0e:	09 f0       	breq	.+2      	; 0xa12 <compressTempC16(int)+0x12>
     a10:	34 f4       	brge	.+12     	; 0xa1e <compressTempC16(int)+0x1e>
     a12:	73 e0       	ldi	r23, 0x03	; 3
     a14:	95 95       	asr	r25
     a16:	87 95       	ror	r24
     a18:	7a 95       	dec	r23
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <compressTempC16(int)+0x14>
     a1c:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	80 38       	cpi	r24, 0x80	; 128
     a22:	92 07       	cpc	r25, r18
     a24:	34 f4       	brge	.+12     	; 0xa32 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     a26:	80 50       	subi	r24, 0x00	; 0
     a28:	91 40       	sbci	r25, 0x01	; 1
     a2a:	95 95       	asr	r25
     a2c:	87 95       	ror	r24
     a2e:	80 5e       	subi	r24, 0xE0	; 224
     a30:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     a32:	26 e0       	ldi	r18, 0x06	; 6
     a34:	80 34       	cpi	r24, 0x40	; 64
     a36:	92 07       	cpc	r25, r18
     a38:	14 f0       	brlt	.+4      	; 0xa3e <compressTempC16(int)+0x3e>
     a3a:	88 ef       	ldi	r24, 0xF8	; 248
     a3c:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     a3e:	80 58       	subi	r24, 0x80	; 128
     a40:	91 40       	sbci	r25, 0x01	; 1
     a42:	53 e0       	ldi	r21, 0x03	; 3
     a44:	95 95       	asr	r25
     a46:	87 95       	ror	r24
     a48:	5a 95       	dec	r21
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <compressTempC16(int)+0x44>
     a4c:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     a4e:	08 95       	ret

00000a50 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     a50:	80 32       	cpi	r24, 0x20	; 32
     a52:	40 f4       	brcc	.+16     	; 0xa64 <expandTempC16(unsigned char)+0x14>
     a54:	28 2f       	mov	r18, r24
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	a3 e0       	ldi	r26, 0x03	; 3
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	aa 95       	dec	r26
     a60:	e1 f7       	brne	.-8      	; 0xa5a <expandTempC16(unsigned char)+0xa>
     a62:	17 c0       	rjmp	.+46     	; 0xa92 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     a64:	80 36       	cpi	r24, 0x60	; 96
     a66:	38 f4       	brcc	.+14     	; 0xa76 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     a68:	28 2f       	mov	r18, r24
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	20 54       	subi	r18, 0x40	; 64
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	0e c0       	rjmp	.+28     	; 0xa92 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     a76:	89 3f       	cpi	r24, 0xF9	; 249
     a78:	18 f0       	brcs	.+6      	; 0xa80 <expandTempC16(unsigned char)+0x30>
     a7a:	2f ef       	ldi	r18, 0xFF	; 255
     a7c:	3f e7       	ldi	r19, 0x7F	; 127
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	e3 e0       	ldi	r30, 0x03	; 3
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	ea 95       	dec	r30
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <expandTempC16(unsigned char)+0x36>
     a8e:	20 58       	subi	r18, 0x80	; 128
     a90:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     a92:	c9 01       	movw	r24, r18
     a94:	08 95       	ret

00000a96 <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	8c 01       	movw	r16, r24
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
     aa4:	ce 01       	movw	r24, r28
     aa6:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
     aaa:	88 23       	and	r24, r24
     aac:	29 f0       	breq	.+10     	; 0xab8 <zapStats(unsigned int)+0x22>
     aae:	01 50       	subi	r16, 0x01	; 1
     ab0:	10 40       	sbci	r17, 0x00	; 0
     ab2:	11 f4       	brne	.+4      	; 0xab8 <zapStats(unsigned int)+0x22>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
     ab8:	21 96       	adiw	r28, 0x01	; 1
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	c8 37       	cpi	r28, 0x78	; 120
     abe:	d8 07       	cpc	r29, r24
     ac0:	89 f7       	brne	.-30     	; 0xaa4 <zapStats(unsigned int)+0xe>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     ace:	68 2f       	mov	r22, r24
     ad0:	60 95       	com	r22
     ad2:	82 e1       	ldi	r24, 0x12	; 18
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     ada:	08 95       	ret

00000adc <setWARMTargetC(unsigned char)>:
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
  return(true); // Assume value correctly written.
  }
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
     adc:	68 2f       	mov	r22, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     ade:	85 50       	subi	r24, 0x05	; 5
     ae0:	8b 35       	cpi	r24, 0x5B	; 91
     ae2:	a8 f4       	brcc	.+42     	; 0xb0e <setWARMTargetC(unsigned char)+0x32>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ae4:	f9 99       	sbic	0x1f, 1	; 31
     ae6:	fe cf       	rjmp	.-4      	; 0xae4 <setWARMTargetC(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ae8:	8e e0       	ldi	r24, 0x0E	; 14
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	92 bd       	out	0x22, r25	; 34
     aee:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     af0:	f8 9a       	sbi	0x1f, 0	; 31
     af2:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     af4:	89 2f       	mov	r24, r25
     af6:	85 50       	subi	r24, 0x05	; 5
     af8:	8b 35       	cpi	r24, 0x5B	; 91
     afa:	08 f0       	brcs	.+2      	; 0xafe <setWARMTargetC(unsigned char)+0x22>
     afc:	95 e0       	ldi	r25, 0x05	; 5
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
  if(tempC < getFROSTTargetC()) { return(false); } // Cannot set below FROST target.
     afe:	69 17       	cp	r22, r25
     b00:	30 f0       	brcs	.+12     	; 0xb0e <setWARMTargetC(unsigned char)+0x32>
  eeprom_smart_update_byte((uint8_t *)EE_START_WARM_C, tempC); // Update in EEPROM if necessary.
     b02:	8f e0       	ldi	r24, 0x0F	; 15
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	08 95       	ret
  return(true); // Assume value correctly written.
     b0e:	80 e0       	ldi	r24, 0x00	; 0
  }
     b10:	08 95       	ret

00000b12 <setFROSTTargetC(unsigned char)>:
#endif

#ifdef SETTABLE_TARGET_TEMPERATURES
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     b12:	1f 93       	push	r17
     b14:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     b16:	85 50       	subi	r24, 0x05	; 5
     b18:	8b 35       	cpi	r24, 0x5B	; 91
     b1a:	58 f4       	brcc	.+22     	; 0xb32 <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     b1c:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
     b20:	81 17       	cp	r24, r17
     b22:	38 f0       	brcs	.+14     	; 0xb32 <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     b24:	8e e0       	ldi	r24, 0x0E	; 14
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	61 2f       	mov	r22, r17
     b2a:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     b32:	80 e0       	ldi	r24, 0x00	; 0
  }
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	18 2f       	mov	r17, r24
     b3e:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     b40:	86 17       	cp	r24, r22
     b42:	b9 f0       	breq	.+46     	; 0xb72 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     b44:	0e 94 c9 10 	call	0x2192	; 0x2192 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     b48:	21 2f       	mov	r18, r17
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	a9 01       	movw	r20, r18
     b4e:	13 e0       	ldi	r17, 0x03	; 3
     b50:	44 0f       	add	r20, r20
     b52:	55 1f       	adc	r21, r21
     b54:	1a 95       	dec	r17
     b56:	e1 f7       	brne	.-8      	; 0xb50 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     b58:	42 1b       	sub	r20, r18
     b5a:	53 0b       	sbc	r21, r19
     b5c:	87 70       	andi	r24, 0x07	; 7
     b5e:	48 0f       	add	r20, r24
     b60:	51 1d       	adc	r21, r1
     b62:	40 0f       	add	r20, r16
     b64:	51 1d       	adc	r21, r1
     b66:	b3 e0       	ldi	r27, 0x03	; 3
     b68:	56 95       	lsr	r21
     b6a:	47 95       	ror	r20
     b6c:	ba 95       	dec	r27
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     b70:	14 2f       	mov	r17, r20
  }
     b72:	81 2f       	mov	r24, r17
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	08 2f       	mov	r16, r24
  {
  // (Sub-)sample processing.
  static uint8_t sampleCount; // General sub-sample count; initially zero, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount++);
     b88:	80 91 2e 01 	lds	r24, 0x012E
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <sampleStats(bool)+0x1a>
     b92:	11 e0       	ldi	r17, 0x01	; 1
     b94:	8f 5f       	subi	r24, 0xFF	; 255
     b96:	80 93 2e 01 	sts	0x012E, r24
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmMode()) { ++warmCount; } else { --warmCount; }
     b9a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <inWarmMode()>
     b9e:	90 91 2d 01 	lds	r25, 0x012D
     ba2:	88 23       	and	r24, r24
     ba4:	11 f0       	breq	.+4      	; 0xbaa <sampleStats(bool)+0x30>
     ba6:	9f 5f       	subi	r25, 0xFF	; 255
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <sampleStats(bool)+0x32>
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	90 93 2d 01 	sts	0x012D, r25
  // Ambient light.
  const int ambLight = getAmbientLight();
     bb0:	0e 94 de 03 	call	0x7bc	; 0x7bc <getAmbientLight()>
     bb4:	9c 01       	movw	r18, r24
  static int ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
     bb6:	11 23       	and	r17, r17
     bb8:	31 f4       	brne	.+12     	; 0xbc6 <sampleStats(bool)+0x4c>
     bba:	80 91 2b 01 	lds	r24, 0x012B
     bbe:	90 91 2c 01 	lds	r25, 0x012C
     bc2:	28 0f       	add	r18, r24
     bc4:	39 1f       	adc	r19, r25
     bc6:	30 93 2c 01 	sts	0x012C, r19
     bca:	20 93 2b 01 	sts	0x012B, r18
  const int tempC16 = getTemperatureC16();
     bce:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <getTemperatureC16()>
     bd2:	9c 01       	movw	r18, r24
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
     bd4:	11 23       	and	r17, r17
     bd6:	31 f4       	brne	.+12     	; 0xbe4 <sampleStats(bool)+0x6a>
     bd8:	80 91 29 01 	lds	r24, 0x0129
     bdc:	90 91 2a 01 	lds	r25, 0x012A
     be0:	28 0f       	add	r18, r24
     be2:	39 1f       	adc	r19, r25
     be4:	30 93 2a 01 	sts	0x012A, r19
     be8:	20 93 29 01 	sts	0x0129, r18
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
     bec:	00 23       	and	r16, r16
     bee:	09 f4       	brne	.+2      	; 0xbf2 <sampleStats(bool)+0x78>
     bf0:	89 c0       	rjmp	.+274    	; 0xd04 <sampleStats(bool)+0x18a>

  const uint_least8_t hh = getHoursLT(); // Get the current local-time hour...
     bf2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <getHoursLT()>
     bf6:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const uint8_t temp = compressTempC16((tempC16Total + (sampleCount/2)) / sampleCount);
     bf8:	60 91 2e 01 	lds	r22, 0x012E
     bfc:	26 2f       	mov	r18, r22
     bfe:	26 95       	lsr	r18
     c00:	80 91 29 01 	lds	r24, 0x0129
     c04:	90 91 2a 01 	lds	r25, 0x012A
     c08:	82 0f       	add	r24, r18
     c0a:	91 1d       	adc	r25, r1
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divmodhi4>
     c12:	cb 01       	movw	r24, r22
     c14:	0e 94 00 05 	call	0xa00	; 0xa00 <compressTempC16(int)>
     c18:	08 2f       	mov	r16, r24
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_TEMP_BY_HOUR + hh), temp);
     c1a:	e1 2e       	mov	r14, r17
     c1c:	ff 24       	eor	r15, r15
     c1e:	c7 01       	movw	r24, r14
     c20:	80 50       	subi	r24, 0x00	; 0
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	60 2f       	mov	r22, r16
     c26:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phT = (uint8_t *)(EE_START_LAST_TEMP_BY_HOUR_SMOOTHED + hh);
     c2a:	e7 01       	movw	r28, r14
     c2c:	c8 5e       	subi	r28, 0xE8	; 232
     c2e:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c30:	f9 99       	sbic	0x1f, 1	; 31
     c32:	fe cf       	rjmp	.-4      	; 0xc30 <sampleStats(bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c34:	d2 bd       	out	0x22, r29	; 34
     c36:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c38:	f8 9a       	sbi	0x1f, 0	; 31
     c3a:	80 b5       	in	r24, 0x20	; 32
  const uint8_t tempSmoothed = eeprom_read_byte(phT);
  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
     c3c:	89 3f       	cpi	r24, 0xF9	; 249
     c3e:	18 f0       	brcs	.+6      	; 0xc46 <sampleStats(bool)+0xcc>
     c40:	ce 01       	movw	r24, r28
     c42:	60 2f       	mov	r22, r16
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <sampleStats(bool)+0xd6>
  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }
     c46:	60 2f       	mov	r22, r16
     c48:	0e 94 9c 05 	call	0xb38	; 0xb38 <smoothStatsValue(unsigned char, unsigned char)>
     c4c:	68 2f       	mov	r22, r24
     c4e:	ce 01       	movw	r24, r28
     c50:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sampleCount<<1)) / (sampleCount<<2));
     c54:	80 91 2e 01 	lds	r24, 0x012E
     c58:	90 e0       	ldi	r25, 0x00	; 0
  const uint8_t ambL = min(ambLShifted, MAX_STATS_AMBLIGHT);
     c5a:	20 91 2b 01 	lds	r18, 0x012B
     c5e:	30 91 2c 01 	lds	r19, 0x012C
     c62:	bc 01       	movw	r22, r24
     c64:	66 0f       	add	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	66 0f       	add	r22, r22
     c6a:	77 1f       	adc	r23, r23
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divmodhi4>
     c78:	16 2f       	mov	r17, r22
     c7a:	6f 3f       	cpi	r22, 0xFF	; 255
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <sampleStats(bool)+0x106>
     c7e:	1e ef       	ldi	r17, 0xFE	; 254
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR + hh), ambL);
     c80:	c7 01       	movw	r24, r14
     c82:	80 5d       	subi	r24, 0xD0	; 208
     c84:	9e 4f       	sbci	r25, 0xFE	; 254
     c86:	61 2f       	mov	r22, r17
     c88:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phA = (uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh);
     c8c:	e7 01       	movw	r28, r14
     c8e:	c8 5b       	subi	r28, 0xB8	; 184
     c90:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c92:	f9 99       	sbic	0x1f, 1	; 31
     c94:	fe cf       	rjmp	.-4      	; 0xc92 <sampleStats(bool)+0x118>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c96:	d2 bd       	out	0x22, r29	; 34
     c98:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     c9a:	f8 9a       	sbi	0x1f, 0	; 31
     c9c:	80 b5       	in	r24, 0x20	; 32
  const uint8_t ambLSmoothed = eeprom_read_byte(phA);
  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	19 f4       	brne	.+6      	; 0xca8 <sampleStats(bool)+0x12e>
     ca2:	ce 01       	movw	r24, r28
     ca4:	61 2f       	mov	r22, r17
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <sampleStats(bool)+0x138>
  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }
     ca8:	61 2f       	mov	r22, r17
     caa:	0e 94 9c 05 	call	0xb38	; 0xb38 <smoothStatsValue(unsigned char, unsigned char)>
     cae:	68 2f       	mov	r22, r24
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh);
     cb6:	e7 01       	movw	r28, r14
     cb8:	c0 5a       	subi	r28, 0xA0	; 160
     cba:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cbc:	f9 99       	sbic	0x1f, 1	; 31
     cbe:	fe cf       	rjmp	.-4      	; 0xcbc <sampleStats(bool)+0x142>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cc0:	d2 bd       	out	0x22, r29	; 34
     cc2:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cc4:	f8 9a       	sbi	0x1f, 0	; 31
     cc6:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmMode() ? 0x7f : 0); } // First use sets all history bits to current sample value.
     cc8:	87 ff       	sbrs	r24, 7
     cca:	0b c0       	rjmp	.+22     	; 0xce2 <sampleStats(bool)+0x168>
     ccc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <inWarmMode()>
     cd0:	88 23       	and	r24, r24
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <sampleStats(bool)+0x15e>
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <sampleStats(bool)+0x160>
     cd8:	6f e7       	ldi	r22, 0x7F	; 127
     cda:	ce 01       	movw	r24, r28
     cdc:	0e 94 7d 07 	call	0xefa	; 0xefa <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <sampleStats(bool)+0x182>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	95 95       	asr	r25
     ce6:	87 95       	ror	r24
     ce8:	68 2f       	mov	r22, r24
     cea:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
     cec:	80 91 2d 01 	lds	r24, 0x012D
     cf0:	18 16       	cp	r1, r24
     cf2:	0c f4       	brge	.+2      	; 0xcf6 <sampleStats(bool)+0x17c>
     cf4:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
     cf6:	ce 01       	movw	r24, r28
     cf8:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
     cfc:	10 92 2d 01 	sts	0x012D, r1

  // TODO: other stats measures...


  // Reset generical sub-sample count to initial state after fill sample.
  sampleCount = 0;
     d00:	10 92 2e 01 	sts	0x012E, r1
  }
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	08 95       	ret

00000d12 <computeTargetAndDemand()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, TRVPercentOpen.
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeTargetAndDemand()
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
  {
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }
     d16:	80 91 2f 01 	lds	r24, 0x012F
     d1a:	88 23       	and	r24, r24
     d1c:	19 f0       	breq	.+6      	; 0xd24 <computeTargetAndDemand()+0x12>
     d1e:	81 50       	subi	r24, 0x01	; 1
     d20:	80 93 2f 01 	sts	0x012F, r24


// Compute target temperature.
static void computeTargetTemperature()
  {
  if(!inWarmMode()) // In FROST mode.
     d24:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <inWarmMode()>
     d28:	88 23       	and	r24, r24
     d2a:	81 f4       	brne	.+32     	; 0xd4c <computeTargetAndDemand()+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d2c:	f9 99       	sbic	0x1f, 1	; 31
     d2e:	fe cf       	rjmp	.-4      	; 0xd2c <computeTargetAndDemand()+0x1a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d30:	8e e0       	ldi	r24, 0x0E	; 14
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	92 bd       	out	0x22, r25	; 34
     d36:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d38:	f8 9a       	sbi	0x1f, 0	; 31
     d3a:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     d3c:	89 2f       	mov	r24, r25
     d3e:	85 50       	subi	r24, 0x05	; 5
     d40:	8b 35       	cpi	r24, 0x5B	; 91
     d42:	08 f0       	brcs	.+2      	; 0xd46 <computeTargetAndDemand()+0x34>
     d44:	95 e0       	ldi	r25, 0x05	; 5
static void computeTargetTemperature()
  {
  if(!inWarmMode()) // In FROST mode.
    {
    const uint8_t frostC = getFROSTTargetC();
    targetTempC = frostC; // Apply FROST safety target temperature by default in FROST mode; no setbacks apply.
     d46:	90 93 30 01 	sts	0x0130, r25
     d4a:	1d c0       	rjmp	.+58     	; 0xd86 <computeTargetAndDemand()+0x74>
      }
#endif
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
     d4c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <inBakeMode()>
     d50:	88 23       	and	r24, r24
     d52:	39 f0       	breq	.+14     	; 0xd62 <computeTargetAndDemand()+0x50>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
     d54:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
     d58:	8b 5f       	subi	r24, 0xFB	; 251
     d5a:	80 36       	cpi	r24, 0x60	; 96
     d5c:	90 f0       	brcs	.+36     	; 0xd82 <computeTargetAndDemand()+0x70>
     d5e:	8f e5       	ldi	r24, 0x5F	; 95
     d60:	10 c0       	rjmp	.+32     	; 0xd82 <computeTargetAndDemand()+0x70>
    {
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if room is too dark for activity AND room seems unoccupied.
    // TODO: with full occupancy support then allow setback simply based on lack of occupancy.
    if(isRoomDark() && isLikelyUnoccupied())
     d62:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
     d66:	88 23       	and	r24, r24
     d68:	09 f0       	breq	.+2      	; 0xd6c <computeTargetAndDemand()+0x5a>
     d6a:	9a c0       	rjmp	.+308    	; 0xea0 <computeTargetAndDemand()+0x18e>
     d6c:	80 91 2f 01 	lds	r24, 0x012F
     d70:	88 23       	and	r24, r24
     d72:	09 f0       	breq	.+2      	; 0xd76 <computeTargetAndDemand()+0x64>
     d74:	95 c0       	rjmp	.+298    	; 0xea0 <computeTargetAndDemand()+0x18e>
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sb = shouldBeWarmedAtHour(hh) ? SETBACK : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - sb), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - SETBACK), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
     d76:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
     d7a:	81 50       	subi	r24, 0x01	; 1
void panic();


// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     d7c:	85 30       	cpi	r24, 0x05	; 5
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <computeTargetAndDemand()+0x70>
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	80 93 30 01 	sts	0x0130, r24
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
     d86:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <getTemperatureC16()>
     d8a:	ac 01       	movw	r20, r24
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     d8c:	64 e0       	ldi	r22, 0x04	; 4
     d8e:	95 95       	asr	r25
     d90:	87 95       	ror	r24
     d92:	6a 95       	dec	r22
     d94:	e1 f7       	brne	.-8      	; 0xd8e <computeTargetAndDemand()+0x7c>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     d96:	30 91 30 01 	lds	r19, 0x0130
     d9a:	83 17       	cp	r24, r19
     d9c:	c0 f4       	brcc	.+48     	; 0xdce <computeTargetAndDemand()+0xbc>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
     d9e:	80 91 31 01 	lds	r24, 0x0131
     da2:	84 36       	cpi	r24, 0x64	; 100
     da4:	09 f4       	brne	.+2      	; 0xda8 <computeTargetAndDemand()+0x96>
     da6:	78 c0       	rjmp	.+240    	; 0xe98 <computeTargetAndDemand()+0x186>
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target then in BAKE mode immediately open to 100%, unless always glacial.
      // FIXME: use debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeMode()) { TRVPercentOpen = 100; }
     da8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <inBakeMode()>
     dac:	88 23       	and	r24, r24
     dae:	69 f4       	brne	.+26     	; 0xdca <computeTargetAndDemand()+0xb8>
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
        const uint8_t tmp = TRVPercentOpen + ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     db0:	10 91 31 01 	lds	r17, 0x0131
     db4:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <hasEcoBias()>
     db8:	88 23       	and	r24, r24
     dba:	11 f0       	breq	.+4      	; 0xdc0 <computeTargetAndDemand()+0xae>
     dbc:	8a e0       	ldi	r24, 0x0A	; 10
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <computeTargetAndDemand()+0xb0>
     dc0:	84 e1       	ldi	r24, 0x14	; 20
     dc2:	81 0f       	add	r24, r17
#else
        const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(tmp < 100) { TRVPercentOpen = tmp; } else { TRVPercentOpen = 100; } // Capped at 100%.
     dc4:	84 36       	cpi	r24, 0x64	; 100
     dc6:	08 f4       	brcc	.+2      	; 0xdca <computeTargetAndDemand()+0xb8>
     dc8:	6f c0       	rjmp	.+222    	; 0xea8 <computeTargetAndDemand()+0x196>
     dca:	84 e6       	ldi	r24, 0x64	; 100
     dcc:	6d c0       	rjmp	.+218    	; 0xea8 <computeTargetAndDemand()+0x196>
        }      
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     dce:	38 17       	cp	r19, r24
     dd0:	30 f5       	brcc	.+76     	; 0xe1e <computeTargetAndDemand()+0x10c>
    {
    cancelBake(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
     dd2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <cancelBake()>
    if(TRVPercentOpen != 0)
     dd6:	80 91 31 01 	lds	r24, 0x0131
     dda:	88 23       	and	r24, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <computeTargetAndDemand()+0xce>
     dde:	5c c0       	rjmp	.+184    	; 0xe98 <computeTargetAndDemand()+0x186>
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(TRVPercentOpen <= lingerThreshold)
     de0:	8a 30       	cpi	r24, 0x0A	; 10
     de2:	38 f4       	brcc	.+14     	; 0xdf2 <computeTargetAndDemand()+0xe0>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) && (TRVPercentOpen < DEFAULT_MIN_VALVE_PC_REALLY_OPEN - DEFAULT_MAX_RUN_ON_TIME_M))
     de4:	85 30       	cpi	r24, 0x05	; 5
     de6:	18 f4       	brcc	.+6      	; 0xdee <computeTargetAndDemand()+0xdc>
          { TRVPercentOpen = 0; } // Shut right off.
     de8:	10 92 31 01 	sts	0x0131, r1
     dec:	39 c0       	rjmp	.+114    	; 0xe60 <computeTargetAndDemand()+0x14e>
        else
          { --TRVPercentOpen; } // Turn down as slowly as reasonably possible to help boiler cool.
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	5b c0       	rjmp	.+182    	; 0xea8 <computeTargetAndDemand()+0x196>
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
     df2:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <hasEcoBias()>
     df6:	88 23       	and	r24, r24
     df8:	59 f0       	breq	.+22     	; 0xe10 <computeTargetAndDemand()+0xfe>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     dfa:	f9 99       	sbic	0x1f, 1	; 31
     dfc:	fe cf       	rjmp	.-4      	; 0xdfa <computeTargetAndDemand()+0xe8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     dfe:	82 e1       	ldi	r24, 0x12	; 18
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	92 bd       	out	0x22, r25	; 34
     e04:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e06:	f8 9a       	sbi	0x1f, 0	; 31
     e08:	80 b5       	in	r24, 0x20	; 32
     e0a:	8f 3f       	cpi	r24, 0xFF	; 255
     e0c:	09 f4       	brne	.+2      	; 0xe10 <computeTargetAndDemand()+0xfe>
     e0e:	4b c0       	rjmp	.+150    	; 0xea6 <computeTargetAndDemand()+0x194>
     e10:	80 91 31 01 	lds	r24, 0x0131
     e14:	8e 31       	cpi	r24, 0x1E	; 30
     e16:	08 f4       	brcc	.+2      	; 0xe1a <computeTargetAndDemand()+0x108>
     e18:	46 c0       	rjmp	.+140    	; 0xea6 <computeTargetAndDemand()+0x194>
     e1a:	84 51       	subi	r24, 0x14	; 20
     e1c:	45 c0       	rjmp	.+138    	; 0xea8 <computeTargetAndDemand()+0x196>
    }
  else // Close to temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     e1e:	24 2f       	mov	r18, r20
     e20:	2f 70       	andi	r18, 0x0F	; 15
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
#if defined(VALVE_TURN_OFF_LINGER)
    // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
    const uint8_t targetPO = fmax(targetPORaw, DEFAULT_MIN_VALVE_PC_REALLY_OPEN);
     e22:	60 e1       	ldi	r22, 0x10	; 16
     e24:	62 1b       	sub	r22, r18
     e26:	26 e0       	ldi	r18, 0x06	; 6
     e28:	62 9f       	mul	r22, r18
     e2a:	60 2d       	mov	r22, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__floatunsisf>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 0f 2a 	call	0x541e	; 0x541e <fmax>
     e44:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixunssfsi>
     e48:	16 2f       	mov	r17, r22
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO < TRVPercentOpen) // Currently open more than required.
     e4a:	20 91 31 01 	lds	r18, 0x0131
     e4e:	62 17       	cp	r22, r18
     e50:	48 f4       	brcc	.+18     	; 0xe64 <computeTargetAndDemand()+0x152>
      {
      const uint8_t slew = TRVPercentOpen - targetPO;
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     e52:	82 2f       	mov	r24, r18
     e54:	81 1b       	sub	r24, r17
     e56:	87 30       	cpi	r24, 0x07	; 7
     e58:	f8 f0       	brcs	.+62     	; 0xe98 <computeTargetAndDemand()+0x186>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
            { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     e5a:	25 50       	subi	r18, 0x05	; 5
     e5c:	20 93 31 01 	sts	0x0131, r18
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	1b c0       	rjmp	.+54     	; 0xe9a <computeTargetAndDemand()+0x188>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
        changed = true; // TRV setting has been changed.
        }
      }
    else if(targetPO > TRVPercentOpen) // Currently open less than required.
     e64:	26 17       	cp	r18, r22
     e66:	c0 f4       	brcc	.+48     	; 0xe98 <computeTargetAndDemand()+0x186>
      {
      const uint8_t slew = targetPO - TRVPercentOpen;
     e68:	06 2f       	mov	r16, r22
     e6a:	02 1b       	sub	r16, r18
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     e6c:	07 30       	cpi	r16, 0x07	; 7
     e6e:	a0 f0       	brcs	.+40     	; 0xe98 <computeTargetAndDemand()+0x186>
        {
        // Slew open faster in BAKE mode or with comfort bias (unless always glacial).
#if !defined(TRV_SLEW_GLACIAL)
        const uint8_t maxSlew = (inBakeMode() || !hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     e70:	0e 94 22 16 	call	0x2c44	; 0x2c44 <inBakeMode()>
     e74:	88 23       	and	r24, r24
     e76:	31 f4       	brne	.+12     	; 0xe84 <computeTargetAndDemand()+0x172>
     e78:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <hasEcoBias()>
     e7c:	88 23       	and	r24, r24
     e7e:	11 f0       	breq	.+4      	; 0xe84 <computeTargetAndDemand()+0x172>
     e80:	95 e0       	ldi	r25, 0x05	; 5
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <computeTargetAndDemand()+0x178>
#else
        const uint8_t maxSlew = TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(slew > maxSlew)
     e84:	0b 30       	cpi	r16, 0x0B	; 11
     e86:	28 f0       	brcs	.+10     	; 0xe92 <computeTargetAndDemand()+0x180>
     e88:	9a e0       	ldi	r25, 0x0A	; 10
            { TRVPercentOpen += maxSlew; } // Cap slew rate.
     e8a:	80 91 31 01 	lds	r24, 0x0131
     e8e:	89 0f       	add	r24, r25
     e90:	0b c0       	rjmp	.+22     	; 0xea8 <computeTargetAndDemand()+0x196>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
     e92:	10 93 31 01 	sts	0x0131, r17
     e96:	e4 cf       	rjmp	.-56     	; 0xe60 <computeTargetAndDemand()+0x14e>
     e98:	80 e0       	ldi	r24, 0x00	; 0
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }

  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	08 95       	ret
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(getWARMTargetC() - SETBACK), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
#endif
      }
    else
      { targetTempC = getWARMTargetC(); } // Room not known to be too dark for normal activity so use WARM target directly.
     ea0:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
     ea4:	6e cf       	rjmp	.-292    	; 0xd82 <computeTargetAndDemand()+0x70>
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { TRVPercentOpen = lingerThreshold; }
     ea6:	89 e0       	ldi	r24, 0x09	; 9
     ea8:	80 93 31 01 	sts	0x0131, r24
     eac:	d9 cf       	rjmp	.-78     	; 0xe60 <computeTargetAndDemand()+0x14e>

00000eae <markAsPossiblyOccupied()>:
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Do not call from an ISR.
void markAsPossiblyOccupied()
  { occupationCountdownM = fmax(occupationCountdownM, OCCUPATION_TIMEOUT_M/2); }
     eae:	60 91 2f 01 	lds	r22, 0x012F
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__floatunsisf>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 eb       	ldi	r20, 0xB0	; 176
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	0e 94 0f 2a 	call	0x541e	; 0x541e <fmax>
     ec8:	0e 94 a6 29 	call	0x534c	; 0x534c <__fixunssfsi>
     ecc:	60 93 2f 01 	sts	0x012F, r22
     ed0:	08 95       	ret

00000ed2 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     ed2:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     ed4:	f9 99       	sbic	0x1f, 1	; 31
     ed6:	fe cf       	rjmp	.-4      	; 0xed4 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     ed8:	32 bd       	out	0x22, r19	; 34
     eda:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     ee0:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     ee2:	8f 3f       	cpi	r24, 0xFF	; 255
     ee4:	11 f4       	brne	.+4      	; 0xeea <eeprom_smart_erase_byte(unsigned char*)+0x18>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     eea:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eec:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     eee:	84 e1       	ldi	r24, 0x14	; 20
     ef0:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     ef2:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ef4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ef6:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     ef8:	08 95       	ret

00000efa <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     efa:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     efc:	f9 99       	sbic	0x1f, 1	; 31
     efe:	fe cf       	rjmp	.-4      	; 0xefc <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     f00:	32 bd       	out	0x22, r19	; 34
     f02:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     f08:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     f0a:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     f0c:	86 17       	cp	r24, r22
     f0e:	11 f4       	brne	.+4      	; 0xf14 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     f14:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     f16:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f18:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     f1a:	84 e2       	ldi	r24, 0x24	; 36
     f1c:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
     f1e:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f20:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     f22:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
     f24:	08 95       	ret

00000f26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
     f26:	78 2f       	mov	r23, r24
     f28:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
     f2a:	6f 3f       	cpi	r22, 0xFF	; 255
     f2c:	19 f4       	brne	.+6      	; 0xf34 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
     f2e:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
     f32:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f34:	f9 99       	sbic	0x1f, 1	; 31
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f38:	47 2f       	mov	r20, r23
     f3a:	5e 2f       	mov	r21, r30
     f3c:	52 bd       	out	0x22, r21	; 34
     f3e:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f40:	f8 9a       	sbi	0x1f, 0	; 31
     f42:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
     f44:	68 17       	cp	r22, r24
     f46:	11 f4       	brne	.+4      	; 0xf4c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
     f4c:	26 2f       	mov	r18, r22
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	82 23       	and	r24, r18
     f54:	93 23       	and	r25, r19
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	29 f4       	brne	.+10     	; 0xf66 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
     f5c:	87 2f       	mov	r24, r23
     f5e:	9e 2f       	mov	r25, r30
     f60:	0e 94 7d 07 	call	0xefa	; 0xefa <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     f64:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     f66:	f9 99       	sbic	0x1f, 1	; 31
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     f6a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f6c:	52 bd       	out	0x22, r21	; 34
     f6e:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     f70:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	fa 9a       	sbi	0x1f, 2	; 31
     f78:	f9 9a       	sbi	0x1f, 1	; 31
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
     f7e:	08 95       	ret

00000f80 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
     f80:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
     f82:	80 81       	ld	r24, Z
     f84:	98 2f       	mov	r25, r24
     f86:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
     f88:	66 23       	and	r22, r22
     f8a:	b1 f4       	brne	.+44     	; 0xfb8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
     f8c:	92 30       	cpi	r25, 0x02	; 2
     f8e:	51 f0       	breq	.+20     	; 0xfa4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
     f90:	93 30       	cpi	r25, 0x03	; 3
     f92:	31 f0       	breq	.+12     	; 0xfa0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
     f94:	9f 01       	movw	r18, r30
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	91 30       	cpi	r25, 0x01	; 1
     f9c:	59 f4       	brne	.+22     	; 0xfb4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
     fa0:	8d ec       	ldi	r24, 0xCD	; 205
     fa2:	25 c0       	rjmp	.+74     	; 0xfee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
     fa4:	80 7c       	andi	r24, 0xC0	; 192
     fa6:	80 63       	ori	r24, 0x30	; 48
     fa8:	22 c0       	rjmp	.+68     	; 0xfee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
     faa:	80 7f       	andi	r24, 0xF0	; 240
     fac:	8c 60       	ori	r24, 0x0C	; 12
     fae:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     fb0:	f9 01       	movw	r30, r18
     fb2:	11 c0       	rjmp	.+34     	; 0xfd6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     fb4:	83 60       	ori	r24, 0x03	; 3
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
     fb8:	92 30       	cpi	r25, 0x02	; 2
     fba:	51 f0       	breq	.+20     	; 0xfd0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
     fbc:	93 30       	cpi	r25, 0x03	; 3
     fbe:	31 f0       	breq	.+12     	; 0xfcc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
     fc0:	9f 01       	movw	r18, r30
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	91 30       	cpi	r25, 0x01	; 1
     fc8:	71 f4       	brne	.+28     	; 0xfe6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
     fca:	07 c0       	rjmp	.+14     	; 0xfda <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
     fcc:	80 ee       	ldi	r24, 0xE0	; 224
     fce:	0f c0       	rjmp	.+30     	; 0xfee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
     fd0:	80 7c       	andi	r24, 0xC0	; 192
     fd2:	88 63       	ori	r24, 0x38	; 56
     fd4:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	0a c0       	rjmp	.+20     	; 0xfee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
     fda:	80 7f       	andi	r24, 0xF0	; 240
     fdc:	8e 60       	ori	r24, 0x0E	; 14
     fde:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
     fe0:	f9 01       	movw	r30, r18
     fe2:	8e e3       	ldi	r24, 0x3E	; 62
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
     fe6:	83 60       	ori	r24, 0x03	; 3
     fe8:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
     fea:	f9 01       	movw	r30, r18
     fec:	8d e8       	ldi	r24, 0x8D	; 141
     fee:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
     ff0:	cf 01       	movw	r24, r30
     ff2:	08 95       	ret

00000ff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	9c 01       	movw	r18, r24
    1002:	16 2f       	mov	r17, r22
    1004:	00 e8       	ldi	r16, 0x80	; 128
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    100a:	e6 2e       	mov	r14, r22
    100c:	ff 24       	eor	r15, r15
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	80 2f       	mov	r24, r16
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	8e 21       	and	r24, r14
    1016:	9f 21       	and	r25, r15
    1018:	89 2b       	or	r24, r25
    101a:	09 f0       	breq	.+2      	; 0x101e <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	c9 01       	movw	r24, r18
    1020:	0e 94 c0 07 	call	0xf80	; 0xf80 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1024:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    1026:	06 95       	lsr	r16
    1028:	21 96       	adiw	r28, 0x01	; 1
    102a:	c8 30       	cpi	r28, 0x08	; 8
    102c:	d1 05       	cpc	r29, r1
    102e:	79 f7       	brne	.-34     	; 0x100e <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1030:	01 2e       	mov	r0, r17
    1032:	12 95       	swap	r17
    1034:	10 25       	eor	r17, r0
    1036:	01 2e       	mov	r0, r17
    1038:	16 95       	lsr	r17
    103a:	16 95       	lsr	r17
    103c:	10 25       	eor	r17, r0
    103e:	61 2f       	mov	r22, r17
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	76 95       	lsr	r23
    1048:	67 95       	ror	r22
    104a:	61 70       	andi	r22, 0x01	; 1
    104c:	c9 01       	movw	r24, r18
    104e:	0e 94 c0 07 	call	0xf80	; 0xf80 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	08 95       	ret

00001060 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	dc 01       	movw	r26, r24
    1068:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    106a:	8c ec       	ldi	r24, 0xCC	; 204
    106c:	fd 01       	movw	r30, r26
    106e:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	8c 93       	st	X, r24
    1074:	df 01       	movw	r26, r30
    1076:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    1078:	81 83       	std	Z+1, r24	; 0x01
    107a:	fd 01       	movw	r30, r26
    107c:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    107e:	11 96       	adiw	r26, 0x01	; 1
    1080:	8c 93       	st	X, r24
    1082:	df 01       	movw	r26, r30
    1084:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    1086:	81 83       	std	Z+1, r24	; 0x01
    1088:	fd 01       	movw	r30, r26
    108a:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    1090:	ff 24       	eor	r15, r15
    1092:	fa 94       	dec	r15
    1094:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    1096:	cf 01       	movw	r24, r30
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	0e 94 c0 07 	call	0xf80	; 0xf80 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    10a0:	f8 01       	movw	r30, r16
    10a2:	60 81       	ld	r22, Z
    10a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    10a8:	f8 01       	movw	r30, r16
    10aa:	61 81       	ldd	r22, Z+1	; 0x01
    10ac:	0e 94 fa 07 	call	0xff4	; 0xff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 fa 07 	call	0xff4	; 0xff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    10b6:	f8 01       	movw	r30, r16
    10b8:	62 81       	ldd	r22, Z+2	; 0x02
    10ba:	0e 94 fa 07 	call	0xff4	; 0xff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    10be:	f8 01       	movw	r30, r16
    10c0:	63 81       	ldd	r22, Z+3	; 0x03
    10c2:	0e 94 fa 07 	call	0xff4	; 0xff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    10c6:	f8 01       	movw	r30, r16
    10c8:	60 81       	ld	r22, Z
    10ca:	21 81       	ldd	r18, Z+1	; 0x01
    10cc:	62 0f       	add	r22, r18
    10ce:	64 5f       	subi	r22, 0xF4	; 244
    10d0:	22 81       	ldd	r18, Z+2	; 0x02
    10d2:	62 0f       	add	r22, r18
    10d4:	23 81       	ldd	r18, Z+3	; 0x03
    10d6:	62 0f       	add	r22, r18
    10d8:	0e 94 fa 07 	call	0xff4	; 0xff4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	0e 94 c0 07 	call	0xf80	; 0xf80 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bit to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	0e 94 c0 07 	call	0xf80	; 0xf80 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    10e8:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    10ea:	f0 82       	st	Z, r15
  return(bptr);
  }
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	08 95       	ret

000010f4 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
// The TRVPercentOpen value is used to generate the frame.
// On entry hc1, hc2 (and addresss if used) must be set correctly; this sets command and extension.
// The generated command frame can be resent indefinitely.
// The command buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
    10fa:	9b 01       	movw	r18, r22
  {
  command->command = 0x26;
    10fc:	86 e2       	ldi	r24, 0x26	; 38
    10fe:	fb 01       	movw	r30, r22
    1100:	82 83       	std	Z+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	48 9f       	mul	r20, r24
    1106:	c0 01       	movw	r24, r0
    1108:	11 24       	eor	r1, r1
    110a:	64 e6       	ldi	r22, 0x64	; 100
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divmodhi4>
    1112:	63 83       	std	Z+3, r22	; 0x03
#ifdef RFM22_SYNC_ONLY_BCFH
  // Huge cheat: only add RFM22-friendly pre-preamble if calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
  if(TRVPercentOpen >= FHT8V_MIN_VALVE_PC_REALLY_OPEN)
    1114:	4a 30       	cpi	r20, 0x0A	; 10
    1116:	60 f0       	brcs	.+24     	; 0x1130 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    {
    *bptr++ = 0xaa;
    1118:	8a ea       	ldi	r24, 0xAA	; 170
    111a:	fe 01       	movw	r30, r28
    111c:	81 93       	st	Z+, r24
    *bptr++ = 0xaa;
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	df 01       	movw	r26, r30
    1122:	11 96       	adiw	r26, 0x01	; 1
    *bptr++ = 0xaa;
    1124:	81 83       	std	Z+1, r24	; 0x01
    *bptr++ = 0xaa;
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	8c 93       	st	X, r24
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	ed 01       	movw	r28, r26
    112e:	22 96       	adiw	r28, 0x02	; 2
    }
#endif
  return(FHT8VCreate200usBitStreamBptr(bptr, command));
    1130:	ce 01       	movw	r24, r28
    1132:	b9 01       	movw	r22, r18
    1134:	0e 94 30 08 	call	0x1060	; 0x1060 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
  }
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    113e:	f9 99       	sbic	0x1f, 1	; 31
    1140:	fe cf       	rjmp	.-4      	; 0x113e <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1142:	80 e1       	ldi	r24, 0x10	; 16
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	92 bd       	out	0x22, r25	; 34
    1148:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    114a:	f8 9a       	sbi	0x1f, 0	; 31
    114c:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    114e:	08 95       	ret

00001150 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1150:	f9 99       	sbic	0x1f, 1	; 31
    1152:	fe cf       	rjmp	.-4      	; 0x1150 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1154:	81 e1       	ldi	r24, 0x11	; 17
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	92 bd       	out	0x22, r25	; 34
    115a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    115c:	f8 9a       	sbi	0x1f, 0	; 31
    115e:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    1160:	08 95       	ret

00001162 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    1162:	80 91 65 01 	lds	r24, 0x0165
    1166:	08 95       	ret

00001168 <isControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    1168:	80 91 65 01 	lds	r24, 0x0165
    116c:	88 23       	and	r24, r24
    116e:	21 f0       	breq	.+8      	; 0x1178 <isControlledValveOpen()+0x10>
    1170:	80 91 9b 01 	lds	r24, 0x019B
    1174:	81 11       	cpse	r24, r1
    1176:	81 e0       	ldi	r24, 0x01	; 1
// GLOBAL NOTION OF CONTRLLED VALVE STATE PROVIDED HERE
// True iff the valve(s) (if any) controlled by this unit are really open.
// This waits until, for example, an ACK where appropriate, or at least the command has been sent.
// This also implies open to DEFAULT_MIN_VALVE_PC_REALLY_OPEN or equivalent.
// Must be exectly one definition supplied at link time.
bool isControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    1178:	08 95       	ret

0000117a <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    117a:	10 92 65 01 	sts	0x0165, r1
  syncStateFHT8V = 0;
    117e:	10 92 9a 01 	sts	0x019A, r1
  halfSecondsToNextFHT8VTX = 0;
    1182:	10 92 66 01 	sts	0x0166, r1
  FHT8V_isValveOpen = false;
    1186:	10 92 9b 01 	sts	0x019B, r1
  }
    118a:	08 95       	ret

0000118c <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns one housecode calling for heat heard since last call and clears, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    118c:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    118e:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    1190:	20 91 02 01 	lds	r18, 0x0102
    1194:	30 91 03 01 	lds	r19, 0x0103
    lastCallForHeatHC = ~0;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	90 93 03 01 	sts	0x0103, r25
    11a0:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11a4:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    11a6:	c9 01       	movw	r24, r18
    11a8:	08 95       	ret

000011aa <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    11aa:	88 23       	and	r24, r24
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <StopEavesdropOnFHT8V(bool)+0xc>
    11ae:	80 91 32 01 	lds	r24, 0x0132
    11b2:	88 23       	and	r24, r24
    11b4:	21 f0       	breq	.+8      	; 0x11be <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    11b6:	10 92 32 01 	sts	0x0132, r1
  RFM22ModeStandbyAndClearState();
    11ba:	0e 94 58 12 	call	0x24b0	; 0x24b0 <RFM22ModeStandbyAndClearState()>
    11be:	08 95       	ret

000011c0 <_SetupRFM22ToEavesdropOnFHT8V()>:
// Must be written/read under a lock if any chance of access from ISR.
static volatile uint16_t lastCallForHeatHC = ~0;

static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    11c0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    11c4:	8e e2       	ldi	r24, 0x2E	; 46
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	0e 94 4e 11 	call	0x229c	; 0x229c <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    11ce:	08 95       	ret

000011d0 <SetupToEavesdropOnFHT8V(bool)>:
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
void SetupToEavesdropOnFHT8V(bool force)
  {
  if(!force && eavesdropping) { return; } // Already eavesdropping.
    11d0:	88 23       	and	r24, r24
    11d2:	21 f4       	brne	.+8      	; 0x11dc <SetupToEavesdropOnFHT8V(bool)+0xc>
    11d4:	80 91 32 01 	lds	r24, 0x0132
    11d8:	88 23       	and	r24, r24
    11da:	29 f4       	brne	.+10     	; 0x11e6 <SetupToEavesdropOnFHT8V(bool)+0x16>
  eavesdropping = true;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 32 01 	sts	0x0132, r24
  _SetupRFM22ToEavesdropOnFHT8V();
    11e2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_SetupRFM22ToEavesdropOnFHT8V()>
    11e6:	08 95       	ret

000011e8 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    11ee:	28 81       	ld	r18, Y
    11f0:	39 81       	ldd	r19, Y+1	; 0x01
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	9b 81       	ldd	r25, Y+3	; 0x03
    11f6:	82 17       	cp	r24, r18
    11f8:	93 07       	cpc	r25, r19
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <readOneBit(decode_state_t*)+0x18>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	88 23       	and	r24, r24
    1204:	09 f0       	breq	.+2      	; 0x1208 <readOneBit(decode_state_t*)+0x20>
    1206:	7e c0       	rjmp	.+252    	; 0x1304 <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	88 23       	and	r24, r24
    120c:	11 f4       	brne	.+4      	; 0x1212 <readOneBit(decode_state_t*)+0x2a>
    120e:	80 ec       	ldi	r24, 0xC0	; 192
    1210:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	80 3c       	cpi	r24, 0xC0	; 192
    1216:	41 f0       	breq	.+16     	; 0x1228 <readOneBit(decode_state_t*)+0x40>
    1218:	80 33       	cpi	r24, 0x30	; 48
    121a:	31 f0       	breq	.+12     	; 0x1228 <readOneBit(decode_state_t*)+0x40>
    121c:	8c 30       	cpi	r24, 0x0C	; 12
    121e:	21 f0       	breq	.+8      	; 0x1228 <readOneBit(decode_state_t*)+0x40>
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	11 f0       	breq	.+4      	; 0x1228 <readOneBit(decode_state_t*)+0x40>
    1224:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	e8 81       	ld	r30, Y
    1230:	f9 81       	ldd	r31, Y+1	; 0x01
    1232:	80 81       	ld	r24, Z
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	82 23       	and	r24, r18
    1238:	93 23       	and	r25, r19
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	09 f0       	breq	.+2      	; 0x1242 <readOneBit(decode_state_t*)+0x5a>
    1240:	51 c0       	rjmp	.+162    	; 0x12e4 <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1242:	c9 01       	movw	r24, r18
    1244:	95 95       	asr	r25
    1246:	87 95       	ror	r24
    1248:	95 95       	asr	r25
    124a:	87 95       	ror	r24
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	88 23       	and	r24, r24
    1250:	61 f4       	brne	.+24     	; 0x126a <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    1252:	80 ec       	ldi	r24, 0xC0	; 192
    1254:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1256:	9f 01       	movw	r18, r30
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	39 83       	std	Y+1, r19	; 0x01
    125e:	28 83       	st	Y, r18
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	82 17       	cp	r24, r18
    1266:	93 07       	cpc	r25, r19
    1268:	e8 f1       	brcs	.+122    	; 0x12e4 <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    126c:	e8 81       	ld	r30, Y
    126e:	f9 81       	ldd	r31, Y+1	; 0x01
    1270:	20 81       	ld	r18, Z
    1272:	28 23       	and	r18, r24
    1274:	28 30       	cpi	r18, 0x08	; 8
    1276:	c1 f0       	breq	.+48     	; 0x12a8 <readOneBit(decode_state_t*)+0xc0>
    1278:	29 30       	cpi	r18, 0x09	; 9
    127a:	28 f4       	brcc	.+10     	; 0x1286 <readOneBit(decode_state_t*)+0x9e>
    127c:	22 23       	and	r18, r18
    127e:	41 f0       	breq	.+16     	; 0x1290 <readOneBit(decode_state_t*)+0xa8>
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	81 f5       	brne	.+96     	; 0x12e4 <readOneBit(decode_state_t*)+0xfc>
    1284:	11 c0       	rjmp	.+34     	; 0x12a8 <readOneBit(decode_state_t*)+0xc0>
    1286:	20 32       	cpi	r18, 0x20	; 32
    1288:	79 f0       	breq	.+30     	; 0x12a8 <readOneBit(decode_state_t*)+0xc0>
    128a:	20 38       	cpi	r18, 0x80	; 128
    128c:	59 f5       	brne	.+86     	; 0x12e4 <readOneBit(decode_state_t*)+0xfc>
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	95 95       	asr	r25
    1294:	87 95       	ror	r24
    1296:	95 95       	asr	r25
    1298:	87 95       	ror	r24
    129a:	8c 83       	std	Y+4, r24	; 0x04
    129c:	88 23       	and	r24, r24
    129e:	91 f5       	brne	.+100    	; 0x1304 <readOneBit(decode_state_t*)+0x11c>
    12a0:	31 96       	adiw	r30, 0x01	; 1
    12a2:	f9 83       	std	Y+1, r31	; 0x01
    12a4:	e8 83       	st	Y, r30
    12a6:	2f c0       	rjmp	.+94     	; 0x1306 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	95 95       	asr	r25
    12ac:	87 95       	ror	r24
    12ae:	95 95       	asr	r25
    12b0:	87 95       	ror	r24
    12b2:	8c 83       	std	Y+4, r24	; 0x04
    12b4:	88 23       	and	r24, r24
    12b6:	61 f4       	brne	.+24     	; 0x12d0 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    12b8:	80 ec       	ldi	r24, 0xC0	; 192
    12ba:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    12bc:	88 81       	ld	r24, Y
    12be:	99 81       	ldd	r25, Y+1	; 0x01
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	99 83       	std	Y+1, r25	; 0x01
    12c4:	88 83       	st	Y, r24
    12c6:	2a 81       	ldd	r18, Y+2	; 0x02
    12c8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	50 f0       	brcs	.+20     	; 0x12e4 <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    12d0:	2c 81       	ldd	r18, Y+4	; 0x04
    12d2:	e8 81       	ld	r30, Y
    12d4:	f9 81       	ldd	r31, Y+1	; 0x01
    12d6:	80 81       	ld	r24, Z
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	82 23       	and	r24, r18
    12de:	93 23       	and	r25, r19
    12e0:	89 2b       	or	r24, r25
    12e2:	19 f0       	breq	.+6      	; 0x12ea <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    12ea:	c9 01       	movw	r24, r18
    12ec:	95 95       	asr	r25
    12ee:	87 95       	ror	r24
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	8c 83       	std	Y+4, r24	; 0x04
    12f6:	88 23       	and	r24, r24
    12f8:	19 f4       	brne	.+6      	; 0x1300 <readOneBit(decode_state_t*)+0x118>
    12fa:	31 96       	adiw	r30, 0x01	; 1
    12fc:	f9 83       	std	Y+1, r31	; 0x01
    12fe:	e8 83       	st	Y, r30
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <readOneBit(decode_state_t*)+0x11e>
    1304:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    131a:	fc 01       	movw	r30, r24
    131c:	85 81       	ldd	r24, Z+5	; 0x05
    131e:	88 23       	and	r24, r24
    1320:	11 f0       	breq	.+4      	; 0x1326 <readOneByteWithParity(decode_state_t*)+0x1a>
    1322:	10 e0       	ldi	r17, 0x00	; 0
    1324:	1b c0       	rjmp	.+54     	; 0x135c <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    1326:	c7 01       	movw	r24, r14
    1328:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <readOneBit(decode_state_t*)>
    132c:	18 2f       	mov	r17, r24
    132e:	08 2f       	mov	r16, r24
    1330:	c7 e0       	ldi	r28, 0x07	; 7
    1332:	d0 e0       	ldi	r29, 0x00	; 0
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    1336:	c7 01       	movw	r24, r14
    1338:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <readOneBit(decode_state_t*)>
    parity ^= bit;
    133c:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    133e:	11 0f       	add	r17, r17
    1340:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    1342:	21 97       	sbiw	r28, 0x01	; 1
    1344:	ff ef       	ldi	r31, 0xFF	; 255
    1346:	cf 3f       	cpi	r28, 0xFF	; 255
    1348:	df 07       	cpc	r29, r31
    134a:	a9 f7       	brne	.-22     	; 0x1336 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    134c:	c7 01       	movw	r24, r14
    134e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <readOneBit(decode_state_t*)>
    1352:	08 17       	cp	r16, r24
    1354:	19 f0       	breq	.+6      	; 0x135c <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	f7 01       	movw	r30, r14
    135a:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    135c:	81 2f       	mov	r24, r17
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	08 95       	ret

0000136c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
bool FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    137c:	00 d0       	rcall	.+0      	; 0x137e <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    138a:	7c 83       	std	Y+4, r23	; 0x04
    138c:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    138e:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    1390:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(false); } }
    1392:	7e 01       	movw	r14, r28
    1394:	08 94       	sec
    1396:	e1 1c       	adc	r14, r1
    1398:	f1 1c       	adc	r15, r1
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	88 23       	and	r24, r24
    13a0:	c9 f5       	brne	.+114    	; 0x1414 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
    13a2:	c7 01       	movw	r24, r14
    13a4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <readOneBit(decode_state_t*)>
    13a8:	88 23       	and	r24, r24
    13aa:	c1 f3       	breq	.-16     	; 0x139c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    13ac:	c7 01       	movw	r24, r14
    13ae:	0e 94 86 09 	call	0x130c	; 0x130c <readOneByteWithParity(decode_state_t*)>
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    13b6:	c7 01       	movw	r24, r14
    13b8:	0e 94 86 09 	call	0x130c	; 0x130c <readOneByteWithParity(decode_state_t*)>
    13bc:	f8 01       	movw	r30, r16
    13be:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    13c0:	c7 01       	movw	r24, r14
    13c2:	0e 94 86 09 	call	0x130c	; 0x130c <readOneByteWithParity(decode_state_t*)>
    13c6:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    13c8:	c7 01       	movw	r24, r14
    13ca:	0e 94 86 09 	call	0x130c	; 0x130c <readOneByteWithParity(decode_state_t*)>
    13ce:	f8 01       	movw	r30, r16
    13d0:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    13d2:	c7 01       	movw	r24, r14
    13d4:	0e 94 86 09 	call	0x130c	; 0x130c <readOneByteWithParity(decode_state_t*)>
    13d8:	f8 01       	movw	r30, r16
    13da:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    13dc:	c7 01       	movw	r24, r14
    13de:	0e 94 86 09 	call	0x130c	; 0x130c <readOneByteWithParity(decode_state_t*)>
    13e2:	28 2f       	mov	r18, r24
  if(state.failed)
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	88 23       	and	r24, r24
    13e8:	a9 f4       	brne	.+42     	; 0x1414 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	89 0f       	add	r24, r25
    13f2:	84 5f       	subi	r24, 0xF4	; 244
    13f4:	92 81       	ldd	r25, Z+2	; 0x02
    13f6:	89 0f       	add	r24, r25
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	89 0f       	add	r24, r25
    13fc:	8d 0d       	add	r24, r13
    13fe:	82 17       	cp	r24, r18
    1400:	49 f4       	brne	.+18     	; 0x1414 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>
#endif
    state.failed = true; return(false);
    }

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state)) { state.failed = true; return(false); }
    1402:	c7 01       	movw	r24, r14
    1404:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <readOneBit(decode_state_t*)>
    1408:	88 23       	and	r24, r24
    140a:	21 f4       	brne	.+8      	; 0x1414 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xa8>

  return(!state.failed);
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	98 27       	eor	r25, r24
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xaa>
    1414:	90 e0       	ldi	r25, 0x00	; 0
  }
    1416:	89 2f       	mov	r24, r25
    1418:	26 96       	adiw	r28, 0x06	; 6
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	08 95       	ret

00001434 <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <FHT8VCallForHeatPoll()+0xa>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <FHT8VCallForHeatPoll()+0xc>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    1444:	80 91 32 01 	lds	r24, 0x0132
    1448:	88 23       	and	r24, r24
    144a:	09 f4       	brne	.+2      	; 0x144e <FHT8VCallForHeatPoll()+0x1a>
    144c:	57 c0       	rjmp	.+174    	; 0x14fc <FHT8VCallForHeatPoll()+0xc8>

#ifdef PIN_RFM_NIRQ
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    144e:	19 99       	sbic	0x03, 1	; 3
    1450:	55 c0       	rjmp	.+170    	; 0x14fc <FHT8VCallForHeatPoll()+0xc8>

// Returns true if there is a pending accepted call for heat.
// If so a non-~0 housecode will be returned by FHT8VCallForHeatHeardGetAndClear().
bool FHT8VCallForHeatHeard()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1452:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1454:	f8 94       	cli
    { return(lastCallForHeatHC != (uint16_t)~0); }
    1456:	80 91 02 01 	lds	r24, 0x0102
    145a:	90 91 03 01 	lds	r25, 0x0103
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    145e:	2f bf       	out	0x3f, r18	; 63
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
#endif

  // Do nothing once call for heat has been collected and is pending action.
  if(FHT8VCallForHeatHeard()) { return(false); }
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	09 f0       	breq	.+2      	; 0x1468 <FHT8VCallForHeatPoll()+0x34>
    1466:	4a c0       	rjmp	.+148    	; 0x14fc <FHT8VCallForHeatPoll()+0xc8>

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    1468:	0e 94 33 12 	call	0x2466	; 0x2466 <RFM22ReadStatusBoth()>

  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    146c:	94 ff       	sbrs	r25, 4
    146e:	48 c0       	rjmp	.+144    	; 0x1500 <FHT8VCallForHeatPoll()+0xcc>
    1470:	e5 e6       	ldi	r30, 0x65	; 101
    1472:	f1 e0       	ldi	r31, 0x01	; 1
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <FHT8VCallForHeatPoll()+0x44>
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
      { *p = 0; }
    1476:	10 82       	st	Z, r1
  // TODO: capture some entropy from RSSI and timing

  if(status & 0x1000) // Received frame.
    {
    // Ensure that a previous frame is not trivially re-read.
    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	e2 33       	cpi	r30, 0x32	; 50
    147e:	f8 07       	cpc	r31, r24
    1480:	d1 f7       	brne	.-12     	; 0x1476 <FHT8VCallForHeatPoll()+0x42>
      { *p = 0; }
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    1482:	8f 01       	movw	r16, r30
    1484:	0f 5f       	subi	r16, 0xFF	; 255
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	c8 01       	movw	r24, r16
    148a:	62 e3       	ldi	r22, 0x32	; 50
    148c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <RFM22RXFIFO(unsigned char*, unsigned char)>
    1490:	f8 01       	movw	r30, r16
    1492:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
      {
      if(0xcc != FHT8VRXHubArea[pos])
    1494:	80 81       	ld	r24, Z
    1496:	8c 3c       	cpi	r24, 0xCC	; 204
    1498:	19 f0       	breq	.+6      	; 0x14a0 <FHT8VCallForHeatPoll()+0x6c>
        {
        if(pos < 2)
    149a:	92 30       	cpi	r25, 0x02	; 2
    149c:	28 f4       	brcc	.+10     	; 0x14a8 <FHT8VCallForHeatPoll()+0x74>
    149e:	2c c0       	rjmp	.+88     	; 0x14f8 <FHT8VCallForHeatPoll()+0xc4>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE);
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	31 96       	adiw	r30, 0x01	; 1
    14a4:	96 30       	cpi	r25, 0x06	; 6
    14a6:	b1 f7       	brne	.-20     	; 0x1494 <FHT8VCallForHeatPoll()+0x60>
          }
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    const bool decoded = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1, &command);
    14a8:	89 2f       	mov	r24, r25
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	8d 5c       	subi	r24, 0xCD	; 205
    14ae:	9e 4f       	sbci	r25, 0xFE	; 254
    14b0:	64 e6       	ldi	r22, 0x64	; 100
    14b2:	71 e0       	ldi	r23, 0x01	; 1
    14b4:	ae 01       	movw	r20, r28
    14b6:	4f 5f       	subi	r20, 0xFF	; 255
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	0e 94 b6 09 	call	0x136c	; 0x136c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    if(decoded)
    14be:	88 23       	and	r24, r24
    14c0:	b9 f0       	breq	.+46     	; 0x14f0 <FHT8VCallForHeatPoll()+0xbc>
      DEBUG_SERIAL_PRINT_FLASHSTRING(" ext ");
      DEBUG_SERIAL_PRINT(command.extension);
      DEBUG_SERIAL_PRINTLN();
#endif
      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	86 32       	cpi	r24, 0x26	; 38
    14c6:	11 f5       	brne	.+68     	; 0x150c <FHT8VCallForHeatPoll()+0xd8>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	8a 30       	cpi	r24, 0x0A	; 10
    14cc:	f8 f0       	brcs	.+62     	; 0x150c <FHT8VCallForHeatPoll()+0xd8>
        {
        const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    14ce:	99 81       	ldd	r25, Y+1	; 0x01
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	2a 81       	ldd	r18, Y+2	; 0x02
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	82 2b       	or	r24, r18
    14d8:	93 2b       	or	r25, r19
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    14da:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14dc:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    14de:	90 93 03 01 	sts	0x0103, r25
    14e2:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14e6:	2f bf       	out	0x3f, r18	; 63
          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 d5 08 	call	0x11aa	; 0x11aa <StopEavesdropOnFHT8V(bool)>
    14ee:	0e c0       	rjmp	.+28     	; 0x150c <FHT8VCallForHeatPoll()+0xd8>
      return(true); // Got a valid frame.
      }
    else
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bad RX frame");
    14f0:	86 ec       	ldi	r24, 0xC6	; 198
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    14f8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_SetupRFM22ToEavesdropOnFHT8V()>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <FHT8VCallForHeatPoll()+0xda>
//  else if(status & 0x80) // Got sync from incoming FHT8V message.
//    { 
////    syncSeen = true;
//    return(true);
//    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1500:	97 ff       	sbrs	r25, 7
    1502:	03 c0       	rjmp	.+6      	; 0x150a <FHT8VCallForHeatPoll()+0xd6>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
    1504:	86 eb       	ldi	r24, 0xB6	; 182
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	f5 cf       	rjmp	.-22     	; 0x14f4 <FHT8VCallForHeatPoll()+0xc0>
    150a:	01 c0       	rjmp	.+2      	; 0x150e <FHT8VCallForHeatPoll()+0xda>
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false);
    }
  }
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <FHT8VCreateValveSetCmdFrame()>:

// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <FHT8VCreateValveSetCmdFrame()+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <FHT8VCreateValveSetCmdFrame()+0x8>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    152c:	f9 99       	sbic	0x1f, 1	; 31
    152e:	fe cf       	rjmp	.-4      	; 0x152c <FHT8VCreateValveSetCmdFrame()+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1530:	80 e1       	ldi	r24, 0x10	; 16
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	92 bd       	out	0x22, r25	; 34
    1536:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1538:	f8 9a       	sbi	0x1f, 0	; 31
    153a:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    153c:	f9 99       	sbic	0x1f, 1	; 31
    153e:	fe cf       	rjmp	.-4      	; 0x153c <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1540:	81 e1       	ldi	r24, 0x11	; 17
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	92 bd       	out	0x22, r25	; 34
    1546:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1548:	f8 9a       	sbi	0x1f, 0	; 31
    154a:	80 b5       	in	r24, 0x20	; 32
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    154c:	8a 83       	std	Y+2, r24	; 0x02
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
void FHT8VCreateValveSetCmdFrame()
  {
  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    154e:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif
  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
    1550:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    1554:	48 2f       	mov	r20, r24
    1556:	87 e6       	ldi	r24, 0x67	; 103
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	be 01       	movw	r22, r28
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
// The trailing 0xff is not sent.
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// TODO: in RX-on/HUB mode, this has to turn RX off (noting anything received) before TX, and restore RX after (rather than standby).
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
    157c:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    157e:	88 81       	ld	r24, Y
    1580:	8f 3f       	cpi	r24, 0xFF	; 255
    1582:	41 f1       	breq	.+80     	; 0x15d4 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    1584:	88 23       	and	r24, r24
    1586:	31 f4       	brne	.+12     	; 0x1594 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    1588:	83 ed       	ldi	r24, 0xD3	; 211
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1590:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    1594:	0e 94 57 04 	call	0x8ae	; 0x8ae <getMinBoilerOnMinutes()>
    1598:	18 2f       	mov	r17, r24
    159a:	88 23       	and	r24, r24
    159c:	19 f0       	breq	.+6      	; 0x15a4 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    159e:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    15a0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    15aa:	ce 01       	movw	r24, r28
    15ac:	0e 94 c0 11 	call	0x2380	; 0x2380 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!
    15b0:	0e 94 a0 12 	call	0x2540	; 0x2540 <RFM22TXFIFO()>

  if(doubleTX)
    15b4:	00 23       	and	r16, r16
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    15b8:	8d e3       	ldi	r24, 0x3D	; 61
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    RFM22TXFIFO(); // Re-send it!
    15c0:	0e 94 a0 12 	call	0x2540	; 0x2540 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    15c4:	11 23       	and	r17, r17
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <SetupToEavesdropOnFHT8V(bool)>
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    15d0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <RFM22ModeStandbyAndClearState()>
  }
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <FHT8VDoSafeExtraTXToHub()>:
// Returns true iff a TX was done.
// This may also be omitted if the TX would not be heard by the hub anyway.
bool FHT8VDoSafeExtraTXToHub()
  {
  // Do nothing until in sync.
  if(!syncedWithFHT8V) { return(false); }
    15de:	80 91 65 01 	lds	r24, 0x0165
    15e2:	88 23       	and	r24, r24
    15e4:	81 f0       	breq	.+32     	; 0x1606 <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do nothing if too close to (within maybe 10s of) the start or finish of a ~2m TX cycle
  // (which might cause FHT8V to latch onto the wrong, extra, TX).
  if((halfSecondsToNextFHT8VTX < 20) || (halfSecondsToNextFHT8VTX > 210)) { return(false); }
    15e6:	80 91 66 01 	lds	r24, 0x0166
    15ea:	84 51       	subi	r24, 0x14	; 20
    15ec:	8f 3b       	cpi	r24, 0xBF	; 191
    15ee:	58 f4       	brcc	.+22     	; 0x1606 <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do nothing if we would not send something that the hub would hear.
  if(getTRVPercentOpen() < FHT8V_MIN_VALVE_PC_REALLY_OPEN) { return(false); }
    15f0:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    15f4:	8a 30       	cpi	r24, 0x0A	; 10
    15f6:	38 f0       	brcs	.+14     	; 0x1606 <FHT8VDoSafeExtraTXToHub()+0x28>
  // Do (single) TX.
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, false);
    15f8:	87 e6       	ldi	r24, 0x67	; 103
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	0e 94 b9 0a 	call	0x1572	; 0x1572 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	08 95       	ret
  // Done it.
  return(true);
    1606:	80 e0       	ldi	r24, 0x00	; 0
  }
    1608:	08 95       	ret

0000160a <valveSettingTX(bool)>:
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
  }

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    160a:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    160c:	87 e6       	ldi	r24, 0x67	; 103
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 b9 0a 	call	0x1572	; 0x1572 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (getTRVPercentOpen() >= FHT8V_MIN_VALVE_PC_REALLY_OPEN); }
    1614:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    1618:	10 92 9b 01 	sts	0x019B, r1
    161c:	8a 30       	cpi	r24, 0x0A	; 10
    161e:	18 f0       	brcs	.+6      	; 0x1626 <valveSettingTX(bool)+0x1c>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 9b 01 	sts	0x019B, r24
    1626:	08 95       	ret

00001628 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    1628:	8f 92       	push	r8
    162a:	9f 92       	push	r9
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    163e:	0e 94 57 04 	call	0x8ae	; 0x8ae <getMinBoilerOnMinutes()>
    1642:	88 2e       	mov	r8, r24
    1644:	88 23       	and	r24, r24
    1646:	a9 f1       	breq	.+106    	; 0x16b2 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    1648:	88 24       	eor	r8, r8
    164a:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    164c:	89 2d       	mov	r24, r9
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	5c 01       	movw	r10, r24
    1652:	cc 24       	eor	r12, r12
    1654:	b7 fc       	sbrc	r11, 7
    1656:	c0 94       	com	r12
    1658:	dc 2c       	mov	r13, r12
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
    1668:	60 91 b2 00 	lds	r22, 0x00B2
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	69 5f       	subi	r22, 0xF9	; 249
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	88 27       	eor	r24, r24
    1674:	77 fd       	sbrc	r23, 7
    1676:	80 95       	com	r24
    1678:	98 2f       	mov	r25, r24
    167a:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <__floatsisf>
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	53 e4       	ldi	r21, 0x43	; 67
    1686:	0e 94 0f 2a 	call	0x541e	; 0x541e <fmax>
    168a:	7b 01       	movw	r14, r22
    168c:	8c 01       	movw	r16, r24
    168e:	c6 01       	movw	r24, r12
    1690:	b5 01       	movw	r22, r10
    1692:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <__floatsisf>
    1696:	a8 01       	movw	r20, r16
    1698:	97 01       	movw	r18, r14
    169a:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <__gesf2>
    169e:	18 16       	cp	r1, r24
    16a0:	ec f2       	brlt	.-70     	; 0x165c <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    16aa:	80 91 b2 00 	lds	r24, 0x00B2
    16ae:	89 15       	cp	r24, r9
    16b0:	c8 f3       	brcs	.-14     	; 0x16a4 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    16b2:	89 2d       	mov	r24, r9
    16b4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    16b8:	88 20       	and	r8, r8
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    16bc:	0e 94 1a 0a 	call	0x1434	; 0x1434 <FHT8VCallForHeatPoll()>
#endif
    }
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	9f 90       	pop	r9
    16d2:	8f 90       	pop	r8
    16d4:	08 95       	ret

000016d6 <doSync(bool)>:

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    16d6:	1f 93       	push	r17
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <doSync(bool)+0x8>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <doSync(bool)+0xa>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	18 2f       	mov	r17, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    16e6:	f9 99       	sbic	0x1f, 1	; 31
    16e8:	fe cf       	rjmp	.-4      	; 0x16e6 <doSync(bool)+0x10>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    16ea:	80 e1       	ldi	r24, 0x10	; 16
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	92 bd       	out	0x22, r25	; 34
    16f0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    16f2:	f8 9a       	sbi	0x1f, 0	; 31
    16f4:	80 b5       	in	r24, 0x20	; 32
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    16f6:	84 36       	cpi	r24, 0x64	; 100
    16f8:	58 f4       	brcc	.+22     	; 0x1710 <doSync(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    16fa:	f9 99       	sbic	0x1f, 1	; 31
    16fc:	fe cf       	rjmp	.-4      	; 0x16fa <doSync(bool)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    16fe:	81 e1       	ldi	r24, 0x11	; 17
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	92 bd       	out	0x22, r25	; 34
    1704:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1706:	f8 9a       	sbi	0x1f, 0	; 31
    1708:	80 b5       	in	r24, 0x20	; 32
    170a:	84 36       	cpi	r24, 0x64	; 100
    170c:	08 f4       	brcc	.+2      	; 0x1710 <doSync(bool)+0x3a>
    170e:	af c0       	rjmp	.+350    	; 0x186e <doSync(bool)+0x198>
    { syncedWithFHT8V = false; return(false); }
    1710:	10 92 65 01 	sts	0x0165, r1
    1714:	a1 c0       	rjmp	.+322    	; 0x1858 <doSync(bool)+0x182>

  if(0 == syncStateFHT8V)
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    1716:	81 ef       	ldi	r24, 0xF1	; 241
    1718:	80 93 9a 01 	sts	0x019A, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    171c:	0e 94 af 14 	call	0x295e	; 0x295e <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1720:	80 e2       	ldi	r24, 0x20	; 32
    1722:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <serialPrintAndFlush(char)>
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    1726:	84 e3       	ldi	r24, 0x34	; 52
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    172e:	20 91 9a 01 	lds	r18, 0x019A
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	08 f4       	brcc	.+2      	; 0x1738 <doSync(bool)+0x62>
    1736:	45 c0       	rjmp	.+138    	; 0x17c2 <doSync(bool)+0xec>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    1738:	20 ff       	sbrs	r18, 0
    173a:	2b c0       	rjmp	.+86     	; 0x1792 <doSync(bool)+0xbc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    173c:	f9 99       	sbic	0x1f, 1	; 31
    173e:	fe cf       	rjmp	.-4      	; 0x173c <doSync(bool)+0x66>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1740:	80 e1       	ldi	r24, 0x10	; 16
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	92 bd       	out	0x22, r25	; 34
    1746:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1748:	f8 9a       	sbi	0x1f, 0	; 31
    174a:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    174c:	f9 99       	sbic	0x1f, 1	; 31
    174e:	fe cf       	rjmp	.-4      	; 0x174c <doSync(bool)+0x76>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1750:	81 e1       	ldi	r24, 0x11	; 17
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	92 bd       	out	0x22, r25	; 34
    1756:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1758:	f8 9a       	sbi	0x1f, 0	; 31
    175a:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    175c:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    175e:	8c e2       	ldi	r24, 0x2C	; 44
    1760:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    1762:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    1764:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    1766:	87 e6       	ldi	r24, 0x67	; 103
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	be 01       	movw	r22, r28
    176c:	6f 5f       	subi	r22, 0xFF	; 255
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	0e 94 30 08 	call	0x1060	; 0x1060 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    1774:	80 91 99 01 	lds	r24, 0x0199
    1778:	88 23       	and	r24, r24
    177a:	31 f0       	breq	.+12     	; 0x1788 <doSync(bool)+0xb2>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    177c:	82 95       	swap	r24
    177e:	88 0f       	add	r24, r24
    1780:	88 0f       	add	r24, r24
    1782:	80 7c       	andi	r24, 0xC0	; 192
    1784:	0e 94 14 0b 	call	0x1628	; 0x1628 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    1788:	87 e6       	ldi	r24, 0x67	; 103
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	61 2f       	mov	r22, r17
    178e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    1792:	80 91 9a 01 	lds	r24, 0x019A
    1796:	81 50       	subi	r24, 0x01	; 1
    1798:	80 93 9a 01 	sts	0x019A, r24
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	09 f0       	breq	.+2      	; 0x17a2 <doSync(bool)+0xcc>
    17a0:	5d c0       	rjmp	.+186    	; 0x185c <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17a2:	f9 99       	sbic	0x1f, 1	; 31
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <doSync(bool)+0xcc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17a6:	81 e1       	ldi	r24, 0x11	; 17
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	92 bd       	out	0x22, r25	; 34
    17ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17ae:	f8 9a       	sbi	0x1f, 0	; 31
    17b0:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    17b2:	80 91 99 01 	lds	r24, 0x0199
    17b6:	8b 5f       	subi	r24, 0xFB	; 251
    17b8:	97 70       	andi	r25, 0x07	; 7
    17ba:	89 0f       	add	r24, r25
    17bc:	80 93 66 01 	sts	0x0166, r24
    17c0:	4b c0       	rjmp	.+150    	; 0x1858 <doSync(bool)+0x182>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    17c2:	80 91 66 01 	lds	r24, 0x0166
    17c6:	81 50       	subi	r24, 0x01	; 1
    17c8:	80 93 66 01 	sts	0x0166, r24
    17cc:	88 23       	and	r24, r24
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <doSync(bool)+0xfc>
    17d0:	45 c0       	rjmp	.+138    	; 0x185c <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17d2:	f9 99       	sbic	0x1f, 1	; 31
    17d4:	fe cf       	rjmp	.-4      	; 0x17d2 <doSync(bool)+0xfc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17d6:	80 e1       	ldi	r24, 0x10	; 16
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	92 bd       	out	0x22, r25	; 34
    17dc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17de:	f8 9a       	sbi	0x1f, 0	; 31
    17e0:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17e2:	f9 99       	sbic	0x1f, 1	; 31
    17e4:	fe cf       	rjmp	.-4      	; 0x17e2 <doSync(bool)+0x10c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17e6:	81 e1       	ldi	r24, 0x11	; 17
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	92 bd       	out	0x22, r25	; 34
    17ec:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17ee:	f8 9a       	sbi	0x1f, 0	; 31
    17f0:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    17f2:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    17f8:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    17fa:	10 92 9b 01 	sts	0x019B, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    17fe:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    1800:	87 e6       	ldi	r24, 0x67	; 103
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	be 01       	movw	r22, r28
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	0e 94 30 08 	call	0x1060	; 0x1060 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    180e:	80 91 99 01 	lds	r24, 0x0199
    1812:	88 23       	and	r24, r24
    1814:	31 f0       	breq	.+12     	; 0x1822 <doSync(bool)+0x14c>
    1816:	82 95       	swap	r24
    1818:	88 0f       	add	r24, r24
    181a:	88 0f       	add	r24, r24
    181c:	80 7c       	andi	r24, 0xC0	; 192
    181e:	0e 94 14 0b 	call	0x1628	; 0x1628 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    1822:	87 e6       	ldi	r24, 0x67	; 103
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	61 2f       	mov	r22, r17
    1828:	0e 94 b9 0a 	call	0x1572	; 0x1572 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
    182c:	0e 94 af 14 	call	0x295e	; 0x295e <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    1830:	80 e2       	ldi	r24, 0x20	; 32
    1832:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <serialPrintAndFlush(char)>
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    1836:	83 e2       	ldi	r24, 0x23	; 35
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	80 93 65 01 	sts	0x0165, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    1844:	0e 94 90 0a 	call	0x1520	; 0x1520 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    1848:	90 91 99 01 	lds	r25, 0x0199
    184c:	9d 51       	subi	r25, 0x1D	; 29
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	87 70       	andi	r24, 0x07	; 7
    1852:	98 0f       	add	r25, r24
    1854:	90 93 66 01 	sts	0x0166, r25
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	01 c0       	rjmp	.+2      	; 0x185e <doSync(bool)+0x188>
      return(false);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	1f 91       	pop	r17
    186c:	08 95       	ret
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    { syncedWithFHT8V = false; return(false); }

  if(0 == syncStateFHT8V)
    186e:	80 91 9a 01 	lds	r24, 0x019A
    1872:	88 23       	and	r24, r24
    1874:	09 f0       	breq	.+2      	; 0x1878 <doSync(bool)+0x1a2>
    1876:	5b cf       	rjmp	.-330    	; 0x172e <doSync(bool)+0x58>
    1878:	4e cf       	rjmp	.-356    	; 0x1716 <doSync(bool)+0x40>

0000187a <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    187a:	1f 93       	push	r17
    187c:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
    187e:	10 92 99 01 	sts	0x0199, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1882:	80 91 65 01 	lds	r24, 0x0165
    1886:	88 23       	and	r24, r24
    1888:	21 f4       	brne	.+8      	; 0x1892 <FHT8VPollSyncAndTX_First(bool)+0x18>
    188a:	81 2f       	mov	r24, r17
    188c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <doSync(bool)>
    1890:	30 c0       	rjmp	.+96     	; 0x18f2 <FHT8VPollSyncAndTX_First(bool)+0x78>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
    1892:	80 91 66 01 	lds	r24, 0x0166
    1896:	88 23       	and	r24, r24
    1898:	31 f4       	brne	.+12     	; 0x18a6 <FHT8VPollSyncAndTX_First(bool)+0x2c>
    189a:	8b e4       	ldi	r24, 0x4B	; 75
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
    18a2:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    18a6:	80 91 66 01 	lds	r24, 0x0166
    18aa:	85 30       	cpi	r24, 0x05	; 5
    18ac:	10 f0       	brcs	.+4      	; 0x18b2 <FHT8VPollSyncAndTX_First(bool)+0x38>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    18ae:	84 50       	subi	r24, 0x04	; 4
    18b0:	1d c0       	rjmp	.+58     	; 0x18ec <FHT8VPollSyncAndTX_First(bool)+0x72>
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	80 93 66 01 	sts	0x0166, r24
    18b8:	88 23       	and	r24, r24
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <FHT8VPollSyncAndTX_First(bool)+0x46>
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	19 c0       	rjmp	.+50     	; 0x18f2 <FHT8VPollSyncAndTX_First(bool)+0x78>
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    18c0:	81 2f       	mov	r24, r17
    18c2:	0e 94 05 0b 	call	0x160a	; 0x160a <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    18c6:	0e 94 af 14 	call	0x295e	; 0x295e <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    18ca:	80 e2       	ldi	r24, 0x20	; 32
    18cc:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    18d0:	82 e4       	ldi	r24, 0x42	; 66
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    18d8:	f9 99       	sbic	0x1f, 1	; 31
    18da:	fe cf       	rjmp	.-4      	; 0x18d8 <FHT8VPollSyncAndTX_First(bool)+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    18dc:	81 e1       	ldi	r24, 0x11	; 17
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	92 bd       	out	0x22, r25	; 34
    18e2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    18e4:	f8 9a       	sbi	0x1f, 0	; 31
    18e6:	80 b5       	in	r24, 0x20	; 32
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    18e8:	87 70       	andi	r24, 0x07	; 7
    18ea:	8d 51       	subi	r24, 0x1D	; 29
    18ec:	80 93 66 01 	sts	0x0166, r24
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    18f2:	1f 91       	pop	r17
    18f4:	08 95       	ret

000018f6 <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    18f6:	1f 93       	push	r17
    18f8:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    18fa:	80 91 99 01 	lds	r24, 0x0199
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 99 01 	sts	0x0199, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	30 f0       	brcs	.+12     	; 0x1914 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    1908:	88 ef       	ldi	r24, 0xF8	; 248
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1910:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1914:	80 91 65 01 	lds	r24, 0x0165
    1918:	88 23       	and	r24, r24
    191a:	21 f4       	brne	.+8      	; 0x1924 <FHT8VPollSyncAndTX_Next(bool)+0x2e>
    191c:	81 2f       	mov	r24, r17
    191e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <doSync(bool)>
    1922:	2d c0       	rjmp	.+90     	; 0x197e <FHT8VPollSyncAndTX_Next(bool)+0x88>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    1924:	80 91 66 01 	lds	r24, 0x0166
    1928:	81 50       	subi	r24, 0x01	; 1
    192a:	80 93 66 01 	sts	0x0166, r24
    192e:	88 23       	and	r24, r24
    1930:	11 f0       	breq	.+4      	; 0x1936 <FHT8VPollSyncAndTX_Next(bool)+0x40>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	24 c0       	rjmp	.+72     	; 0x197e <FHT8VPollSyncAndTX_Next(bool)+0x88>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    1936:	80 91 99 01 	lds	r24, 0x0199
    193a:	82 95       	swap	r24
    193c:	88 0f       	add	r24, r24
    193e:	88 0f       	add	r24, r24
    1940:	80 7c       	andi	r24, 0xC0	; 192
    1942:	0e 94 14 0b 	call	0x1628	; 0x1628 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    1946:	81 2f       	mov	r24, r17
    1948:	0e 94 05 0b 	call	0x160a	; 0x160a <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    194c:	0e 94 af 14 	call	0x295e	; 0x295e <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1950:	80 e2       	ldi	r24, 0x20	; 32
    1952:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    1956:	8f ee       	ldi	r24, 0xEF	; 239
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    195e:	f9 99       	sbic	0x1f, 1	; 31
    1960:	fe cf       	rjmp	.-4      	; 0x195e <FHT8VPollSyncAndTX_Next(bool)+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1962:	81 e1       	ldi	r24, 0x11	; 17
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	92 bd       	out	0x22, r25	; 34
    1968:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    196a:	f8 9a       	sbi	0x1f, 0	; 31
    196c:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    196e:	80 91 99 01 	lds	r24, 0x0199
    1972:	8d 51       	subi	r24, 0x1D	; 29
    1974:	97 70       	andi	r25, 0x07	; 7
    1976:	89 0f       	add	r24, r25
    1978:	80 93 66 01 	sts	0x0166, r24
    197c:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    197e:	1f 91       	pop	r17
    1980:	08 95       	ret

00001982 <FHT8VSetHC2(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    1982:	68 2f       	mov	r22, r24
    1984:	81 e1       	ldi	r24, 0x11	; 17
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    198c:	08 95       	ret

0000198e <FHT8VSetHC1(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    198e:	68 2f       	mov	r22, r24
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    1998:	08 95       	ret

0000199a <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    199a:	80 e1       	ldi	r24, 0x10	; 16
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    19a2:	81 e1       	ldi	r24, 0x11	; 17
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
  }
    19aa:	08 95       	ret

000019ac <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    19bc:	80 91 a6 01 	lds	r24, 0x01A6
#if defined(TWO_S_TICK_RTC_SUPPORT)
  sTemp += 2;
    19c0:	8e 5f       	subi	r24, 0xFE	; 254
#else
  ++sTemp;
#endif
  if(sTemp > 59)
    19c2:	8c 33       	cpi	r24, 0x3C	; 60
    19c4:	c8 f0       	brcs	.+50     	; 0x19f8 <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    19c6:	80 91 a7 01 	lds	r24, 0x01A7
    19ca:	90 91 a8 01 	lds	r25, 0x01A8
    19ce:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    19d0:	25 e0       	ldi	r18, 0x05	; 5
    19d2:	80 3a       	cpi	r24, 0xA0	; 160
    19d4:	92 07       	cpc	r25, r18
    19d6:	58 f0       	brcs	.+22     	; 0x19ee <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    19d8:	80 91 a9 01 	lds	r24, 0x01A9
    19dc:	90 91 aa 01 	lds	r25, 0x01AA
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	90 93 aa 01 	sts	0x01AA, r25
    19e6:	80 93 a9 01 	sts	0x01A9, r24
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    19ee:	90 93 a8 01 	sts	0x01A8, r25
    19f2:	80 93 a7 01 	sts	0x01A7, r24
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    19f8:	80 93 a6 01 	sts	0x01A6, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    1a24:	88 e1       	ldi	r24, 0x18	; 24
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	80 93 60 00 	sts	0x0060, r24
    1a2e:	10 92 60 00 	sts	0x0060, r1
    1a32:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  uint8_t x;
  _watchdogFired = (uint8_t) 0x80 | (uint8_t) (int) &x; // Ensure non-zero, retaining any entropy in ls bits.
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	80 68       	ori	r24, 0x80	; 128
    1a3a:	80 93 9c 01 	sts	0x019C, r24
  }
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    1a52:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    1a54:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    1a58:	28 e0       	ldi	r18, 0x08	; 8
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	40 93 61 00 	sts	0x0061, r20
    1a66:	20 93 61 00 	sts	0x0061, r18
    1a6a:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	8f 70       	andi	r24, 0x0F	; 15
    1a74:	90 70       	andi	r25, 0x00	; 0
    1a76:	20 e8       	ldi	r18, 0x80	; 128
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	20 93 61 00 	sts	0x0061, r18
    1a80:	80 93 61 00 	sts	0x0061, r24
    1a84:	0f be       	out	0x3f, r0	; 63
  }
    1a86:	08 95       	ret

00001a88 <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1a88:	83 b7       	in	r24, 0x33	; 51
    1a8a:	81 7f       	andi	r24, 0xF1	; 241
    1a8c:	86 60       	ori	r24, 0x06	; 6
    1a8e:	83 bf       	out	0x33, r24	; 51
  cli();
    1a90:	f8 94       	cli
  sleep_enable();
    1a92:	83 b7       	in	r24, 0x33	; 51
    1a94:	81 60       	ori	r24, 0x01	; 1
    1a96:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1a98:	85 b7       	in	r24, 0x35	; 53
    1a9a:	80 66       	ori	r24, 0x60	; 96
    1a9c:	85 bf       	out	0x35, r24	; 53
    1a9e:	8f 7d       	andi	r24, 0xDF	; 223
    1aa0:	85 bf       	out	0x35, r24	; 53
  sei();
    1aa2:	78 94       	sei
  sleep_cpu();
    1aa4:	88 95       	sleep
  sleep_disable();
    1aa6:	83 b7       	in	r24, 0x33	; 51
    1aa8:	8e 7f       	andi	r24, 0xFE	; 254
    1aaa:	83 bf       	out	0x33, r24	; 51
  sei();
    1aac:	78 94       	sei
  }
    1aae:	08 95       	ret

00001ab0 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1ab0:	10 92 9c 01 	sts	0x019C, r1

  wdt_enable(watchdogSleep);
    1ab4:	83 fd       	sbrc	r24, 3
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <nap(signed char)+0xc>
    1ab8:	28 e0       	ldi	r18, 0x08	; 8
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <nap(signed char)+0xe>
    1abc:	28 e2       	ldi	r18, 0x28	; 40
    1abe:	87 70       	andi	r24, 0x07	; 7
    1ac0:	28 2b       	or	r18, r24
    1ac2:	88 e1       	ldi	r24, 0x18	; 24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	a8 95       	wdr
    1acc:	80 93 60 00 	sts	0x0060, r24
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1ad6:	80 91 60 00 	lds	r24, 0x0060
    1ada:	80 64       	ori	r24, 0x40	; 64
    1adc:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1ae0:	83 b7       	in	r24, 0x33	; 51
    1ae2:	81 7f       	andi	r24, 0xF1	; 241
    1ae4:	86 60       	ori	r24, 0x06	; 6
    1ae6:	83 bf       	out	0x33, r24	; 51
  cli();
    1ae8:	f8 94       	cli
  sleep_enable();
    1aea:	83 b7       	in	r24, 0x33	; 51
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1af0:	85 b7       	in	r24, 0x35	; 53
    1af2:	80 66       	ori	r24, 0x60	; 96
    1af4:	85 bf       	out	0x35, r24	; 53
    1af6:	8f 7d       	andi	r24, 0xDF	; 223
    1af8:	85 bf       	out	0x35, r24	; 53
  sei();
    1afa:	78 94       	sei
  sleep_cpu();
    1afc:	88 95       	sleep
  sleep_disable();
    1afe:	83 b7       	in	r24, 0x33	; 51
    1b00:	8e 7f       	andi	r24, 0xFE	; 254
    1b02:	83 bf       	out	0x33, r24	; 51
  sei();
    1b04:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(_watchdogFired)
    1b06:	80 91 9c 01 	lds	r24, 0x019C
    1b0a:	88 23       	and	r24, r24
    1b0c:	49 f3       	breq	.-46     	; 0x1ae0 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    1b0e:	88 e1       	ldi	r24, 0x18	; 24
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	80 93 60 00 	sts	0x0060, r24
    1b18:	10 92 60 00 	sts	0x0060, r1
    1b1c:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    1b1e:	08 95       	ret

00001b20 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1b20:	10 92 9c 01 	sts	0x019C, r1
  wdt_enable(watchdogSleep);
    1b24:	83 fd       	sbrc	r24, 3
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <idleCPU(signed char)+0xc>
    1b28:	28 e0       	ldi	r18, 0x08	; 8
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <idleCPU(signed char)+0xe>
    1b2c:	28 e2       	ldi	r18, 0x28	; 40
    1b2e:	87 70       	andi	r24, 0x07	; 7
    1b30:	28 2b       	or	r18, r24
    1b32:	88 e1       	ldi	r24, 0x18	; 24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	a8 95       	wdr
    1b3c:	80 93 60 00 	sts	0x0060, r24
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    1b46:	80 91 60 00 	lds	r24, 0x0060
    1b4a:	80 64       	ori	r24, 0x40	; 64
    1b4c:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    1b50:	83 b7       	in	r24, 0x33	; 51
    1b52:	81 7f       	andi	r24, 0xF1	; 241
    1b54:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    1b56:	83 b7       	in	r24, 0x33	; 51
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	83 bf       	out	0x33, r24	; 51
    1b5c:	88 95       	sleep
    1b5e:	83 b7       	in	r24, 0x33	; 51
    1b60:	8e 7f       	andi	r24, 0xFE	; 254
    1b62:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    1b64:	88 e1       	ldi	r24, 0x18	; 24
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	80 93 60 00 	sts	0x0060, r24
    1b6e:	10 92 60 00 	sts	0x0060, r1
    1b72:	0f be       	out	0x3f, r0	; 63
  return(_watchdogFired != 0);
    1b74:	80 91 9c 01 	lds	r24, 0x019C
    1b78:	81 11       	cpse	r24, r1
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
  }
    1b7c:	08 95       	ret

00001b7e <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	8f 93       	push	r24
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	80 93 9e 01 	sts	0x019E, r24
    1b90:	8f 91       	pop	r24
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	0f 90       	pop	r0
    1b98:	1f 90       	pop	r1
    1b9a:	18 95       	reti

00001b9c <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    1ba4:	80 91 64 00 	lds	r24, 0x0064
    1ba8:	80 fd       	sbrc	r24, 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    1bac:	00 e0       	ldi	r16, 0x00	; 0
    1bae:	0b c0       	rjmp	.+22     	; 0x1bc6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1bb0:	80 91 64 00 	lds	r24, 0x0064
    1bb4:	8e 7f       	andi	r24, 0xFE	; 254
    1bb6:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1bba:	80 91 7a 00 	lds	r24, 0x007A
    1bbe:	80 68       	ori	r24, 0x80	; 128
    1bc0:	80 93 7a 00 	sts	0x007A, r24
    1bc4:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    1bc6:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    1bca:	12 30       	cpi	r17, 0x02	; 2
    1bcc:	1c f4       	brge	.+6      	; 0x1bd4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    1bd4:	83 b7       	in	r24, 0x33	; 51
    1bd6:	81 7f       	andi	r24, 0xF1	; 241
    1bd8:	82 60       	ori	r24, 0x02	; 2
    1bda:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    1bdc:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    1be0:	12 30       	cpi	r17, 0x02	; 2
    1be2:	24 f0       	brlt	.+8      	; 0x1bec <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    1be4:	80 91 7a 00 	lds	r24, 0x007A
    1be8:	80 62       	ori	r24, 0x20	; 32
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    1bec:	80 91 7a 00 	lds	r24, 0x007A
    1bf0:	8f 7d       	andi	r24, 0xDF	; 223
    1bf2:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    1bf6:	80 91 7a 00 	lds	r24, 0x007A
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    1c00:	80 91 7a 00 	lds	r24, 0x007A
    1c04:	80 64       	ori	r24, 0x40	; 64
    1c06:	80 93 7a 00 	sts	0x007A, r24
    1c0a:	20 91 9d 01 	lds	r18, 0x019D
    1c0e:	5f ef       	ldi	r21, 0xFF	; 255
    1c10:	4f ef       	ldi	r20, 0xFF	; 255
    1c12:	1e c0       	rjmp	.+60     	; 0x1c50 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb4>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    1c14:	10 92 9e 01 	sts	0x019E, r1
    1c18:	07 c0       	rjmp	.+14     	; 0x1c28 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8c>
      while(!ADC_complete) { sleep_mode(); }
    1c1a:	83 b7       	in	r24, 0x33	; 51
    1c1c:	81 60       	ori	r24, 0x01	; 1
    1c1e:	83 bf       	out	0x33, r24	; 51
    1c20:	88 95       	sleep
    1c22:	83 b7       	in	r24, 0x33	; 51
    1c24:	8e 7f       	andi	r24, 0xFE	; 254
    1c26:	83 bf       	out	0x33, r24	; 51
    1c28:	80 91 9e 01 	lds	r24, 0x019E
    1c2c:	88 23       	and	r24, r24
    1c2e:	a9 f3       	breq	.-22     	; 0x1c1a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7e>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1c30:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    1c34:	90 91 79 00 	lds	r25, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    1c38:	94 17       	cp	r25, r20
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa4>
    1c3c:	35 17       	cp	r19, r21
    1c3e:	59 f0       	breq	.+22     	; 0x1c56 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xba>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    1c40:	82 2f       	mov	r24, r18
    1c42:	86 95       	lsr	r24
    1c44:	29 2f       	mov	r18, r25
    1c46:	23 27       	eor	r18, r19
    1c48:	2d 5f       	subi	r18, 0xFD	; 253
    1c4a:	28 0f       	add	r18, r24
    1c4c:	49 2f       	mov	r20, r25
    1c4e:	53 2f       	mov	r21, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    1c50:	11 50       	subi	r17, 0x01	; 1
    1c52:	17 ff       	sbrs	r17, 7
    1c54:	df cf       	rjmp	.-66     	; 0x1c14 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x78>
    1c56:	20 93 9d 01 	sts	0x019D, r18
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1c5a:	80 91 7a 00 	lds	r24, 0x007A
    1c5e:	87 7f       	andi	r24, 0xF7	; 247
    1c60:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1c64:	80 91 7a 00 	lds	r24, 0x007A
    1c68:	8f 7d       	andi	r24, 0xDF	; 223
    1c6a:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1c6e:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    1c72:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    1c76:	00 23       	and	r16, r16
    1c78:	51 f0       	breq	.+20     	; 0x1c8e <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf2>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1c7a:	80 91 7a 00 	lds	r24, 0x007A
    1c7e:	8f 77       	andi	r24, 0x7F	; 127
    1c80:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1c84:	80 91 64 00 	lds	r24, 0x0064
    1c88:	81 60       	ori	r24, 0x01	; 1
    1c8a:	80 93 64 00 	sts	0x0064, r24
    1c8e:	94 2f       	mov	r25, r20
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	28 2b       	or	r18, r24
    1c96:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    1c98:	c9 01       	movw	r24, r18
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	08 95       	ret

00001ca0 <isBatteryLow()>:


// True if battery voltage was low when last read.
// For a 2xAA NiMH configuration this is ~2.0V, where the BOD may force a reset at 1.8V.
static bool batteryLow; // Initially false.
bool isBatteryLow() { return(batteryLow); }
    1ca0:	80 91 a1 01 	lds	r24, 0x01A1
    1ca4:	08 95       	ret

00001ca6 <getBatterymV()>:
// Last-read battery voltage.
static uint16_t batterymV;

// Get power supply voltage in mV as last read by readBatterymV(); non-negative, intially zero until first readBatterymV().
uint16_t getBatterymV() { return(batterymV); }
    1ca6:	80 91 9f 01 	lds	r24, 0x019F
    1caa:	90 91 a0 01 	lds	r25, 0x01A0
    1cae:	08 95       	ret

00001cb0 <readBatterymV()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t readBatterymV()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS0) | 14);
    1cb0:	8e e4       	ldi	r24, 0x4E	; 78
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1cb8:	bc 01       	movw	r22, r24
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    1cba:	80 ec       	ldi	r24, 0xC0	; 192
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
    1cbe:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    1cc2:	9b 01       	movw	r18, r22
    1cc4:	84 e0       	ldi	r24, 0x04	; 4
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	8a 95       	dec	r24
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <readBatterymV()+0x16>
    1cce:	26 0f       	add	r18, r22
    1cd0:	37 1f       	adc	r19, r23
  batterymV = result;
    1cd2:	30 93 a0 01 	sts	0x01A0, r19
    1cd6:	20 93 9f 01 	sts	0x019F, r18
  batteryLow = (result < 2000); // Suitable for 2xAA NiMH, with BOD at 1.8V.
    1cda:	10 92 a1 01 	sts	0x01A1, r1
    1cde:	87 e0       	ldi	r24, 0x07	; 7
    1ce0:	20 3d       	cpi	r18, 0xD0	; 208
    1ce2:	38 07       	cpc	r19, r24
    1ce4:	18 f4       	brcc	.+6      	; 0x1cec <readBatterymV()+0x3c>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	80 93 a1 01 	sts	0x01A1, r24
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    1cec:	c9 01       	movw	r24, r18
    1cee:	08 95       	ret

00001cf0 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    1cf0:	88 ec       	ldi	r24, 0xC8	; 200
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1cf8:	84 54       	subi	r24, 0x44	; 68
    1cfa:	91 40       	sbci	r25, 0x01	; 1
    1cfc:	22 ed       	ldi	r18, 0xD2	; 210
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	a9 01       	movw	r20, r18
    1d02:	84 9f       	mul	r24, r20
    1d04:	90 01       	movw	r18, r0
    1d06:	85 9f       	mul	r24, r21
    1d08:	30 0d       	add	r19, r0
    1d0a:	94 9f       	mul	r25, r20
    1d0c:	30 0d       	add	r19, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	94 e0       	ldi	r25, 0x04	; 4
    1d12:	35 95       	asr	r19
    1d14:	27 95       	ror	r18
    1d16:	9a 95       	dec	r25
    1d18:	e1 f7       	brne	.-8      	; 0x1d12 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	08 95       	ret

00001d1e <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    1d1e:	62 95       	swap	r22
    1d20:	66 0f       	add	r22, r22
    1d22:	66 0f       	add	r22, r22
    1d24:	60 7c       	andi	r22, 0xC0	; 192
    1d26:	87 70       	andi	r24, 0x07	; 7
    1d28:	86 2b       	or	r24, r22
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1d30:	08 95       	ret

00001d32 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    1d32:	ec eb       	ldi	r30, 0xBC	; 188
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8b 7f       	andi	r24, 0xFB	; 251
    1d3a:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    1d3c:	e4 e6       	ldi	r30, 0x64	; 100
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 68       	ori	r24, 0x80	; 128
    1d44:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    1d46:	08 95       	ret

00001d48 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    1d48:	10 92 9c 01 	sts	0x019C, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    1d4c:	88 e0       	ldi	r24, 0x08	; 8
    1d4e:	28 e1       	ldi	r18, 0x18	; 24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	a8 95       	wdr
    1d58:	20 93 60 00 	sts	0x0060, r18
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1d62:	80 91 60 00 	lds	r24, 0x0060
    1d66:	80 64       	ori	r24, 0x40	; 64
    1d68:	80 93 60 00 	sts	0x0060, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    1d70:	9f 5f       	subi	r25, 0xFF	; 255
    1d72:	80 91 9c 01 	lds	r24, 0x019C
    1d76:	88 23       	and	r24, r24
    1d78:	d9 f3       	breq	.-10     	; 0x1d70 <clockJitterWDT()+0x28>
  return(count);
  }
    1d7a:	89 2f       	mov	r24, r25
    1d7c:	08 95       	ret

00001d7e <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    1d7e:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    1d80:	90 91 b2 00 	lds	r25, 0x00B2
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    1d8a:	4f 5f       	subi	r20, 0xFF	; 255
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8e:	80 91 b2 00 	lds	r24, 0x00B2
    1d92:	98 17       	cp	r25, r24
    1d94:	d1 f3       	breq	.-12     	; 0x1d8a <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    1d96:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    1d9a:	10 92 9c 01 	sts	0x019C, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    1d9e:	88 e0       	ldi	r24, 0x08	; 8
    1da0:	28 e1       	ldi	r18, 0x18	; 24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	a8 95       	wdr
    1daa:	20 93 60 00 	sts	0x0060, r18
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1db4:	80 91 60 00 	lds	r24, 0x0060
    1db8:	80 64       	ori	r24, 0x40	; 64
    1dba:	80 93 60 00 	sts	0x0060, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	e0 e0       	ldi	r30, 0x00	; 0
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1dca:	a8 e1       	ldi	r26, 0x18	; 24
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    1dd0:	80 91 9c 01 	lds	r24, 0x019C
    1dd4:	88 23       	and	r24, r24
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <clockJitterEntropyByte()+0x5e>
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	2a c0       	rjmp	.+84     	; 0x1e30 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1ddc:	27 17       	cp	r18, r23
    1dde:	c1 f0       	breq	.+48     	; 0x1e10 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    1de0:	42 27       	eor	r20, r18
    1de2:	04 2e       	mov	r0, r20
    1de4:	42 95       	swap	r20
    1de6:	40 7f       	andi	r20, 0xF0	; 240
    1de8:	40 25       	eor	r20, r0
    1dea:	05 2e       	mov	r0, r21
    1dec:	54 2f       	mov	r21, r20
    1dee:	42 95       	swap	r20
    1df0:	4f 70       	andi	r20, 0x0F	; 15
    1df2:	04 26       	eor	r0, r20
    1df4:	46 95       	lsr	r20
    1df6:	54 27       	eor	r21, r20
    1df8:	45 27       	eor	r20, r21
    1dfa:	44 0f       	add	r20, r20
    1dfc:	44 0f       	add	r20, r20
    1dfe:	44 0f       	add	r20, r20
    1e00:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1e02:	99 0f       	add	r25, r25
    1e04:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1e06:	31 50       	subi	r19, 0x01	; 1
    1e08:	13 16       	cp	r1, r19
    1e0a:	0c f0       	brlt	.+2      	; 0x1e0e <clockJitterEntropyByte()+0x90>
    1e0c:	34 c0       	rjmp	.+104    	; 0x1e76 <clockJitterEntropyByte()+0xf8>
    1e0e:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    1e10:	10 92 9c 01 	sts	0x019C, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	a8 95       	wdr
    1e1a:	a0 93 60 00 	sts	0x0060, r26
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    1e24:	80 91 60 00 	lds	r24, 0x0060
    1e28:	80 64       	ori	r24, 0x40	; 64
    1e2a:	80 93 60 00 	sts	0x0060, r24
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    1e30:	80 91 b2 00 	lds	r24, 0x00B2
    1e34:	f8 17       	cp	r31, r24
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <clockJitterEntropyByte()+0xbe>
    1e38:	61 50       	subi	r22, 0x01	; 1
    1e3a:	ca cf       	rjmp	.-108    	; 0x1dd0 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    1e3c:	6e 17       	cp	r22, r30
    1e3e:	b9 f0       	breq	.+46     	; 0x1e6e <clockJitterEntropyByte()+0xf0>
    1e40:	46 27       	eor	r20, r22
    1e42:	04 2e       	mov	r0, r20
    1e44:	42 95       	swap	r20
    1e46:	40 7f       	andi	r20, 0xF0	; 240
    1e48:	40 25       	eor	r20, r0
    1e4a:	05 2e       	mov	r0, r21
    1e4c:	54 2f       	mov	r21, r20
    1e4e:	42 95       	swap	r20
    1e50:	4f 70       	andi	r20, 0x0F	; 15
    1e52:	04 26       	eor	r0, r20
    1e54:	46 95       	lsr	r20
    1e56:	54 27       	eor	r21, r20
    1e58:	45 27       	eor	r20, r21
    1e5a:	44 0f       	add	r20, r20
    1e5c:	44 0f       	add	r20, r20
    1e5e:	44 0f       	add	r20, r20
    1e60:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1e62:	99 0f       	add	r25, r25
    1e64:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1e66:	31 50       	subi	r19, 0x01	; 1
    1e68:	13 16       	cp	r1, r19
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <clockJitterEntropyByte()+0xf8>
    1e6c:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    1e6e:	f0 91 b2 00 	lds	r31, 0x00B2
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	ad cf       	rjmp	.-166    	; 0x1dd0 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    1e76:	88 e1       	ldi	r24, 0x18	; 24
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	80 93 60 00 	sts	0x0060, r24
    1e80:	10 92 60 00 	sts	0x0060, r1
    1e84:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    1e86:	89 2f       	mov	r24, r25
    1e88:	1f 91       	pop	r17
    1e8a:	08 95       	ret

00001e8c <captureEntropy1()>:

// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU(), _watchdogFired); }
    1e8c:	80 91 b2 00 	lds	r24, 0x00B2
    1e90:	66 b5       	in	r22, 0x26	; 38
    1e92:	40 91 9c 01 	lds	r20, 0x019C
    1e96:	90 91 9d 01 	lds	r25, 0x019D
    1e9a:	89 27       	eor	r24, r25
    1e9c:	0e 94 ae 10 	call	0x215c	; 0x215c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1ea0:	08 95       	ret

00001ea2 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1ea2:	8c b5       	in	r24, 0x2c	; 44
    1ea4:	8f 7b       	andi	r24, 0xBF	; 191
    1ea6:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    1ea8:	e4 e6       	ldi	r30, 0x64	; 100
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	84 60       	ori	r24, 0x04	; 4
    1eb0:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1eb2:	8a e0       	ldi	r24, 0x0A	; 10
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1eba:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    1ebc:	8d e0       	ldi	r24, 0x0D	; 13
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1ec4:	8b e0       	ldi	r24, 0x0B	; 11
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    1ecc:	8c e0       	ldi	r24, 0x0C	; 12
    1ece:	62 e0       	ldi	r22, 0x02	; 2
    1ed0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1ed4:	08 95       	ret

00001ed6 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    1ed6:	80 91 64 00 	lds	r24, 0x0064
    1eda:	82 fd       	sbrc	r24, 2
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <powerUpSPIIfDisabled()+0xc>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1ee2:	8a e0       	ldi	r24, 0x0A	; 10
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1eea:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    1eec:	80 91 64 00 	lds	r24, 0x0064
    1ef0:	8b 7f       	andi	r24, 0xFB	; 251
    1ef2:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    1ef6:	80 e5       	ldi	r24, 0x50	; 80
    1ef8:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1efe:	08 95       	ret

00001f00 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up(ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1f00:	87 e0       	ldi	r24, 0x07	; 7
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  }
    1f08:	08 95       	ret

00001f0a <minimisePowerWithoutSleep()>:
// Suitable for start-up and for belt-and-braces use before main sleep on each cycle,
// to ensure that nothing is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
void minimisePowerWithoutSleep()
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    1f0e:	88 e1       	ldi	r24, 0x18	; 24
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	80 93 60 00 	sts	0x0060, r24
    1f18:	10 92 60 00 	sts	0x0060, r1
    1f1c:	0f be       	out	0x3f, r0	; 63
  
  // Turn off external peripherals.
  power_intermittent_peripherals_disable();
    1f1e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1f22:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    1f26:	80 e8       	ldi	r24, 0x80	; 128
    1f28:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    1f2a:	8f e3       	ldi	r24, 0x3F	; 63
    1f2c:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    1f36:	04 e6       	ldi	r16, 0x64	; 100
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 81       	ld	r24, Z
    1f3e:	81 60       	ori	r24, 0x01	; 1
    1f40:	80 83       	st	Z, r24

  // Power down SPI during major sleep.
  powerDownSPI();
    1f42:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>

#ifdef DONT_USE_TIMER0
  power_timer0_disable();
#endif

  power_timer1_disable();
    1f46:	f8 01       	movw	r30, r16
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 60       	ori	r24, 0x08	; 8
    1f4c:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    1f54:	80 91 64 00 	lds	r24, 0x0064
    1f58:	87 fd       	sbrc	r24, 7
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <powerUpTWIIfDisabled()+0xc>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    1f60:	80 91 64 00 	lds	r24, 0x0064
    1f64:	8f 77       	andi	r24, 0x7F	; 127
    1f66:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    1f6a:	80 91 bc 00 	lds	r24, 0x00BC
    1f6e:	84 60       	ori	r24, 0x04	; 4
    1f70:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1f74:	85 e0       	ldi	r24, 0x05	; 5
    1f76:	92 e0       	ldi	r25, 0x02	; 2
    1f78:	0e 94 f6 21 	call	0x43ec	; 0x43ec <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    1f7c:	10 92 b8 00 	sts	0x00B8, r1
    1f80:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    1f82:	08 95       	ret

00001f84 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    1f8e:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    1f90:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    1f94:	81 17       	cp	r24, r17
    1f96:	e1 f1       	breq	.+120    	; 0x2010 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    1f98:	18 17       	cp	r17, r24
    1f9a:	10 f4       	brcc	.+4      	; 0x1fa0 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	39 c0       	rjmp	.+114    	; 0x2012 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    1fa0:	21 2f       	mov	r18, r17
    1fa2:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    1fa4:	21 30       	cpi	r18, 0x01	; 1
    1fa6:	19 f4       	brne	.+6      	; 0x1fae <sleepUntilSubCycleTime(unsigned char)+0x2a>
      {
      // Take a very short sleep, less than half a tick,
      // eg as may be some way into this tick already.
      //burnHundredsOfCyclesProductively();
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
    1fa8:	83 e1       	ldi	r24, 0x13	; 19
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	2e c0       	rjmp	.+92     	; 0x200a <sleepUntilSubCycleTime(unsigned char)+0x86>
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    1fae:	20 9f       	mul	r18, r16
    1fb0:	e0 01       	movw	r28, r0
    1fb2:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    if(msLeft >= 20)
    1fb4:	c4 31       	cpi	r28, 0x14	; 20
    1fb6:	d1 05       	cpc	r29, r1
    1fb8:	70 f0       	brcs	.+28     	; 0x1fd6 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    1fba:	c0 35       	cpi	r28, 0x50	; 80
    1fbc:	d1 05       	cpc	r29, r1
    1fbe:	38 f0       	brcs	.+14     	; 0x1fce <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    1fc0:	cd 54       	subi	r28, 0x4D	; 77
    1fc2:	d1 40       	sbci	r29, 0x01	; 1
    1fc4:	10 f0       	brcs	.+4      	; 0x1fca <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    1fc6:	84 e0       	ldi	r24, 0x04	; 4
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    1fd4:	dd cf       	rjmp	.-70     	; 0x1f90 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	02 97       	sbiw	r24, 0x02	; 2
    1fda:	87 5e       	subi	r24, 0xE7	; 231
    1fdc:	93 40       	sbci	r25, 0x03	; 3
    1fde:	10 f0       	brcs	.+4      	; 0x1fe4 <sleepUntilSubCycleTime(unsigned char)+0x60>
    1fe0:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    1fe4:	9e 01       	movw	r18, r28
    1fe6:	21 50       	subi	r18, 0x01	; 1
    1fe8:	30 40       	sbci	r19, 0x00	; 0
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	da 01       	movw	r26, r20
    1ff0:	c9 01       	movw	r24, r18
    1ff2:	63 e0       	ldi	r22, 0x03	; 3
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	aa 1f       	adc	r26, r26
    1ffa:	bb 1f       	adc	r27, r27
    1ffc:	6a 95       	dec	r22
    1ffe:	d1 f7       	brne	.-12     	; 0x1ff4 <sleepUntilSubCycleTime(unsigned char)+0x70>
    2000:	82 1b       	sub	r24, r18
    2002:	93 0b       	sbc	r25, r19
    2004:	a4 0b       	sbc	r26, r20
    2006:	b5 0b       	sbc	r27, r21
    2008:	02 97       	sbiw	r24, 0x02	; 2
    200a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    200e:	c0 cf       	rjmp	.-128    	; 0x1f90 <sleepUntilSubCycleTime(unsigned char)+0xc>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	08 95       	ret

0000201c <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    201c:	80 91 64 00 	lds	r24, 0x0064

// Flush any pending serial output and power it down.
void powerDownSerial()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    2020:	81 ff       	sbrs	r24, 1
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <powerDownSerial()+0xc>
    2024:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
#endif
  // Flush serial output and shut down to minimal power state including minimising leakage to serial lines!
  Serial.flush();
    2028:	87 e0       	ldi	r24, 0x07	; 7
    202a:	93 e0       	ldi	r25, 0x03	; 3
    202c:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <HardwareSerial::flush()>
  //flushSerialHW();
  Serial.end();
    2030:	87 e0       	ldi	r24, 0x07	; 7
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 04 26 	call	0x4c08	; 0x4c08 <HardwareSerial::end()>
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    2048:	80 91 64 00 	lds	r24, 0x0064
    204c:	82 60       	ori	r24, 0x02	; 2
    204e:	80 93 64 00 	sts	0x0064, r24
  }
    2052:	08 95       	ret

00002054 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This may churn PRNGs or gather entropy for example.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), 0, getSubCycleTime()); }
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
    205a:	88 23       	and	r24, r24
    205c:	39 f0       	breq	.+14     	; 0x206c <burnHundredsOfCyclesProductivelyAndPoll()+0x18>
    205e:	86 b5       	in	r24, 0x26	; 38
    2060:	40 91 b2 00 	lds	r20, 0x00B2
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	0e 94 ae 10 	call	0x215c	; 0x215c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    206a:	08 95       	ret
  else { captureEntropy1(); }
    206c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <captureEntropy1()>
    2070:	08 95       	ret

00002072 <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2072:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    2076:	81 ff       	sbrs	r24, 1
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <flushSerialProductive()+0x12>
    207a:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    2080:	0e 94 2a 10 	call	0x2054	; 0x2054 <burnHundredsOfCyclesProductivelyAndPoll()>
    2084:	80 91 c0 00 	lds	r24, 0x00C0
    2088:	85 ff       	sbrs	r24, 5
    208a:	fa cf       	rjmp	.-12     	; 0x2080 <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    208c:	87 e0       	ldi	r24, 0x07	; 7
    208e:	93 e0       	ldi	r25, 0x03	; 3
    2090:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <HardwareSerial::flush()>
  }
    2094:	08 95       	ret

00002096 <flushSerialSCTSensitive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2096:	80 91 64 00 	lds	r24, 0x0064
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    209a:	81 ff       	sbrs	r24, 1
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <flushSerialSCTSensitive()+0xc>
    209e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    20a2:	80 91 c0 00 	lds	r24, 0x00C0
    20a6:	85 fd       	sbrc	r24, 5
    20a8:	0b c0       	rjmp	.+22     	; 0x20c0 <flushSerialSCTSensitive()+0x2a>
    20aa:	80 91 b2 00 	lds	r24, 0x00B2
    20ae:	8b 3f       	cpi	r24, 0xFB	; 251
    20b0:	38 f4       	brcc	.+14     	; 0x20c0 <flushSerialSCTSensitive()+0x2a>
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline idle30AndPoll() { idleCPU(WDTO_30MS); pollIO(true); }
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <idleCPU(signed char)>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
    20be:	f1 cf       	rjmp	.-30     	; 0x20a2 <flushSerialSCTSensitive()+0xc>
    {
    idle30AndPoll(); // Save much power by idling CPU, though everything else runs.
    }
#endif
  flushSerialProductive();
    20c0:	0e 94 39 10 	call	0x2072	; 0x2072 <flushSerialProductive()>
  }
    20c4:	08 95       	ret

000020c6 <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is already powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    20c6:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    20ca:	81 fd       	sbrc	r24, 1
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <powerUpSerialIfDisabled()+0xc>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    20d2:	80 91 64 00 	lds	r24, 0x0064
    20d6:	8d 7f       	andi	r24, 0xFD	; 253
    20d8:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    20dc:	87 e0       	ldi	r24, 0x07	; 7
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	40 ec       	ldi	r20, 0xC0	; 192
    20e2:	52 e1       	ldi	r21, 0x12	; 18
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <HardwareSerial::begin(unsigned long)>
    20ec:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    20ee:	08 95       	ret

000020f0 <power_intermittent_peripherals_enable(bool)>:
// Enable power to intermittent peripherals.
//   * waitUntilStable  wait long enough (and maybe test) for I/O power to become stable.
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    20f0:	1f 93       	push	r17
    20f2:	18 2f       	mov	r17, r24
  {
  digitalWrite(IO_POWER_UP, HIGH);
    20f4:	87 e0       	ldi	r24, 0x07	; 7
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	0e 94 a8 24 	call	0x4950	; 0x4950 <digitalWrite>
  pinMode(IO_POWER_UP, OUTPUT);
    20fc:	87 e0       	ldi	r24, 0x07	; 7
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    2104:	11 23       	and	r17, r17
    2106:	21 f0       	breq	.+8      	; 0x2110 <power_intermittent_peripherals_enable(bool)+0x20>
    2108:	86 e0       	ldi	r24, 0x06	; 6
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    2110:	1f 91       	pop	r17
    2112:	08 95       	ret

00002114 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    2114:	80 91 61 00 	lds	r24, 0x0061
    2118:	8f 70       	andi	r24, 0x0F	; 15
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	11 f0       	breq	.+4      	; 0x2122 <powerSetup()+0xe>
    211e:	0e 94 40 03 	call	0x680	; 0x680 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2122:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    2126:	80 91 64 00 	lds	r24, 0x0064
    212a:	8f 6e       	ori	r24, 0xEF	; 239
    212c:	80 93 64 00 	sts	0x0064, r24

#ifndef DONT_USE_TIMER0
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2130:	80 91 64 00 	lds	r24, 0x0064
    2134:	8f 7d       	andi	r24, 0xDF	; 223
    2136:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    213a:	80 91 64 00 	lds	r24, 0x0064
    213e:	8f 7b       	andi	r24, 0xBF	; 191
    2140:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    2144:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    2148:	86 e0       	ldi	r24, 0x06	; 6
    214a:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    215a:	08 95       	ret

0000215c <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    215c:	20 91 a4 01 	lds	r18, 0x01A4
  b ^=s2;
    2160:	90 91 a5 01 	lds	r25, 0x01A5
    2164:	69 27       	eor	r22, r25
  c ^=s3;
    2166:	90 91 a2 01 	lds	r25, 0x01A2
    216a:	49 27       	eor	r20, r25
  x++;
    216c:	90 91 a3 01 	lds	r25, 0x01A3
    2170:	9f 5f       	subi	r25, 0xFF	; 255
    2172:	90 93 a3 01 	sts	0x01A3, r25
  a = (a^c^x);
    2176:	28 27       	eor	r18, r24
    2178:	24 27       	eor	r18, r20
    217a:	29 27       	eor	r18, r25
    217c:	20 93 a4 01 	sts	0x01A4, r18
  b = (b+a);
    2180:	62 0f       	add	r22, r18
    2182:	60 93 a5 01 	sts	0x01A5, r22
  c = ((c+(b>>1))^a);
    2186:	66 95       	lsr	r22
    2188:	64 0f       	add	r22, r20
    218a:	62 27       	eor	r22, r18
    218c:	60 93 a2 01 	sts	0x01A2, r22
  }
    2190:	08 95       	ret

00002192 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    2192:	80 91 a3 01 	lds	r24, 0x01A3
    2196:	8f 5f       	subi	r24, 0xFF	; 255
    2198:	80 93 a3 01 	sts	0x01A3, r24
  a = (a^c^x);       //note the mix of addition and XOR
    219c:	20 91 a2 01 	lds	r18, 0x01A2
    21a0:	90 91 a4 01 	lds	r25, 0x01A4
    21a4:	92 27       	eor	r25, r18
    21a6:	98 27       	eor	r25, r24
    21a8:	90 93 a4 01 	sts	0x01A4, r25
  b = (b+a);         //And the use of very few instructions
    21ac:	80 91 a5 01 	lds	r24, 0x01A5
    21b0:	89 0f       	add	r24, r25
    21b2:	80 93 a5 01 	sts	0x01A5, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    21b6:	86 95       	lsr	r24
    21b8:	82 0f       	add	r24, r18
    21ba:	89 27       	eor	r24, r25
    21bc:	80 93 a2 01 	sts	0x01A2, r24
  return(c);         //low order bits of other variables
  }
    21c0:	08 95       	ret

000021c2 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    21c2:	85 ef       	ldi	r24, 0xF5	; 245
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	80 93 a3 01 	sts	0x01A3, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    21ca:	08 95       	ret

000021cc <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	18 2f       	mov	r17, r24
    21d4:	09 2f       	mov	r16, r25
    21d6:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    21d8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    21dc:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    21de:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21e0:	87 e8       	ldi	r24, 0x87	; 135
    21e2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21e4:	0d b4       	in	r0, 0x2d	; 45
    21e6:	07 fe       	sbrs	r0, 7
    21e8:	fd cf       	rjmp	.-6      	; 0x21e4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21ea:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21ec:	0d b4       	in	r0, 0x2d	; 45
    21ee:	07 fe       	sbrs	r0, 7
    21f0:	fd cf       	rjmp	.-6      	; 0x21ec <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    21f2:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    21f4:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    21f6:	8f e7       	ldi	r24, 0x7F	; 127
    21f8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21fa:	0d b4       	in	r0, 0x2d	; 45
    21fc:	07 fe       	sbrs	r0, 7
    21fe:	fd cf       	rjmp	.-6      	; 0x21fa <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    2200:	8e b5       	in	r24, 0x2e	; 46
    2202:	81 2f       	mov	r24, r17
    2204:	90 2f       	mov	r25, r16
    2206:	9c 01       	movw	r18, r24
    2208:	f9 01       	movw	r30, r18
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	07 c0       	rjmp	.+14     	; 0x221c <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    220e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2210:	0d b4       	in	r0, 0x2d	; 45
    2212:	07 fe       	sbrs	r0, 7
    2214:	fd cf       	rjmp	.-6      	; 0x2210 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    2216:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    2218:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    221a:	9f 5f       	subi	r25, 0xFF	; 255
    221c:	9f 15       	cp	r25, r15
    221e:	b8 f3       	brcs	.-18     	; 0x220e <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    2220:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2222:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2224:	88 e8       	ldi	r24, 0x88	; 136
    2226:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2228:	0d b4       	in	r0, 0x2d	; 45
    222a:	07 fe       	sbrs	r0, 7
    222c:	fd cf       	rjmp	.-6      	; 0x2228 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2232:	0d b4       	in	r0, 0x2d	; 45
    2234:	07 fe       	sbrs	r0, 7
    2236:	fd cf       	rjmp	.-6      	; 0x2232 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2238:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    223a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    223c:	88 e8       	ldi	r24, 0x88	; 136
    223e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2240:	0d b4       	in	r0, 0x2d	; 45
    2242:	07 fe       	sbrs	r0, 7
    2244:	fd cf       	rjmp	.-6      	; 0x2240 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2246:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2248:	0d b4       	in	r0, 0x2d	; 45
    224a:	07 fe       	sbrs	r0, 7
    224c:	fd cf       	rjmp	.-6      	; 0x2248 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    224e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2250:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2252:	85 e8       	ldi	r24, 0x85	; 133
    2254:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2256:	0d b4       	in	r0, 0x2d	; 45
    2258:	07 fe       	sbrs	r0, 7
    225a:	fd cf       	rjmp	.-6      	; 0x2256 <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    225c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    225e:	0d b4       	in	r0, 0x2d	; 45
    2260:	07 fe       	sbrs	r0, 7
    2262:	fd cf       	rjmp	.-6      	; 0x225e <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2264:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2266:	0d b4       	in	r0, 0x2d	; 45
    2268:	07 fe       	sbrs	r0, 7
    226a:	fd cf       	rjmp	.-6      	; 0x2266 <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    226c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    226e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2270:	83 e8       	ldi	r24, 0x83	; 131
    2272:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2274:	0d b4       	in	r0, 0x2d	; 45
    2276:	07 fe       	sbrs	r0, 7
    2278:	fd cf       	rjmp	.-6      	; 0x2274 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    227a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    227c:	0d b4       	in	r0, 0x2d	; 45
    227e:	07 fe       	sbrs	r0, 7
    2280:	fd cf       	rjmp	.-6      	; 0x227c <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2282:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2284:	0d b4       	in	r0, 0x2d	; 45
    2286:	07 fe       	sbrs	r0, 7
    2288:	fd cf       	rjmp	.-6      	; 0x2284 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    228a:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    228c:	44 23       	and	r20, r20
    228e:	11 f0       	breq	.+4      	; 0x2294 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    2290:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
  }
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	ff 90       	pop	r15
    229a:	08 95       	ret

0000229c <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	18 2f       	mov	r17, r24
    22a4:	f6 2e       	mov	r15, r22
    22a6:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    22a8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    22ac:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22ae:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22b0:	88 e8       	ldi	r24, 0x88	; 136
    22b2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22b4:	0d b4       	in	r0, 0x2d	; 45
    22b6:	07 fe       	sbrs	r0, 7
    22b8:	fd cf       	rjmp	.-6      	; 0x22b4 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22be:	0d b4       	in	r0, 0x2d	; 45
    22c0:	07 fe       	sbrs	r0, 7
    22c2:	fd cf       	rjmp	.-6      	; 0x22be <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22c4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22c6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22c8:	88 e8       	ldi	r24, 0x88	; 136
    22ca:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22cc:	0d b4       	in	r0, 0x2d	; 45
    22ce:	07 fe       	sbrs	r0, 7
    22d0:	fd cf       	rjmp	.-6      	; 0x22cc <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22d2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22d4:	0d b4       	in	r0, 0x2d	; 45
    22d6:	07 fe       	sbrs	r0, 7
    22d8:	fd cf       	rjmp	.-6      	; 0x22d4 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22da:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22dc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22de:	8e ef       	ldi	r24, 0xFE	; 254
    22e0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22e2:	0d b4       	in	r0, 0x2d	; 45
    22e4:	07 fe       	sbrs	r0, 7
    22e6:	fd cf       	rjmp	.-6      	; 0x22e2 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    22e8:	81 2f       	mov	r24, r17
    22ea:	10 34       	cpi	r17, 0x40	; 64
    22ec:	08 f0       	brcs	.+2      	; 0x22f0 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    22ee:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22f0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22f2:	0d b4       	in	r0, 0x2d	; 45
    22f4:	07 fe       	sbrs	r0, 7
    22f6:	fd cf       	rjmp	.-6      	; 0x22f2 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22f8:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    22fa:	00 23       	and	r16, r16
    22fc:	11 f4       	brne	.+4      	; 0x2302 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    2302:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2304:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2306:	85 e8       	ldi	r24, 0x85	; 133
    2308:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    230a:	0d b4       	in	r0, 0x2d	; 45
    230c:	07 fe       	sbrs	r0, 7
    230e:	fd cf       	rjmp	.-6      	; 0x230a <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2310:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2312:	0d b4       	in	r0, 0x2d	; 45
    2314:	07 fe       	sbrs	r0, 7
    2316:	fd cf       	rjmp	.-6      	; 0x2312 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2318:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    231a:	ff 20       	and	r15, r15
    231c:	11 f4       	brne	.+4      	; 0x2322 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    2322:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2324:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2326:	86 e8       	ldi	r24, 0x86	; 134
    2328:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    232a:	0d b4       	in	r0, 0x2d	; 45
    232c:	07 fe       	sbrs	r0, 7
    232e:	fd cf       	rjmp	.-6      	; 0x232a <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2330:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2332:	0d b4       	in	r0, 0x2d	; 45
    2334:	07 fe       	sbrs	r0, 7
    2336:	fd cf       	rjmp	.-6      	; 0x2332 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2338:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    233a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    233c:	83 e8       	ldi	r24, 0x83	; 131
    233e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2340:	0d b4       	in	r0, 0x2d	; 45
    2342:	07 fe       	sbrs	r0, 7
    2344:	fd cf       	rjmp	.-6      	; 0x2340 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2346:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2348:	0d b4       	in	r0, 0x2d	; 45
    234a:	07 fe       	sbrs	r0, 7
    234c:	fd cf       	rjmp	.-6      	; 0x2348 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    234e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2350:	0d b4       	in	r0, 0x2d	; 45
    2352:	07 fe       	sbrs	r0, 7
    2354:	fd cf       	rjmp	.-6      	; 0x2350 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2356:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2358:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    235a:	87 e8       	ldi	r24, 0x87	; 135
    235c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    235e:	0d b4       	in	r0, 0x2d	; 45
    2360:	07 fe       	sbrs	r0, 7
    2362:	fd cf       	rjmp	.-6      	; 0x235e <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2364:	85 e0       	ldi	r24, 0x05	; 5
    2366:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2368:	0d b4       	in	r0, 0x2d	; 45
    236a:	07 fe       	sbrs	r0, 7
    236c:	fd cf       	rjmp	.-6      	; 0x2368 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    236e:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    2370:	22 23       	and	r18, r18
    2372:	11 f0       	breq	.+4      	; 0x2378 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    2374:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
  }
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	08 95       	ret

00002380 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2386:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    238a:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    238c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    238e:	88 e8       	ldi	r24, 0x88	; 136
    2390:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2392:	0d b4       	in	r0, 0x2d	; 45
    2394:	07 fe       	sbrs	r0, 7
    2396:	fd cf       	rjmp	.-6      	; 0x2392 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    239c:	0d b4       	in	r0, 0x2d	; 45
    239e:	07 fe       	sbrs	r0, 7
    23a0:	fd cf       	rjmp	.-6      	; 0x239c <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    23a2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    23a4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23a6:	88 e8       	ldi	r24, 0x88	; 136
    23a8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23aa:	0d b4       	in	r0, 0x2d	; 45
    23ac:	07 fe       	sbrs	r0, 7
    23ae:	fd cf       	rjmp	.-6      	; 0x23aa <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23b0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23b2:	0d b4       	in	r0, 0x2d	; 45
    23b4:	07 fe       	sbrs	r0, 7
    23b6:	fd cf       	rjmp	.-6      	; 0x23b2 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    23b8:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    23ba:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23c0:	0d b4       	in	r0, 0x2d	; 45
    23c2:	07 fe       	sbrs	r0, 7
    23c4:	fd cf       	rjmp	.-6      	; 0x23c0 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    23c8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    23ca:	0d b4       	in	r0, 0x2d	; 45
    23cc:	07 fe       	sbrs	r0, 7
    23ce:	fd cf       	rjmp	.-6      	; 0x23ca <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    23d0:	89 91       	ld	r24, Y+
    23d2:	8f 3f       	cpi	r24, 0xFF	; 255
    23d4:	c9 f7       	brne	.-14     	; 0x23c8 <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    23d6:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    23d8:	99 23       	and	r25, r25
    23da:	11 f0       	breq	.+4      	; 0x23e0 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    23dc:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
  }
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    23ec:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    23f0:	fe 01       	movw	r30, r28
    23f2:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    23f4:	21 96       	adiw	r28, 0x01	; 1
    23f6:	fe 01       	movw	r30, r28
    23f8:	24 91       	lpm	r18, Z+
    23fa:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    23fc:	9f 3f       	cpi	r25, 0xFF	; 255
    23fe:	69 f0       	breq	.+26     	; 0x241a <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2400:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    2402:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2404:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2406:	0d b4       	in	r0, 0x2d	; 45
    2408:	07 fe       	sbrs	r0, 7
    240a:	fd cf       	rjmp	.-6      	; 0x2406 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    240c:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    240e:	0d b4       	in	r0, 0x2d	; 45
    2410:	07 fe       	sbrs	r0, 7
    2412:	fd cf       	rjmp	.-6      	; 0x240e <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2414:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    2416:	22 96       	adiw	r28, 0x02	; 2
    2418:	eb cf       	rjmp	.-42     	; 0x23f0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    241a:	88 23       	and	r24, r24
    241c:	11 f0       	breq	.+4      	; 0x2422 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    241e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
  }
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	08 95       	ret

00002428 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2428:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    242c:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    242e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2430:	87 e8       	ldi	r24, 0x87	; 135
    2432:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2434:	0d b4       	in	r0, 0x2d	; 45
    2436:	07 fe       	sbrs	r0, 7
    2438:	fd cf       	rjmp	.-6      	; 0x2434 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    243a:	80 e8       	ldi	r24, 0x80	; 128
    243c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    243e:	0d b4       	in	r0, 0x2d	; 45
    2440:	07 fe       	sbrs	r0, 7
    2442:	fd cf       	rjmp	.-6      	; 0x243e <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2444:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2446:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2448:	87 e8       	ldi	r24, 0x87	; 135
    244a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    244c:	0d b4       	in	r0, 0x2d	; 45
    244e:	07 fe       	sbrs	r0, 7
    2450:	fd cf       	rjmp	.-6      	; 0x244c <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2452:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2454:	0d b4       	in	r0, 0x2d	; 45
    2456:	07 fe       	sbrs	r0, 7
    2458:	fd cf       	rjmp	.-6      	; 0x2454 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    245a:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    245c:	99 23       	and	r25, r25
    245e:	11 f0       	breq	.+4      	; 0x2464 <RFM22PowerOnInit()+0x3c>
    2460:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
    2464:	08 95       	ret

00002466 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    246a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    246e:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    2470:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2476:	0d b4       	in	r0, 0x2d	; 45
    2478:	07 fe       	sbrs	r0, 7
    247a:	fd cf       	rjmp	.-6      	; 0x2476 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    247c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    247e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2480:	0d b4       	in	r0, 0x2d	; 45
    2482:	07 fe       	sbrs	r0, 7
    2484:	fd cf       	rjmp	.-6      	; 0x2480 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    2486:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2488:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    248a:	0d b4       	in	r0, 0x2d	; 45
    248c:	07 fe       	sbrs	r0, 7
    248e:	fd cf       	rjmp	.-6      	; 0x248a <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    2490:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    2492:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    2494:	99 23       	and	r25, r25
    2496:	11 f0       	breq	.+4      	; 0x249c <RFM22ReadStatusBoth()+0x36>
    2498:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
    249c:	90 2f       	mov	r25, r16
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	21 2f       	mov	r18, r17
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	28 2b       	or	r18, r24
    24a6:	39 2b       	or	r19, r25
  return(result);
  }
    24a8:	c9 01       	movw	r24, r18
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	08 95       	ret

000024b0 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    24b0:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    24b4:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    24b6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24b8:	87 e8       	ldi	r24, 0x87	; 135
    24ba:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24bc:	0d b4       	in	r0, 0x2d	; 45
    24be:	07 fe       	sbrs	r0, 7
    24c0:	fd cf       	rjmp	.-6      	; 0x24bc <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24c2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24c4:	0d b4       	in	r0, 0x2d	; 45
    24c6:	07 fe       	sbrs	r0, 7
    24c8:	fd cf       	rjmp	.-6      	; 0x24c4 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24ca:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    24cc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24ce:	88 e8       	ldi	r24, 0x88	; 136
    24d0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24d2:	0d b4       	in	r0, 0x2d	; 45
    24d4:	07 fe       	sbrs	r0, 7
    24d6:	fd cf       	rjmp	.-6      	; 0x24d2 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24dc:	0d b4       	in	r0, 0x2d	; 45
    24de:	07 fe       	sbrs	r0, 7
    24e0:	fd cf       	rjmp	.-6      	; 0x24dc <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24e2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    24e4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24e6:	88 e8       	ldi	r24, 0x88	; 136
    24e8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24ea:	0d b4       	in	r0, 0x2d	; 45
    24ec:	07 fe       	sbrs	r0, 7
    24ee:	fd cf       	rjmp	.-6      	; 0x24ea <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24f0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    24f2:	0d b4       	in	r0, 0x2d	; 45
    24f4:	07 fe       	sbrs	r0, 7
    24f6:	fd cf       	rjmp	.-6      	; 0x24f2 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    24f8:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    24fa:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    24fc:	85 e8       	ldi	r24, 0x85	; 133
    24fe:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2500:	0d b4       	in	r0, 0x2d	; 45
    2502:	07 fe       	sbrs	r0, 7
    2504:	fd cf       	rjmp	.-6      	; 0x2500 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2506:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2508:	0d b4       	in	r0, 0x2d	; 45
    250a:	07 fe       	sbrs	r0, 7
    250c:	fd cf       	rjmp	.-6      	; 0x2508 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    250e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2510:	0d b4       	in	r0, 0x2d	; 45
    2512:	07 fe       	sbrs	r0, 7
    2514:	fd cf       	rjmp	.-6      	; 0x2510 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2516:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2518:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    251a:	83 e8       	ldi	r24, 0x83	; 131
    251c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    251e:	0d b4       	in	r0, 0x2d	; 45
    2520:	07 fe       	sbrs	r0, 7
    2522:	fd cf       	rjmp	.-6      	; 0x251e <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2524:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2526:	0d b4       	in	r0, 0x2d	; 45
    2528:	07 fe       	sbrs	r0, 7
    252a:	fd cf       	rjmp	.-6      	; 0x2526 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    252c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    252e:	0d b4       	in	r0, 0x2d	; 45
    2530:	07 fe       	sbrs	r0, 7
    2532:	fd cf       	rjmp	.-6      	; 0x252e <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2534:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    2536:	99 23       	and	r25, r25
    2538:	11 f0       	breq	.+4      	; 0x253e <RFM22ModeStandbyAndClearState()+0x8e>
    253a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
    253e:	08 95       	ret

00002540 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    2540:	ff 92       	push	r15
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2546:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    254a:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    254c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    254e:	85 e8       	ldi	r24, 0x85	; 133
    2550:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2552:	0d b4       	in	r0, 0x2d	; 45
    2554:	07 fe       	sbrs	r0, 7
    2556:	fd cf       	rjmp	.-6      	; 0x2552 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2558:	84 e0       	ldi	r24, 0x04	; 4
    255a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    255c:	0d b4       	in	r0, 0x2d	; 45
    255e:	07 fe       	sbrs	r0, 7
    2560:	fd cf       	rjmp	.-6      	; 0x255c <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2562:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2564:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2566:	86 e8       	ldi	r24, 0x86	; 134
    2568:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    256a:	0d b4       	in	r0, 0x2d	; 45
    256c:	07 fe       	sbrs	r0, 7
    256e:	fd cf       	rjmp	.-6      	; 0x256a <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2570:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2572:	0d b4       	in	r0, 0x2d	; 45
    2574:	07 fe       	sbrs	r0, 7
    2576:	fd cf       	rjmp	.-6      	; 0x2572 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2578:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    257a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    257c:	83 e8       	ldi	r24, 0x83	; 131
    257e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2580:	0d b4       	in	r0, 0x2d	; 45
    2582:	07 fe       	sbrs	r0, 7
    2584:	fd cf       	rjmp	.-6      	; 0x2580 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2586:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2588:	0d b4       	in	r0, 0x2d	; 45
    258a:	07 fe       	sbrs	r0, 7
    258c:	fd cf       	rjmp	.-6      	; 0x2588 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    258e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2590:	0d b4       	in	r0, 0x2d	; 45
    2592:	07 fe       	sbrs	r0, 7
    2594:	fd cf       	rjmp	.-6      	; 0x2590 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2596:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2598:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    259a:	87 e8       	ldi	r24, 0x87	; 135
    259c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    259e:	0d b4       	in	r0, 0x2d	; 45
    25a0:	07 fe       	sbrs	r0, 7
    25a2:	fd cf       	rjmp	.-6      	; 0x259e <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    25a4:	89 e0       	ldi	r24, 0x09	; 9
    25a6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25a8:	0d b4       	in	r0, 0x2d	; 45
    25aa:	07 fe       	sbrs	r0, 7
    25ac:	fd cf       	rjmp	.-6      	; 0x25a8 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    25ae:	2a 9a       	sbi	0x05, 2	; 5
    25b0:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    25b2:	03 e0       	ldi	r16, 0x03	; 3
    25b4:	13 c0       	rjmp	.+38     	; 0x25dc <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    25bc:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    25be:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25c0:	0d b4       	in	r0, 0x2d	; 45
    25c2:	07 fe       	sbrs	r0, 7
    25c4:	fd cf       	rjmp	.-6      	; 0x25c0 <RFM22TXFIFO()+0x80>
  return(SPDR);
    25c6:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    25c8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    25ca:	0d b4       	in	r0, 0x2d	; 45
    25cc:	07 fe       	sbrs	r0, 7
    25ce:	fd cf       	rjmp	.-6      	; 0x25ca <RFM22TXFIFO()+0x8a>
  return(SPDR);
    25d0:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    25d2:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    25d4:	82 ff       	sbrs	r24, 2
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <RFM22TXFIFO()+0x9c>
    25d8:	11 e0       	ldi	r17, 0x01	; 1
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    25dc:	11 50       	subi	r17, 0x01	; 1
    25de:	58 f7       	brcc	.-42     	; 0x25b6 <RFM22TXFIFO()+0x76>
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    25e2:	ff 20       	and	r15, r15
    25e4:	11 f0       	breq	.+4      	; 0x25ea <RFM22TXFIFO()+0xaa>
    25e6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
  return(result);
  }
    25ea:	81 2f       	mov	r24, r17
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	08 95       	ret

000025f4 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    25f8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <powerUpSPIIfDisabled()>
    25fc:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    25fe:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2600:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2602:	0d b4       	in	r0, 0x2d	; 45
    2604:	07 fe       	sbrs	r0, 7
    2606:	fd cf       	rjmp	.-6      	; 0x2602 <RFM22CheckConnected()+0xe>
  return(SPDR);
    2608:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    260a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    260c:	0d b4       	in	r0, 0x2d	; 45
    260e:	07 fe       	sbrs	r0, 7
    2610:	fd cf       	rjmp	.-6      	; 0x260c <RFM22CheckConnected()+0x18>
  return(SPDR);
    2612:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2614:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    2616:	18 30       	cpi	r17, 0x08	; 8
    2618:	a1 f4       	brne	.+40     	; 0x2642 <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    261a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2620:	0d b4       	in	r0, 0x2d	; 45
    2622:	07 fe       	sbrs	r0, 7
    2624:	fd cf       	rjmp	.-6      	; 0x2620 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    2626:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2628:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    262a:	0d b4       	in	r0, 0x2d	; 45
    262c:	07 fe       	sbrs	r0, 7
    262e:	fd cf       	rjmp	.-6      	; 0x262a <RFM22CheckConnected()+0x36>
  return(SPDR);
    2630:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2632:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    2634:	16 30       	cpi	r17, 0x06	; 6
    2636:	11 f4       	brne	.+4      	; 0x263c <RFM22CheckConnected()+0x48>
    2638:	11 e0       	ldi	r17, 0x01	; 1
    263a:	10 c0       	rjmp	.+32     	; 0x265c <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    263c:	86 e7       	ldi	r24, 0x76	; 118
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    2642:	85 e6       	ldi	r24, 0x65	; 101
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    264a:	81 2f       	mov	r24, r17
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	60 e1       	ldi	r22, 0x10	; 16
    2650:	70 e0       	ldi	r23, 0x00	; 0
    2652:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    2656:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
    265a:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    265c:	00 23       	and	r16, r16
    265e:	11 f0       	breq	.+4      	; 0x2664 <RFM22CheckConnected()+0x70>
    2660:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <powerDownSPI()>
  return(isOK);
  }
    2664:	81 2f       	mov	r24, r17
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	08 95       	ret

0000266c <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    266c:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    266e:	f9 99       	sbic	0x1f, 1	; 31
    2670:	fe cf       	rjmp	.-4      	; 0x266e <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2672:	32 bd       	out	0x22, r19	; 34
    2674:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2676:	f8 9a       	sbi	0x1f, 0	; 31
    2678:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    267a:	08 95       	ret

0000267c <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    267c:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    267e:	f9 99       	sbic	0x1f, 1	; 31
    2680:	fe cf       	rjmp	.-4      	; 0x267e <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2682:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2684:	32 bd       	out	0x22, r19	; 34
    2686:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2688:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	fa 9a       	sbi	0x1f, 2	; 31
    2690:	f9 9a       	sbi	0x1f, 1	; 31
    2692:	0f be       	out	0x3f, r0	; 63
}
    2694:	08 95       	ret

00002696 <getMinutesSinceMidnightLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2696:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2698:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    269a:	20 91 a7 01 	lds	r18, 0x01A7
    269e:	30 91 a8 01 	lds	r19, 0x01A8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26a2:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    26a4:	c9 01       	movw	r24, r18
    26a6:	08 95       	ret

000026a8 <getMinutesLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    26a8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26aa:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    26ac:	80 91 a7 01 	lds	r24, 0x01A7
    26b0:	90 91 a8 01 	lds	r25, 0x01A8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26b4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    26b6:	6c e3       	ldi	r22, 0x3C	; 60
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
  return(result);
  }

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    26be:	08 95       	ret

000026c0 <getHoursLT()>:
// Useful to fetch time atomically for scheduling purposes.
// Preserves interrupt state.
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    26c0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26c2:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    26c4:	80 91 a7 01 	lds	r24, 0x01A7
    26c8:	90 91 a8 01 	lds	r25, 0x01A8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26cc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    26ce:	6c e3       	ldi	r22, 0x3C	; 60
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    26d6:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    26d8:	08 95       	ret

000026da <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    26da:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    26dc:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26de:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    26e0:	88 e0       	ldi	r24, 0x08	; 8
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	66 e3       	ldi	r22, 0x36	; 54
    26e6:	73 e1       	ldi	r23, 0x13	; 19
    26e8:	0e 94 a8 03 	call	0x750	; 0x750 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    26ec:	2f ef       	ldi	r18, 0xFF	; 255
    26ee:	8f 3f       	cpi	r24, 0xFF	; 255
    26f0:	92 07       	cpc	r25, r18
    26f2:	21 f0       	breq	.+8      	; 0x26fc <restoreRTC()+0x22>
    26f4:	90 93 aa 01 	sts	0x01AA, r25
    26f8:	80 93 a9 01 	sts	0x01A9, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26fc:	f9 99       	sbic	0x1f, 1	; 31
    26fe:	fe cf       	rjmp	.-4      	; 0x26fc <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2700:	8a e0       	ldi	r24, 0x0A	; 10
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	92 bd       	out	0x22, r25	; 34
    2706:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2708:	f8 9a       	sbi	0x1f, 0	; 31
    270a:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    270c:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    270e:	60 3c       	cpi	r22, 0xC0	; 192
    2710:	90 f5       	brcc	.+100    	; 0x2776 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    2712:	86 2f       	mov	r24, r22
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	23 e0       	ldi	r18, 0x03	; 3
    2718:	95 95       	asr	r25
    271a:	87 95       	ror	r24
    271c:	2a 95       	dec	r18
    271e:	e1 f7       	brne	.-8      	; 0x2718 <restoreRTC()+0x3e>
    2720:	2c e3       	ldi	r18, 0x3C	; 60
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	82 9f       	mul	r24, r18
    2726:	a0 01       	movw	r20, r0
    2728:	83 9f       	mul	r24, r19
    272a:	50 0d       	add	r21, r0
    272c:	92 9f       	mul	r25, r18
    272e:	50 0d       	add	r21, r0
    2730:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    2732:	9a 01       	movw	r18, r20
    2734:	28 5f       	subi	r18, 0xF8	; 248
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    2738:	86 2f       	mov	r24, r22
    273a:	87 70       	andi	r24, 0x07	; 7
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	59 f0       	breq	.+22     	; 0x2756 <restoreRTC()+0x7c>
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	28 f0       	brcs	.+10     	; 0x274e <restoreRTC()+0x74>
    2744:	83 30       	cpi	r24, 0x03	; 3
    2746:	59 f0       	breq	.+22     	; 0x275e <restoreRTC()+0x84>
    2748:	87 30       	cpi	r24, 0x07	; 7
    274a:	a9 f4       	brne	.+42     	; 0x2776 <restoreRTC()+0x9c>
    274c:	0b c0       	rjmp	.+22     	; 0x2764 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    274e:	9a 01       	movw	r18, r20
    2750:	2b 5c       	subi	r18, 0xCB	; 203
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	07 c0       	rjmp	.+14     	; 0x2764 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    2756:	9a 01       	movw	r18, r20
    2758:	2a 5d       	subi	r18, 0xDA	; 218
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    275e:	9a 01       	movw	r18, r20
    2760:	29 5e       	subi	r18, 0xE9	; 233
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2764:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2766:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    2768:	30 93 a8 01 	sts	0x01A8, r19
    276c:	20 93 a7 01 	sts	0x01A7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2770:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <restoreRTC()+0x9e>

  return(true);
    2776:	80 e0       	ldi	r24, 0x00	; 0
  }
    2778:	1f 91       	pop	r17
    277a:	08 95       	ret

0000277c <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    277c:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    277e:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2780:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    2782:	80 91 a7 01 	lds	r24, 0x01A7
    2786:	90 91 a8 01 	lds	r25, 0x01A8
    278a:	6f e0       	ldi	r22, 0x0F	; 15
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    2792:	46 2f       	mov	r20, r22
    2794:	44 0f       	add	r20, r20
    2796:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	63 70       	andi	r22, 0x03	; 3
    279c:	70 70       	andi	r23, 0x00	; 0
    279e:	61 30       	cpi	r22, 0x01	; 1
    27a0:	71 05       	cpc	r23, r1
    27a2:	39 f0       	breq	.+14     	; 0x27b2 <persistRTC()+0x36>
    27a4:	62 30       	cpi	r22, 0x02	; 2
    27a6:	71 05       	cpc	r23, r1
    27a8:	31 f0       	breq	.+12     	; 0x27b6 <persistRTC()+0x3a>
    27aa:	67 2b       	or	r22, r23
    27ac:	29 f4       	brne	.+10     	; 0x27b8 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    27ae:	47 60       	ori	r20, 0x07	; 7
    27b0:	03 c0       	rjmp	.+6      	; 0x27b8 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    27b2:	43 60       	ori	r20, 0x03	; 3
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    27b6:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    27b8:	f9 99       	sbic	0x1f, 1	; 31
    27ba:	fe cf       	rjmp	.-4      	; 0x27b8 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    27bc:	8a e0       	ldi	r24, 0x0A	; 10
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	92 bd       	out	0x22, r25	; 34
    27c2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    27c4:	f8 9a       	sbi	0x1f, 0	; 31
    27c6:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    27c8:	84 17       	cp	r24, r20
    27ca:	91 f1       	breq	.+100    	; 0x2830 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    27cc:	24 2f       	mov	r18, r20
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	82 23       	and	r24, r18
    27d4:	93 23       	and	r25, r19
    27d6:	28 17       	cp	r18, r24
    27d8:	39 07       	cpc	r19, r25
    27da:	71 f0       	breq	.+28     	; 0x27f8 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    27dc:	f9 99       	sbic	0x1f, 1	; 31
    27de:	fe cf       	rjmp	.-4      	; 0x27dc <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    27e0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    27e2:	8a e0       	ldi	r24, 0x0A	; 10
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	92 bd       	out	0x22, r25	; 34
    27e8:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    27ea:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	fa 9a       	sbi	0x1f, 2	; 31
    27f2:	f9 9a       	sbi	0x1f, 1	; 31
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	05 c0       	rjmp	.+10     	; 0x2802 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    27f8:	8a e0       	ldi	r24, 0x0A	; 10
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	64 2f       	mov	r22, r20
    27fe:	0e 94 7d 07 	call	0xefa	; 0xefa <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    2802:	88 e0       	ldi	r24, 0x08	; 8
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	66 e3       	ldi	r22, 0x36	; 54
    2808:	73 e1       	ldi	r23, 0x13	; 19
    280a:	0e 94 a8 03 	call	0x750	; 0x750 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    280e:	20 91 a9 01 	lds	r18, 0x01A9
    2812:	30 91 aa 01 	lds	r19, 0x01AA
    2816:	82 17       	cp	r24, r18
    2818:	93 07       	cpc	r25, r19
    281a:	51 f0       	breq	.+20     	; 0x2830 <persistRTC()+0xb4>
    281c:	60 91 a9 01 	lds	r22, 0x01A9
    2820:	70 91 aa 01 	lds	r23, 0x01AA
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    2824:	88 e0       	ldi	r24, 0x08	; 8
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	4e e3       	ldi	r20, 0x3E	; 62
    282a:	53 e1       	ldi	r21, 0x13	; 19
    282c:	0e 94 be 03 	call	0x77c	; 0x77c <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2830:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    2832:	1f 91       	pop	r17
    2834:	08 95       	ret

00002836 <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    2836:	1f 93       	push	r17
    2838:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    283a:	88 31       	cpi	r24, 0x18	; 24
    283c:	91 05       	cpc	r25, r1
    283e:	10 f5       	brcc	.+68     	; 0x2884 <setHoursMinutesLT(int, int)+0x4e>
    2840:	77 fd       	sbrc	r23, 7
    2842:	20 c0       	rjmp	.+64     	; 0x2884 <setHoursMinutesLT(int, int)+0x4e>
    2844:	6c 33       	cpi	r22, 0x3C	; 60
    2846:	71 05       	cpc	r23, r1
    2848:	ec f4       	brge	.+58     	; 0x2884 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    284a:	8c e3       	ldi	r24, 0x3C	; 60
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	48 9f       	mul	r20, r24
    2850:	90 01       	movw	r18, r0
    2852:	49 9f       	mul	r20, r25
    2854:	30 0d       	add	r19, r0
    2856:	58 9f       	mul	r21, r24
    2858:	30 0d       	add	r19, r0
    285a:	11 24       	eor	r1, r1
    285c:	26 0f       	add	r18, r22
    285e:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2860:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2862:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    2864:	80 91 a7 01 	lds	r24, 0x01A7
    2868:	90 91 a8 01 	lds	r25, 0x01A8
    286c:	28 17       	cp	r18, r24
    286e:	39 07       	cpc	r19, r25
    2870:	31 f0       	breq	.+12     	; 0x287e <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    2872:	30 93 a8 01 	sts	0x01A8, r19
    2876:	20 93 a7 01 	sts	0x01A7, r18
      persistRTC();
    287a:	0e 94 be 13 	call	0x277c	; 0x277c <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    287e:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    2884:	80 e0       	ldi	r24, 0x00	; 0
  }
    2886:	1f 91       	pop	r17
    2888:	08 95       	ret

0000288a <getSimpleScheduleOn()>:
// Get the simple schedule on time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// Note that unprogrammed EEPROM value will result in invalid time, ie not set.
uint_least16_t getSimpleScheduleOn()
  {
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    288a:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    288c:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    288e:	f9 99       	sbic	0x1f, 1	; 31
    2890:	fe cf       	rjmp	.-4      	; 0x288e <getSimpleScheduleOn()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2892:	8c e0       	ldi	r24, 0x0C	; 12
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	92 bd       	out	0x22, r25	; 34
    2898:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    289a:	f8 9a       	sbi	0x1f, 0	; 31
    289c:	20 b5       	in	r18, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    289e:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    28a0:	86 e0       	ldi	r24, 0x06	; 6
    28a2:	28 9f       	mul	r18, r24
    28a4:	90 01       	movw	r18, r0
    28a6:	11 24       	eor	r1, r1
    { startMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON); }
  return(SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM);
  }
    28a8:	c9 01       	movw	r24, r18
    28aa:	08 95       	ret

000028ac <getSimpleScheduleOff()>:

// Get the simple schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
uint_least16_t getSimpleScheduleOff()
  {
  uint8_t endMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    28ac:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28ae:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28b0:	f9 99       	sbic	0x1f, 1	; 31
    28b2:	fe cf       	rjmp	.-4      	; 0x28b0 <getSimpleScheduleOff()+0x4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    28b4:	8d e0       	ldi	r24, 0x0D	; 13
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	92 bd       	out	0x22, r25	; 34
    28ba:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    28bc:	f8 9a       	sbi	0x1f, 0	; 31
    28be:	20 b5       	in	r18, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28c0:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    28c2:	86 e0       	ldi	r24, 0x06	; 6
    28c4:	28 9f       	mul	r18, r24
    28c6:	90 01       	movw	r18, r0
    28c8:	11 24       	eor	r1, r1
    { endMM = eeprom_read_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF); }
  return(SIMPLE_SCHEDULE_GRANULARITY_MINS * endMM);
  }
    28ca:	c9 01       	movw	r24, r18
    28cc:	08 95       	ret

000028ce <clearSimpleSchedule()>:
  }

// Clear simple schedule.
// There will be no on nor off events from the simple schedule once this is called,
// and isSimpleScheduleSet() will return false.
void clearSimpleSchedule()
    28ce:	1f 93       	push	r17
  {
  // Clear the schedule back to 'unprogrammed' values.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    28d0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28d2:	f8 94       	cli
    {
    eeprom_smart_erase_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON);
    28d4:	8c e0       	ldi	r24, 0x0C	; 12
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF);
    28dc:	8d e0       	ldi	r24, 0x0D	; 13
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28e4:	1f bf       	out	0x3f, r17	; 63
    }
  }
    28e6:	1f 91       	pop	r17
    28e8:	08 95       	ret

000028ea <setSimpleSchedule(unsigned int, unsigned int)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * durationMinutes  is duration in minutes in range [1,1439]
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear our the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint_least16_t durationMinutes)
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	9b 01       	movw	r18, r22
  {
  if((startMinutesSinceMidnightLT >= 1440) || (durationMinutes == 0) || (durationMinutes >= 1439)) { return(false); }
    28f0:	45 e0       	ldi	r20, 0x05	; 5
    28f2:	80 3a       	cpi	r24, 0xA0	; 160
    28f4:	94 07       	cpc	r25, r20
    28f6:	78 f5       	brcc	.+94     	; 0x2956 <setSimpleSchedule(unsigned int, unsigned int)+0x6c>
    28f8:	61 15       	cp	r22, r1
    28fa:	71 05       	cpc	r23, r1
    28fc:	61 f1       	breq	.+88     	; 0x2956 <setSimpleSchedule(unsigned int, unsigned int)+0x6c>
    28fe:	45 e0       	ldi	r20, 0x05	; 5
    2900:	6f 39       	cpi	r22, 0x9F	; 159
    2902:	74 07       	cpc	r23, r20
    2904:	40 f5       	brcc	.+80     	; 0x2956 <setSimpleSchedule(unsigned int, unsigned int)+0x6c>
  
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
    2906:	66 e0       	ldi	r22, 0x06	; 6
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    290e:	46 2f       	mov	r20, r22
  const uint16_t em = startMM + (uint16_t) max((uint8_t)(durationMinutes/SIMPLE_SCHEDULE_GRANULARITY_MINS), (uint8_t)1);
    2910:	c9 01       	movw	r24, r18
    2912:	66 e0       	ldi	r22, 0x06	; 6
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    291a:	86 2f       	mov	r24, r22
    291c:	66 23       	and	r22, r22
    291e:	09 f4       	brne	.+2      	; 0x2922 <setSimpleSchedule(unsigned int, unsigned int)+0x38>
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	64 2f       	mov	r22, r20
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	68 0f       	add	r22, r24
    2928:	71 1d       	adc	r23, r1
  const uint8_t endMM = (em <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) ? em : (em - (MAX_COMPRESSED_MINS_AFTER_MIDNIGHT + 1));
    292a:	60 3f       	cpi	r22, 0xF0	; 240
    292c:	71 05       	cpc	r23, r1
    292e:	10 f4       	brcc	.+4      	; 0x2934 <setSimpleSchedule(unsigned int, unsigned int)+0x4a>
    2930:	06 2f       	mov	r16, r22
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <setSimpleSchedule(unsigned int, unsigned int)+0x4e>
    2934:	06 2f       	mov	r16, r22
    2936:	00 5f       	subi	r16, 0xF0	; 240

  // Set the schedule.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2938:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    293a:	f8 94       	cli
    {
    eeprom_smart_update_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_ON, startMM);
    293c:	8c e0       	ldi	r24, 0x0C	; 12
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	64 2f       	mov	r22, r20
    2942:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    eeprom_smart_update_byte((uint8_t*)EE_START_SIMPLE_SCHEDULE_OFF, endMM);
    2946:	8d e0       	ldi	r24, 0x0D	; 13
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	60 2f       	mov	r22, r16
    294c:	0e 94 93 07 	call	0xf26	; 0xf26 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2950:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <setSimpleSchedule(unsigned int, unsigned int)+0x6e>
    }
  return(true); // Assume EEPROM programmed OK...
    2956:	80 e0       	ldi	r24, 0x00	; 0
  }
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	08 95       	ret

0000295e <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2964:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2968:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    296a:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    296e:	10 91 a6 01 	lds	r17, 0x01A6
  const uint16_t m = getMinutesSinceMidnightLT();
    2972:	0e 94 4b 13 	call	0x2696	; 0x2696 <getMinutesSinceMidnightLT()>
    2976:	bc 01       	movw	r22, r24
  Serial.print(m);
    2978:	87 e0       	ldi	r24, 0x07	; 7
    297a:	93 e0       	ldi	r25, 0x03	; 3
    297c:	4a e0       	ldi	r20, 0x0A	; 10
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	0e 94 91 28 	call	0x5122	; 0x5122 <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    2984:	87 e0       	ldi	r24, 0x07	; 7
    2986:	93 e0       	ldi	r25, 0x03	; 3
    2988:	6a e3       	ldi	r22, 0x3A	; 58
    298a:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    298e:	87 e0       	ldi	r24, 0x07	; 7
    2990:	93 e0       	ldi	r25, 0x03	; 3
    2992:	61 2f       	mov	r22, r17
    2994:	4a e0       	ldi	r20, 0x0A	; 10
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    299c:	87 e0       	ldi	r24, 0x07	; 7
    299e:	93 e0       	ldi	r25, 0x03	; 3
    29a0:	6a e3       	ldi	r22, 0x3A	; 58
    29a2:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    29a6:	87 e0       	ldi	r24, 0x07	; 7
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	60 2f       	mov	r22, r16
    29ac:	4a e0       	ldi	r20, 0x0A	; 10
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  _flush();
    29b4:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    29b8:	ff 20       	and	r15, r15
    29ba:	11 f0       	breq	.+4      	; 0x29c0 <_debug_serial_timestamp()+0x62>
    29bc:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	ff 90       	pop	r15
    29c6:	08 95       	ret

000029c8 <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    29c8:	ff 92       	push	r15
    29ca:	0f 93       	push	r16
    29cc:	1f 93       	push	r17
    29ce:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    29d0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    29d4:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(u);
    29d6:	87 e0       	ldi	r24, 0x07	; 7
    29d8:	93 e0       	ldi	r25, 0x03	; 3
    29da:	b8 01       	movw	r22, r16
    29dc:	4a e0       	ldi	r20, 0x0A	; 10
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	0e 94 91 28 	call	0x5122	; 0x5122 <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    29e4:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    29e8:	ff 20       	and	r15, r15
    29ea:	11 f0       	breq	.+4      	; 0x29f0 <serialPrintAndFlush(unsigned int, int)+0x28>
    29ec:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	08 95       	ret

000029f8 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    29fe:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2a02:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    2a04:	87 e0       	ldi	r24, 0x07	; 7
    2a06:	93 e0       	ldi	r25, 0x03	; 3
    2a08:	61 2f       	mov	r22, r17
    2a0a:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2a0e:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2a12:	00 23       	and	r16, r16
    2a14:	11 f0       	breq	.+4      	; 0x2a1a <serialPrintAndFlush(char)+0x22>
    2a16:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	08 95       	ret

00002a20 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    2a20:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2a22:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2a26:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    2a28:	87 e0       	ldi	r24, 0x07	; 7
    2a2a:	93 e0       	ldi	r25, 0x03	; 3
    2a2c:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2a30:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2a34:	11 23       	and	r17, r17
    2a36:	11 f0       	breq	.+4      	; 0x2a3c <serialPrintlnAndFlush()+0x1c>
    2a38:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    2a3c:	1f 91       	pop	r17
    2a3e:	08 95       	ret

00002a40 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    2a40:	ff 92       	push	r15
    2a42:	0f 93       	push	r16
    2a44:	1f 93       	push	r17
    2a46:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2a48:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2a4c:	f8 2e       	mov	r15, r24
  // Send the character.
  Serial.print(i);
    2a4e:	87 e0       	ldi	r24, 0x07	; 7
    2a50:	93 e0       	ldi	r25, 0x03	; 3
    2a52:	b8 01       	movw	r22, r16
    2a54:	4a e0       	ldi	r20, 0x0A	; 10
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2a5c:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2a60:	ff 20       	and	r15, r15
    2a62:	11 f0       	breq	.+4      	; 0x2a68 <serialPrintAndFlush(int, int)+0x28>
    2a64:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	08 95       	ret

00002a70 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    2a70:	ff 92       	push	r15
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2a78:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2a7c:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    2a7e:	87 e0       	ldi	r24, 0x07	; 7
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	b8 01       	movw	r22, r16
    2a84:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2a88:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2a8c:	ff 20       	and	r15, r15
    2a8e:	11 f0       	breq	.+4      	; 0x2a94 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    2a90:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	ff 90       	pop	r15
    2a9a:	08 95       	ret

00002a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2aa4:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2aa8:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    2aaa:	87 e0       	ldi	r24, 0x07	; 7
    2aac:	93 e0       	ldi	r25, 0x03	; 3
    2aae:	b8 01       	movw	r22, r16
    2ab0:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    2ab4:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2ab8:	ff 20       	and	r15, r15
    2aba:	11 f0       	breq	.+4      	; 0x2ac0 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    2abc:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	08 95       	ret

00002ac8 <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    2ac8:	80 91 ab 01 	lds	r24, 0x01AB
    2acc:	90 91 ac 01 	lds	r25, 0x01AC
    2ad0:	08 95       	ret

00002ad2 <readTemperatureC16()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
#ifdef FAKE_TMP102
  temp16 = 17 * 16;
  return(temp16); // FAKE IT!
#endif

  const bool neededPowerUp = powerUpTWIIfDisabled();
    2ada:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <powerUpTWIIfDisabled()>
    2ade:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2ae0:	85 e0       	ldi	r24, 0x05	; 5
    2ae2:	92 e0       	ldi	r25, 0x02	; 2
    2ae4:	68 e4       	ldi	r22, 0x48	; 72
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	0e 94 1c 21 	call	0x4238	; 0x4238 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2aec:	85 e0       	ldi	r24, 0x05	; 5
    2aee:	92 e0       	ldi	r25, 0x02	; 2
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	0e 94 9e 21 	call	0x433c	; 0x433c <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    2af6:	85 e0       	ldi	r24, 0x05	; 5
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	61 e3       	ldi	r22, 0x31	; 49
    2afc:	0e 94 9e 21 	call	0x433c	; 0x433c <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    2b00:	85 e0       	ldi	r24, 0x05	; 5
    2b02:	92 e0       	ldi	r25, 0x02	; 2
    2b04:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2b08:	85 e0       	ldi	r24, 0x05	; 5
    2b0a:	92 e0       	ldi	r25, 0x02	; 2
    2b0c:	68 e4       	ldi	r22, 0x48	; 72
    2b0e:	70 e0       	ldi	r23, 0x00	; 0
    2b10:	0e 94 1c 21 	call	0x4238	; 0x4238 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2b14:	85 e0       	ldi	r24, 0x05	; 5
    2b16:	92 e0       	ldi	r25, 0x02	; 2
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	0e 94 9e 21 	call	0x433c	; 0x433c <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2b1e:	85 e0       	ldi	r24, 0x05	; 5
    2b20:	92 e0       	ldi	r25, 0x02	; 2
    2b22:	61 eb       	ldi	r22, 0xB1	; 177
    2b24:	0e 94 9e 21 	call	0x433c	; 0x433c <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2b28:	85 e0       	ldi	r24, 0x05	; 5
    2b2a:	92 e0       	ldi	r25, 0x02	; 2
    2b2c:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <TwoWire::endTransmission()>
    2b30:	88 23       	and	r24, r24
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <readTemperatureC16()+0x64>
    2b34:	4d c0       	rjmp	.+154    	; 0x2bd0 <readTemperatureC16()+0xfe>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2b36:	85 e0       	ldi	r24, 0x05	; 5
    2b38:	92 e0       	ldi	r25, 0x02	; 2
    2b3a:	68 e4       	ldi	r22, 0x48	; 72
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	0e 94 1c 21 	call	0x4238	; 0x4238 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2b42:	85 e0       	ldi	r24, 0x05	; 5
    2b44:	92 e0       	ldi	r25, 0x02	; 2
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	0e 94 9e 21 	call	0x433c	; 0x433c <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2b4c:	85 e0       	ldi	r24, 0x05	; 5
    2b4e:	92 e0       	ldi	r25, 0x02	; 2
    2b50:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <TwoWire::endTransmission()>
    2b54:	88 23       	and	r24, r24
    2b56:	e1 f5       	brne	.+120    	; 0x2bd0 <readTemperatureC16()+0xfe>
    2b58:	c8 e0       	ldi	r28, 0x08	; 8
    2b5a:	d0 e0       	ldi	r29, 0x00	; 0
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <readTemperatureC16()+0xb8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { temp16 = 0; return(0); } // Exit if error.
    2b5e:	1c 16       	cp	r1, r28
    2b60:	1d 06       	cpc	r1, r29
    2b62:	b4 f5       	brge	.+108    	; 0x2bd0 <readTemperatureC16()+0xfe>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { temp16 = 0; return(0); } // Exit if error.
    2b64:	85 e0       	ldi	r24, 0x05	; 5
    2b66:	92 e0       	ldi	r25, 0x02	; 2
    2b68:	68 e4       	ldi	r22, 0x48	; 72
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	41 e0       	ldi	r20, 0x01	; 1
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <TwoWire::requestFrom(int, int)>
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	61 f5       	brne	.+88     	; 0x2bd0 <readTemperatureC16()+0xfe>
    const byte b1 = Wire.read();
    2b78:	85 e0       	ldi	r24, 0x05	; 5
    2b7a:	92 e0       	ldi	r25, 0x02	; 2
    2b7c:	0e 94 2f 21 	call	0x425e	; 0x425e <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    2b80:	87 fd       	sbrc	r24, 7
    2b82:	05 c0       	rjmp	.+10     	; 0x2b8e <readTemperatureC16()+0xbc>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    2b8a:	21 97       	sbiw	r28, 0x01	; 1
    2b8c:	41 f7       	brne	.-48     	; 0x2b5e <readTemperatureC16()+0x8c>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2b8e:	85 e0       	ldi	r24, 0x05	; 5
    2b90:	92 e0       	ldi	r25, 0x02	; 2
    2b92:	68 e4       	ldi	r22, 0x48	; 72
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	0e 94 1c 21 	call	0x4238	; 0x4238 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    2b9a:	85 e0       	ldi	r24, 0x05	; 5
    2b9c:	92 e0       	ldi	r25, 0x02	; 2
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	0e 94 9e 21 	call	0x433c	; 0x433c <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2ba4:	85 e0       	ldi	r24, 0x05	; 5
    2ba6:	92 e0       	ldi	r25, 0x02	; 2
    2ba8:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <TwoWire::endTransmission()>
    2bac:	88 23       	and	r24, r24
    2bae:	81 f4       	brne	.+32     	; 0x2bd0 <readTemperatureC16()+0xfe>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { temp16 = 0; return(0); }
    2bb0:	85 e0       	ldi	r24, 0x05	; 5
    2bb2:	92 e0       	ldi	r25, 0x02	; 2
    2bb4:	68 e4       	ldi	r22, 0x48	; 72
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	42 e0       	ldi	r20, 0x02	; 2
    2bba:	50 e0       	ldi	r21, 0x00	; 0
    2bbc:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <TwoWire::requestFrom(int, int)>
    2bc0:	82 30       	cpi	r24, 0x02	; 2
    2bc2:	31 f4       	brne	.+12     	; 0x2bd0 <readTemperatureC16()+0xfe>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    2bc4:	85 e0       	ldi	r24, 0x05	; 5
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <TwoWire::endTransmission()>
    2bcc:	88 23       	and	r24, r24
    2bce:	39 f0       	breq	.+14     	; 0x2bde <readTemperatureC16()+0x10c>
    2bd0:	10 92 ac 01 	sts	0x01AC, r1
    2bd4:	10 92 ab 01 	sts	0x01AB, r1
    2bd8:	c0 e0       	ldi	r28, 0x00	; 0
    2bda:	d0 e0       	ldi	r29, 0x00	; 0
    2bdc:	2a c0       	rjmp	.+84     	; 0x2c32 <readTemperatureC16()+0x160>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    2bde:	85 e0       	ldi	r24, 0x05	; 5
    2be0:	92 e0       	ldi	r25, 0x02	; 2
    2be2:	0e 94 2f 21 	call	0x425e	; 0x425e <TwoWire::read()>
    2be6:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    2be8:	85 e0       	ldi	r24, 0x05	; 5
    2bea:	92 e0       	ldi	r25, 0x02	; 2
    2bec:	0e 94 2f 21 	call	0x425e	; 0x425e <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    2bf0:	17 fd       	sbrc	r17, 7
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <readTemperatureC16()+0x128>
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <readTemperatureC16()+0x12c>
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 ef       	ldi	r19, 0xF0	; 240
    2bfe:	c8 2f       	mov	r28, r24
    2c00:	d0 e0       	ldi	r29, 0x00	; 0
    2c02:	54 e0       	ldi	r21, 0x04	; 4
    2c04:	d5 95       	asr	r29
    2c06:	c7 95       	ror	r28
    2c08:	5a 95       	dec	r21
    2c0a:	e1 f7       	brne	.-8      	; 0x2c04 <readTemperatureC16()+0x132>
    2c0c:	81 2f       	mov	r24, r17
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	44 e0       	ldi	r20, 0x04	; 4
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	4a 95       	dec	r20
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <readTemperatureC16()+0x140>
    2c1a:	c8 2b       	or	r28, r24
    2c1c:	d9 2b       	or	r29, r25
    2c1e:	c2 2b       	or	r28, r18
    2c20:	d3 2b       	or	r29, r19

  // Store the result for access at any time.
  temp16 = t16;
    2c22:	d0 93 ac 01 	sts	0x01AC, r29
    2c26:	c0 93 ab 01 	sts	0x01AB, r28
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    2c2a:	00 23       	and	r16, r16
    2c2c:	11 f0       	breq	.+4      	; 0x2c32 <readTemperatureC16()+0x160>
    2c2e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <powerDownTWI()>

  return(t16);
  }
    2c32:	ce 01       	movw	r24, r28
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	08 95       	ret

00002c3e <inWarmMode()>:
#include "Temperature_Sensor.h"
#include "UI_Minimal.h"

static bool isWarmMode; // Defaults to / starts at false/'frost'.
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
    2c3e:	80 91 ad 01 	lds	r24, 0x01AD
    2c42:	08 95       	ret

00002c44 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    2c44:	80 91 ad 01 	lds	r24, 0x01AD
    2c48:	88 23       	and	r24, r24
    2c4a:	21 f0       	breq	.+8      	; 0x2c54 <inBakeMode()+0x10>
    2c4c:	80 91 b9 01 	lds	r24, 0x01B9
    2c50:	81 11       	cpse	r24, r1
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	08 95       	ret

00002c56 <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    2c56:	10 92 b9 01 	sts	0x01B9, r1
    2c5a:	08 95       	ret

00002c5c <hasEcoBias()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c5c:	f9 99       	sbic	0x1f, 1	; 31
    2c5e:	fe cf       	rjmp	.-4      	; 0x2c5c <hasEcoBias()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2c60:	83 e1       	ldi	r24, 0x13	; 19
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	92 bd       	out	0x22, r25	; 34
    2c66:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2c68:	f8 9a       	sbi	0x1f, 0	; 31
    2c6a:	80 b5       	in	r24, 0x20	; 32
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <hasEcoBias()+0x18>
    2c72:	91 e0       	ldi	r25, 0x01	; 1
// If true (the default) then the system has an 'Eco' energy-saving bias, else it has a 'comfort' bias.
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
// At the transition from one bias to the other user-settable values may be adjusted to match.
// ~0 (erased/default) means eco mode; any other value means comfort.
bool hasEcoBias() { return(eeprom_read_byte((uint8_t *)EE_START_ECO_BIAS) == (uint8_t)~0); }
    2c74:	89 2f       	mov	r24, r25
    2c76:	08 95       	ret

00002c78 <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
#define resetCLIActiveTimer() { CLISecondsLeft = CLIActiveS; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLISecondsLeft); }
    2c78:	80 91 04 01 	lds	r24, 0x0104
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	08 95       	ret

00002c82 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    2c82:	87 e0       	ldi	r24, 0x07	; 7
    2c84:	93 e0       	ldi	r25, 0x03	; 3
    2c86:	60 e2       	ldi	r22, 0x20	; 32
    2c88:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    2c8c:	08 95       	ret

00002c8e <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    2c8e:	87 e0       	ldi	r24, 0x07	; 7
    2c90:	93 e0       	ldi	r25, 0x03	; 3
    2c92:	60 ed       	ldi	r22, 0xD0	; 208
    2c94:	73 e0       	ldi	r23, 0x03	; 3
    2c96:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
    2c9a:	08 95       	ret

00002c9c <printCLILine(char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(char syntax, __FlashStringHelper const *description)
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	eb 01       	movw	r28, r22
  {
  Serial.print(syntax);
    2ca6:	87 e0       	ldi	r24, 0x07	; 7
    2ca8:	93 e0       	ldi	r25, 0x03	; 3
    2caa:	62 2f       	mov	r22, r18
    2cac:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.flush();
    2cb0:	87 e0       	ldi	r24, 0x07	; 7
    2cb2:	93 e0       	ldi	r25, 0x03	; 3
    2cb4:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2cb8:	80 91 b2 00 	lds	r24, 0x00B2
    2cbc:	80 3e       	cpi	r24, 0xE0	; 224
    2cbe:	10 f4       	brcc	.+4      	; 0x2cc4 <printCLILine(char, __FlashStringHelper const*)+0x28>
    2cc0:	1a e0       	ldi	r17, 0x0A	; 10
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <printCLILine(char, __FlashStringHelper const*)+0x36>
    2cc4:	87 e0       	ldi	r24, 0x07	; 7
    2cc6:	93 e0       	ldi	r25, 0x03	; 3
    2cc8:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
    2ccc:	09 c0       	rjmp	.+18     	; 0x2ce0 <printCLILine(char, __FlashStringHelper const*)+0x44>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    2cce:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
    2cd2:	11 50       	subi	r17, 0x01	; 1
    2cd4:	e0 f7       	brcc	.-8      	; 0x2cce <printCLILine(char, __FlashStringHelper const*)+0x32>
  Serial.println(description);
    2cd6:	87 e0       	ldi	r24, 0x07	; 7
    2cd8:	93 e0       	ldi	r25, 0x03	; 3
    2cda:	be 01       	movw	r22, r28
    2cdc:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
  }
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	08 95       	ret

00002ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>:

#define SYNTAX_COL_WIDTH 11 // Width of 'syntax' column; strictly positive.
#define STOP_PRINTING_DESCRIPTION_AT (GSCT_MAX-(GSCT_MAX/8)) // Time into minor cycle after which the description should be skipped.
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of a minor cycle to avoid overrun risk.
static void printCLILine(__FlashStringHelper const *syntax, __FlashStringHelper const *description)
    2ce8:	ef 92       	push	r14
    2cea:	ff 92       	push	r15
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	ec 01       	movw	r28, r24
    2cf4:	7b 01       	movw	r14, r22
  {
  Serial.print(syntax);
    2cf6:	87 e0       	ldi	r24, 0x07	; 7
    2cf8:	93 e0       	ldi	r25, 0x03	; 3
    2cfa:	be 01       	movw	r22, r28
    2cfc:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <Print::print(__FlashStringHelper const*)>
  Serial.flush();
    2d00:	87 e0       	ldi	r24, 0x07	; 7
    2d02:	93 e0       	ldi	r25, 0x03	; 3
    2d04:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <HardwareSerial::flush()>
  if(getSubCycleTime() >= STOP_PRINTING_DESCRIPTION_AT) { Serial.println(); return; }
    2d08:	80 91 b2 00 	lds	r24, 0x00B2
    2d0c:	80 3e       	cpi	r24, 0xE0	; 224
    2d0e:	28 f0       	brcs	.+10     	; 0x2d1a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x32>
    2d10:	87 e0       	ldi	r24, 0x07	; 7
    2d12:	93 e0       	ldi	r25, 0x03	; 3
    2d14:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
    2d18:	10 c0       	rjmp	.+32     	; 0x2d3a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x52>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <strlen_P>
    2d20:	1b e0       	ldi	r17, 0x0B	; 11
    2d22:	18 1b       	sub	r17, r24
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x42>
    2d26:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
    2d2a:	11 50       	subi	r17, 0x01	; 1
    2d2c:	17 ff       	sbrs	r17, 7
    2d2e:	fb cf       	rjmp	.-10     	; 0x2d26 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
  Serial.println(description);
    2d30:	87 e0       	ldi	r24, 0x07	; 7
    2d32:	93 e0       	ldi	r25, 0x03	; 3
    2d34:	b7 01       	movw	r22, r14
    2d36:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
  }
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	08 95       	ret

00002d46 <dumpCLIUsage()>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage()
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
  {
  Serial.println();
    2d4a:	07 e0       	ldi	r16, 0x07	; 7
    2d4c:	13 e0       	ldi	r17, 0x03	; 3
    2d4e:	c8 01       	movw	r24, r16
    2d50:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
  Serial.println(F("CLI usage:"));
    2d54:	c8 01       	movw	r24, r16
    2d56:	65 ec       	ldi	r22, 0xC5	; 197
    2d58:	73 e0       	ldi	r23, 0x03	; 3
    2d5a:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
  printCLILine('?', F("this help"));
    2d5e:	8f e3       	ldi	r24, 0x3F	; 63
    2d60:	6b eb       	ldi	r22, 0xBB	; 187
    2d62:	73 e0       	ldi	r23, 0x03	; 3
    2d64:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("B X"), F("Bias E (Eco) or C (Comfort)"));
    2d68:	87 eb       	ldi	r24, 0xB7	; 183
    2d6a:	93 e0       	ldi	r25, 0x03	; 3
    2d6c:	6b e9       	ldi	r22, 0x9B	; 155
    2d6e:	73 e0       	ldi	r23, 0x03	; 3
    2d70:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(F("C M"), F("Central hub: minimum M mins on, 0 disabled"));
    2d74:	87 e9       	ldi	r24, 0x97	; 151
    2d76:	93 e0       	ldi	r25, 0x03	; 3
    2d78:	6c e6       	ldi	r22, 0x6C	; 108
    2d7a:	73 e0       	ldi	r23, 0x03	; 3
    2d7c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(F("D N"), F("Dump stats set N"));
    2d80:	88 e6       	ldi	r24, 0x68	; 104
    2d82:	93 e0       	ldi	r25, 0x03	; 3
    2d84:	67 e5       	ldi	r22, 0x57	; 87
    2d86:	73 e0       	ldi	r23, 0x03	; 3
    2d88:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('E', F("Exit CLI"));
    2d8c:	85 e4       	ldi	r24, 0x45	; 69
    2d8e:	6e e4       	ldi	r22, 0x4E	; 78
    2d90:	73 e0       	ldi	r23, 0x03	; 3
    2d92:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
  printCLILine('F', F("Frost"));
    2d96:	86 e4       	ldi	r24, 0x46	; 70
    2d98:	68 e4       	ldi	r22, 0x48	; 72
    2d9a:	73 e0       	ldi	r23, 0x03	; 3
    2d9c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("F CC"), F("set Frost temp CC"));
    2da0:	83 e4       	ldi	r24, 0x43	; 67
    2da2:	93 e0       	ldi	r25, 0x03	; 3
    2da4:	61 e3       	ldi	r22, 0x31	; 49
    2da6:	73 e0       	ldi	r23, 0x03	; 3
    2da8:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(F("H"), F("clear wireless FHT8V House codes"));
    2dac:	8f e2       	ldi	r24, 0x2F	; 47
    2dae:	93 e0       	ldi	r25, 0x03	; 3
    2db0:	6e e0       	ldi	r22, 0x0E	; 14
    2db2:	73 e0       	ldi	r23, 0x03	; 3
    2db4:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(F("H H1 H2"), F("set wireless FHT8V House codes 1&2"));
    2db8:	86 e0       	ldi	r24, 0x06	; 6
    2dba:	93 e0       	ldi	r25, 0x03	; 3
    2dbc:	63 ee       	ldi	r22, 0xE3	; 227
    2dbe:	72 e0       	ldi	r23, 0x02	; 2
    2dc0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('L', F("Learn to warm every 24h from now, else cancel schedule if in frost mode"));
    2dc4:	8c e4       	ldi	r24, 0x4C	; 76
    2dc6:	6b e9       	ldi	r22, 0x9B	; 155
    2dc8:	72 e0       	ldi	r23, 0x02	; 2
    2dca:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("P HH MM LL"), F("Program: warm daily starting at HH MM for LL hours"));
    2dce:	80 e9       	ldi	r24, 0x90	; 144
    2dd0:	92 e0       	ldi	r25, 0x02	; 2
    2dd2:	6d e5       	ldi	r22, 0x5D	; 93
    2dd4:	72 e0       	ldi	r23, 0x02	; 2
    2dd6:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine('Q', F("Quick Heat (BAKE)"));
    2dda:	81 e5       	ldi	r24, 0x51	; 81
    2ddc:	6b e4       	ldi	r22, 0x4B	; 75
    2dde:	72 e0       	ldi	r23, 0x02	; 2
    2de0:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
#endif
  printCLILine(F("R N"), F("dump Raw stats set N"));
    2de4:	87 e4       	ldi	r24, 0x47	; 71
    2de6:	92 e0       	ldi	r25, 0x02	; 2
    2de8:	62 e3       	ldi	r22, 0x32	; 50
    2dea:	72 e0       	ldi	r23, 0x02	; 2
    2dec:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('S', F("show Status and smart warming for next 24h"));
    2df0:	83 e5       	ldi	r24, 0x53	; 83
    2df2:	67 e0       	ldi	r22, 0x07	; 7
    2df4:	72 e0       	ldi	r23, 0x02	; 2
    2df6:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
  printCLILine(F("T HH MM"), F("set 24h Time"));
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
    2dfc:	91 e0       	ldi	r25, 0x01	; 1
    2dfe:	62 ef       	ldi	r22, 0xF2	; 242
    2e00:	71 e0       	ldi	r23, 0x01	; 1
    2e02:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine('W', F("Warm"));
    2e06:	87 e5       	ldi	r24, 0x57	; 87
    2e08:	6d ee       	ldi	r22, 0xED	; 237
    2e0a:	71 e0       	ldi	r23, 0x01	; 1
    2e0c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
#ifdef SETTABLE_TARGET_TEMPERATURES
  printCLILine(F("W CC"), F("set Warm temp CC"));
    2e10:	88 ee       	ldi	r24, 0xE8	; 232
    2e12:	91 e0       	ldi	r25, 0x01	; 1
    2e14:	67 ed       	ldi	r22, 0xD7	; 215
    2e16:	71 e0       	ldi	r23, 0x01	; 1
    2e18:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <printCLILine(__FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine('Z', F("Zap stats"));
    2e1c:	8a e5       	ldi	r24, 0x5A	; 90
    2e1e:	6d ec       	ldi	r22, 0xCD	; 205
    2e20:	71 e0       	ldi	r23, 0x01	; 1
    2e22:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <printCLILine(char, __FlashStringHelper const*)>
  Serial.println();
    2e26:	c8 01       	movw	r24, r16
    2e28:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
  }
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	08 95       	ret

00002e32 <handleLearnButton()>:
// Period in minutes for simple learned on-time with comfort bias; strictly positive (and less than 1440).
#define LEARNED_ON_PERIOD_COMFORT_M 120
// Handle learn button.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now for 1h.
// May be called from pushbutton or CLI UI components.
static void handleLearnButton()
    2e32:	1f 93       	push	r17
  {
  // Set simple schedule starting every 24h from a little before now and running 1h (eco) or 2h (comfort).  
  if(isWarmMode)
    2e34:	80 91 ad 01 	lds	r24, 0x01AD
    2e38:	88 23       	and	r24, r24
    2e3a:	21 f1       	breq	.+72     	; 0x2e84 <handleLearnButton()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e3c:	f9 99       	sbic	0x1f, 1	; 31
    2e3e:	fe cf       	rjmp	.-4      	; 0x2e3c <handleLearnButton()+0xa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2e40:	83 e1       	ldi	r24, 0x13	; 19
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	92 bd       	out	0x22, r25	; 34
    2e46:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2e48:	f8 9a       	sbi	0x1f, 0	; 31
    2e4a:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t lengthM = hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M;
    2e4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4e:	11 f0       	breq	.+4      	; 0x2e54 <handleLearnButton()+0x22>
    2e50:	18 e7       	ldi	r17, 0x78	; 120
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <handleLearnButton()+0x24>
    2e54:	1c e3       	ldi	r17, 0x3C	; 60
    const uint8_t windBackM = lengthM >> 2; // Wind back start by about 25%.
    const uint_least16_t msm = getMinutesSinceMidnightLT();
    2e56:	0e 94 4b 13 	call	0x2696	; 0x2696 <getMinutesSinceMidnightLT()>
    2e5a:	ac 01       	movw	r20, r24
    const uint_least16_t start = (msm >= windBackM) ? (msm - windBackM) : (msm + 1440 - windBackM);
    2e5c:	81 2f       	mov	r24, r17
    2e5e:	86 95       	lsr	r24
    2e60:	86 95       	lsr	r24
    2e62:	28 2f       	mov	r18, r24
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	42 17       	cp	r20, r18
    2e68:	53 07       	cpc	r21, r19
    2e6a:	10 f0       	brcs	.+4      	; 0x2e70 <handleLearnButton()+0x3e>
    2e6c:	ca 01       	movw	r24, r20
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <handleLearnButton()+0x44>
    2e70:	ca 01       	movw	r24, r20
    2e72:	80 56       	subi	r24, 0x60	; 96
    2e74:	9a 4f       	sbci	r25, 0xFA	; 250
    2e76:	82 1b       	sub	r24, r18
    2e78:	93 0b       	sbc	r25, r19
    setSimpleSchedule(start, lengthM);
    2e7a:	61 2f       	mov	r22, r17
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	0e 94 75 14 	call	0x28ea	; 0x28ea <setSimpleSchedule(unsigned int, unsigned int)>
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <handleLearnButton()+0x56>
    }
  // Clear simple schedule.
  else { clearSimpleSchedule(); }
    2e84:	0e 94 67 14 	call	0x28ce	; 0x28ce <clearSimpleSchedule()>
  }
    2e88:	1f 91       	pop	r17
    2e8a:	08 95       	ret

00002e8c <serialStatusReport()>:
The ";" terminates this current/Celsius section.
'HC' introduces the FHT8V house codes, if supported.
eg 'HC255 255'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    2e8c:	ef 92       	push	r14
    2e8e:	ff 92       	push	r15
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    2e98:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    2e9c:	e8 2e       	mov	r14, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
    2e9e:	87 e0       	ldi	r24, 0x07	; 7
    2ea0:	93 e0       	ldi	r25, 0x03	; 3
    2ea2:	6d e3       	ldi	r22, 0x3D	; 61
    2ea4:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(isWarmMode ? (inBakeMode() ? 'B' : 'W') : 'F');
    2ea8:	80 91 ad 01 	lds	r24, 0x01AD
    2eac:	88 23       	and	r24, r24
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <serialStatusReport()+0x28>
    2eb0:	66 e4       	ldi	r22, 0x46	; 70
    2eb2:	07 c0       	rjmp	.+14     	; 0x2ec2 <serialStatusReport()+0x36>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    2eb4:	80 91 b9 01 	lds	r24, 0x01B9
    2eb8:	88 23       	and	r24, r24
    2eba:	11 f4       	brne	.+4      	; 0x2ec0 <serialStatusReport()+0x34>
    2ebc:	67 e5       	ldi	r22, 0x57	; 87
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <serialStatusReport()+0x36>
    2ec0:	62 e4       	ldi	r22, 0x42	; 66

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  Serial.print('=');
#ifdef SUPPORT_BAKE
  Serial.print(isWarmMode ? (inBakeMode() ? 'B' : 'W') : 'F');
    2ec2:	87 e0       	ldi	r24, 0x07	; 7
    2ec4:	93 e0       	ldi	r25, 0x03	; 3
    2ec6:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
#else
  Serial.print(isWarmMode ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target valve position.
    2eca:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    2ece:	68 2f       	mov	r22, r24
    2ed0:	87 e0       	ldi	r24, 0x07	; 7
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	4a e0       	ldi	r20, 0x0A	; 10
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
    2edc:	87 e0       	ldi	r24, 0x07	; 7
    2ede:	93 e0       	ldi	r25, 0x03	; 3
    2ee0:	65 e2       	ldi	r22, 0x25	; 37
    2ee2:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  const int temp = getTemperatureC16();
    2ee6:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <getTemperatureC16()>
    2eea:	8c 01       	movw	r16, r24
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    2eec:	87 e0       	ldi	r24, 0x07	; 7
    2eee:	93 e0       	ldi	r25, 0x03	; 3
    2ef0:	60 e4       	ldi	r22, 0x40	; 64
    2ef2:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    2ef6:	b8 01       	movw	r22, r16
    2ef8:	84 e0       	ldi	r24, 0x04	; 4
    2efa:	75 95       	asr	r23
    2efc:	67 95       	ror	r22
    2efe:	8a 95       	dec	r24
    2f00:	e1 f7       	brne	.-8      	; 0x2efa <serialStatusReport()+0x6e>
    2f02:	87 e0       	ldi	r24, 0x07	; 7
    2f04:	93 e0       	ldi	r25, 0x03	; 3
    2f06:	4a e0       	ldi	r20, 0x0A	; 10
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
    2f0e:	87 e0       	ldi	r24, 0x07	; 7
    2f10:	93 e0       	ldi	r25, 0x03	; 3
    2f12:	63 e4       	ldi	r22, 0x43	; 67
    2f14:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    2f18:	0f 70       	andi	r16, 0x0F	; 15
    2f1a:	10 70       	andi	r17, 0x00	; 0
    2f1c:	87 e0       	ldi	r24, 0x07	; 7
    2f1e:	93 e0       	ldi	r25, 0x03	; 3
    2f20:	b8 01       	movw	r22, r16
    2f22:	40 e1       	ldi	r20, 0x10	; 16
    2f24:	50 e0       	ldi	r21, 0x00	; 0
    2f26:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>

  Serial.print(';'); // End of initial section.
    2f2a:	87 e0       	ldi	r24, 0x07	; 7
    2f2c:	93 e0       	ldi	r25, 0x03	; 3
    2f2e:	6b e3       	ldi	r22, 0x3B	; 59
    2f30:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  const uint_least8_t hh = getHoursLT();
    2f34:	0e 94 60 13 	call	0x26c0	; 0x26c0 <getHoursLT()>
    2f38:	f8 2e       	mov	r15, r24
  const uint_least8_t mm = getMinutesLT();
    2f3a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <getMinutesLT()>
    2f3e:	18 2f       	mov	r17, r24
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    2f40:	87 e0       	ldi	r24, 0x07	; 7
    2f42:	93 e0       	ldi	r25, 0x03	; 3
    2f44:	64 e5       	ldi	r22, 0x54	; 84
    2f46:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    2f4a:	87 e0       	ldi	r24, 0x07	; 7
    2f4c:	93 e0       	ldi	r25, 0x03	; 3
    2f4e:	6f 2d       	mov	r22, r15
    2f50:	4a e0       	ldi	r20, 0x0A	; 10
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
    2f58:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
    2f5c:	87 e0       	ldi	r24, 0x07	; 7
    2f5e:	93 e0       	ldi	r25, 0x03	; 3
    2f60:	61 2f       	mov	r22, r17
    2f62:	4a e0       	ldi	r20, 0x0A	; 10
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  Serial_print_space();
    2f6a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
  uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn();
    2f6e:	0e 94 45 14 	call	0x288a	; 0x288a <getSimpleScheduleOn()>
    2f72:	fc 01       	movw	r30, r24
  const bool invalidStartTime = startMinutesSinceMidnightLT >= 1440;
  const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    2f74:	85 e0       	ldi	r24, 0x05	; 5
    2f76:	e0 3a       	cpi	r30, 0xA0	; 160
    2f78:	f8 07       	cpc	r31, r24
    2f7a:	28 f0       	brcs	.+10     	; 0x2f86 <serialStatusReport()+0xfa>
    2f7c:	00 e0       	ldi	r16, 0x00	; 0
    2f7e:	10 e0       	ldi	r17, 0x00	; 0
    2f80:	cf ef       	ldi	r28, 0xFF	; 255
    2f82:	d0 e0       	ldi	r29, 0x00	; 0
    2f84:	0c c0       	rjmp	.+24     	; 0x2f9e <serialStatusReport()+0x112>
    2f86:	cf 01       	movw	r24, r30
    2f88:	6c e3       	ldi	r22, 0x3C	; 60
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    2f90:	eb 01       	movw	r28, r22
  const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    2f92:	cf 01       	movw	r24, r30
    2f94:	6c e3       	ldi	r22, 0x3C	; 60
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    2f9c:	8c 01       	movw	r16, r24
  Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    2f9e:	87 e0       	ldi	r24, 0x07	; 7
    2fa0:	93 e0       	ldi	r25, 0x03	; 3
    2fa2:	67 e5       	ldi	r22, 0x57	; 87
    2fa4:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    2fa8:	87 e0       	ldi	r24, 0x07	; 7
    2faa:	93 e0       	ldi	r25, 0x03	; 3
    2fac:	be 01       	movw	r22, r28
    2fae:	4a e0       	ldi	r20, 0x0A	; 10
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
    2fb6:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
    2fba:	87 e0       	ldi	r24, 0x07	; 7
    2fbc:	93 e0       	ldi	r25, 0x03	; 3
    2fbe:	b8 01       	movw	r22, r16
    2fc0:	4a e0       	ldi	r20, 0x0A	; 10
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
  Serial_print_space();
    2fc8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
  uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff();
    2fcc:	0e 94 56 14 	call	0x28ac	; 0x28ac <getSimpleScheduleOff()>
    2fd0:	fc 01       	movw	r30, r24
  const bool invalidEndTime = endMinutesSinceMidnightLT >= 1440;
  const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    2fd2:	85 e0       	ldi	r24, 0x05	; 5
    2fd4:	e0 3a       	cpi	r30, 0xA0	; 160
    2fd6:	f8 07       	cpc	r31, r24
    2fd8:	28 f0       	brcs	.+10     	; 0x2fe4 <serialStatusReport()+0x158>
    2fda:	00 e0       	ldi	r16, 0x00	; 0
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	cf ef       	ldi	r28, 0xFF	; 255
    2fe0:	d0 e0       	ldi	r29, 0x00	; 0
    2fe2:	0c c0       	rjmp	.+24     	; 0x2ffc <serialStatusReport()+0x170>
    2fe4:	cf 01       	movw	r24, r30
    2fe6:	6c e3       	ldi	r22, 0x3C	; 60
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    2fee:	eb 01       	movw	r28, r22
  const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    2ff0:	cf 01       	movw	r24, r30
    2ff2:	6c e3       	ldi	r22, 0x3C	; 60
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	0e 94 9e 2a 	call	0x553c	; 0x553c <__udivmodhi4>
    2ffa:	8c 01       	movw	r16, r24
  Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    2ffc:	87 e0       	ldi	r24, 0x07	; 7
    2ffe:	93 e0       	ldi	r25, 0x03	; 3
    3000:	66 e4       	ldi	r22, 0x46	; 70
    3002:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    3006:	87 e0       	ldi	r24, 0x07	; 7
    3008:	93 e0       	ldi	r25, 0x03	; 3
    300a:	be 01       	movw	r22, r28
    300c:	4a e0       	ldi	r20, 0x0A	; 10
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
    3014:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
    3018:	87 e0       	ldi	r24, 0x07	; 7
    301a:	93 e0       	ldi	r25, 0x03	; 3
    301c:	b8 01       	movw	r22, r16
    301e:	4a e0       	ldi	r20, 0x0A	; 10
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>

#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    3026:	87 e0       	ldi	r24, 0x07	; 7
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	6b e3       	ldi	r22, 0x3B	; 59
    302c:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.print('C'); // Current Celsius target, and FROST and WARM settings.
    3030:	87 e0       	ldi	r24, 0x07	; 7
    3032:	93 e0       	ldi	r25, 0x03	; 3
    3034:	63 e4       	ldi	r22, 0x43	; 67
    3036:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.print(getTargetTempC());
    303a:	0e 94 14 04 	call	0x828	; 0x828 <getTargetTempC()>
    303e:	68 2f       	mov	r22, r24
    3040:	87 e0       	ldi	r24, 0x07	; 7
    3042:	93 e0       	ldi	r25, 0x03	; 3
    3044:	4a e0       	ldi	r20, 0x0A	; 10
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  Serial_print_space();
    304c:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    3050:	0e 94 17 04 	call	0x82e	; 0x82e <getFROSTTargetC()>
    3054:	68 2f       	mov	r22, r24
    3056:	87 e0       	ldi	r24, 0x07	; 7
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	4a e0       	ldi	r20, 0x0A	; 10
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  Serial_print_space();
    3062:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    3066:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
    306a:	68 2f       	mov	r22, r24
    306c:	87 e0       	ldi	r24, 0x07	; 7
    306e:	93 e0       	ldi	r25, 0x03	; 3
    3070:	4a e0       	ldi	r20, 0x0A	; 10
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  Serial_print_space();
    3078:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    307c:	f9 99       	sbic	0x1f, 1	; 31
    307e:	fe cf       	rjmp	.-4      	; 0x307c <serialStatusReport()+0x1f0>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3080:	83 e1       	ldi	r24, 0x13	; 19
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	92 bd       	out	0x22, r25	; 34
    3086:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3088:	f8 9a       	sbi	0x1f, 0	; 31
    308a:	80 b5       	in	r24, 0x20	; 32
  // Show bias.
  Serial.print(hasEcoBias() ? 'e' : 'c'); // Show eco/comfort bias.
    308c:	8f 3f       	cpi	r24, 0xFF	; 255
    308e:	11 f0       	breq	.+4      	; 0x3094 <serialStatusReport()+0x208>
    3090:	63 e6       	ldi	r22, 0x63	; 99
    3092:	01 c0       	rjmp	.+2      	; 0x3096 <serialStatusReport()+0x20a>
    3094:	65 e6       	ldi	r22, 0x65	; 101
    3096:	87 e0       	ldi	r24, 0x07	; 7
    3098:	93 e0       	ldi	r25, 0x03	; 3
    309a:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  // Show warming predictions.
  Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f');
    309e:	8f 2d       	mov	r24, r15
    30a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <shouldBeWarmedAtHour(unsigned char)>
    30a4:	88 23       	and	r24, r24
    30a6:	11 f4       	brne	.+4      	; 0x30ac <serialStatusReport()+0x220>
    30a8:	66 e6       	ldi	r22, 0x66	; 102
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <serialStatusReport()+0x222>
    30ac:	67 e7       	ldi	r22, 0x77	; 119
    30ae:	87 e0       	ldi	r24, 0x07	; 7
    30b0:	93 e0       	ldi	r25, 0x03	; 3
    30b2:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.print(shouldBeWarmedAtHour(hh < 23 ? (hh+1) : 0) ? 'w' : 'f');
    30b6:	86 e1       	ldi	r24, 0x16	; 22
    30b8:	8f 15       	cp	r24, r15
    30ba:	10 f4       	brcc	.+4      	; 0x30c0 <serialStatusReport()+0x234>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <serialStatusReport()+0x238>
    30c0:	8f 2d       	mov	r24, r15
    30c2:	8f 5f       	subi	r24, 0xFF	; 255
    30c4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <shouldBeWarmedAtHour(unsigned char)>
    30c8:	88 23       	and	r24, r24
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <serialStatusReport()+0x244>
    30cc:	66 e6       	ldi	r22, 0x66	; 102
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <serialStatusReport()+0x246>
    30d0:	67 e7       	ldi	r22, 0x77	; 119
    30d2:	87 e0       	ldi	r24, 0x07	; 7
    30d4:	93 e0       	ldi	r25, 0x03	; 3
    30d6:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  // Show occupancy if known.
  if(isLikelyOccupied()) { Serial.print(isLikelyRecentlyOccupied() ? 'O' : 'o'); } // Show room occupied and how recently.
    30da:	0e 94 61 04 	call	0x8c2	; 0x8c2 <isLikelyOccupied()>
    30de:	88 23       	and	r24, r24
    30e0:	59 f0       	breq	.+22     	; 0x30f8 <serialStatusReport()+0x26c>
    30e2:	0e 94 66 04 	call	0x8cc	; 0x8cc <isLikelyRecentlyOccupied()>
    30e6:	88 23       	and	r24, r24
    30e8:	11 f4       	brne	.+4      	; 0x30ee <serialStatusReport()+0x262>
    30ea:	6f e6       	ldi	r22, 0x6F	; 111
    30ec:	01 c0       	rjmp	.+2      	; 0x30f0 <serialStatusReport()+0x264>
    30ee:	6f e4       	ldi	r22, 0x4F	; 79
    30f0:	87 e0       	ldi	r24, 0x07	; 7
    30f2:	93 e0       	ldi	r25, 0x03	; 3
    30f4:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
#endif

#ifdef ENABLE_BOILER_HUB
  Serial.print(';'); // Terminate previous section.
    30f8:	87 e0       	ldi	r24, 0x07	; 7
    30fa:	93 e0       	ldi	r25, 0x03	; 3
    30fc:	6b e3       	ldi	r22, 0x3B	; 59
    30fe:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.print('C'); // Indicate central hub mode available.
    3102:	87 e0       	ldi	r24, 0x07	; 7
    3104:	93 e0       	ldi	r25, 0x03	; 3
    3106:	63 e4       	ldi	r22, 0x43	; 67
    3108:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.print(getMinBoilerOnMinutes()); // Show min 'on' time, or zero if disabled.
    310c:	0e 94 57 04 	call	0x8ae	; 0x8ae <getMinBoilerOnMinutes()>
    3110:	68 2f       	mov	r22, r24
    3112:	87 e0       	ldi	r24, 0x07	; 7
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	4a e0       	ldi	r20, 0x0A	; 10
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
#endif

#if defined(USE_MODULE_FHT8VSIMPLE)
  Serial.print(';'); // Terminate previous section.
    311e:	87 e0       	ldi	r24, 0x07	; 7
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	6b e3       	ldi	r22, 0x3B	; 59
    3124:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  Serial.print(F("HC"));
    3128:	87 e0       	ldi	r24, 0x07	; 7
    312a:	93 e0       	ldi	r25, 0x03	; 3
    312c:	62 ee       	ldi	r22, 0xE2	; 226
    312e:	73 e0       	ldi	r23, 0x03	; 3
    3130:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <Print::print(__FlashStringHelper const*)>
  Serial.print(FHT8VGetHC1());
    3134:	0e 94 9f 08 	call	0x113e	; 0x113e <FHT8VGetHC1()>
    3138:	68 2f       	mov	r22, r24
    313a:	87 e0       	ldi	r24, 0x07	; 7
    313c:	93 e0       	ldi	r25, 0x03	; 3
    313e:	4a e0       	ldi	r20, 0x0A	; 10
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  Serial_print_space();
    3146:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
  Serial.print(FHT8VGetHC2());
    314a:	0e 94 a8 08 	call	0x1150	; 0x1150 <FHT8VGetHC2()>
    314e:	68 2f       	mov	r22, r24
    3150:	87 e0       	ldi	r24, 0x07	; 7
    3152:	93 e0       	ldi	r25, 0x03	; 3
    3154:	4a e0       	ldi	r20, 0x0A	; 10
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
  if(!isSyncedWithFHT8V())
    315c:	0e 94 b1 08 	call	0x1162	; 0x1162 <isSyncedWithFHT8V()>
    3160:	88 23       	and	r24, r24
    3162:	39 f4       	brne	.+14     	; 0x3172 <serialStatusReport()+0x2e6>
    {
    Serial_print_space();
    3164:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
    Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    3168:	87 e0       	ldi	r24, 0x07	; 7
    316a:	93 e0       	ldi	r25, 0x03	; 3
    316c:	63 e7       	ldi	r22, 0x73	; 115
    316e:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    }
#endif
  Serial.println();
    3172:	87 e0       	ldi	r24, 0x07	; 7
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    317a:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    317e:	ee 20       	and	r14, r14
    3180:	11 f0       	breq	.+4      	; 0x3186 <serialStatusReport()+0x2fa>
    3182:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
  }
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	ff 90       	pop	r15
    3190:	ef 90       	pop	r14
    3192:	08 95       	ret

00003194 <pollCLI(unsigned char)>:
#endif
// Used to poll user side for CLI input until specified sub-cycle time.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    3194:	9f 92       	push	r9
    3196:	af 92       	push	r10
    3198:	bf 92       	push	r11
    319a:	cf 92       	push	r12
    319c:	df 92       	push	r13
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <pollCLI(unsigned char)+0x18>
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <pollCLI(unsigned char)+0x1a>
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <pollCLI(unsigned char)+0x1c>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? 0 : (maxSCT - 1 - MIN_POLL_SCT);
    31b4:	83 30       	cpi	r24, 0x03	; 3
    31b6:	10 f4       	brcc	.+4      	; 0x31bc <pollCLI(unsigned char)+0x28>
    31b8:	00 e0       	ldi	r16, 0x00	; 0
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <pollCLI(unsigned char)+0x2c>
    31bc:	08 2f       	mov	r16, r24
    31be:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    31c0:	80 91 b2 00 	lds	r24, 0x00B2
    31c4:	80 17       	cp	r24, r16
    31c6:	08 f0       	brcs	.+2      	; 0x31ca <pollCLI(unsigned char)+0x36>
    31c8:	e2 c2       	rjmp	.+1476   	; 0x378e <pollCLI(unsigned char)+0x5fa>

  const bool neededWaking = powerUpSerialIfDisabled();
    31ca:	0e 94 63 10 	call	0x20c6	; 0x20c6 <powerUpSerialIfDisabled()>
    31ce:	98 2e       	mov	r9, r24
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    31d2:	87 e0       	ldi	r24, 0x07	; 7
    31d4:	93 e0       	ldi	r25, 0x03	; 3
    31d6:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <HardwareSerial::read()>
    31da:	87 e0       	ldi	r24, 0x07	; 7
    31dc:	93 e0       	ldi	r25, 0x03	; 3
    31de:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <HardwareSerial::available()>
    31e2:	18 16       	cp	r1, r24
    31e4:	19 06       	cpc	r1, r25
    31e6:	ac f3       	brlt	.-22     	; 0x31d2 <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  Serial.println();
    31e8:	87 e0       	ldi	r24, 0x07	; 7
    31ea:	93 e0       	ldi	r25, 0x03	; 3
    31ec:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
  Serial.print(CLIPromptChar);
    31f0:	87 e0       	ldi	r24, 0x07	; 7
    31f2:	93 e0       	ldi	r25, 0x03	; 3
    31f4:	6e e3       	ldi	r22, 0x3E	; 62
    31f6:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    31fa:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
    31fe:	10 e0       	ldi	r17, 0x00	; 0
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    3200:	87 e0       	ldi	r24, 0x07	; 7
    3202:	93 e0       	ldi	r25, 0x03	; 3
    3204:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <HardwareSerial::available()>
    3208:	18 16       	cp	r1, r24
    320a:	19 06       	cpc	r1, r25
    320c:	8c f4       	brge	.+34     	; 0x3230 <pollCLI(unsigned char)+0x9c>
      {
      const int ic = Serial.read();
    320e:	87 e0       	ldi	r24, 0x07	; 7
    3210:	93 e0       	ldi	r25, 0x03	; 3
    3212:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <HardwareSerial::read()>
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    3216:	8d 30       	cpi	r24, 0x0D	; 13
    3218:	91 05       	cpc	r25, r1
    321a:	c1 f0       	breq	.+48     	; 0x324c <pollCLI(unsigned char)+0xb8>
    321c:	8a 30       	cpi	r24, 0x0A	; 10
    321e:	91 05       	cpc	r25, r1
    3220:	a9 f0       	breq	.+42     	; 0x324c <pollCLI(unsigned char)+0xb8>
      buf[n++] = (char) ic;
    3222:	e1 2f       	mov	r30, r17
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	e2 55       	subi	r30, 0x52	; 82
    3228:	fe 4f       	sbci	r31, 0xFE	; 254
    322a:	80 83       	st	Z, r24
    322c:	1f 5f       	subi	r17, 0xFF	; 255
    322e:	0b c0       	rjmp	.+22     	; 0x3246 <pollCLI(unsigned char)+0xb2>
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    3230:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    3234:	80 17       	cp	r24, r16
    3236:	08 f0       	brcs	.+2      	; 0x323a <pollCLI(unsigned char)+0xa6>
    3238:	91 c2       	rjmp	.+1314   	; 0x375c <pollCLI(unsigned char)+0x5c8>
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <idleCPU(signed char)>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    3246:	1a 30       	cpi	r17, 0x0A	; 10
    3248:	d8 f2       	brcs	.-74     	; 0x3200 <pollCLI(unsigned char)+0x6c>
    324a:	03 c0       	rjmp	.+6      	; 0x3252 <pollCLI(unsigned char)+0xbe>
#else
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
#endif
    }

  if(n > 0)
    324c:	11 23       	and	r17, r17
    324e:	09 f4       	brne	.+2      	; 0x3252 <pollCLI(unsigned char)+0xbe>
    3250:	85 c2       	rjmp	.+1290   	; 0x375c <pollCLI(unsigned char)+0x5c8>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    3252:	80 91 ae 01 	lds	r24, 0x01AE
    3256:	8f 53       	subi	r24, 0x3F	; 63
    3258:	8c 33       	cpi	r24, 0x3C	; 60
    325a:	08 f0       	brcs	.+2      	; 0x325e <pollCLI(unsigned char)+0xca>
    325c:	43 c0       	rjmp	.+134    	; 0x32e4 <pollCLI(unsigned char)+0x150>
    325e:	8c e3       	ldi	r24, 0x3C	; 60
    3260:	80 93 04 01 	sts	0x0104, r24
    else { Serial.println(F("? for CLI help")); flushSerialSCTSensitive(); return; }

    // Null-terminate the command line.
    buf[n] = '\0';
    3264:	e1 2f       	mov	r30, r17
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	e2 55       	subi	r30, 0x52	; 82
    326a:	fe 4f       	sbci	r31, 0xFE	; 254
    326c:	10 82       	st	Z, r1

    // Force to upper-case and echo the line received.
    strupr(buf);
    326e:	8e ea       	ldi	r24, 0xAE	; 174
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	0e 94 9e 03 	call	0x73c	; 0x73c <strupr>
    Serial.println(buf);
    3276:	87 e0       	ldi	r24, 0x07	; 7
    3278:	93 e0       	ldi	r25, 0x03	; 3
    327a:	6e ea       	ldi	r22, 0xAE	; 174
    327c:	71 e0       	ldi	r23, 0x01	; 1
    327e:	0e 94 07 29 	call	0x520e	; 0x520e <Print::println(char const*)>

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    3282:	80 91 ae 01 	lds	r24, 0x01AE
    3286:	8c 34       	cpi	r24, 0x4C	; 76
    3288:	09 f4       	brne	.+2      	; 0x328c <pollCLI(unsigned char)+0xf8>
    328a:	65 c1       	rjmp	.+714    	; 0x3556 <pollCLI(unsigned char)+0x3c2>
    328c:	8d 34       	cpi	r24, 0x4D	; 77
    328e:	9c f4       	brge	.+38     	; 0x32b6 <pollCLI(unsigned char)+0x122>
    3290:	84 34       	cpi	r24, 0x44	; 68
    3292:	09 f4       	brne	.+2      	; 0x3296 <pollCLI(unsigned char)+0x102>
    3294:	ab c0       	rjmp	.+342    	; 0x33ec <pollCLI(unsigned char)+0x258>
    3296:	85 34       	cpi	r24, 0x45	; 69
    3298:	2c f4       	brge	.+10     	; 0x32a4 <pollCLI(unsigned char)+0x110>
    329a:	82 34       	cpi	r24, 0x42	; 66
    329c:	79 f1       	breq	.+94     	; 0x32fc <pollCLI(unsigned char)+0x168>
    329e:	83 34       	cpi	r24, 0x43	; 67
    32a0:	51 f5       	brne	.+84     	; 0x32f6 <pollCLI(unsigned char)+0x162>
    32a2:	69 c0       	rjmp	.+210    	; 0x3376 <pollCLI(unsigned char)+0x1e2>
    32a4:	86 34       	cpi	r24, 0x46	; 70
    32a6:	09 f4       	brne	.+2      	; 0x32aa <pollCLI(unsigned char)+0x116>
    32a8:	06 c1       	rjmp	.+524    	; 0x34b6 <pollCLI(unsigned char)+0x322>
    32aa:	86 34       	cpi	r24, 0x46	; 70
    32ac:	0c f4       	brge	.+2      	; 0x32b0 <pollCLI(unsigned char)+0x11c>
    32ae:	77 c0       	rjmp	.+238    	; 0x339e <pollCLI(unsigned char)+0x20a>
    32b0:	88 34       	cpi	r24, 0x48	; 72
    32b2:	09 f5       	brne	.+66     	; 0x32f6 <pollCLI(unsigned char)+0x162>
    32b4:	14 c1       	rjmp	.+552    	; 0x34de <pollCLI(unsigned char)+0x34a>
    32b6:	83 35       	cpi	r24, 0x53	; 83
    32b8:	09 f4       	brne	.+2      	; 0x32bc <pollCLI(unsigned char)+0x128>
    32ba:	a2 c1       	rjmp	.+836    	; 0x3600 <pollCLI(unsigned char)+0x46c>
    32bc:	84 35       	cpi	r24, 0x54	; 84
    32be:	4c f4       	brge	.+18     	; 0x32d2 <pollCLI(unsigned char)+0x13e>
    32c0:	81 35       	cpi	r24, 0x51	; 81
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <pollCLI(unsigned char)+0x132>
    32c4:	96 c1       	rjmp	.+812    	; 0x35f2 <pollCLI(unsigned char)+0x45e>
    32c6:	82 35       	cpi	r24, 0x52	; 82
    32c8:	0c f0       	brlt	.+2      	; 0x32cc <pollCLI(unsigned char)+0x138>
    32ca:	6c c0       	rjmp	.+216    	; 0x33a4 <pollCLI(unsigned char)+0x210>
    32cc:	80 35       	cpi	r24, 0x50	; 80
    32ce:	99 f4       	brne	.+38     	; 0x32f6 <pollCLI(unsigned char)+0x162>
    32d0:	45 c1       	rjmp	.+650    	; 0x355c <pollCLI(unsigned char)+0x3c8>
    32d2:	87 35       	cpi	r24, 0x57	; 87
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <pollCLI(unsigned char)+0x144>
    32d6:	fd c1       	rjmp	.+1018   	; 0x36d2 <pollCLI(unsigned char)+0x53e>
    32d8:	8a 35       	cpi	r24, 0x5A	; 90
    32da:	09 f4       	brne	.+2      	; 0x32de <pollCLI(unsigned char)+0x14a>
    32dc:	13 c2       	rjmp	.+1062   	; 0x3704 <pollCLI(unsigned char)+0x570>
    32de:	84 35       	cpi	r24, 0x54	; 84
    32e0:	51 f4       	brne	.+20     	; 0x32f6 <pollCLI(unsigned char)+0x162>
    32e2:	ce c1       	rjmp	.+924    	; 0x3680 <pollCLI(unsigned char)+0x4ec>
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else { Serial.println(F("? for CLI help")); flushSerialSCTSensitive(); return; }
    32e4:	87 e0       	ldi	r24, 0x07	; 7
    32e6:	93 e0       	ldi	r25, 0x03	; 3
    32e8:	6e eb       	ldi	r22, 0xBE	; 190
    32ea:	71 e0       	ldi	r23, 0x01	; 1
    32ec:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
    32f0:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>
    32f4:	4c c2       	rjmp	.+1176   	; 0x378e <pollCLI(unsigned char)+0x5fa>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(); showStatus = false; break; }
    32f6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <dumpCLIUsage()>
    32fa:	34 c2       	rjmp	.+1128   	; 0x3764 <pollCLI(unsigned char)+0x5d0>
      case 'B':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "B E".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    32fc:	13 30       	cpi	r17, 0x03	; 3
    32fe:	08 f4       	brcc	.+2      	; 0x3302 <pollCLI(unsigned char)+0x16e>
    3300:	43 c2       	rjmp	.+1158   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    3302:	80 eb       	ldi	r24, 0xB0	; 176
    3304:	91 e0       	ldi	r25, 0x01	; 1
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	71 e0       	ldi	r23, 0x01	; 1
    330a:	ae 01       	movw	r20, r28
    330c:	4f 5f       	subi	r20, 0xFF	; 255
    330e:	5f 4f       	sbci	r21, 0xFF	; 255
    3310:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3314:	fc 01       	movw	r30, r24
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	09 f4       	brne	.+2      	; 0x331c <pollCLI(unsigned char)+0x188>
    331a:	36 c2       	rjmp	.+1132   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
//   * force target warm temperatures no higher than eco value.
// On setting confort mode:
//   * force target warm temperatures no lower than comfort value.
static bool setEcoBias(const bool eco)
  {
  if(eco)
    331c:	80 81       	ld	r24, Z
    331e:	83 34       	cpi	r24, 0x43	; 67
    3320:	91 f0       	breq	.+36     	; 0x3346 <pollCLI(unsigned char)+0x1b2>
    {
    eeprom_smart_erase_byte((uint8_t *)EE_START_ECO_BIAS);
    3322:	83 e1       	ldi	r24, 0x13	; 19
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
    if(getWARMTargetC() > BIASECO_WARM) { setWARMTargetC(BIASECO_WARM); } // Allow no higher than eco default.
    332a:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
    332e:	82 31       	cpi	r24, 0x12	; 18
    3330:	18 f0       	brcs	.+6      	; 0x3338 <pollCLI(unsigned char)+0x1a4>
    3332:	81 e1       	ldi	r24, 0x11	; 17
    3334:	0e 94 6e 05 	call	0xadc	; 0xadc <setWARMTargetC(unsigned char)>
    if(getFROSTTargetC() > BIASECO_FROST) { setFROSTTargetC(BIASECO_FROST); } // Allow no higher than eco default.
    3338:	0e 94 17 04 	call	0x82e	; 0x82e <getFROSTTargetC()>
    333c:	86 30       	cpi	r24, 0x06	; 6
    333e:	08 f4       	brcc	.+2      	; 0x3342 <pollCLI(unsigned char)+0x1ae>
    3340:	23 c2       	rjmp	.+1094   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    3342:	85 e0       	ldi	r24, 0x05	; 5
    3344:	15 c0       	rjmp	.+42     	; 0x3370 <pollCLI(unsigned char)+0x1dc>
    }
  else
    {
    eeprom_smart_clear_bits((uint8_t *)EE_START_ECO_BIAS, randRNG8() & ~1); // Gratuitously capture some slight entropy in EEPROM.
    3346:	0e 94 c9 10 	call	0x2192	; 0x2192 <randRNG8()>
    334a:	68 2f       	mov	r22, r24
    334c:	6e 7f       	andi	r22, 0xFE	; 254
    334e:	83 e1       	ldi	r24, 0x13	; 19
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 7d 07 	call	0xefa	; 0xefa <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    if(getWARMTargetC() < BIASCOM_WARM) { setWARMTargetC(BIASCOM_WARM); } // Allow no lower than comfort default.
    3356:	0e 94 26 04 	call	0x84c	; 0x84c <getWARMTargetC()>
    335a:	84 31       	cpi	r24, 0x14	; 20
    335c:	18 f4       	brcc	.+6      	; 0x3364 <pollCLI(unsigned char)+0x1d0>
    335e:	84 e1       	ldi	r24, 0x14	; 20
    3360:	0e 94 6e 05 	call	0xadc	; 0xadc <setWARMTargetC(unsigned char)>
    if(getFROSTTargetC() < BIASCOM_FROST) { setFROSTTargetC(BIASCOM_FROST); } // Allow no lower than comfort default.
    3364:	0e 94 17 04 	call	0x82e	; 0x82e <getFROSTTargetC()>
    3368:	8a 30       	cpi	r24, 0x0A	; 10
    336a:	08 f0       	brcs	.+2      	; 0x336e <pollCLI(unsigned char)+0x1da>
    336c:	0d c2       	rjmp	.+1050   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    336e:	8a e0       	ldi	r24, 0x0A	; 10
    3370:	0e 94 89 05 	call	0xb12	; 0xb12 <setFROSTTargetC(unsigned char)>
    3374:	09 c2       	rjmp	.+1042   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3376:	13 30       	cpi	r17, 0x03	; 3
    3378:	08 f4       	brcc	.+2      	; 0x337c <pollCLI(unsigned char)+0x1e8>
    337a:	06 c2       	rjmp	.+1036   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    337c:	80 eb       	ldi	r24, 0xB0	; 176
    337e:	91 e0       	ldi	r25, 0x01	; 1
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	71 e0       	ldi	r23, 0x01	; 1
    3384:	ae 01       	movw	r20, r28
    3386:	4f 5f       	subi	r20, 0xFF	; 255
    3388:	5f 4f       	sbci	r21, 0xFF	; 255
    338a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	09 f4       	brne	.+2      	; 0x3394 <pollCLI(unsigned char)+0x200>
    3392:	fa c1       	rjmp	.+1012   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    3394:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
          setMinBoilerOnMinutes(m);
    3398:	0e 94 67 05 	call	0xace	; 0xace <setMinBoilerOnMinutes(unsigned char)>
    339c:	f5 c1       	rjmp	.+1002   	; 0x3788 <pollCLI(unsigned char)+0x5f4>
        break;
        }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLISecondsLeft = 0; break; }
    339e:	10 92 04 01 	sts	0x0104, r1
    33a2:	f2 c1       	rjmp	.+996    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    33a4:	13 30       	cpi	r17, 0x03	; 3
    33a6:	08 f4       	brcc	.+2      	; 0x33aa <pollCLI(unsigned char)+0x216>
    33a8:	ef c1       	rjmp	.+990    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    33aa:	80 eb       	ldi	r24, 0xB0	; 176
    33ac:	91 e0       	ldi	r25, 0x01	; 1
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	71 e0       	ldi	r23, 0x01	; 1
    33b2:	ae 01       	movw	r20, r28
    33b4:	4f 5f       	subi	r20, 0xFF	; 255
    33b6:	5f 4f       	sbci	r21, 0xFF	; 255
    33b8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	09 f4       	brne	.+2      	; 0x33c2 <pollCLI(unsigned char)+0x22e>
    33c0:	e3 c1       	rjmp	.+966    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    33c2:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    33c6:	08 2f       	mov	r16, r24
    33c8:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    33ca:	81 2f       	mov	r24, r17
    33cc:	60 2f       	mov	r22, r16
    33ce:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <getByHourStat(unsigned char, unsigned char)>
    33d2:	68 2f       	mov	r22, r24
    33d4:	87 e0       	ldi	r24, 0x07	; 7
    33d6:	93 e0       	ldi	r25, 0x03	; 3
    33d8:	4a e0       	ldi	r20, 0x0A	; 10
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
    33e0:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    33e4:	1f 5f       	subi	r17, 0xFF	; 255
    33e6:	18 31       	cpi	r17, 0x18	; 24
    33e8:	81 f7       	brne	.-32     	; 0x33ca <pollCLI(unsigned char)+0x236>
    33ea:	45 c1       	rjmp	.+650    	; 0x3676 <pollCLI(unsigned char)+0x4e2>
      case 'D':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    33ec:	13 30       	cpi	r17, 0x03	; 3
    33ee:	08 f4       	brcc	.+2      	; 0x33f2 <pollCLI(unsigned char)+0x25e>
    33f0:	b9 c1       	rjmp	.+882    	; 0x3764 <pollCLI(unsigned char)+0x5d0>
    33f2:	80 eb       	ldi	r24, 0xB0	; 176
    33f4:	91 e0       	ldi	r25, 0x01	; 1
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	71 e0       	ldi	r23, 0x01	; 1
    33fa:	ae 01       	movw	r20, r28
    33fc:	4f 5f       	subi	r20, 0xFF	; 255
    33fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3400:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	09 f4       	brne	.+2      	; 0x340a <pollCLI(unsigned char)+0x276>
    3408:	ad c1       	rjmp	.+858    	; 0x3764 <pollCLI(unsigned char)+0x5d0>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    340a:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    340e:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    3410:	0e 94 60 13 	call	0x26c0	; 0x26c0 <getHoursLT()>
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
    3414:	88 23       	and	r24, r24
    3416:	19 f4       	brne	.+6      	; 0x341e <pollCLI(unsigned char)+0x28a>
    3418:	f7 e1       	ldi	r31, 0x17	; 23
    341a:	ff 2e       	mov	r15, r31
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <pollCLI(unsigned char)+0x28e>
    341e:	f8 2e       	mov	r15, r24
    3420:	fa 94       	dec	r15
    3422:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    3424:	81 2f       	mov	r24, r17
    3426:	60 2f       	mov	r22, r16
    3428:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <getByHourStat(unsigned char, unsigned char)>
    342c:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    342e:	8f 3f       	cpi	r24, 0xFF	; 255
    3430:	21 f4       	brne	.+8      	; 0x343a <pollCLI(unsigned char)+0x2a6>
    3432:	87 e0       	ldi	r24, 0x07	; 7
    3434:	93 e0       	ldi	r25, 0x03	; 3
    3436:	6d e2       	ldi	r22, 0x2D	; 45
    3438:	1b c0       	rjmp	.+54     	; 0x3470 <pollCLI(unsigned char)+0x2dc>
            // ...else print more human-friendly version of stat.
            else switch(setN) // Relationship between stats set and type should probably be centralised to avoid getting out of sync with usage.
    343a:	04 30       	cpi	r16, 0x04	; 4
    343c:	18 f4       	brcc	.+6      	; 0x3444 <pollCLI(unsigned char)+0x2b0>
    343e:	02 30       	cpi	r16, 0x02	; 2
    3440:	d0 f4       	brcc	.+52     	; 0x3476 <pollCLI(unsigned char)+0x2e2>
    3442:	03 c0       	rjmp	.+6      	; 0x344a <pollCLI(unsigned char)+0x2b6>
    3444:	04 30       	cpi	r16, 0x04	; 4
    3446:	49 f5       	brne	.+82     	; 0x349a <pollCLI(unsigned char)+0x306>
    3448:	22 c0       	rjmp	.+68     	; 0x348e <pollCLI(unsigned char)+0x2fa>
              {
              case 0: case 1: { Serial.print((expandTempC16(statRaw)+8) >> 4); Serial.print('C'); break; } // Uncompanded temperature, rounded.
    344a:	0e 94 28 05 	call	0xa50	; 0xa50 <expandTempC16(unsigned char)>
    344e:	bc 01       	movw	r22, r24
    3450:	68 5f       	subi	r22, 0xF8	; 248
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	e4 e0       	ldi	r30, 0x04	; 4
    3456:	75 95       	asr	r23
    3458:	67 95       	ror	r22
    345a:	ea 95       	dec	r30
    345c:	e1 f7       	brne	.-8      	; 0x3456 <pollCLI(unsigned char)+0x2c2>
    345e:	87 e0       	ldi	r24, 0x07	; 7
    3460:	93 e0       	ldi	r25, 0x03	; 3
    3462:	4a e0       	ldi	r20, 0x0A	; 10
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
    346a:	87 e0       	ldi	r24, 0x07	; 7
    346c:	93 e0       	ldi	r25, 0x03	; 3
    346e:	63 e4       	ldi	r22, 0x43	; 67
    3470:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
    3474:	12 c0       	rjmp	.+36     	; 0x349a <pollCLI(unsigned char)+0x306>
              case 2: case 3: { Serial.print(((int)statRaw) << 2); break; } // Uncompressed ambient light level.
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	66 0f       	add	r22, r22
    347a:	77 1f       	adc	r23, r23
    347c:	66 0f       	add	r22, r22
    347e:	77 1f       	adc	r23, r23
    3480:	87 e0       	ldi	r24, 0x07	; 7
    3482:	93 e0       	ldi	r25, 0x03	; 3
    3484:	4a e0       	ldi	r20, 0x0A	; 10
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <Print::print(int, int)>
    348c:	06 c0       	rjmp	.+12     	; 0x349a <pollCLI(unsigned char)+0x306>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
    348e:	87 e0       	ldi	r24, 0x07	; 7
    3490:	93 e0       	ldi	r25, 0x03	; 3
    3492:	40 e1       	ldi	r20, 0x10	; 16
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
    349a:	1f 15       	cp	r17, r15
    349c:	29 f4       	brne	.+10     	; 0x34a8 <pollCLI(unsigned char)+0x314>
    349e:	87 e0       	ldi	r24, 0x07	; 7
    34a0:	93 e0       	ldi	r25, 0x03	; 3
    34a2:	6c e3       	ldi	r22, 0x3C	; 60
    34a4:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
            Serial_print_space();
    34a8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <Serial_print_space()>
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          const uint8_t thisHH = getHoursLT();
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          for(uint8_t hh = 0; hh < 24; ++hh)
    34ac:	1f 5f       	subi	r17, 0xFF	; 255
    34ae:	18 31       	cpi	r17, 0x18	; 24
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <pollCLI(unsigned char)+0x320>
    34b2:	b8 cf       	rjmp	.-144    	; 0x3424 <pollCLI(unsigned char)+0x290>
    34b4:	53 c1       	rjmp	.+678    	; 0x375c <pollCLI(unsigned char)+0x5c8>
      case 'F':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    34b6:	13 30       	cpi	r17, 0x03	; 3
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <pollCLI(unsigned char)+0x328>
    34ba:	5b c1       	rjmp	.+694    	; 0x3772 <pollCLI(unsigned char)+0x5de>
    34bc:	80 eb       	ldi	r24, 0xB0	; 176
    34be:	91 e0       	ldi	r25, 0x01	; 1
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	71 e0       	ldi	r23, 0x01	; 1
    34c4:	ae 01       	movw	r20, r28
    34c6:	4f 5f       	subi	r20, 0xFF	; 255
    34c8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ca:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <pollCLI(unsigned char)+0x340>
    34d2:	4f c1       	rjmp	.+670    	; 0x3772 <pollCLI(unsigned char)+0x5de>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    34d4:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    34d8:	0e 94 89 05 	call	0xb12	; 0xb12 <setFROSTTargetC(unsigned char)>
    34dc:	0d c1       	rjmp	.+538    	; 0x36f8 <pollCLI(unsigned char)+0x564>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    34de:	15 30       	cpi	r17, 0x05	; 5
    34e0:	08 f4       	brcc	.+2      	; 0x34e4 <pollCLI(unsigned char)+0x350>
    34e2:	4a c1       	rjmp	.+660    	; 0x3778 <pollCLI(unsigned char)+0x5e4>
    34e4:	80 eb       	ldi	r24, 0xB0	; 176
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	71 e0       	ldi	r23, 0x01	; 1
    34ec:	ae 01       	movw	r20, r28
    34ee:	4f 5f       	subi	r20, 0xFF	; 255
    34f0:	5f 4f       	sbci	r21, 0xFF	; 255
    34f2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    34f6:	7c 01       	movw	r14, r24
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	09 f4       	brne	.+2      	; 0x34fe <pollCLI(unsigned char)+0x36a>
    34fc:	3d c1       	rjmp	.+634    	; 0x3778 <pollCLI(unsigned char)+0x5e4>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	71 e0       	ldi	r23, 0x01	; 1
    3506:	ae 01       	movw	r20, r28
    3508:	4f 5f       	subi	r20, 0xFF	; 255
    350a:	5f 4f       	sbci	r21, 0xFF	; 255
    350c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3510:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	09 f4       	brne	.+2      	; 0x3518 <pollCLI(unsigned char)+0x384>
    3516:	38 c1       	rjmp	.+624    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
            {
            const int hc1 = atoi(tok1);
    3518:	c7 01       	movw	r24, r14
    351a:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    351e:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    3520:	c8 01       	movw	r24, r16
    3522:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    3526:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    3528:	84 e6       	ldi	r24, 0x64	; 100
    352a:	e8 16       	cp	r14, r24
    352c:	f1 04       	cpc	r15, r1
    352e:	08 f0       	brcs	.+2      	; 0x3532 <pollCLI(unsigned char)+0x39e>
    3530:	e6 c0       	rjmp	.+460    	; 0x36fe <pollCLI(unsigned char)+0x56a>
    3532:	17 fd       	sbrc	r17, 7
    3534:	e4 c0       	rjmp	.+456    	; 0x36fe <pollCLI(unsigned char)+0x56a>
    3536:	04 36       	cpi	r16, 0x64	; 100
    3538:	11 05       	cpc	r17, r1
    353a:	0c f0       	brlt	.+2      	; 0x353e <pollCLI(unsigned char)+0x3aa>
    353c:	e0 c0       	rjmp	.+448    	; 0x36fe <pollCLI(unsigned char)+0x56a>
            else
              {
              FHT8VSetHC1(hc1);
    353e:	8e 2d       	mov	r24, r14
    3540:	0e 94 c7 0c 	call	0x198e	; 0x198e <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    3544:	80 2f       	mov	r24, r16
    3546:	0e 94 c1 0c 	call	0x1982	; 0x1982 <FHT8VSetHC2(unsigned char)>
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <pollCLI(unsigned char)+0x3bc>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    354c:	0e 94 cd 0c 	call	0x199a	; 0x199a <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    3550:	0e 94 bd 08 	call	0x117a	; 0x117a <FHT8VSyncAndTXReset()>
    3554:	19 c1       	rjmp	.+562    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
        break;
        }
#endif

      // Learn current settings, just as if LEARN button had been pressed.
      case 'L': { handleLearnButton(); break; }
    3556:	0e 94 19 17 	call	0x2e32	; 0x2e32 <handleLearnButton()>
    355a:	16 c1       	rjmp	.+556    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 7 character sequence makes sense and is safe to tokenise, eg "P 1 2 3".
        if((n >= 7) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    355c:	17 30       	cpi	r17, 0x07	; 7
    355e:	08 f4       	brcc	.+2      	; 0x3562 <pollCLI(unsigned char)+0x3ce>
    3560:	13 c1       	rjmp	.+550    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    3562:	80 eb       	ldi	r24, 0xB0	; 176
    3564:	91 e0       	ldi	r25, 0x01	; 1
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	71 e0       	ldi	r23, 0x01	; 1
    356a:	ae 01       	movw	r20, r28
    356c:	4f 5f       	subi	r20, 0xFF	; 255
    356e:	5f 4f       	sbci	r21, 0xFF	; 255
    3570:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3574:	5c 01       	movw	r10, r24
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	09 f4       	brne	.+2      	; 0x357c <pollCLI(unsigned char)+0x3e8>
    357a:	06 c1       	rjmp	.+524    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	71 e0       	ldi	r23, 0x01	; 1
    3584:	7e 01       	movw	r14, r28
    3586:	08 94       	sec
    3588:	e1 1c       	adc	r14, r1
    358a:	f1 1c       	adc	r15, r1
    358c:	a7 01       	movw	r20, r14
    358e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3592:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	09 f4       	brne	.+2      	; 0x359a <pollCLI(unsigned char)+0x406>
    3598:	f7 c0       	rjmp	.+494    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
            {
            char *tok3 = strtok_r(NULL, " ", &last);
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	71 e0       	ldi	r23, 0x01	; 1
    35a2:	a7 01       	movw	r20, r14
    35a4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    35a8:	6c 01       	movw	r12, r24
            if(NULL != tok3)
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <pollCLI(unsigned char)+0x41c>
    35ae:	ec c0       	rjmp	.+472    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
              {
                const int hh = atoi(tok1);
    35b0:	c5 01       	movw	r24, r10
    35b2:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    35b6:	7c 01       	movw	r14, r24
                const int mm = atoi(tok2);
    35b8:	c8 01       	movw	r24, r16
    35ba:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    35be:	8c 01       	movw	r16, r24
                const int dd = atoi(tok3);
    35c0:	c6 01       	movw	r24, r12
    35c2:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
                // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
                if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint_least16_t) (dd * 60))) { InvalidIgnored(); }
    35c6:	2c e3       	ldi	r18, 0x3C	; 60
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	e2 9e       	mul	r14, r18
    35cc:	a0 01       	movw	r20, r0
    35ce:	e3 9e       	mul	r14, r19
    35d0:	50 0d       	add	r21, r0
    35d2:	f2 9e       	mul	r15, r18
    35d4:	50 0d       	add	r21, r0
    35d6:	11 24       	eor	r1, r1
    35d8:	82 9f       	mul	r24, r18
    35da:	b0 01       	movw	r22, r0
    35dc:	83 9f       	mul	r24, r19
    35de:	70 0d       	add	r23, r0
    35e0:	92 9f       	mul	r25, r18
    35e2:	70 0d       	add	r23, r0
    35e4:	11 24       	eor	r1, r1
    35e6:	ca 01       	movw	r24, r20
    35e8:	80 0f       	add	r24, r16
    35ea:	91 1f       	adc	r25, r17
    35ec:	0e 94 75 14 	call	0x28ea	; 0x28ea <setSimpleSchedule(unsigned int, unsigned int)>
    35f0:	83 c0       	rjmp	.+262    	; 0x36f8 <pollCLI(unsigned char)+0x564>
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	80 93 ad 01 	sts	0x01AD, r24
    35f8:	8e e1       	ldi	r24, 0x1E	; 30
    35fa:	80 93 b9 01 	sts	0x01B9, r24
    35fe:	c4 c0       	rjmp	.+392    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
#endif

      // Status line and smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Reset count: "));
    3600:	87 e0       	ldi	r24, 0x07	; 7
    3602:	93 e0       	ldi	r25, 0x03	; 3
    3604:	60 eb       	ldi	r22, 0xB0	; 176
    3606:	71 e0       	ldi	r23, 0x01	; 1
    3608:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    360c:	f9 99       	sbic	0x1f, 1	; 31
    360e:	fe cf       	rjmp	.-4      	; 0x360c <pollCLI(unsigned char)+0x478>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3610:	86 e0       	ldi	r24, 0x06	; 6
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	92 bd       	out	0x22, r25	; 34
    3616:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3618:	f8 9a       	sbi	0x1f, 0	; 31
    361a:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    361c:	87 e0       	ldi	r24, 0x07	; 7
    361e:	93 e0       	ldi	r25, 0x03	; 3
    3620:	4a e0       	ldi	r20, 0x0A	; 10
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	0e 94 a2 28 	call	0x5144	; 0x5144 <Print::print(unsigned char, int)>
        Serial.println();
    3628:	87 e0       	ldi	r24, 0x07	; 7
    362a:	93 e0       	ldi	r25, 0x03	; 3
    362c:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
        uint_least8_t hh = getHoursLT();
    3630:	0e 94 60 13 	call	0x26c0	; 0x26c0 <getHoursLT()>
    3634:	f8 2e       	mov	r15, r24
        Serial.print(F("Smart warming: "));
    3636:	87 e0       	ldi	r24, 0x07	; 7
    3638:	93 e0       	ldi	r25, 0x03	; 3
    363a:	60 ea       	ldi	r22, 0xA0	; 160
    363c:	71 e0       	ldi	r23, 0x01	; 1
    363e:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <Print::print(__FlashStringHelper const*)>
    3642:	08 e1       	ldi	r16, 0x18	; 24
    3644:	10 e0       	ldi	r17, 0x00	; 0
    3646:	11 c0       	rjmp	.+34     	; 0x366a <pollCLI(unsigned char)+0x4d6>
        for(int i = 24; --i >= 0; )
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
    3648:	8f 2d       	mov	r24, r15
    364a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <shouldBeWarmedAtHour(unsigned char)>
    364e:	88 23       	and	r24, r24
    3650:	11 f4       	brne	.+4      	; 0x3656 <pollCLI(unsigned char)+0x4c2>
    3652:	66 e6       	ldi	r22, 0x66	; 102
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <pollCLI(unsigned char)+0x4c4>
    3656:	67 e7       	ldi	r22, 0x77	; 119
    3658:	87 e0       	ldi	r24, 0x07	; 7
    365a:	93 e0       	ldi	r25, 0x03	; 3
    365c:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <Print::print(char)>
          if(++hh > 23) { hh = 0; }
    3660:	f3 94       	inc	r15
    3662:	87 e1       	ldi	r24, 0x17	; 23
    3664:	8f 15       	cp	r24, r15
    3666:	08 f4       	brcc	.+2      	; 0x366a <pollCLI(unsigned char)+0x4d6>
    3668:	ff 24       	eor	r15, r15
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
        Serial.println();
        uint_least8_t hh = getHoursLT();
        Serial.print(F("Smart warming: "));
        for(int i = 24; --i >= 0; )
    366a:	01 50       	subi	r16, 0x01	; 1
    366c:	10 40       	sbci	r17, 0x00	; 0
    366e:	8f ef       	ldi	r24, 0xFF	; 255
    3670:	0f 3f       	cpi	r16, 0xFF	; 255
    3672:	18 07       	cpc	r17, r24
    3674:	49 f7       	brne	.-46     	; 0x3648 <pollCLI(unsigned char)+0x4b4>
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
          if(++hh > 23) { hh = 0; }
          }
        Serial.println();
    3676:	87 e0       	ldi	r24, 0x07	; 7
    3678:	93 e0       	ldi	r25, 0x03	; 3
    367a:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
    367e:	84 c0       	rjmp	.+264    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    3680:	15 30       	cpi	r17, 0x05	; 5
    3682:	08 f4       	brcc	.+2      	; 0x3686 <pollCLI(unsigned char)+0x4f2>
    3684:	81 c0       	rjmp	.+258    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    3686:	80 eb       	ldi	r24, 0xB0	; 176
    3688:	91 e0       	ldi	r25, 0x01	; 1
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	71 e0       	ldi	r23, 0x01	; 1
    368e:	ae 01       	movw	r20, r28
    3690:	4f 5f       	subi	r20, 0xFF	; 255
    3692:	5f 4f       	sbci	r21, 0xFF	; 255
    3694:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    3698:	8c 01       	movw	r16, r24
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	09 f4       	brne	.+2      	; 0x36a0 <pollCLI(unsigned char)+0x50c>
    369e:	74 c0       	rjmp	.+232    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	60 e0       	ldi	r22, 0x00	; 0
    36a6:	71 e0       	ldi	r23, 0x01	; 1
    36a8:	ae 01       	movw	r20, r28
    36aa:	4f 5f       	subi	r20, 0xFF	; 255
    36ac:	5f 4f       	sbci	r21, 0xFF	; 255
    36ae:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    36b2:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	09 f4       	brne	.+2      	; 0x36ba <pollCLI(unsigned char)+0x526>
    36b8:	67 c0       	rjmp	.+206    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
            {
            const int hh = atoi(tok1);
    36ba:	c8 01       	movw	r24, r16
    36bc:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    36c0:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    36c2:	c7 01       	movw	r24, r14
    36c4:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
    36c8:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    36ca:	c8 01       	movw	r24, r16
    36cc:	0e 94 1b 14 	call	0x2836	; 0x2836 <setHoursMinutesLT(int, int)>
    36d0:	13 c0       	rjmp	.+38     	; 0x36f8 <pollCLI(unsigned char)+0x564>
      case 'W':
        {
#ifdef SETTABLE_TARGET_TEMPERATURES
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    36d2:	13 30       	cpi	r17, 0x03	; 3
    36d4:	08 f4       	brcc	.+2      	; 0x36d8 <pollCLI(unsigned char)+0x544>
    36d6:	53 c0       	rjmp	.+166    	; 0x377e <pollCLI(unsigned char)+0x5ea>
    36d8:	80 eb       	ldi	r24, 0xB0	; 176
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	71 e0       	ldi	r23, 0x01	; 1
    36e0:	ae 01       	movw	r20, r28
    36e2:	4f 5f       	subi	r20, 0xFF	; 255
    36e4:	5f 4f       	sbci	r21, 0xFF	; 255
    36e6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <strtok_r>
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <pollCLI(unsigned char)+0x55c>
    36ee:	47 c0       	rjmp	.+142    	; 0x377e <pollCLI(unsigned char)+0x5ea>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    36f0:	0e 94 45 03 	call	0x68a	; 0x68a <atoi>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
    36f4:	0e 94 6e 05 	call	0xadc	; 0xadc <setWARMTargetC(unsigned char)>
    36f8:	88 23       	and	r24, r24
    36fa:	09 f0       	breq	.+2      	; 0x36fe <pollCLI(unsigned char)+0x56a>
    36fc:	45 c0       	rjmp	.+138    	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    36fe:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <InvalidIgnored()>
    3702:	42 c0       	rjmp	.+132    	; 0x3788 <pollCLI(unsigned char)+0x5f4>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	8b 83       	std	Y+3, r24	; 0x03
    370c:	80 91 b2 00 	lds	r24, 0x00B2
    3710:	2f ef       	ldi	r18, 0xFF	; 255
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	28 1b       	sub	r18, r24
    3716:	31 09       	sbc	r19, r1
    3718:	c9 01       	movw	r24, r18
    371a:	43 e0       	ldi	r20, 0x03	; 3
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	4a 95       	dec	r20
    3722:	e1 f7       	brne	.-8      	; 0x371c <pollCLI(unsigned char)+0x588>
    3724:	82 1b       	sub	r24, r18
    3726:	93 0b       	sbc	r25, r19
    3728:	95 95       	asr	r25
    372a:	87 95       	ror	r24
    372c:	44 97       	sbiw	r24, 0x14	; 20
    372e:	9e 83       	std	Y+6, r25	; 0x06
    3730:	8d 83       	std	Y+5, r24	; 0x05
    3732:	81 30       	cpi	r24, 0x01	; 1
    3734:	91 05       	cpc	r25, r1
    3736:	14 f4       	brge	.+4      	; 0x373c <pollCLI(unsigned char)+0x5a8>
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 4b 05 	call	0xa96	; 0xa96 <zapStats(unsigned int)>
    3740:	88 23       	and	r24, r24
    3742:	29 f0       	breq	.+10     	; 0x374e <pollCLI(unsigned char)+0x5ba>
          { Serial.println(F("Zapped.")); }
    3744:	87 e0       	ldi	r24, 0x07	; 7
    3746:	93 e0       	ldi	r25, 0x03	; 3
    3748:	68 e9       	ldi	r22, 0x98	; 152
    374a:	71 e0       	ldi	r23, 0x01	; 1
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <pollCLI(unsigned char)+0x5c2>
        else
          { Serial.println(F("Not finished.")); }
    374e:	87 e0       	ldi	r24, 0x07	; 7
    3750:	93 e0       	ldi	r25, 0x03	; 3
    3752:	6a e8       	ldi	r22, 0x8A	; 138
    3754:	71 e0       	ldi	r23, 0x01	; 1
    3756:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <Print::println(__FlashStringHelper const*)>
    375a:	04 c0       	rjmp	.+8      	; 0x3764 <pollCLI(unsigned char)+0x5d0>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    }
  else { Serial.println(); } // Terminate empty CLI input line after timeout.
    375c:	87 e0       	ldi	r24, 0x07	; 7
    375e:	93 e0       	ldi	r25, 0x03	; 3
    3760:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    3764:	0e 94 4b 10 	call	0x2096	; 0x2096 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    3768:	99 20       	and	r9, r9
    376a:	89 f0       	breq	.+34     	; 0x378e <pollCLI(unsigned char)+0x5fa>
    376c:	0e 94 0e 10 	call	0x201c	; 0x201c <powerDownSerial()>
    3770:	0e c0       	rjmp	.+28     	; 0x378e <pollCLI(unsigned char)+0x5fa>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { isWarmMode = false; } // No parameter supplied; switch to FROST mode.
    3772:	10 92 ad 01 	sts	0x01AD, r1
    3776:	08 c0       	rjmp	.+16     	; 0x3788 <pollCLI(unsigned char)+0x5f4>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    3778:	12 30       	cpi	r17, 0x02	; 2
    377a:	30 f4       	brcc	.+12     	; 0x3788 <pollCLI(unsigned char)+0x5f4>
    377c:	e7 ce       	rjmp	.-562    	; 0x354c <pollCLI(unsigned char)+0x3b8>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          {
          isWarmMode = true; // No parameter supplied; switch to WARM mode.
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	80 93 ad 01 	sts	0x01AD, r24
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    3784:	10 92 b9 01 	sts	0x01B9, r1
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    3788:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <serialStatusReport()>
    378c:	eb cf       	rjmp	.-42     	; 0x3764 <pollCLI(unsigned char)+0x5d0>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    378e:	26 96       	adiw	r28, 0x06	; 6
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	bf 90       	pop	r11
    37ac:	af 90       	pop	r10
    37ae:	9f 90       	pop	r9
    37b0:	08 95       	ret

000037b2 <checkUserSchedule()>:
  return(statusChange);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    37b6:	0e 94 4b 13 	call	0x2696	; 0x2696 <getMinutesSinceMidnightLT()>
    37ba:	ec 01       	movw	r28, r24

  // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
  // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
  if(msm == getSimpleScheduleOff())
    37bc:	0e 94 56 14 	call	0x28ac	; 0x28ac <getSimpleScheduleOff()>
    37c0:	c8 17       	cp	r28, r24
    37c2:	d9 07       	cpc	r29, r25
    37c4:	19 f4       	brne	.+6      	; 0x37cc <checkUserSchedule()+0x1a>
    { isWarmMode = false; }
    37c6:	10 92 ad 01 	sts	0x01AD, r1
    37ca:	0a c0       	rjmp	.+20     	; 0x37e0 <checkUserSchedule()+0x2e>
  // Check if now is the simple scheduled on time.
  else if(msm == getSimpleScheduleOn())
    37cc:	0e 94 45 14 	call	0x288a	; 0x288a <getSimpleScheduleOn()>
    37d0:	c8 17       	cp	r28, r24
    37d2:	d9 07       	cpc	r29, r25
    37d4:	29 f4       	brne	.+10     	; 0x37e0 <checkUserSchedule()+0x2e>
    {
    isWarmMode = true;
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	80 93 ad 01 	sts	0x01AD, r24
    // In addition to moving into WARM mode, weakly inhibit any setbacks, etc, for a while.
    markAsPossiblyOccupied();
    37dc:	0e 94 57 07 	call	0xeae	; 0xeae <markAsPossiblyOccupied()>
    }
  }
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	08 95       	ret

000037e6 <offPause()>:


// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  nap(WDTO_120MS); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
    37e6:	83 e0       	ldi	r24, 0x03	; 3
    37e8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
  pollIO(); // Slip in an I/O poll.
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
  }
    37f2:	08 95       	ret

000037f4 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(uint_fast8_t sec)
    37f4:	1f 93       	push	r17
    37f6:	98 2f       	mov	r25, r24

  const bool sec0 = (0 == sec);

#ifdef SUPPORT_BAKE
  // Run down BAKE mode timer if need be, one tick per minute.
  if(sec0 && (bakeCountdownM > 0)) { --bakeCountdownM; }
    37f8:	88 23       	and	r24, r24
    37fa:	39 f4       	brne	.+14     	; 0x380a <tickUI(unsigned char)+0x16>
    37fc:	80 91 b9 01 	lds	r24, 0x01B9
    3800:	88 23       	and	r24, r24
    3802:	19 f0       	breq	.+6      	; 0x380a <tickUI(unsigned char)+0x16>
    3804:	81 50       	subi	r24, 0x01	; 1
    3806:	80 93 b9 01 	sts	0x01B9, r24
#endif

  // Time out CLI activation if need be, one tick per second.
  if(CLISecondsLeft != 0)
    380a:	80 91 04 01 	lds	r24, 0x0104
    380e:	88 23       	and	r24, r24
    3810:	39 f0       	breq	.+14     	; 0x3820 <tickUI(unsigned char)+0x2c>
    {
    // Decrements two at a time (because routine called every two seconds) but avoids underflow.
    if((CLISecondsLeft -= 2) < 0) { CLISecondsLeft = 0; }
    3812:	82 50       	subi	r24, 0x02	; 2
    3814:	80 93 04 01 	sts	0x0104, r24
    3818:	87 ff       	sbrs	r24, 7
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <tickUI(unsigned char)+0x2c>
    381c:	10 92 04 01 	sts	0x0104, r1
    }

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    3820:	4d 99       	sbic	0x09, 5	; 9
    3822:	20 c0       	rjmp	.+64     	; 0x3864 <tickUI(unsigned char)+0x70>
    {
    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    statusChange = true;
    // Mark room as currently occupied given button press.
    markAsOccupied();
    3824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <markAsOccupied()>
    // Make CLI active for a while.
    resetCLIActiveTimer();
    3828:	8c e3       	ldi	r24, 0x3C	; 60
    382a:	80 93 04 01 	sts	0x0104, r24
    // LED on...
    fastDigitalWrite(LED_HEATCALL, HIGH);
    382e:	2d 9a       	sbi	0x05, 5	; 5
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    3830:	80 91 ad 01 	lds	r24, 0x01AD
    3834:	88 23       	and	r24, r24
    3836:	69 f4       	brne	.+26     	; 0x3852 <tickUI(unsigned char)+0x5e>
      {
      isWarmMode = true;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	80 93 ad 01 	sts	0x01AD, r24
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    383e:	10 92 b9 01 	sts	0x01B9, r1
void burnHundredsOfCyclesProductivelyAndPoll();


// Use WDT-based timer for xxxPause() routines.
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
      isWarmMode = true;
#ifdef SUPPORT_BAKE
      cancelBake(); // Ensure no bake mode running.
#endif
      tinyPause(); // 2 x tiny flash 'heat call' to indicate now in WARM mode.
      fastDigitalWrite(LED_HEATCALL, LOW);
    3848:	2d 98       	cbi	0x05, 5	; 5
      offPause();
    384a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <offPause()>
      fastDigitalWrite(LED_HEATCALL, HIGH);
    384e:	2d 9a       	sbi	0x05, 5	; 5
    3850:	07 c0       	rjmp	.+14     	; 0x3860 <tickUI(unsigned char)+0x6c>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    3852:	80 91 b9 01 	lds	r24, 0x01B9
    3856:	88 23       	and	r24, r24
    3858:	09 f4       	brne	.+2      	; 0x385c <tickUI(unsigned char)+0x68>
    385a:	5e c0       	rjmp	.+188    	; 0x3918 <tickUI(unsigned char)+0x124>
      mediumPause();
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmMode = false;
    385c:	10 92 ad 01 	sts	0x01AD, r1
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	70 c0       	rjmp	.+224    	; 0x3944 <tickUI(unsigned char)+0x150>
      tinyPause(); // 1 x tiny flash 'heat call' to indicate now in FROST mode.
      }
    }
  else
    {
    const bool forthTick = !(sec & 6); // True on every 4th tick.
    3864:	10 e0       	ldi	r17, 0x00	; 0
    3866:	96 70       	andi	r25, 0x06	; 6
    3868:	09 f4       	brne	.+2      	; 0x386c <tickUI(unsigned char)+0x78>
    386a:	11 e0       	ldi	r17, 0x01	; 1

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    if(isWarmMode) // Generate flash(es) if in WARM mode.
    386c:	80 91 ad 01 	lds	r24, 0x01AD
    3870:	88 23       	and	r24, r24
    3872:	69 f1       	breq	.+90     	; 0x38ce <tickUI(unsigned char)+0xda>
      {
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      if(!isRoomDark() || (forthTick && (0 != readAmbientLight()) && !isRoomDark()))
    3874:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
    3878:	88 23       	and	r24, r24
    387a:	59 f4       	brne	.+22     	; 0x3892 <tickUI(unsigned char)+0x9e>
    387c:	11 23       	and	r17, r17
    387e:	09 f4       	brne	.+2      	; 0x3882 <tickUI(unsigned char)+0x8e>
    3880:	3f c0       	rjmp	.+126    	; 0x3900 <tickUI(unsigned char)+0x10c>
    3882:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <readAmbientLight()>
    3886:	89 2b       	or	r24, r25
    3888:	d9 f1       	breq	.+118    	; 0x3900 <tickUI(unsigned char)+0x10c>
    388a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
    388e:	88 23       	and	r24, r24
    3890:	b9 f1       	breq	.+110    	; 0x3900 <tickUI(unsigned char)+0x10c>
//#ifdef LEARN_BUTTON_AVAILABLE
//        if((!forthTick) || isSimpleScheduleSet()) // Omit every 4th set of flashes unless a schedule is set.
//#endif
          {
          // First flash to indicate WARM mode.
          fastDigitalWrite(LED_HEATCALL, HIGH);
    3892:	2d 9a       	sbi	0x05, 5	; 5
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
          tinyPause();
  
          // Second flash to indicate nominally calling for heat.
          // TODO: could consider using isControlledValveOpen() instead.
          if(getTRVPercentOpen() >= DEFAULT_MIN_VALVE_PC_REALLY_OPEN)
    389a:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    389e:	8a 30       	cpi	r24, 0x0A	; 10
    38a0:	78 f1       	brcs	.+94     	; 0x3900 <tickUI(unsigned char)+0x10c>
            {
            fastDigitalWrite(LED_HEATCALL, LOW);
    38a2:	2d 98       	cbi	0x05, 5	; 5
            offPause(); // V0.09 was mediumPause().
    38a4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <offPause()>
            fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    38a8:	2d 9a       	sbi	0x05, 5	; 5
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    38b0:	80 91 ad 01 	lds	r24, 0x01AD
    38b4:	88 23       	and	r24, r24
    38b6:	21 f1       	breq	.+72     	; 0x3900 <tickUI(unsigned char)+0x10c>
    38b8:	80 91 b9 01 	lds	r24, 0x01B9
    38bc:	88 23       	and	r24, r24
    38be:	01 f1       	breq	.+64     	; 0x3900 <tickUI(unsigned char)+0x10c>
  
#ifdef SUPPORT_BAKE
            if(inBakeMode())
              {
              // Third (lengthened) flash to indicate BAKE mode.
              fastDigitalWrite(LED_HEATCALL, LOW);
    38c0:	2d 98       	cbi	0x05, 5	; 5
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    38c2:	82 e0       	ldi	r24, 0x02	; 2
    38c4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
              mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
              fastDigitalWrite(LED_HEATCALL, HIGH);
    38c8:	2d 9a       	sbi	0x05, 5	; 5
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	17 c0       	rjmp	.+46     	; 0x38fc <tickUI(unsigned char)+0x108>
    // Even in FROST mode, if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick && !isRoomDark() && isControlledValveOpen() && (getTRVPercentOpen() >= DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    38ce:	11 23       	and	r17, r17
    38d0:	b9 f0       	breq	.+46     	; 0x3900 <tickUI(unsigned char)+0x10c>
    38d2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <isRoomLit()>
    38d6:	88 23       	and	r24, r24
    38d8:	99 f0       	breq	.+38     	; 0x3900 <tickUI(unsigned char)+0x10c>
    38da:	0e 94 b4 08 	call	0x1168	; 0x1168 <isControlledValveOpen()>
    38de:	88 23       	and	r24, r24
    38e0:	79 f0       	breq	.+30     	; 0x3900 <tickUI(unsigned char)+0x10c>
    38e2:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    38e6:	8a 30       	cpi	r24, 0x0A	; 10
    38e8:	58 f0       	brcs	.+22     	; 0x3900 <tickUI(unsigned char)+0x10c>
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    38ea:	2d 9a       	sbi	0x05, 5	; 5
void burnHundredsOfCyclesProductivelyAndPoll();


// Use WDT-based timer for xxxPause() routines.
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
      tinyPause();
      fastDigitalWrite(LED_HEATCALL, LOW);
    38f2:	2d 98       	cbi	0x05, 5	; 5
      offPause(); // V0.09 was mediumPause().
    38f4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <offPause()>
      fastDigitalWrite(LED_HEATCALL, HIGH); // flash
    38f8:	2d 9a       	sbi	0x05, 5	; 5
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    3900:	80 e0       	ldi	r24, 0x00	; 0
      tinyPause();
      }
    }

  // Ensure LED forced off/LOW at least once each cycle.
  fastDigitalWrite(LED_HEATCALL, LOW);
    3902:	2d 98       	cbi	0x05, 5	; 5

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    3904:	18 99       	sbic	0x03, 0	; 3
    3906:	06 c0       	rjmp	.+12     	; 0x3914 <tickUI(unsigned char)+0x120>
    {
    statusChange = true;
    handleLearnButton();
    3908:	0e 94 19 17 	call	0x2e32	; 0x2e32 <handleLearnButton()>
    markAsOccupied(); // Mark room as currently occupied given button press.
    390c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <markAsOccupied()>
    fastDigitalWrite(LED_HEATCALL, HIGH); // Leave heatcall LED on while learn button held down.
    3910:	2d 9a       	sbi	0x05, 5	; 5
    3912:	81 e0       	ldi	r24, 0x01	; 1
    }
#endif

  return(statusChange);
  }
    3914:	1f 91       	pop	r17
    3916:	08 95       	ret
// If true then the unit is in 'bake' mode, a subset of 'warm' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	80 93 ad 01 	sts	0x01AD, r24
    391e:	8e e1       	ldi	r24, 0x1E	; 30
    3920:	80 93 b9 01 	sts	0x01B9, r24
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
#ifdef SUPPORT_BAKE
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      tinyPause(); // 2 x tiny flash + one longer flash 'heat call' to indicate now in BAKE mode.
      fastDigitalWrite(LED_HEATCALL, LOW);
    392a:	2d 98       	cbi	0x05, 5	; 5
      offPause();
    392c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <offPause()>
      fastDigitalWrite(LED_HEATCALL, HIGH);
    3930:	2d 9a       	sbi	0x05, 5	; 5
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
      tinyPause();
      fastDigitalWrite(LED_HEATCALL, LOW);
    3938:	2d 98       	cbi	0x05, 5	; 5
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    393a:	82 e0       	ldi	r24, 0x02	; 2
    393c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      fastDigitalWrite(LED_HEATCALL, HIGH);
    3940:	2d 9a       	sbi	0x05, 5	; 5
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	db cf       	rjmp	.-74     	; 0x3902 <tickUI(unsigned char)+0x10e>

0000394c <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
    394c:	1f 93       	push	r17
    394e:	18 2f       	mov	r17, r24
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
    3950:	0e 94 57 04 	call	0x8ae	; 0x8ae <getMinBoilerOnMinutes()>
    3954:	88 23       	and	r24, r24
    3956:	99 f0       	breq	.+38     	; 0x397e <pollIO(bool)+0x32>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    uint8_t sct;
    if(force || ((0 == ((sct = getSubCycleTime()) & 3)) && (sct != _pO_lastPoll)))
    3958:	11 23       	and	r17, r17
    395a:	61 f4       	brne	.+24     	; 0x3974 <pollIO(bool)+0x28>
    395c:	20 91 b2 00 	lds	r18, 0x00B2
    3960:	82 2f       	mov	r24, r18
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	83 70       	andi	r24, 0x03	; 3
    3966:	90 70       	andi	r25, 0x00	; 0
    3968:	89 2b       	or	r24, r25
    396a:	49 f4       	brne	.+18     	; 0x397e <pollIO(bool)+0x32>
    396c:	80 91 be 01 	lds	r24, 0x01BE
    3970:	28 17       	cp	r18, r24
    3972:	29 f0       	breq	.+10     	; 0x397e <pollIO(bool)+0x32>
      {
      _pO_lastPoll = sct;
    3974:	20 93 be 01 	sts	0x01BE, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
    3978:	0e 94 1a 0a 	call	0x1434	; 0x1434 <FHT8VCallForHeatPoll()>
    397c:	01 c0       	rjmp	.+2      	; 0x3980 <pollIO(bool)+0x34>
    397e:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
    3980:	1f 91       	pop	r17
    3982:	08 95       	ret

00003984 <loop>:
static uint8_t boilerNoCallM;
#endif

// The main control loop routine runs forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    3984:	9f 92       	push	r9
    3986:	af 92       	push	r10
    3988:	bf 92       	push	r11
    398a:	cf 92       	push	r12
    398c:	df 92       	push	r13
    398e:	ef 92       	push	r14
    3990:	ff 92       	push	r15
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	00 d0       	rcall	.+0      	; 0x399c <loop+0x18>
    399c:	00 d0       	rcall	.+0      	; 0x399e <loop+0x1a>
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep resets, etc.
  const bool second0 = (0 == TIME_LSD);
    39a2:	cc 24       	eor	r12, r12
    39a4:	80 91 ba 01 	lds	r24, 0x01BA
    39a8:	88 23       	and	r24, r24
    39aa:	11 f4       	brne	.+4      	; 0x39b0 <loop+0x2c>
    39ac:	cc 24       	eor	r12, r12
    39ae:	c3 94       	inc	r12
//  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and if possible noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == (minuteCount & 3));
    39b0:	ee 24       	eor	r14, r14
    39b2:	80 91 bb 01 	lds	r24, 0x01BB
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	83 70       	andi	r24, 0x03	; 3
    39ba:	90 70       	andi	r25, 0x00	; 0
    39bc:	89 2b       	or	r24, r25
    39be:	11 f4       	brne	.+4      	; 0x39c4 <loop+0x40>
    39c0:	ee 24       	eor	r14, r14
    39c2:	e3 94       	inc	r14

  // Note last-measured battery status.
  const bool batteryLow = isBatteryLow();
    39c4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <isBatteryLow()>
    39c8:	a8 2e       	mov	r10, r24

  // Run some tasks less often when not demanding heat (at the valve or boiler), so as to conserve battery/energy.
  const bool conserveBattery =
    (batteryLow || !inWarmMode()) && // Don't spare the batteries unless in FROST mode (which should be most of the time) or the batteries are low.
    (!isControlledValveOpen()) &&  // Run at full speed until the FHT8V valve should actually have shut and the boiler gone off.
    (0 == getTRVPercentOpen()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    39ca:	88 23       	and	r24, r24
    39cc:	21 f4       	brne	.+8      	; 0x39d6 <loop+0x52>
    39ce:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <inWarmMode()>
    39d2:	88 23       	and	r24, r24
    39d4:	59 f4       	brne	.+22     	; 0x39ec <loop+0x68>
    39d6:	0e 94 b4 08 	call	0x1168	; 0x1168 <isControlledValveOpen()>
    39da:	88 23       	and	r24, r24
    39dc:	39 f4       	brne	.+14     	; 0x39ec <loop+0x68>
    39de:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    39e2:	88 23       	and	r24, r24
    39e4:	19 f4       	brne	.+6      	; 0x39ec <loop+0x68>
    39e6:	bb 24       	eor	r11, r11
    39e8:	b3 94       	inc	r11
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <loop+0x6a>
    39ec:	bb 24       	eor	r11, r11


  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    39ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <getMinBoilerOnMinutes()>
    39f2:	f8 2e       	mov	r15, r24
    39f4:	88 23       	and	r24, r24
    39f6:	09 f4       	brne	.+2      	; 0x39fa <loop+0x76>
    39f8:	41 c0       	rjmp	.+130    	; 0x3a7c <loop+0xf8>
    39fa:	ff 24       	eor	r15, r15
    39fc:	f3 94       	inc	r15
  if(hubMode)
    {
#if defined(USE_MODULE_FHT8VSIMPLE)

    // Final poll to to cover up to end of previous minor loop.
    FHT8VCallForHeatPoll();
    39fe:	0e 94 1a 0a 	call	0x1434	; 0x1434 <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    3a02:	0e 94 c6 08 	call	0x118c	; 0x118c <FHT8VCallForHeatHeardGetAndClear()>
    3a06:	8c 01       	movw	r16, r24
    const bool heardIt = hcRequest != (uint16_t)~0;
    3a08:	dd 24       	eor	r13, r13
    3a0a:	8f ef       	ldi	r24, 0xFF	; 255
    3a0c:	0f 3f       	cpi	r16, 0xFF	; 255
    3a0e:	18 07       	cpc	r17, r24
    3a10:	c1 f0       	breq	.+48     	; 0x3a42 <loop+0xbe>
    3a12:	dd 24       	eor	r13, r13
    3a14:	d3 94       	inc	r13
    if(heardIt)
      {
      serialPrintAndFlush(F("Call for heat from "));
    3a16:	8c e1       	ldi	r24, 0x1C	; 28
    3a18:	94 e0       	ldi	r25, 0x04	; 4
    3a1a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush((hcRequest >> 8) & 0xff);
    3a1e:	81 2f       	mov	r24, r17
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	6a e0       	ldi	r22, 0x0A	; 10
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <serialPrintAndFlush(unsigned int, int)>
      serialPrintAndFlush(' ');
    3a2a:	80 e2       	ldi	r24, 0x20	; 32
    3a2c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <serialPrintAndFlush(char)>
      serialPrintAndFlush(hcRequest & 0xff);
    3a30:	c8 01       	movw	r24, r16
    3a32:	90 70       	andi	r25, 0x00	; 0
    3a34:	6a e0       	ldi	r22, 0x0A	; 10
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <serialPrintAndFlush(unsigned int, int)>
      serialPrintlnAndFlush();
    3a3c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
    3a40:	04 c0       	rjmp	.+8      	; 0x3a4a <loop+0xc6>
      }   

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: can stop listening if boiler on to satisfy local demand (so as to measure local temp better: less self-heating).
    if(heardIt ||
    3a42:	0e 94 b4 08 	call	0x1168	; 0x1168 <isControlledValveOpen()>
    3a46:	88 23       	and	r24, r24
    3a48:	41 f0       	breq	.+16     	; 0x3a5a <loop+0xd6>
       isControlledValveOpen())
      {
      boilerCountdownM = getMinBoilerOnMinutes(); // Expect to turn boiler on.
    3a4a:	0e 94 57 04 	call	0x8ae	; 0x8ae <getMinBoilerOnMinutes()>
    3a4e:	80 93 bc 01 	sts	0x01BC, r24
      boilerNoCallM = 0; // Ensure set to eager full duty-cycle listen at boiler off.
    3a52:	10 92 bd 01 	sts	0x01BD, r1
    // Never listen in the 'quiet' sensor minute in order to minimise noise and power consumption and self-heating.
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    if((!heardIt) &&
    3a56:	dd 20       	and	r13, r13
    3a58:	89 f4       	brne	.+34     	; 0x3a7c <loop+0xf8>
    3a5a:	ee 20       	and	r14, r14
    3a5c:	79 f4       	brne	.+30     	; 0x3a7c <loop+0xf8>
    3a5e:	80 91 bc 01 	lds	r24, 0x01BC
    3a62:	84 30       	cpi	r24, 0x04	; 4
    3a64:	58 f4       	brcc	.+22     	; 0x3a7c <loop+0xf8>
       (boilerCountdownM <= 3)) // Listen eagerly for fresh calls for heat for last 2--3 minutes before turning boiler off.
      {
      // Skip the minute before the 'quiet' minute also in very quiet mode.
      // (Should still catch at least one TX per 4 minutes at worst.)
      needsToEavesdrop =
          ((boilerNoCallM <= RX_REDUCE_MAX_M) || (3 != (minuteCount & 3)));
    3a66:	80 91 bd 01 	lds	r24, 0x01BD
    3a6a:	8f 31       	cpi	r24, 0x1F	; 31
    3a6c:	08 f4       	brcc	.+2      	; 0x3a70 <loop+0xec>
    3a6e:	7c c1       	rjmp	.+760    	; 0x3d68 <loop+0x3e4>
    3a70:	80 91 bb 01 	lds	r24, 0x01BB
    3a74:	83 70       	andi	r24, 0x03	; 3
    3a76:	83 30       	cpi	r24, 0x03	; 3
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <loop+0xf8>
    3a7a:	76 c1       	rjmp	.+748    	; 0x3d68 <loop+0x3e4>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    3a7c:	8c 2d       	mov	r24, r12
    3a7e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    3a82:	0e 94 c6 08 	call	0x118c	; 0x118c <FHT8VCallForHeatHeardGetAndClear()>
    3a86:	10 e0       	ldi	r17, 0x00	; 0
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  minimisePowerWithoutSleep(); // Must not turn off radio RX nor RX interrupts if in hub mode.
    3a88:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <minimisePowerWithoutSleep()>
    3a8c:	11 c0       	rjmp	.+34     	; 0x3ab0 <loop+0x12c>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    3a8e:	11 23       	and	r17, r17
    3a90:	39 f0       	breq	.+14     	; 0x3aa0 <loop+0x11c>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	0e 94 a6 1c 	call	0x394c	; 0x394c <pollIO(bool)>
    3a9e:	08 c0       	rjmp	.+16     	; 0x3ab0 <loop+0x12c>
#endif
#ifdef USE_MODULE_RFM22RADIOSIMPLE // Deal with radio if should be in standby state.
    // Force radio to known-low-power state from time to time (not all time to avoid unnecessary work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    3aa0:	aa 20       	and	r10, r10
    3aa2:	11 f4       	brne	.+4      	; 0x3aa8 <loop+0x124>
    3aa4:	cc 20       	and	r12, r12
    3aa6:	11 f0       	breq	.+4      	; 0x3aac <loop+0x128>
    3aa8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep intil wake-up interrupt.
    3aac:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <sleepPwrSaveWithBODDisabled()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  minimisePowerWithoutSleep(); // Must not turn off radio RX nor RX interrupts if in hub mode.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    3ab0:	90 91 a6 01 	lds	r25, 0x01A6
    3ab4:	80 91 ba 01 	lds	r24, 0x01BA
    3ab8:	89 17       	cp	r24, r25
    3aba:	49 f3       	breq	.-46     	; 0x3a8e <loop+0x10a>
    // Force radio to known-low-power state from time to time (not all time to avoid unnecessary work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep intil wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    3abc:	90 93 ba 01 	sts	0x01BA, r25


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(!conserveBattery); // Time for extra TX before UI.
    3ac0:	0e 94 9f 08 	call	0x113e	; 0x113e <FHT8VGetHC1()>
    3ac4:	84 36       	cpi	r24, 0x64	; 100
    3ac6:	68 f4       	brcc	.+26     	; 0x3ae2 <loop+0x15e>
    3ac8:	0e 94 a8 08 	call	0x1150	; 0x1150 <FHT8VGetHC2()>
    3acc:	84 36       	cpi	r24, 0x64	; 100
    3ace:	48 f4       	brcc	.+18     	; 0x3ae2 <loop+0x15e>
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	8b 25       	eor	r24, r11
    3ad4:	0e 94 3d 0c 	call	0x187a	; 0x187a <FHT8VPollSyncAndTX_First(bool)>
    3ad8:	88 23       	and	r24, r24
    3ada:	19 f0       	breq	.+6      	; 0x3ae2 <loop+0x15e>
    3adc:	dd 24       	eor	r13, r13
    3ade:	d3 94       	inc	r13
    3ae0:	01 c0       	rjmp	.+2      	; 0x3ae4 <loop+0x160>
    3ae2:	dd 24       	eor	r13, r13
  // Show status if the user changed something significant.
  // Must take ~300ms or less so as not to run over into next half second if two TXs are done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    { if(tickUI(TIME_LSD)) { showStatus = true; } }
    3ae4:	80 91 ba 01 	lds	r24, 0x01BA
    3ae8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <tickUI(unsigned char)>
    3aec:	98 2e       	mov	r9, r24


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    3aee:	dd 20       	and	r13, r13
    3af0:	79 f0       	breq	.+30     	; 0x3b10 <loop+0x18c>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3af2:	0e 94 9f 08 	call	0x113e	; 0x113e <FHT8VGetHC1()>
    3af6:	84 36       	cpi	r24, 0x64	; 100
    3af8:	50 f4       	brcc	.+20     	; 0x3b0e <loop+0x18a>
    3afa:	0e 94 a8 08 	call	0x1150	; 0x1150 <FHT8VGetHC2()>
    3afe:	84 36       	cpi	r24, 0x64	; 100
    3b00:	30 f4       	brcc	.+12     	; 0x3b0e <loop+0x18a>
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	8b 25       	eor	r24, r11
    3b06:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <FHT8VPollSyncAndTX_Next(bool)>
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <loop+0x18c>
    3b0e:	dd 24       	eor	r13, r13
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    3b10:	cc 24       	eor	r12, r12
    3b12:	c3 94       	inc	r12
    3b14:	cb 24       	eor	r12, r11
    3b16:	11 f0       	breq	.+4      	; 0x3b1c <loop+0x198>
    3b18:	11 e0       	ldi	r17, 0x01	; 1
    3b1a:	01 c0       	rjmp	.+2      	; 0x3b1e <loop+0x19a>
    3b1c:	1e 2d       	mov	r17, r14

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    3b1e:	80 91 ba 01 	lds	r24, 0x01BA
    3b22:	88 30       	cpi	r24, 0x08	; 8
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <loop+0x1a4>
    3b26:	42 c0       	rjmp	.+132    	; 0x3bac <loop+0x228>
    3b28:	89 30       	cpi	r24, 0x09	; 9
    3b2a:	38 f4       	brcc	.+14     	; 0x3b3a <loop+0x1b6>
    3b2c:	82 30       	cpi	r24, 0x02	; 2
    3b2e:	f9 f0       	breq	.+62     	; 0x3b6e <loop+0x1ea>
    3b30:	84 30       	cpi	r24, 0x04	; 4
    3b32:	b1 f1       	breq	.+108    	; 0x3ba0 <loop+0x21c>
    3b34:	88 23       	and	r24, r24
    3b36:	89 f0       	breq	.+34     	; 0x3b5a <loop+0x1d6>
    3b38:	c8 c0       	rjmp	.+400    	; 0x3cca <loop+0x346>
    3b3a:	86 33       	cpi	r24, 0x36	; 54
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <loop+0x1bc>
    3b3e:	5b c0       	rjmp	.+182    	; 0x3bf6 <loop+0x272>
    3b40:	87 33       	cpi	r24, 0x37	; 55
    3b42:	20 f4       	brcc	.+8      	; 0x3b4c <loop+0x1c8>
    3b44:	84 33       	cpi	r24, 0x34	; 52
    3b46:	09 f0       	breq	.+2      	; 0x3b4a <loop+0x1c6>
    3b48:	c0 c0       	rjmp	.+384    	; 0x3cca <loop+0x346>
    3b4a:	4f c0       	rjmp	.+158    	; 0x3bea <loop+0x266>
    3b4c:	88 33       	cpi	r24, 0x38	; 56
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <loop+0x1ce>
    3b50:	5b c0       	rjmp	.+182    	; 0x3c08 <loop+0x284>
    3b52:	8a 33       	cpi	r24, 0x3A	; 58
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <loop+0x1d4>
    3b56:	b9 c0       	rjmp	.+370    	; 0x3cca <loop+0x346>
    3b58:	a1 c0       	rjmp	.+322    	; 0x3c9c <loop+0x318>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    3b5a:	80 91 bb 01 	lds	r24, 0x01BB
    3b5e:	8f 5f       	subi	r24, 0xFF	; 255
    3b60:	80 93 bb 01 	sts	0x01BB, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    3b64:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <checkUserSchedule()>
      // Ensure that RTC is persisted promptly when needed.
      persistRTC();
    3b68:	0e 94 be 13 	call	0x277c	; 0x277c <persistRTC()>
    3b6c:	ae c0       	rjmp	.+348    	; 0x3cca <loop+0x346>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)getBatterymV(), getSubCycleTime() ^ (uint8_t)getAmbientLight(), (uint8_t)getTemperatureC16()); } break; }
    3b6e:	11 23       	and	r17, r17
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <loop+0x1f0>
    3b72:	ab c0       	rjmp	.+342    	; 0x3cca <loop+0x346>
    3b74:	06 b5       	in	r16, 0x26	; 38
    3b76:	80 91 bb 01 	lds	r24, 0x01BB
    3b7a:	08 27       	eor	r16, r24
    3b7c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <getBatterymV()>
    3b80:	e8 2e       	mov	r14, r24
    3b82:	10 91 b2 00 	lds	r17, 0x00B2
    3b86:	0e 94 de 03 	call	0x7bc	; 0x7bc <getAmbientLight()>
    3b8a:	f8 2e       	mov	r15, r24
    3b8c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <getTemperatureC16()>
    3b90:	48 2f       	mov	r20, r24
    3b92:	1f 25       	eor	r17, r15
    3b94:	80 2f       	mov	r24, r16
    3b96:	8e 25       	eor	r24, r14
    3b98:	61 2f       	mov	r22, r17
    3b9a:	0e 94 ae 10 	call	0x215c	; 0x215c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3b9e:	95 c0       	rjmp	.+298    	; 0x3cca <loop+0x346>
    // Monitor battery voltage; measure and recompute status less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { readBatterymV(); } break; }
    3ba0:	11 23       	and	r17, r17
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <loop+0x222>
    3ba4:	92 c0       	rjmp	.+292    	; 0x3cca <loop+0x346>
    3ba6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <readBatterymV()>
    3baa:	8f c0       	rjmp	.+286    	; 0x3cca <loop+0x346>
    // This is entirely optional, and just improves odds of an urgent call for heat being acted on quickly,
    // so we can take any reasonable excuse to cancel it and save some energy and bandwidth.
    case 8:
      {
#if defined(USE_MODULE_FHT8VSIMPLE)
      if((!hubMode) && // Hub doesn't need to send extra TXes to itself!
    3bac:	ff 20       	and	r15, r15
    3bae:	09 f0       	breq	.+2      	; 0x3bb2 <loop+0x22e>
    3bb0:	8c c0       	rjmp	.+280    	; 0x3cca <loop+0x346>
    3bb2:	aa 20       	and	r10, r10
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <loop+0x234>
    3bb6:	89 c0       	rjmp	.+274    	; 0x3cca <loop+0x346>
    3bb8:	dd 20       	and	r13, r13
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <loop+0x23a>
    3bbc:	86 c0       	rjmp	.+268    	; 0x3cca <loop+0x346>
    3bbe:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <inWarmMode()>
    3bc2:	88 23       	and	r24, r24
    3bc4:	09 f4       	brne	.+2      	; 0x3bc8 <loop+0x244>
    3bc6:	91 c0       	rjmp	.+290    	; 0x3cea <loop+0x366>
    3bc8:	0e 94 b4 08 	call	0x1168	; 0x1168 <isControlledValveOpen()>
    3bcc:	88 23       	and	r24, r24
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <loop+0x24e>
    3bd0:	8c c0       	rjmp	.+280    	; 0x3cea <loop+0x366>
    3bd2:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    3bd6:	8b 34       	cpi	r24, 0x4B	; 75
    3bd8:	08 f4       	brcc	.+2      	; 0x3bdc <loop+0x258>
    3bda:	87 c0       	rjmp	.+270    	; 0x3cea <loop+0x366>
         (!useExtraFHT8VTXSlots) && // Don't send if there's an immediately pending TX.
         inWarmMode() && // Only do extra TX if still in a warming mode, ie cancel it if mode just changed to FROST.
         (isControlledValveOpen()) && // Valve should be open a little way already so we won't hurt the pump to call for heat.
         ((getTRVPercentOpen() >= 75) /* || inBakeModeDebounced() */ )) // Valve is fairly wide open, eg for BAKE or because boiler not hearing us reliably.
          {
          FHT8VDoSafeExtraTXToHub();
    3bdc:	0e 94 ef 0a 	call	0x15de	; 0x15de <FHT8VDoSafeExtraTXToHub()>
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINTLN_FLASHSTRING("Extra TX");
    3be0:	83 e1       	ldi	r24, 0x13	; 19
    3be2:	94 e0       	ldi	r25, 0x04	; 4
    3be4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
    3be8:	80 c0       	rjmp	.+256    	; 0x3cea <loop+0x366>
      break;
      }

    // Read all environmental inputs, late in the cycle.
    // Sample ambient light levels.
    case 52: { if(runAll) { readAmbientLight(); } break; }
    3bea:	11 23       	and	r17, r17
    3bec:	09 f4       	brne	.+2      	; 0x3bf0 <loop+0x26c>
    3bee:	6d c0       	rjmp	.+218    	; 0x3cca <loop+0x346>
    3bf0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <readAmbientLight()>
    3bf4:	6a c0       	rjmp	.+212    	; 0x3cca <loop+0x346>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { readTemperatureC16(); } break; }
    3bf6:	ff 20       	and	r15, r15
    3bf8:	09 f4       	brne	.+2      	; 0x3bfc <loop+0x278>
    3bfa:	e1 2e       	mov	r14, r17
    3bfc:	ee 20       	and	r14, r14
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <loop+0x27e>
    3c00:	64 c0       	rjmp	.+200    	; 0x3cca <loop+0x346>
    3c02:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <readTemperatureC16()>
    3c06:	61 c0       	rjmp	.+194    	; 0x3cca <loop+0x346>
    // Compute targets and heat demand based on environmental inputs.
    // Note: ensure that valve-shut message is always conveyed quickly to valve even in slow/'conserve' mode.
    // Also drives OUT_HEATCALL to control local boiler if in central hub mode.
    case 56:
      {
      if(computeTargetAndDemand()) // Should be called each minute to work correctly.
    3c08:	0e 94 89 06 	call	0xd12	; 0xd12 <computeTargetAndDemand()>
    3c0c:	88 23       	and	r24, r24
    3c0e:	51 f0       	breq	.+20     	; 0x3c24 <loop+0x2a0>
        {
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    3c10:	0e 94 9f 08 	call	0x113e	; 0x113e <FHT8VGetHC1()>
    3c14:	84 36       	cpi	r24, 0x64	; 100
    3c16:	30 f4       	brcc	.+12     	; 0x3c24 <loop+0x2a0>
    3c18:	0e 94 a8 08 	call	0x1150	; 0x1150 <FHT8VGetHC2()>
    3c1c:	84 36       	cpi	r24, 0x64	; 100
    3c1e:	10 f4       	brcc	.+4      	; 0x3c24 <loop+0x2a0>
    3c20:	0e 94 90 0a 	call	0x1520	; 0x1520 <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode && (boilerCountdownM == 0) && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }
    3c24:	ff 20       	and	r15, r15
    3c26:	59 f0       	breq	.+22     	; 0x3c3e <loop+0x2ba>
    3c28:	80 91 bc 01 	lds	r24, 0x01BC
    3c2c:	88 23       	and	r24, r24
    3c2e:	39 f4       	brne	.+14     	; 0x3c3e <loop+0x2ba>
    3c30:	80 91 bd 01 	lds	r24, 0x01BD
    3c34:	8f 3f       	cpi	r24, 0xFF	; 255
    3c36:	19 f0       	breq	.+6      	; 0x3c3e <loop+0x2ba>
    3c38:	8f 5f       	subi	r24, 0xFF	; 255
    3c3a:	80 93 bd 01 	sts	0x01BD, r24

      // If remote calls for heat from local boiler are (still) active then ensure that the boiler is on.
      if(hubMode && (boilerCountdownM > 0))
    3c3e:	ff 20       	and	r15, r15
    3c40:	d1 f0       	breq	.+52     	; 0x3c76 <loop+0x2f2>
    3c42:	80 91 bc 01 	lds	r24, 0x01BC
    3c46:	88 23       	and	r24, r24
    3c48:	b1 f0       	breq	.+44     	; 0x3c76 <loop+0x2f2>
        {
        fastDigitalWrite(OUT_HEATCALL, HIGH);
    3c4a:	5e 9a       	sbi	0x0b, 6	; 11
#if 1 && defined(DEBUG)
        DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, mins left: ");
    3c4c:	8c ef       	ldi	r24, 0xFC	; 252
    3c4e:	93 e0       	ldi	r25, 0x03	; 3
    3c50:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
        DEBUG_SERIAL_PRINT(boilerCountdownM);
    3c54:	80 91 bc 01 	lds	r24, 0x01BC
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	6a e0       	ldi	r22, 0x0A	; 10
    3c5c:	70 e0       	ldi	r23, 0x00	; 0
    3c5e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
        DEBUG_SERIAL_PRINTLN();
    3c62:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
#else
        serialPrintlnAndFlush(F("Boiler on"));
#endif
        // Don't count down if forced into low-power (non-listening) mode for quiet 'sensor' minute.
        if(!minute0From4ForSensors) { --boilerCountdownM; }
    3c66:	ee 20       	and	r14, r14
    3c68:	a1 f4       	brne	.+40     	; 0x3c92 <loop+0x30e>
    3c6a:	80 91 bc 01 	lds	r24, 0x01BC
    3c6e:	81 50       	subi	r24, 0x01	; 1
    3c70:	80 93 bc 01 	sts	0x01BC, r24
    3c74:	0e c0       	rjmp	.+28     	; 0x3c92 <loop+0x30e>
        }
      else
#endif
        // Local call for heat given local TRV is at least partly open/on.  (TODO: modulating!)
        // In hub mode delay turning on until our local valve is at least partly open.
        if(hubMode ? isControlledValveOpen() : (0 != getTRVPercentOpen()))
    3c76:	ff 20       	and	r15, r15
    3c78:	19 f0       	breq	.+6      	; 0x3c80 <loop+0x2fc>
    3c7a:	0e 94 b4 08 	call	0x1168	; 0x1168 <isControlledValveOpen()>
    3c7e:	04 c0       	rjmp	.+8      	; 0x3c88 <loop+0x304>
    3c80:	0e 94 11 04 	call	0x822	; 0x822 <getTRVPercentOpen()>
    3c84:	81 11       	cpse	r24, r1
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	88 23       	and	r24, r24
    3c8a:	11 f0       	breq	.+4      	; 0x3c90 <loop+0x30c>
          { fastDigitalWrite(OUT_HEATCALL, HIGH); }
    3c8c:	5e 9a       	sbi	0x0b, 6	; 11
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <loop+0x30e>
      else // Stop calling for heat from the boiler.
          { fastDigitalWrite(OUT_HEATCALL, LOW); }
    3c90:	5e 98       	cbi	0x0b, 6	; 11

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    3c92:	11 23       	and	r17, r17
    3c94:	d1 f0       	breq	.+52     	; 0x3cca <loop+0x346>
    3c96:	99 24       	eor	r9, r9
    3c98:	93 94       	inc	r9
    3c9a:	17 c0       	rjmp	.+46     	; 0x3cca <loop+0x346>
    // Stats samples; should never be missed.
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      if(minute0From4ForSensors) // Hope to take lowest-noise samples on the special minute out of each 4.
    3c9c:	ee 20       	and	r14, r14
    3c9e:	a9 f0       	breq	.+42     	; 0x3cca <loop+0x346>
        {
        const uint_least8_t mm = getMinutesLT();
    3ca0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <getMinutesLT()>
        switch(mm)
    3ca4:	88 32       	cpi	r24, 0x28	; 40
    3ca6:	30 f4       	brcc	.+12     	; 0x3cb4 <loop+0x330>
    3ca8:	84 32       	cpi	r24, 0x24	; 36
    3caa:	40 f4       	brcc	.+16     	; 0x3cbc <loop+0x338>
    3cac:	80 51       	subi	r24, 0x10	; 16
    3cae:	84 30       	cpi	r24, 0x04	; 4
    3cb0:	60 f4       	brcc	.+24     	; 0x3cca <loop+0x346>
    3cb2:	04 c0       	rjmp	.+8      	; 0x3cbc <loop+0x338>
    3cb4:	88 53       	subi	r24, 0x38	; 56
    3cb6:	84 30       	cpi	r24, 0x04	; 4
    3cb8:	40 f4       	brcc	.+16     	; 0x3cca <loop+0x346>
    3cba:	04 c0       	rjmp	.+8      	; 0x3cc4 <loop+0x340>
          {
          case 16: case 17: case 18: case 19:
          case 36: case 37: case 38: case 39:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of juice.
    3cbc:	aa 20       	and	r10, r10
    3cbe:	29 f4       	brne	.+10     	; 0x3cca <loop+0x346>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	01 c0       	rjmp	.+2      	; 0x3cc6 <loop+0x342>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at end of hour.
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3cca:	dd 20       	and	r13, r13
    3ccc:	71 f0       	breq	.+28     	; 0x3cea <loop+0x366>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3cce:	0e 94 9f 08 	call	0x113e	; 0x113e <FHT8VGetHC1()>
    3cd2:	84 36       	cpi	r24, 0x64	; 100
    3cd4:	48 f4       	brcc	.+18     	; 0x3ce8 <loop+0x364>
    3cd6:	0e 94 a8 08 	call	0x1150	; 0x1150 <FHT8VGetHC2()>
    3cda:	84 36       	cpi	r24, 0x64	; 100
    3cdc:	28 f4       	brcc	.+10     	; 0x3ce8 <loop+0x364>
    3cde:	8c 2d       	mov	r24, r12
    3ce0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <FHT8VPollSyncAndTX_Next(bool)>
    3ce4:	88 23       	and	r24, r24
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <loop+0x366>
    3ce8:	dd 24       	eor	r13, r13
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    3cea:	99 20       	and	r9, r9
    3cec:	11 f0       	breq	.+4      	; 0x3cf2 <loop+0x36e>
    3cee:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    3cf2:	dd 20       	and	r13, r13
    3cf4:	59 f0       	breq	.+22     	; 0x3d0c <loop+0x388>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    3cf6:	0e 94 9f 08 	call	0x113e	; 0x113e <FHT8VGetHC1()>
    3cfa:	84 36       	cpi	r24, 0x64	; 100
    3cfc:	38 f4       	brcc	.+14     	; 0x3d0c <loop+0x388>
    3cfe:	0e 94 a8 08 	call	0x1150	; 0x1150 <FHT8VGetHC2()>
    3d02:	84 36       	cpi	r24, 0x64	; 100
    3d04:	18 f4       	brcc	.+6      	; 0x3d0c <loop+0x388>
    3d06:	8c 2d       	mov	r24, r12
    3d08:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <FHT8VPollSyncAndTX_Next(bool)>
  // then poll/prompt the user for input
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
  // TODO: be clever and if getSubCycleTime() has gone backwards then assume end tick has been missed and return from loop() without sleeping.
#if defined(SUPPORT_CLI)
  if(showStatus || isCLIActive())
    3d0c:	99 20       	and	r9, r9
    3d0e:	21 f4       	brne	.+8      	; 0x3d18 <loop+0x394>
    3d10:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <isCLIActive()>
    3d14:	88 23       	and	r24, r24
    3d16:	b9 f0       	breq	.+46     	; 0x3d46 <loop+0x3c2>
    {
    const uint8_t sct = getSubCycleTime();
    3d18:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct < (GSCT_MAX-(GSCT_MAX/8)))
    3d1c:	80 3e       	cpi	r24, 0xE0	; 224
    3d1e:	98 f4       	brcc	.+38     	; 0x3d46 <loop+0x3c2>
      // Don't listen longer than ~500ms or beyond the last 16th of the cycle,
      // as listening for UART RX uses lots of power.
      { pollCLI((uint8_t)fnmin(GSCT_MAX-(GSCT_MAX/16), sct+(int)(SUB_CYCLE_TICKS_PER_S/2))); }
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	80 5c       	subi	r24, 0xC0	; 192
    3d24:	9f 4f       	sbci	r25, 0xFF	; 255
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic();


// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    3d26:	80 3f       	cpi	r24, 0xF0	; 240
    3d28:	91 05       	cpc	r25, r1
    3d2a:	14 f4       	brge	.+4      	; 0x3d30 <loop+0x3ac>
    3d2c:	9c 01       	movw	r18, r24
    3d2e:	02 c0       	rjmp	.+4      	; 0x3d34 <loop+0x3b0>
    3d30:	20 ef       	ldi	r18, 0xF0	; 240
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	9c 83       	std	Y+4, r25	; 0x04
    3d36:	8b 83       	std	Y+3, r24	; 0x03
    3d38:	80 ef       	ldi	r24, 0xF0	; 240
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	9a 83       	std	Y+2, r25	; 0x02
    3d3e:	89 83       	std	Y+1, r24	; 0x01
    3d40:	82 2f       	mov	r24, r18
    3d42:	0e 94 ca 18 	call	0x3194	; 0x3194 <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    3d46:	90 91 a6 01 	lds	r25, 0x01A6
    3d4a:	80 91 ba 01 	lds	r24, 0x01BA
    3d4e:	89 17       	cp	r24, r25
    3d50:	81 f0       	breq	.+32     	; 0x3d72 <loop+0x3ee>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("ERROR: loop() overrun!");
    3d52:	85 ee       	ldi	r24, 0xE5	; 229
    3d54:	93 e0       	ldi	r25, 0x03	; 3
    3d56:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    3d5a:	0e 94 bd 08 	call	0x117a	; 0x117a <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    3d5e:	80 91 a6 01 	lds	r24, 0x01A6
    3d62:	80 93 ba 01 	sts	0x01BA, r24
    3d66:	05 c0       	rjmp	.+10     	; 0x3d72 <loop+0x3ee>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    3d68:	8c 2d       	mov	r24, r12
    3d6a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <SetupToEavesdropOnFHT8V(bool)>
    3d6e:	11 e0       	ldi	r17, 0x01	; 1
    3d70:	8b ce       	rjmp	.-746    	; 0x3a88 <loop+0x104>
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    }
  }
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	cf 91       	pop	r28
    3d7c:	df 91       	pop	r29
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	ff 90       	pop	r15
    3d84:	ef 90       	pop	r14
    3d86:	df 90       	pop	r13
    3d88:	cf 90       	pop	r12
    3d8a:	bf 90       	pop	r11
    3d8c:	af 90       	pop	r10
    3d8e:	9f 90       	pop	r9
    3d90:	08 95       	ret

00003d92 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    3d92:	ff 92       	push	r15
    3d94:	0f 93       	push	r16
    3d96:	1f 93       	push	r17
    3d98:	cf 93       	push	r28
    3d9a:	df 93       	push	r29
    3d9c:	f8 2e       	mov	r15, r24
    3d9e:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    3da0:	83 e8       	ldi	r24, 0x83	; 131
    3da2:	9e e1       	ldi	r25, 0x1E	; 30
    3da4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    3da8:	82 ec       	ldi	r24, 0xC2	; 194
    3daa:	95 e0       	ldi	r25, 0x05	; 5
    3dac:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    3db0:	cf 2d       	mov	r28, r15
    3db2:	d0 e0       	ldi	r29, 0x00	; 0
    3db4:	ce 01       	movw	r24, r28
    3db6:	6a e0       	ldi	r22, 0x0A	; 10
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    3dbe:	8f eb       	ldi	r24, 0xBF	; 191
    3dc0:	95 e0       	ldi	r25, 0x05	; 5
    3dc2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    3dc6:	c8 01       	movw	r24, r16
    3dc8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    3dcc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
  pinMode(LED_HEATCALL, OUTPUT);
    3dd0:	8d e0       	ldi	r24, 0x0D	; 13
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  fastDigitalWrite(LED_HEATCALL, LOW);
    3dd8:	2d 98       	cbi	0x05, 5	; 5
  sleepLowPowerMs(2*PP_OFF_MS);
    3dda:	80 e4       	ldi	r24, 0x40	; 64
    3ddc:	9f e0       	ldi	r25, 0x0F	; 15
    3dde:	07 c0       	rjmp	.+14     	; 0x3dee <posPOST(unsigned char, __FlashStringHelper const*)+0x5c>
  
  int i = position;
  while(--i >= 0)
    {
    fastDigitalWrite(LED_HEATCALL, HIGH);
    3de0:	2d 9a       	sbi	0x05, 5	; 5
void burnHundredsOfCyclesProductivelyAndPoll();


// Use WDT-based timer for xxxPause() routines.
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    tinyPause();
    fastDigitalWrite(LED_HEATCALL, LOW);
    3de8:	2d 98       	cbi	0x05, 5	; 5
    sleepLowPowerMs(PP_OFF_MS);
    3dea:	8f e9       	ldi	r24, 0x9F	; 159
    3dec:	97 e0       	ldi	r25, 0x07	; 7
    3dee:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  pinMode(LED_HEATCALL, OUTPUT);
  fastDigitalWrite(LED_HEATCALL, LOW);
  sleepLowPowerMs(2*PP_OFF_MS);
  
  int i = position;
  while(--i >= 0)
    3df2:	21 97       	sbiw	r28, 0x01	; 1
    3df4:	8f ef       	ldi	r24, 0xFF	; 255
    3df6:	cf 3f       	cpi	r28, 0xFF	; 255
    3df8:	d8 07       	cpc	r29, r24
    3dfa:	91 f7       	brne	.-28     	; 0x3de0 <posPOST(unsigned char, __FlashStringHelper const*)+0x4e>
    tinyPause();
    fastDigitalWrite(LED_HEATCALL, LOW);
    sleepLowPowerMs(PP_OFF_MS);
    }

  sleepLowPowerMs(PP_OFF_MS);
    3dfc:	8f e9       	ldi	r24, 0x9F	; 159
    3dfe:	97 e0       	ldi	r25, 0x07	; 7
    3e00:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  fastDigitalWrite(LED_HEATCALL, HIGH);
    3e04:	2d 9a       	sbi	0x05, 5	; 5
  sleepLowPowerMs(1000);
    3e06:	83 e8       	ldi	r24, 0x83	; 131
    3e08:	9e e1       	ldi	r25, 0x1E	; 30
    3e0a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	ff 90       	pop	r15
    3e18:	08 95       	ret

00003e1a <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    3e1a:	0e 94 14 12 	call	0x2428	; 0x2428 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    3e1e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <minimisePowerWithoutSleep()>
  pinMode(LED_HEATCALL, OUTPUT);
    3e22:	8d e0       	ldi	r24, 0x0D	; 13
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  for( ; ; )
    {
    fastDigitalWrite(LED_HEATCALL, HIGH);
    3e2a:	2d 9a       	sbi	0x05, 5	; 5
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    tinyPause();
    fastDigitalWrite(LED_HEATCALL, LOW);
    3e32:	2d 98       	cbi	0x05, 5	; 5
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    3e34:	83 e0       	ldi	r24, 0x03	; 3
    3e36:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <nap(signed char)>
    3e3a:	f7 cf       	rjmp	.-18     	; 0x3e2a <panic()+0x10>

00003e3c <setup>:
  sleepLowPowerMs(1000);
  }

// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    3e3c:	2f 92       	push	r2
    3e3e:	3f 92       	push	r3
    3e40:	4f 92       	push	r4
    3e42:	5f 92       	push	r5
    3e44:	6f 92       	push	r6
    3e46:	7f 92       	push	r7
    3e48:	8f 92       	push	r8
    3e4a:	9f 92       	push	r9
    3e4c:	af 92       	push	r10
    3e4e:	bf 92       	push	r11
    3e50:	cf 92       	push	r12
    3e52:	df 92       	push	r13
    3e54:	ef 92       	push	r14
    3e56:	ff 92       	push	r15
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	df 93       	push	r29
    3e5e:	cf 93       	push	r28
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <setup+0x26>
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
//  // Attempt to capture reason for reset/(re)start.
//  const uint8_t mcusr = MCUSR;
//  MCUSR = 0;

  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    3e66:	0e 94 8a 10 	call	0x2114	; 0x2114 <powerSetup()>

  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    3e6a:	e0 90 b2 00 	lds	r14, 0x00B2
    3e6e:	0e e0       	ldi	r16, 0x0E	; 14
    3e70:	10 e0       	ldi	r17, 0x00	; 0
    3e72:	3c c0       	rjmp	.+120    	; 0x3eec <setup+0xb0>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    3e74:	08 30       	cpi	r16, 0x08	; 8
    3e76:	11 05       	cpc	r17, r1
    3e78:	61 f1       	breq	.+88     	; 0x3ed2 <setup+0x96>
    3e7a:	09 30       	cpi	r16, 0x09	; 9
    3e7c:	11 05       	cpc	r17, r1
    3e7e:	6c f4       	brge	.+26     	; 0x3e9a <setup+0x5e>
    3e80:	02 30       	cpi	r16, 0x02	; 2
    3e82:	11 05       	cpc	r17, r1
    3e84:	61 f1       	breq	.+88     	; 0x3ede <setup+0xa2>
    3e86:	03 30       	cpi	r16, 0x03	; 3
    3e88:	11 05       	cpc	r17, r1
    3e8a:	1c f4       	brge	.+6      	; 0x3e92 <setup+0x56>
    3e8c:	17 ff       	sbrs	r17, 7
    3e8e:	21 c0       	rjmp	.+66     	; 0x3ed2 <setup+0x96>
    3e90:	10 c0       	rjmp	.+32     	; 0x3eb2 <setup+0x76>
    3e92:	05 30       	cpi	r16, 0x05	; 5
    3e94:	11 05       	cpc	r17, r1
    3e96:	69 f4       	brne	.+26     	; 0x3eb2 <setup+0x76>
    3e98:	1c c0       	rjmp	.+56     	; 0x3ed2 <setup+0x96>
    3e9a:	0a 30       	cpi	r16, 0x0A	; 10
    3e9c:	11 05       	cpc	r17, r1
    3e9e:	d9 f0       	breq	.+54     	; 0x3ed6 <setup+0x9a>
    3ea0:	0a 30       	cpi	r16, 0x0A	; 10
    3ea2:	11 05       	cpc	r17, r1
    3ea4:	fc f0       	brlt	.+62     	; 0x3ee4 <setup+0xa8>
    3ea6:	0c 30       	cpi	r16, 0x0C	; 12
    3ea8:	11 05       	cpc	r17, r1
    3eaa:	b9 f0       	breq	.+46     	; 0x3eda <setup+0x9e>
    3eac:	0d 30       	cpi	r16, 0x0D	; 13
    3eae:	11 05       	cpc	r17, r1
    3eb0:	39 f0       	breq	.+14     	; 0x3ec0 <setup+0x84>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    3eb2:	80 2f       	mov	r24, r16
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	0e 94 a8 24 	call	0x4950	; 0x4950 <digitalWrite>
    3eba:	80 2f       	mov	r24, r16
    3ebc:	61 e0       	ldi	r22, 0x01	; 1
    3ebe:	14 c0       	rjmp	.+40     	; 0x3ee8 <setup+0xac>
      // Weak pull-up empirically found to be lowest leakage current with TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX: { pinMode(i, INPUT_PULLUP); break; }
#endif

      // Switch main UI LED on for the rest of initialisation...
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
    3ec0:	8d e0       	ldi	r24, 0x0D	; 13
    3ec2:	61 e0       	ldi	r22, 0x01	; 1
    3ec4:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
    3ec8:	8d e0       	ldi	r24, 0x0D	; 13
    3eca:	61 e0       	ldi	r22, 0x01	; 1
    3ecc:	0e 94 a8 24 	call	0x4950	; 0x4950 <digitalWrite>
    3ed0:	0d c0       	rjmp	.+26     	; 0x3eec <setup+0xb0>

      // Make button pins inputs with internal weak pull-ups (saving an external resistor on each case).
#ifdef BUTTON_LEARN_L
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    3ed2:	80 2f       	mov	r24, r16
    3ed4:	05 c0       	rjmp	.+10     	; 0x3ee0 <setup+0xa4>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    3ed6:	8a e0       	ldi	r24, 0x0A	; 10
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <setup+0xa4>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    3eda:	8c e0       	ldi	r24, 0x0C	; 12
    3edc:	01 c0       	rjmp	.+2      	; 0x3ee0 <setup+0xa4>
#endif

#ifdef PIN_OW_DQ_DATA
      // Weak pull-up to avoid leakage current.
      case PIN_OW_DQ_DATA: { pinMode(PIN_OW_DQ_DATA, INPUT_PULLUP); break; }
    3ede:	82 e0       	ldi	r24, 0x02	; 2
    3ee0:	62 e0       	ldi	r22, 0x02	; 2
    3ee2:	02 c0       	rjmp	.+4      	; 0x3ee8 <setup+0xac>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    3ee4:	89 e0       	ldi	r24, 0x09	; 9
    3ee6:	60 e0       	ldi	r22, 0x00	; 0
    3ee8:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    3eec:	01 50       	subi	r16, 0x01	; 1
    3eee:	10 40       	sbci	r17, 0x00	; 0
    3ef0:	17 ff       	sbrs	r17, 7
    3ef2:	c0 cf       	rjmp	.-128    	; 0x3e74 <setup+0x38>

  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    3ef4:	0e 94 6d 13 	call	0x26da	; 0x26da <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintlnAndFlush(F("\r\nOpenTRV built " __DATE__ " " __TIME__ " booting..."));
    3ef8:	8f e8       	ldi	r24, 0x8F	; 143
    3efa:	95 e0       	ldi	r25, 0x05	; 5
    3efc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#ifdef V0p2_REV
  serialPrintAndFlush(F("Board V0.2, REV"));
    3f00:	8f e7       	ldi	r24, 0x7F	; 127
    3f02:	95 e0       	ldi	r25, 0x05	; 5
    3f04:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	6a e0       	ldi	r22, 0x0A	; 10
    3f0e:	70 e0       	ldi	r23, 0x00	; 0
    3f10:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  serialPrintlnAndFlush();
    3f14:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3f18:	f9 99       	sbic	0x1f, 1	; 31
    3f1a:	fe cf       	rjmp	.-4      	; 0x3f18 <setup+0xdc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3f1c:	86 e0       	ldi	r24, 0x06	; 6
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	92 bd       	out	0x22, r25	; 34
    3f22:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3f24:	f8 9a       	sbi	0x1f, 0	; 31
    3f26:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3f28:	f9 99       	sbic	0x1f, 1	; 31
    3f2a:	fe cf       	rjmp	.-4      	; 0x3f28 <setup+0xec>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3f2c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3f2e:	86 e0       	ldi	r24, 0x06	; 6
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	92 bd       	out	0x22, r25	; 34
    3f34:	81 bd       	out	0x21, r24	; 33
#endif

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    3f36:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    3f38:	10 bd       	out	0x20, r17	; 32
    3f3a:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3f3c:	0f b6       	in	r0, 0x3f	; 63
    3f3e:	f8 94       	cli
    3f40:	fa 9a       	sbi	0x1f, 2	; 31
    3f42:	f9 9a       	sbi	0x1f, 1	; 31
    3f44:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN();
    3f46:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    3f4a:	80 e6       	ldi	r24, 0x60	; 96
    3f4c:	95 e0       	ldi	r25, 0x05	; 5
    3f4e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Reset count: ");
    3f52:	82 e5       	ldi	r24, 0x52	; 82
    3f54:	95 e0       	ldi	r25, 0x05	; 5
    3f56:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    3f5a:	81 2f       	mov	r24, r17
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	6a e0       	ldi	r22, 0x0A	; 10
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3f66:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
//  DEBUG_SERIAL_PRINT_FLASHSTRING("MCUSR: "); // bits: 3 WDRF, 2 BORF, 1 EXTRF, 0 PORF.
//  DEBUG_SERIAL_PRINTFMT(mcusr, HEX);
//  DEBUG_SERIAL_PRINTLN();
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    3f6a:	87 e4       	ldi	r24, 0x47	; 71
    3f6c:	95 e0       	ldi	r25, 0x05	; 5
    3f6e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    3f72:	80 91 32 03 	lds	r24, 0x0332
    3f76:	90 91 33 03 	lds	r25, 0x0333
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	11 f0       	breq	.+4      	; 0x3f82 <setup+0x146>
    3f7e:	9c 01       	movw	r18, r24
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <setup+0x14a>
    3f82:	26 e3       	ldi	r18, 0x36	; 54
    3f84:	33 e0       	ldi	r19, 0x03	; 3
    3f86:	ce 01       	movw	r24, r28
    3f88:	01 96       	adiw	r24, 0x01	; 1
    3f8a:	82 1b       	sub	r24, r18
    3f8c:	93 0b       	sbc	r25, r19
    3f8e:	6a e0       	ldi	r22, 0x0A	; 10
    3f90:	70 e0       	ldi	r23, 0x00	; 0
    3f92:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    3f96:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
#ifdef UNIT_TESTS
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS WILL BE RUN...");
#endif
#endif

  posPOST(1, F("about to test RFM23"));
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	63 e3       	ldi	r22, 0x33	; 51
    3f9e:	75 e0       	ldi	r23, 0x05	; 5
    3fa0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <posPOST(unsigned char, __FlashStringHelper const*)>

#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    3fa4:	0e 94 14 12 	call	0x2428	; 0x2428 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    3fa8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <RFM22CheckConnected()>
    3fac:	88 23       	and	r24, r24
    3fae:	11 f4       	brne	.+4      	; 0x3fb4 <setup+0x178>
    3fb0:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    3fb4:	88 e6       	ldi	r24, 0x68	; 104
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    3fbc:	0e 94 58 12 	call	0x24b0	; 0x24b0 <RFM22ModeStandbyAndClearState()>
#endif

  posPOST(2, F("RFM23 OK"));
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	6a e2       	ldi	r22, 0x2A	; 42
    3fc4:	75 e0       	ldi	r23, 0x05	; 5
    3fc6:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <posPOST(unsigned char, __FlashStringHelper const*)>
  // Do additional POST.
  optionalPOST();
#endif

  // Get current power supply voltage.
  const uint16_t Vcc = readBatterymV();
    3fca:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <readBatterymV()>
    3fce:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    3fd0:	84 e2       	ldi	r24, 0x24	; 36
    3fd2:	95 e0       	ldi	r25, 0x05	; 5
    3fd4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    3fd8:	c1 01       	movw	r24, r2
    3fda:	6a e0       	ldi	r22, 0x0A	; 10
    3fdc:	70 e0       	ldi	r23, 0x00	; 0
    3fde:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    3fe2:	81 e2       	ldi	r24, 0x21	; 33
    3fe4:	95 e0       	ldi	r25, 0x05	; 5
    3fe6:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement.
  const int intTempC16 = readInternalTemperatureC16();
    3fea:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <readInternalTemperatureC16()>
    3fee:	2c 01       	movw	r4, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    3ff0:	86 e1       	ldi	r24, 0x16	; 22
    3ff2:	95 e0       	ldi	r25, 0x05	; 5
    3ff4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    3ff8:	c2 01       	movw	r24, r4
    3ffa:	08 96       	adiw	r24, 0x08	; 8
    3ffc:	64 e0       	ldi	r22, 0x04	; 4
    3ffe:	95 95       	asr	r25
    4000:	87 95       	ror	r24
    4002:	6a 95       	dec	r22
    4004:	e1 f7       	brne	.-8      	; 0x3ffe <setup+0x1c2>
    4006:	6a e0       	ldi	r22, 0x0A	; 10
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    400e:	81 e1       	ldi	r24, 0x11	; 17
    4010:	95 e0       	ldi	r25, 0x05	; 5
    4012:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    4016:	c2 01       	movw	r24, r4
    4018:	6a e0       	ldi	r22, 0x0A	; 10
    401a:	70 e0       	ldi	r23, 0x00	; 0
    401c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    4020:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
#endif

  posPOST(3, F("internal sensors OK, next light/temp"));
    4024:	83 e0       	ldi	r24, 0x03	; 3
    4026:	6c ee       	ldi	r22, 0xEC	; 236
    4028:	74 e0       	ldi	r23, 0x04	; 4
    402a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <posPOST(unsigned char, __FlashStringHelper const*)>

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
    402e:	84 eb       	ldi	r24, 0xB4	; 180
    4030:	94 e0       	ldi	r25, 0x04	; 4
    4032:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Collect full set of environmental values before entering loop().
  // This should also help ensure that sensors are properly initialised.
  const int light = readAmbientLight();
    4036:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <readAmbientLight()>
    403a:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    403c:	8c ea       	ldi	r24, 0xAC	; 172
    403e:	94 e0       	ldi	r25, 0x04	; 4
    4040:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    4044:	c3 01       	movw	r24, r6
    4046:	6a e0       	ldi	r22, 0x0A	; 10
    4048:	70 e0       	ldi	r23, 0x00	; 0
    404a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    404e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
#endif
  const int heat = readTemperatureC16();
    4052:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <readTemperatureC16()>
    4056:	5c 01       	movw	r10, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    4058:	85 ea       	ldi	r24, 0xA5	; 165
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    4060:	c5 01       	movw	r24, r10
    4062:	6a e0       	ldi	r22, 0x0A	; 10
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	0e 94 20 15 	call	0x2a40	; 0x2a40 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    406a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <serialPrintlnAndFlush()>
#endif

  posPOST(4, F("light/temp OK"));
    406e:	84 e0       	ldi	r24, 0x04	; 4
    4070:	67 e9       	ldi	r22, 0x97	; 151
    4072:	74 e0       	ldi	r23, 0x04	; 4
    4074:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <posPOST(unsigned char, __FlashStringHelper const*)>

#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
#endif
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeTargetAndDemand();
    4078:	0e 94 89 06 	call	0xd12	; 0xd12 <computeTargetAndDemand()>
#if defined(USE_MODULE_FHT8VSIMPLE)
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored.
  FHT8VCreateValveSetCmdFrame();
    407c:	0e 94 90 0a 	call	0x1520	; 0x1520 <FHT8VCreateValveSetCmdFrame()>
    4080:	e0 e0       	ldi	r30, 0x00	; 0
    4082:	f1 e0       	ldi	r31, 0x01	; 1
    4084:	88 24       	eor	r8, r8
    4086:	8a 94       	dec	r8
    4088:	98 2c       	mov	r9, r8
    408a:	81 91       	ld	r24, Z+
    408c:	94 01       	movw	r18, r8
    408e:	28 27       	eor	r18, r24
    4090:	02 2e       	mov	r0, r18
    4092:	22 95       	swap	r18
    4094:	20 7f       	andi	r18, 0xF0	; 240
    4096:	20 25       	eor	r18, r0
    4098:	03 2e       	mov	r0, r19
    409a:	32 2f       	mov	r19, r18
    409c:	22 95       	swap	r18
    409e:	2f 70       	andi	r18, 0x0F	; 15
    40a0:	02 26       	eor	r0, r18
    40a2:	26 95       	lsr	r18
    40a4:	32 27       	eor	r19, r18
    40a6:	23 27       	eor	r18, r19
    40a8:	22 0f       	add	r18, r18
    40aa:	22 0f       	add	r18, r18
    40ac:	22 0f       	add	r18, r18
    40ae:	20 25       	eor	r18, r0
    40b0:	49 01       	movw	r8, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    40b2:	39 e0       	ldi	r19, 0x09	; 9
    40b4:	e0 30       	cpi	r30, 0x00	; 0
    40b6:	f3 07       	cpc	r31, r19
    40b8:	41 f7       	brne	.-48     	; 0x408a <setup+0x24e>
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	cc 24       	eor	r12, r12
    40c0:	ca 94       	dec	r12
    40c2:	dc 2c       	mov	r13, r12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    40c4:	f9 99       	sbic	0x1f, 1	; 31
    40c6:	fe cf       	rjmp	.-4      	; 0x40c4 <setup+0x288>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    40c8:	32 bd       	out	0x22, r19	; 34
    40ca:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    40cc:	f8 9a       	sbi	0x1f, 0	; 31
    40ce:	80 b5       	in	r24, 0x20	; 32
    40d0:	a6 01       	movw	r20, r12
    40d2:	48 27       	eor	r20, r24
    40d4:	04 2e       	mov	r0, r20
    40d6:	42 95       	swap	r20
    40d8:	40 7f       	andi	r20, 0xF0	; 240
    40da:	40 25       	eor	r20, r0
    40dc:	05 2e       	mov	r0, r21
    40de:	54 2f       	mov	r21, r20
    40e0:	42 95       	swap	r20
    40e2:	4f 70       	andi	r20, 0x0F	; 15
    40e4:	04 26       	eor	r0, r20
    40e6:	46 95       	lsr	r20
    40e8:	54 27       	eor	r21, r20
    40ea:	45 27       	eor	r20, r21
    40ec:	44 0f       	add	r20, r20
    40ee:	44 0f       	add	r20, r20
    40f0:	44 0f       	add	r20, r20
    40f2:	40 25       	eor	r20, r0
    40f4:	6a 01       	movw	r12, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    40f6:	2f 5f       	subi	r18, 0xFF	; 255
    40f8:	3f 4f       	sbci	r19, 0xFF	; 255
    40fa:	54 e0       	ldi	r21, 0x04	; 4
    40fc:	20 30       	cpi	r18, 0x00	; 0
    40fe:	35 07       	cpc	r19, r21
    4100:	09 f7       	brne	.-62     	; 0x40c4 <setup+0x288>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Starting seed computation...");
#endif
  const uint16_t srseed = sramCRC();
  const uint16_t eeseed = eeCRC();
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    4102:	f0 90 b2 00 	lds	r15, 0x00B2
  if(laterSCT == earlySCT)
    4106:	fe 14       	cp	r15, r14
    4108:	f9 f4       	brne	.+62     	; 0x4148 <setup+0x30c>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    410a:	8a e6       	ldi	r24, 0x6A	; 106
    410c:	94 e0       	ldi	r25, 0x04	; 4
    410e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4112:	04 e1       	ldi	r16, 0x14	; 20
    4114:	10 e0       	ldi	r17, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    4116:	01 50       	subi	r16, 0x01	; 1
    4118:	10 40       	sbci	r17, 0x00	; 0
    411a:	8f ef       	ldi	r24, 0xFF	; 255
    411c:	0f 3f       	cpi	r16, 0xFF	; 255
    411e:	18 07       	cpc	r17, r24
    4120:	09 f4       	brne	.+2      	; 0x4124 <setup+0x2e8>
    4122:	84 c0       	rjmp	.+264    	; 0x422c <setup+0x3f0>
    4124:	80 91 b2 00 	lds	r24, 0x00B2
    4128:	f8 16       	cp	r15, r24
    412a:	09 f0       	breq	.+2      	; 0x412e <setup+0x2f2>
    412c:	7f c0       	rjmp	.+254    	; 0x422c <setup+0x3f0>
      {
      sleepLowPowerMs(691);
    412e:	84 e1       	ldi	r24, 0x14	; 20
    4130:	95 e1       	ldi	r25, 0x15	; 21
    4132:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      captureEntropy1();
    4136:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <captureEntropy1()>
    413a:	ed cf       	rjmp	.-38     	; 0x4116 <setup+0x2da>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    413c:	82 e4       	ldi	r24, 0x42	; 66
    413e:	94 e0       	ldi	r25, 0x04	; 4
    4140:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(); // Async clock not running.
    4144:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <panic()>
      }
    }
  posPOST(5, F("slow RTC clock OK"));
    4148:	85 e0       	ldi	r24, 0x05	; 5
    414a:	60 e3       	ldi	r22, 0x30	; 48
    414c:	74 e0       	ldi	r23, 0x04	; 4
    414e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <posPOST(unsigned char, __FlashStringHelper const*)>
  // DHD20130430: maybe as much as 16 bits of entropy on each reset in seed1, concentrated in the least-significant bits.
  const uint16_t s16 = (__DATE__[5]) ^ ((getMinutesSinceMidnightLT() << 5) ^ (((int)getSubCycleTime()) << 7) ^ (heat << 2) ^ (light << 6) ^ Vcc ^ intTempC16); /* This fits in an int (16 bits). */
    4152:	0e 94 4b 13 	call	0x2696	; 0x2696 <getMinutesSinceMidnightLT()>
    4156:	00 91 b2 00 	lds	r16, 0x00B2
    415a:	10 e0       	ldi	r17, 0x00	; 0
    415c:	16 95       	lsr	r17
    415e:	10 2f       	mov	r17, r16
    4160:	00 27       	eor	r16, r16
    4162:	17 95       	ror	r17
    4164:	07 95       	ror	r16
    4166:	03 63       	ori	r16, 0x33	; 51
    4168:	02 25       	eor	r16, r2
    416a:	13 25       	eor	r17, r3
    416c:	04 25       	eor	r16, r4
    416e:	15 25       	eor	r17, r5
    4170:	aa 0c       	add	r10, r10
    4172:	bb 1c       	adc	r11, r11
    4174:	aa 0c       	add	r10, r10
    4176:	bb 1c       	adc	r11, r11
    4178:	0a 25       	eor	r16, r10
    417a:	1b 25       	eor	r17, r11
    417c:	36 e0       	ldi	r19, 0x06	; 6
    417e:	66 0c       	add	r6, r6
    4180:	77 1c       	adc	r7, r7
    4182:	3a 95       	dec	r19
    4184:	e1 f7       	brne	.-8      	; 0x417e <setup+0x342>
    4186:	06 25       	eor	r16, r6
    4188:	17 25       	eor	r17, r7
    418a:	25 e0       	ldi	r18, 0x05	; 5
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	2a 95       	dec	r18
    4192:	e1 f7       	brne	.-8      	; 0x418c <setup+0x350>
    4194:	08 27       	eor	r16, r24
    4196:	19 27       	eor	r17, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  seedRNG8((uint8_t) s16, (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    4198:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <clockJitterWDT()>
    419c:	98 01       	movw	r18, r16
    419e:	2c 0d       	add	r18, r12
    41a0:	3d 1d       	adc	r19, r13
    41a2:	48 2f       	mov	r20, r24
    41a4:	48 25       	eor	r20, r8
    41a6:	80 2f       	mov	r24, r16
    41a8:	63 2f       	mov	r22, r19
    41aa:	0e 94 ae 10 	call	0x215c	; 0x215c <seedRNG8(unsigned char, unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    41ae:	8d 2d       	mov	r24, r13
    41b0:	99 27       	eor	r25, r25
    41b2:	c3 96       	adiw	r24, 0x33	; 51
    41b4:	80 27       	eor	r24, r16
    41b6:	91 27       	eor	r25, r17
    41b8:	83 70       	andi	r24, 0x03	; 3
    41ba:	90 70       	andi	r25, 0x00	; 0
    41bc:	02 96       	adiw	r24, 0x02	; 2
    41be:	18 2f       	mov	r17, r24
    41c0:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    41c2:	f9 99       	sbic	0x1f, 1	; 31
    41c4:	fe cf       	rjmp	.-4      	; 0x41c2 <setup+0x386>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    41c6:	92 bd       	out	0x22, r25	; 34
    41c8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    41ca:	f8 9a       	sbi	0x1f, 0	; 31
    41cc:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    41ce:	88 23       	and	r24, r24
    41d0:	29 f4       	brne	.+10     	; 0x41dc <setup+0x3a0>
    41d2:	81 2f       	mov	r24, r17
    41d4:	90 2f       	mov	r25, r16
    41d6:	0e 94 69 07 	call	0xed2	; 0xed2 <eeprom_smart_erase_byte(unsigned char*)>
    41da:	08 c0       	rjmp	.+16     	; 0x41ec <setup+0x3b0>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    41dc:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <clockJitterEntropyByte()>
    41e0:	68 2f       	mov	r22, r24
    41e2:	6c 0d       	add	r22, r12
    41e4:	81 2f       	mov	r24, r17
    41e6:	90 2f       	mov	r25, r16
    41e8:	0e 94 7d 07 	call	0xefa	; 0xefa <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(erv, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Initialised: turn heatcall UI LED off (and make it an output).
  pinMode(LED_HEATCALL, OUTPUT);
    41ec:	8d e0       	ldi	r24, 0x0D	; 13
    41ee:	61 e0       	ldi	r22, 0x01	; 1
    41f0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <pinMode>
  fastDigitalWrite(LED_HEATCALL, LOW);
    41f4:	2d 98       	cbi	0x05, 5	; 5

  // Report initial status.
  serialStatusReport();
    41f6:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <serialStatusReport()>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    41fa:	80 91 a6 01 	lds	r24, 0x01A6
    41fe:	80 93 ba 01 	sts	0x01BA, r24
  }
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	cf 91       	pop	r28
    4208:	df 91       	pop	r29
    420a:	1f 91       	pop	r17
    420c:	0f 91       	pop	r16
    420e:	ff 90       	pop	r15
    4210:	ef 90       	pop	r14
    4212:	df 90       	pop	r13
    4214:	cf 90       	pop	r12
    4216:	bf 90       	pop	r11
    4218:	af 90       	pop	r10
    421a:	9f 90       	pop	r9
    421c:	8f 90       	pop	r8
    421e:	7f 90       	pop	r7
    4220:	6f 90       	pop	r6
    4222:	5f 90       	pop	r5
    4224:	4f 90       	pop	r4
    4226:	3f 90       	pop	r3
    4228:	2f 90       	pop	r2
    422a:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    422c:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    4230:	8f 15       	cp	r24, r15
    4232:	09 f0       	breq	.+2      	; 0x4236 <setup+0x3fa>
    4234:	89 cf       	rjmp	.-238    	; 0x4148 <setup+0x30c>
    4236:	82 cf       	rjmp	.-252    	; 0x413c <setup+0x300>

00004238 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	80 93 04 02 	sts	0x0204, r24
  // set address of targeted slave
  txAddress = address;
    423e:	60 93 e1 01 	sts	0x01E1, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4242:	10 92 02 02 	sts	0x0202, r1
  txBufferLength = 0;
    4246:	10 92 03 02 	sts	0x0203, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    424a:	08 95       	ret

0000424c <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    424c:	20 91 e0 01 	lds	r18, 0x01E0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	80 91 df 01 	lds	r24, 0x01DF
    4256:	28 1b       	sub	r18, r24
    4258:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    425a:	c9 01       	movw	r24, r18
    425c:	08 95       	ret

0000425e <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    425e:	40 91 df 01 	lds	r20, 0x01DF
    4262:	80 91 e0 01 	lds	r24, 0x01E0
    4266:	48 17       	cp	r20, r24
    4268:	18 f0       	brcs	.+6      	; 0x4270 <TwoWire::read()+0x12>
    426a:	2f ef       	ldi	r18, 0xFF	; 255
    426c:	3f ef       	ldi	r19, 0xFF	; 255
    426e:	0a c0       	rjmp	.+20     	; 0x4284 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    4270:	e4 2f       	mov	r30, r20
    4272:	f0 e0       	ldi	r31, 0x00	; 0
    4274:	e1 54       	subi	r30, 0x41	; 65
    4276:	fe 4f       	sbci	r31, 0xFE	; 254
    4278:	80 81       	ld	r24, Z
    427a:	28 2f       	mov	r18, r24
    427c:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    427e:	4f 5f       	subi	r20, 0xFF	; 255
    4280:	40 93 df 01 	sts	0x01DF, r20
  }

  return value;
}
    4284:	c9 01       	movw	r24, r18
    4286:	08 95       	ret

00004288 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4288:	e0 91 df 01 	lds	r30, 0x01DF
    428c:	80 91 e0 01 	lds	r24, 0x01E0
    4290:	e8 17       	cp	r30, r24
    4292:	18 f0       	brcs	.+6      	; 0x429a <TwoWire::peek()+0x12>
    4294:	ef ef       	ldi	r30, 0xFF	; 255
    4296:	ff ef       	ldi	r31, 0xFF	; 255
    4298:	06 c0       	rjmp	.+12     	; 0x42a6 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	e1 54       	subi	r30, 0x41	; 65
    429e:	fe 4f       	sbci	r31, 0xFE	; 254
    42a0:	80 81       	ld	r24, Z
    42a2:	e8 2f       	mov	r30, r24
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    42a6:	cf 01       	movw	r24, r30
    42a8:	08 95       	ret

000042aa <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    42aa:	08 95       	ret

000042ac <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    42ac:	10 92 08 02 	sts	0x0208, r1
    42b0:	10 92 07 02 	sts	0x0207, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    42b4:	88 ee       	ldi	r24, 0xE8	; 232
    42b6:	93 e0       	ldi	r25, 0x03	; 3
    42b8:	a0 e0       	ldi	r26, 0x00	; 0
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	80 93 09 02 	sts	0x0209, r24
    42c0:	90 93 0a 02 	sts	0x020A, r25
    42c4:	a0 93 0b 02 	sts	0x020B, r26
    42c8:	b0 93 0c 02 	sts	0x020C, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    42cc:	89 e0       	ldi	r24, 0x09	; 9
    42ce:	91 e0       	ldi	r25, 0x01	; 1
    42d0:	90 93 06 02 	sts	0x0206, r25
    42d4:	80 93 05 02 	sts	0x0205, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    42d8:	08 95       	ret

000042da <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    42da:	cf 92       	push	r12
    42dc:	df 92       	push	r13
    42de:	ef 92       	push	r14
    42e0:	ff 92       	push	r15
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	7c 01       	movw	r14, r24
    42ec:	6b 01       	movw	r12, r22
    42ee:	8a 01       	movw	r16, r20
{
  if(transmitting){
    42f0:	80 91 04 02 	lds	r24, 0x0204
    42f4:	88 23       	and	r24, r24
    42f6:	a1 f0       	breq	.+40     	; 0x4320 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    42f8:	c0 e0       	ldi	r28, 0x00	; 0
    42fa:	d0 e0       	ldi	r29, 0x00	; 0
    42fc:	0d c0       	rjmp	.+26     	; 0x4318 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    42fe:	d7 01       	movw	r26, r14
    4300:	ed 91       	ld	r30, X+
    4302:	fc 91       	ld	r31, X
    4304:	d6 01       	movw	r26, r12
    4306:	ac 0f       	add	r26, r28
    4308:	bd 1f       	adc	r27, r29
    430a:	01 90       	ld	r0, Z+
    430c:	f0 81       	ld	r31, Z
    430e:	e0 2d       	mov	r30, r0
    4310:	c7 01       	movw	r24, r14
    4312:	6c 91       	ld	r22, X
    4314:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4316:	21 96       	adiw	r28, 0x01	; 1
    4318:	c0 17       	cp	r28, r16
    431a:	d1 07       	cpc	r29, r17
    431c:	80 f3       	brcs	.-32     	; 0x42fe <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4320:	cb 01       	movw	r24, r22
    4322:	64 2f       	mov	r22, r20
    4324:	0e 94 9f 22 	call	0x453e	; 0x453e <twi_transmit>
  }
  return quantity;
}
    4328:	c8 01       	movw	r24, r16
    432a:	df 91       	pop	r29
    432c:	cf 91       	pop	r28
    432e:	1f 91       	pop	r17
    4330:	0f 91       	pop	r16
    4332:	ff 90       	pop	r15
    4334:	ef 90       	pop	r14
    4336:	df 90       	pop	r13
    4338:	cf 90       	pop	r12
    433a:	08 95       	ret

0000433c <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    433c:	df 93       	push	r29
    433e:	cf 93       	push	r28
    4340:	0f 92       	push	r0
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	fc 01       	movw	r30, r24
    4348:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    434a:	80 91 04 02 	lds	r24, 0x0204
    434e:	88 23       	and	r24, r24
    4350:	c9 f0       	breq	.+50     	; 0x4384 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4352:	80 91 03 02 	lds	r24, 0x0203
    4356:	80 32       	cpi	r24, 0x20	; 32
    4358:	38 f0       	brcs	.+14     	; 0x4368 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	93 83       	std	Z+3, r25	; 0x03
    4360:	82 83       	std	Z+2, r24	; 0x02
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	15 c0       	rjmp	.+42     	; 0x4392 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4368:	80 91 02 02 	lds	r24, 0x0202
    436c:	e8 2f       	mov	r30, r24
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	ee 51       	subi	r30, 0x1E	; 30
    4372:	fe 4f       	sbci	r31, 0xFE	; 254
    4374:	99 81       	ldd	r25, Y+1	; 0x01
    4376:	90 83       	st	Z, r25
    ++txBufferIndex;
    4378:	8f 5f       	subi	r24, 0xFF	; 255
    437a:	80 93 02 02 	sts	0x0202, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    437e:	80 93 03 02 	sts	0x0203, r24
    4382:	05 c0       	rjmp	.+10     	; 0x438e <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4384:	ce 01       	movw	r24, r28
    4386:	01 96       	adiw	r24, 0x01	; 1
    4388:	61 e0       	ldi	r22, 0x01	; 1
    438a:	0e 94 9f 22 	call	0x453e	; 0x453e <twi_transmit>
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4392:	c9 01       	movw	r24, r18
    4394:	0f 90       	pop	r0
    4396:	cf 91       	pop	r28
    4398:	df 91       	pop	r29
    439a:	08 95       	ret

0000439c <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    439c:	0f 93       	push	r16
    439e:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    43a0:	80 91 e1 01 	lds	r24, 0x01E1
    43a4:	62 ee       	ldi	r22, 0xE2	; 226
    43a6:	71 e0       	ldi	r23, 0x01	; 1
    43a8:	40 91 03 02 	lds	r20, 0x0203
    43ac:	21 e0       	ldi	r18, 0x01	; 1
    43ae:	0e 94 4a 22 	call	0x4494	; 0x4494 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    43b2:	10 92 02 02 	sts	0x0202, r1
  txBufferLength = 0;
    43b6:	10 92 03 02 	sts	0x0203, r1
  // indicate that we are done transmitting
  transmitting = 0;
    43ba:	10 92 04 02 	sts	0x0204, r1
  return ret;
}
    43be:	0f 91       	pop	r16
    43c0:	08 95       	ret

000043c2 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    43c2:	61 e0       	ldi	r22, 0x01	; 1
    43c4:	0e 94 ce 21 	call	0x439c	; 0x439c <TwoWire::endTransmission(unsigned char)>
}
    43c8:	08 95       	ret

000043ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    43ca:	41 32       	cpi	r20, 0x21	; 33
    43cc:	08 f0       	brcs	.+2      	; 0x43d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    43ce:	40 e2       	ldi	r20, 0x20	; 32
    43d0:	86 2f       	mov	r24, r22
    43d2:	6f eb       	ldi	r22, 0xBF	; 191
    43d4:	71 e0       	ldi	r23, 0x01	; 1
    43d6:	0e 94 01 22 	call	0x4402	; 0x4402 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    43da:	10 92 df 01 	sts	0x01DF, r1
  rxBufferLength = read;
    43de:	80 93 e0 01 	sts	0x01E0, r24

  return read;
}
    43e2:	08 95       	ret

000043e4 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    43e4:	21 e0       	ldi	r18, 0x01	; 1
    43e6:	0e 94 e5 21 	call	0x43ca	; 0x43ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    43ea:	08 95       	ret

000043ec <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    43ec:	10 92 df 01 	sts	0x01DF, r1
  rxBufferLength = 0;
    43f0:	10 92 e0 01 	sts	0x01E0, r1

  txBufferIndex = 0;
    43f4:	10 92 02 02 	sts	0x0202, r1
  txBufferLength = 0;
    43f8:	10 92 03 02 	sts	0x0203, r1

  twi_init();
    43fc:	0e 94 4b 24 	call	0x4896	; 0x4896 <twi_init>
}
    4400:	08 95       	ret

00004402 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4402:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4404:	41 32       	cpi	r20, 0x21	; 33
    4406:	10 f0       	brcs	.+4      	; 0x440c <twi_readFrom+0xa>
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	42 c0       	rjmp	.+132    	; 0x4490 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    440c:	80 91 11 02 	lds	r24, 0x0211
    4410:	88 23       	and	r24, r24
    4412:	e1 f7       	brne	.-8      	; 0x440c <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    4414:	91 e0       	ldi	r25, 0x01	; 1
    4416:	90 93 11 02 	sts	0x0211, r25
  twi_sendStop = sendStop;
    441a:	20 93 13 02 	sts	0x0213, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    441e:	8f ef       	ldi	r24, 0xFF	; 255
    4420:	80 93 7e 02 	sts	0x027E, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4424:	10 92 39 02 	sts	0x0239, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    4428:	41 50       	subi	r20, 0x01	; 1
    442a:	40 93 3a 02 	sts	0x023A, r20
    442e:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4430:	90 93 12 02 	sts	0x0212, r25
  twi_slarw |= address << 1;
    4434:	80 91 12 02 	lds	r24, 0x0212
    4438:	33 0f       	add	r19, r19
    443a:	83 2b       	or	r24, r19
    443c:	80 93 12 02 	sts	0x0212, r24

  if (true == twi_inRepStart) {
    4440:	80 91 14 02 	lds	r24, 0x0214
    4444:	81 30       	cpi	r24, 0x01	; 1
    4446:	41 f4       	brne	.+16     	; 0x4458 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4448:	10 92 14 02 	sts	0x0214, r1
    TWDR = twi_slarw;
    444c:	80 91 12 02 	lds	r24, 0x0212
    4450:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4454:	85 ec       	ldi	r24, 0xC5	; 197
    4456:	01 c0       	rjmp	.+2      	; 0x445a <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4458:	85 ee       	ldi	r24, 0xE5	; 229
    445a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    445e:	80 91 11 02 	lds	r24, 0x0211
    4462:	81 30       	cpi	r24, 0x01	; 1
    4464:	e1 f3       	breq	.-8      	; 0x445e <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    4466:	80 91 39 02 	lds	r24, 0x0239
    446a:	84 17       	cp	r24, r20
    446c:	10 f4       	brcc	.+4      	; 0x4472 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    446e:	40 91 39 02 	lds	r20, 0x0239
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	0a c0       	rjmp	.+20     	; 0x448c <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    4478:	fb 01       	movw	r30, r22
    447a:	e2 0f       	add	r30, r18
    447c:	f3 1f       	adc	r31, r19
    447e:	d9 01       	movw	r26, r18
    4480:	a7 5e       	subi	r26, 0xE7	; 231
    4482:	bd 4f       	sbci	r27, 0xFD	; 253
    4484:	8c 91       	ld	r24, X
    4486:	80 83       	st	Z, r24
    4488:	2f 5f       	subi	r18, 0xFF	; 255
    448a:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    448c:	24 17       	cp	r18, r20
    448e:	a0 f3       	brcs	.-24     	; 0x4478 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4490:	84 2f       	mov	r24, r20
    4492:	08 95       	ret

00004494 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    4494:	0f 93       	push	r16
    4496:	1f 93       	push	r17
    4498:	58 2f       	mov	r21, r24
    449a:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    449c:	41 32       	cpi	r20, 0x21	; 33
    449e:	10 f0       	brcs	.+4      	; 0x44a4 <twi_writeTo+0x10>
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	4a c0       	rjmp	.+148    	; 0x4538 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    44a4:	80 91 11 02 	lds	r24, 0x0211
    44a8:	88 23       	and	r24, r24
    44aa:	e1 f7       	brne	.-8      	; 0x44a4 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    44ac:	82 e0       	ldi	r24, 0x02	; 2
    44ae:	80 93 11 02 	sts	0x0211, r24
  twi_sendStop = sendStop;
    44b2:	00 93 13 02 	sts	0x0213, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    44b6:	8f ef       	ldi	r24, 0xFF	; 255
    44b8:	80 93 7e 02 	sts	0x027E, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    44bc:	10 92 39 02 	sts	0x0239, r1
  twi_masterBufferLength = length;
    44c0:	40 93 3a 02 	sts	0x023A, r20
    44c4:	a9 e1       	ldi	r26, 0x19	; 25
    44c6:	b2 e0       	ldi	r27, 0x02	; 2
    44c8:	fb 01       	movw	r30, r22
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    44cc:	81 91       	ld	r24, Z+
    44ce:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    44d0:	8e 2f       	mov	r24, r30
    44d2:	86 1b       	sub	r24, r22
    44d4:	84 17       	cp	r24, r20
    44d6:	d0 f3       	brcs	.-12     	; 0x44cc <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    44d8:	10 92 12 02 	sts	0x0212, r1
  twi_slarw |= address << 1;
    44dc:	80 91 12 02 	lds	r24, 0x0212
    44e0:	55 0f       	add	r21, r21
    44e2:	85 2b       	or	r24, r21
    44e4:	80 93 12 02 	sts	0x0212, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    44e8:	80 91 14 02 	lds	r24, 0x0214
    44ec:	81 30       	cpi	r24, 0x01	; 1
    44ee:	41 f4       	brne	.+16     	; 0x4500 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    44f0:	10 92 14 02 	sts	0x0214, r1
    TWDR = twi_slarw;				
    44f4:	80 91 12 02 	lds	r24, 0x0212
    44f8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    44fc:	85 ec       	ldi	r24, 0xC5	; 197
    44fe:	01 c0       	rjmp	.+2      	; 0x4502 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4500:	85 ee       	ldi	r24, 0xE5	; 229
    4502:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4506:	11 23       	and	r17, r17
    4508:	21 f0       	breq	.+8      	; 0x4512 <twi_writeTo+0x7e>
    450a:	80 91 11 02 	lds	r24, 0x0211
    450e:	82 30       	cpi	r24, 0x02	; 2
    4510:	e1 f3       	breq	.-8      	; 0x450a <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4512:	80 91 7e 02 	lds	r24, 0x027E
    4516:	8f 3f       	cpi	r24, 0xFF	; 255
    4518:	11 f4       	brne	.+4      	; 0x451e <twi_writeTo+0x8a>
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	0d c0       	rjmp	.+26     	; 0x4538 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    451e:	80 91 7e 02 	lds	r24, 0x027E
    4522:	80 32       	cpi	r24, 0x20	; 32
    4524:	11 f4       	brne	.+4      	; 0x452a <twi_writeTo+0x96>
    4526:	82 e0       	ldi	r24, 0x02	; 2
    4528:	07 c0       	rjmp	.+14     	; 0x4538 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    452a:	80 91 7e 02 	lds	r24, 0x027E
    452e:	80 33       	cpi	r24, 0x30	; 48
    4530:	11 f0       	breq	.+4      	; 0x4536 <twi_writeTo+0xa2>
    4532:	84 e0       	ldi	r24, 0x04	; 4
    4534:	01 c0       	rjmp	.+2      	; 0x4538 <twi_writeTo+0xa4>
    4536:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	08 95       	ret

0000453e <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    453e:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4540:	61 32       	cpi	r22, 0x21	; 33
    4542:	10 f0       	brcs	.+4      	; 0x4548 <twi_transmit+0xa>
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4548:	80 91 11 02 	lds	r24, 0x0211
    454c:	84 30       	cpi	r24, 0x04	; 4
    454e:	11 f0       	breq	.+4      	; 0x4554 <twi_transmit+0x16>
    4550:	82 e0       	ldi	r24, 0x02	; 2
    4552:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    4554:	60 93 5c 02 	sts	0x025C, r22
    4558:	ab e3       	ldi	r26, 0x3B	; 59
    455a:	b2 e0       	ldi	r27, 0x02	; 2
    455c:	84 2f       	mov	r24, r20
    455e:	9c 01       	movw	r18, r24
    4560:	f9 01       	movw	r30, r18
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    4564:	81 91       	ld	r24, Z+
    4566:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    4568:	8e 2f       	mov	r24, r30
    456a:	84 1b       	sub	r24, r20
    456c:	86 17       	cp	r24, r22
    456e:	d0 f3       	brcs	.-12     	; 0x4564 <twi_transmit+0x26>
    4570:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4572:	08 95       	ret

00004574 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4574:	1f 92       	push	r1
    4576:	0f 92       	push	r0
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	0f 92       	push	r0
    457c:	11 24       	eor	r1, r1
    457e:	2f 93       	push	r18
    4580:	3f 93       	push	r19
    4582:	4f 93       	push	r20
    4584:	5f 93       	push	r21
    4586:	6f 93       	push	r22
    4588:	7f 93       	push	r23
    458a:	8f 93       	push	r24
    458c:	9f 93       	push	r25
    458e:	af 93       	push	r26
    4590:	bf 93       	push	r27
    4592:	ef 93       	push	r30
    4594:	ff 93       	push	r31
  switch(TW_STATUS){
    4596:	80 91 b9 00 	lds	r24, 0x00B9
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	88 7f       	andi	r24, 0xF8	; 248
    459e:	90 70       	andi	r25, 0x00	; 0
    45a0:	80 36       	cpi	r24, 0x60	; 96
    45a2:	91 05       	cpc	r25, r1
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <__vector_24+0x34>
    45a6:	f2 c0       	rjmp	.+484    	; 0x478c <__vector_24+0x218>
    45a8:	81 36       	cpi	r24, 0x61	; 97
    45aa:	91 05       	cpc	r25, r1
    45ac:	cc f5       	brge	.+114    	; 0x4620 <__vector_24+0xac>
    45ae:	88 32       	cpi	r24, 0x28	; 40
    45b0:	91 05       	cpc	r25, r1
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <__vector_24+0x42>
    45b4:	7b c0       	rjmp	.+246    	; 0x46ac <__vector_24+0x138>
    45b6:	89 32       	cpi	r24, 0x29	; 41
    45b8:	91 05       	cpc	r25, r1
    45ba:	b4 f4       	brge	.+44     	; 0x45e8 <__vector_24+0x74>
    45bc:	80 31       	cpi	r24, 0x10	; 16
    45be:	91 05       	cpc	r25, r1
    45c0:	09 f4       	brne	.+2      	; 0x45c4 <__vector_24+0x50>
    45c2:	6f c0       	rjmp	.+222    	; 0x46a2 <__vector_24+0x12e>
    45c4:	81 31       	cpi	r24, 0x11	; 17
    45c6:	91 05       	cpc	r25, r1
    45c8:	3c f4       	brge	.+14     	; 0x45d8 <__vector_24+0x64>
    45ca:	00 97       	sbiw	r24, 0x00	; 0
    45cc:	09 f4       	brne	.+2      	; 0x45d0 <__vector_24+0x5c>
    45ce:	47 c1       	rjmp	.+654    	; 0x485e <__vector_24+0x2ea>
    45d0:	08 97       	sbiw	r24, 0x08	; 8
    45d2:	09 f0       	breq	.+2      	; 0x45d6 <__vector_24+0x62>
    45d4:	4f c1       	rjmp	.+670    	; 0x4874 <__vector_24+0x300>
    45d6:	65 c0       	rjmp	.+202    	; 0x46a2 <__vector_24+0x12e>
    45d8:	88 31       	cpi	r24, 0x18	; 24
    45da:	91 05       	cpc	r25, r1
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <__vector_24+0x6c>
    45de:	66 c0       	rjmp	.+204    	; 0x46ac <__vector_24+0x138>
    45e0:	80 97       	sbiw	r24, 0x20	; 32
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <__vector_24+0x72>
    45e4:	47 c1       	rjmp	.+654    	; 0x4874 <__vector_24+0x300>
    45e6:	82 c0       	rjmp	.+260    	; 0x46ec <__vector_24+0x178>
    45e8:	80 34       	cpi	r24, 0x40	; 64
    45ea:	91 05       	cpc	r25, r1
    45ec:	09 f4       	brne	.+2      	; 0x45f0 <__vector_24+0x7c>
    45ee:	a4 c0       	rjmp	.+328    	; 0x4738 <__vector_24+0x1c4>
    45f0:	81 34       	cpi	r24, 0x41	; 65
    45f2:	91 05       	cpc	r25, r1
    45f4:	44 f4       	brge	.+16     	; 0x4606 <__vector_24+0x92>
    45f6:	80 33       	cpi	r24, 0x30	; 48
    45f8:	91 05       	cpc	r25, r1
    45fa:	09 f4       	brne	.+2      	; 0x45fe <__vector_24+0x8a>
    45fc:	82 c0       	rjmp	.+260    	; 0x4702 <__vector_24+0x18e>
    45fe:	c8 97       	sbiw	r24, 0x38	; 56
    4600:	09 f0       	breq	.+2      	; 0x4604 <__vector_24+0x90>
    4602:	38 c1       	rjmp	.+624    	; 0x4874 <__vector_24+0x300>
    4604:	89 c0       	rjmp	.+274    	; 0x4718 <__vector_24+0x1a4>
    4606:	80 35       	cpi	r24, 0x50	; 80
    4608:	91 05       	cpc	r25, r1
    460a:	09 f4       	brne	.+2      	; 0x460e <__vector_24+0x9a>
    460c:	89 c0       	rjmp	.+274    	; 0x4720 <__vector_24+0x1ac>
    460e:	88 35       	cpi	r24, 0x58	; 88
    4610:	91 05       	cpc	r25, r1
    4612:	09 f4       	brne	.+2      	; 0x4616 <__vector_24+0xa2>
    4614:	96 c0       	rjmp	.+300    	; 0x4742 <__vector_24+0x1ce>
    4616:	88 34       	cpi	r24, 0x48	; 72
    4618:	91 05       	cpc	r25, r1
    461a:	09 f0       	breq	.+2      	; 0x461e <__vector_24+0xaa>
    461c:	2b c1       	rjmp	.+598    	; 0x4874 <__vector_24+0x300>
    461e:	ae c0       	rjmp	.+348    	; 0x477c <__vector_24+0x208>
    4620:	88 39       	cpi	r24, 0x98	; 152
    4622:	91 05       	cpc	r25, r1
    4624:	09 f4       	brne	.+2      	; 0x4628 <__vector_24+0xb4>
    4626:	13 c1       	rjmp	.+550    	; 0x484e <__vector_24+0x2da>
    4628:	89 39       	cpi	r24, 0x99	; 153
    462a:	91 05       	cpc	r25, r1
    462c:	ec f4       	brge	.+58     	; 0x4668 <__vector_24+0xf4>
    462e:	88 37       	cpi	r24, 0x78	; 120
    4630:	91 05       	cpc	r25, r1
    4632:	09 f4       	brne	.+2      	; 0x4636 <__vector_24+0xc2>
    4634:	ab c0       	rjmp	.+342    	; 0x478c <__vector_24+0x218>
    4636:	89 37       	cpi	r24, 0x79	; 121
    4638:	91 05       	cpc	r25, r1
    463a:	4c f4       	brge	.+18     	; 0x464e <__vector_24+0xda>
    463c:	88 36       	cpi	r24, 0x68	; 104
    463e:	91 05       	cpc	r25, r1
    4640:	09 f4       	brne	.+2      	; 0x4644 <__vector_24+0xd0>
    4642:	a4 c0       	rjmp	.+328    	; 0x478c <__vector_24+0x218>
    4644:	80 37       	cpi	r24, 0x70	; 112
    4646:	91 05       	cpc	r25, r1
    4648:	09 f0       	breq	.+2      	; 0x464c <__vector_24+0xd8>
    464a:	14 c1       	rjmp	.+552    	; 0x4874 <__vector_24+0x300>
    464c:	9f c0       	rjmp	.+318    	; 0x478c <__vector_24+0x218>
    464e:	88 38       	cpi	r24, 0x88	; 136
    4650:	91 05       	cpc	r25, r1
    4652:	09 f4       	brne	.+2      	; 0x4656 <__vector_24+0xe2>
    4654:	fc c0       	rjmp	.+504    	; 0x484e <__vector_24+0x2da>
    4656:	80 39       	cpi	r24, 0x90	; 144
    4658:	91 05       	cpc	r25, r1
    465a:	09 f4       	brne	.+2      	; 0x465e <__vector_24+0xea>
    465c:	9d c0       	rjmp	.+314    	; 0x4798 <__vector_24+0x224>
    465e:	80 38       	cpi	r24, 0x80	; 128
    4660:	91 05       	cpc	r25, r1
    4662:	09 f0       	breq	.+2      	; 0x4666 <__vector_24+0xf2>
    4664:	07 c1       	rjmp	.+526    	; 0x4874 <__vector_24+0x300>
    4666:	98 c0       	rjmp	.+304    	; 0x4798 <__vector_24+0x224>
    4668:	80 3b       	cpi	r24, 0xB0	; 176
    466a:	91 05       	cpc	r25, r1
    466c:	09 f4       	brne	.+2      	; 0x4670 <__vector_24+0xfc>
    466e:	c6 c0       	rjmp	.+396    	; 0x47fc <__vector_24+0x288>
    4670:	81 3b       	cpi	r24, 0xB1	; 177
    4672:	91 05       	cpc	r25, r1
    4674:	4c f4       	brge	.+18     	; 0x4688 <__vector_24+0x114>
    4676:	80 3a       	cpi	r24, 0xA0	; 160
    4678:	91 05       	cpc	r25, r1
    467a:	09 f4       	brne	.+2      	; 0x467e <__vector_24+0x10a>
    467c:	9f c0       	rjmp	.+318    	; 0x47bc <__vector_24+0x248>
    467e:	88 3a       	cpi	r24, 0xA8	; 168
    4680:	91 05       	cpc	r25, r1
    4682:	09 f0       	breq	.+2      	; 0x4686 <__vector_24+0x112>
    4684:	f7 c0       	rjmp	.+494    	; 0x4874 <__vector_24+0x300>
    4686:	ba c0       	rjmp	.+372    	; 0x47fc <__vector_24+0x288>
    4688:	80 3c       	cpi	r24, 0xC0	; 192
    468a:	91 05       	cpc	r25, r1
    468c:	09 f4       	brne	.+2      	; 0x4690 <__vector_24+0x11c>
    468e:	e3 c0       	rjmp	.+454    	; 0x4856 <__vector_24+0x2e2>
    4690:	88 3c       	cpi	r24, 0xC8	; 200
    4692:	91 05       	cpc	r25, r1
    4694:	09 f4       	brne	.+2      	; 0x4698 <__vector_24+0x124>
    4696:	df c0       	rjmp	.+446    	; 0x4856 <__vector_24+0x2e2>
    4698:	88 3b       	cpi	r24, 0xB8	; 184
    469a:	91 05       	cpc	r25, r1
    469c:	09 f0       	breq	.+2      	; 0x46a0 <__vector_24+0x12c>
    469e:	ea c0       	rjmp	.+468    	; 0x4874 <__vector_24+0x300>
    46a0:	c2 c0       	rjmp	.+388    	; 0x4826 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    46a2:	80 91 12 02 	lds	r24, 0x0212
    46a6:	80 93 bb 00 	sts	0x00BB, r24
    46aa:	cf c0       	rjmp	.+414    	; 0x484a <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    46ac:	90 91 39 02 	lds	r25, 0x0239
    46b0:	80 91 3a 02 	lds	r24, 0x023A
    46b4:	98 17       	cp	r25, r24
    46b6:	68 f4       	brcc	.+26     	; 0x46d2 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    46b8:	90 91 39 02 	lds	r25, 0x0239
    46bc:	e9 2f       	mov	r30, r25
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	e7 5e       	subi	r30, 0xE7	; 231
    46c2:	fd 4f       	sbci	r31, 0xFD	; 253
    46c4:	80 81       	ld	r24, Z
    46c6:	80 93 bb 00 	sts	0x00BB, r24
    46ca:	9f 5f       	subi	r25, 0xFF	; 255
    46cc:	90 93 39 02 	sts	0x0239, r25
    46d0:	bc c0       	rjmp	.+376    	; 0x484a <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    46d2:	80 91 13 02 	lds	r24, 0x0213
    46d6:	88 23       	and	r24, r24
    46d8:	09 f4       	brne	.+2      	; 0x46dc <__vector_24+0x168>
    46da:	4b c0       	rjmp	.+150    	; 0x4772 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    46dc:	85 ed       	ldi	r24, 0xD5	; 213
    46de:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    46e2:	80 91 bc 00 	lds	r24, 0x00BC
    46e6:	84 fd       	sbrc	r24, 4
    46e8:	fc cf       	rjmp	.-8      	; 0x46e2 <__vector_24+0x16e>
    46ea:	c2 c0       	rjmp	.+388    	; 0x4870 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    46ec:	80 e2       	ldi	r24, 0x20	; 32
    46ee:	80 93 7e 02 	sts	0x027E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    46f2:	85 ed       	ldi	r24, 0xD5	; 213
    46f4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    46f8:	80 91 bc 00 	lds	r24, 0x00BC
    46fc:	84 fd       	sbrc	r24, 4
    46fe:	fc cf       	rjmp	.-8      	; 0x46f8 <__vector_24+0x184>
    4700:	b7 c0       	rjmp	.+366    	; 0x4870 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4702:	80 e3       	ldi	r24, 0x30	; 48
    4704:	80 93 7e 02 	sts	0x027E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4708:	85 ed       	ldi	r24, 0xD5	; 213
    470a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    470e:	80 91 bc 00 	lds	r24, 0x00BC
    4712:	84 fd       	sbrc	r24, 4
    4714:	fc cf       	rjmp	.-8      	; 0x470e <__vector_24+0x19a>
    4716:	ac c0       	rjmp	.+344    	; 0x4870 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4718:	88 e3       	ldi	r24, 0x38	; 56
    471a:	80 93 7e 02 	sts	0x027E, r24
    471e:	9b c0       	rjmp	.+310    	; 0x4856 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4720:	80 91 39 02 	lds	r24, 0x0239
    4724:	90 91 bb 00 	lds	r25, 0x00BB
    4728:	e8 2f       	mov	r30, r24
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	e7 5e       	subi	r30, 0xE7	; 231
    472e:	fd 4f       	sbci	r31, 0xFD	; 253
    4730:	90 83       	st	Z, r25
    4732:	8f 5f       	subi	r24, 0xFF	; 255
    4734:	80 93 39 02 	sts	0x0239, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4738:	90 91 39 02 	lds	r25, 0x0239
    473c:	80 91 3a 02 	lds	r24, 0x023A
    4740:	82 c0       	rjmp	.+260    	; 0x4846 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4742:	80 91 39 02 	lds	r24, 0x0239
    4746:	90 91 bb 00 	lds	r25, 0x00BB
    474a:	e8 2f       	mov	r30, r24
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	e7 5e       	subi	r30, 0xE7	; 231
    4750:	fd 4f       	sbci	r31, 0xFD	; 253
    4752:	90 83       	st	Z, r25
    4754:	8f 5f       	subi	r24, 0xFF	; 255
    4756:	80 93 39 02 	sts	0x0239, r24
	if (twi_sendStop)
    475a:	80 91 13 02 	lds	r24, 0x0213
    475e:	88 23       	and	r24, r24
    4760:	41 f0       	breq	.+16     	; 0x4772 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4762:	85 ed       	ldi	r24, 0xD5	; 213
    4764:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4768:	80 91 bc 00 	lds	r24, 0x00BC
    476c:	84 fd       	sbrc	r24, 4
    476e:	fc cf       	rjmp	.-8      	; 0x4768 <__vector_24+0x1f4>
    4770:	7f c0       	rjmp	.+254    	; 0x4870 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	80 93 14 02 	sts	0x0214, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4778:	84 ea       	ldi	r24, 0xA4	; 164
    477a:	6e c0       	rjmp	.+220    	; 0x4858 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    477c:	85 ed       	ldi	r24, 0xD5	; 213
    477e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4782:	80 91 bc 00 	lds	r24, 0x00BC
    4786:	84 fd       	sbrc	r24, 4
    4788:	fc cf       	rjmp	.-8      	; 0x4782 <__vector_24+0x20e>
    478a:	72 c0       	rjmp	.+228    	; 0x4870 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    478c:	83 e0       	ldi	r24, 0x03	; 3
    478e:	80 93 11 02 	sts	0x0211, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4792:	10 92 7d 02 	sts	0x027D, r1
    4796:	59 c0       	rjmp	.+178    	; 0x484a <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4798:	80 91 7d 02 	lds	r24, 0x027D
    479c:	80 32       	cpi	r24, 0x20	; 32
    479e:	08 f0       	brcs	.+2      	; 0x47a2 <__vector_24+0x22e>
    47a0:	56 c0       	rjmp	.+172    	; 0x484e <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    47a2:	80 91 7d 02 	lds	r24, 0x027D
    47a6:	90 91 bb 00 	lds	r25, 0x00BB
    47aa:	e8 2f       	mov	r30, r24
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	e3 5a       	subi	r30, 0xA3	; 163
    47b0:	fd 4f       	sbci	r31, 0xFD	; 253
    47b2:	90 83       	st	Z, r25
    47b4:	8f 5f       	subi	r24, 0xFF	; 255
    47b6:	80 93 7d 02 	sts	0x027D, r24
    47ba:	47 c0       	rjmp	.+142    	; 0x484a <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    47bc:	80 91 7d 02 	lds	r24, 0x027D
    47c0:	80 32       	cpi	r24, 0x20	; 32
    47c2:	30 f4       	brcc	.+12     	; 0x47d0 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    47c4:	e0 91 7d 02 	lds	r30, 0x027D
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	e3 5a       	subi	r30, 0xA3	; 163
    47cc:	fd 4f       	sbci	r31, 0xFD	; 253
    47ce:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    47d0:	85 ed       	ldi	r24, 0xD5	; 213
    47d2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    47d6:	80 91 bc 00 	lds	r24, 0x00BC
    47da:	84 fd       	sbrc	r24, 4
    47dc:	fc cf       	rjmp	.-8      	; 0x47d6 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    47de:	10 92 11 02 	sts	0x0211, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    47e2:	60 91 7d 02 	lds	r22, 0x027D
    47e6:	e0 91 17 02 	lds	r30, 0x0217
    47ea:	f0 91 18 02 	lds	r31, 0x0218
    47ee:	8d e5       	ldi	r24, 0x5D	; 93
    47f0:	92 e0       	ldi	r25, 0x02	; 2
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    47f6:	10 92 7d 02 	sts	0x027D, r1
    47fa:	2d c0       	rjmp	.+90     	; 0x4856 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    47fc:	84 e0       	ldi	r24, 0x04	; 4
    47fe:	80 93 11 02 	sts	0x0211, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4802:	10 92 5b 02 	sts	0x025B, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4806:	10 92 5c 02 	sts	0x025C, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    480a:	e0 91 15 02 	lds	r30, 0x0215
    480e:	f0 91 16 02 	lds	r31, 0x0216
    4812:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4814:	80 91 5c 02 	lds	r24, 0x025C
    4818:	88 23       	and	r24, r24
    481a:	29 f4       	brne	.+10     	; 0x4826 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	80 93 5c 02 	sts	0x025C, r24
        twi_txBuffer[0] = 0x00;
    4822:	10 92 3b 02 	sts	0x023B, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4826:	90 91 5b 02 	lds	r25, 0x025B
    482a:	e9 2f       	mov	r30, r25
    482c:	f0 e0       	ldi	r31, 0x00	; 0
    482e:	e5 5c       	subi	r30, 0xC5	; 197
    4830:	fd 4f       	sbci	r31, 0xFD	; 253
    4832:	80 81       	ld	r24, Z
    4834:	80 93 bb 00 	sts	0x00BB, r24
    4838:	9f 5f       	subi	r25, 0xFF	; 255
    483a:	90 93 5b 02 	sts	0x025B, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    483e:	90 91 5b 02 	lds	r25, 0x025B
    4842:	80 91 5c 02 	lds	r24, 0x025C
    4846:	98 17       	cp	r25, r24
    4848:	10 f4       	brcc	.+4      	; 0x484e <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    484a:	85 ec       	ldi	r24, 0xC5	; 197
    484c:	01 c0       	rjmp	.+2      	; 0x4850 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    484e:	85 e8       	ldi	r24, 0x85	; 133
    4850:	80 93 bc 00 	sts	0x00BC, r24
    4854:	0f c0       	rjmp	.+30     	; 0x4874 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4856:	85 ec       	ldi	r24, 0xC5	; 197
    4858:	80 93 bc 00 	sts	0x00BC, r24
    485c:	09 c0       	rjmp	.+18     	; 0x4870 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    485e:	10 92 7e 02 	sts	0x027E, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4862:	85 ed       	ldi	r24, 0xD5	; 213
    4864:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4868:	80 91 bc 00 	lds	r24, 0x00BC
    486c:	84 fd       	sbrc	r24, 4
    486e:	fc cf       	rjmp	.-8      	; 0x4868 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4870:	10 92 11 02 	sts	0x0211, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4874:	ff 91       	pop	r31
    4876:	ef 91       	pop	r30
    4878:	bf 91       	pop	r27
    487a:	af 91       	pop	r26
    487c:	9f 91       	pop	r25
    487e:	8f 91       	pop	r24
    4880:	7f 91       	pop	r23
    4882:	6f 91       	pop	r22
    4884:	5f 91       	pop	r21
    4886:	4f 91       	pop	r20
    4888:	3f 91       	pop	r19
    488a:	2f 91       	pop	r18
    488c:	0f 90       	pop	r0
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	0f 90       	pop	r0
    4892:	1f 90       	pop	r1
    4894:	18 95       	reti

00004896 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4896:	10 92 11 02 	sts	0x0211, r1
  twi_sendStop = true;		// default value
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	80 93 13 02 	sts	0x0213, r24
  twi_inRepStart = false;
    48a0:	10 92 14 02 	sts	0x0214, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    48a4:	82 e1       	ldi	r24, 0x12	; 18
    48a6:	61 e0       	ldi	r22, 0x01	; 1
    48a8:	0e 94 a8 24 	call	0x4950	; 0x4950 <digitalWrite>
  digitalWrite(SCL, 1);
    48ac:	83 e1       	ldi	r24, 0x13	; 19
    48ae:	61 e0       	ldi	r22, 0x01	; 1
    48b0:	0e 94 a8 24 	call	0x4950	; 0x4950 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    48b4:	e9 eb       	ldi	r30, 0xB9	; 185
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	80 81       	ld	r24, Z
    48ba:	8e 7f       	andi	r24, 0xFE	; 254
    48bc:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    48be:	80 81       	ld	r24, Z
    48c0:	8d 7f       	andi	r24, 0xFD	; 253
    48c2:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    48c4:	8d ef       	ldi	r24, 0xFD	; 253
    48c6:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    48ca:	85 e4       	ldi	r24, 0x45	; 69
    48cc:	80 93 bc 00 	sts	0x00BC, r24
}
    48d0:	08 95       	ret

000048d2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    48d6:	48 2f       	mov	r20, r24
    48d8:	50 e0       	ldi	r21, 0x00	; 0
    48da:	ca 01       	movw	r24, r20
    48dc:	82 50       	subi	r24, 0x02	; 2
    48de:	9a 4f       	sbci	r25, 0xFA	; 250
    48e0:	fc 01       	movw	r30, r24
    48e2:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    48e4:	46 51       	subi	r20, 0x16	; 22
    48e6:	5a 4f       	sbci	r21, 0xFA	; 250
    48e8:	fa 01       	movw	r30, r20
    48ea:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    48ec:	88 23       	and	r24, r24
    48ee:	69 f1       	breq	.+90     	; 0x494a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	88 0f       	add	r24, r24
    48f4:	99 1f       	adc	r25, r25
    48f6:	fc 01       	movw	r30, r24
    48f8:	e4 53       	subi	r30, 0x34	; 52
    48fa:	fa 4f       	sbci	r31, 0xFA	; 250
    48fc:	a5 91       	lpm	r26, Z+
    48fe:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    4900:	fc 01       	movw	r30, r24
    4902:	ea 52       	subi	r30, 0x2A	; 42
    4904:	fa 4f       	sbci	r31, 0xFA	; 250
    4906:	c5 91       	lpm	r28, Z+
    4908:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    490a:	66 23       	and	r22, r22
    490c:	51 f4       	brne	.+20     	; 0x4922 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    490e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4910:	f8 94       	cli
		*reg &= ~bit;
    4912:	8c 91       	ld	r24, X
    4914:	93 2f       	mov	r25, r19
    4916:	90 95       	com	r25
    4918:	89 23       	and	r24, r25
    491a:	8c 93       	st	X, r24
		*out &= ~bit;
    491c:	88 81       	ld	r24, Y
    491e:	89 23       	and	r24, r25
    4920:	0b c0       	rjmp	.+22     	; 0x4938 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4922:	62 30       	cpi	r22, 0x02	; 2
    4924:	61 f4       	brne	.+24     	; 0x493e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    4926:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4928:	f8 94       	cli
		*reg &= ~bit;
    492a:	8c 91       	ld	r24, X
    492c:	93 2f       	mov	r25, r19
    492e:	90 95       	com	r25
    4930:	89 23       	and	r24, r25
    4932:	8c 93       	st	X, r24
		*out |= bit;
    4934:	88 81       	ld	r24, Y
    4936:	83 2b       	or	r24, r19
    4938:	88 83       	st	Y, r24
		SREG = oldSREG;
    493a:	2f bf       	out	0x3f, r18	; 63
    493c:	06 c0       	rjmp	.+12     	; 0x494a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    493e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4940:	f8 94       	cli
		*reg |= bit;
    4942:	8c 91       	ld	r24, X
    4944:	83 2b       	or	r24, r19
    4946:	8c 93       	st	X, r24
		SREG = oldSREG;
    4948:	9f bf       	out	0x3f, r25	; 63
	}
}
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
    494e:	08 95       	ret

00004950 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    4950:	48 2f       	mov	r20, r24
    4952:	50 e0       	ldi	r21, 0x00	; 0
    4954:	ca 01       	movw	r24, r20
    4956:	8e 5e       	subi	r24, 0xEE	; 238
    4958:	99 4f       	sbci	r25, 0xF9	; 249
    495a:	fc 01       	movw	r30, r24
    495c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    495e:	ca 01       	movw	r24, r20
    4960:	82 50       	subi	r24, 0x02	; 2
    4962:	9a 4f       	sbci	r25, 0xFA	; 250
    4964:	fc 01       	movw	r30, r24
    4966:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    4968:	46 51       	subi	r20, 0x16	; 22
    496a:	5a 4f       	sbci	r21, 0xFA	; 250
    496c:	fa 01       	movw	r30, r20
    496e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4970:	33 23       	and	r19, r19
    4972:	09 f4       	brne	.+2      	; 0x4976 <digitalWrite+0x26>
    4974:	40 c0       	rjmp	.+128    	; 0x49f6 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4976:	22 23       	and	r18, r18
    4978:	51 f1       	breq	.+84     	; 0x49ce <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    497a:	23 30       	cpi	r18, 0x03	; 3
    497c:	71 f0       	breq	.+28     	; 0x499a <digitalWrite+0x4a>
    497e:	24 30       	cpi	r18, 0x04	; 4
    4980:	28 f4       	brcc	.+10     	; 0x498c <digitalWrite+0x3c>
    4982:	21 30       	cpi	r18, 0x01	; 1
    4984:	a1 f0       	breq	.+40     	; 0x49ae <digitalWrite+0x5e>
    4986:	22 30       	cpi	r18, 0x02	; 2
    4988:	11 f5       	brne	.+68     	; 0x49ce <digitalWrite+0x7e>
    498a:	14 c0       	rjmp	.+40     	; 0x49b4 <digitalWrite+0x64>
    498c:	26 30       	cpi	r18, 0x06	; 6
    498e:	b1 f0       	breq	.+44     	; 0x49bc <digitalWrite+0x6c>
    4990:	27 30       	cpi	r18, 0x07	; 7
    4992:	c1 f0       	breq	.+48     	; 0x49c4 <digitalWrite+0x74>
    4994:	24 30       	cpi	r18, 0x04	; 4
    4996:	d9 f4       	brne	.+54     	; 0x49ce <digitalWrite+0x7e>
    4998:	04 c0       	rjmp	.+8      	; 0x49a2 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    499a:	80 91 80 00 	lds	r24, 0x0080
    499e:	8f 77       	andi	r24, 0x7F	; 127
    49a0:	03 c0       	rjmp	.+6      	; 0x49a8 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    49a2:	80 91 80 00 	lds	r24, 0x0080
    49a6:	8f 7d       	andi	r24, 0xDF	; 223
    49a8:	80 93 80 00 	sts	0x0080, r24
    49ac:	10 c0       	rjmp	.+32     	; 0x49ce <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    49ae:	84 b5       	in	r24, 0x24	; 36
    49b0:	8f 77       	andi	r24, 0x7F	; 127
    49b2:	02 c0       	rjmp	.+4      	; 0x49b8 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    49b4:	84 b5       	in	r24, 0x24	; 36
    49b6:	8f 7d       	andi	r24, 0xDF	; 223
    49b8:	84 bd       	out	0x24, r24	; 36
    49ba:	09 c0       	rjmp	.+18     	; 0x49ce <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    49bc:	80 91 b0 00 	lds	r24, 0x00B0
    49c0:	8f 77       	andi	r24, 0x7F	; 127
    49c2:	03 c0       	rjmp	.+6      	; 0x49ca <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    49c4:	80 91 b0 00 	lds	r24, 0x00B0
    49c8:	8f 7d       	andi	r24, 0xDF	; 223
    49ca:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    49ce:	e3 2f       	mov	r30, r19
    49d0:	f0 e0       	ldi	r31, 0x00	; 0
    49d2:	ee 0f       	add	r30, r30
    49d4:	ff 1f       	adc	r31, r31
    49d6:	ea 52       	subi	r30, 0x2A	; 42
    49d8:	fa 4f       	sbci	r31, 0xFA	; 250
    49da:	a5 91       	lpm	r26, Z+
    49dc:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    49de:	2f b7       	in	r18, 0x3f	; 63
	cli();
    49e0:	f8 94       	cli

	if (val == LOW) {
    49e2:	66 23       	and	r22, r22
    49e4:	21 f4       	brne	.+8      	; 0x49ee <digitalWrite+0x9e>
		*out &= ~bit;
    49e6:	8c 91       	ld	r24, X
    49e8:	90 95       	com	r25
    49ea:	89 23       	and	r24, r25
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    49ee:	8c 91       	ld	r24, X
    49f0:	89 2b       	or	r24, r25
    49f2:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    49f4:	2f bf       	out	0x3f, r18	; 63
    49f6:	08 95       	ret

000049f8 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    49f8:	08 95       	ret

000049fa <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    49fa:	1f 92       	push	r1
    49fc:	0f 92       	push	r0
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	0f 92       	push	r0
    4a02:	11 24       	eor	r1, r1
    4a04:	2f 93       	push	r18
    4a06:	3f 93       	push	r19
    4a08:	4f 93       	push	r20
    4a0a:	8f 93       	push	r24
    4a0c:	9f 93       	push	r25
    4a0e:	ef 93       	push	r30
    4a10:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    4a12:	80 91 c0 00 	lds	r24, 0x00C0
    4a16:	82 fd       	sbrc	r24, 2
    4a18:	1d c0       	rjmp	.+58     	; 0x4a54 <__vector_18+0x5a>
      unsigned char c = UDR0;
    4a1a:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4a1e:	20 91 bf 02 	lds	r18, 0x02BF
    4a22:	30 91 c0 02 	lds	r19, 0x02C0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4a26:	2f 5f       	subi	r18, 0xFF	; 255
    4a28:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2a:	2f 73       	andi	r18, 0x3F	; 63
    4a2c:	30 70       	andi	r19, 0x00	; 0
    4a2e:	80 91 c1 02 	lds	r24, 0x02C1
    4a32:	90 91 c2 02 	lds	r25, 0x02C2
    4a36:	28 17       	cp	r18, r24
    4a38:	39 07       	cpc	r19, r25
    4a3a:	71 f0       	breq	.+28     	; 0x4a58 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    4a3c:	e0 91 bf 02 	lds	r30, 0x02BF
    4a40:	f0 91 c0 02 	lds	r31, 0x02C0
    4a44:	e1 58       	subi	r30, 0x81	; 129
    4a46:	fd 4f       	sbci	r31, 0xFD	; 253
    4a48:	40 83       	st	Z, r20
    buffer->head = i;
    4a4a:	30 93 c0 02 	sts	0x02C0, r19
    4a4e:	20 93 bf 02 	sts	0x02BF, r18
    4a52:	02 c0       	rjmp	.+4      	; 0x4a58 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    4a54:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    4a58:	ff 91       	pop	r31
    4a5a:	ef 91       	pop	r30
    4a5c:	9f 91       	pop	r25
    4a5e:	8f 91       	pop	r24
    4a60:	4f 91       	pop	r20
    4a62:	3f 91       	pop	r19
    4a64:	2f 91       	pop	r18
    4a66:	0f 90       	pop	r0
    4a68:	0f be       	out	0x3f, r0	; 63
    4a6a:	0f 90       	pop	r0
    4a6c:	1f 90       	pop	r1
    4a6e:	18 95       	reti

00004a70 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4a70:	e0 91 13 03 	lds	r30, 0x0313
    4a74:	f0 91 14 03 	lds	r31, 0x0314
    4a78:	e0 5c       	subi	r30, 0xC0	; 192
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	81 91       	ld	r24, Z+
    4a7e:	91 91       	ld	r25, Z+
    4a80:	20 81       	ld	r18, Z
    4a82:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4a84:	82 1b       	sub	r24, r18
    4a86:	93 0b       	sbc	r25, r19
    4a88:	8f 73       	andi	r24, 0x3F	; 63
    4a8a:	90 70       	andi	r25, 0x00	; 0
    4a8c:	89 2b       	or	r24, r25
    4a8e:	11 f0       	breq	.+4      	; 0x4a94 <serialEventRun()+0x24>
    4a90:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <serialEvent()>
    4a94:	08 95       	ret

00004a96 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    4a96:	1f 92       	push	r1
    4a98:	0f 92       	push	r0
    4a9a:	0f b6       	in	r0, 0x3f	; 63
    4a9c:	0f 92       	push	r0
    4a9e:	11 24       	eor	r1, r1
    4aa0:	2f 93       	push	r18
    4aa2:	3f 93       	push	r19
    4aa4:	8f 93       	push	r24
    4aa6:	9f 93       	push	r25
    4aa8:	ef 93       	push	r30
    4aaa:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    4aac:	20 91 03 03 	lds	r18, 0x0303
    4ab0:	30 91 04 03 	lds	r19, 0x0304
    4ab4:	80 91 05 03 	lds	r24, 0x0305
    4ab8:	90 91 06 03 	lds	r25, 0x0306
    4abc:	28 17       	cp	r18, r24
    4abe:	39 07       	cpc	r19, r25
    4ac0:	31 f4       	brne	.+12     	; 0x4ace <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4ac2:	80 91 c1 00 	lds	r24, 0x00C1
    4ac6:	8f 7d       	andi	r24, 0xDF	; 223
    4ac8:	80 93 c1 00 	sts	0x00C1, r24
    4acc:	14 c0       	rjmp	.+40     	; 0x4af6 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4ace:	e0 91 05 03 	lds	r30, 0x0305
    4ad2:	f0 91 06 03 	lds	r31, 0x0306
    4ad6:	ed 53       	subi	r30, 0x3D	; 61
    4ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    4ada:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4adc:	80 91 05 03 	lds	r24, 0x0305
    4ae0:	90 91 06 03 	lds	r25, 0x0306
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	8f 73       	andi	r24, 0x3F	; 63
    4ae8:	90 70       	andi	r25, 0x00	; 0
    4aea:	90 93 06 03 	sts	0x0306, r25
    4aee:	80 93 05 03 	sts	0x0305, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4af2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4af6:	ff 91       	pop	r31
    4af8:	ef 91       	pop	r30
    4afa:	9f 91       	pop	r25
    4afc:	8f 91       	pop	r24
    4afe:	3f 91       	pop	r19
    4b00:	2f 91       	pop	r18
    4b02:	0f 90       	pop	r0
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	0f 90       	pop	r0
    4b08:	1f 90       	pop	r1
    4b0a:	18 95       	reti

00004b0c <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4b0c:	af 92       	push	r10
    4b0e:	bf 92       	push	r11
    4b10:	df 92       	push	r13
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	ec 01       	movw	r28, r24
    4b20:	7a 01       	movw	r14, r20
    4b22:	8b 01       	movw	r16, r22
    4b24:	dd 24       	eor	r13, r13
    4b26:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4b28:	91 e0       	ldi	r25, 0x01	; 1
    4b2a:	a9 2e       	mov	r10, r25
    4b2c:	b1 2c       	mov	r11, r1
    4b2e:	ec 89       	ldd	r30, Y+20	; 0x14
    4b30:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    4b32:	dd 20       	and	r13, r13
    4b34:	69 f0       	breq	.+26     	; 0x4b50 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    4b36:	c5 01       	movw	r24, r10
    4b38:	08 a0       	ldd	r0, Y+32	; 0x20
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <HardwareSerial::begin(unsigned long)+0x34>
    4b3c:	88 0f       	add	r24, r24
    4b3e:	99 1f       	adc	r25, r25
    4b40:	0a 94       	dec	r0
    4b42:	e2 f7       	brpl	.-8      	; 0x4b3c <HardwareSerial::begin(unsigned long)+0x30>
    4b44:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4b46:	60 e9       	ldi	r22, 0x90	; 144
    4b48:	70 ed       	ldi	r23, 0xD0	; 208
    4b4a:	83 e0       	ldi	r24, 0x03	; 3
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	05 c0       	rjmp	.+10     	; 0x4b5a <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    4b50:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4b52:	68 e4       	ldi	r22, 0x48	; 72
    4b54:	78 ee       	ldi	r23, 0xE8	; 232
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	a8 01       	movw	r20, r16
    4b5c:	97 01       	movw	r18, r14
    4b5e:	0e 94 c5 2a 	call	0x558a	; 0x558a <__udivmodsi4>
    4b62:	21 50       	subi	r18, 0x01	; 1
    4b64:	30 40       	sbci	r19, 0x00	; 0
    4b66:	40 40       	sbci	r20, 0x00	; 0
    4b68:	50 40       	sbci	r21, 0x00	; 0
    4b6a:	56 95       	lsr	r21
    4b6c:	47 95       	ror	r20
    4b6e:	37 95       	ror	r19
    4b70:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4b72:	80 e1       	ldi	r24, 0x10	; 16
    4b74:	20 30       	cpi	r18, 0x00	; 0
    4b76:	38 07       	cpc	r19, r24
    4b78:	20 f0       	brcs	.+8      	; 0x4b82 <HardwareSerial::begin(unsigned long)+0x76>
    4b7a:	dd 20       	and	r13, r13
    4b7c:	11 f0       	breq	.+4      	; 0x4b82 <HardwareSerial::begin(unsigned long)+0x76>
    4b7e:	dd 24       	eor	r13, r13
    4b80:	d6 cf       	rjmp	.-84     	; 0x4b2e <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4b82:	e8 89       	ldd	r30, Y+16	; 0x10
    4b84:	f9 89       	ldd	r31, Y+17	; 0x11
    4b86:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4b88:	ea 89       	ldd	r30, Y+18	; 0x12
    4b8a:	fb 89       	ldd	r31, Y+19	; 0x13
    4b8c:	20 83       	st	Z, r18

  transmitting = false;
    4b8e:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    4b90:	ee 89       	ldd	r30, Y+22	; 0x16
    4b92:	ff 89       	ldd	r31, Y+23	; 0x17
    4b94:	40 81       	ld	r20, Z
    4b96:	21 e0       	ldi	r18, 0x01	; 1
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	c9 01       	movw	r24, r18
    4b9c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4b9e:	02 c0       	rjmp	.+4      	; 0x4ba4 <HardwareSerial::begin(unsigned long)+0x98>
    4ba0:	88 0f       	add	r24, r24
    4ba2:	99 1f       	adc	r25, r25
    4ba4:	0a 94       	dec	r0
    4ba6:	e2 f7       	brpl	.-8      	; 0x4ba0 <HardwareSerial::begin(unsigned long)+0x94>
    4ba8:	48 2b       	or	r20, r24
    4baa:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4bac:	ee 89       	ldd	r30, Y+22	; 0x16
    4bae:	ff 89       	ldd	r31, Y+23	; 0x17
    4bb0:	40 81       	ld	r20, Z
    4bb2:	c9 01       	movw	r24, r18
    4bb4:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <HardwareSerial::begin(unsigned long)+0xb0>
    4bb8:	88 0f       	add	r24, r24
    4bba:	99 1f       	adc	r25, r25
    4bbc:	0a 94       	dec	r0
    4bbe:	e2 f7       	brpl	.-8      	; 0x4bb8 <HardwareSerial::begin(unsigned long)+0xac>
    4bc0:	48 2b       	or	r20, r24
    4bc2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4bc4:	ee 89       	ldd	r30, Y+22	; 0x16
    4bc6:	ff 89       	ldd	r31, Y+23	; 0x17
    4bc8:	40 81       	ld	r20, Z
    4bca:	c9 01       	movw	r24, r18
    4bcc:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <HardwareSerial::begin(unsigned long)+0xc8>
    4bd0:	88 0f       	add	r24, r24
    4bd2:	99 1f       	adc	r25, r25
    4bd4:	0a 94       	dec	r0
    4bd6:	e2 f7       	brpl	.-8      	; 0x4bd0 <HardwareSerial::begin(unsigned long)+0xc4>
    4bd8:	48 2b       	or	r20, r24
    4bda:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4bdc:	ee 89       	ldd	r30, Y+22	; 0x16
    4bde:	ff 89       	ldd	r31, Y+23	; 0x17
    4be0:	80 81       	ld	r24, Z
    4be2:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4be4:	02 c0       	rjmp	.+4      	; 0x4bea <HardwareSerial::begin(unsigned long)+0xde>
    4be6:	22 0f       	add	r18, r18
    4be8:	33 1f       	adc	r19, r19
    4bea:	0a 94       	dec	r0
    4bec:	e2 f7       	brpl	.-8      	; 0x4be6 <HardwareSerial::begin(unsigned long)+0xda>
    4bee:	20 95       	com	r18
    4bf0:	28 23       	and	r18, r24
    4bf2:	20 83       	st	Z, r18
}
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	ff 90       	pop	r15
    4bfe:	ef 90       	pop	r14
    4c00:	df 90       	pop	r13
    4c02:	bf 90       	pop	r11
    4c04:	af 90       	pop	r10
    4c06:	08 95       	ret

00004c08 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4c0e:	1e 96       	adiw	r26, 0x0e	; 14
    4c10:	8d 91       	ld	r24, X+
    4c12:	9c 91       	ld	r25, X
    4c14:	1f 97       	sbiw	r26, 0x0f	; 15
    4c16:	ec 01       	movw	r28, r24
    4c18:	c0 5c       	subi	r28, 0xC0	; 192
    4c1a:	df 4f       	sbci	r29, 0xFF	; 255
    4c1c:	fc 01       	movw	r30, r24
    4c1e:	ee 5b       	subi	r30, 0xBE	; 190
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	28 81       	ld	r18, Y
    4c24:	39 81       	ldd	r19, Y+1	; 0x01
    4c26:	80 81       	ld	r24, Z
    4c28:	91 81       	ldd	r25, Z+1	; 0x01
    4c2a:	28 17       	cp	r18, r24
    4c2c:	39 07       	cpc	r19, r25
    4c2e:	c9 f7       	brne	.-14     	; 0x4c22 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    4c30:	56 96       	adiw	r26, 0x16	; 22
    4c32:	ed 91       	ld	r30, X+
    4c34:	fc 91       	ld	r31, X
    4c36:	57 97       	sbiw	r26, 0x17	; 23
    4c38:	40 81       	ld	r20, Z
    4c3a:	21 e0       	ldi	r18, 0x01	; 1
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	c9 01       	movw	r24, r18
    4c40:	5c 96       	adiw	r26, 0x1c	; 28
    4c42:	0c 90       	ld	r0, X
    4c44:	5c 97       	sbiw	r26, 0x1c	; 28
    4c46:	02 c0       	rjmp	.+4      	; 0x4c4c <HardwareSerial::end()+0x44>
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	0a 94       	dec	r0
    4c4e:	e2 f7       	brpl	.-8      	; 0x4c48 <HardwareSerial::end()+0x40>
    4c50:	80 95       	com	r24
    4c52:	84 23       	and	r24, r20
    4c54:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    4c56:	56 96       	adiw	r26, 0x16	; 22
    4c58:	ed 91       	ld	r30, X+
    4c5a:	fc 91       	ld	r31, X
    4c5c:	57 97       	sbiw	r26, 0x17	; 23
    4c5e:	40 81       	ld	r20, Z
    4c60:	c9 01       	movw	r24, r18
    4c62:	5d 96       	adiw	r26, 0x1d	; 29
    4c64:	0c 90       	ld	r0, X
    4c66:	5d 97       	sbiw	r26, 0x1d	; 29
    4c68:	02 c0       	rjmp	.+4      	; 0x4c6e <HardwareSerial::end()+0x66>
    4c6a:	88 0f       	add	r24, r24
    4c6c:	99 1f       	adc	r25, r25
    4c6e:	0a 94       	dec	r0
    4c70:	e2 f7       	brpl	.-8      	; 0x4c6a <HardwareSerial::end()+0x62>
    4c72:	80 95       	com	r24
    4c74:	84 23       	and	r24, r20
    4c76:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    4c78:	56 96       	adiw	r26, 0x16	; 22
    4c7a:	ed 91       	ld	r30, X+
    4c7c:	fc 91       	ld	r31, X
    4c7e:	57 97       	sbiw	r26, 0x17	; 23
    4c80:	40 81       	ld	r20, Z
    4c82:	c9 01       	movw	r24, r18
    4c84:	5e 96       	adiw	r26, 0x1e	; 30
    4c86:	0c 90       	ld	r0, X
    4c88:	5e 97       	sbiw	r26, 0x1e	; 30
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <HardwareSerial::end()+0x88>
    4c8c:	88 0f       	add	r24, r24
    4c8e:	99 1f       	adc	r25, r25
    4c90:	0a 94       	dec	r0
    4c92:	e2 f7       	brpl	.-8      	; 0x4c8c <HardwareSerial::end()+0x84>
    4c94:	80 95       	com	r24
    4c96:	84 23       	and	r24, r20
    4c98:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    4c9a:	56 96       	adiw	r26, 0x16	; 22
    4c9c:	ed 91       	ld	r30, X+
    4c9e:	fc 91       	ld	r31, X
    4ca0:	57 97       	sbiw	r26, 0x17	; 23
    4ca2:	80 81       	ld	r24, Z
    4ca4:	5f 96       	adiw	r26, 0x1f	; 31
    4ca6:	0c 90       	ld	r0, X
    4ca8:	5f 97       	sbiw	r26, 0x1f	; 31
    4caa:	02 c0       	rjmp	.+4      	; 0x4cb0 <HardwareSerial::end()+0xa8>
    4cac:	22 0f       	add	r18, r18
    4cae:	33 1f       	adc	r19, r19
    4cb0:	0a 94       	dec	r0
    4cb2:	e2 f7       	brpl	.-8      	; 0x4cac <HardwareSerial::end()+0xa4>
    4cb4:	20 95       	com	r18
    4cb6:	28 23       	and	r18, r24
    4cb8:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4cba:	1c 96       	adiw	r26, 0x0c	; 12
    4cbc:	ed 91       	ld	r30, X+
    4cbe:	fc 91       	ld	r31, X
    4cc0:	1d 97       	sbiw	r26, 0x0d	; 13
    4cc2:	ee 5b       	subi	r30, 0xBE	; 190
    4cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc6:	80 81       	ld	r24, Z
    4cc8:	91 81       	ldd	r25, Z+1	; 0x01
    4cca:	92 93       	st	-Z, r25
    4ccc:	82 93       	st	-Z, r24
}
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	08 95       	ret

00004cd4 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	1c 96       	adiw	r26, 0x0c	; 12
    4cd8:	ed 91       	ld	r30, X+
    4cda:	fc 91       	ld	r31, X
    4cdc:	1d 97       	sbiw	r26, 0x0d	; 13
    4cde:	e0 5c       	subi	r30, 0xC0	; 192
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	21 91       	ld	r18, Z+
    4ce4:	31 91       	ld	r19, Z+
    4ce6:	80 81       	ld	r24, Z
    4ce8:	91 81       	ldd	r25, Z+1	; 0x01
    4cea:	28 1b       	sub	r18, r24
    4cec:	39 0b       	sbc	r19, r25
    4cee:	2f 73       	andi	r18, 0x3F	; 63
    4cf0:	30 70       	andi	r19, 0x00	; 0
}
    4cf2:	c9 01       	movw	r24, r18
    4cf4:	08 95       	ret

00004cf6 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	1c 96       	adiw	r26, 0x0c	; 12
    4cfa:	ed 91       	ld	r30, X+
    4cfc:	fc 91       	ld	r31, X
    4cfe:	1d 97       	sbiw	r26, 0x0d	; 13
    4d00:	e0 5c       	subi	r30, 0xC0	; 192
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	20 81       	ld	r18, Z
    4d06:	31 81       	ldd	r19, Z+1	; 0x01
    4d08:	e0 54       	subi	r30, 0x40	; 64
    4d0a:	f0 40       	sbci	r31, 0x00	; 0
    4d0c:	df 01       	movw	r26, r30
    4d0e:	ae 5b       	subi	r26, 0xBE	; 190
    4d10:	bf 4f       	sbci	r27, 0xFF	; 255
    4d12:	8d 91       	ld	r24, X+
    4d14:	9c 91       	ld	r25, X
    4d16:	11 97       	sbiw	r26, 0x01	; 1
    4d18:	28 17       	cp	r18, r24
    4d1a:	39 07       	cpc	r19, r25
    4d1c:	19 f4       	brne	.+6      	; 0x4d24 <HardwareSerial::peek()+0x2e>
    4d1e:	2f ef       	ldi	r18, 0xFF	; 255
    4d20:	3f ef       	ldi	r19, 0xFF	; 255
    4d22:	07 c0       	rjmp	.+14     	; 0x4d32 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4d24:	8d 91       	ld	r24, X+
    4d26:	9c 91       	ld	r25, X
    4d28:	e8 0f       	add	r30, r24
    4d2a:	f9 1f       	adc	r31, r25
    4d2c:	80 81       	ld	r24, Z
    4d2e:	28 2f       	mov	r18, r24
    4d30:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4d32:	c9 01       	movw	r24, r18
    4d34:	08 95       	ret

00004d36 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4d36:	dc 01       	movw	r26, r24
    4d38:	1c 96       	adiw	r26, 0x0c	; 12
    4d3a:	ed 91       	ld	r30, X+
    4d3c:	fc 91       	ld	r31, X
    4d3e:	1d 97       	sbiw	r26, 0x0d	; 13
    4d40:	e0 5c       	subi	r30, 0xC0	; 192
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	20 81       	ld	r18, Z
    4d46:	31 81       	ldd	r19, Z+1	; 0x01
    4d48:	e0 54       	subi	r30, 0x40	; 64
    4d4a:	f0 40       	sbci	r31, 0x00	; 0
    4d4c:	df 01       	movw	r26, r30
    4d4e:	ae 5b       	subi	r26, 0xBE	; 190
    4d50:	bf 4f       	sbci	r27, 0xFF	; 255
    4d52:	8d 91       	ld	r24, X+
    4d54:	9c 91       	ld	r25, X
    4d56:	11 97       	sbiw	r26, 0x01	; 1
    4d58:	28 17       	cp	r18, r24
    4d5a:	39 07       	cpc	r19, r25
    4d5c:	19 f4       	brne	.+6      	; 0x4d64 <HardwareSerial::read()+0x2e>
    4d5e:	2f ef       	ldi	r18, 0xFF	; 255
    4d60:	3f ef       	ldi	r19, 0xFF	; 255
    4d62:	10 c0       	rjmp	.+32     	; 0x4d84 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4d64:	8d 91       	ld	r24, X+
    4d66:	9c 91       	ld	r25, X
    4d68:	11 97       	sbiw	r26, 0x01	; 1
    4d6a:	e8 0f       	add	r30, r24
    4d6c:	f9 1f       	adc	r31, r25
    4d6e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4d70:	8d 91       	ld	r24, X+
    4d72:	9c 91       	ld	r25, X
    4d74:	11 97       	sbiw	r26, 0x01	; 1
    4d76:	01 96       	adiw	r24, 0x01	; 1
    4d78:	8f 73       	andi	r24, 0x3F	; 63
    4d7a:	90 70       	andi	r25, 0x00	; 0
    4d7c:	11 96       	adiw	r26, 0x01	; 1
    4d7e:	9c 93       	st	X, r25
    4d80:	8e 93       	st	-X, r24
    return c;
    4d82:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4d84:	c9 01       	movw	r24, r18
    4d86:	08 95       	ret

00004d88 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    4d88:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    4d8a:	91 96       	adiw	r26, 0x21	; 33
    4d8c:	8c 91       	ld	r24, X
    4d8e:	91 97       	sbiw	r26, 0x21	; 33
    4d90:	88 23       	and	r24, r24
    4d92:	39 f0       	breq	.+14     	; 0x4da2 <HardwareSerial::flush()+0x1a>
    4d94:	54 96       	adiw	r26, 0x14	; 20
    4d96:	ed 91       	ld	r30, X+
    4d98:	fc 91       	ld	r31, X
    4d9a:	55 97       	sbiw	r26, 0x15	; 21
    4d9c:	80 81       	ld	r24, Z
    4d9e:	86 ff       	sbrs	r24, 6
    4da0:	f9 cf       	rjmp	.-14     	; 0x4d94 <HardwareSerial::flush()+0xc>
  transmitting = false;
    4da2:	91 96       	adiw	r26, 0x21	; 33
    4da4:	1c 92       	st	X, r1
}
    4da6:	08 95       	ret

00004da8 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    4da8:	cf 93       	push	r28
    4daa:	df 93       	push	r29
    4dac:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4dae:	ee 85       	ldd	r30, Y+14	; 0x0e
    4db0:	ff 85       	ldd	r31, Y+15	; 0x0f
    4db2:	e0 5c       	subi	r30, 0xC0	; 192
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	20 81       	ld	r18, Z
    4db8:	31 81       	ldd	r19, Z+1	; 0x01
    4dba:	e0 54       	subi	r30, 0x40	; 64
    4dbc:	f0 40       	sbci	r31, 0x00	; 0
    4dbe:	2f 5f       	subi	r18, 0xFF	; 255
    4dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc2:	2f 73       	andi	r18, 0x3F	; 63
    4dc4:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    4dc6:	df 01       	movw	r26, r30
    4dc8:	ae 5b       	subi	r26, 0xBE	; 190
    4dca:	bf 4f       	sbci	r27, 0xFF	; 255
    4dcc:	8d 91       	ld	r24, X+
    4dce:	9c 91       	ld	r25, X
    4dd0:	11 97       	sbiw	r26, 0x01	; 1
    4dd2:	28 17       	cp	r18, r24
    4dd4:	39 07       	cpc	r19, r25
    4dd6:	d1 f3       	breq	.-12     	; 0x4dcc <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    4dd8:	e0 5c       	subi	r30, 0xC0	; 192
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	80 81       	ld	r24, Z
    4dde:	91 81       	ldd	r25, Z+1	; 0x01
    4de0:	e0 54       	subi	r30, 0x40	; 64
    4de2:	f0 40       	sbci	r31, 0x00	; 0
    4de4:	e8 0f       	add	r30, r24
    4de6:	f9 1f       	adc	r31, r25
    4de8:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    4dea:	ee 85       	ldd	r30, Y+14	; 0x0e
    4dec:	ff 85       	ldd	r31, Y+15	; 0x0f
    4dee:	e0 5c       	subi	r30, 0xC0	; 192
    4df0:	ff 4f       	sbci	r31, 0xFF	; 255
    4df2:	31 83       	std	Z+1, r19	; 0x01
    4df4:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    4df6:	ee 89       	ldd	r30, Y+22	; 0x16
    4df8:	ff 89       	ldd	r31, Y+23	; 0x17
    4dfa:	20 81       	ld	r18, Z
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	0f 8c       	ldd	r0, Y+31	; 0x1f
    4e02:	02 c0       	rjmp	.+4      	; 0x4e08 <HardwareSerial::write(unsigned char)+0x60>
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	0a 94       	dec	r0
    4e0a:	e2 f7       	brpl	.-8      	; 0x4e04 <HardwareSerial::write(unsigned char)+0x5c>
    4e0c:	28 2b       	or	r18, r24
    4e0e:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    4e14:	ec 89       	ldd	r30, Y+20	; 0x14
    4e16:	fd 89       	ldd	r31, Y+21	; 0x15
    4e18:	80 81       	ld	r24, Z
    4e1a:	80 64       	ori	r24, 0x40	; 64
    4e1c:	80 83       	st	Z, r24
  
  return 1;
}
    4e1e:	81 e0       	ldi	r24, 0x01	; 1
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
    4e26:	08 95       	ret

00004e28 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    4e28:	10 92 0a 03 	sts	0x030A, r1
    4e2c:	10 92 09 03 	sts	0x0309, r1
    4e30:	88 ee       	ldi	r24, 0xE8	; 232
    4e32:	93 e0       	ldi	r25, 0x03	; 3
    4e34:	a0 e0       	ldi	r26, 0x00	; 0
    4e36:	b0 e0       	ldi	r27, 0x00	; 0
    4e38:	80 93 0b 03 	sts	0x030B, r24
    4e3c:	90 93 0c 03 	sts	0x030C, r25
    4e40:	a0 93 0d 03 	sts	0x030D, r26
    4e44:	b0 93 0e 03 	sts	0x030E, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4e48:	89 e1       	ldi	r24, 0x19	; 25
    4e4a:	91 e0       	ldi	r25, 0x01	; 1
    4e4c:	90 93 08 03 	sts	0x0308, r25
    4e50:	80 93 07 03 	sts	0x0307, r24
{
  _rx_buffer = rx_buffer;
    4e54:	8f e7       	ldi	r24, 0x7F	; 127
    4e56:	92 e0       	ldi	r25, 0x02	; 2
    4e58:	90 93 14 03 	sts	0x0314, r25
    4e5c:	80 93 13 03 	sts	0x0313, r24
  _tx_buffer = tx_buffer;
    4e60:	83 ec       	ldi	r24, 0xC3	; 195
    4e62:	92 e0       	ldi	r25, 0x02	; 2
    4e64:	90 93 16 03 	sts	0x0316, r25
    4e68:	80 93 15 03 	sts	0x0315, r24
  _ubrrh = ubrrh;
    4e6c:	85 ec       	ldi	r24, 0xC5	; 197
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	90 93 18 03 	sts	0x0318, r25
    4e74:	80 93 17 03 	sts	0x0317, r24
  _ubrrl = ubrrl;
    4e78:	84 ec       	ldi	r24, 0xC4	; 196
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	90 93 1a 03 	sts	0x031A, r25
    4e80:	80 93 19 03 	sts	0x0319, r24
  _ucsra = ucsra;
    4e84:	80 ec       	ldi	r24, 0xC0	; 192
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	90 93 1c 03 	sts	0x031C, r25
    4e8c:	80 93 1b 03 	sts	0x031B, r24
  _ucsrb = ucsrb;
    4e90:	81 ec       	ldi	r24, 0xC1	; 193
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	90 93 1e 03 	sts	0x031E, r25
    4e98:	80 93 1d 03 	sts	0x031D, r24
  _ucsrc = ucsrc;
    4e9c:	82 ec       	ldi	r24, 0xC2	; 194
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	90 93 20 03 	sts	0x0320, r25
    4ea4:	80 93 1f 03 	sts	0x031F, r24
  _udr = udr;
    4ea8:	86 ec       	ldi	r24, 0xC6	; 198
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	90 93 22 03 	sts	0x0322, r25
    4eb0:	80 93 21 03 	sts	0x0321, r24
  _rxen = rxen;
    4eb4:	84 e0       	ldi	r24, 0x04	; 4
    4eb6:	80 93 23 03 	sts	0x0323, r24
  _txen = txen;
    4eba:	83 e0       	ldi	r24, 0x03	; 3
    4ebc:	80 93 24 03 	sts	0x0324, r24
  _rxcie = rxcie;
    4ec0:	87 e0       	ldi	r24, 0x07	; 7
    4ec2:	80 93 25 03 	sts	0x0325, r24
  _udrie = udrie;
    4ec6:	85 e0       	ldi	r24, 0x05	; 5
    4ec8:	80 93 26 03 	sts	0x0326, r24
  _u2x = u2x;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	80 93 27 03 	sts	0x0327, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4ed2:	08 95       	ret

00004ed4 <main>:
#include <Arduino.h>

int main(void)
    4ed4:	cf 93       	push	r28
    4ed6:	df 93       	push	r29
{
	init();
    4ed8:	0e 94 6e 29 	call	0x52dc	; 0x52dc <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4edc:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4ee0:	c8 e3       	ldi	r28, 0x38	; 56
    4ee2:	d5 e2       	ldi	r29, 0x25	; 37
#endif
	
	setup();
    
	for (;;) {
		loop();
    4ee4:	0e 94 c2 1c 	call	0x3984	; 0x3984 <loop>
		if (serialEventRun) serialEventRun();
    4ee8:	20 97       	sbiw	r28, 0x00	; 0
    4eea:	e1 f3       	breq	.-8      	; 0x4ee4 <main+0x10>
    4eec:	0e 94 38 25 	call	0x4a70	; 0x4a70 <serialEventRun()>
    4ef0:	f9 cf       	rjmp	.-14     	; 0x4ee4 <main+0x10>

00004ef2 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    4ef2:	cf 92       	push	r12
    4ef4:	df 92       	push	r13
    4ef6:	ef 92       	push	r14
    4ef8:	ff 92       	push	r15
    4efa:	0f 93       	push	r16
    4efc:	1f 93       	push	r17
    4efe:	cf 93       	push	r28
    4f00:	df 93       	push	r29
    4f02:	7c 01       	movw	r14, r24
    4f04:	6b 01       	movw	r12, r22
    4f06:	8a 01       	movw	r16, r20
    4f08:	c0 e0       	ldi	r28, 0x00	; 0
    4f0a:	d0 e0       	ldi	r29, 0x00	; 0
    4f0c:	0f c0       	rjmp	.+30     	; 0x4f2c <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    4f0e:	d6 01       	movw	r26, r12
    4f10:	6d 91       	ld	r22, X+
    4f12:	6d 01       	movw	r12, r26
    4f14:	d7 01       	movw	r26, r14
    4f16:	ed 91       	ld	r30, X+
    4f18:	fc 91       	ld	r31, X
    4f1a:	01 90       	ld	r0, Z+
    4f1c:	f0 81       	ld	r31, Z
    4f1e:	e0 2d       	mov	r30, r0
    4f20:	c7 01       	movw	r24, r14
    4f22:	09 95       	icall
    4f24:	c8 0f       	add	r28, r24
    4f26:	d9 1f       	adc	r29, r25
    4f28:	01 50       	subi	r16, 0x01	; 1
    4f2a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4f2c:	01 15       	cp	r16, r1
    4f2e:	11 05       	cpc	r17, r1
    4f30:	71 f7       	brne	.-36     	; 0x4f0e <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    4f32:	ce 01       	movw	r24, r28
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	1f 91       	pop	r17
    4f3a:	0f 91       	pop	r16
    4f3c:	ff 90       	pop	r15
    4f3e:	ef 90       	pop	r14
    4f40:	df 90       	pop	r13
    4f42:	cf 90       	pop	r12
    4f44:	08 95       	ret

00004f46 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    4f46:	ef 92       	push	r14
    4f48:	ff 92       	push	r15
    4f4a:	0f 93       	push	r16
    4f4c:	1f 93       	push	r17
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    4f54:	8b 01       	movw	r16, r22
    4f56:	c0 e0       	ldi	r28, 0x00	; 0
    4f58:	d0 e0       	ldi	r29, 0x00	; 0
    4f5a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    4f5c:	0f 5f       	subi	r16, 0xFF	; 255
    4f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f60:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    4f62:	66 23       	and	r22, r22
    4f64:	59 f0       	breq	.+22     	; 0x4f7c <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    4f66:	d7 01       	movw	r26, r14
    4f68:	ed 91       	ld	r30, X+
    4f6a:	fc 91       	ld	r31, X
    4f6c:	01 90       	ld	r0, Z+
    4f6e:	f0 81       	ld	r31, Z
    4f70:	e0 2d       	mov	r30, r0
    4f72:	c7 01       	movw	r24, r14
    4f74:	09 95       	icall
    4f76:	c8 0f       	add	r28, r24
    4f78:	d9 1f       	adc	r29, r25
    4f7a:	ef cf       	rjmp	.-34     	; 0x4f5a <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    4f7c:	ce 01       	movw	r24, r28
    4f7e:	df 91       	pop	r29
    4f80:	cf 91       	pop	r28
    4f82:	1f 91       	pop	r17
    4f84:	0f 91       	pop	r16
    4f86:	ff 90       	pop	r15
    4f88:	ef 90       	pop	r14
    4f8a:	08 95       	ret

00004f8c <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    4f8c:	dc 01       	movw	r26, r24
{
  return write(c);
    4f8e:	ed 91       	ld	r30, X+
    4f90:	fc 91       	ld	r31, X
    4f92:	01 90       	ld	r0, Z+
    4f94:	f0 81       	ld	r31, Z
    4f96:	e0 2d       	mov	r30, r0
    4f98:	09 95       	icall
}
    4f9a:	08 95       	ret

00004f9c <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    4f9c:	ef 92       	push	r14
    4f9e:	ff 92       	push	r15
    4fa0:	0f 93       	push	r16
    4fa2:	1f 93       	push	r17
    4fa4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	ed 91       	ld	r30, X+
    4faa:	fc 91       	ld	r31, X
    4fac:	01 90       	ld	r0, Z+
    4fae:	f0 81       	ld	r31, Z
    4fb0:	e0 2d       	mov	r30, r0
    4fb2:	6d e0       	ldi	r22, 0x0D	; 13
    4fb4:	09 95       	icall
    4fb6:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    4fb8:	d8 01       	movw	r26, r16
    4fba:	ed 91       	ld	r30, X+
    4fbc:	fc 91       	ld	r31, X
    4fbe:	01 90       	ld	r0, Z+
    4fc0:	f0 81       	ld	r31, Z
    4fc2:	e0 2d       	mov	r30, r0
    4fc4:	c8 01       	movw	r24, r16
    4fc6:	6a e0       	ldi	r22, 0x0A	; 10
    4fc8:	09 95       	icall
    4fca:	9c 01       	movw	r18, r24
    4fcc:	2e 0d       	add	r18, r14
    4fce:	3f 1d       	adc	r19, r15
    4fd0:	c9 01       	movw	r24, r18
    4fd2:	1f 91       	pop	r17
    4fd4:	0f 91       	pop	r16
    4fd6:	ff 90       	pop	r15
    4fd8:	ef 90       	pop	r14
    4fda:	08 95       	ret

00004fdc <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    4fdc:	ef 92       	push	r14
    4fde:	ff 92       	push	r15
    4fe0:	0f 93       	push	r16
    4fe2:	1f 93       	push	r17
    4fe4:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    4fe6:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <Print::print(__FlashStringHelper const*)>
    4fea:	8c 01       	movw	r16, r24
  n += println();
    4fec:	c7 01       	movw	r24, r14
    4fee:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
    4ff2:	9c 01       	movw	r18, r24
    4ff4:	20 0f       	add	r18, r16
    4ff6:	31 1f       	adc	r19, r17
  return n;
}
    4ff8:	c9 01       	movw	r24, r18
    4ffa:	1f 91       	pop	r17
    4ffc:	0f 91       	pop	r16
    4ffe:	ff 90       	pop	r15
    5000:	ef 90       	pop	r14
    5002:	08 95       	ret

00005004 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    5004:	cf 93       	push	r28
    5006:	df 93       	push	r29
    5008:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    500a:	61 15       	cp	r22, r1
    500c:	71 05       	cpc	r23, r1
    500e:	19 f4       	brne	.+6      	; 0x5016 <Print::write(char const*)+0x12>
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	0f c0       	rjmp	.+30     	; 0x5034 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    5016:	db 01       	movw	r26, r22
    5018:	0d 90       	ld	r0, X+
    501a:	00 20       	and	r0, r0
    501c:	e9 f7       	brne	.-6      	; 0x5018 <Print::write(char const*)+0x14>
    501e:	11 97       	sbiw	r26, 0x01	; 1
    5020:	a6 1b       	sub	r26, r22
    5022:	b7 0b       	sbc	r27, r23
    5024:	e8 81       	ld	r30, Y
    5026:	f9 81       	ldd	r31, Y+1	; 0x01
    5028:	02 80       	ldd	r0, Z+2	; 0x02
    502a:	f3 81       	ldd	r31, Z+3	; 0x03
    502c:	e0 2d       	mov	r30, r0
    502e:	ad 01       	movw	r20, r26
    5030:	09 95       	icall
    5032:	9c 01       	movw	r18, r24
    }
    5034:	c9 01       	movw	r24, r18
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	08 95       	ret

0000503c <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    503c:	4f 92       	push	r4
    503e:	5f 92       	push	r5
    5040:	7f 92       	push	r7
    5042:	8f 92       	push	r8
    5044:	9f 92       	push	r9
    5046:	af 92       	push	r10
    5048:	bf 92       	push	r11
    504a:	cf 92       	push	r12
    504c:	df 92       	push	r13
    504e:	ef 92       	push	r14
    5050:	ff 92       	push	r15
    5052:	0f 93       	push	r16
    5054:	1f 93       	push	r17
    5056:	df 93       	push	r29
    5058:	cf 93       	push	r28
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62
    505e:	a1 97       	sbiw	r28, 0x21	; 33
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	2c 01       	movw	r4, r24
    506c:	74 2e       	mov	r7, r20
    506e:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5070:	22 30       	cpi	r18, 0x02	; 2
    5072:	08 f4       	brcc	.+2      	; 0x5076 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    5074:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    5076:	19 a2       	std	Y+33, r1	; 0x21
    5078:	31 e2       	ldi	r19, 0x21	; 33
    507a:	c3 2e       	mov	r12, r19
    507c:	d1 2c       	mov	r13, r1
    507e:	cc 0e       	add	r12, r28
    5080:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    5082:	82 2e       	mov	r8, r18
    5084:	99 24       	eor	r9, r9
    5086:	aa 24       	eor	r10, r10
    5088:	bb 24       	eor	r11, r11
    508a:	67 2d       	mov	r22, r7
    508c:	75 2f       	mov	r23, r21
    508e:	a5 01       	movw	r20, r10
    5090:	94 01       	movw	r18, r8
    5092:	0e 94 c5 2a 	call	0x558a	; 0x558a <__udivmodsi4>
    5096:	79 01       	movw	r14, r18
    5098:	8a 01       	movw	r16, r20
    char c = m - base * n;
    509a:	c8 01       	movw	r24, r16
    509c:	b7 01       	movw	r22, r14
    509e:	a5 01       	movw	r20, r10
    50a0:	94 01       	movw	r18, r8
    50a2:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <__mulsi3>
    50a6:	47 2d       	mov	r20, r7
    50a8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    50aa:	08 94       	sec
    50ac:	c1 08       	sbc	r12, r1
    50ae:	d1 08       	sbc	r13, r1
    50b0:	4a 30       	cpi	r20, 0x0A	; 10
    50b2:	14 f4       	brge	.+4      	; 0x50b8 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    50b4:	40 5d       	subi	r20, 0xD0	; 208
    50b6:	01 c0       	rjmp	.+2      	; 0x50ba <Print::printNumber(unsigned long, unsigned char)+0x7e>
    50b8:	49 5c       	subi	r20, 0xC9	; 201
    50ba:	f6 01       	movw	r30, r12
    50bc:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    50be:	e1 14       	cp	r14, r1
    50c0:	f1 04       	cpc	r15, r1
    50c2:	01 05       	cpc	r16, r1
    50c4:	11 05       	cpc	r17, r1
    50c6:	21 f0       	breq	.+8      	; 0x50d0 <Print::printNumber(unsigned long, unsigned char)+0x94>
    50c8:	7e 2c       	mov	r7, r14
    50ca:	5f 2d       	mov	r21, r15
    50cc:	c8 01       	movw	r24, r16
    50ce:	dd cf       	rjmp	.-70     	; 0x508a <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    50d0:	c2 01       	movw	r24, r4
    50d2:	b6 01       	movw	r22, r12
    50d4:	0e 94 02 28 	call	0x5004	; 0x5004 <Print::write(char const*)>
}
    50d8:	a1 96       	adiw	r28, 0x21	; 33
    50da:	0f b6       	in	r0, 0x3f	; 63
    50dc:	f8 94       	cli
    50de:	de bf       	out	0x3e, r29	; 62
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	cd bf       	out	0x3d, r28	; 61
    50e4:	cf 91       	pop	r28
    50e6:	df 91       	pop	r29
    50e8:	1f 91       	pop	r17
    50ea:	0f 91       	pop	r16
    50ec:	ff 90       	pop	r15
    50ee:	ef 90       	pop	r14
    50f0:	df 90       	pop	r13
    50f2:	cf 90       	pop	r12
    50f4:	bf 90       	pop	r11
    50f6:	af 90       	pop	r10
    50f8:	9f 90       	pop	r9
    50fa:	8f 90       	pop	r8
    50fc:	7f 90       	pop	r7
    50fe:	5f 90       	pop	r5
    5100:	4f 90       	pop	r4
    5102:	08 95       	ret

00005104 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    5104:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    5106:	21 15       	cp	r18, r1
    5108:	31 05       	cpc	r19, r1
    510a:	41 f4       	brne	.+16     	; 0x511c <Print::print(unsigned long, int)+0x18>
    510c:	ed 91       	ld	r30, X+
    510e:	fc 91       	ld	r31, X
    5110:	01 90       	ld	r0, Z+
    5112:	f0 81       	ld	r31, Z
    5114:	e0 2d       	mov	r30, r0
    5116:	64 2f       	mov	r22, r20
    5118:	09 95       	icall
    511a:	08 95       	ret
  else return printNumber(n, base);
    511c:	0e 94 1e 28 	call	0x503c	; 0x503c <Print::printNumber(unsigned long, unsigned char)>
}
    5120:	08 95       	ret

00005122 <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    5122:	ef 92       	push	r14
    5124:	ff 92       	push	r15
    5126:	0f 93       	push	r16
    5128:	1f 93       	push	r17
    512a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    512c:	7b 01       	movw	r14, r22
    512e:	00 e0       	ldi	r16, 0x00	; 0
    5130:	10 e0       	ldi	r17, 0x00	; 0
    5132:	b8 01       	movw	r22, r16
    5134:	a7 01       	movw	r20, r14
    5136:	0e 94 82 28 	call	0x5104	; 0x5104 <Print::print(unsigned long, int)>
}
    513a:	1f 91       	pop	r17
    513c:	0f 91       	pop	r16
    513e:	ff 90       	pop	r15
    5140:	ef 90       	pop	r14
    5142:	08 95       	ret

00005144 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    5144:	ef 92       	push	r14
    5146:	ff 92       	push	r15
    5148:	0f 93       	push	r16
    514a:	1f 93       	push	r17
    514c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    514e:	e6 2e       	mov	r14, r22
    5150:	ff 24       	eor	r15, r15
    5152:	00 e0       	ldi	r16, 0x00	; 0
    5154:	10 e0       	ldi	r17, 0x00	; 0
    5156:	b8 01       	movw	r22, r16
    5158:	a7 01       	movw	r20, r14
    515a:	0e 94 82 28 	call	0x5104	; 0x5104 <Print::print(unsigned long, int)>
}
    515e:	1f 91       	pop	r17
    5160:	0f 91       	pop	r16
    5162:	ff 90       	pop	r15
    5164:	ef 90       	pop	r14
    5166:	08 95       	ret

00005168 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    5168:	cf 92       	push	r12
    516a:	df 92       	push	r13
    516c:	ef 92       	push	r14
    516e:	ff 92       	push	r15
    5170:	0f 93       	push	r16
    5172:	1f 93       	push	r17
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
    5178:	ec 01       	movw	r28, r24
    517a:	6a 01       	movw	r12, r20
    517c:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    517e:	21 15       	cp	r18, r1
    5180:	31 05       	cpc	r19, r1
    5182:	41 f4       	brne	.+16     	; 0x5194 <Print::print(long, int)+0x2c>
    return write(n);
    5184:	e8 81       	ld	r30, Y
    5186:	f9 81       	ldd	r31, Y+1	; 0x01
    5188:	01 90       	ld	r0, Z+
    518a:	f0 81       	ld	r31, Z
    518c:	e0 2d       	mov	r30, r0
    518e:	64 2f       	mov	r22, r20
    5190:	09 95       	icall
    5192:	1f c0       	rjmp	.+62     	; 0x51d2 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    5194:	2a 30       	cpi	r18, 0x0A	; 10
    5196:	31 05       	cpc	r19, r1
    5198:	d1 f4       	brne	.+52     	; 0x51ce <Print::print(long, int)+0x66>
    if (n < 0) {
    519a:	77 ff       	sbrs	r23, 7
    519c:	17 c0       	rjmp	.+46     	; 0x51cc <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    519e:	e8 81       	ld	r30, Y
    51a0:	f9 81       	ldd	r31, Y+1	; 0x01
    51a2:	01 90       	ld	r0, Z+
    51a4:	f0 81       	ld	r31, Z
    51a6:	e0 2d       	mov	r30, r0
    51a8:	6d e2       	ldi	r22, 0x2D	; 45
    51aa:	09 95       	icall
    51ac:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    51ae:	44 27       	eor	r20, r20
    51b0:	55 27       	eor	r21, r21
    51b2:	ba 01       	movw	r22, r20
    51b4:	4c 19       	sub	r20, r12
    51b6:	5d 09       	sbc	r21, r13
    51b8:	6e 09       	sbc	r22, r14
    51ba:	7f 09       	sbc	r23, r15
    51bc:	ce 01       	movw	r24, r28
    51be:	2a e0       	ldi	r18, 0x0A	; 10
    51c0:	0e 94 1e 28 	call	0x503c	; 0x503c <Print::printNumber(unsigned long, unsigned char)>
    51c4:	98 01       	movw	r18, r16
    51c6:	28 0f       	add	r18, r24
    51c8:	39 1f       	adc	r19, r25
    51ca:	04 c0       	rjmp	.+8      	; 0x51d4 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    51cc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    51ce:	0e 94 1e 28 	call	0x503c	; 0x503c <Print::printNumber(unsigned long, unsigned char)>
    51d2:	9c 01       	movw	r18, r24
  }
}
    51d4:	c9 01       	movw	r24, r18
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	df 90       	pop	r13
    51e4:	cf 90       	pop	r12
    51e6:	08 95       	ret

000051e8 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    51e8:	ef 92       	push	r14
    51ea:	ff 92       	push	r15
    51ec:	0f 93       	push	r16
    51ee:	1f 93       	push	r17
    51f0:	7b 01       	movw	r14, r22
    51f2:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    51f4:	00 27       	eor	r16, r16
    51f6:	f7 fc       	sbrc	r15, 7
    51f8:	00 95       	com	r16
    51fa:	10 2f       	mov	r17, r16
    51fc:	b8 01       	movw	r22, r16
    51fe:	a7 01       	movw	r20, r14
    5200:	0e 94 b4 28 	call	0x5168	; 0x5168 <Print::print(long, int)>
}
    5204:	1f 91       	pop	r17
    5206:	0f 91       	pop	r16
    5208:	ff 90       	pop	r15
    520a:	ef 90       	pop	r14
    520c:	08 95       	ret

0000520e <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    520e:	ef 92       	push	r14
    5210:	ff 92       	push	r15
    5212:	0f 93       	push	r16
    5214:	1f 93       	push	r17
    5216:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    5218:	0e 94 02 28 	call	0x5004	; 0x5004 <Print::write(char const*)>
    521c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    521e:	c7 01       	movw	r24, r14
    5220:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <Print::println()>
    5224:	08 0f       	add	r16, r24
    5226:	19 1f       	adc	r17, r25
  return n;
}
    5228:	c8 01       	movw	r24, r16
    522a:	1f 91       	pop	r17
    522c:	0f 91       	pop	r16
    522e:	ff 90       	pop	r15
    5230:	ef 90       	pop	r14
    5232:	08 95       	ret

00005234 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5234:	1f 92       	push	r1
    5236:	0f 92       	push	r0
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	0f 92       	push	r0
    523c:	11 24       	eor	r1, r1
    523e:	2f 93       	push	r18
    5240:	3f 93       	push	r19
    5242:	4f 93       	push	r20
    5244:	5f 93       	push	r21
    5246:	6f 93       	push	r22
    5248:	7f 93       	push	r23
    524a:	8f 93       	push	r24
    524c:	9f 93       	push	r25
    524e:	af 93       	push	r26
    5250:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5252:	20 91 2d 03 	lds	r18, 0x032D
    5256:	30 91 2e 03 	lds	r19, 0x032E
    525a:	40 91 2f 03 	lds	r20, 0x032F
    525e:	50 91 30 03 	lds	r21, 0x0330
	unsigned char f = timer0_fract;
    5262:	70 91 31 03 	lds	r23, 0x0331

	m += MILLIS_INC;
    5266:	da 01       	movw	r26, r20
    5268:	c9 01       	movw	r24, r18
    526a:	40 96       	adiw	r24, 0x10	; 16
    526c:	a1 1d       	adc	r26, r1
    526e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    5270:	67 2f       	mov	r22, r23
    5272:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    5274:	6d 37       	cpi	r22, 0x7D	; 125
    5276:	30 f0       	brcs	.+12     	; 0x5284 <__vector_16+0x50>
		f -= FRACT_MAX;
    5278:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    527a:	da 01       	movw	r26, r20
    527c:	c9 01       	movw	r24, r18
    527e:	41 96       	adiw	r24, 0x11	; 17
    5280:	a1 1d       	adc	r26, r1
    5282:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5284:	60 93 31 03 	sts	0x0331, r22
	timer0_millis = m;
    5288:	80 93 2d 03 	sts	0x032D, r24
    528c:	90 93 2e 03 	sts	0x032E, r25
    5290:	a0 93 2f 03 	sts	0x032F, r26
    5294:	b0 93 30 03 	sts	0x0330, r27
	timer0_overflow_count++;
    5298:	80 91 29 03 	lds	r24, 0x0329
    529c:	90 91 2a 03 	lds	r25, 0x032A
    52a0:	a0 91 2b 03 	lds	r26, 0x032B
    52a4:	b0 91 2c 03 	lds	r27, 0x032C
    52a8:	01 96       	adiw	r24, 0x01	; 1
    52aa:	a1 1d       	adc	r26, r1
    52ac:	b1 1d       	adc	r27, r1
    52ae:	80 93 29 03 	sts	0x0329, r24
    52b2:	90 93 2a 03 	sts	0x032A, r25
    52b6:	a0 93 2b 03 	sts	0x032B, r26
    52ba:	b0 93 2c 03 	sts	0x032C, r27
}
    52be:	bf 91       	pop	r27
    52c0:	af 91       	pop	r26
    52c2:	9f 91       	pop	r25
    52c4:	8f 91       	pop	r24
    52c6:	7f 91       	pop	r23
    52c8:	6f 91       	pop	r22
    52ca:	5f 91       	pop	r21
    52cc:	4f 91       	pop	r20
    52ce:	3f 91       	pop	r19
    52d0:	2f 91       	pop	r18
    52d2:	0f 90       	pop	r0
    52d4:	0f be       	out	0x3f, r0	; 63
    52d6:	0f 90       	pop	r0
    52d8:	1f 90       	pop	r1
    52da:	18 95       	reti

000052dc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    52dc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    52de:	84 b5       	in	r24, 0x24	; 36
    52e0:	82 60       	ori	r24, 0x02	; 2
    52e2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    52e4:	84 b5       	in	r24, 0x24	; 36
    52e6:	81 60       	ori	r24, 0x01	; 1
    52e8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    52ea:	85 b5       	in	r24, 0x25	; 37
    52ec:	82 60       	ori	r24, 0x02	; 2
    52ee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    52f0:	85 b5       	in	r24, 0x25	; 37
    52f2:	81 60       	ori	r24, 0x01	; 1
    52f4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    52f6:	ee e6       	ldi	r30, 0x6E	; 110
    52f8:	f0 e0       	ldi	r31, 0x00	; 0
    52fa:	80 81       	ld	r24, Z
    52fc:	81 60       	ori	r24, 0x01	; 1
    52fe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5300:	e1 e8       	ldi	r30, 0x81	; 129
    5302:	f0 e0       	ldi	r31, 0x00	; 0
    5304:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5306:	80 81       	ld	r24, Z
    5308:	82 60       	ori	r24, 0x02	; 2
    530a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    530c:	e0 e8       	ldi	r30, 0x80	; 128
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	80 81       	ld	r24, Z
    5312:	81 60       	ori	r24, 0x01	; 1
    5314:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5316:	e1 eb       	ldi	r30, 0xB1	; 177
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	80 81       	ld	r24, Z
    531c:	84 60       	ori	r24, 0x04	; 4
    531e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5320:	e0 eb       	ldi	r30, 0xB0	; 176
    5322:	f0 e0       	ldi	r31, 0x00	; 0
    5324:	80 81       	ld	r24, Z
    5326:	81 60       	ori	r24, 0x01	; 1
    5328:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    532a:	ea e7       	ldi	r30, 0x7A	; 122
    532c:	f0 e0       	ldi	r31, 0x00	; 0
    532e:	80 81       	ld	r24, Z
    5330:	84 60       	ori	r24, 0x04	; 4
    5332:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    5334:	80 81       	ld	r24, Z
    5336:	82 60       	ori	r24, 0x02	; 2
    5338:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    533a:	80 81       	ld	r24, Z
    533c:	81 60       	ori	r24, 0x01	; 1
    533e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5340:	80 81       	ld	r24, Z
    5342:	80 68       	ori	r24, 0x80	; 128
    5344:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5346:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    534a:	08 95       	ret

0000534c <__fixunssfsi>:
    534c:	b3 d0       	rcall	.+358    	; 0x54b4 <__fp_splitA>
    534e:	88 f0       	brcs	.+34     	; 0x5372 <__fixunssfsi+0x26>
    5350:	9f 57       	subi	r25, 0x7F	; 127
    5352:	90 f0       	brcs	.+36     	; 0x5378 <__fixunssfsi+0x2c>
    5354:	b9 2f       	mov	r27, r25
    5356:	99 27       	eor	r25, r25
    5358:	b7 51       	subi	r27, 0x17	; 23
    535a:	a0 f0       	brcs	.+40     	; 0x5384 <__fixunssfsi+0x38>
    535c:	d1 f0       	breq	.+52     	; 0x5392 <__fixunssfsi+0x46>
    535e:	66 0f       	add	r22, r22
    5360:	77 1f       	adc	r23, r23
    5362:	88 1f       	adc	r24, r24
    5364:	99 1f       	adc	r25, r25
    5366:	1a f0       	brmi	.+6      	; 0x536e <__fixunssfsi+0x22>
    5368:	ba 95       	dec	r27
    536a:	c9 f7       	brne	.-14     	; 0x535e <__fixunssfsi+0x12>
    536c:	12 c0       	rjmp	.+36     	; 0x5392 <__fixunssfsi+0x46>
    536e:	b1 30       	cpi	r27, 0x01	; 1
    5370:	81 f0       	breq	.+32     	; 0x5392 <__fixunssfsi+0x46>
    5372:	ba d0       	rcall	.+372    	; 0x54e8 <__fp_zero>
    5374:	b1 e0       	ldi	r27, 0x01	; 1
    5376:	08 95       	ret
    5378:	b7 c0       	rjmp	.+366    	; 0x54e8 <__fp_zero>
    537a:	67 2f       	mov	r22, r23
    537c:	78 2f       	mov	r23, r24
    537e:	88 27       	eor	r24, r24
    5380:	b8 5f       	subi	r27, 0xF8	; 248
    5382:	39 f0       	breq	.+14     	; 0x5392 <__fixunssfsi+0x46>
    5384:	b9 3f       	cpi	r27, 0xF9	; 249
    5386:	cc f3       	brlt	.-14     	; 0x537a <__fixunssfsi+0x2e>
    5388:	86 95       	lsr	r24
    538a:	77 95       	ror	r23
    538c:	67 95       	ror	r22
    538e:	b3 95       	inc	r27
    5390:	d9 f7       	brne	.-10     	; 0x5388 <__fixunssfsi+0x3c>
    5392:	3e f4       	brtc	.+14     	; 0x53a2 <__fixunssfsi+0x56>
    5394:	90 95       	com	r25
    5396:	80 95       	com	r24
    5398:	70 95       	com	r23
    539a:	61 95       	neg	r22
    539c:	7f 4f       	sbci	r23, 0xFF	; 255
    539e:	8f 4f       	sbci	r24, 0xFF	; 255
    53a0:	9f 4f       	sbci	r25, 0xFF	; 255
    53a2:	08 95       	ret

000053a4 <__floatunsisf>:
    53a4:	e8 94       	clt
    53a6:	09 c0       	rjmp	.+18     	; 0x53ba <__floatsisf+0x12>

000053a8 <__floatsisf>:
    53a8:	97 fb       	bst	r25, 7
    53aa:	3e f4       	brtc	.+14     	; 0x53ba <__floatsisf+0x12>
    53ac:	90 95       	com	r25
    53ae:	80 95       	com	r24
    53b0:	70 95       	com	r23
    53b2:	61 95       	neg	r22
    53b4:	7f 4f       	sbci	r23, 0xFF	; 255
    53b6:	8f 4f       	sbci	r24, 0xFF	; 255
    53b8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ba:	99 23       	and	r25, r25
    53bc:	a9 f0       	breq	.+42     	; 0x53e8 <__floatsisf+0x40>
    53be:	f9 2f       	mov	r31, r25
    53c0:	96 e9       	ldi	r25, 0x96	; 150
    53c2:	bb 27       	eor	r27, r27
    53c4:	93 95       	inc	r25
    53c6:	f6 95       	lsr	r31
    53c8:	87 95       	ror	r24
    53ca:	77 95       	ror	r23
    53cc:	67 95       	ror	r22
    53ce:	b7 95       	ror	r27
    53d0:	f1 11       	cpse	r31, r1
    53d2:	f8 cf       	rjmp	.-16     	; 0x53c4 <__floatsisf+0x1c>
    53d4:	fa f4       	brpl	.+62     	; 0x5414 <__floatsisf+0x6c>
    53d6:	bb 0f       	add	r27, r27
    53d8:	11 f4       	brne	.+4      	; 0x53de <__floatsisf+0x36>
    53da:	60 ff       	sbrs	r22, 0
    53dc:	1b c0       	rjmp	.+54     	; 0x5414 <__floatsisf+0x6c>
    53de:	6f 5f       	subi	r22, 0xFF	; 255
    53e0:	7f 4f       	sbci	r23, 0xFF	; 255
    53e2:	8f 4f       	sbci	r24, 0xFF	; 255
    53e4:	9f 4f       	sbci	r25, 0xFF	; 255
    53e6:	16 c0       	rjmp	.+44     	; 0x5414 <__floatsisf+0x6c>
    53e8:	88 23       	and	r24, r24
    53ea:	11 f0       	breq	.+4      	; 0x53f0 <__floatsisf+0x48>
    53ec:	96 e9       	ldi	r25, 0x96	; 150
    53ee:	11 c0       	rjmp	.+34     	; 0x5412 <__floatsisf+0x6a>
    53f0:	77 23       	and	r23, r23
    53f2:	21 f0       	breq	.+8      	; 0x53fc <__floatsisf+0x54>
    53f4:	9e e8       	ldi	r25, 0x8E	; 142
    53f6:	87 2f       	mov	r24, r23
    53f8:	76 2f       	mov	r23, r22
    53fa:	05 c0       	rjmp	.+10     	; 0x5406 <__floatsisf+0x5e>
    53fc:	66 23       	and	r22, r22
    53fe:	71 f0       	breq	.+28     	; 0x541c <__floatsisf+0x74>
    5400:	96 e8       	ldi	r25, 0x86	; 134
    5402:	86 2f       	mov	r24, r22
    5404:	70 e0       	ldi	r23, 0x00	; 0
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	2a f0       	brmi	.+10     	; 0x5414 <__floatsisf+0x6c>
    540a:	9a 95       	dec	r25
    540c:	66 0f       	add	r22, r22
    540e:	77 1f       	adc	r23, r23
    5410:	88 1f       	adc	r24, r24
    5412:	da f7       	brpl	.-10     	; 0x540a <__floatsisf+0x62>
    5414:	88 0f       	add	r24, r24
    5416:	96 95       	lsr	r25
    5418:	87 95       	ror	r24
    541a:	97 f9       	bld	r25, 7
    541c:	08 95       	ret

0000541e <fmax>:
    541e:	99 0f       	add	r25, r25
    5420:	bb 0b       	sbc	r27, r27
    5422:	55 0f       	add	r21, r21
    5424:	aa 0b       	sbc	r26, r26
    5426:	e0 e8       	ldi	r30, 0x80	; 128
    5428:	fe ef       	ldi	r31, 0xFE	; 254
    542a:	16 16       	cp	r1, r22
    542c:	17 06       	cpc	r1, r23
    542e:	e8 07       	cpc	r30, r24
    5430:	f9 07       	cpc	r31, r25
    5432:	70 f0       	brcs	.+28     	; 0x5450 <fmax+0x32>
    5434:	12 16       	cp	r1, r18
    5436:	13 06       	cpc	r1, r19
    5438:	e4 07       	cpc	r30, r20
    543a:	f5 07       	cpc	r31, r21
    543c:	60 f0       	brcs	.+24     	; 0x5456 <fmax+0x38>
    543e:	ba 17       	cp	r27, r26
    5440:	3c f0       	brlt	.+14     	; 0x5450 <fmax+0x32>
    5442:	49 f4       	brne	.+18     	; 0x5456 <fmax+0x38>
    5444:	62 17       	cp	r22, r18
    5446:	73 07       	cpc	r23, r19
    5448:	84 07       	cpc	r24, r20
    544a:	95 07       	cpc	r25, r21
    544c:	a7 95       	ror	r26
    544e:	1b f4       	brvc	.+6      	; 0x5456 <fmax+0x38>
    5450:	b9 01       	movw	r22, r18
    5452:	ca 01       	movw	r24, r20
    5454:	ba 2f       	mov	r27, r26
    5456:	b6 95       	lsr	r27
    5458:	97 95       	ror	r25
    545a:	08 95       	ret

0000545c <__fp_cmp>:
    545c:	99 0f       	add	r25, r25
    545e:	00 08       	sbc	r0, r0
    5460:	55 0f       	add	r21, r21
    5462:	aa 0b       	sbc	r26, r26
    5464:	e0 e8       	ldi	r30, 0x80	; 128
    5466:	fe ef       	ldi	r31, 0xFE	; 254
    5468:	16 16       	cp	r1, r22
    546a:	17 06       	cpc	r1, r23
    546c:	e8 07       	cpc	r30, r24
    546e:	f9 07       	cpc	r31, r25
    5470:	c0 f0       	brcs	.+48     	; 0x54a2 <__fp_cmp+0x46>
    5472:	12 16       	cp	r1, r18
    5474:	13 06       	cpc	r1, r19
    5476:	e4 07       	cpc	r30, r20
    5478:	f5 07       	cpc	r31, r21
    547a:	98 f0       	brcs	.+38     	; 0x54a2 <__fp_cmp+0x46>
    547c:	62 1b       	sub	r22, r18
    547e:	73 0b       	sbc	r23, r19
    5480:	84 0b       	sbc	r24, r20
    5482:	95 0b       	sbc	r25, r21
    5484:	39 f4       	brne	.+14     	; 0x5494 <__fp_cmp+0x38>
    5486:	0a 26       	eor	r0, r26
    5488:	61 f0       	breq	.+24     	; 0x54a2 <__fp_cmp+0x46>
    548a:	23 2b       	or	r18, r19
    548c:	24 2b       	or	r18, r20
    548e:	25 2b       	or	r18, r21
    5490:	21 f4       	brne	.+8      	; 0x549a <__fp_cmp+0x3e>
    5492:	08 95       	ret
    5494:	0a 26       	eor	r0, r26
    5496:	09 f4       	brne	.+2      	; 0x549a <__fp_cmp+0x3e>
    5498:	a1 40       	sbci	r26, 0x01	; 1
    549a:	a6 95       	lsr	r26
    549c:	8f ef       	ldi	r24, 0xFF	; 255
    549e:	81 1d       	adc	r24, r1
    54a0:	81 1d       	adc	r24, r1
    54a2:	08 95       	ret

000054a4 <__fp_split3>:
    54a4:	57 fd       	sbrc	r21, 7
    54a6:	90 58       	subi	r25, 0x80	; 128
    54a8:	44 0f       	add	r20, r20
    54aa:	55 1f       	adc	r21, r21
    54ac:	59 f0       	breq	.+22     	; 0x54c4 <__fp_splitA+0x10>
    54ae:	5f 3f       	cpi	r21, 0xFF	; 255
    54b0:	71 f0       	breq	.+28     	; 0x54ce <__fp_splitA+0x1a>
    54b2:	47 95       	ror	r20

000054b4 <__fp_splitA>:
    54b4:	88 0f       	add	r24, r24
    54b6:	97 fb       	bst	r25, 7
    54b8:	99 1f       	adc	r25, r25
    54ba:	61 f0       	breq	.+24     	; 0x54d4 <__fp_splitA+0x20>
    54bc:	9f 3f       	cpi	r25, 0xFF	; 255
    54be:	79 f0       	breq	.+30     	; 0x54de <__fp_splitA+0x2a>
    54c0:	87 95       	ror	r24
    54c2:	08 95       	ret
    54c4:	12 16       	cp	r1, r18
    54c6:	13 06       	cpc	r1, r19
    54c8:	14 06       	cpc	r1, r20
    54ca:	55 1f       	adc	r21, r21
    54cc:	f2 cf       	rjmp	.-28     	; 0x54b2 <__fp_split3+0xe>
    54ce:	46 95       	lsr	r20
    54d0:	f1 df       	rcall	.-30     	; 0x54b4 <__fp_splitA>
    54d2:	08 c0       	rjmp	.+16     	; 0x54e4 <__fp_splitA+0x30>
    54d4:	16 16       	cp	r1, r22
    54d6:	17 06       	cpc	r1, r23
    54d8:	18 06       	cpc	r1, r24
    54da:	99 1f       	adc	r25, r25
    54dc:	f1 cf       	rjmp	.-30     	; 0x54c0 <__fp_splitA+0xc>
    54de:	86 95       	lsr	r24
    54e0:	71 05       	cpc	r23, r1
    54e2:	61 05       	cpc	r22, r1
    54e4:	08 94       	sec
    54e6:	08 95       	ret

000054e8 <__fp_zero>:
    54e8:	e8 94       	clt

000054ea <__fp_szero>:
    54ea:	bb 27       	eor	r27, r27
    54ec:	66 27       	eor	r22, r22
    54ee:	77 27       	eor	r23, r23
    54f0:	cb 01       	movw	r24, r22
    54f2:	97 f9       	bld	r25, 7
    54f4:	08 95       	ret

000054f6 <__gesf2>:
    54f6:	b2 df       	rcall	.-156    	; 0x545c <__fp_cmp>
    54f8:	08 f4       	brcc	.+2      	; 0x54fc <__gesf2+0x6>
    54fa:	8f ef       	ldi	r24, 0xFF	; 255
    54fc:	08 95       	ret

000054fe <__mulsi3>:
    54fe:	62 9f       	mul	r22, r18
    5500:	d0 01       	movw	r26, r0
    5502:	73 9f       	mul	r23, r19
    5504:	f0 01       	movw	r30, r0
    5506:	82 9f       	mul	r24, r18
    5508:	e0 0d       	add	r30, r0
    550a:	f1 1d       	adc	r31, r1
    550c:	64 9f       	mul	r22, r20
    550e:	e0 0d       	add	r30, r0
    5510:	f1 1d       	adc	r31, r1
    5512:	92 9f       	mul	r25, r18
    5514:	f0 0d       	add	r31, r0
    5516:	83 9f       	mul	r24, r19
    5518:	f0 0d       	add	r31, r0
    551a:	74 9f       	mul	r23, r20
    551c:	f0 0d       	add	r31, r0
    551e:	65 9f       	mul	r22, r21
    5520:	f0 0d       	add	r31, r0
    5522:	99 27       	eor	r25, r25
    5524:	72 9f       	mul	r23, r18
    5526:	b0 0d       	add	r27, r0
    5528:	e1 1d       	adc	r30, r1
    552a:	f9 1f       	adc	r31, r25
    552c:	63 9f       	mul	r22, r19
    552e:	b0 0d       	add	r27, r0
    5530:	e1 1d       	adc	r30, r1
    5532:	f9 1f       	adc	r31, r25
    5534:	bd 01       	movw	r22, r26
    5536:	cf 01       	movw	r24, r30
    5538:	11 24       	eor	r1, r1
    553a:	08 95       	ret

0000553c <__udivmodhi4>:
    553c:	aa 1b       	sub	r26, r26
    553e:	bb 1b       	sub	r27, r27
    5540:	51 e1       	ldi	r21, 0x11	; 17
    5542:	07 c0       	rjmp	.+14     	; 0x5552 <__udivmodhi4_ep>

00005544 <__udivmodhi4_loop>:
    5544:	aa 1f       	adc	r26, r26
    5546:	bb 1f       	adc	r27, r27
    5548:	a6 17       	cp	r26, r22
    554a:	b7 07       	cpc	r27, r23
    554c:	10 f0       	brcs	.+4      	; 0x5552 <__udivmodhi4_ep>
    554e:	a6 1b       	sub	r26, r22
    5550:	b7 0b       	sbc	r27, r23

00005552 <__udivmodhi4_ep>:
    5552:	88 1f       	adc	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	5a 95       	dec	r21
    5558:	a9 f7       	brne	.-22     	; 0x5544 <__udivmodhi4_loop>
    555a:	80 95       	com	r24
    555c:	90 95       	com	r25
    555e:	bc 01       	movw	r22, r24
    5560:	cd 01       	movw	r24, r26
    5562:	08 95       	ret

00005564 <__divmodhi4>:
    5564:	97 fb       	bst	r25, 7
    5566:	09 2e       	mov	r0, r25
    5568:	07 26       	eor	r0, r23
    556a:	0a d0       	rcall	.+20     	; 0x5580 <__divmodhi4_neg1>
    556c:	77 fd       	sbrc	r23, 7
    556e:	04 d0       	rcall	.+8      	; 0x5578 <__divmodhi4_neg2>
    5570:	e5 df       	rcall	.-54     	; 0x553c <__udivmodhi4>
    5572:	06 d0       	rcall	.+12     	; 0x5580 <__divmodhi4_neg1>
    5574:	00 20       	and	r0, r0
    5576:	1a f4       	brpl	.+6      	; 0x557e <__divmodhi4_exit>

00005578 <__divmodhi4_neg2>:
    5578:	70 95       	com	r23
    557a:	61 95       	neg	r22
    557c:	7f 4f       	sbci	r23, 0xFF	; 255

0000557e <__divmodhi4_exit>:
    557e:	08 95       	ret

00005580 <__divmodhi4_neg1>:
    5580:	f6 f7       	brtc	.-4      	; 0x557e <__divmodhi4_exit>
    5582:	90 95       	com	r25
    5584:	81 95       	neg	r24
    5586:	9f 4f       	sbci	r25, 0xFF	; 255
    5588:	08 95       	ret

0000558a <__udivmodsi4>:
    558a:	a1 e2       	ldi	r26, 0x21	; 33
    558c:	1a 2e       	mov	r1, r26
    558e:	aa 1b       	sub	r26, r26
    5590:	bb 1b       	sub	r27, r27
    5592:	fd 01       	movw	r30, r26
    5594:	0d c0       	rjmp	.+26     	; 0x55b0 <__udivmodsi4_ep>

00005596 <__udivmodsi4_loop>:
    5596:	aa 1f       	adc	r26, r26
    5598:	bb 1f       	adc	r27, r27
    559a:	ee 1f       	adc	r30, r30
    559c:	ff 1f       	adc	r31, r31
    559e:	a2 17       	cp	r26, r18
    55a0:	b3 07       	cpc	r27, r19
    55a2:	e4 07       	cpc	r30, r20
    55a4:	f5 07       	cpc	r31, r21
    55a6:	20 f0       	brcs	.+8      	; 0x55b0 <__udivmodsi4_ep>
    55a8:	a2 1b       	sub	r26, r18
    55aa:	b3 0b       	sbc	r27, r19
    55ac:	e4 0b       	sbc	r30, r20
    55ae:	f5 0b       	sbc	r31, r21

000055b0 <__udivmodsi4_ep>:
    55b0:	66 1f       	adc	r22, r22
    55b2:	77 1f       	adc	r23, r23
    55b4:	88 1f       	adc	r24, r24
    55b6:	99 1f       	adc	r25, r25
    55b8:	1a 94       	dec	r1
    55ba:	69 f7       	brne	.-38     	; 0x5596 <__udivmodsi4_loop>
    55bc:	60 95       	com	r22
    55be:	70 95       	com	r23
    55c0:	80 95       	com	r24
    55c2:	90 95       	com	r25
    55c4:	9b 01       	movw	r18, r22
    55c6:	ac 01       	movw	r20, r24
    55c8:	bd 01       	movw	r22, r26
    55ca:	cf 01       	movw	r24, r30
    55cc:	08 95       	ret

000055ce <__tablejump2__>:
    55ce:	ee 0f       	add	r30, r30
    55d0:	ff 1f       	adc	r31, r31

000055d2 <__tablejump__>:
    55d2:	05 90       	lpm	r0, Z+
    55d4:	f4 91       	lpm	r31, Z+
    55d6:	e0 2d       	mov	r30, r0
    55d8:	09 94       	ijmp

000055da <_exit>:
    55da:	f8 94       	cli

000055dc <__stop_program>:
    55dc:	ff cf       	rjmp	.-2      	; 0x55dc <__stop_program>
